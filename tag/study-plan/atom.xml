<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://samirpaul.in</id>
    <title>Samir Paul • Posts by &#34;study-plan&#34; tag</title>
    <link href="https://samirpaul.in" />
    <updated>2023-08-15T04:24:52.000Z</updated>
    <category term="interviewbit" />
    <category term="LeetCode" />
    <category term="geeksforgeeks" />
    <category term="blog" />
    <category term="coding" />
    <category term="computer-science" />
    <category term="Binary Search" />
    <category term="caching" />
    <category term="system-design" />
    <category term="design-interview" />
    <category term="preparation" />
    <category term="study-plan" />
    <category term="computer-networks" />
    <category term="computer-networks-notes" />
    <category term="projects" />
    <category term="tutorials" />
    <category term="list-of-project-based-tutorials" />
    <category term="curated-list" />
    <category term="DSAlgo" />
    <category term="dsa-in-python" />
    <category term="data-structures-and-algorithms" />
    <category term="dp" />
    <category term="Dynamic Programming" />
    <category term="Patterns" />
    <category term="embed-musicapp" />
    <category term="music" />
    <category term="embeded" />
    <category term="music-player" />
    <category term="programmable-search" />
    <category term="Graph" />
    <category term="distributed-systems" />
    <category term="Greedy" />
    <category term="two pointers problems" />
    <category term="python" />
    <category term="python-frameworks" />
    <category term="python-libraries" />
    <category term="technical-interview" />
    <category term="interview-questions" />
    <category term="python3" />
    <category term="file-compressor" />
    <category term="flask-application" />
    <category term="python-server" />
    <category term="pdfnet" />
    <category term="pdf-compression" />
    <category term="online-pdf-compressor" />
    <category term="pdfnetpython" />
    <category term="open-external-links" />
    <category term="javascript" />
    <category term="Operating System" />
    <category term="Placements" />
    <category term="OS" />
    <category term="project" />
    <category term="pygame" />
    <category term="python-game" />
    <category term="pyshooter" />
    <category term="shooter-game" />
    <category term="Python Cheat Sheet" />
    <category term="sql" />
    <category term="nosql" />
    <category term="sharding" />
    <category term="data-partitioning" />
    <category term="certificates" />
    <category term="udemy" />
    <category term="coursera" />
    <category term="datacamp" />
    <category term="sql-joins" />
    <category term="web-development" />
    <category term="lossless-data-compression" />
    <category term="online-file-compressor" />
    <category term="txt-compressor" />
    <category term="algorithm" />
    <category term="databases" />
    <category term="short-url" />
    <category term="url-shortner" />
    <category term="networking" />
    <entry>
        <id>https://samirpaul.in/posts/complete-computer-science-study-plan-to-become-a-software-engineer/</id>
        <title>Complete Computer Science Study Plan to Become a Software Engineer</title>
        <link rel="alternate" href="https://samirpaul.in/posts/complete-computer-science-study-plan-to-become-a-software-engineer/"/>
        <content type="html">&lt;h2 id=&#34;Table-of-Contents&#34;&gt;&lt;a href=&#34;#Table-of-Contents&#34; class=&#34;headerlink&#34; title=&#34;Table of Contents&#34;&gt;&lt;/a&gt;Table of Contents&lt;/h2&gt;&lt;h3 id=&#34;The-Study-Plan&#34;&gt;&lt;a href=&#34;#The-Study-Plan&#34; class=&#34;headerlink&#34; title=&#34;The Study Plan&#34;&gt;&lt;/a&gt;The Study Plan&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;What is it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#why-use-it&#34;&gt;Why use it?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-to-use-it&#34;&gt;How to use it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dont-feel-you-arent-smart-enough&#34;&gt;Don’t feel you aren’t smart enough&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a-note-about-video-resources&#34;&gt;A Note About Video Resources&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#choose-a-programming-language&#34;&gt;Choose a Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#books-for-data-structures-and-algorithms&#34;&gt;Books for Data Structures and Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interview-prep-books&#34;&gt;Interview Prep Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dont-make-my-mistakes&#34;&gt;Don’t Make My Mistakes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#what-you-wont-see-covered&#34;&gt;What you Won’t See Covered&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#the-daily-plan&#34;&gt;The Daily Plan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#coding-question-practice&#34;&gt;Coding Question Practice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#coding-problems&#34;&gt;Coding Problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Topics-of-Study&#34;&gt;&lt;a href=&#34;#Topics-of-Study&#34; class=&#34;headerlink&#34; title=&#34;Topics of Study&#34;&gt;&lt;/a&gt;Topics of Study&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#algorithmic-complexity--big-o--asymptotic-analysis&#34;&gt;Algorithmic complexity &amp;#x2F; Big-O &amp;#x2F; Asymptotic analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#data-structures&#34;&gt;Data Structures&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#arrays&#34;&gt;Arrays&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linked-lists&#34;&gt;Linked Lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#stack&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#queue&#34;&gt;Queue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hash-table&#34;&gt;Hash table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#more-knowledge&#34;&gt;More Knowledge&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#binary-search&#34;&gt;Binary search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bitwise-operations&#34;&gt;Bitwise operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#trees&#34;&gt;Trees&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#trees---intro&#34;&gt;Trees - Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#binary-search-trees-bsts&#34;&gt;Binary search trees: BSTs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#heap--priority-queue--binary-heap&#34;&gt;Heap &amp;#x2F; Priority Queue &amp;#x2F; Binary Heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;balanced search trees (general concept, not details)&lt;/li&gt;
&lt;li&gt;traversals: preorder, inorder, postorder, BFS, DFS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#sorting&#34;&gt;Sorting&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;selection&lt;/li&gt;
&lt;li&gt;insertion&lt;/li&gt;
&lt;li&gt;heapsort&lt;/li&gt;
&lt;li&gt;quicksort&lt;/li&gt;
&lt;li&gt;merge sort&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#graphs&#34;&gt;Graphs&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;directed&lt;/li&gt;
&lt;li&gt;undirected&lt;/li&gt;
&lt;li&gt;adjacency matrix&lt;/li&gt;
&lt;li&gt;adjacency list&lt;/li&gt;
&lt;li&gt;traversals: BFS, DFS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#even-more-knowledge&#34;&gt;Even More Knowledge&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#recursion&#34;&gt;Recursion&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#dynamic-programming&#34;&gt;Dynamic Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#design-patterns&#34;&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#combinatorics-n-choose-k--probability&#34;&gt;Combinatorics (n choose k) &amp;amp; Probability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#np-np-complete-and-approximation-algorithms&#34;&gt;NP, NP-Complete and Approximation Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#how-computers-process-a-program&#34;&gt;How computers process a program&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#caches&#34;&gt;Caches&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#processes-and-threads&#34;&gt;Processes and Threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#string-searching--manipulations&#34;&gt;String searching &amp;amp; manipulations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#tries&#34;&gt;Tries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#floating-point-numbers&#34;&gt;Floating Point Numbers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unicode&#34;&gt;Unicode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#endianness&#34;&gt;Endianness&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#networking&#34;&gt;Networking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#final-review&#34;&gt;Final Review&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Getting-the-Job&#34;&gt;&lt;a href=&#34;#Getting-the-Job&#34; class=&#34;headerlink&#34; title=&#34;Getting the Job&#34;&gt;&lt;/a&gt;Getting the Job&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#update-your-resume&#34;&gt;Update Your Resume&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#find-a-job&#34;&gt;Find a Job&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#interview-process--general-interview-prep&#34;&gt;Interview Process &amp;amp; General Interview Prep&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#be-thinking-of-for-when-the-interview-comes&#34;&gt;Be thinking of for when the interview comes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#have-questions-for-the-interviewer&#34;&gt;Have questions for the interviewer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#once-youve-got-the-job&#34;&gt;Once You’ve Got The Job&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;—————- Everything below this point is optional —————-&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;Optional-Extra-Topics-Resources&#34;&gt;&lt;a href=&#34;#Optional-Extra-Topics-Resources&#34; class=&#34;headerlink&#34; title=&#34;Optional Extra Topics &amp;amp; Resources&#34;&gt;&lt;/a&gt;Optional Extra Topics &amp;amp; Resources&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#additional-books&#34;&gt;Additional Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#system-design-scalability-data-handling&#34;&gt;System Design, Scalability, Data Handling&lt;/a&gt; (if you have 4+ years experience)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#additional-learning&#34;&gt;Additional Learning&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#compilers&#34;&gt;Compilers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#emacs-and-vim&#34;&gt;Emacs and vi(m)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#unix-command-line-tools&#34;&gt;Unix command line tools&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#information-theory-videos&#34;&gt;Information theory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parity--hamming-code-videos&#34;&gt;Parity &amp;amp; Hamming Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#entropy&#34;&gt;Entropy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#cryptography&#34;&gt;Cryptography&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#compression&#34;&gt;Compression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#computer-security&#34;&gt;Computer Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#garbage-collection&#34;&gt;Garbage collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#parallel-programming&#34;&gt;Parallel Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#messaging-serialization-and-queueing-systems&#34;&gt;Messaging, Serialization, and Queueing Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#a&#34;&gt;A*&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#fast-fourier-transform&#34;&gt;Fast Fourier Transform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#bloom-filter&#34;&gt;Bloom Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#hyperloglog&#34;&gt;HyperLogLog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#locality-sensitive-hashing&#34;&gt;Locality-Sensitive Hashing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#van-emde-boas-trees&#34;&gt;van Emde Boas Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#augmented-data-structures&#34;&gt;Augmented Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#balanced-search-trees&#34;&gt;Balanced search trees&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;AVL trees&lt;/li&gt;
&lt;li&gt;Splay trees&lt;/li&gt;
&lt;li&gt;Red&amp;#x2F;black trees&lt;/li&gt;
&lt;li&gt;2-3 search trees&lt;/li&gt;
&lt;li&gt;2-3-4 Trees (aka 2-4 trees)&lt;/li&gt;
&lt;li&gt;N-ary (K-ary, M-ary) trees&lt;/li&gt;
&lt;li&gt;B-Trees&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#k-d-trees&#34;&gt;k-D Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#skip-lists&#34;&gt;Skip lists&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#network-flows&#34;&gt;Network Flows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#disjoint-sets--union-find&#34;&gt;Disjoint Sets &amp;amp; Union Find&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#math-for-fast-processing&#34;&gt;Math for Fast Processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#treap&#34;&gt;Treap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#linear-programming-videos&#34;&gt;Linear Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#geometry-convex-hull-videos&#34;&gt;Geometry, Convex hull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#discrete-math&#34;&gt;Discrete math&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#additional-detail-on-some-subjects&#34;&gt;Additional Detail on Some Subjects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#video-series&#34;&gt;Video Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#computer-science-courses&#34;&gt;Computer Science Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#papers&#34;&gt;Papers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Why-use-it&#34;&gt;&lt;a href=&#34;#Why-use-it&#34; class=&#34;headerlink&#34; title=&#34;Why use it?&#34;&gt;&lt;/a&gt;Why use it?&lt;/h2&gt;&lt;p&gt;If you want to work as a software engineer for a large company, these are the things you have to know.&lt;/p&gt;
&lt;p&gt;If you missed out on getting a degree in computer science, like I did, this will catch you up and save four years of your life.&lt;/p&gt;
&lt;p&gt;When I started this project, I didn’t know a stack from a heap, didn’t know Big-O anything, or anything about trees, or how to&lt;br&gt;traverse a graph. If I had to code a sorting algorithm, I can tell ya it would have been terrible.&lt;br&gt;Every data structure I had ever used was built into the language, and I didn’t know how they worked&lt;br&gt;under the hood at all. I never had to manage memory unless a process I was running would give an “out of&lt;br&gt;memory” error, and then I’d have to find a workaround. I used a few multidimensional arrays in my life and&lt;br&gt;thousands of associative arrays, but I never created data structures from scratch.&lt;/p&gt;
&lt;p&gt;It’s a long plan. It may take you months. If you are familiar with a lot of this already it will take you a lot less time.&lt;/p&gt;
&lt;h2 id=&#34;How-to-use-it&#34;&gt;&lt;a href=&#34;#How-to-use-it&#34; class=&#34;headerlink&#34; title=&#34;How to use it&#34;&gt;&lt;/a&gt;How to use it&lt;/h2&gt;&lt;p&gt;Everything below is an outline, and you should tackle the items in order from top to bottom.&lt;/p&gt;
&lt;p&gt;I’m using GitHub’s special markdown flavor, including tasks lists to track progress.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown&#34;&gt;More about GitHub-flavored markdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;If-you-don’t-want-to-use-git&#34;&gt;&lt;a href=&#34;#If-you-don’t-want-to-use-git&#34; class=&#34;headerlink&#34; title=&#34;If you don’t want to use git&#34;&gt;&lt;/a&gt;If you don’t want to use git&lt;/h3&gt;&lt;p&gt;On this page, click the Code button near the top, then click “Download ZIP”. Unzip the file and you can work with the text files.&lt;/p&gt;
&lt;p&gt;If you’re open in a code editor that understands markdown, you’ll see everything formatted nicely.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d3j2pkmjtin6ou.cloudfront.net/how-to-download-as-zip.png&#34; alt=&#34;How to download the repo as a zip file&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;If-you’re-comfortable-with-git&#34;&gt;&lt;a href=&#34;#If-you’re-comfortable-with-git&#34; class=&#34;headerlink&#34; title=&#34;If you’re comfortable with git&#34;&gt;&lt;/a&gt;If you’re comfortable with git&lt;/h3&gt;&lt;p&gt;Create a new branch so you can check items like this, just put an x in the brackets: [x]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Fork the GitHub repo:&lt;/strong&gt;&lt;/em&gt; &lt;code&gt;https://github.com/jwasham/coding-interview-university&lt;/code&gt; by clicking on the Fork button.&lt;/p&gt;
&lt;p&gt; &lt;img src=&#34;https://d3j2pkmjtin6ou.cloudfront.net/fork-button.png&#34; alt=&#34;Fork the GitHub repo&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Clone to your local repo:&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git clone git@github.com:&amp;lt;your_github_username&amp;gt;/coding-interview-university.git&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;cd coding-interview-university&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git checkout -b progress&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git remote add jwasham https://github.com/jwasham/coding-interview-university&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git fetch --all&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Mark all boxes with X after you completed your changes:&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;git add .&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git commit -m &amp;quot;Marked x&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git rebase jwasham/main&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git push --set-upstream origin progress&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;git push --force&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Don’t-feel-you-aren’t-smart-enough&#34;&gt;&lt;a href=&#34;#Don’t-feel-you-aren’t-smart-enough&#34; class=&#34;headerlink&#34; title=&#34;Don’t feel you aren’t smart enough&#34;&gt;&lt;/a&gt;Don’t feel you aren’t smart enough&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Successful software engineers are smart, but many have an insecurity that they aren’t smart enough.&lt;/li&gt;
&lt;li&gt;Following videos may help you overcome this insecurity:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0SARbwvhupQ&#34;&gt;The myth of the Genius Programmer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1i8ylq4j_EY&#34;&gt;It’s Dangerous to Go Alone: Battling the Invisible Monsters in Tech&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;A-Note-About-Video-Resources&#34;&gt;&lt;a href=&#34;#A-Note-About-Video-Resources&#34; class=&#34;headerlink&#34; title=&#34;A Note About Video Resources&#34;&gt;&lt;/a&gt;A Note About Video Resources&lt;/h2&gt;&lt;p&gt;Some videos are available only by enrolling in a Coursera or EdX class. These are called MOOCs.&lt;br&gt;Sometimes the classes are not in session so you have to wait a couple of months, so you have no access.&lt;/p&gt;
&lt;p&gt;It would be great to replace the online course resources with free and always-available public sources,&lt;br&gt;such as YouTube videos (preferably university lectures), so that you people can study these anytime,&lt;br&gt;not just when a specific online course is in session.&lt;/p&gt;
&lt;h2 id=&#34;Choose-a-Programming-Language&#34;&gt;&lt;a href=&#34;#Choose-a-Programming-Language&#34; class=&#34;headerlink&#34; title=&#34;Choose a Programming Language&#34;&gt;&lt;/a&gt;Choose a Programming Language&lt;/h2&gt;&lt;p&gt;You’ll need to choose a programming language for the coding interviews you do,&lt;br&gt;but you’ll also need to find a language that you can use to study computer science concepts.&lt;/p&gt;
&lt;p&gt;Preferably the language would be the same, so that you only need to be proficient in one.&lt;/p&gt;
&lt;h3 id=&#34;For-this-Study-Plan&#34;&gt;&lt;a href=&#34;#For-this-Study-Plan&#34; class=&#34;headerlink&#34; title=&#34;For this Study Plan&#34;&gt;&lt;/a&gt;For this Study Plan&lt;/h3&gt;&lt;p&gt;When I did the study plan, I used 2 languages for most of it: C and Python&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C: Very low level. Allows you to deal with pointers and memory allocation&amp;#x2F;deallocation, so you feel the data structures&lt;br&gt;  and algorithms in your bones. In higher level languages like Python or Java, these are hidden from you. In day to day work, that’s terrific,&lt;br&gt;  but when you’re learning how these low-level data structures are built, it’s great to feel close to the metal.&lt;ul&gt;
&lt;li&gt;C is everywhere. You’ll see examples in books, lectures, videos, &lt;em&gt;everywhere&lt;/em&gt; while you’re studying.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628&#34;&gt;The C Programming Language, Vol 2&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;This is a short book, but it will give you a great handle on the C language and if you practice it a little&lt;br&gt;  you’ll quickly get proficient. Understanding C helps you understand how programs and memory work.&lt;/li&gt;
&lt;li&gt;You don’t need to go super deep in the book (or even finish it). Just get to where you’re comfortable reading and writing in C.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lekkas/c-algorithms&#34;&gt;Answers to questions in the book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Python: Modern and very expressive, I learned it because it’s just super useful and also allows me to write less code in an interview.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is my preference. You do what you like, of course.&lt;/p&gt;
&lt;p&gt;You may not need it, but here are some sites for learning a new language:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://exercism.org/tracks&#34;&gt;Exercism&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.codewars.com/&#34;&gt;Codewars&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackerearth.com/for-developers/&#34;&gt;HackerEarth&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.scaler.com/topics/&#34;&gt;Scaler Topics (Java, C++)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;For-your-Coding-Interview&#34;&gt;&lt;a href=&#34;#For-your-Coding-Interview&#34; class=&#34;headerlink&#34; title=&#34;For your Coding Interview&#34;&gt;&lt;/a&gt;For your Coding Interview&lt;/h3&gt;&lt;p&gt;You can use a language you are comfortable in to do the coding part of the interview, but for large companies, these are solid choices:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You could also use these, but read around first. There may be caveats:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is an article I wrote about choosing a language for the interview:&lt;br&gt;&lt;a href=&#34;https://startupnextdoor.com/important-pick-one-language-for-the-coding-interview/&#34;&gt;Pick One Language for the Coding Interview&lt;/a&gt;.&lt;br&gt;This is the original article my post was based on: &lt;a href=&#34;https://web.archive.org/web/20210516054124/http://blog.codingforinterviews.com/best-programming-language-jobs/&#34;&gt;Choosing a Programming Language for Interviews&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You need to be very comfortable in the language and be knowledgeable.&lt;/p&gt;
&lt;p&gt;Read more about choices: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.byte-by-byte.com/choose-the-right-language-for-your-coding-interview/&#34;&gt;Choose the Right Language for Your Coding Interview&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Books-for-Data-Structures-and-Algorithms&#34;&gt;&lt;a href=&#34;#Books-for-Data-Structures-and-Algorithms&#34; class=&#34;headerlink&#34; title=&#34;Books for Data Structures and Algorithms&#34;&gt;&lt;/a&gt;Books for Data Structures and Algorithms&lt;/h2&gt;&lt;p&gt;This book will form your foundation for computer science.&lt;/p&gt;
&lt;p&gt;Just choose one, in a language that you will be comfortable with. You’ll be doing a lot of reading and coding.&lt;/p&gt;
&lt;h3 id=&#34;C&#34;&gt;&lt;a href=&#34;#C&#34; class=&#34;headerlink&#34; title=&#34;C&#34;&gt;&lt;/a&gt;C&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Algorithms-Parts-1-5-Bundle-Fundamentals/dp/0201756080&#34;&gt;Algorithms in C, Parts 1-5 (Bundle), 3rd Edition&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Python&#34;&gt;&lt;a href=&#34;#Python&#34; class=&#34;headerlink&#34; title=&#34;Python&#34;&gt;&lt;/a&gt;Python&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275/&#34;&gt;Data Structures and Algorithms in Python&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;by Goodrich, Tamassia, Goldwasser&lt;/li&gt;
&lt;li&gt;I loved this book. It covered everything and more.&lt;/li&gt;
&lt;li&gt;Pythonic code&lt;/li&gt;
&lt;li&gt;my glowing book report: &lt;a href=&#34;https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/&#34;&gt;https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Java&#34;&gt;&lt;a href=&#34;#Java&#34; class=&#34;headerlink&#34; title=&#34;Java&#34;&gt;&lt;/a&gt;Java&lt;/h3&gt;&lt;p&gt;Your choice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goodrich, Tamassia, Goldwasser&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/1118771338/&#34;&gt;Data Structures and Algorithms in Java&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sedgewick and Wayne:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/&#34;&gt;Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Free Coursera course that covers the book (taught by the authors!):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/algorithms-part1&#34;&gt;Algorithms I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2&#34;&gt;Algorithms II&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;C-1&#34;&gt;&lt;a href=&#34;#C-1&#34; class=&#34;headerlink&#34; title=&#34;C++&#34;&gt;&lt;/a&gt;C++&lt;/h3&gt;&lt;p&gt;Your choice:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Goodrich, Tamassia, and Mount&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/0470383275&#34;&gt;Data Structures and Algorithms in C++, 2nd Edition&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sedgewick and Wayne&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Algorithms-Parts-1-4-Fundamentals-Structure/dp/0201350882/&#34;&gt;Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Algorithms-Part-Graph-3rd-Pt-5/dp/0201361183/&#34;&gt;Algorithms in C++ Part 5: Graph Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Interview-Prep-Books&#34;&gt;&lt;a href=&#34;#Interview-Prep-Books&#34; class=&#34;headerlink&#34; title=&#34;Interview Prep Books&#34;&gt;&lt;/a&gt;Interview Prep Books&lt;/h2&gt;&lt;p&gt;You don’t need to buy a bunch of these. Honestly “Cracking the Coding Interview” is probably enough,&lt;br&gt;but I bought more to give myself more practice. But I always do too much.&lt;/p&gt;
&lt;p&gt;I bought both of these. They gave me plenty of practice.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Programming-Interviews-Exposed-Through-Interview/dp/111941847X/&#34;&gt;Programming Interviews Exposed: Coding Your Way Through the Interview, 4th Edition&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Answers in C++ and Java&lt;/li&gt;
&lt;li&gt;This is a good warm-up for Cracking the Coding Interview&lt;/li&gt;
&lt;li&gt;Not too difficult. Most problems may be easier than what you’ll see in an interview (from what I’ve read)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/&#34;&gt;Cracking the Coding Interview, 6th Edition&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;answers in Java&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;If-you-have-tons-of-extra-time&#34;&gt;&lt;a href=&#34;#If-you-have-tons-of-extra-time&#34; class=&#34;headerlink&#34; title=&#34;If you have tons of extra time:&#34;&gt;&lt;/a&gt;If you have tons of extra time:&lt;/h3&gt;&lt;p&gt;Choose one:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Elements-Programming-Interviews-Insiders-Guide/dp/1479274836&#34;&gt;Elements of Programming Interviews (C++ version)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949/&#34;&gt;Elements of Programming Interviews in Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Elements-Programming-Interviews-Java-Insiders/dp/1517435803/&#34;&gt;Elements of Programming Interviews (Java version)&lt;/a&gt;&lt;br&gt;  - &lt;a href=&#34;https://github.com/gardncl/elements-of-programming-interviews&#34;&gt;Companion Project - Method Stub and Test Cases for Every Problem in the Book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Don’t-Make-My-Mistakes&#34;&gt;&lt;a href=&#34;#Don’t-Make-My-Mistakes&#34; class=&#34;headerlink&#34; title=&#34;Don’t Make My Mistakes&#34;&gt;&lt;/a&gt;Don’t Make My Mistakes&lt;/h2&gt;&lt;p&gt;This list grew over many months, and yes, it got out of hand.&lt;/p&gt;
&lt;p&gt;Here are some mistakes I made so you’ll have a better experience. And you’ll save months of time.&lt;/p&gt;
&lt;h3 id=&#34;1-You-Won’t-Remember-it-All&#34;&gt;&lt;a href=&#34;#1-You-Won’t-Remember-it-All&#34; class=&#34;headerlink&#34; title=&#34;1. You Won’t Remember it All&#34;&gt;&lt;/a&gt;1. You Won’t Remember it All&lt;/h3&gt;&lt;p&gt;I watched hours of videos and took copious notes, and months later there was much I didn’t remember. I spent 3 days going&lt;br&gt;through my notes and making flashcards, so I could review. I didn’t need all of that knowledge.&lt;/p&gt;
&lt;p&gt;Please, read so you won’t make my mistakes:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://startupnextdoor.com/retaining-computer-science-knowledge/&#34;&gt;Retaining Computer Science Knowledge&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;2-Use-Flashcards&#34;&gt;&lt;a href=&#34;#2-Use-Flashcards&#34; class=&#34;headerlink&#34; title=&#34;2. Use Flashcards&#34;&gt;&lt;/a&gt;2. Use Flashcards&lt;/h3&gt;&lt;p&gt;To solve the problem, I made a little flashcards site where I could add flashcards of 2 types: general and code.&lt;br&gt;Each card has different formatting. I made a mobile-first website, so I could review on my phone or tablet, wherever I am.&lt;/p&gt;
&lt;p&gt;Make your own for free:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jwasham/computer-science-flash-cards&#34;&gt;Flashcards site repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;I DON’T RECOMMEND using my flashcards.&lt;/strong&gt; There are too many and most of them are trivia that you don’t need.&lt;/p&gt;
&lt;p&gt;But if you don’t want to listen to me, here you go:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham.db&#34;&gt;My flash cards database (1200 cards)&lt;/a&gt;:&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham-extreme.db&#34;&gt;My flash cards database (extreme - 1800 cards)&lt;/a&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind I went overboard and have cards covering everything from assembly language and Python trivia to machine learning and statistics.&lt;br&gt;It’s way too much for what’s required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note on flashcards:&lt;/strong&gt; The first time you recognize you know the answer, don’t mark it as known. You have to see the&lt;br&gt;same card and answer it several times correctly before you really know it. Repetition will put that knowledge deeper in&lt;br&gt;your brain.&lt;/p&gt;
&lt;p&gt;An alternative to using my flashcard site is &lt;a href=&#34;http://ankisrs.net/&#34;&gt;Anki&lt;/a&gt;, which has been recommended to me numerous times.&lt;br&gt;It uses a repetition system to help you remember. It’s user-friendly, available on all platforms and has a cloud sync system.&lt;br&gt;It costs $25 on iOS but is free on other platforms.&lt;/p&gt;
&lt;p&gt;My flashcard database in Anki format: &lt;a href=&#34;https://ankiweb.net/shared/info/25173560&#34;&gt;https://ankiweb.net/shared/info/25173560&lt;/a&gt; (thanks &lt;a href=&#34;https://github.com/xiewenya&#34;&gt;@xiewenya&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Some students have mentioned formatting issues with white space that can be fixed by doing the following: open deck, edit card, click cards, select the “styling” radio button, add the member “white-space: pre;” to the card class.&lt;/p&gt;
&lt;h3 id=&#34;3-Do-Coding-Interview-Questions-While-You’re-Learning&#34;&gt;&lt;a href=&#34;#3-Do-Coding-Interview-Questions-While-You’re-Learning&#34; class=&#34;headerlink&#34; title=&#34;3. Do Coding Interview Questions While You’re Learning&#34;&gt;&lt;/a&gt;3. Do Coding Interview Questions While You’re Learning&lt;/h3&gt;&lt;p&gt;THIS IS VERY IMPORTANT.&lt;/p&gt;
&lt;p&gt;Start doing coding interview questions while you’re learning data structures and algorithms.&lt;/p&gt;
&lt;p&gt;You need to apply what you’re learning to solving problems, or you’ll forget. I made this mistake. &lt;/p&gt;
&lt;p&gt;Once you’ve learned a topic, and feel somewhat comfortable with it, for example, &lt;strong&gt;linked lists&lt;/strong&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open one of the &lt;a href=&#34;#interview-prep-books&#34;&gt;coding interview books&lt;/a&gt; (or coding problem websites, listed below) &lt;/li&gt;
&lt;li&gt;Do 2 or 3 questions regarding linked lists. &lt;/li&gt;
&lt;li&gt;Move on to the next learning topic.&lt;/li&gt;
&lt;li&gt;Later, go back and do another 2 or 3 linked list problems.&lt;/li&gt;
&lt;li&gt;Do this with each new topic you learn.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Keep doing problems while you’re learning all this stuff, not after.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You’re not being hired for knowledge, but how you apply the knowledge.&lt;/p&gt;
&lt;p&gt;There are many resources for this, listed below. Keep going.&lt;/p&gt;
&lt;h3 id=&#34;4-Focus&#34;&gt;&lt;a href=&#34;#4-Focus&#34; class=&#34;headerlink&#34; title=&#34;4. Focus&#34;&gt;&lt;/a&gt;4. Focus&lt;/h3&gt;&lt;p&gt;There are a lot of distractions that can take up valuable time. Focus and concentration are hard. Turn on some music&lt;br&gt;without lyrics and you’ll be able to focus pretty well.&lt;/p&gt;
&lt;h2 id=&#34;What-you-won’t-see-covered&#34;&gt;&lt;a href=&#34;#What-you-won’t-see-covered&#34; class=&#34;headerlink&#34; title=&#34;What you won’t see covered&#34;&gt;&lt;/a&gt;What you won’t see covered&lt;/h2&gt;&lt;p&gt;These are prevalent technologies but not part of this study plan:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL&lt;/li&gt;
&lt;li&gt;Javascript&lt;/li&gt;
&lt;li&gt;HTML, CSS, and other front-end technologies&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;The-Daily-Plan&#34;&gt;&lt;a href=&#34;#The-Daily-Plan&#34; class=&#34;headerlink&#34; title=&#34;The Daily Plan&#34;&gt;&lt;/a&gt;The Daily Plan&lt;/h2&gt;&lt;p&gt;This course goes over a lot of subjects. Each will probably take you a few days, or maybe even a week or more. It depends on your schedule.&lt;/p&gt;
&lt;p&gt;Each day, take the next subject in the list, watch some videos about that subject, and then write an implementation&lt;br&gt;of that data structure or algorithm in the language you chose for this course.&lt;/p&gt;
&lt;p&gt;You can see my code here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jwasham/practice-c&#34;&gt;C&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jwasham/practice-cpp&#34;&gt;C++&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jwasham/practice-python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You don’t need to memorize every algorithm. You just need to be able to understand it enough to be able to write your own implementation.&lt;/p&gt;
&lt;h2 id=&#34;Coding-Question-Practice&#34;&gt;&lt;a href=&#34;#Coding-Question-Practice&#34; class=&#34;headerlink&#34; title=&#34;Coding Question Practice&#34;&gt;&lt;/a&gt;Coding Question Practice&lt;/h2&gt;&lt;p&gt;🤔 Why is this here? I’m not ready to interview.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;#3-do-coding-interview-questions-while-youre-learning&#34;&gt;Then go back and read this.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Why you need to practice doing programming problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Problem recognition, and where the right data structures and algorithms fit in&lt;/li&gt;
&lt;li&gt;Gathering requirements for the problem&lt;/li&gt;
&lt;li&gt;Talking your way through the problem like you will in the interview&lt;/li&gt;
&lt;li&gt;Coding on a whiteboard or paper, not a computer&lt;/li&gt;
&lt;li&gt;Coming up with time and space complexity for your solutions (see Big-O below)&lt;/li&gt;
&lt;li&gt;Testing your solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is a great intro for methodical, communicative problem solving in an interview. You’ll get this from the programming&lt;br&gt;interview books, too, but I found this outstanding:&lt;br&gt;&lt;a href=&#34;http://www.hiredintech.com/algorithm-design/&#34;&gt;Algorithm design canvas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Write code on a whiteboard or paper, not a computer. Test with some sample inputs. Then type it and test it out on a computer.&lt;/p&gt;
&lt;p&gt;If you don’t have a whiteboard at home, pick up a large drawing pad from an art store. You can sit on the couch and practice.&lt;br&gt;This is my “sofa whiteboard”. I added the pen in the photo just for scale. If you use a pen, you’ll wish you could erase.&lt;br&gt;Gets messy quick. &lt;strong&gt;I use a pencil and eraser.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://d3j2pkmjtin6ou.cloudfront.net/art_board_sm_2.jpg&#34; alt=&#34;my sofa whiteboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coding question practice is not about memorizing answers to programming problems.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;Coding-Problems&#34;&gt;&lt;a href=&#34;#Coding-Problems&#34; class=&#34;headerlink&#34; title=&#34;Coding Problems&#34;&gt;&lt;/a&gt;Coding Problems&lt;/h2&gt;&lt;p&gt;Don’t forget your key coding interview books &lt;a href=&#34;#interview-prep-books&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Solving Problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.topcoder.com/thrive/articles/How%20To%20Find%20a%20Solution&#34;&gt;How to Find a Solution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.topcoder.com/thrive/articles/How%20To%20Dissect%20a%20Topcoder%20Problem%20Statement%20Content&#34;&gt;How to Dissect a Topcoder Problem Statement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coding Interview Question Videos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLamzFoFxwoNjPfxzaWqs7cZGsPYy0x_gI&#34;&gt;IDeserve (88 videos)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/user/tusharroy2525/playlists?shelf_id=2&amp;view=50&amp;sort=dd&#34;&gt;Tushar Roy (5 playlists)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Super for walkthroughs of problem solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLU_sdQYzUj2keVENTP0a5rdykRSgg9Wp-&#34;&gt;Nick White - LeetCode Solutions (187 Videos)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Good explanations of solution and the code&lt;/li&gt;
&lt;li&gt;You can watch several in a short time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtube.com/FisherCoder&#34;&gt;FisherCoder - LeetCode Solutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Challenge&amp;#x2F;Practice sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/&#34;&gt;LeetCode&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;My favorite coding problem site. It’s worth the subscription money for the 1-2 months you’ll likely be preparing.&lt;/li&gt;
&lt;li&gt;See Nick White and FisherCoder Videos above for code walk-throughs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hackerrank.com/&#34;&gt;HackerRank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.topcoder.com/&#34;&gt;TopCoder&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codeforces.com/&#34;&gt;Codeforces&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://codility.com/programmers/&#34;&gt;Codility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://practice.geeksforgeeks.org/explore/?page=1&#34;&gt;Geeks for Geeks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.interviewbit.com/&#34;&gt;InterviewBit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.algoexpert.io/product&#34;&gt;AlgoExpert&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Created by Google engineers, this is also an excellent resource to hone your skills.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://projecteuler.net/&#34;&gt;Project Euler&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;very math focused, and not really suited for coding interviews&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Let’s-Get-Started&#34;&gt;&lt;a href=&#34;#Let’s-Get-Started&#34; class=&#34;headerlink&#34; title=&#34;Let’s Get Started&#34;&gt;&lt;/a&gt;Let’s Get Started&lt;/h2&gt;&lt;p&gt;Alright, enough talk, let’s learn!&lt;/p&gt;
&lt;p&gt;But don’t forget to do coding problems from above while you learn!&lt;/p&gt;
&lt;h2 id=&#34;Algorithmic-complexity-Big-O-Asymptotic-analysis&#34;&gt;&lt;a href=&#34;#Algorithmic-complexity-Big-O-Asymptotic-analysis&#34; class=&#34;headerlink&#34; title=&#34;Algorithmic complexity &amp;#x2F; Big-O &amp;#x2F; Asymptotic analysis&#34;&gt;&lt;/a&gt;Algorithmic complexity &amp;#x2F; Big-O &amp;#x2F; Asymptotic analysis&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Nothing to implement here, you’re just watching videos and taking notes! Yay!&lt;/li&gt;
&lt;li&gt;There are a lot of videos here. Just watch enough until you understand it. You can always come back and review.&lt;/li&gt;
&lt;li&gt;Don’t worry if you don’t understand all the math behind it.&lt;/li&gt;
&lt;li&gt;You just need to understand how to express the complexity of an algorithm in terms of Big-O.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=iOq5kSKqeR4&#34;&gt;Harvard CS50 - Asymptotic Notation (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=V6mKVRU1evU&#34;&gt;Big O Notations (general quick tutorial) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ei-A_wy5Yxw&amp;index=2&amp;list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN&#34;&gt;Big O Notation (and Omega and Theta) - best mathematical explanation (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=z1mkCe3kVUA&#34;&gt;Skiena (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_VIS4YDpuP98&#34;&gt;UC Berkeley Big O (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=B3SpQZaAZP4&amp;index=10&amp;list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN&#34;&gt;Amortized Analysis (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; TopCoder (includes recurrence relations and master theorem):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20one&#34;&gt;Computational Complexity: Section 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20two&#34;&gt;Computational Complexity: Section 2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://bigocheatsheet.com/&#34;&gt;Cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/__vX2sjlpXU&#34;&gt;[Review] Big-O notation in 5 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Well, that’s about enough of that. &lt;/p&gt;
&lt;p&gt;When you go through “Cracking the Coding Interview”, there is a chapter on this, and at the end there is a quiz to see&lt;br&gt;if you can identify the runtime complexity of different algorithms. It’s a super review and test.&lt;/p&gt;
&lt;h2 id=&#34;Data-Structures&#34;&gt;&lt;a href=&#34;#Data-Structures&#34; class=&#34;headerlink&#34; title=&#34;Data Structures&#34;&gt;&lt;/a&gt;Data Structures&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&#34;Arrays&#34;&gt;&lt;a href=&#34;#Arrays&#34; class=&#34;headerlink&#34; title=&#34;Arrays&#34;&gt;&lt;/a&gt;Arrays&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; About Arrays:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/lecture/data-structures/arrays-OsBSF&#34;&gt;Arrays (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_Wp8oiO_CZZE&#34;&gt;UC Berkeley CS61B - Linear and Multi-Dim Arrays (video)&lt;/a&gt; (Start watching from 15m 32s)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/lecture/data-structures/dynamic-arrays-EwbnV&#34;&gt;Dynamic Arrays (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1jtrQqYpt7g&#34;&gt;Jagged Arrays (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement a vector (mutable array with automatic resizing):&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; New raw data array with allocated memory&lt;ul&gt;
&lt;li&gt;can allocate int array under the hood, just not use its features&lt;/li&gt;
&lt;li&gt;start with 16, or if starting number is greater, use power of 2 - 16, 32, 64, 128&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; size() - number of items&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; capacity() - number of items it can hold&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; is_empty()&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; at(index) - returns item at given index, blows up if index out of bounds&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; push(item)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; insert(index, item) - inserts item at index, shifts that index’s value and trailing elements to the right&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; prepend(item) - can use insert above at index 0&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; pop() - remove from end, return value&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; delete(index) - delete item at index, shifting all trailing elements left&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; remove(item) - looks for value and removes index holding it (even if in multiple places)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; find(item) - looks for value and returns first index with that value, -1 if not found&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; resize(new_capacity) &amp;#x2F;&amp;#x2F; private function&lt;ul&gt;
&lt;li&gt;when you reach capacity, resize to double the size&lt;/li&gt;
&lt;li&gt;when popping an item, if size is 1&amp;#x2F;4 of capacity, resize to half&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Time&lt;ul&gt;
&lt;li&gt;O(1) to add&amp;#x2F;remove at end (amortized for allocations for more space), index, or update&lt;/li&gt;
&lt;li&gt;O(n) to insert&amp;#x2F;remove elsewhere&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Space&lt;ul&gt;
&lt;li&gt;contiguous in memory, so proximity helps performance&lt;/li&gt;
&lt;li&gt;space needed &amp;#x3D; (array capacity, which is &amp;gt;&amp;#x3D; n) * size of item, but even if 2n, still O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Linked-Lists&#34;&gt;&lt;a href=&#34;#Linked-Lists&#34; class=&#34;headerlink&#34; title=&#34;Linked Lists&#34;&gt;&lt;/a&gt;Linked Lists&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Description:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/data-structures/singly-linked-lists-kHhgK&#34;&gt;Singly Linked Lists (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_htzJdKoEmO0&#34;&gt;CS 61B - Linked Lists 1 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_-c4I3gFYe3w&#34;&gt;CS 61B - Linked Lists 2 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/F8AbOfQwl1c&#34;&gt;[Review] Linked lists in 4 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=QN6FPiD0Gzo&#34;&gt;C Code (video)&lt;/a&gt;&lt;br&gt;  - not the whole video, just portions about Node struct and memory allocation&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Linked List vs Arrays:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/lecture/data-structures-optimizing-performance/core-linked-lists-vs-arrays-rjBs9&#34;&gt;Core Linked Lists Vs Arrays (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/lecture/data-structures-optimizing-performance/in-the-real-world-lists-vs-arrays-QUaUd&#34;&gt;In The Real World Linked Lists Vs Arrays (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=YQs6IC-vgmo&#34;&gt;Why you should avoid linked lists (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Gotcha: you need pointer to pointer knowledge:&lt;br&gt;  (for when you pass a pointer to a function that may change the address where that pointer points)&lt;br&gt;  This page is just to get a grasp on ptr to ptr. I don’t recommend this list traversal style. Readability and maintainability suffer due to cleverness.&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.eskimo.com/~scs/cclass/int/sx8.html&#34;&gt;Pointers to Pointers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement (I did with tail pointer &amp;amp; without):&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; size() - returns number of data elements in list&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; empty() - bool returns true if empty&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; value_at(index) - returns the value of the nth item (starting at 0 for first)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; push_front(value) - adds an item to the front of the list&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; pop_front() - remove front item and return its value&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; push_back(value) - adds an item at the end&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; pop_back() - removes end item and returns its value&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; front() - get value of front item&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; back() - get value of end item&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; erase(index) - removes node at given index&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; value_n_from_end(n) - returns the value of the node at nth position from the end of the list&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; reverse() - reverses the list&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; remove_value(value) - removes the first item in the list with this value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Doubly-linked List&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/lecture/data-structures/doubly-linked-lists-jpGKD&#34;&gt;Description (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;No need to implement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Stack&#34;&gt;&lt;a href=&#34;#Stack&#34; class=&#34;headerlink&#34; title=&#34;Stack&#34;&gt;&lt;/a&gt;Stack&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/data-structures/stacks-UdKzQ&#34;&gt;Stacks (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/KcT3aVgrrpU&#34;&gt;[Review] Stacks in 3 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Will not implement. Implementing with array is trivial&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Queue&#34;&gt;&lt;a href=&#34;#Queue&#34; class=&#34;headerlink&#34; title=&#34;Queue&#34;&gt;&lt;/a&gt;Queue&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/data-structures/queues-EShpq&#34;&gt;Queue (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Circular_buffer&#34;&gt;Circular buffer&amp;#x2F;FIFO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/D6gu-_tmEpQ&#34;&gt;[Review] Queues in 3 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement using linked-list, with tail pointer:&lt;ul&gt;
&lt;li&gt;enqueue(value) - adds value at position at tail&lt;/li&gt;
&lt;li&gt;dequeue() - returns value and removes least recently added element (front)&lt;/li&gt;
&lt;li&gt;empty()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement using fixed-sized array:&lt;ul&gt;
&lt;li&gt;enqueue(value) - adds item at end of available storage&lt;/li&gt;
&lt;li&gt;dequeue() - returns value and removes least recently added element&lt;/li&gt;
&lt;li&gt;empty()&lt;/li&gt;
&lt;li&gt;full()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Cost:&lt;ul&gt;
&lt;li&gt;a bad implementation using linked list where you enqueue at head and dequeue at tail would be O(n)&lt;br&gt;  because you’d need the next to last element, causing a full traversal each dequeue&lt;/li&gt;
&lt;li&gt;enqueue: O(1) (amortized, linked list and array [probing])&lt;/li&gt;
&lt;li&gt;dequeue: O(1) (linked list and array)&lt;/li&gt;
&lt;li&gt;empty: O(1) (linked list and array)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Hash-table&#34;&gt;&lt;a href=&#34;#Hash-table&#34; class=&#34;headerlink&#34; title=&#34;Hash table&#34;&gt;&lt;/a&gt;Hash table&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Videos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=0M_kIqhwbFo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=8&#34;&gt;Hashing with Chaining (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=BRO7mVIFt08&amp;index=9&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&#34;&gt;Table Doubling, Karp-Rabin (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=rvdJDijO2Ro&amp;index=10&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&#34;&gt;Open Addressing, Cryptographic Hashing (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=C4Kc8xzcA68&#34;&gt;PyCon 2010: The Mighty Dictionary (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=66P5FMkWoVU&#34;&gt;PyCon 2017: The Dictionary Even Mightier (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=z0lJ2k0sl1g&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=11&#34;&gt;(Advanced) Randomization: Universal &amp;amp; Perfect Hashing (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=N0COwN14gt0&amp;list=PL2B4EEwhKD-NbwZ4ezj7gyc_3yNrojKM9&amp;index=4&#34;&gt;(Advanced) Perfect hashing (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/knV86FlSXJ8&#34;&gt;[Review] Hash tables in 4 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Online Courses:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/data-structures-optimizing-performance/core-hash-tables-m7UuP&#34;&gt;Core Hash Tables (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures/home/week/4&#34;&gt;Data Structures (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/data-structures/phone-book-problem-NYZZP&#34;&gt;Phone Book Problem (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; distributed hash tables:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/lecture/data-structures/instant-uploads-and-storage-optimization-in-dropbox-DvaIb&#34;&gt;Instant Uploads And Storage Optimization In Dropbox (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/lecture/data-structures/distributed-hash-tables-tvH8H&#34;&gt;Distributed Hash Tables (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Implement with array using linear probing&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;hash(k, m) - m is size of hash table&lt;/li&gt;
&lt;li&gt;add(key, value) - if key already exists, update value&lt;/li&gt;
&lt;li&gt;exists(key)&lt;/li&gt;
&lt;li&gt;get(key)&lt;/li&gt;
&lt;li&gt;remove(key)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;More-Knowledge&#34;&gt;&lt;a href=&#34;#More-Knowledge&#34; class=&#34;headerlink&#34; title=&#34;More Knowledge&#34;&gt;&lt;/a&gt;More Knowledge&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&#34;Binary-search&#34;&gt;&lt;a href=&#34;#Binary-search&#34; class=&#34;headerlink&#34; title=&#34;Binary search&#34;&gt;&lt;/a&gt;Binary search&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=D5SrAga1pno&#34;&gt;Binary Search (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search&#34;&gt;Binary Search (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.topcoder.com/thrive/articles/Binary%20Search&#34;&gt;detail&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems&#34;&gt;blueprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/fDKIpRe8GW4&#34;&gt;[Review] Binary search in 4 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement:&lt;ul&gt;
&lt;li&gt;binary search (on sorted array of integers)&lt;/li&gt;
&lt;li&gt;binary search using recursion&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Bitwise-operations&#34;&gt;&lt;a href=&#34;#Bitwise-operations&#34; class=&#34;headerlink&#34; title=&#34;Bitwise operations&#34;&gt;&lt;/a&gt;Bitwise operations&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/bits-cheat-sheet.pdf&#34;&gt;Bits cheat sheet&lt;/a&gt; - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Get a really good understanding of manipulating bits with: &amp;amp;, |, ^, ~, &amp;gt;&amp;gt;, &amp;lt;&amp;lt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Word_(computer_architecture)&#34;&gt;words&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Good intro:&lt;br&gt;  &lt;a href=&#34;https://www.youtube.com/watch?v=7jkIUgLC29I&#34;&gt;Bit Manipulation (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=d0AwjSpNXR0&#34;&gt;C Programming Tutorial 2-10: Bitwise Operators (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Bit_manipulation&#34;&gt;Bit Manipulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Bitwise_operation&#34;&gt;Bitwise Operation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://graphics.stanford.edu/~seander/bithacks.html&#34;&gt;Bithacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://bits.stephan-brumme.com/&#34;&gt;The Bit Twiddler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://bits.stephan-brumme.com/interactive.html&#34;&gt;The Bit Twiddler Interactive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ZusiKXcz_ac&#34;&gt;Bit Hacks (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://pconrad.github.io/old_pconrad_cs16/topics/bitOps/&#34;&gt;Practice Operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 2s and 1s complement&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=lKTsv6iVxV4&#34;&gt;Binary: Plusses &amp;amp; Minuses (Why We Use Two’s Complement) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Ones%27_complement&#34;&gt;1s Complement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Two%27s_complement&#34;&gt;2s Complement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Count set bits&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/Hzuzo9NJrlc&#34;&gt;4 ways to count bits in a byte (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan&#34;&gt;Count Bits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer&#34;&gt;How To Count The Number Of Set Bits In a 32 Bit Integer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Swap values:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bits.stephan-brumme.com/swap.html&#34;&gt;Swap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Absolute value:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bits.stephan-brumme.com/absInteger.html&#34;&gt;Absolute Integer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Trees&#34;&gt;&lt;a href=&#34;#Trees&#34; class=&#34;headerlink&#34; title=&#34;Trees&#34;&gt;&lt;/a&gt;Trees&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&#34;Trees-Intro&#34;&gt;&lt;a href=&#34;#Trees-Intro&#34; class=&#34;headerlink&#34; title=&#34;Trees - Intro&#34;&gt;&lt;/a&gt;Trees - Intro&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/data-structures/trees-95qda&#34;&gt;Intro to Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/data-structures/tree-traversal-fr51b&#34;&gt;Tree Traversal (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=uWL6FJhq5fM&#34;&gt;BFS(breadth-first search) and DFS(depth-first search) (video)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;BFS notes:&lt;ul&gt;
&lt;li&gt;level order (BFS, using queue)&lt;/li&gt;
&lt;li&gt;time complexity: O(n)&lt;/li&gt;
&lt;li&gt;space complexity: best: O(1), worst: O(n&amp;#x2F;2)&amp;#x3D;O(n)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DFS notes:&lt;ul&gt;
&lt;li&gt;time complexity: O(n)&lt;/li&gt;
&lt;li&gt;space complexity:&lt;br&gt;  best: O(log n) - avg. height of tree&lt;br&gt;  worst: O(n)&lt;/li&gt;
&lt;li&gt;inorder (DFS: left, self, right)&lt;/li&gt;
&lt;li&gt;postorder (DFS: left, right, self)&lt;/li&gt;
&lt;li&gt;preorder (DFS: self, left, right)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/HZ5YTanv5QE&#34;&gt;[Review] Breadth-first search in 4 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/Urx87-NMm6c&#34;&gt;[Review] Depth-first search in 4 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/playlist?list=PL9xmBV_5YoZO1JC2RgEi04nLy6D-rKk6b&#34;&gt;[Review] Tree Traversal (playlist) in 11 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Binary-search-trees-BSTs&#34;&gt;&lt;a href=&#34;#Binary-search-trees-BSTs&#34; class=&#34;headerlink&#34; title=&#34;Binary search trees: BSTs&#34;&gt;&lt;/a&gt;Binary search trees: BSTs&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=x6At0nzX92o&amp;index=1&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&#34;&gt;Binary Search Tree Review (video)&lt;/a&gt;    &lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/E7cXP/introduction&#34;&gt;Introduction (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=76dhtgZt38A&amp;ab_channel=MITOpenCourseWare&#34;&gt;MIT (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C&amp;#x2F;C++:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=COZK7NATh4k&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=28&#34;&gt;Binary search tree - Implementation in C&amp;#x2F;C++ (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=hWokyBoo0aI&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=29&#34;&gt;BST implementation - memory allocation in stack and heap (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Ut90klNN264&amp;index=30&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&#34;&gt;Find min and max element in a binary search tree (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=_pnqMz5nrRs&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=31&#34;&gt;Find height of a binary tree (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=9RHO6jU--GU&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=32&#34;&gt;Binary tree traversal - breadth-first and depth-first strategies (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=86g8jAQug04&amp;index=33&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&#34;&gt;Binary tree: Level Order Traversal (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=gm8DUJJhmY4&amp;index=34&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&#34;&gt;Binary tree traversal: Preorder, Inorder, Postorder (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=yEwSGhSsT0U&amp;index=35&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&#34;&gt;Check if a binary tree is binary search tree or not (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=gcULXE7ViZw&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&amp;index=36&#34;&gt;Delete a node from Binary Search Tree (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=5cPbNCrdotA&amp;index=37&amp;list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&#34;&gt;Inorder Successor in a binary search tree (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; insert    &amp;#x2F;&amp;#x2F; insert value into tree&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; get_node_count &amp;#x2F;&amp;#x2F; get count of values stored&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; print_values &amp;#x2F;&amp;#x2F; prints the values in the tree, from min to max&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; delete_tree&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; is_in_tree &amp;#x2F;&amp;#x2F; returns true if given value exists in the tree&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; get_height &amp;#x2F;&amp;#x2F; returns the height in nodes (single node’s height is 1)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; get_min   &amp;#x2F;&amp;#x2F; returns the minimum value stored in the tree&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; get_max   &amp;#x2F;&amp;#x2F; returns the maximum value stored in the tree&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; is_binary_search_tree&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; delete_value&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; get_successor &amp;#x2F;&amp;#x2F; returns next-highest value in tree after given value, -1 if none&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Heap-Priority-Queue-Binary-Heap&#34;&gt;&lt;a href=&#34;#Heap-Priority-Queue-Binary-Heap&#34; class=&#34;headerlink&#34; title=&#34;Heap &amp;#x2F; Priority Queue &amp;#x2F; Binary Heap&#34;&gt;&lt;/a&gt;Heap &amp;#x2F; Priority Queue &amp;#x2F; Binary Heap&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;visualized as a tree, but is usually linear in storage (array, linked list)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Heap_(data_structure)&#34;&gt;Heap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/data-structures/introduction-2OpTs&#34;&gt;Introduction (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/GRV2q/binary-trees&#34;&gt;Binary Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures/supplement/S5xxz/tree-height-remark&#34;&gt;Tree Height Remark (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/0g1dl/basic-operations&#34;&gt;Basic Operations (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/gl5Ni/complete-binary-trees&#34;&gt;Complete Binary Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/HxQo9/pseudocode&#34;&gt;Pseudocode (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/odNJmw5TOEE?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3291&#34;&gt;Heap Sort - jumps to start (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/data-structures/heap-sort-hSzMO&#34;&gt;Heap Sort (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/data-structures/building-a-heap-dwrOS&#34;&gt;Building a heap (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=B7hVxCmfPtM&amp;index=4&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&#34;&gt;MIT: Heaps and Heap Sort (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_yIUFT6AKBGE&#34;&gt;CS 61B Lecture 24: Priority Queues (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=MiyLo8adrWw&#34;&gt;Linear Time BuildHeap (max-heap)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/playlist?list=PL9xmBV_5YoZNsyqgPW-DNwUeT8F8uhWc6&#34;&gt;[Review] Heap (playlist) in 13 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Implement a max-heap:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; insert&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; sift_up - needed for insert&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; get_max - returns the max item, without removing it&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; get_size() - return number of elements stored&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; is_empty() - returns true if heap contains no elements&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; extract_max - returns the max item, removing it&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; sift_down - needed for extract_max&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; remove(x) - removes item at index x&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; heapify - create a heap from an array of elements, needed for heap_sort&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; heap_sort() - take an unsorted array and turn it into a sorted array in-place using a max heap or min heap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Sorting&#34;&gt;&lt;a href=&#34;#Sorting&#34; class=&#34;headerlink&#34; title=&#34;Sorting&#34;&gt;&lt;/a&gt;Sorting&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Implement sorts &amp;amp; know best case&amp;#x2F;worst case, average complexity of each:&lt;ul&gt;
&lt;li&gt;no bubble sort - it’s terrible - O(n^2), except when n &amp;lt;&amp;#x3D; 16&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Stability in sorting algorithms (“Is Quicksort stable?”)&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Sorting_algorithm#Stability&#34;&gt;Sorting Algorithm Stability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1517793/stability-in-sorting-algorithms&#34;&gt;Stability In Sorting Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.geeksforgeeks.org/stability-in-sorting-algorithms/&#34;&gt;Stability In Sorting Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://homepages.math.uic.edu/~leon/cs-mcs401-s08/handouts/stability.pdf&#34;&gt;Sorting Algorithms - Stability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Which algorithms can be used on linked lists? Which on arrays? Which on both?&lt;ul&gt;
&lt;li&gt;I wouldn’t recommend sorting a linked list, but merge sort is doable.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.geeksforgeeks.org/merge-sort-for-linked-list/&#34;&gt;Merge Sort For Linked List&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;For heapsort, see Heap data structure above. Heap sort is great, but not stable&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.coursera.org/learn/algorithms-part1/home/week/3&#34;&gt;Sedgewick - Mergesort (5 videos)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part1/mergesort-ARWDq&#34;&gt;1. Mergesort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part1/lecture/PWNEl/bottom-up-mergesort&#34;&gt;2. Bottom up Mergesort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part1/sorting-complexity-xAltF&#34;&gt;3. Sorting Complexity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part1/comparators-9FYhS&#34;&gt;4. Comparators&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part1/lecture/pvvLZ/stability&#34;&gt;5. Stability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.coursera.org/learn/algorithms-part1/home/week/3&#34;&gt;Sedgewick - Quicksort (4 videos)&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part1/quicksort-vjvnC&#34;&gt;1. Quicksort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part1/selection-UQxFT&#34;&gt;2. Selection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part1/duplicate-keys-XvjPd&#34;&gt;3. Duplicate Keys&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part1/system-sorts-QBNZ7&#34;&gt;4. System Sorts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
UC Berkeley:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_EiUvYS2DT6I&#34;&gt;CS 61B Lecture 29: Sorting I (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_2hTY3t80Qsk&#34;&gt;CS 61B Lecture 30: Sorting II (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_Y6LOLpxg6Dc&#34;&gt;CS 61B Lecture 32: Sorting III (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_qNMQ4ly43p4&#34;&gt;CS 61B Lecture 33: Sorting V (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_pvbBMd-3NoI&#34;&gt;CS 61B 2014-04-21: Radix Sort(video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.youtube.com/watch?v=P00xJgWzz2c&amp;index=1&amp;list=PL89B61F78B552C1AB&#34;&gt;Bubble Sort (video)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.youtube.com/watch?v=ni_zk257Nqo&amp;index=7&amp;list=PL89B61F78B552C1AB&#34;&gt;Analyzing Bubble Sort (video)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.youtube.com/watch?v=Kg4bqzAqRBM&amp;index=3&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&#34;&gt;Insertion Sort, Merge Sort (video)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.youtube.com/watch?v=c4BRHC7kTaQ&amp;index=2&amp;list=PL89B61F78B552C1AB&#34;&gt;Insertion Sort (video)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.youtube.com/watch?v=GCae1WNvnZM&amp;index=3&amp;list=PL89B61F78B552C1AB&#34;&gt;Merge Sort (video)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.youtube.com/watch?v=y_G9BkAm6B8&amp;index=4&amp;list=PL89B61F78B552C1AB&#34;&gt;Quicksort (video)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.youtube.com/watch?v=6nDMgr0-Yyo&amp;index=8&amp;list=PL89B61F78B552C1AB&#34;&gt;Selection Sort (video)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Merge sort code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://www.cs.yale.edu/homes/aspnes/classes/223/examples/sorting/mergesort.c&#34;&gt;Using output array (C)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/jwasham/practice-python/blob/master/merge_sort/merge_sort.py&#34;&gt;Using output array (Python)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/jwasham/practice-cpp/blob/master/merge_sort/merge_sort.cc&#34;&gt;In-place (C++)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Quick sort code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://www.cs.yale.edu/homes/aspnes/classes/223/examples/randomization/quick.c&#34;&gt;Implementation (C)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/jwasham/practice-c/blob/master/quick_sort/quick_sort.c&#34;&gt;Implementation (C)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py&#34;&gt;Implementation (Python)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.youtube.com/playlist?list=PL9xmBV_5YoZOZSbGAXAPIq1BeUf4j20pl&#34;&gt;[Review] Sorting (playlist) in 18 minutes&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/Hoixgm4-P4M&#34;&gt;Quick sort in 4 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/2DmK_H7IdTo&#34;&gt;Heap sort in 4 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/4VqmGXwpLqc&#34;&gt;Merge sort in 3 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/xli_FI7CuzA&#34;&gt;Bubble sort in 2 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/g-PGLbMth_g&#34;&gt;Selection sort in 3 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/JU767SDMDvA&#34;&gt;Insertion sort in 2 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Mergesort: O(n log n) average and worst case&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Quicksort O(n log n) average case&lt;/li&gt;
&lt;li&gt;Selection sort and insertion sort are both O(n^2) average and worst case&lt;/li&gt;
&lt;li&gt;For heapsort, see Heap data structure above&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Not required, but I recommended them:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/home/week/3&#34;&gt;Sedgewick - Radix Sorts (6 videos)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/vGHvb/strings-in-java&#34;&gt;1. Strings in Java&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part2/key-indexed-counting-2pi1Z&#34;&gt;2. Key Indexed Counting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/c1U7L/lsd-radix-sort&#34;&gt;3. Least Significant Digit First String Radix Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/gFxwG/msd-radix-sort&#34;&gt;4. Most Significant Digit First String Radix Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part2/3-way-radix-quicksort-crkd5&#34;&gt;5. 3 Way Radix Quicksort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays&#34;&gt;6. Suffix Arrays&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#radixSort&#34;&gt;Radix Sort&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=xhr26ia4k38&#34;&gt;Radix Sort (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Nz1KZXbghj8&amp;index=7&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&#34;&gt;Radix Sort, Counting Sort (linear time given constraints) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=cNB2lADK3_s&amp;index=8&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&#34;&gt;Randomization: Matrix Multiply, Quicksort, Freivalds’ algorithm (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=pOKy3RZbSws&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;index=14&#34;&gt;Sorting in Linear Time (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a summary, here is a visual representation of &lt;a href=&#34;https://www.youtube.com/watch?v=kPRA0W1kECg&#34;&gt;15 sorting algorithms&lt;/a&gt;.&lt;br&gt;If you need more detail on this subject, see “Sorting” section in &lt;a href=&#34;#additional-detail-on-some-subjects&#34;&gt;Additional Detail on Some Subjects&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;Graphs&#34;&gt;&lt;a href=&#34;#Graphs&#34; class=&#34;headerlink&#34; title=&#34;Graphs&#34;&gt;&lt;/a&gt;Graphs&lt;/h2&gt;&lt;p&gt;Graphs can be used to represent many problems in computer science, so this section is long, like trees and sorting were.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There are 4 basic ways to represent a graph in memory:&lt;ul&gt;
&lt;li&gt;objects and pointers&lt;/li&gt;
&lt;li&gt;adjacency matrix&lt;/li&gt;
&lt;li&gt;adjacency list&lt;/li&gt;
&lt;li&gt;adjacency map&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Familiarize yourself with each representation and its pros &amp;amp; cons&lt;/li&gt;
&lt;li&gt;BFS and DFS - know their computational complexity, their trade offs, and how to implement them in real code&lt;/li&gt;
&lt;li&gt;When asked a question, look for a graph-based solution first, then move on if none&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
MIT(videos):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=oFVYVzlvk9c&amp;t=14s&amp;ab_channel=MITOpenCourseWare&#34;&gt;Breadth-First Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=IBfWDYSffUU&amp;t=32s&amp;ab_channel=MITOpenCourseWare&#34;&gt;Depth-First Search&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Skiena Lectures - great intro:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Sjk0xqWWPCc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=10&#34;&gt;CSE373 2020 - Lecture 10 - Graph Data Structures (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ZTwjXj81NVY&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=11&#34;&gt;CSE373 2020 - Lecture 11 - Graph Traversal (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=KyordYB3BOs&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=12&#34;&gt;CSE373 2020 - Lecture 12 - Depth First Search (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=oolm2VnJUKw&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=13&#34;&gt;CSE373 2020 - Lecture 13 - Minimum Spanning Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=RktgPx0MarY&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=14&#34;&gt;CSE373 2020 - Lecture 14 - Minimum Spanning Trees (con’t) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=MUe5DXRhyAo&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=15&#34;&gt;CSE373 2020 - Lecture 15 - Graph Algorithms (con’t 2) (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Graphs (review and more):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Aa2sqUhIn-E&amp;index=15&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&#34;&gt;6.006 Single-Source Shortest Paths Problem (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=NSHizBK9JD8&amp;t=1731s&amp;ab_channel=MITOpenCourseWare&#34;&gt;6.006 Dijkstra (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=f9cVS_URPc0&amp;ab_channel=MITOpenCourseWare&#34;&gt;6.006 Bellman-Ford (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=CHvQ3q_gJ7E&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=18&#34;&gt;6.006 Speeding Up Dijkstra (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=i_AQT_XfvD8&amp;index=6&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&#34;&gt;Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim’s Algorithm -  Lecture 6 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ufj5_bppBsA&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=7&#34;&gt;Aduni: Graph Algorithms II - DFS, BFS, Kruskal’s Algorithm, Union Find Data Structure - Lecture 7 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=DiedsPsMKXc&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=8&#34;&gt;Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=XIAQRlNkJAw&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=9&#34;&gt;Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_zFbq8vOZ_0k&#34;&gt;CS 61B 2014: Weighted graphs (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=tKwnms5iRBU&amp;index=16&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&#34;&gt;Greedy Algorithms: Minimum Spanning Tree (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=RpgcYiky7uw&#34;&gt;Strongly Connected Components Kosaraju’s Algorithm Graph Algorithm (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/playlist?list=PL9xmBV_5YoZO-Y-H3xIC9DGSfVYJng9Yw&#34;&gt;[Review] Shortest Path Algorithms (playlist) in 16 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/playlist?list=PL9xmBV_5YoZObEi3Hf6lmyW-CBfs7nkOV&#34;&gt;[Review] Minimum Spanning Trees (playlist) in 4 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Full Coursera Course:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-on-graphs/home/welcome&#34;&gt;Algorithms on Graphs (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I’ll implement:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; DFS with adjacency list (recursive)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; DFS with adjacency list (iterative with stack)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; DFS with adjacency matrix (recursive)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; DFS with adjacency matrix (iterative with stack)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; BFS with adjacency list&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; BFS with adjacency matrix&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; single-source shortest path (Dijkstra)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; minimum spanning tree&lt;/li&gt;
&lt;li&gt;DFS-based algorithms (see Aduni videos above):&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; check for cycle (needed for topological sort, since we’ll check for cycle before starting)&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; topological sort&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; count connected components in a graph&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; list strongly connected components&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; check for bipartite graph&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Even-More-Knowledge&#34;&gt;&lt;a href=&#34;#Even-More-Knowledge&#34; class=&#34;headerlink&#34; title=&#34;Even More Knowledge&#34;&gt;&lt;/a&gt;Even More Knowledge&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&#34;Recursion&#34;&gt;&lt;a href=&#34;#Recursion&#34; class=&#34;headerlink&#34; title=&#34;Recursion&#34;&gt;&lt;/a&gt;Recursion&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Stanford lectures on recursion &amp;amp; backtracking:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=gl3emqCuueQ&amp;list=PLFE6E58F856038C69&amp;index=8&#34;&gt;Lecture 8 | Programming Abstractions (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=uFJhEPrbycQ&amp;list=PLFE6E58F856038C69&amp;index=9&#34;&gt;Lecture 9 | Programming Abstractions (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=NdF1QDTRkck&amp;index=10&amp;list=PLFE6E58F856038C69&#34;&gt;Lecture 10 | Programming Abstractions (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=p-gpaIGRCQI&amp;list=PLFE6E58F856038C69&amp;index=11&#34;&gt;Lecture 11 | Programming Abstractions (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When it is appropriate to use it?&lt;/li&gt;
&lt;li&gt;How is tail recursion better than not?&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.quora.com/What-is-tail-recursion-Why-is-it-so-bad&#34;&gt;What Is Tail Recursion Why Is It So Bad?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/programming-languages/tail-recursion-YZic1&#34;&gt;Tail Recursion (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/ngCos392W4w&#34;&gt;5 Simple Steps for Solving Any Recursive Problem(video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  Backtracking Blueprint: &lt;a href=&#34;https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)&#34;&gt;Java&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/combination-sum/discuss/429538/General-Backtracking-questions-solutions-in-Python-for-reference-%3A&#34;&gt;Python&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Dynamic-Programming&#34;&gt;&lt;a href=&#34;#Dynamic-Programming&#34; class=&#34;headerlink&#34; title=&#34;Dynamic Programming&#34;&gt;&lt;/a&gt;Dynamic Programming&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;You probably won’t see any dynamic programming problems in your interview, but it’s worth being able to recognize a&lt;br&gt;  problem as being a candidate for dynamic programming.&lt;/li&gt;
&lt;li&gt;This subject can be pretty difficult, as each DP soluble problem must be defined as a recursion relation, and coming up with it can be tricky.&lt;/li&gt;
&lt;li&gt;I suggest looking at many examples of DP problems until you have a solid understanding of the pattern involved.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Videos:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=wAA0AMfcJHQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=18&#34;&gt;Skiena: CSE373 2020 - Lecture 19 - Introduction to Dynamic Programming (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=T3A4jlHlhtA&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=19&#34;&gt;Skiena: CSE373 2020 - Lecture 20 - Edit Distance (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=iPnPVcZmRbE&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=20&#34;&gt;Skiena: CSE373 2020 - Lecture 20 - Edit Distance (continued) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=2xPE4Wq8coQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=21&#34;&gt;Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=2xPE4Wq8coQ&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=21&#34;&gt;Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming and Review (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/J5aJEcOr6Eo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3558&#34;&gt;Simonson: Dynamic Programming 0 (starts at 59:18) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=0EzHjQ_SOeU&amp;index=11&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&#34;&gt;Simonson: Dynamic Programming I - Lecture 11 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=v1qiRwuJU7g&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=12&#34;&gt;Simonson: Dynamic programming II - Lecture 12 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; List of individual DP problems (each is short):&lt;br&gt;  &lt;a href=&#34;https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr&#34;&gt;Dynamic Programming (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Yale Lecture notes:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#dynamicProgramming&#34;&gt;Dynamic Programming&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Coursera:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithmic-thinking-2/lecture/80RrW/the-rna-secondary-structure-problem&#34;&gt;The RNA secondary structure problem (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithmic-thinking-2/a-dynamic-programming-algorithm-PSonq&#34;&gt;A dynamic programming algorithm (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithmic-thinking-2/illustrating-the-dp-algorithm-oUEK2&#34;&gt;Illustrating the DP algorithm (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithmic-thinking-2/lecture/nfK2r/running-time-of-the-dp-algorithm&#34;&gt;Running time of the DP algorithm (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithmic-thinking-2/lecture/M999a/dp-vs-recursive-implementation&#34;&gt;DP vs. recursive implementation (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithmic-thinking-2/global-pairwise-sequence-alignment-UZ7o6&#34;&gt;Global pairwise sequence alignment (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithmic-thinking-2/lecture/WnNau/local-pairwise-sequence-alignment&#34;&gt;Local pairwise sequence alignment (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Design-patterns&#34;&gt;&lt;a href=&#34;#Design-patterns&#34; class=&#34;headerlink&#34; title=&#34;Design patterns&#34;&gt;&lt;/a&gt;Design patterns&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=3cmzqZzwNDM&amp;list=PLGLfVvz_LVvQ5G-LdJ8RLqe-ndo7QITYc&amp;index=3&#34;&gt;Quick UML review (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Learn these patterns:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; strategy&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; singleton&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; adapter&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; prototype&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; decorator&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; visitor&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; factory, abstract factory&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; facade&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; observer&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; proxy&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; delegate&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; command&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; state&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; memento&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; iterator&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; composite&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; flyweight&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/playlist?list=PLF206E906175C7E07&#34;&gt;Series of videos (27 videos)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124&#34;&gt;Book: Head First Design Patterns&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;I know the canonical book is “Design Patterns: Elements of Reusable Object-Oriented Software”, but Head First is great for beginners to OO.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sourcemaking.com/design-patterns-and-tips&#34;&gt;Handy reference: 101 Design Patterns &amp;amp; Tips for Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Combinatorics-n-choose-k-Probability&#34;&gt;&lt;a href=&#34;#Combinatorics-n-choose-k-Probability&#34; class=&#34;headerlink&#34; title=&#34;Combinatorics (n choose k) &amp;amp; Probability&#34;&gt;&lt;/a&gt;Combinatorics (n choose k) &amp;amp; Probability&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=8RRo6Ti9d0U&#34;&gt;Math Skills: How to find Factorial, Permutation and Combination (Choose) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=sZkAAk9Wwa4&#34;&gt;Make School: Probability (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=dNaJg-mLobQ&#34;&gt;Make School: More Probability and Markov Chains (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Khan Academy:&lt;ul&gt;
&lt;li&gt;Course layout:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.khanacademy.org/math/probability/probability-and-combinatorics-topic&#34;&gt;Basic Theoretical Probability&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Just the videos - 41 (each are simple and each are short):&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=uzkc-qNVoOk&amp;list=PLC58778F28211FA19&#34;&gt;Probability Explained (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;NP-NP-Complete-and-Approximation-Algorithms&#34;&gt;&lt;a href=&#34;#NP-NP-Complete-and-Approximation-Algorithms&#34; class=&#34;headerlink&#34; title=&#34;NP, NP-Complete and Approximation Algorithms&#34;&gt;&lt;/a&gt;NP, NP-Complete and Approximation Algorithms&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem,&lt;br&gt;  and be able to recognize them when an interviewer asks you them in disguise.&lt;/li&gt;
&lt;li&gt;Know what NP-complete means.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=moPtwq_cVH8&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=23&#34;&gt;Computational Complexity (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Simonson:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=2939&#34;&gt;Greedy Algs. II &amp;amp; Intro to NP Completeness (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=e0tGC6ZQdQE&amp;index=16&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&#34;&gt;NP Completeness II &amp;amp; Reductions (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=fCX1BGT3wjE&amp;index=17&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&#34;&gt;NP Completeness III (Video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=NKLDp3Rch3M&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=18&#34;&gt;NP Completeness IV (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Skiena:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ItHp5laE1VE&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=23&#34;&gt;CSE373 2020 - Lecture 23 - NP-Completeness (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=inaFJeCzGxU&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=24&#34;&gt;CSE373 2020 - Lecture 24 - Satisfiability (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=B-bhKxjZLlc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=25&#34;&gt;CSE373 2020 - Lecture 25 - More NP-Completeness (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=_EzetTkG_Cc&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=26&#34;&gt;CSE373 2020 - Lecture 26 - NP-Completeness Challenge (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=eHZifpgyH_4&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=22&#34;&gt;Complexity: P, NP, NP-completeness, Reductions (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=MEz1J9wY2iM&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=24&#34;&gt;Complexity: Approximation Algorithms (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=4q-jmGrmxKs&amp;index=25&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&#34;&gt;Complexity: Fixed-Parameter Algorithms (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Peter Norvig discusses near-optimal solutions to traveling salesman problem:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nbviewer.jupyter.org/url/norvig.com/ipython/TSP.ipynb&#34;&gt;Jupyter Notebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Pages 1048 - 1140 in CLRS if you have it.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;How-computers-process-a-program&#34;&gt;&lt;a href=&#34;#How-computers-process-a-program&#34; class=&#34;headerlink&#34; title=&#34;How computers process a program&#34;&gt;&lt;/a&gt;How computers process a program&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=XM4lGflQFvA&#34;&gt;How CPU executes a program (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/1I5ZMmrOfnA&#34;&gt;How computers calculate - ALU (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/fpnE6UAfbtU&#34;&gt;Registers and RAM (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/FZGugFqdr60&#34;&gt;The Central Processing Unit (CPU) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://youtu.be/zltgXvg6r3k&#34;&gt;Instructions and Programs (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Caches&#34;&gt;&lt;a href=&#34;#Caches&#34; class=&#34;headerlink&#34; title=&#34;Caches&#34;&gt;&lt;/a&gt;Caches&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; LRU cache:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=R5ON3iwx78M&#34;&gt;The Magic of LRU Cache (100 Days of Google Dev) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=bq6N7Ym81iI&#34;&gt;Implementing LRU (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=8-FZRAjR7qU&#34;&gt;LeetCode - 146 LRU Cache (C++) (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; CPU cache:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=vjYF_fAZI5E&amp;list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-&amp;index=24&#34;&gt;MIT 6.004 L15: The Memory Hierarchy (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ajgC3-pyGlk&amp;index=25&amp;list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-&#34;&gt;MIT 6.004 L16: Cache Issues (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Processes-and-Threads&#34;&gt;&lt;a href=&#34;#Processes-and-Threads&#34; class=&#34;headerlink&#34; title=&#34;Processes and Threads&#34;&gt;&lt;/a&gt;Processes and Threads&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Computer Science 162 - Operating Systems (25 videos):&lt;ul&gt;
&lt;li&gt;for processes and threads see videos 1-11&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iBDyz-ba4yDskqMDY6A1w_c&#34;&gt;Operating Systems and System Programming (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread&#34;&gt;What Is The Difference Between A Process And A Thread?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Covers:&lt;ul&gt;
&lt;li&gt;Processes, Threads, Concurrency issues&lt;ul&gt;
&lt;li&gt;Difference between processes and threads&lt;/li&gt;
&lt;li&gt;Processes&lt;/li&gt;
&lt;li&gt;Threads&lt;/li&gt;
&lt;li&gt;Locks&lt;/li&gt;
&lt;li&gt;Mutexes&lt;/li&gt;
&lt;li&gt;Semaphores&lt;/li&gt;
&lt;li&gt;Monitors&lt;/li&gt;
&lt;li&gt;How they work?&lt;/li&gt;
&lt;li&gt;Deadlock&lt;/li&gt;
&lt;li&gt;Livelock&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU activity, interrupts, context switching&lt;/li&gt;
&lt;li&gt;Modern concurrency constructs with multicore processors&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/O4nwUqQodAg&#34;&gt;Paging, segmentation and virtual memory (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/iKlAWIKEyuw&#34;&gt;Interrupts (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Process resource needs (memory: code, static storage, stack, heap, and also file descriptors, i&amp;#x2F;o)&lt;/li&gt;
&lt;li&gt;Thread resource needs (shares above (minus stack) with other threads in the same process but each has its own pc, stack counter, registers, and stack)&lt;/li&gt;
&lt;li&gt;Forking is really copy on write (read-only) until the new process writes to memory, then it does a full copy.&lt;/li&gt;
&lt;li&gt;Context switching&lt;ul&gt;
&lt;li&gt;How context switching is initiated by the operating system and underlying hardware?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/playlist?list=PL5jc9xFGsL8E12so1wlMS0r0hTQoJL74M&#34;&gt;threads in C++ (series - 10 videos)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/playlist?list=PLacuG5pysFbDQU8kKxbUh4K5c1iL5_k7k&#34;&gt;CS 377 Spring ‘14: Operating Systems from University of Massachusetts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; concurrency in Python (videos):&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/playlist?list=PL1H1sBF1VAKVMONJWJkmUh6_p8g4F2oy1&#34;&gt;Short series on threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Bs7vPNbB9JM&#34;&gt;Python Threads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Obt-vMVdM8s&#34;&gt;Understanding the Python GIL (2010)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.dabeaz.com/GIL&#34;&gt;reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=MCs5OvhV9S4&#34;&gt;David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ZzfHjytDceU&#34;&gt;Keynote David Beazley - Topics of Interest (Python Asyncio)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=0zaPs8OtyKY&#34;&gt;Mutex in Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Testing&#34;&gt;&lt;a href=&#34;#Testing&#34; class=&#34;headerlink&#34; title=&#34;Testing&#34;&gt;&lt;/a&gt;Testing&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;To cover:&lt;ul&gt;
&lt;li&gt;how unit testing works&lt;/li&gt;
&lt;li&gt;what are mock objects&lt;/li&gt;
&lt;li&gt;what is integration testing&lt;/li&gt;
&lt;li&gt;what is dependency injection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=SAhJf36_u5U&#34;&gt;Agile Software Testing with James Bach (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ILkT_HV9DVU&#34;&gt;Open Lecture by James Bach on Software Testing (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://vimeo.com/83960706&#34;&gt;Steve Freeman - Test-Driven Development (that’s not what we meant) (video)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gotocon.com/dl/goto-berlin-2013/slides/SteveFreeman_TestDrivenDevelopmentThatsNotWhatWeMeant.pdf&#34;&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Dependency injection:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=IKD2-MAkXyQ&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://jasonpolites.github.io/tao-of-testing/ch3-1.1.html&#34;&gt;Tao Of Testing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://jasonpolites.github.io/tao-of-testing/ch4-1.1.html&#34;&gt;How to write tests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;String-searching-manipulations&#34;&gt;&lt;a href=&#34;#String-searching-manipulations&#34; class=&#34;headerlink&#34; title=&#34;String searching &amp;amp; manipulations&#34;&gt;&lt;/a&gt;String searching &amp;amp; manipulations&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays&#34;&gt;Sedgewick - Suffix Arrays (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/home/week/4&#34;&gt;Sedgewick - Substring Search (videos)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part2/introduction-to-substring-search-n3ZpG&#34;&gt;1. Introduction to Substring Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/2Kn5i/brute-force-substring-search&#34;&gt;2. Brute-Force Substring Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/TAtDr/knuth-morris-pratt&#34;&gt;3. Knuth-Morris Pratt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/CYxOT/boyer-moore&#34;&gt;4. Boyer-Moore&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/lecture/algorithms-part2/rabin-karp-3KiqT&#34;&gt;5. Rabin-Karp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/tAfHI/search-pattern-in-text&#34;&gt;Search pattern in text (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  If you need more detail on this subject, see “String Matching” section in &lt;a href=&#34;#additional-detail-on-some-subjects&#34;&gt;Additional Detail on Some Subjects&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Tries&#34;&gt;&lt;a href=&#34;#Tries&#34; class=&#34;headerlink&#34; title=&#34;Tries&#34;&gt;&lt;/a&gt;Tries&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Note there are different kinds of tries. Some have prefixes, some don’t, and some use string instead of bits&lt;br&gt;  to track the path&lt;/li&gt;
&lt;li&gt;I read through code, but will not implement&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/home/week/4&#34;&gt;Sedgewick - Tries (3 videos)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/CPVdr/r-way-tries&#34;&gt;1. R Way Tries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/yQM8K/ternary-search-tries&#34;&gt;2. Ternary Search Tries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2/lecture/jwNmV/character-based-operations&#34;&gt;3. Character Based Operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Tries&#34;&gt;Notes on Data Structures and Programming Techniques&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Short course videos:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/08Xyf/core-introduction-to-tries&#34;&gt;Introduction To Tries (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/PvlZW/core-performance-of-tries&#34;&gt;Performance Of Tries (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/DFvd3/core-implementing-a-trie&#34;&gt;Implementing A Trie (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.toptal.com/java/the-trie-a-neglected-data-structure&#34;&gt;The Trie: A Neglected Data Structure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.topcoder.com/thrive/articles/Using%20Tries&#34;&gt;TopCoder - Using Tries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=TJ8SkcUSdbU&#34;&gt;Stanford Lecture (real world use case) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=NinWEPPrkDQ&amp;index=16&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&#34;&gt;MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through) (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Floating-Point-Numbers&#34;&gt;&lt;a href=&#34;#Floating-Point-Numbers&#34; class=&#34;headerlink&#34; title=&#34;Floating Point Numbers&#34;&gt;&lt;/a&gt;Floating Point Numbers&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; simple 8-bit: &lt;a href=&#34;https://www.youtube.com/watch?v=ji3SfClm8TU&#34;&gt;Representation of Floating Point Numbers - 1 (video - there is an error in calculations - see video description)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Unicode&#34;&gt;&lt;a href=&#34;#Unicode&#34; class=&#34;headerlink&#34; title=&#34;Unicode&#34;&gt;&lt;/a&gt;Unicode&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://www.joelonsoftware.com/articles/Unicode.html&#34;&gt;The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://kunststube.net/encoding/&#34;&gt;What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Endianness&#34;&gt;&lt;a href=&#34;#Endianness&#34; class=&#34;headerlink&#34; title=&#34;Endianness&#34;&gt;&lt;/a&gt;Endianness&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://web.archive.org/web/20180107141940/http://www.cs.umd.edu:80/class/sum2003/cmsc311/Notes/Data/endian.html&#34;&gt;Big And Little Endian&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=JrNF0KRAlyo&#34;&gt;Big Endian Vs Little Endian (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=oBSuXP-1Tc0&#34;&gt;Big And Little Endian Inside&amp;#x2F;Out (video)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Very technical talk for kernel devs. Don’t worry if most is over your head.&lt;/li&gt;
&lt;li&gt;The first half is enough.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Networking&#34;&gt;&lt;a href=&#34;#Networking&#34; class=&#34;headerlink&#34; title=&#34;Networking&#34;&gt;&lt;/a&gt;Networking&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;If you have networking experience or want to be a reliability engineer or operations engineer, expect questions&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Otherwise, this is just good to know&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.khanacademy.org/computing/code-org/computers-and-the-internet&#34;&gt;Khan Academy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Vdc8TCESIg8&#34;&gt;UDP and TCP: Comparison of Transport Protocols (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=e5DEVa9eSN0&#34;&gt;TCP&amp;#x2F;IP and the OSI Model Explained! (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=nomyRJehhnM&#34;&gt;Packet Transmission across the Internet. Networking &amp;amp; TCP&amp;#x2F;IP tutorial. (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=WGJrLqtX7As&#34;&gt;HTTP (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=S2iBR2ZlZf0&#34;&gt;SSL and HTTPS (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Rp3iZUvXWlM&#34;&gt;SSL&amp;#x2F;TLS (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=E9FxNzv1Tr8&#34;&gt;HTTP 2.0 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/playlist?list=PLEbnTDJUr_IegfoqO4iPnPYQui46QqT0j&#34;&gt;Video Series (21 videos) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=t5xYI0jzOf4&#34;&gt;Subnetting Demystified - Part 5 CIDR Notation (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Sockets:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=6G_W54zuadg&amp;t=6s&#34;&gt;Java - Sockets - Introduction (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=G75vN2mnJeQ&#34;&gt;Socket Programming (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Final-Review&#34;&gt;&lt;a href=&#34;#Final-Review&#34; class=&#34;headerlink&#34; title=&#34;Final Review&#34;&gt;&lt;/a&gt;Final Review&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;This section will have shorter videos that you can watch pretty quickly to review most of the important concepts.&lt;br&gt;  It’s nice if you want a refresher often.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Series of 2-3 minutes short subject videos (23 videos)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=r4r1DZcx1cM&amp;list=PLmVb1OknmNJuC5POdcDv5oCS7_OUkDgpj&amp;index=22&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
Series of 2-5 minutes short subject videos - Michael Sambol (38 videos):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCzDJwLWoYCUQowF_nG3m5OQ&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.coursera.org/learn/algorithms-part1&#34;&gt;Sedgewick Videos - Algorithms I&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; 
&lt;a href=&#34;https://www.coursera.org/learn/algorithms-part2&#34;&gt;Sedgewick Videos - Algorithms II&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Update-Your-Resume&#34;&gt;&lt;a href=&#34;#Update-Your-Resume&#34; class=&#34;headerlink&#34; title=&#34;Update Your Resume&#34;&gt;&lt;/a&gt;Update Your Resume&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;See Resume prep information in the books: “Cracking The Coding Interview” and “Programming Interviews Exposed”&lt;/li&gt;
&lt;li&gt;I don’t know how important this is (you can do your own research) but here is an article on making your resume ATS Compliant:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ayedot.com/97/MiniBlog/Meaning-of-ATS-compliant-resume-and-How-to-create-ATS-Resume-for-Free&#34;&gt;How to Create or Check if your Resume is ATS Compliant&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.careercup.com/resume&#34;&gt;“This Is What A GOOD Resume Should Look Like” by Gayle McDowell (author of Cracking the Coding Interview)&lt;/a&gt;, &lt;ul&gt;
&lt;li&gt;Note by the author: “This is for a US-focused resume. CVs for India and other countries have different expectations, although many of the points will be the same.”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/resume/guide&#34;&gt;“Step-by-step resume guide” by Tech Interview Handbook&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;Detailed guide on how to set up your resume from scratch, write effective resume content, optimize it, and test your resume&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Find-a-Job&#34;&gt;&lt;a href=&#34;#Find-a-Job&#34; class=&#34;headerlink&#34; title=&#34;Find a Job&#34;&gt;&lt;/a&gt;Find a Job&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ayedot.com/151/MiniBlog/Top-10-Best-Websites-for-Careers--Jobs&#34;&gt;Sites for Finding Jobs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Interview-Process-General-Interview-Prep&#34;&gt;&lt;a href=&#34;#Interview-Process-General-Interview-Prep&#34; class=&#34;headerlink&#34; title=&#34;Interview Process &amp;amp; General Interview Prep&#34;&gt;&lt;/a&gt;Interview Process &amp;amp; General Interview Prep&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://davidbyttow.medium.com/how-to-pass-the-engineering-interview-in-2021-45f1b389a1&#34;&gt;How to Pass the Engineering Interview in 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=N233T0epWTs&#34;&gt;Demystifying Tech Recruiting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; How to Get a Job at the Big 4:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=YJZCUhxNCv8&#34;&gt;How to Get a Job at the Big 4 - Amazon, Facebook, Google &amp;amp; Microsoft (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=6790FVXWBw8&amp;feature=youtu.be&#34;&gt;How to Get a Job at the Big 4.1 (Follow-up video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Cracking The Coding Interview Set 1:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=rEJzOhC5ZtQ&#34;&gt;Gayle L McDowell - Cracking The Coding Interview (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=aClxtDcdpsQ&#34;&gt;Cracking the Coding Interview with Author Gayle Laakmann McDowell (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Cracking the Facebook Coding Interview:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=wCl9kvQGHPI&#34;&gt;The Approach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=4UWDyJq8jZg&#34;&gt;Problem Walkthrough&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prep Courses:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udemy.com/software-engineer-interview-unleashed&#34;&gt;Software Engineer Interview Unleashed (paid course)&lt;/a&gt;:&lt;ul&gt;
&lt;li&gt;Learn how to make yourself ready for software engineer interviews from a former Google interviewer.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udemy.com/python-for-data-structures-algorithms-and-interviews/&#34;&gt;Python for Data Structures, Algorithms, and Interviews (paid course)&lt;/a&gt;:&lt;ul&gt;
&lt;li&gt;A Python centric interview prep course which covers data structures, algorithms, mock interviews and much more.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513&#34;&gt;Intro to Data Structures and Algorithms using Python (Udacity free course)&lt;/a&gt;:&lt;ul&gt;
&lt;li&gt;A free Python centric data structures and algorithms course.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.udacity.com/course/data-structures-and-algorithms-nanodegree--nd256&#34;&gt;Data Structures and Algorithms Nanodegree! (Udacity paid Nanodegree)&lt;/a&gt;:&lt;ul&gt;
&lt;li&gt;Get hands-on practice with over 100 data structures and algorithm exercises and guidance from a dedicated mentor to help prepare you for interviews and on-the-job scenarios.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.educative.io/courses/grokking-the-behavioral-interview&#34;&gt;Grokking the Behavioral Interview (Educative free course)&lt;/a&gt;:&lt;ul&gt;
&lt;li&gt;Many times, it’s not your technical competency that holds you back from landing your dream job, it’s how you perform on the behavioral interview.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mock Interviews:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.gainlo.co/#!/&#34;&gt;Gainlo.co: Mock interviewers from big companies&lt;/a&gt; - I used this and it helped me relax for the phone screen and on-site interview&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pramp.com/&#34;&gt;Pramp: Mock interviews from&amp;#x2F;with peers&lt;/a&gt; - peer-to-peer model of practice interviews&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://interviewing.io/&#34;&gt;interviewing.io: Practice mock interview with senior engineers&lt;/a&gt; - anonymous algorithmic&amp;#x2F;systems design interviews with senior engineers from FAANG anonymously&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Be-thinking-of-for-when-the-interview-comes&#34;&gt;&lt;a href=&#34;#Be-thinking-of-for-when-the-interview-comes&#34; class=&#34;headerlink&#34; title=&#34;Be thinking of for when the interview comes&#34;&gt;&lt;/a&gt;Be thinking of for when the interview comes&lt;/h2&gt;&lt;p&gt;Think of about 20 interview questions you’ll get, along with the lines of the items below. Have at least one answer for each.&lt;br&gt;Have a story, not just data, about something you accomplished.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Why do you want this job?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What’s a tough problem you’ve solved?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Biggest challenges faced?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Best&amp;#x2F;worst designs seen?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ideas for improving an existing product&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do you work best, as an individual and as part of a team?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Which of your skills or experiences would be assets in the role and why?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What did you most enjoy at [job x &amp;#x2F; project y]?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What was the biggest challenge you faced at [job x &amp;#x2F; project y]?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What was the hardest bug you faced at [job x &amp;#x2F; project y]?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What did you learn at [job x &amp;#x2F; project y]?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What would you have done better at [job x &amp;#x2F; project y]?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If you find it hard to come up with good answers of these types of interview questions, here are some ideas: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://ayedot.com/119/MiniBlog/General-Interview-Questions-and-their-Answers-for-Tech-Jobs&#34;&gt;General Interview Questions and their Answers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Have-questions-for-the-interviewer&#34;&gt;&lt;a href=&#34;#Have-questions-for-the-interviewer&#34; class=&#34;headerlink&#34; title=&#34;Have questions for the interviewer&#34;&gt;&lt;/a&gt;Have questions for the interviewer&lt;/h2&gt;&lt;p&gt;Some of mine (I already may know the answers, but want their opinion or team perspective):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How large is your team?&lt;/li&gt;
&lt;li&gt;What does your dev cycle look like? Do you do waterfall&amp;#x2F;sprints&amp;#x2F;agile?&lt;/li&gt;
&lt;li&gt;Are rushes to deadlines common? Or is there flexibility?&lt;/li&gt;
&lt;li&gt;How are decisions made in your team?&lt;/li&gt;
&lt;li&gt;How many meetings do you have per week?&lt;/li&gt;
&lt;li&gt;Do you feel your work environment helps you concentrate?&lt;/li&gt;
&lt;li&gt;What are you working on?&lt;/li&gt;
&lt;li&gt;What do you like about it?&lt;/li&gt;
&lt;li&gt;What is the work life like?&lt;/li&gt;
&lt;li&gt;How is the work&amp;#x2F;life balance?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Once-You’ve-Got-The-Job&#34;&gt;&lt;a href=&#34;#Once-You’ve-Got-The-Job&#34; class=&#34;headerlink&#34; title=&#34;Once You’ve Got The Job&#34;&gt;&lt;/a&gt;Once You’ve Got The Job&lt;/h2&gt;&lt;p&gt;Congratulations!&lt;/p&gt;
&lt;p&gt;Keep learning.&lt;/p&gt;
&lt;p&gt;You’re never really done.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Everything below this point is optional. It is NOT needed for an entry-level interview.&lt;br&gt;However, by studying these, you’ll get greater exposure to more CS concepts, and will be better prepared for&lt;br&gt;any software engineering job. You’ll be a much more well-rounded software engineer.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Additional-Books&#34;&gt;&lt;a href=&#34;#Additional-Books&#34; class=&#34;headerlink&#34; title=&#34;Additional Books&#34;&gt;&lt;/a&gt;Additional Books&lt;/h2&gt;&lt;p&gt;📚 These are here so you can dive into a topic you find interesting.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/dp/013937681X&#34;&gt;The Unix Programming Environment&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;An oldie but a goodie&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/dp/1593273894/&#34;&gt;The Linux Command Line: A Complete Introduction&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A modern option&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/TCP/IP_Illustrated&#34;&gt;TCP&amp;#x2F;IP Illustrated Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/gp/product/0596007124/&#34;&gt;Head First Design Patterns&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;A gentle introduction to design patterns&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612&#34;&gt;Design Patterns: Elements of Reusable Object-Oriente​d Software&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;AKA the “Gang Of Four” book, or GOF&lt;/li&gt;
&lt;li&gt;The canonical design patterns book&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1849967202&#34;&gt;Algorithm Design Manual&lt;/a&gt; (Skiena)&lt;ul&gt;
&lt;li&gt;As a review and problem recognition&lt;/li&gt;
&lt;li&gt;The algorithm catalog portion is well beyond the scope of difficulty you’ll get in an interview&lt;/li&gt;
&lt;li&gt;This book has 2 parts:&lt;ul&gt;
&lt;li&gt;Class textbook on data structures and algorithms&lt;ul&gt;
&lt;li&gt;Pros:&lt;ul&gt;
&lt;li&gt;Is a good review as any algorithms textbook would be&lt;/li&gt;
&lt;li&gt;Nice stories from his experiences solving problems in industry and academia&lt;/li&gt;
&lt;li&gt;Code examples in C&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cons:&lt;ul&gt;
&lt;li&gt;Can be as dense or impenetrable as CLRS, and in some cases, CLRS may be a better alternative for some subjects&lt;/li&gt;
&lt;li&gt;Chapters 7, 8, 9 can be painful to try to follow, as some items are not explained well or require more brain than I have&lt;/li&gt;
&lt;li&gt;Don’t get me wrong: I like Skiena, his teaching style, and mannerisms, but I may not be Stony Brook material&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Algorithm catalog:&lt;ul&gt;
&lt;li&gt;This is the real reason you buy this book.&lt;/li&gt;
&lt;li&gt;This book is better as an algorithm reference, and not something you read cover to cover.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Can rent it on Kindle&lt;/li&gt;
&lt;li&gt;Answers:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20150404194210/http://www.algorithm.cs.sunysb.edu/algowiki/index.php/The_Algorithms_Design_Manual_(Second_Edition)&#34;&gt;Solutions&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www3.cs.stonybrook.edu/~skiena/algorist/book/errata&#34;&gt;Errata&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Write-Great-Code-Understanding-Machine/dp/1593270038&#34;&gt;Write Great Code: Volume 1: Understanding the Machine&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;The book was published in 2004, and is somewhat outdated, but it’s a terrific resource for understanding a computer in brief&lt;/li&gt;
&lt;li&gt;The author invented &lt;a href=&#34;https://en.wikipedia.org/wiki/High_Level_Assembly&#34;&gt;HLA&lt;/a&gt;, so take mentions and examples in HLA with a grain of salt. Not widely used, but decent examples of what assembly looks like&lt;/li&gt;
&lt;li&gt;These chapters are worth the read to give you a nice foundation:&lt;ul&gt;
&lt;li&gt;Chapter 2 - Numeric Representation&lt;/li&gt;
&lt;li&gt;Chapter 3 - Binary Arithmetic and Bit Operations&lt;/li&gt;
&lt;li&gt;Chapter 4 - Floating-Point Representation&lt;/li&gt;
&lt;li&gt;Chapter 5 - Character Representation&lt;/li&gt;
&lt;li&gt;Chapter 6 - Memory Organization and Access&lt;/li&gt;
&lt;li&gt;Chapter 7 - Composite Data Types and Memory Objects&lt;/li&gt;
&lt;li&gt;Chapter 9 - CPU Architecture&lt;/li&gt;
&lt;li&gt;Chapter 10 - Instruction Set Architecture&lt;/li&gt;
&lt;li&gt;Chapter 11 - Memory Architecture and Organization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X&#34;&gt;Introduction to Algorithms&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Important:&lt;/strong&gt; Reading this book will only have limited value. This book is a great review of algorithms and data structures, but won’t teach you how to write good code. You have to be able to code a decent solution efficiently&lt;/li&gt;
&lt;li&gt;AKA CLR, sometimes CLRS, because Stein was late to the game&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/dp/0128119055&#34;&gt;Computer Architecture, Sixth Edition: A Quantitative Approach&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;For a richer, more up-to-date (2017), but longer treatment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;System-Design-Scalability-Data-Handling&#34;&gt;&lt;a href=&#34;#System-Design-Scalability-Data-Handling&#34; class=&#34;headerlink&#34; title=&#34;System Design, Scalability, Data Handling&#34;&gt;&lt;/a&gt;System Design, Scalability, Data Handling&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;You can expect system design questions if you have 4+ years of experience.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Scalability and System Design are very large topics with many topics and resources, since&lt;br&gt;there is a lot to consider when designing a software&amp;#x2F;hardware system that can scale.&lt;br&gt;Expect to spend quite a bit of time on this&lt;/li&gt;
&lt;li&gt;Considerations:&lt;ul&gt;
&lt;li&gt;Scalability&lt;ul&gt;
&lt;li&gt;Distill large data sets to single values&lt;/li&gt;
&lt;li&gt;Transform one data set to another&lt;/li&gt;
&lt;li&gt;Handling obscenely large amounts of data&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;System design&lt;ul&gt;
&lt;li&gt;features sets&lt;/li&gt;
&lt;li&gt;interfaces&lt;/li&gt;
&lt;li&gt;class hierarchies&lt;/li&gt;
&lt;li&gt;designing a system under certain constraints&lt;/li&gt;
&lt;li&gt;simplicity and robustness&lt;/li&gt;
&lt;li&gt;tradeoffs&lt;/li&gt;
&lt;li&gt;performance analysis and optimization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;strong&gt;START HERE&lt;/strong&gt;: &lt;a href=&#34;https://github.com/donnemartin/system-design-primer&#34;&gt;The System Design Primer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://www.hiredintech.com/system-design/&#34;&gt;System Design from HiredInTech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023&#34;&gt;How Do I Prepare To Answer Design Questions In A Technical Interview?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/&#34;&gt;8 Things You Need to Know Before a System Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=UrYLYV7WSHM&#34;&gt;Database Normalization - 1NF, 2NF, 3NF and 4NF (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://github.com/checkcheckzz/system-design-interview&#34;&gt;System Design Interview&lt;/a&gt; - There are a lot of resources in this one. Look through the articles and examples. I put some of them below&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://web.archive.org/web/20120716060051/http://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/&#34;&gt;How to ace a systems design interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/&#34;&gt;Numbers Everyone Should Know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html&#34;&gt;How long does it take to make a context switch?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=srOgpXECblk&#34;&gt;Transactions Across Datacenters (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://ksat.me/a-plain-english-introduction-to-cap-theorem&#34;&gt;A plain English introduction to CAP Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=cQP8WApzIQQ&amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB&#34;&gt;MIT 6.824: Distributed Systems, Spring 2020 (20 videos)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Consensus Algorithms:&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Paxos - &lt;a href=&#34;https://www.youtube.com/watch?v=s8JqcZtvnsM&#34;&gt;Paxos Agreement - Computerphile (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Raft - &lt;a href=&#34;https://www.youtube.com/watch?v=P9Ydif5_qvE&#34;&gt;An Introduction to the Raft Distributed Consensus Algorithm (video)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://raft.github.io/&#34;&gt;Easy-to-read paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://thesecretlivesofdata.com/raft/&#34;&gt;Infographic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://www.tom-e-white.com/2007/11/consistent-hashing.html&#34;&gt;Consistent Hashing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://horicky.blogspot.com/2009/11/nosql-patterns.html&#34;&gt;NoSQL Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Scalability:&lt;ul&gt;
&lt;li&gt;You don’t need all of these. Just pick a few that interest you.&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=-W9F__D3oY4&#34;&gt;Great overview (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Short series:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones&#34;&gt;Clones&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache&#34;&gt;Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism&#34;&gt;Asynchronism&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://www.aosabook.org/en/distsys.html&#34;&gt;Scalable Web Architecture and Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf&#34;&gt;Fallacies of Distributed Computing Explained&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=modXC5IWTJI&#34;&gt;Jeff Dean - Building Software Systems At Google and Lessons Learned (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://lethain.com/introduction-to-architecting-systems-for-scale/&#34;&gt;Introduction to Architecting Systems for Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=9nWyWwY2Onc&#34;&gt;Scaling mobile games to a global audience using App Engine and Cloud Datastore (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=H4vMcD7zKM0&#34;&gt;How Google Does Planet-Scale Engineering for Planet-Scale Infra (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.topcoder.com/thrive/articles/The%20Importance%20of%20Algorithms&#34;&gt;The Importance of Algorithms&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html&#34;&gt;Sharding&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=p0jGmgIrf_M&amp;list=PLRXxvay_m8gqVlExPC5DG3TGWJTaBgqSA&amp;index=4&#34;&gt;Engineering for the Long Game - Astrid Atkinson Keynote(video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2012/3/26/7-years-of-youtube-scalability-lessons-in-30-minutes.html&#34;&gt;7 Years Of YouTube Scalability Lessons In 30 Minutes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=G-lGCC4KKok&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2016/8/15/how-paypal-scaled-to-billions-of-transactions-daily-using-ju.html&#34;&gt;How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://blog.clevertap.com/how-to-remove-duplicates-in-large-datasets/&#34;&gt;How to Remove Duplicates in Large Datasets&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=3vV4YiqKm1o&#34;&gt;A look inside Etsy’s scale and engineering culture with Jon Cowie (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://thenewstack.io/led-amazon-microservices-architecture/&#34;&gt;What Led Amazon to its Own Microservices Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://eng.uber.com/trip-data-squeeze/&#34;&gt;To Compress Or Not To Compress, That Was Uber’s Question&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2016/2/25/when-should-approximate-query-processing-be-used.html&#34;&gt;When Should Approximate Query Processing Be Used?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2016/2/23/googles-transition-from-single-datacenter-to-failover-to-a-n.html&#34;&gt;Google’s Transition From Single Datacenter, To Failover, To A Native Multihomed Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html&#34;&gt;The Image Optimization Technology That Serves Millions Of Requests Per Day&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2016/2/1/a-patreon-architecture-short.html&#34;&gt;A Patreon Architecture Short&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2016/1/27/tinder-how-does-one-of-the-largest-recommendation-engines-de.html&#34;&gt;Tinder: How Does One Of The Largest Recommendation Engines Decide Who You’ll See Next?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html&#34;&gt;Design Of A Modern Cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2016/1/13/live-video-streaming-at-facebook-scale.html&#34;&gt;Live Video Streaming At Facebook Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html&#34;&gt;A Beginner’s Guide To Scaling To 11 Million+ Users On Amazon’s AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2015/11/9/a-360-degree-view-of-the-entire-netflix-stack.html&#34;&gt;A 360 Degree View Of The Entire Netflix Stack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-crush-it&#34;&gt;Latency Is Everywhere And It Costs You Sales - How To Crush It&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances&#34;&gt;What Powers Instagram: Hundreds of Instances, Dozens of Technologies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html&#34;&gt;Salesforce Architecture - How They Handle 1.3 Billion Transactions A Day&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html&#34;&gt;ESPN’s Architecture At Scale - Operating At 100,000 Duh Nuh Nuhs Per Second&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; See “Messaging, Serialization, and Queueing Systems” way below for info on some of the technologies that can glue services together&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Twitter:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5cKTP36HVgI&#34;&gt;O’Reilly MySQL CE 2011: Jeremy Cole, “Big and Small Data at @Twitter” (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/Twitter-Timeline-Scalability&#34;&gt;Timelines at Scale&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For even more, see “Mining Massive Datasets” video series in the &lt;a href=&#34;#video-series&#34;&gt;Video Series&lt;/a&gt; section&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Practicing the system design process: Here are some ideas to try working through on paper, each with some documentation on how it was handled in the real world:&lt;ul&gt;
&lt;li&gt;review: &lt;a href=&#34;https://github.com/donnemartin/system-design-primer&#34;&gt;The System Design Primer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hiredintech.com/system-design/&#34;&gt;System Design from HiredInTech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/system-design.pdf&#34;&gt;cheat sheet&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;flow:&lt;ol&gt;
&lt;li&gt;Understand the problem and scope:&lt;ul&gt;
&lt;li&gt;Define the use cases, with interviewer’s help&lt;/li&gt;
&lt;li&gt;Suggest additional features&lt;/li&gt;
&lt;li&gt;Remove items that interviewer deems out of scope&lt;/li&gt;
&lt;li&gt;Assume high availability is required, add as a use case&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Think about constraints:&lt;ul&gt;
&lt;li&gt;Ask how many requests per month&lt;/li&gt;
&lt;li&gt;Ask how many requests per second (they may volunteer it or make you do the math)&lt;/li&gt;
&lt;li&gt;Estimate reads vs. writes percentage&lt;/li&gt;
&lt;li&gt;Keep 80&amp;#x2F;20 rule in mind when estimating&lt;/li&gt;
&lt;li&gt;How much data written per second&lt;/li&gt;
&lt;li&gt;Total storage required over 5 years&lt;/li&gt;
&lt;li&gt;How much data read per second&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Abstract design:&lt;ul&gt;
&lt;li&gt;Layers (service, data, caching)&lt;/li&gt;
&lt;li&gt;Infrastructure: load balancing, messaging&lt;/li&gt;
&lt;li&gt;Rough overview of any key algorithm that drives the service&lt;/li&gt;
&lt;li&gt;Consider bottlenecks and determine solutions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Exercises:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/2010/announcing-snowflake&#34;&gt;Design a random unique ID generation system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/dvirsky/introduction-to-redis&#34;&gt;Design a key-value database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html&#34;&gt;Design a picture sharing system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ijcai13.org/files/tutorial_slides/td3.pdf&#34;&gt;Design a recommendation system&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hiredintech.com/system-design/the-system-design-process/&#34;&gt;Design a URL-shortener system: copied from above&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20220217064329/https://adayinthelifeof.nl/2011/02/06/memcache-internals/&#34;&gt;Design a cache system&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Additional-Learning&#34;&gt;&lt;a href=&#34;#Additional-Learning&#34; class=&#34;headerlink&#34; title=&#34;Additional Learning&#34;&gt;&lt;/a&gt;Additional Learning&lt;/h2&gt;&lt;p&gt;I added them to help you become a well-rounded software engineer, and to be aware of certain&lt;br&gt;technologies and algorithms, so you’ll have a bigger toolbox.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&#34;Compilers&#34;&gt;&lt;a href=&#34;#Compilers&#34; class=&#34;headerlink&#34; title=&#34;Compilers&#34;&gt;&lt;/a&gt;Compilers&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=IhC7sdYe-Jg&#34;&gt;How a Compiler Works in ~1 minute (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=CSZLNYF4Klo&#34;&gt;Harvard CS50 - Compilers (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=twodd1KFfGk&#34;&gt;C++ (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FnGCDLhaxKU&#34;&gt;Understanding Compiler Optimization (C++) (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Emacs-and-vi-m&#34;&gt;&lt;a href=&#34;#Emacs-and-vi-m&#34; class=&#34;headerlink&#34; title=&#34;Emacs and vi(m)&#34;&gt;&lt;/a&gt;Emacs and vi(m)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Familiarize yourself with a unix-based code editor&lt;/li&gt;
&lt;li&gt;vi(m):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5givLEMcINQ&amp;index=1&amp;list=PL13bz4SHGmRxlZVmWQ9DvXo1fEg4UdGkr&#34;&gt;Editing With vim 01 - Installation, Setup, and The Modes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://vim-adventures.com/&#34;&gt;VIM Adventures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;set of 4 videos:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SI8TeVMX8pk&#34;&gt;The vi&amp;#x2F;vim editor - Lesson 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=F3OO7ZIOaJE&#34;&gt;The vi&amp;#x2F;vim editor - Lesson 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ZYEccA_nMaI&#34;&gt;The vi&amp;#x2F;vim editor - Lesson 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1lYD5gwgZIA&#34;&gt;The vi&amp;#x2F;vim editor - Lesson 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Using_Vi_instead_of_Emacs&#34;&gt;Using Vi Instead of Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;emacs:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hbmV1bnQ-i0&#34;&gt;Basics Emacs Tutorial (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;set of 3 (videos):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ujODL7MD04Q&#34;&gt;Emacs Tutorial (Beginners) -Part 1- File commands, cut&amp;#x2F;copy&amp;#x2F;paste, cursor commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=XWpsRupJ4II&#34;&gt;Emacs Tutorial (Beginners) -Part 2- Buffer management, search, M-x grep and rgrep modes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=paSgzPso-yc&#34;&gt;Emacs Tutorial (Beginners) -Part 3- Expressions, Statements, ~&amp;#x2F;.emacs file and packages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JWD1Fpdd4Pc&#34;&gt;Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Writing_C_programs_with_Emacs&#34;&gt;Writing C Programs With Emacs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=48JlgiBpw_I&amp;t=0s&#34;&gt;The Absolute Beginner’s Guide to Emacs (video by David Wilson)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://systemcrafters.net/emacs-essentials/absolute-beginners-guide-to-emacs/&#34;&gt;The Absolute Beginner’s Guide to Emacs (notes by David Wilson)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Unix-command-line-tools&#34;&gt;&lt;a href=&#34;#Unix-command-line-tools&#34; class=&#34;headerlink&#34; title=&#34;Unix command line tools&#34;&gt;&lt;/a&gt;Unix command line tools&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;I filled in the list below from good tools.&lt;/li&gt;
&lt;li&gt;bash&lt;/li&gt;
&lt;li&gt;cat&lt;/li&gt;
&lt;li&gt;grep&lt;/li&gt;
&lt;li&gt;sed&lt;/li&gt;
&lt;li&gt;awk&lt;/li&gt;
&lt;li&gt;curl or wget&lt;/li&gt;
&lt;li&gt;sort&lt;/li&gt;
&lt;li&gt;tr&lt;/li&gt;
&lt;li&gt;uniq&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Strace&#34;&gt;strace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://danielmiessler.com/study/tcpdump/&#34;&gt;tcpdump&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Information-theory-videos&#34;&gt;&lt;a href=&#34;#Information-theory-videos&#34; class=&#34;headerlink&#34; title=&#34;Information theory (videos)&#34;&gt;&lt;/a&gt;Information theory (videos)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.khanacademy.org/computing/computer-science/informationtheory&#34;&gt;Khan Academy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More about Markov processes:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/waxgx/core-markov-text-generation&#34;&gt;Core Markov Text Generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/gZhiC/core-implementing-markov-text-generation&#34;&gt;Core Implementing Markov Text Generation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/EUjrq/project-markov-text-generation-walk-through&#34;&gt;Project &amp;#x3D; Markov Text Generation Walk Through&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;See more in MIT 6.050J Information and Entropy series below&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Parity-Hamming-Code-videos&#34;&gt;&lt;a href=&#34;#Parity-Hamming-Code-videos&#34; class=&#34;headerlink&#34; title=&#34;Parity &amp;amp; Hamming Code (videos)&#34;&gt;&lt;/a&gt;Parity &amp;amp; Hamming Code (videos)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=q-3BctoUpHE&#34;&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DdMcAUlxh1M&#34;&gt;Parity&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Hamming Code:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=1A_NcXxdoCc&#34;&gt;Error detection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=JAMLuxdHH8o&#34;&gt;Error correction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wbH2VxzmoZk&#34;&gt;Error Checking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Entropy&#34;&gt;&lt;a href=&#34;#Entropy&#34; class=&#34;headerlink&#34; title=&#34;Entropy&#34;&gt;&lt;/a&gt;Entropy&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Also see videos below&lt;/li&gt;
&lt;li&gt;Make sure to watch information theory videos first&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/JnJq3Py0dyM?t=176&#34;&gt;Information Theory, Claude Shannon, Entropy, Redundancy, Data Compression &amp;amp; Bits (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Cryptography&#34;&gt;&lt;a href=&#34;#Cryptography&#34; class=&#34;headerlink&#34; title=&#34;Cryptography&#34;&gt;&lt;/a&gt;Cryptography&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Also see videos below&lt;/li&gt;
&lt;li&gt;Make sure to watch information theory videos first&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.khanacademy.org/computing/computer-science/cryptography&#34;&gt;Khan Academy Series&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KqqOXndnvic&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=30&#34;&gt;Cryptography: Hash Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=9TNI2wHmaeI&amp;index=31&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&#34;&gt;Cryptography: Encryption&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Compression&#34;&gt;&lt;a href=&#34;#Compression&#34; class=&#34;headerlink&#34; title=&#34;Compression&#34;&gt;&lt;/a&gt;Compression&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Make sure to watch information theory videos first&lt;/li&gt;
&lt;li&gt;Computerphile (videos):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Lto-ajuqW3w&#34;&gt;Compression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=M5c_RFKVkko&#34;&gt;Entropy in Compression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=umTbivyJoiI&#34;&gt;Upside Down Trees (Huffman Trees)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DV8efuB3h2g&#34;&gt;EXTRA BITS&amp;#x2F;TRITS - Huffman Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=goOa3DGezUA&#34;&gt;Elegant Compression in Text (The LZ 77 Method)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cCDCfoHTsaU&#34;&gt;Text Compression Meets Probabilities&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLOU2XLYxmsIJGErt5rrCqaSGTMyyqNt2H&#34;&gt;Compressor Head videos&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=whGwm0Lky2s&#34;&gt;(optional) Google Developers Live: GZIP is not enough!&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Computer-Security&#34;&gt;&lt;a href=&#34;#Computer-Security&#34; class=&#34;headerlink&#34; title=&#34;Computer Security&#34;&gt;&lt;/a&gt;Computer Security&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;MIT (23 videos)&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GqmQg-cszw4&amp;index=1&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;Introduction, Threat Models&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6bwzNg5qQ0o&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=2&#34;&gt;Control Hijacking Attacks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=drQyrzRoRiA&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=3&#34;&gt;Buffer Overflow Exploits and Defenses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6SIJmoE9L9g&amp;index=4&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;Privilege Separation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8VqTSY-11F4&amp;index=5&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;Capabilities&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=VEV74hwASeU&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&amp;index=6&#34;&gt;Sandboxing Native Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=chkFBigodIw&amp;index=7&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;Web Security Model&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EBQIGy1ROLY&amp;index=8&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;Securing Web Applications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=yRVZPvHYHzw&amp;index=9&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;Symbolic Execution&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SIEVvk3NVuk&amp;index=11&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;Network Security&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QOtA76ga_fY&amp;index=12&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;Network Protocols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PuVMkSEcPiI&amp;index=15&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;Side-Channel Attacks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Garbage-collection&#34;&gt;&lt;a href=&#34;#Garbage-collection&#34; class=&#34;headerlink&#34; title=&#34;Garbage collection&#34;&gt;&lt;/a&gt;Garbage collection&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iHVs_HkjdmI&#34;&gt;GC in Python (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.infoq.com/presentations/garbage-collection-benefits&#34;&gt;Deep Dive Java: Garbage Collection is Good!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=P-8Z0-MhdQs&amp;list=PLdzf4Clw0VbOEWOS_sLhT_9zaiQDrS5AR&amp;index=3&#34;&gt;Deep Dive Python: Garbage Collection in CPython (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Parallel-Programming&#34;&gt;&lt;a href=&#34;#Parallel-Programming&#34; class=&#34;headerlink&#34; title=&#34;Parallel Programming&#34;&gt;&lt;/a&gt;Parallel Programming&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/parprog1/home/week/1&#34;&gt;Coursera (Scala)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=uY85GkaYzBk&#34;&gt;Efficient Python for High Performance Parallel Computing (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Messaging-Serialization-and-Queueing-Systems&#34;&gt;&lt;a href=&#34;#Messaging-Serialization-and-Queueing-Systems&#34; class=&#34;headerlink&#34; title=&#34;Messaging, Serialization, and Queueing Systems&#34;&gt;&lt;/a&gt;Messaging, Serialization, and Queueing Systems&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://thrift.apache.org/&#34;&gt;Thrift&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://thrift-tutorial.readthedocs.io/en/latest/intro.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;Protocol Buffers&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.grpc.io/&#34;&gt;gRPC&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5tmPvSe7xXQ&amp;list=PLcTqM9n_dieN0k1nSeN36Z_ppKnvMJoly&amp;index=1&#34;&gt;gRPC 101 for Java Developers (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://try.redis.io/&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/sqs/&#34;&gt;Amazon SQS (queue)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/sns/&#34;&gt;Amazon SNS (pub-sub)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rabbitmq.com/getstarted.html&#34;&gt;Get Started&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.celeryproject.org/&#34;&gt;Celery&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html&#34;&gt;First Steps With Celery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://zeromq.org/&#34;&gt;ZeroMQ&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://zeromq.org/intro:read-the-manual&#34;&gt;Intro - Read The Manual&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://activemq.apache.org/&#34;&gt;ActiveMQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://kafka.apache.org/documentation.html#introduction&#34;&gt;Kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://msgpack.org/index.html&#34;&gt;MessagePack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://avro.apache.org/&#34;&gt;Avro&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;A&#34;&gt;&lt;a href=&#34;#A&#34; class=&#34;headerlink&#34; title=&#34;A*&#34;&gt;&lt;/a&gt;A*&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/A*_search_algorithm&#34;&gt;A Search Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-L-WgKMFuhE&#34;&gt;A* Pathfinding (E01: algorithm explanation) (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Fast-Fourier-Transform&#34;&gt;&lt;a href=&#34;#Fast-Fourier-Transform&#34; class=&#34;headerlink&#34; title=&#34;Fast Fourier Transform&#34;&gt;&lt;/a&gt;Fast Fourier Transform&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/&#34;&gt;An Interactive Guide To The Fourier Transform&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.askamathematician.com/2012/09/q-what-is-a-fourier-transform-what-is-it-used-for/&#34;&gt;What is a Fourier transform? What is it used for?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xxut2PN-V8Q&#34;&gt;What is the Fourier Transform? (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iTMn0Kt18tg&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=4&#34;&gt;Divide &amp;amp; Conquer: FFT (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/&#34;&gt;Understanding The FFT&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Bloom-Filter&#34;&gt;&lt;a href=&#34;#Bloom-Filter&#34; class=&#34;headerlink&#34; title=&#34;Bloom Filter&#34;&gt;&lt;/a&gt;Bloom Filter&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Given a Bloom filter with m bits and k hashing functions, both insertion and membership testing are O(k)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=-SuTGoFYjZs&#34;&gt;Bloom Filters (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=qBTdukbzc78&#34;&gt;Bloom Filters | Mining of Massive Datasets | Stanford University (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://billmill.org/bloomfilter-tutorial/&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.michaelschmatz.com/2016/04/11/how-to-write-a-bloom-filter-cpp/&#34;&gt;How To Write A Bloom Filter App&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;HyperLogLog&#34;&gt;&lt;a href=&#34;#HyperLogLog&#34; class=&#34;headerlink&#34; title=&#34;HyperLogLog&#34;&gt;&lt;/a&gt;HyperLogLog&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2012/4/5/big-data-counting-how-to-count-a-billion-distinct-objects-us.html&#34;&gt;How To Count A Billion Distinct Objects Using Only 1.5KB Of Memory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Locality-Sensitive-Hashing&#34;&gt;&lt;a href=&#34;#Locality-Sensitive-Hashing&#34; class=&#34;headerlink&#34; title=&#34;Locality-Sensitive Hashing&#34;&gt;&lt;/a&gt;Locality-Sensitive Hashing&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Used to determine the similarity of documents&lt;/li&gt;
&lt;li&gt;The opposite of MD5 or SHA which are used to determine if 2 documents&amp;#x2F;strings are exactly the same&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ferd.ca/simhashing-hopefully-made-simple.html&#34;&gt;Simhashing (hopefully) made simple&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;van-Emde-Boas-Trees&#34;&gt;&lt;a href=&#34;#van-Emde-Boas-Trees&#34; class=&#34;headerlink&#34; title=&#34;van Emde Boas Trees&#34;&gt;&lt;/a&gt;van Emde Boas Trees&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hmReJCupbNU&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=6&#34;&gt;Divide &amp;amp; Conquer: van Emde Boas Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2012/lecture-notes/MIT6_046JS12_lec15.pdf&#34;&gt;MIT Lecture Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Augmented-Data-Structures&#34;&gt;&lt;a href=&#34;#Augmented-Data-Structures&#34; class=&#34;headerlink&#34; title=&#34;Augmented Data Structures&#34;&gt;&lt;/a&gt;Augmented Data Structures&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_zksIj9O8_jc&#34;&gt;CS 61B Lecture 39: Augmenting Data Structures&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Balanced-search-trees&#34;&gt;&lt;a href=&#34;#Balanced-search-trees&#34; class=&#34;headerlink&#34; title=&#34;Balanced search trees&#34;&gt;&lt;/a&gt;Balanced search trees&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Know at least one type of balanced binary tree (and know how it’s implemented):&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“Among balanced search trees, AVL and 2&amp;#x2F;3 trees are now passé, and red-black trees seem to be more popular.&lt;br&gt;  A particularly interesting self-organizing data structure is the splay tree, which uses rotations&lt;br&gt;  to move any accessed key to the root.” - Skiena&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Of these, I chose to implement a splay tree. From what I’ve read, you won’t implement a&lt;br&gt;  balanced search tree in your interview. But I wanted exposure to coding one up&lt;br&gt;  and let’s face it, splay trees are the bee’s knees. I did read a lot of red-black tree code&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Splay tree: insert, search, delete functions&lt;br&gt;  If you end up implementing red&amp;#x2F;black tree try just these:&lt;/li&gt;
&lt;li&gt;Search and insertion functions, skipping delete&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I want to learn more about B-Tree since it’s used so widely with very large data sets&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree&#34;&gt;Self-balancing binary search tree&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;AVL trees&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In practice:&lt;br&gt;  From what I can tell, these aren’t used much in practice, but I could see where they would be:&lt;br&gt;  The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly&lt;br&gt;  balanced than red–black trees, leading to slower insertion and removal but faster retrieval. This makes it&lt;br&gt;  attractive for data structures that may be built once and loaded without reconstruction, such as language&lt;br&gt;  dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=FNeL18KsWPc&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=6&#34;&gt;MIT AVL Trees &amp;#x2F; AVL Sort (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/Qq5E0/avl-trees&#34;&gt;AVL Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/PKEBC/avl-tree-implementation&#34;&gt;AVL Tree Implementation (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/22BgE/split-and-merge&#34;&gt;Split And Merge&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Splay trees&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In practice:&lt;br&gt;  Splay trees are typically used in the implementation of caches, memory allocators, routers, garbage collectors,&lt;br&gt;  data compression, ropes (replacement of string used for long text strings), in Windows NT (in the virtual memory,&lt;br&gt;  networking and file system code) etc&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_G5QIXywcJlY&#34;&gt;CS 61B: Splay Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MIT Lecture: Splay Trees:&lt;ul&gt;
&lt;li&gt;Gets very mathy, but watch the last 10 minutes for sure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QnPl_Y6EqMo&#34;&gt;Video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Red&amp;#x2F;black trees&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;These are a translation of a 2-3 tree (see below).&lt;/li&gt;
&lt;li&gt;In practice:&lt;br&gt;  Red–black trees offer worst-case guarantees for insertion time, deletion time, and search time.&lt;br&gt;  Not only does this make them valuable in time-sensitive applications such as real-time applications,&lt;br&gt;  but it makes them valuable building blocks in other data structures which provide worst-case guarantees;&lt;br&gt;  for example, many data structures used in computational geometry can be based on red–black trees, and&lt;br&gt;  the Completely Fair Scheduler used in current Linux kernels uses red–black trees. In the version 8 of Java,&lt;br&gt;  the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor&lt;br&gt;  hashcodes, a Red-Black tree is used&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/1W3x0f_RmUo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3871&#34;&gt;Aduni - Algorithms - Lecture 4 (link jumps to starting point) (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hm2GHwyKF1o&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=5&#34;&gt;Aduni - Algorithms - Lecture 5 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Red%E2%80%93black_tree&#34;&gt;Red-Black Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.topcoder.com/thrive/articles/An%20Introduction%20to%20Binary%20Search%20and%20Red-Black%20Trees&#34;&gt;An Introduction To Binary Search And Red Black Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin&#34;&gt;[Review] Red-Black Trees (playlist) in 30 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2-3 search trees&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In practice:&lt;br&gt;  2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees).&lt;/li&gt;
&lt;li&gt;You would use 2-3 tree very rarely because its implementation involves different types of nodes. Instead, people use Red Black trees.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=C3SsdUqasD4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=2&#34;&gt;23-Tree Intuition and Definition (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=iYvBtGKsqSg&amp;index=3&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&#34;&gt;Binary View of 23-Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=TOb1tuEZ2X4&amp;index=5&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&#34;&gt;2-3 Trees (student recitation) (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;2-3-4 Trees (aka 2-4 trees)&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In practice:&lt;br&gt;  For every 2-4 tree, there are corresponding red–black trees with data elements in the same order. The insertion and deletion&lt;br&gt;  operations on 2-4 trees are also equivalent to color-flipping and rotations in red–black trees. This makes 2-4 trees an&lt;br&gt;  important tool for understanding the logic behind red–black trees, and this is why many introductory algorithm texts introduce&lt;br&gt;  2-4 trees just before red–black trees, even though &lt;strong&gt;2-4 trees are not often used in practice&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_zqrqYXkth6Q&#34;&gt;CS 61B Lecture 26: Balanced Search Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=DQdMYevEyE4&amp;index=4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&#34;&gt;Bottom Up 234-Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2679VQ26Fp4&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=5&#34;&gt;Top Down 234-Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;N-ary (K-ary, M-ary) trees&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;note: the N or K is the branching factor (max branches)&lt;/li&gt;
&lt;li&gt;binary trees are a 2-ary tree, with branching factor &amp;#x3D; 2&lt;/li&gt;
&lt;li&gt;2-3 trees are 3-ary&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/K-ary_tree&#34;&gt;K-Ary Tree&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;B-Trees&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fun fact: it’s a mystery, but the B could stand for Boeing, Balanced, or Bayer (co-inventor).&lt;/li&gt;
&lt;li&gt;In Practice:&lt;br&gt;  B-Trees are widely used in databases. Most modern filesystems use B-trees (or Variants). In addition to&lt;br&gt;  its use in databases, the B-tree is also used in filesystems to allow quick random access to an arbitrary&lt;br&gt;  block in a particular file. The basic problem is turning the file block i address into a disk block&lt;br&gt;  (or perhaps to a cylinder-head-sector) address&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/B-tree&#34;&gt;B-Tree&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://btechsmartclass.com/data_structures/b-trees.html&#34;&gt;B-Tree Datastructure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=I22wEC1tTGo&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&amp;index=6&#34;&gt;Introduction to B-Trees (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=s3bCdZGrgpA&amp;index=7&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&#34;&gt;B-Tree Definition and Insertion (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=svfnVhJOfMc&amp;index=8&amp;list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&#34;&gt;B-Tree Deletion (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=V3omVLzI0WE&amp;index=7&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&#34;&gt;MIT 6.851 - Memory Hierarchy Models (video)&lt;/a&gt;&lt;br&gt;  - covers cache-oblivious B-Trees, very interesting data structures&lt;br&gt;  - the first 37 minutes are very technical, may be skipped (B is block size, cache line size)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL9xmBV_5YoZNFPPv98DjTdD9X6UI9KMHz&#34;&gt;[Review] B-Trees (playlist) in 26 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;k-D-Trees&#34;&gt;&lt;a href=&#34;#k-D-Trees&#34; class=&#34;headerlink&#34; title=&#34;k-D Trees&#34;&gt;&lt;/a&gt;k-D Trees&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Great for finding number of points in a rectangle or higher dimension object&lt;/li&gt;
&lt;li&gt;A good fit for k-nearest neighbors&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Y4ZgLlDfKDg&#34;&gt;kNN K-d tree algorithm (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Skip-lists&#34;&gt;&lt;a href=&#34;#Skip-lists&#34; class=&#34;headerlink&#34; title=&#34;Skip lists&#34;&gt;&lt;/a&gt;Skip lists&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;“These are somewhat of a cult data structure” - Skiena&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2g9OSRKJuzM&amp;index=10&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&#34;&gt;Randomization: Skip Lists (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Skip_list&#34;&gt;For animations and a little more detail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Network-Flows&#34;&gt;&lt;a href=&#34;#Network-Flows&#34; class=&#34;headerlink&#34; title=&#34;Network Flows&#34;&gt;&lt;/a&gt;Network Flows&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Tl90tNtKvxs&#34;&gt;Ford-Fulkerson in 5 minutes — Step by step example (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=v1VgJmkEJW0&#34;&gt;Ford-Fulkerson Algorithm (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2vhN4Ice5jI&#34;&gt;Network Flows (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Disjoint-Sets-Union-Find&#34;&gt;&lt;a href=&#34;#Disjoint-Sets-Union-Find&#34; class=&#34;headerlink&#34; title=&#34;Disjoint Sets &amp;amp; Union Find&#34;&gt;&lt;/a&gt;Disjoint Sets &amp;amp; Union Find&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley_webcast_MAEGXTwmUsI&#34;&gt;UCB 61B - Disjoint Sets; Sorting &amp;amp; selection (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/algorithms-part1/home/week/1&#34;&gt;Sedgewick Algorithms - Union-Find (6 videos)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Math-for-Fast-Processing&#34;&gt;&lt;a href=&#34;#Math-for-Fast-Processing&#34; class=&#34;headerlink&#34; title=&#34;Math for Fast Processing&#34;&gt;&lt;/a&gt;Math for Fast Processing&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=eCaXlAaN2uE&amp;index=11&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&#34;&gt;Integer Arithmetic, Karatsuba Multiplication (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ru7mWZJlRQg&#34;&gt;The Chinese Remainder Theorem (used in cryptography) (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Treap&#34;&gt;&lt;a href=&#34;#Treap&#34; class=&#34;headerlink&#34; title=&#34;Treap&#34;&gt;&lt;/a&gt;Treap&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Combination of a binary search tree and a heap&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Treap&#34;&gt;Treap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6podLUYinH8&#34;&gt;Data Structures: Treaps explained (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.cmu.edu/~scandal/papers/treaps-spaa98.pdf&#34;&gt;Applications in set operations&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Linear-Programming-videos&#34;&gt;&lt;a href=&#34;#Linear-Programming-videos&#34; class=&#34;headerlink&#34; title=&#34;Linear Programming (videos)&#34;&gt;&lt;/a&gt;Linear Programming (videos)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=M4K6HYLHREQ&#34;&gt;Linear Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2ACJ9ewUC6U&#34;&gt;Finding minimum cost&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=8AA_81xI3ik&#34;&gt;Finding maximum value&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=44pAWI7v5Zk&#34;&gt;Solve Linear Equations with Python - Simplex Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Geometry-Convex-hull-videos&#34;&gt;&lt;a href=&#34;#Geometry-Convex-hull-videos&#34; class=&#34;headerlink&#34; title=&#34;Geometry, Convex hull (videos)&#34;&gt;&lt;/a&gt;Geometry, Convex hull (videos)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/XIAQRlNkJAw?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;t=3164&#34;&gt;Graph Alg. IV: Intro to geometric algorithms - Lecture 9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=J5aJEcOr6Eo&amp;index=10&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&#34;&gt;Geometric Algorithms: Graham &amp;amp; Jarvis - Lecture 10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=EzeYI7p9MjU&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=2&#34;&gt;Divide &amp;amp; Conquer: Convex Hull, Median Finding&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&#34;Discrete-math&#34;&gt;&lt;a href=&#34;#Discrete-math&#34; class=&#34;headerlink&#34; title=&#34;Discrete math&#34;&gt;&lt;/a&gt;Discrete math&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.infocobuild.com/education/audio-video-courses/computer-science/cs70-spring2015-berkeley.html&#34;&gt;Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLWX710qNZo_sNlSWRMVIh6kfTjolNaZ8t&#34;&gt;Discrete Mathematics by Shai Simonson (19 videos)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nptel.ac.in/courses/106/106/106106183/&#34;&gt;Discrete Mathematics By IIT Ropar NPTEL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2 id=&#34;Additional-Detail-on-Some-Subjects&#34;&gt;&lt;a href=&#34;#Additional-Detail-on-Some-Subjects&#34; class=&#34;headerlink&#34; title=&#34;Additional Detail on Some Subjects&#34;&gt;&lt;/a&gt;Additional Detail on Some Subjects&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;I added these to reinforce some ideas already presented above, but didn’t want to include them&lt;br&gt;above because it’s just too much. It’s easy to overdo it on a subject.&lt;br&gt;You want to get hired in this century, right?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;SOLID&lt;/strong&gt;   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=TMuno5RZNeE&#34;&gt;Bob Martin SOLID Principles of Object Oriented and Agile Design (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; S - &lt;a href=&#34;http://www.oodesign.com/single-responsibility-principle.html&#34;&gt;Single Responsibility Principle&lt;/a&gt; | &lt;a href=&#34;http://www.javacodegeeks.com/2011/11/solid-single-responsibility-principle.html&#34;&gt;Single responsibility to each Object&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/open?id=0ByOwmqah_nuGNHEtcU5OekdDMkk&#34;&gt;more flavor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; O - &lt;a href=&#34;http://www.oodesign.com/open-close-principle.html&#34;&gt;Open&amp;#x2F;Closed Principle&lt;/a&gt;  | &lt;a href=&#34;https://en.wikipedia.org/wiki/Open/closed_principle&#34;&gt;On production level Objects are ready for extension but not for modification&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1&amp;hl=en&#34;&gt;more flavor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; L - &lt;a href=&#34;http://www.oodesign.com/liskov-s-substitution-principle.html&#34;&gt;Liskov Substitution Principle&lt;/a&gt; | &lt;a href=&#34;http://stackoverflow.com/questions/56860/what-is-the-liskov-substitution-principle&#34;&gt;Base Class and Derived class follow ‘IS A’ Principle&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh&amp;hl=en&#34;&gt;more flavor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; I - &lt;a href=&#34;http://www.oodesign.com/interface-segregation-principle.html&#34;&gt;Interface segregation principle&lt;/a&gt; | clients should not be forced to implement interfaces they don’t use&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=3CtAfl7aXAQ&#34;&gt;Interface Segregation Principle in 5 minutes (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi&amp;hl=en&#34;&gt;more flavor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; D -&lt;a href=&#34;http://www.oodesign.com/dependency-inversion-principle.html&#34;&gt;Dependency Inversion principle&lt;/a&gt; | Reduce the dependency In composition of objects.&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/62539/what-is-the-dependency-inversion-principle-and-why-is-it-important&#34;&gt;Why Is The Dependency Inversion Principle And Why Is It Important&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://docs.google.com/a/cleancoder.com/viewer?a=v&amp;pid=explorer&amp;chrome=true&amp;srcid=0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz&amp;hl=en&#34;&gt;more flavor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Union-Find&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/JssSY/overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/EM5D0/naive-implementations&#34;&gt;Naive Implementation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/Mxu0w/trees&#34;&gt;Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/qb4c2/union-by-rank&#34;&gt;Union By Rank&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/Q9CVI/path-compression&#34;&gt;Path Compression&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/GQQLN/analysis-optional&#34;&gt;Analysis Options&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;More Dynamic Programming&lt;/strong&gt; (videos)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=r4-cftqTcdI&amp;ab_channel=MITOpenCourseWare&#34;&gt;6.006: Dynamic Programming I: Fibonacci, Shortest Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=KLBCUx1is2c&amp;ab_channel=MITOpenCourseWare&#34;&gt;6.006: Dynamic Programming II: Text Justification, Blackjack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=TDo3r5M1LNo&amp;ab_channel=MITOpenCourseWare&#34;&gt;6.006: DP III: Parenthesization, Edit Distance, Knapsack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=i9OAOk0CUQE&amp;ab_channel=MITOpenCourseWare&#34;&gt;6.006: DP IV: Guitar Fingering, Tetris, Super Mario Bros.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Tw1k46ywN6E&amp;index=14&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&#34;&gt;6.046: Dynamic Programming &amp;amp; Advanced DP&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=NzgFUwOaoIw&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=15&#34;&gt;6.046: Dynamic Programming: All-Pairs Shortest Paths&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=krZI60lKPek&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=12&#34;&gt;6.046: Dynamic Programming (student recitation)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Advanced Graph Processing&lt;/strong&gt; (videos)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=mUBmcbbJNf4&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=27&#34;&gt;Synchronous Distributed Algorithms: Symmetry-Breaking. Shortest-Paths Spanning Trees&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=kQ-UQAzcnzA&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&amp;index=28&#34;&gt;Asynchronous Distributed Algorithms: Shortest-Paths Spanning Trees&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MIT &lt;strong&gt;Probability&lt;/strong&gt; (mathy, and go slowly, which is good for mathy things) (videos):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=SmFwFdESMHI&amp;index=18&amp;list=PLB7540DEDD482705B&#34;&gt;MIT 6.042J - Probability Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=E6FbvM-FGZ8&amp;index=19&amp;list=PLB7540DEDD482705B&#34;&gt;MIT 6.042J - Conditional Probability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=l1BCv3qqW4A&amp;index=20&amp;list=PLB7540DEDD482705B&#34;&gt;MIT 6.042J - Independence&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MOfhhFaQdjw&amp;list=PLB7540DEDD482705B&amp;index=21&#34;&gt;MIT 6.042J - Random Variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gGlMSe7uEkA&amp;index=22&amp;list=PLB7540DEDD482705B&#34;&gt;MIT 6.042J - Expectation I&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oI9fMUqgfxY&amp;index=23&amp;list=PLB7540DEDD482705B&#34;&gt;MIT 6.042J - Expectation II&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=q4mwO2qS2z4&amp;index=24&amp;list=PLB7540DEDD482705B&#34;&gt;MIT 6.042J - Large Deviations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=56iFMY8QW2k&amp;list=PLB7540DEDD482705B&amp;index=25&#34;&gt;MIT 6.042J - Random Walks&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=oDniZCmNmNw&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=19&#34;&gt;Simonson: Approximation Algorithms (video)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;String Matching&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rabin-Karp (videos):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/lecture/data-structures/rabin-karps-algorithm-c0Qkw&#34;&gt;Rabin Karps Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/nYrc8/optimization-precomputation&#34;&gt;Precomputing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/data-structures/lecture/h4ZLc/optimization-implementation-and-analysis&#34;&gt;Optimization: Implementation and Analysis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=BRO7mVIFt08&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=9&#34;&gt;Table Doubling, Karp-Rabin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=w6nuXg0BISo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;index=32&#34;&gt;Rolling Hashes, Amortized Analysis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Knuth-Morris-Pratt (KMP):&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5i7oKodCRJo&#34;&gt;TThe Knuth-Morris-Pratt (KMP) String Matching Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Boyer–Moore string search algorithm&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm&#34;&gt;Boyer-Moore String Search Algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QDZpzctPf10&#34;&gt;Advanced String Searching Boyer-Moore-Horspool Algorithms (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/learn/algorithms-on-strings/home/week/1&#34;&gt;Coursera: Algorithms on Strings&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;starts off great, but by the time it gets past KMP it gets more complicated than it needs to be&lt;/li&gt;
&lt;li&gt;nice explanation of tries&lt;/li&gt;
&lt;li&gt;can be skipped&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sorting&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stanford lectures on sorting:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ENp00xylP7c&amp;index=15&amp;list=PLFE6E58F856038C69&#34;&gt;Lecture 15 | Programming Abstractions (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=y4M9IVgrVKo&amp;index=16&amp;list=PLFE6E58F856038C69&#34;&gt;Lecture 16 | Programming Abstractions (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Shai Simonson, &lt;a href=&#34;http://www.aduni.org/&#34;&gt;Aduni.org&lt;/a&gt;:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=odNJmw5TOEE&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=2&#34;&gt;Algorithms - Sorting - Lecture 2 (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hj8YKFTFKEE&amp;list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&amp;index=3&#34;&gt;Algorithms - Sorting II - Lecture 3 (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Steven Skiena lectures on sorting:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=jUf-UQ3a0kg&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=8&#34;&gt;CSE373 2020 - Mergesort&amp;#x2F;Quicksort (video)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0ksyQKmre84&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=9&#34;&gt;CSE373 2020 - Linear Sorting (video)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Video-Series&#34;&gt;&lt;a href=&#34;#Video-Series&#34; class=&#34;headerlink&#34; title=&#34;Video Series&#34;&gt;&lt;/a&gt;Video Series&lt;/h2&gt;&lt;p&gt;Sit back and enjoy.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr&#34;&gt;List of individual Dynamic Programming problems (each is short)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL038BE01D3BAEFDB0&#34;&gt;x86 Architecture, Assembly, Applications (11 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8&#34;&gt;MIT 18.06 Linear Algebra, Spring 2005 (35 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL3B08AE665AB9002A&#34;&gt;Excellent - MIT Calculus Revisited: Single Variable Calculus&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=22hwcnXIGgk&amp;list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&amp;index=1&#34;&gt;Skiena lectures from Algorithm Design Manual - CSE373 2020 - Analysis of Algorithms (26 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iAlnI-BQr9hjqADPBtujFJd&#34;&gt;UC Berkeley 61B (Spring 2014): Data Structures (25 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley-webcast-PL4BBB74C7D2A1049C&#34;&gt;UC Berkeley 61B (Fall 2006): Data Structures (39 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iCl2-D-FS5mk0jFF6cYSJs_&#34;&gt;UC Berkeley 61C: Machine Structures (26 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLJ9pm_Rc9HesnkwKlal_buSIHA-jTZMpO&#34;&gt;OOSE: Software Dev Using UML and Java (21 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLDSlqjcPpoL64CJdF0Qee5oWqGS6we_Yu&#34;&gt;MIT 6.004: Computation Structures (49 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL5PHm2jkkXmi5CxxI7b3JCL1TWybTDtKq&#34;&gt;Carnegie Mellon - Computer Architecture Lectures (39 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=HtSuA80QTyo&amp;list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&amp;nohtml5=False&#34;&gt;MIT 6.006: Intro to Algorithms (47 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=zm2VP0kHl1M&amp;list=PL6535748F59DCA484&#34;&gt;MIT 6.033: Computer System Engineering (22 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLUl4u3cNGP63gFHB6xb-kVBiQHYe_4hSi&#34;&gt;MIT 6.034 Artificial Intelligence, Fall 2010 (30 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=L3LMbpZIKhQ&amp;list=PLB7540DEDD482705B&#34;&gt;MIT 6.042J: Mathematics for Computer Science, Fall 2010 (25 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2P-yW7LQr08&amp;list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&#34;&gt;MIT 6.046: Design and Analysis of Algorithms (34 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cQP8WApzIQQ&amp;list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB&#34;&gt;MIT 6.824: Distributed Systems, Spring 2020 (20 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=T0yzrZL1py0&amp;list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&amp;index=1&#34;&gt;MIT 6.851: Advanced Data Structures (22 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c&#34;&gt;MIT 6.854: Advanced Algorithms, Spring 2016 (24 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL2SOU6wwxB0uP4rJgf5ayhHWgw7akUWSf&#34;&gt;Harvard COMPSCI 224: Advanced Algorithms (25 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=GqmQg-cszw4&amp;index=1&amp;list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&#34;&gt;MIT 6.858 Computer Systems Security, Fall 2014&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL9D558D49CA734A02&#34;&gt;Stanford: Programming Paradigms (27 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL6N5qY2nvvJE8X75VkXglSrVhLv1tVcfy&#34;&gt;Introduction to Cryptography by Christof Paar&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.crypto-textbook.com/&#34;&gt;Course Website along with Slides and Problem Sets&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLLssT5z_DsK9JDLcT8T62VtzwyW9LNepV&#34;&gt;Mining Massive Datasets - Stanford University (94 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/user/DrSaradaHerke/playlists?shelf_id=5&amp;view=50&amp;sort=dd&#34;&gt;Graph Theory by Sarada Herke (67 videos)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Computer-Science-Courses&#34;&gt;&lt;a href=&#34;#Computer-Science-Courses&#34; class=&#34;headerlink&#34; title=&#34;Computer Science Courses&#34;&gt;&lt;/a&gt;Computer Science Courses&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/open-source-society/computer-science&#34;&gt;Directory of Online CS Courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/prakhar1989/awesome-courses&#34;&gt;Directory of CS Courses (many with online lectures)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Algorithms-implementation&#34;&gt;&lt;a href=&#34;#Algorithms-implementation&#34; class=&#34;headerlink&#34; title=&#34;Algorithms implementation&#34;&gt;&lt;/a&gt;Algorithms implementation&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://algs4.cs.princeton.edu/code&#34;&gt;Multiple Algorithms implementation by Princeton University&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Papers&#34;&gt;&lt;a href=&#34;#Papers&#34; class=&#34;headerlink&#34; title=&#34;Papers&#34;&gt;&lt;/a&gt;Papers&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.cmu.edu/~crary/819-f09/&#34;&gt;Love classic papers?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://spinroot.com/courses/summer/Papers/hoare_1978.pdf&#34;&gt;1978: Communicating Sequential Processes&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/thomas11/csp&#34;&gt;implemented in Go&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf&#34;&gt;2003: The Google File System&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;replaced by Colossus in 2012&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf&#34;&gt;2004: MapReduce: Simplified Data Processing on Large Clusters&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;mostly replaced by Cloud Dataflow?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf&#34;&gt;2006: Bigtable: A Distributed Storage System for Structured Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://research.google.com/archive/chubby-osdi06.pdf&#34;&gt;2006: The Chubby Lock Service for Loosely-Coupled Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf&#34;&gt;2007: Dynamo: Amazon’s Highly Available Key-value Store&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;The Dynamo paper kicked off the NoSQL revolution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.akkadia.org/drepper/cpumemory.pdf&#34;&gt;2007: What Every Programmer Should Know About Memory (very long, and the author encourages skipping of some sections)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;2012: AddressSanitizer: A Fast Address Sanity Checker:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37752.pdf&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/conference/atc12/technical-sessions/presentation/serebryany&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;2013: Spanner: Google’s Globally-Distributed Database:&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf&#34;&gt;paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.usenix.org/node/170855&#34;&gt;video&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43790.pdf&#34;&gt;2015: Continuous Pipelines at Google&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44686.pdf&#34;&gt;2015: High-Availability at Massive Scale: Building Google’s Data Infrastructure for Ads&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43835.pdf&#34;&gt;2015: How Developers Search for Code: A Case Study&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More papers: &lt;a href=&#34;https://github.com/0voice/computer_expert_paper&#34;&gt;1,000 papers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="computer-science" />
        <category term="study-plan" />
        <updated>2023-08-15T04:24:52.000Z</updated>
    </entry>
</feed>
