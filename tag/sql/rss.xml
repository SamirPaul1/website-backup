<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Samir Paul • Posts by &#34;sql&#34; tag</title>
        <link>https://samirpaul1.github.io</link>
        <description>Software Engineer</description>
        <language>en</language>
        <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
        <lastBuildDate>Sun, 06 Aug 2023 02:22:53 +0530</lastBuildDate>
        <category>LeetCode</category>
        <category>GeeksforGeeks</category>
        <category>blog</category>
        <category>coding</category>
        <category>computer-science</category>
        <category>Binary Search</category>
        <category>caching</category>
        <category>system-design</category>
        <category>design-interview</category>
        <category>preparation</category>
        <category>computer-networks</category>
        <category>computer-networks-notes</category>
        <category>study-plan</category>
        <category>projects</category>
        <category>tutorials</category>
        <category>list-of-project-based-tutorials</category>
        <category>curated-list</category>
        <category>DSAlgo</category>
        <category>dsa-in-python</category>
        <category>data-structures-and-algorithms</category>
        <category>Dynamic Programming</category>
        <category>Patterns</category>
        <category>dp</category>
        <category>embed-musicapp</category>
        <category>music</category>
        <category>embeded</category>
        <category>music-player</category>
        <category>google</category>
        <category>google-search-withing-webpage</category>
        <category>google-programmable-search-engine</category>
        <category>programmable-search-engine</category>
        <category>Graph</category>
        <category>distributed-systems</category>
        <category>Greedy</category>
        <category>two pointers problems</category>
        <category>python</category>
        <category>python-frameworks</category>
        <category>python-libraries</category>
        <category>technical-interview</category>
        <category>interview-questions</category>
        <category>leetcode</category>
        <category>leetcode-solutions</category>
        <category>leetcode-solutions-cheetsheet</category>
        <category>leetcode-cheetsheet</category>
        <category>important-leetcode-solutions</category>
        <category>python3</category>
        <category>file-compressor</category>
        <category>flask-application</category>
        <category>python-server</category>
        <category>pdfnet</category>
        <category>pdf-compression</category>
        <category>online-pdf-compressor</category>
        <category>pdfnetpython</category>
        <category>open-external-links</category>
        <category>javascript</category>
        <category>Operating System</category>
        <category>Placements</category>
        <category>OS</category>
        <category>project</category>
        <category>pygame</category>
        <category>python-game</category>
        <category>pyshooter</category>
        <category>shooter-game</category>
        <category>Python Cheat Sheet</category>
        <category>Leetcode</category>
        <category>sql</category>
        <category>nosql</category>
        <category>sharding</category>
        <category>data-partitioning</category>
        <category>certificates</category>
        <category>udemy</category>
        <category>coursera</category>
        <category>datacamp</category>
        <category>INNER JOIN</category>
        <category>RIGHT JOIN</category>
        <category>FULL JOIN</category>
        <category>SQL</category>
        <category>SQL Joins</category>
        <category>web-development</category>
        <category>lossless-data-compression</category>
        <category>online-file-compressor</category>
        <category>txt-compressor</category>
        <category>algorithm</category>
        <category>databases</category>
        <category>short-url</category>
        <category>url-shortner</category>
        <category>networking</category>
        <item>
            <guid isPermalink="true">https://samirpaul1.github.io/posts/sql-joins-inner-left-right-and-full-joins/</guid>
            <title>SQL Joins - Inner, Left, Right and Full Joins</title>
            <link>https://samirpaul1.github.io/posts/sql-joins-inner-left-right-and-full-joins/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>INNER JOIN</category>
            <category>RIGHT JOIN</category>
            <category>FULL JOIN</category>
            <category>SQL</category>
            <category>SQL Joins</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;SQL Join&lt;/strong&gt; statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are as follows: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;INNER JOIN&lt;/li&gt;
&lt;li&gt;LEFT JOIN&lt;/li&gt;
&lt;li&gt;RIGHT JOIN&lt;/li&gt;
&lt;li&gt;FULL JOIN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77569653/227738791-78897c64-4c15-4d6a-b75a-656c6a59a5d2.png&#34; alt=&#34;SQL Joins&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul1.github.io/posts/sql-vs-nosql/</guid>
            <title>SQL vs. NoSQL</title>
            <link>https://samirpaul1.github.io/posts/sql-vs-nosql/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>sql</category>
            <category>nosql</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;SQL-vs-NoSQL&#34;&gt;&lt;a href=&#34;#SQL-vs-NoSQL&#34; class=&#34;headerlink&#34; title=&#34;SQL vs. NoSQL&#34;&gt;&lt;/a&gt;SQL vs. NoSQL&lt;/h1&gt;&lt;h2 id=&#34;Common-types-of-NoSQL&#34;&gt;&lt;a href=&#34;#Common-types-of-NoSQL&#34; class=&#34;headerlink&#34; title=&#34;Common types of NoSQL&#34;&gt;&lt;/a&gt;Common types of NoSQL&lt;/h2&gt;&lt;h3 id=&#34;Key-value-stores&#34;&gt;&lt;a href=&#34;#Key-value-stores&#34; class=&#34;headerlink&#34; title=&#34;Key-value stores&#34;&gt;&lt;/a&gt;Key-value stores&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Array of key-value pairs. The “key” is an attribute name.&lt;/li&gt;
&lt;li&gt;Redis, Vodemort, Dynamo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Document-databases&#34;&gt;&lt;a href=&#34;#Document-databases&#34; class=&#34;headerlink&#34; title=&#34;Document databases&#34;&gt;&lt;/a&gt;Document databases&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data is stored in documents.&lt;/li&gt;
&lt;li&gt;Documents are grouped in collections.&lt;/li&gt;
&lt;li&gt;Each document can have an entirely different structure.&lt;/li&gt;
&lt;li&gt;CouchDB, MongoDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Wide-column-columnar-databases&#34;&gt;&lt;a href=&#34;#Wide-column-columnar-databases&#34; class=&#34;headerlink&#34; title=&#34;Wide-column &amp;#x2F; columnar databases&#34;&gt;&lt;/a&gt;Wide-column &amp;#x2F; columnar databases&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Column families - containers for rows.&lt;/li&gt;
&lt;li&gt;No need to know all the columns up front.&lt;/li&gt;
&lt;li&gt;Each row can have different number of columns.&lt;/li&gt;
&lt;li&gt;Cassandra, HBase.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Graph-database&#34;&gt;&lt;a href=&#34;#Graph-database&#34; class=&#34;headerlink&#34; title=&#34;Graph database&#34;&gt;&lt;/a&gt;Graph database&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data is stored in graph structures&lt;ul&gt;
&lt;li&gt;Nodes: entities&lt;/li&gt;
&lt;li&gt;Properties: information about the entities&lt;/li&gt;
&lt;li&gt;Lines: connections between the entities&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neo4J, InfiniteGraph&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Differences-between-SQL-and-NoSQL&#34;&gt;&lt;a href=&#34;#Differences-between-SQL-and-NoSQL&#34; class=&#34;headerlink&#34; title=&#34;Differences between SQL and NoSQL&#34;&gt;&lt;/a&gt;Differences between SQL and NoSQL&lt;/h2&gt;&lt;h3 id=&#34;Storage&#34;&gt;&lt;a href=&#34;#Storage&#34; class=&#34;headerlink&#34; title=&#34;Storage&#34;&gt;&lt;/a&gt;Storage&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL: store data in tables.&lt;/li&gt;
&lt;li&gt;NoSQL: have different data storage models.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Schema&#34;&gt;&lt;a href=&#34;#Schema&#34; class=&#34;headerlink&#34; title=&#34;Schema&#34;&gt;&lt;/a&gt;Schema&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL&lt;ul&gt;
&lt;li&gt;Each record conforms to a fixed schema.&lt;/li&gt;
&lt;li&gt;Schema can be altered, but it requires modifying the whole database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL:&lt;ul&gt;
&lt;li&gt;Schemas are dynamic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Querying&#34;&gt;&lt;a href=&#34;#Querying&#34; class=&#34;headerlink&#34; title=&#34;Querying&#34;&gt;&lt;/a&gt;Querying&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL&lt;ul&gt;
&lt;li&gt;Use SQL (structured query language) for defining and manipulating the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL&lt;ul&gt;
&lt;li&gt;Queries are focused on a collection of documents.&lt;/li&gt;
&lt;li&gt;UnQL (unstructured query language).&lt;/li&gt;
&lt;li&gt;Different databases have different syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Scalability&#34;&gt;&lt;a href=&#34;#Scalability&#34; class=&#34;headerlink&#34; title=&#34;Scalability&#34;&gt;&lt;/a&gt;Scalability&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL&lt;ul&gt;
&lt;li&gt;Vertically scalable (by increasing the horsepower: memory, CPU, etc) and expensive.&lt;/li&gt;
&lt;li&gt;Horizontally scalable (across multiple servers); but it can be challenging and time-consuming.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL&lt;ul&gt;
&lt;li&gt;Horizontablly scalable (by adding more servers) and cheap.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ACID&#34;&gt;&lt;a href=&#34;#ACID&#34; class=&#34;headerlink&#34; title=&#34;ACID&#34;&gt;&lt;/a&gt;ACID&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Atomicity, consistency, isolation, durability&lt;/li&gt;
&lt;li&gt;SQL&lt;ul&gt;
&lt;li&gt;ACID compliant&lt;/li&gt;
&lt;li&gt;Data reliability&lt;/li&gt;
&lt;li&gt;Gurantee of transactions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL&lt;ul&gt;
&lt;li&gt;Most sacrifice ACID compliance for performance and scalability.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Which-one-to-use&#34;&gt;&lt;a href=&#34;#Which-one-to-use&#34; class=&#34;headerlink&#34; title=&#34;Which one to use?&#34;&gt;&lt;/a&gt;Which one to use?&lt;/h2&gt;&lt;h3 id=&#34;SQL&#34;&gt;&lt;a href=&#34;#SQL&#34; class=&#34;headerlink&#34; title=&#34;SQL&#34;&gt;&lt;/a&gt;SQL&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Ensure ACID compliance.&lt;ul&gt;
&lt;li&gt;Reduce anomalies.&lt;/li&gt;
&lt;li&gt;Protect database integrity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data is structured and unchanging.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;NoSQL&#34;&gt;&lt;a href=&#34;#NoSQL&#34; class=&#34;headerlink&#34; title=&#34;NoSQL&#34;&gt;&lt;/a&gt;NoSQL&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data has little or no structure.&lt;/li&gt;
&lt;li&gt;Make the most of cloud computing and storage.&lt;ul&gt;
&lt;li&gt;Cloud-based storage requires data to be easily spread across multiple servers to scale up.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rapid development.&lt;ul&gt;
&lt;li&gt;Frequent updates to the data structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul1.github.io/posts/sharding-or-data-partitioning/</guid>
            <title>Sharding or Data Partitioning</title>
            <link>https://samirpaul1.github.io/posts/sharding-or-data-partitioning/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>sql</category>
            <category>nosql</category>
            <category>sharding</category>
            <category>data-partitioning</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Sharding-Data-Partitioning&#34;&gt;&lt;a href=&#34;#Sharding-Data-Partitioning&#34; class=&#34;headerlink&#34; title=&#34;Sharding &amp;#x2F; Data Partitioning&#34;&gt;&lt;/a&gt;Sharding &amp;#x2F; Data Partitioning&lt;/h1&gt;&lt;h2 id=&#34;Partitioning-methods&#34;&gt;&lt;a href=&#34;#Partitioning-methods&#34; class=&#34;headerlink&#34; title=&#34;Partitioning methods&#34;&gt;&lt;/a&gt;Partitioning methods&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Horizontal partitioning&lt;ul&gt;
&lt;li&gt;Range based sharding.&lt;/li&gt;
&lt;li&gt;Put different rows into different tables.&lt;/li&gt;
&lt;li&gt;Con&lt;ul&gt;
&lt;li&gt;If the value whose range is used for sharding isn’t chosen carefully, the partitioning scheme will lead to unbalanced servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vertical partitioning&lt;ul&gt;
&lt;li&gt;Divide data for a specific feature to their own server.&lt;/li&gt;
&lt;li&gt;Pro&lt;ul&gt;
&lt;li&gt;Straightforward to implement.&lt;/li&gt;
&lt;li&gt;Low impact on the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Con&lt;ul&gt;
&lt;li&gt;To support growth of the application, a database may need further partitioning.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Directory-based partitioning&lt;ul&gt;
&lt;li&gt;A lookup service that knows the partitioning scheme and abstracts it away from the database access code.&lt;/li&gt;
&lt;li&gt;Allow addition of db servers or change of partitioning schema without impacting application.&lt;/li&gt;
&lt;li&gt;Con&lt;ul&gt;
&lt;li&gt;Can be a single point of failure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Partitioning-criteria&#34;&gt;&lt;a href=&#34;#Partitioning-criteria&#34; class=&#34;headerlink&#34; title=&#34;Partitioning criteria&#34;&gt;&lt;/a&gt;Partitioning criteria&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Key or hash-based partitioning&lt;ul&gt;
&lt;li&gt;Apply a hash function to some key attribute of the entry to get the partition number.&lt;/li&gt;
&lt;li&gt;Problem&lt;ul&gt;
&lt;li&gt;Adding new servers may require changing the hash function, which would need redistribution of data and downtime for the service.&lt;/li&gt;
&lt;li&gt;Workaround: &lt;a href=&#34;https://en.wikipedia.org/wiki/Consistent_hashing&#34;&gt;consistent hashing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List partitioning&lt;ul&gt;
&lt;li&gt;Each partition is assigned a list of values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Round-robin partitioning&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;n&lt;/code&gt; partitions, the &lt;code&gt;i&lt;/code&gt; tuple is assigned to partition &lt;code&gt;i % n&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Composite partitioning&lt;ul&gt;
&lt;li&gt;Combine any of above partitioning schemes to devise a new scheme.&lt;/li&gt;
&lt;li&gt;Consistent hashing is a composite of hash and list partitioning.&lt;ul&gt;
&lt;li&gt;Key -&amp;gt; reduced key space through hash -&amp;gt; list -&amp;gt; partition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Common-problems-of-sharding&#34;&gt;&lt;a href=&#34;#Common-problems-of-sharding&#34; class=&#34;headerlink&#34; title=&#34;Common problems of sharding&#34;&gt;&lt;/a&gt;Common problems of sharding&lt;/h2&gt;&lt;p&gt;Most of the constraints are due to the fact that operations across multiple tables or multiple rows in the same table will no longer run on the same server.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Joins and denormalization&lt;ul&gt;
&lt;li&gt;Joins will not be performance efficient since data has to be compiled from multiple servers.&lt;/li&gt;
&lt;li&gt;Workaround: denormalize the database so that queries can be performed from a single table. But this can lead to data inconsistency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Referential integrity&lt;ul&gt;
&lt;li&gt;Difficult to enforce data integrity constraints (e.g. foreign keys).&lt;/li&gt;
&lt;li&gt;Workaround&lt;ul&gt;
&lt;li&gt;Referential integrity is enforced by application code.&lt;/li&gt;
&lt;li&gt;Applications can run SQL jobs to clean up dangling references.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rebalancing&lt;ul&gt;
&lt;li&gt;Necessity of rebalancing&lt;ul&gt;
&lt;li&gt;Data distribution is not uniform.&lt;/li&gt;
&lt;li&gt;A lot of load on one shard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create more db shards or rebalance existing shards changes partitioning scheme and requires data movement.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
    </channel>
</rss>
