{
    "version": "https://jsonfeed.org/version/1",
    "title": "Samir Paul â€¢ All posts by \"python-server\" tag",
    "description": "Software Engineer",
    "home_page_url": "https://samirpaul1.github.io",
    "items": [
        {
            "id": "https://samirpaul1.github.io/posts/online-pdf-compression-tool/",
            "url": "https://samirpaul1.github.io/posts/online-pdf-compression-tool/",
            "title": "Online PDF Compression Tool",
            "date_published": "2023-08-05T20:52:53.769Z",
            "content_html": "<h3 id=\"About-The-Project\"><a href=\"#About-The-Project\" class=\"headerlink\" title=\"About The Project:\"></a>About The Project:</h3><p>An online PDF file compression tool to reduce the size of a .pdf file. Python Flask is used to upload the file to a temporary location on the server.<br>In the backend, using the <code>PDFNetPython</code> library that file gets reduced and saved to its final location. After download, the files are automatically deleted from the server after 1 hour. Technologies used in this project: <code>Python3</code>, <code>Flask</code>, <code>C</code>, <code>Shell</code>, <code>Nix</code>, <code>Replit</code>, <code>Git</code>, <code>HTML</code>, <code>CSS</code>, <code>JavaScript</code>.</p>\n<ul>\n<li><a href=\"https://filecompressor.samirpaul1.repl.co/\">Live Demo ðŸš€ </a></li>\n</ul>\n<h2 id=\"Video-Demo\"><a href=\"#Video-Demo\" class=\"headerlink\" title=\"Video Demo:\"></a>Video Demo:</h2><iframe title=\"Video Demo\" src=\"https://user-images.githubusercontent.com/77569653/172896703-9e4998c1-40da-46ae-810e-780e47a391f9.mp4\" loading=\"lazy\" width=\"100%\" height = \"380\" autoplay=\"autoplay\" loop=\"loop\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n\n\n<ul>\n<li>Landing Page:<br><img src=\"/assets/img/filecompressor-samirpaul1-repl-co-landing-page.webp\" alt=\"Landing Page\"></li>\n</ul>\n<h3 id=\"Flask-File-Uploading\"><a href=\"#Flask-File-Uploading\" class=\"headerlink\" title=\"Flask File Uploading:\"></a>Flask File Uploading:</h3><p> In HTML form, the enctype property is set to <code>&quot;multipart/form-data&quot;</code> to publish the file to the URL.The URL handler extracts the file from the <code>request.files []</code> object and saves it to the required location. The path to the upload folder is defined as <code>app.config[&#39;UPLOAD_FOLDER&#39;]</code> and maximum size (in bytes) as </p>\n<figure class=\"highlight plaintext\"><figcaption><span>size (in bytes)```.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The server-side flask script fetches the file from the request object using ```name = request.files[&#x27;file&#x27;].filename```.</span><br><span class=\"line\">On successfully uploading the file, it is saved to the desired location on the server.</span><br><span class=\"line\">Hereâ€™s the Python code for the Flask application.</span><br><span class=\"line\">```python</span><br><span class=\"line\">from flask import Flask, render_template, request</span><br><span class=\"line\">from werkzeug import secure_filename</span><br><span class=\"line\">app = Flask(__name__)</span><br><span class=\"line\"></span><br><span class=\"line\">@app.route(&#x27;/upload&#x27;)</span><br><span class=\"line\">def upload_file():</span><br><span class=\"line\">   return render_template(&#x27;upload.html&#x27;)</span><br><span class=\"line\">\t</span><br><span class=\"line\">@app.route(&#x27;/uploader&#x27;, methods = [&#x27;GET&#x27;, &#x27;POST&#x27;])</span><br><span class=\"line\">def upload_file():</span><br><span class=\"line\">   if request.method == &#x27;POST&#x27;:</span><br><span class=\"line\">      f = request.files[&#x27;file&#x27;]</span><br><span class=\"line\">      f.save(secure_filename(f.filename))</span><br><span class=\"line\">      return &#x27;file uploaded successfully&#x27;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">if __name__ == &#x27;__main__&#x27;:</span><br><span class=\"line\">   app.run(debug = True)</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"How-PDF-is-compressed-in-backend\"><a href=\"#How-PDF-is-compressed-in-backend\" class=\"headerlink\" title=\"How PDF is compressed in backend:\"></a>How PDF is compressed in backend:</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> PDFNetPython3.PDFNetPython <span class=\"keyword\">import</span> PDFDoc, Optimizer, SDFDoc, PDFNet</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">compress_file</span>(<span class=\"params\">input_file: <span class=\"built_in\">str</span>, output_file: <span class=\"built_in\">str</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> output_file:</span><br><span class=\"line\">        output_file = input_file</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        PDFNet.Initialize()</span><br><span class=\"line\">        doc = PDFDoc(input_file)</span><br><span class=\"line\">        doc.InitSecurityHandler()</span><br><span class=\"line\">        Optimizer.Optimize(doc)</span><br><span class=\"line\">        doc.Save(output_file, SDFDoc.e_linearized)</span><br><span class=\"line\">        doc.Close()</span><br><span class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">        doc.Close()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    input_file = sys.argv[<span class=\"number\">1</span>]</span><br><span class=\"line\">    output_file = sys.argv[<span class=\"number\">2</span>]</span><br><span class=\"line\">    compress_file(input_file, output_file)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"File-Download\"><a href=\"#File-Download\" class=\"headerlink\" title=\"File Download:\"></a>File Download:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">downloadFile</span>(<span class=\"params\">filename</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(response !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\tfname = response.<span class=\"property\">filename</span>;</span><br><span class=\"line\">\t  <span class=\"keyword\">var</span> url = <span class=\"string\">&quot;static/resource/&quot;</span> + fname.<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\t  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(url);</span><br><span class=\"line\">\t    <span class=\"title function_\">fetch</span>(url)</span><br><span class=\"line\">\t    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.<span class=\"title function_\">blob</span>())</span><br><span class=\"line\">\t    .<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">blob</span> =&gt;</span> &#123;</span><br><span class=\"line\">\t      <span class=\"keyword\">const</span> link = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">\t      link.<span class=\"property\">href</span> = <span class=\"variable constant_\">URL</span>.<span class=\"title function_\">createObjectURL</span>(blob);</span><br><span class=\"line\">\t      link.<span class=\"property\">download</span> = fname;</span><br><span class=\"line\">\t      link.<span class=\"title function_\">click</span>();</span><br><span class=\"line\">\t  &#125;)</span><br><span class=\"line\">\t  .<span class=\"title function_\">catch</span>(<span class=\"variable language_\">console</span>.<span class=\"property\">error</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"ðŸ¤”-How-to-contribute\"><a href=\"#ðŸ¤”-How-to-contribute\" class=\"headerlink\" title=\"ðŸ¤” How to contribute\"></a>ðŸ¤” How to contribute</h2><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Fork this repository;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Create a branch with your feature: <code>git checkout -b my-feature</code>;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Commit your changes: <code>git commit -m &quot;feat: my new feature&quot;</code>;</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> Push to your branch: <code>git push origin my-feature</code>.</li>\n</ul>\n",
            "tags": [
                "python3",
                "file-compressor",
                "flask-application",
                "python-server",
                "pdfnet",
                "pdf-compression",
                "online-pdf-compressor",
                "pdfnetpython"
            ]
        }
    ]
}