{
    "version": "https://jsonfeed.org/version/1",
    "title": "Samir Paul • All posts by \"design-interview\" tag",
    "description": "Software Engineer",
    "home_page_url": "https://samir.pages.dev",
    "items": [
        {
            "id": "https://samir.pages.dev/posts/url-shortening-service/",
            "url": "https://samir.pages.dev/posts/url-shortening-service/",
            "title": "URL Shortening Service",
            "date_published": "2023-08-05T20:52:53.888Z",
            "content_html": "<h1 id=\"URL-Shortening-Service\"><a href=\"#URL-Shortening-Service\" class=\"headerlink\" title=\"URL Shortening Service\"></a>URL Shortening Service</h1><h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog/system-design/short-url-overview.png\" alt=\"overview\"><br><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog/system-design/short-url-detail.png\" alt=\"summary\"></p>\n<h2 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h2><ul>\n<li><p>Functional Requirements</p>\n<ul>\n<li>Given a URL, generate a shorter and unique alias (short link).</li>\n<li>When users access a short link, redirect to the original link.</li>\n<li>Users should optionally be able to pick a custom short link for their URL.</li>\n<li>Links will expire after a standard default timespan. Users should also be able to specify the expiration time.</li>\n</ul>\n</li>\n<li><p>Non-Functional Requirements</p>\n<ul>\n<li>The system should be highly available. This is required because, if our service is down, all the URL redirections will start failing.</li>\n<li>URL redirection should happen in real-time with minimal latency.</li>\n<li>Shortened links should not be guessable (not predictable).</li>\n</ul>\n</li>\n<li><p>Extended Requirements</p>\n<ul>\n<li>Analytics; e.g., how many times a redirection happened?</li>\n<li>Be accessible through REST APIs by other services.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Capacity-Estimation-and-Constraints\"><a href=\"#Capacity-Estimation-and-Constraints\" class=\"headerlink\" title=\"Capacity Estimation and Constraints\"></a>Capacity Estimation and Constraints</h2><ul>\n<li><p>Assumption</p>\n<ul>\n<li>Read-heavy. More redirection requests compared to new URL shortenings.</li>\n<li>Assume <strong>100:1</strong> ratio between read and write.</li>\n</ul>\n</li>\n<li><p>Traffic estimates</p>\n<ul>\n<li><strong>500M</strong> new URL shortenings per month, 100 * 500M &#x3D;&gt; 50B redirections per month.</li>\n<li>New URL shortenings per second<ul>\n<li>500 million &#x2F; (30 days * 24 hours * 3600 seconds) &#x3D; <strong>~200 URLs&#x2F;s</strong></li>\n</ul>\n</li>\n<li>URLs redirections per second<ul>\n<li>50 billion &#x2F; (30 days * 24 hours * 3600 sec) &#x3D; <strong>~19K&#x2F;s</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Storage estimates</p>\n<ul>\n<li>Assume storing every URL shortening request for 5 years, each object takes <strong>500 bytes</strong></li>\n<li>Total objects: 500 million * 5 years * 12 months &#x3D; <strong>30 billion</strong></li>\n<li>Total storage: 30 billion * 500 bytes &#x3D; <strong>15 TB</strong></li>\n</ul>\n</li>\n<li><p>Bandwidth estimates</p>\n<ul>\n<li>Write: 200 URL&#x2F;s * 500 bytes&#x2F;URL &#x3D; <strong>100 KB&#x2F;s</strong></li>\n<li>Read: 19K URL&#x2F;s * 500 bytes&#x2F;URL &#x3D; <strong>~9 MB&#x2F;s</strong></li>\n</ul>\n</li>\n<li><p>Cache memory estimates</p>\n<ul>\n<li>Follow the 80-20 rule, assuming 20% of URLs generate 80% of traffic, cache 20% hot URLs</li>\n<li>Requests per day: 19K * 3600 seconds * 24 hours &#x3D; <strong>~1.7 billion&#x2F;day</strong></li>\n<li>Cache 20%: 0.2 * 1.7 billion * 500 bytes &#x3D; <strong>~170GB</strong></li>\n</ul>\n</li>\n<li><p>Summary</p>\n<ul>\n<li>Assuming 500 million new URLs per month and 100:1 read:write ratio</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Category</th>\n<th>Calculation</th>\n<th>Estimate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>New URLs</td>\n<td>500 million &#x2F; (30 days * 24 hours * 3600 seconds)</td>\n<td>200 &#x2F;s</td>\n</tr>\n<tr>\n<td>URL redirections</td>\n<td>500 million * 100 &#x2F; (30 days * 24 hours * 3600 seconds)</td>\n<td>19 K&#x2F;s</td>\n</tr>\n<tr>\n<td>Incoming data</td>\n<td>500 bytes&#x2F;URL * 200 URL&#x2F;s</td>\n<td>100 KB&#x2F;s</td>\n</tr>\n<tr>\n<td>Outgoing data</td>\n<td>500 bytes&#x2F;URL * 19K URL&#x2F;s</td>\n<td>9 MB&#x2F;s</td>\n</tr>\n<tr>\n<td>Storage for 5 years</td>\n<td>500 bytes&#x2F;URL * 500 million * 60 months</td>\n<td>15 TB</td>\n</tr>\n<tr>\n<td>Memory for cache</td>\n<td>19K URL * 3600 seconds * 24 hours * 500 bytes * 20%</td>\n<td>170 GB</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"System-APIs\"><a href=\"#System-APIs\" class=\"headerlink\" title=\"System APIs\"></a>System APIs</h2><h3 id=\"createUrl\"><a href=\"#createUrl\" class=\"headerlink\" title=\"createUrl\"></a><code>createUrl</code></h3><ul>\n<li>Parameters<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Note</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>api_dev_key</code></td>\n<td><code>string</code></td>\n<td>The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota.</td>\n</tr>\n<tr>\n<td><code>original_url</code></td>\n<td><code>string</code></td>\n<td>Original URL to be shortened.</td>\n</tr>\n<tr>\n<td><code>custom_alias</code></td>\n<td><code>string</code></td>\n<td>Optional custom key for the URL.</td>\n</tr>\n<tr>\n<td><code>user_name</code></td>\n<td><code>string</code></td>\n<td>Optional user name to be used in encoding.</td>\n</tr>\n<tr>\n<td><code>expire_date</code></td>\n<td><code>string</code></td>\n<td>Optional expiration date for the shortened URL.</td>\n</tr>\n</tbody></table>\n</li>\n<li>Return<ul>\n<li><code>string</code></li>\n<li>A successful insertion returns the shortened URL; otherwise, it returns an error code.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"deleteUrl\"><a href=\"#deleteUrl\" class=\"headerlink\" title=\"deleteUrl\"></a><code>deleteUrl</code></h3><ul>\n<li>Parameters<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Note</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>api_dev_key</code></td>\n<td><code>string</code></td>\n<td>The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota.</td>\n</tr>\n<tr>\n<td><code>url_key</code></td>\n<td><code>string</code></td>\n<td>Short URL.</td>\n</tr>\n</tbody></table>\n</li>\n<li>Return<ul>\n<li><code>string</code></li>\n<li>A successful deletion returns ‘URL Removed’.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Database-design\"><a href=\"#Database-design\" class=\"headerlink\" title=\"Database design\"></a>Database design</h2><ul>\n<li><p>Observations</p>\n<ul>\n<li>Need to store billions of records.</li>\n<li>Each object is small (less than 1K).</li>\n<li>No relationships between records—other than storing which user created a URL.</li>\n<li>Read-heavy.</li>\n<li>A NoSQL choice would also be easier to scale.</li>\n<li>Comment: SQL with sharding should also work</li>\n</ul>\n</li>\n<li><p>Schema</p>\n<ul>\n<li>URL<table>\n<thead>\n<tr>\n<th>Column</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>hash</code></td>\n<td>varchar(16)</td>\n</tr>\n<tr>\n<td><code>original_url</code></td>\n<td>varchar(512)</td>\n</tr>\n<tr>\n<td><code>creation_date</code></td>\n<td>datetime</td>\n</tr>\n<tr>\n<td><code>expiration_date</code></td>\n<td>datetime</td>\n</tr>\n<tr>\n<td><code>user_id</code></td>\n<td>int</td>\n</tr>\n</tbody></table>\n</li>\n<li>User<table>\n<thead>\n<tr>\n<th>Column</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>name</code></td>\n<td>varchar(20)</td>\n</tr>\n<tr>\n<td><code>email</code></td>\n<td>varchar(32)</td>\n</tr>\n<tr>\n<td><code>creation_date</code></td>\n<td>datetime</td>\n</tr>\n<tr>\n<td><code>last_login</code></td>\n<td>datetime</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Basic-System-Design-and-Algorithm\"><a href=\"#Basic-System-Design-and-Algorithm\" class=\"headerlink\" title=\"Basic System Design and Algorithm\"></a>Basic System Design and Algorithm</h2><h3 id=\"Encoding-actual-URL\"><a href=\"#Encoding-actual-URL\" class=\"headerlink\" title=\"Encoding actual URL\"></a>Encoding actual URL</h3><ul>\n<li>Compute unique hash<ul>\n<li><code>base64</code>: A-Z, a-z, 0-9, <code>-</code>, <code>.</code></li>\n<li>6 letters: 64 ^ 6 &#x3D; ~68.7 billion</li>\n<li>8 letters: 64 ^ 8 &#x3D; ~281 trillion</li>\n<li>Use 6 letters</li>\n<li><code>MD5</code> generates 128 bit hash value</li>\n<li>Each <code>base64</code> character encodes 6 bits</li>\n<li><code>base64</code> encoding generates 22 characters</li>\n<li>Select 8 characters</li>\n</ul>\n</li>\n<li>Issues with this approach<ul>\n<li>Same URL from multiple users</li>\n<li>URL-encoded</li>\n</ul>\n</li>\n<li>Workaround<ul>\n<li>Append an increasing sequence number to each input URL, and generate a hash for it</li>\n<li>Append user id to input URL</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Generating-keys-offline\"><a href=\"#Generating-keys-offline\" class=\"headerlink\" title=\"Generating keys offline\"></a>Generating keys offline</h3><ul>\n<li><p>Standalone Key Generation Service (KGS)</p>\n<ul>\n<li>Generate random 6 letter strings and store them in a database (key DB)</li>\n<li>When a short URL is needed, take one from the key DB</li>\n</ul>\n</li>\n<li><p>Key DB size</p>\n<ul>\n<li>6 characters&#x2F;key * 68.7B unique keys &#x3D; 412 GB</li>\n</ul>\n</li>\n<li><p>Concurrency issue</p>\n<ul>\n<li>If there are multiple servers reading keys concurrently, two or more servers try to read the same key from the database.</li>\n</ul>\n</li>\n<li><p>Workaround</p>\n<ul>\n<li>Servers can use KGS to read&#x2F;mark keys in the database.</li>\n<li>KGS can use two tables to store keys: one for keys that are not used yet, and one for all the used keys.</li>\n<li>KGS can always keep some keys in memory so that it can quickly provide them whenever a server needs them.</li>\n<li>KGS needs to make sure not to give the same key to multiple servers.</li>\n<li>Comment: keys are sharded. Each KGS server only serves one application server.</li>\n</ul>\n</li>\n<li><p>Key lookup</p>\n<ul>\n<li>When a key is found, issue an “HTTP 302 Redirect” status and passing the stored URL.</li>\n<li>When a key is not found, issue an “HTTP 404 Not Found”, or redirect to homepage.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h3><p>Replace KGS with UUID.</p>\n<h2 id=\"Data-Partitioning-and-Replication\"><a href=\"#Data-Partitioning-and-Replication\" class=\"headerlink\" title=\"Data Partitioning and Replication\"></a>Data Partitioning and Replication</h2><ul>\n<li><p>Range Based Partitioning</p>\n<ul>\n<li>Store URLs in separate partitions based on the first letter of the URL or the hash key.</li>\n<li>Combine certain less frequently occurring letters into one database partition.</li>\n</ul>\n</li>\n<li><p>Problem with this approach</p>\n<ul>\n<li>Unbalanced servers.</li>\n</ul>\n</li>\n<li><p>Hash-Based Partitioning</p>\n<ul>\n<li>Take a hash of the short URL we are storing, and calculate which partition to use based upon the hash.</li>\n<li>Use consistent hashing</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h2><ul>\n<li>Eviction policy<ul>\n<li>LRU: discard the least recently used URL first</li>\n</ul>\n</li>\n<li>Cache update<ul>\n<li>Cache miss: hit backend database and pass new entry to all cache replicas</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Load-Balancer-LB\"><a href=\"#Load-Balancer-LB\" class=\"headerlink\" title=\"Load Balancer (LB)\"></a>Load Balancer (LB)</h2><ul>\n<li>LB locations<ul>\n<li>Between Clients and Application servers</li>\n<li>Between Application Servers and database servers</li>\n<li>Between Application Servers and Cache servers</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DB-Sweeping\"><a href=\"#DB-Sweeping\" class=\"headerlink\" title=\"DB Sweeping\"></a>DB Sweeping</h2><p>A separate Cleanup service can run periodically to remove expired links from our storage and cache.</p>\n<h2 id=\"Telemetry\"><a href=\"#Telemetry\" class=\"headerlink\" title=\"Telemetry\"></a>Telemetry</h2><p>Statistics about the system: how many times a short URL has been used</p>\n<h2 id=\"Security-and-Permissions\"><a href=\"#Security-and-Permissions\" class=\"headerlink\" title=\"Security and Permissions\"></a>Security and Permissions</h2><ul>\n<li>Store permission level (public&#x2F;private) with each URL in the database</li>\n<li>Send an error (HTTP 401) for unauthorized access</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation",
                "short-url",
                "url-shortner"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/system-design-interview-for-it-companies/",
            "url": "https://samir.pages.dev/posts/system-design-interview-for-it-companies/",
            "title": "System design interview for IT companies",
            "date_published": "2023-08-05T20:52:53.883Z",
            "content_html": "<p><img src=\"/assets/img/system-design/systemcycle.png\" alt=\"system development life cycle\"></p>\n<blockquote>\n<p>How to prepare system design questions for an IT company</p>\n</blockquote>\n<p>Original source and Credit: <a href=\"https://github.com/checkcheckzz/system-design-interview\">https://github.com/checkcheckzz/system-design-interview</a></p>\n<hr>\n<p>System design is a very broad topic. Even a software engineer with many years of working experience at a top IT company may not be an expert on system design. If you want to become an expert, you need to read many books, articles, and solve real large scale system design problems.</p>\n<p>This repository only teaches you how to handle the system design interview with a systematic approach in a short time. You can dive into each topic if you have time. Of course, welcome to add your thoughts!</p>\n<h2 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a><a name='toc'>Table of Contents</a></h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#tips\">System Design Interview Tips</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#intro\">Basic Knowledge about System Design</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#blog\">Company Engineering Blogs</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#system\">Products and Systems</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#qs\">Hot Questions and Reference</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#bk\">Good Books</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#ood\">Object Oriented Design</a></li>\n</ul>\n<h3 id=\"⬆-System-Design-Interview-Tips\"><a href=\"#⬆-System-Design-Interview-Tips\" class=\"headerlink\" title=\"[⬆] System Design Interview Tips:\"></a><a href=\"#toc\">[⬆]</a> <a name='tips'>System Design Interview Tips:</a></h3><p><strong>Clarify the constraints and identify the user cases</strong></p>\n<p>Spend a few minutes questioning the interviewer and agreeing on the scope of the system.<br>Remember to make sure you know all the requirements the interviewer didn’t tell you about in the beginning.</p>\n<p>User cases indicate the main functions of the system, and constraints list the scale of the system such as requests<br>per second, requests types, data written per second, data read per second.</p>\n<p><strong>High-level architecture design</strong></p>\n<p>Sketch the important components and the connections between them, but don’t go into some details.<br>Usually, a scalable system includes webserver (load balancer), service (service partition), database (primary&#x2F;secondary database cluster plug cache).</p>\n<p><strong>Component design</strong></p>\n<p>For each component, you need to write the specific APIs for each component. You may need to finish<br>the detailed OOD design for a particular function. You may also need to design the database schema for the database.</p>\n<h3 id=\"⬆-Basic-Knowledge-about-System-Design\"><a href=\"#⬆-Basic-Knowledge-about-System-Design\" class=\"headerlink\" title=\"[⬆] Basic Knowledge about System Design:\"></a><a href=\"#toc\">[⬆]</a> <a name='intro'>Basic Knowledge about System Design:</a></h3><p>Here are some articles about system design related topics.  </p>\n<ul>\n<li><a href=\"https://blog.pramp.com/system-design-interview-process-e91aae2dbe83\">The Anatomy Of A System Design Interview</a></li>\n<li><a href=\"https://blog.pramp.com/how-to-succeed-in-a-system-design-interview-27b35de0df26\">How to Succeed in a System Design Interview</a></li>\n<li><a href=\"http://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/\">How to Rock a Systems Design Interview</a></li>\n<li><a href=\"http://www.hiredintech.com/app#system-design\">System Interview</a></li>\n<li><a href=\"http://www.lecloud.net/tagged/scalability\">Scalability for Dummies</a></li>\n<li><a href=\"http://www.aosabook.org/en/distsys.html\">Scalable Web Architecture and Distributed Systems</a></li>\n<li><a href=\"http://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/\">Numbers Everyone Should Know</a></li>\n<li><a href=\"https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf\">Fallacies of distributed systems</a></li>\n<li><a href=\"http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html\">Scalable System Design Patterns</a></li>\n<li><a href=\"http://lethain.com/introduction-to-architecting-systems-for-scale/\">Introduction to Architecting Systems for Scale</a></li>\n<li><a href=\"http://snarfed.org/transactions_across_datacenters_io.html\">Transactions Across Datacenters</a></li>\n<li><a href=\"http://ksat.me/a-plain-english-introduction-to-cap-theorem\">A Plain English Introduction to CAP Theorem</a></li>\n<li><a href=\"https://github.com/henryr/cap-faq\">The CAP FAQ</a></li>\n<li><a href=\"http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf\">Paxos Made Simple</a></li>\n<li><a href=\"http://www.tom-e-white.com/2007/11/consistent-hashing.html\">Consistent Hashing</a></li>\n<li><a href=\"http://horicky.blogspot.com/2009/11/nosql-patterns.html\">NOSQL Patterns</a></li>\n<li><a href=\"http://www.slideshare.net/jboner/scalability-availability-stability-patterns\">Scalability, Availability &amp; Stability Patterns</a></li>\n</ul>\n<p>Of course, if you want to dive into system related topics, here is a good collection of reading list about <a href=\"https://github.com/mmcgrana/services-engineering\">services-engineering</a>, and<br>a good collection of material about <a href=\"http://dancres.github.io/Pages/\">distributed systems</a>.</p>\n<h3 id=\"⬆-Company-Engineering-Blogs\"><a href=\"#⬆-Company-Engineering-Blogs\" class=\"headerlink\" title=\"[⬆] Company Engineering Blogs:\"></a><a href=\"#toc\">[⬆]</a> <a name='blog'>Company Engineering Blogs:</a></h3><p>If you are going to have an onsite with a company, you should read their engineering blog. </p>\n<ul>\n<li><a href=\"http://highscalability.com/\">High Scalability</a></li>\n<li><a href=\"https://github.com/blog/category/engineering\">The GitHub Blog</a></li>\n<li><a href=\"http://engineering.quora.com/\">Engineering at Quora</a></li>\n<li><a href=\"http://engineeringblog.yelp.com/\">Yelp Engineering Blog</a></li>\n<li><a href=\"https://engineering.twitter.com/\">Twitter Engineering</a></li>\n<li><a href=\"https://www.facebook.com/Engineering\">Facebook Engineering</a></li>\n<li><a href=\"http://eng.yammer.com/blog/\">Yammer Engineering</a></li>\n<li><a href=\"http://codeascraft.com/\">Etsy Code as Craft</a></li>\n<li><a href=\"http://engineering.foursquare.com/\">Foursquare Engineering Blog</a></li>\n<li><a href=\"https://medium.com/airbnb-engineering\">Airbnb Engineering</a></li>\n<li><a href=\"http://engineering.webengage.com/\">WebEngage Engineering Blog</a></li>\n<li><a href=\"http://engineering.linkedin.com/blog\">LinkedIn Engineering</a></li>\n<li><a href=\"http://techblog.netflix.com/\">The Netflix Tech Blog</a></li>\n<li><a href=\"https://www.simple.com/engineering/\">BankSimple Simple Blog</a></li>\n<li><a href=\"http://corner.squareup.com/\">Square The Corner</a></li>\n<li><a href=\"https://developers.soundcloud.com/blog/\">SoundCloud Backstage Blog</a></li>\n<li><a href=\"http://code.flickr.net/\">Flickr Code</a></li>\n<li><a href=\"http://instagram-engineering.tumblr.com/\">Instagram Engineering</a></li>\n<li><a href=\"https://tech.dropbox.com/\">Dropbox Tech Blog</a></li>\n<li><a href=\"http://blog.cloudera.com/\">Cloudera Developer Blog</a></li>\n<li><a href=\"http://bandcamptech.wordpress.com/\">Bandcamp Tech</a></li>\n<li><a href=\"http://tech.oyster.com/\">Oyster Tech Blog</a></li>\n<li><a href=\"http://www.redditblog.com/\">THE REDDIT BLOG</a></li>\n<li><a href=\"https://engineering.groupon.com/\">Groupon Engineering Blog</a></li>\n<li><a href=\"http://devblog.songkick.com/\">Songkick Technology Blog</a></li>\n<li><a href=\"https://ai.googleblog.com/\">Google AI Blog</a></li>\n<li><a href=\"https://developers.googleblog.com/\">Google Developers Blog</a></li>\n<li><a href=\"http://engineering.pinterest.com/\">Pinterest Engineering Blog</a></li>\n<li><a href=\"http://www.twilio.com/engineering\">Twilio Engineering Blog</a></li>\n<li><a href=\"http://word.bitly.com/\">Bitly Engineering Blog</a></li>\n<li><a href=\"https://eng.uber.com/\">Uber Engineering Blog </a></li>\n<li><a href=\"http://engineering.godaddy.com/\">Godaddy Engineering</a></li>\n<li><a href=\"http://blogs.splunk.com/\">Splunk Blog</a></li>\n<li><a href=\"https://building.coursera.org/\">Coursera Engineering Blog</a></li>\n<li><a href=\"https://www.paypal-engineering.com/\">PayPal Engineering Blog</a></li>\n<li><a href=\"https://engblog.nextdoor.com/\">Nextdoor Engineering Blog</a></li>\n<li><a href=\"https://blog.booking.com/\">Booking.com Development Blog</a></li>\n<li><a href=\"https://engineering.microsoft.com/\">Microsoft Engineering Blog</a></li>\n<li><a href=\"https://blog.scalyr.com/\">Scalyr Engineering Blog</a></li>\n<li><a href=\"https://medium.com/myntra-engineering\">Myntra Engineering Blog</a></li>\n<li><a href=\"https://www.fastly.com/blog/\">Fastly Blog</a></li>\n<li><a href=\"https://aws.amazon.com/blogs/architecture/\">AWS Architecture Blog</a></li>\n<li><a href=\"https://eng.lyft.com/\">Lyft Engineering Blog</a></li>\n<li><a href=\"https://medium.com/wish-engineering\">Wish Engineering</a></li>\n<li><a href=\"https://doordash.engineering/\">Doordash Engineering</a></li>\n<li><a href=\"https://community.snowflake.com/s/blog\">SnowFlake Blog</a> </li>\n<li><a href=\"https://medium.com/palantir/tech/home\">Palantir Blog</a></li>\n</ul>\n<h3 id=\"⬆-Products-and-Systems\"><a href=\"#⬆-Products-and-Systems\" class=\"headerlink\" title=\"[⬆] Products and Systems:\"></a><a href=\"#toc\">[⬆]</a> <a name='system'>Products and Systems:</a></h3><p>The following papers&#x2F;articles&#x2F;slides can help you to understand the general design idea of different real products and systems. </p>\n<ul>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf\">MapReduce: Simplified Data Processing on Large Clusters</a></li>\n<li><a href=\"http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf\">Bigtable: A Distributed Storage System for Structured Data</a></li>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf\">The Google File System</a></li>\n<li><a href=\"http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf\">The Chubby lock service for loosely-coupled distributed systems</a></li>\n<li><a href=\"http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf\">Dynamo: Amazon’s Highly Available Key-value Store</a></li>\n<li><a href=\"http://www.slideshare.net/oemebamo/introduction-to-memcached\">Introduction to Memcached</a></li>\n<li><a href=\"http://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666\">Cassandra Introduction Features</a></li>\n<li><a href=\"http://www.slideshare.net/alexbaranau/intro-to-hbase\">Introduction to HBase</a></li>\n<li><a href=\"http://www.slideshare.net/mdirolf/introduction-to-mongodb\">Introduction to MongoDB</a></li>\n<li><a href=\"http://www.slideshare.net/dvirsky/introduction-to-redis\">Introduction to Redis</a></li>\n<li><a href=\"http://www.slideshare.net/previa/storm-16094009\">Storm</a></li>\n<li><a href=\"http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper\">Introduction to Zookeeper</a></li>\n<li><a href=\"http://www.slideshare.net/mumrah/kafka-talk-tri-hug\">Kafka</a></li>\n<li><a href=\"http://highscalability.com/youtube-architecture\">YouTube Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html\">Scaling Pinterest</a></li>\n<li><a href=\"http://highscalability.com/google-architecture\">Google Architecture</a></li>\n<li><a href=\"http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster\">Scaling Twitter</a></li>\n<li><a href=\"http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html\">The WhatsApp Architecture</a></li>\n<li><a href=\"http://highscalability.com/flickr-architecture\">Flickr Architecture</a></li>\n<li><a href=\"http://highscalability.com/amazon-architecture\">Amazon Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html\">Stack Overflow Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html\">Pinterest Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html\">Tumblr Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html\">Instagram Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html\">TripAdvisor Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html\">Scaling Mailbox</a></li>\n<li><a href=\"http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html\">Salesforce Architecture </a></li>\n<li><a href=\"http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html\">ESPN Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html\">Uber Architecture</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=PE4gwstWhmc\">DropBox Design</a></li>\n<li><a href=\"http://www.splunk.com/view/SP-CAAABF9\">Splunk Architecture</a></li>\n</ul>\n<h3 id=\"⬆-Hot-Questions-and-Reference\"><a href=\"#⬆-Hot-Questions-and-Reference\" class=\"headerlink\" title=\"[⬆] Hot Questions and Reference:\"></a><a href=\"#toc\">[⬆]</a> <a name='qs'>Hot Questions and Reference:</a></h3><p>There are some good references for each question. The references here are slides and articles. </p>\n<p><strong>Design a CDN network</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"https://kilthub.cmu.edu/articles/journal_contribution/Globally_distributed_content_delivery/6605972\">Globally Distributed Content Delivery</a></li>\n</ul>\n<p><strong>Design a Google document system</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"https://code.google.com/p/google-mobwrite/\">google-mobwrite</a></li>\n<li><a href=\"https://neil.fraser.name/writing/sync/\">Differential Synchronization</a></li>\n</ul>\n<p><strong>Design a random ID generation system</strong><br>Reference: </p>\n<ul>\n<li><a href=\"https://blog.twitter.com/2010/announcing-snowflake\">Announcing Snowflake</a> </li>\n<li><a href=\"https://github.com/twitter/snowflake/\">snowflake</a></li>\n</ul>\n<p><strong>Design a key-value database</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://www.slideshare.net/dvirsky/introduction-to-redis\">Introduction to Redis</a></li>\n</ul>\n<p><strong>Design the Facebook news feed function</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed\">What are best practices for building something like a News Feed?</a> </li>\n<li><a href=\"http://www.quora.com/Activity-Streams/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed\">What are the scaling issues to keep in mind while developing a social network feed?</a> </li>\n<li><a href=\"http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture\">Activity Feeds Architecture</a></li>\n</ul>\n<p><strong>Design the Facebook timeline function</strong><br>Reference: </p>\n<ul>\n<li><a href=\"https://www.facebook.com/note.php?note_id=10150468255628920\">Building Timeline</a> </li>\n<li><a href=\"http://highscalability.com/blog/2012/1/23/facebook-timeline-brought-to-you-by-the-power-of-denormaliza.html\">Facebook Timeline</a></li>\n</ul>\n<p><strong>Design a function to return the top k requests during past time interval</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"http://www.cse.ust.hk/~raywong/comp5331/References/EfficientComputationOfFrequentAndTop-kElementsInDataStreams.pdf\">Efficient Computation of Frequent and Top-k Elements in Data Streams</a></li>\n<li><a href=\"http://davis.wpi.edu/xmdv/docs/EDBT11-diyang.pdf\">An Optimal Strategy for Monitoring Top-k Queries in Streaming Windows</a></li>\n</ul>\n<p><strong>Design an online multiplayer card game</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"http://www.indieflashblog.com/how-to-create-an-asynchronous-multiplayer-game.html\">How to Create an Asynchronous Multiplayer Game</a>   </li>\n<li><a href=\"http://www.indieflashblog.com/how-to-create-async-part2.html\">How to Create an Asynchronous Multiplayer Game Part 2: Saving the Game State to Online Database</a>  </li>\n<li><a href=\"http://www.indieflashblog.com/how-to-create-async-part3.html\">How to Create an Asynchronous Multiplayer Game Part 3: Loading Games from the Database</a>  </li>\n<li><a href=\"http://www.indieflashblog.com/how-to-create-async-part4-html.html#comment-4447\">How to Create an Asynchronous Multiplayer Game Part 4: Matchmaking</a>  </li>\n<li><a href=\"http://buildnewgames.com/real-time-multiplayer/\">Real Time Multiplayer in HTML5</a></li>\n</ul>\n<p><strong>Design a graph search function</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"https://www.facebook.com/notes/facebook-engineering/under-the-hood-building-out-the-infrastructure-for-graph-search/10151347573598920\">Building out the infrastructure for Graph Search</a></li>\n<li><a href=\"https://www.facebook.com/notes/facebook-engineering/under-the-hood-indexing-and-ranking-in-graph-search/10151361720763920\">Indexing and ranking in Graph Search</a> </li>\n<li><a href=\"https://www.facebook.com/notes/facebook-engineering/under-the-hood-the-natural-language-interface-of-graph-search/10151432733048920\">The natural language interface of Graph Search</a> and <a href=\"http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf\">Erlang at Facebook</a></li>\n</ul>\n<p><strong>Design a picture sharing system</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://highscalability.com/flickr-architecture\">Flickr Architecture</a> </li>\n<li><a href=\"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html\">Instagram Architecture</a></li>\n</ul>\n<p><strong>Design a search engine</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"http://programmers.stackexchange.com/questions/38324/interview-question-how-would-you-implement-google-search\">How would you implement Google Search?</a>  </li>\n<li><a href=\"http://www.ardendertat.com/2012/01/11/implementing-search-engines/\">Implementing Search Engines</a></li>\n</ul>\n<p><strong>Design a recommendation system</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"http://tech.hulu.com/blog/2011/09/19/recommendation-system.html\">Hulu’s Recommendation System</a>  </li>\n<li><a href=\"http://ijcai13.org/files/tutorial_slides/td3.pdf\">Recommender Systems</a></li>\n</ul>\n<p><strong>Design a tinyurl system</strong><br>Reference: </p>\n<ul>\n<li><a href=\"http://n00tc0d3r.blogspot.com/\">System Design for Big Data-tinyurl</a> </li>\n<li><a href=\"https://developers.google.com/url-shortener/?csw=1\">URL Shortener API</a></li>\n</ul>\n<p><strong>Design a garbage collection system</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/\">Baby’s First Garbage Collector</a></li>\n</ul>\n<p><strong>Design a scalable web crawling system</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch\">How can I build a web crawler from scratch?</a></li>\n</ul>\n<p><strong>Design the Facebook chat function</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf\">Erlang at Facebook</a>  </li>\n<li><a href=\"https://www.facebook.com/note.php?note_id=14218138919&id=9445547199&index=0\">Facebook Chat</a></li>\n</ul>\n<p><strong>Design a trending topic system</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"http://www.michael-noll.com/blog/2013/01/18/implementing-real-time-trending-topics-in-storm/\">Implementing Real-Time Trending Topics With a Distributed Rolling Count Algorithm in Storm</a>   </li>\n<li><a href=\"http://snikolov.wordpress.com/2012/11/14/early-detection-of-twitter-trends/\">Early detection of Twitter trends explained</a></li>\n</ul>\n<p><strong>Design a cache system</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://www.slideshare.net/oemebamo/introduction-to-memcached\">Introduction to Memcached</a></li>\n</ul>\n<h3 id=\"⬆-Good-Books\"><a href=\"#⬆-Good-Books\" class=\"headerlink\" title=\"[⬆] Good Books:\"></a><a href=\"#toc\">[⬆]</a> <a name='bk'>Good Books:</a></h3><ul>\n<li><a href=\"http://www.amazon.com/Big-Data-Principles-practices-scalable/dp/1617290343\">Big Data: Principles and best practices of scalable realtime data systems</a></li>\n<li><a href=\"http://www.amazon.com/Real-Time-Analytics-Techniques-Visualize-Streaming/dp/1118837916\">Real-Time Analytics: Techniques to Analyze and Visualize Streaming Data</a></li>\n<li><a href=\"http://www.amazon.com/Building-Microservices-Sam-Newman/dp/1491950358\">Building Microservices: Designing Fine-Grained Systems</a></li>\n<li><a href=\"https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321\">Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</a></li>\n</ul>\n<h3 id=\"⬆-Object-Oriented-Design\"><a href=\"#⬆-Object-Oriented-Design\" class=\"headerlink\" title=\"[⬆] Object Oriented Design:\"></a><a href=\"#toc\">[⬆]</a> <a name='ood'>Object Oriented Design:</a></h3><h4 id=\"Tips-for-OOD-Interview\"><a href=\"#Tips-for-OOD-Interview\" class=\"headerlink\" title=\"Tips for OOD Interview\"></a>Tips for OOD Interview</h4><p><strong>Clarify the scenario, write out user cases</strong></p>\n<p>Use case is a description of sequences of events that, taken together, lead to a system doing something useful. Who is going to use it and how they are going to use it. The system may be very simple or very complicated.</p>\n<p>Special system requirements such as multi-threading, read or write oriented.</p>\n<p><strong>Define objects</strong></p>\n<p>Map identity to class: one scenario for one class, each core object in this scenario for one class.</p>\n<p>Consider the relationships among classes: certain class must have unique instance, one object has many other objects (composition), one object is another object (inheritance).</p>\n<p>Identify attributes for each class: change noun to variable and action to methods.</p>\n<p>Use design patterns such that it can be reused in multiple applications.</p>\n<h4 id=\"Useful-Websites\"><a href=\"#Useful-Websites\" class=\"headerlink\" title=\"Useful Websites\"></a>Useful Websites</h4><ul>\n<li><a href=\"http://sourcemaking.com/design-patterns-and-tips\">101 Design Patterns &amp; Tips for Developers</a></li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/sql-vs-nosql/",
            "url": "https://samir.pages.dev/posts/sql-vs-nosql/",
            "title": "SQL vs. NoSQL",
            "date_published": "2023-08-05T20:52:53.878Z",
            "content_html": "<h1 id=\"SQL-vs-NoSQL\"><a href=\"#SQL-vs-NoSQL\" class=\"headerlink\" title=\"SQL vs. NoSQL\"></a>SQL vs. NoSQL</h1><h2 id=\"Common-types-of-NoSQL\"><a href=\"#Common-types-of-NoSQL\" class=\"headerlink\" title=\"Common types of NoSQL\"></a>Common types of NoSQL</h2><h3 id=\"Key-value-stores\"><a href=\"#Key-value-stores\" class=\"headerlink\" title=\"Key-value stores\"></a>Key-value stores</h3><ul>\n<li>Array of key-value pairs. The “key” is an attribute name.</li>\n<li>Redis, Vodemort, Dynamo.</li>\n</ul>\n<h3 id=\"Document-databases\"><a href=\"#Document-databases\" class=\"headerlink\" title=\"Document databases\"></a>Document databases</h3><ul>\n<li>Data is stored in documents.</li>\n<li>Documents are grouped in collections.</li>\n<li>Each document can have an entirely different structure.</li>\n<li>CouchDB, MongoDB.</li>\n</ul>\n<h3 id=\"Wide-column-columnar-databases\"><a href=\"#Wide-column-columnar-databases\" class=\"headerlink\" title=\"Wide-column &#x2F; columnar databases\"></a>Wide-column &#x2F; columnar databases</h3><ul>\n<li>Column families - containers for rows.</li>\n<li>No need to know all the columns up front.</li>\n<li>Each row can have different number of columns.</li>\n<li>Cassandra, HBase.</li>\n</ul>\n<h3 id=\"Graph-database\"><a href=\"#Graph-database\" class=\"headerlink\" title=\"Graph database\"></a>Graph database</h3><ul>\n<li>Data is stored in graph structures<ul>\n<li>Nodes: entities</li>\n<li>Properties: information about the entities</li>\n<li>Lines: connections between the entities</li>\n</ul>\n</li>\n<li>Neo4J, InfiniteGraph</li>\n</ul>\n<h2 id=\"Differences-between-SQL-and-NoSQL\"><a href=\"#Differences-between-SQL-and-NoSQL\" class=\"headerlink\" title=\"Differences between SQL and NoSQL\"></a>Differences between SQL and NoSQL</h2><h3 id=\"Storage\"><a href=\"#Storage\" class=\"headerlink\" title=\"Storage\"></a>Storage</h3><ul>\n<li>SQL: store data in tables.</li>\n<li>NoSQL: have different data storage models.</li>\n</ul>\n<h3 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h3><ul>\n<li>SQL<ul>\n<li>Each record conforms to a fixed schema.</li>\n<li>Schema can be altered, but it requires modifying the whole database.</li>\n</ul>\n</li>\n<li>NoSQL:<ul>\n<li>Schemas are dynamic.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Querying\"><a href=\"#Querying\" class=\"headerlink\" title=\"Querying\"></a>Querying</h3><ul>\n<li>SQL<ul>\n<li>Use SQL (structured query language) for defining and manipulating the data.</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>Queries are focused on a collection of documents.</li>\n<li>UnQL (unstructured query language).</li>\n<li>Different databases have different syntax.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Scalability\"><a href=\"#Scalability\" class=\"headerlink\" title=\"Scalability\"></a>Scalability</h3><ul>\n<li>SQL<ul>\n<li>Vertically scalable (by increasing the horsepower: memory, CPU, etc) and expensive.</li>\n<li>Horizontally scalable (across multiple servers); but it can be challenging and time-consuming.</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>Horizontablly scalable (by adding more servers) and cheap.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID\"></a>ACID</h3><ul>\n<li>Atomicity, consistency, isolation, durability</li>\n<li>SQL<ul>\n<li>ACID compliant</li>\n<li>Data reliability</li>\n<li>Gurantee of transactions</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>Most sacrifice ACID compliance for performance and scalability.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Which-one-to-use\"><a href=\"#Which-one-to-use\" class=\"headerlink\" title=\"Which one to use?\"></a>Which one to use?</h2><h3 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h3><ul>\n<li>Ensure ACID compliance.<ul>\n<li>Reduce anomalies.</li>\n<li>Protect database integrity.</li>\n</ul>\n</li>\n<li>Data is structured and unchanging.</li>\n</ul>\n<h3 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h3><ul>\n<li>Data has little or no structure.</li>\n<li>Make the most of cloud computing and storage.<ul>\n<li>Cloud-based storage requires data to be easily spread across multiple servers to scale up.</li>\n</ul>\n</li>\n<li>Rapid development.<ul>\n<li>Frequent updates to the data structure.</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "sql",
                "nosql"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/steps-how-to-approach-the-system-design-questions-in-interviews/",
            "url": "https://samir.pages.dev/posts/steps-how-to-approach-the-system-design-questions-in-interviews/",
            "title": "Steps how to approach the system design questions in interviews",
            "date_published": "2023-08-05T20:52:53.878Z",
            "content_html": "<p>These are the steps to go through mentally in the interviews, followed by actual interview experiences:</p>\n<ul>\n<li>a) <strong>Be absolutely sure you understand the problem being asked</strong>, clarify on the onset rather than assuming anything </li>\n<li>b) <strong>Use-cases</strong>. This is critical, you MUST know what is the system going to be used for, what is the scale it is going to be used for. Also, constraints like requests per second, requests types, data written per second, data read per second.</li>\n<li>c) Solve the problem for a <strong>very small set</strong>, say, 100 users. This will broadly help you figure out the data structures, components, abstract design of the overall model.</li>\n<li>d) Write down the various components figured out so far and how will they interact with each other.</li>\n<li>e)  As a rule of thumb remember at least these :</li>\n<li><ol>\n<li>processing and servers</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>storage</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>caching</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>concurrency and communication</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>security</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>load balancing and proxy</li>\n</ol>\n</li>\n<li><ol start=\"7\">\n<li>CDN</li>\n</ol>\n</li>\n<li><ol start=\"8\">\n<li>Monetization: if relevant, how will you monetize?<br> eg. What kind of DB (Is Postgres enough, if not why?), do you need caching and how much, is security a prime concern?</li>\n</ol>\n</li>\n<li>f) <strong>Special cases</strong> for the question asked. Say designing a system for storing thumbnails, will a file system be enough? What if you have to scale for facebook or google? Will a nosql based database work?</li>\n<li>g) After I have my components in place, what I generally try to do is look for minor optimization in various places according to the use-cases, various tradeoffs that will help in better scaling in 99% cases.</li>\n<li>h) [Scaling out or up]  (<a href=\"http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html\">http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html</a>)</li>\n<li>i) Check with the interviewer is there any other special case he is looking to solve? Also, it really helps if you know about the company you are interviewing with, what its architecture is, what will the interviewer have more interest in based on the company and what he works on?</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/sharding-or-data-partitioning/",
            "url": "https://samir.pages.dev/posts/sharding-or-data-partitioning/",
            "title": "Sharding or Data Partitioning",
            "date_published": "2023-08-05T20:52:53.876Z",
            "content_html": "<h1 id=\"Sharding-Data-Partitioning\"><a href=\"#Sharding-Data-Partitioning\" class=\"headerlink\" title=\"Sharding &#x2F; Data Partitioning\"></a>Sharding &#x2F; Data Partitioning</h1><h2 id=\"Partitioning-methods\"><a href=\"#Partitioning-methods\" class=\"headerlink\" title=\"Partitioning methods\"></a>Partitioning methods</h2><ul>\n<li>Horizontal partitioning<ul>\n<li>Range based sharding.</li>\n<li>Put different rows into different tables.</li>\n<li>Con<ul>\n<li>If the value whose range is used for sharding isn’t chosen carefully, the partitioning scheme will lead to unbalanced servers.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Vertical partitioning<ul>\n<li>Divide data for a specific feature to their own server.</li>\n<li>Pro<ul>\n<li>Straightforward to implement.</li>\n<li>Low impact on the application.</li>\n</ul>\n</li>\n<li>Con<ul>\n<li>To support growth of the application, a database may need further partitioning.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Directory-based partitioning<ul>\n<li>A lookup service that knows the partitioning scheme and abstracts it away from the database access code.</li>\n<li>Allow addition of db servers or change of partitioning schema without impacting application.</li>\n<li>Con<ul>\n<li>Can be a single point of failure.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Partitioning-criteria\"><a href=\"#Partitioning-criteria\" class=\"headerlink\" title=\"Partitioning criteria\"></a>Partitioning criteria</h2><ul>\n<li>Key or hash-based partitioning<ul>\n<li>Apply a hash function to some key attribute of the entry to get the partition number.</li>\n<li>Problem<ul>\n<li>Adding new servers may require changing the hash function, which would need redistribution of data and downtime for the service.</li>\n<li>Workaround: <a href=\"https://en.wikipedia.org/wiki/Consistent_hashing\">consistent hashing</a>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>List partitioning<ul>\n<li>Each partition is assigned a list of values.</li>\n</ul>\n</li>\n<li>Round-robin partitioning<ul>\n<li>With <code>n</code> partitions, the <code>i</code> tuple is assigned to partition <code>i % n</code>.</li>\n</ul>\n</li>\n<li>Composite partitioning<ul>\n<li>Combine any of above partitioning schemes to devise a new scheme.</li>\n<li>Consistent hashing is a composite of hash and list partitioning.<ul>\n<li>Key -&gt; reduced key space through hash -&gt; list -&gt; partition.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Common-problems-of-sharding\"><a href=\"#Common-problems-of-sharding\" class=\"headerlink\" title=\"Common problems of sharding\"></a>Common problems of sharding</h2><p>Most of the constraints are due to the fact that operations across multiple tables or multiple rows in the same table will no longer run on the same server.</p>\n<ul>\n<li>Joins and denormalization<ul>\n<li>Joins will not be performance efficient since data has to be compiled from multiple servers.</li>\n<li>Workaround: denormalize the database so that queries can be performed from a single table. But this can lead to data inconsistency.</li>\n</ul>\n</li>\n<li>Referential integrity<ul>\n<li>Difficult to enforce data integrity constraints (e.g. foreign keys).</li>\n<li>Workaround<ul>\n<li>Referential integrity is enforced by application code.</li>\n<li>Applications can run SQL jobs to clean up dangling references.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Rebalancing<ul>\n<li>Necessity of rebalancing<ul>\n<li>Data distribution is not uniform.</li>\n<li>A lot of load on one shard.</li>\n</ul>\n</li>\n<li>Create more db shards or rebalance existing shards changes partitioning scheme and requires data movement.</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "sql",
                "nosql",
                "sharding",
                "data-partitioning"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/key-characteristics-of-distributed-systems/",
            "url": "https://samir.pages.dev/posts/key-characteristics-of-distributed-systems/",
            "title": "Key Characteristics of Distributed Systems",
            "date_published": "2023-08-05T20:52:53.869Z",
            "content_html": "<h1 id=\"Key-Characteristics-of-Distributed-Systems\"><a href=\"#Key-Characteristics-of-Distributed-Systems\" class=\"headerlink\" title=\"Key Characteristics of Distributed Systems\"></a>Key Characteristics of Distributed Systems</h1><h2 id=\"Scalability\"><a href=\"#Scalability\" class=\"headerlink\" title=\"Scalability\"></a>Scalability</h2><ul>\n<li>The capability of a system to grow and manage increased demand.</li>\n<li>A system that can continuously evolve to support growing amount of work is scalable.</li>\n<li>Horizontal scaling: by adding more servers into the pool of resources.</li>\n<li>Vertical scaling: by adding more resource (CPU, RAM, storage, etc) to an existing server. This approach comes with downtime and an upper limit.</li>\n</ul>\n<h2 id=\"Reliability\"><a href=\"#Reliability\" class=\"headerlink\" title=\"Reliability\"></a>Reliability</h2><ul>\n<li>Reliability is the probability that a system will fail in a given period.</li>\n<li>A distributed system is reliable if it keeps delivering its service even when one or multiple components fail.</li>\n<li>Reliability is achieved through redundancy of components and data (remove every single point of failure).</li>\n</ul>\n<h2 id=\"Availability\"><a href=\"#Availability\" class=\"headerlink\" title=\"Availability\"></a>Availability</h2><ul>\n<li>Availability is the time a system remains operational to perform its required function in a specific period.</li>\n<li>Measured by the percentage of time that a system remains operational under normal conditions.</li>\n<li>A reliable system is available.</li>\n<li>An available system is not necessarily reliable.<ul>\n<li>A system with a security hole is available when there is no security attack.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Efficiency\"><a href=\"#Efficiency\" class=\"headerlink\" title=\"Efficiency\"></a>Efficiency</h2><ul>\n<li>Latency: response time, the delay to obtain the first piece of data.</li>\n<li>Bandwidth: throughput, amount of data delivered in a given time.</li>\n</ul>\n<h2 id=\"Serviceability-Manageability\"><a href=\"#Serviceability-Manageability\" class=\"headerlink\" title=\"Serviceability &#x2F; Manageability\"></a>Serviceability &#x2F; Manageability</h2><ul>\n<li>Easiness to operate and maintain the system.</li>\n<li>Simplicity and spend with which a system can be repaired or maintained.</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "distributed-systems"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/high-level-design/",
            "url": "https://samir.pages.dev/posts/high-level-design/",
            "title": "High-level design",
            "date_published": "2023-08-05T20:52:53.867Z",
            "content_html": "<h1 id=\"High-level-design-HLD\"><a href=\"#High-level-design-HLD\" class=\"headerlink\" title=\"High-level design (HLD)\"></a>High-level design (HLD)</h1><hr>\n<h1 id=\"Ticketmaster\"><a href=\"#Ticketmaster\" class=\"headerlink\" title=\"Ticketmaster\"></a>Ticketmaster</h1><p><img src=\"/assets/img/system-design/ticketmaster-overview.png\" alt=\"ticketmaster-overview\"></p>\n<hr>\n<h1 id=\"Pastebin\"><a href=\"#Pastebin\" class=\"headerlink\" title=\"Pastebin\"></a>Pastebin</h1><p><img src=\"/assets/img/system-design/pastebin-overview.png\" alt=\"pastebin-overview\"><br><img src=\"/assets/img/system-design/pastebin-detail.png\" alt=\"pastebin-detail\"></p>\n<hr>\n<h1 id=\"Instagram\"><a href=\"#Instagram\" class=\"headerlink\" title=\"Instagram\"></a>Instagram</h1><p><img src=\"/assets/img/system-design/instagram-overview.png\" alt=\"instagram-overview\"><br><img src=\"/assets/img/system-design/instagram-detail.png\" alt=\"instagram-detail\"></p>\n<hr>\n<h1 id=\"Dropbox\"><a href=\"#Dropbox\" class=\"headerlink\" title=\"Dropbox\"></a>Dropbox</h1><p><img src=\"/assets/img/system-design/dropbox-overview.png\" alt=\"dropbox-overview\"><br><img src=\"/assets/img/system-design/dropbox-detail.png\" alt=\"dropbox-detail\"></p>\n<hr>\n<h1 id=\"Twitter\"><a href=\"#Twitter\" class=\"headerlink\" title=\"Twitter\"></a>Twitter</h1><p><img src=\"/assets/img/system-design/twitter-overview.png\" alt=\"twitter-overview\"><br><img src=\"/assets/img/system-design/twitter-detail.png\" alt=\"twitter-detail\"></p>\n<hr>\n<h1 id=\"Twitter-Search\"><a href=\"#Twitter-Search\" class=\"headerlink\" title=\"Twitter Search\"></a>Twitter Search</h1><p><img src=\"/assets/img/system-design/twitter-search-overview.png\" alt=\"twitter-search-overview\"><br><img src=\"/assets/img/system-design/twitter-search-detail.png\" alt=\"twitter-search-detail\"></p>\n<hr>\n<h1 id=\"Youtube\"><a href=\"#Youtube\" class=\"headerlink\" title=\"Youtube\"></a>Youtube</h1><p><img src=\"/assets/img/system-design/youtube-overview.png\" alt=\"youtube-overview\"><br><img src=\"/assets/img/system-design/youtube-detail.png\" alt=\"youtube-detail\"></p>\n<hr>\n<h1 id=\"Web-Crawler\"><a href=\"#Web-Crawler\" class=\"headerlink\" title=\"Web Crawler\"></a>Web Crawler</h1><p><img src=\"/assets/img/system-design/web-crawler-overview.png\" alt=\"web-crawler-overview\"><br><img src=\"/assets/img/system-design/web-crawler-detail.png\" alt=\"web-crawler-detail\"></p>\n<hr>\n<h1 id=\"Facebook-Newsfeed\"><a href=\"#Facebook-Newsfeed\" class=\"headerlink\" title=\"Facebook Newsfeed\"></a>Facebook Newsfeed</h1><p><img src=\"/assets/img/system-design/facebook-newsfeed-overview.png\" alt=\"facebook-newsfeed-overview\"></p>\n<hr>\n<h1 id=\"Yelp\"><a href=\"#Yelp\" class=\"headerlink\" title=\"Yelp\"></a>Yelp</h1><p><img src=\"/assets/img/system-design/yelp-overview.png\" alt=\"yelp-overview\"></p>\n<hr>\n<h1 id=\"Uber-Backend\"><a href=\"#Uber-Backend\" class=\"headerlink\" title=\"Uber Backend\"></a>Uber Backend</h1><p><img src=\"/assets/img/system-design/uber-backend-overview.png\" alt=\"uber-backend-overview\"></p>\n<hr>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/consistent-hashing/",
            "url": "https://samir.pages.dev/posts/consistent-hashing/",
            "title": "Consistent Hashing",
            "date_published": "2023-08-05T20:52:53.865Z",
            "content_html": "<h1 id=\"Consistent-Hashing\"><a href=\"#Consistent-Hashing\" class=\"headerlink\" title=\"Consistent Hashing\"></a>Consistent Hashing</h1><h2 id=\"Simple-hashing\"><a href=\"#Simple-hashing\" class=\"headerlink\" title=\"Simple hashing\"></a>Simple hashing</h2><p>Problems of simple hashing function <code>key % n</code> (<code>n</code> is the number of servers):</p>\n<ul>\n<li>It is not horizontally scalable. Whenever a new cache host is added to the system, all existing mappings are broken.</li>\n<li>It may not be load balanced, especially for non-uniformly distributed data. Some servers will become hot spots.</li>\n</ul>\n<h2 id=\"Consistent-Hashing-1\"><a href=\"#Consistent-Hashing-1\" class=\"headerlink\" title=\"Consistent Hashing\"></a>Consistent Hashing</h2><ul>\n<li>Consistent hashing maps a key to an integer.</li>\n<li>Imagine that the integers in the range are placed on a ring such that the values are wrapped around.</li>\n<li>Given a list of servers, hash them to integers in the range.</li>\n<li>To map a key to a server:<ul>\n<li>Hash it to a single integer.</li>\n<li>Move clockwise on the ring until finding the first cache it encounters.</li>\n</ul>\n</li>\n<li>When the hash table is resized (a server is added or deleted), only <code>k/n</code> keys need to be remapped (<code>k</code> is the total number of keys, and <code>n</code> is the total number of servers).</li>\n<li>To handle hot spots, add “virtual replicas” for caches.<ul>\n<li>Instead of mapping each cache to a single point on the ring, map it to multiple points on the ring (replicas). This way, each cache is associated with multiple portions of the ring.</li>\n<li>If the hash function is “mixes well,” as the number of replicas increases, the keys will be more balanced.</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/company-engineering-blog-links/",
            "url": "https://samir.pages.dev/posts/company-engineering-blog-links/",
            "title": "Company engineering blog links",
            "date_published": "2023-08-05T20:52:53.862Z",
            "content_html": "<p>courtesy <a href=\"https://github.com/checkcheckzz/system-design-interview#toc\">checkcheckzz</a></p>\n<p>Depending on where you are interviewing, go through the company blog. VERY USEFUL IN INTERVIEWS! It really helps if you have an idea of the architecture, as the questions asked will generally be of that domain and your prior knowledge will help out here.</p>\n<ul>\n<li><a href=\"http://nerds.airbnb.com/\">Airbnb Engineering</a></li>\n<li><a href=\"https://developer.amazon.com/blogs\">Amazon</a></li>\n<li><a href=\"https://aws.amazon.com/blogs/\">Amazon AWS</a></li>\n<li><a href=\"http://bandcamptech.wordpress.com/\">Bandcamp Tech</a></li>\n<li><a href=\"https://www.simple.com/engineering/\">BankSimple Simple Blog</a></li>\n<li><a href=\"http://word.bitly.com/\">Bitly Engineering Blog</a></li>\n<li><a href=\"http://blog.cloudera.com/blog/\">Cloudera Developer Blog</a></li>\n<li><a href=\"https://tech.dropbox.com/\">Dropbox Tech Blog</a></li>\n<li><a href=\"http://engineering.quora.com/\">Engineering at Quora</a></li>\n<li><a href=\"http://codeascraft.com/\">Etsy Code as Craft</a></li>\n<li><a href=\"https://www.facebook.com/Engineering\">Facebook Engineering</a></li>\n<li><a href=\"http://code.flickr.net/\">Flickr Code</a></li>\n<li><a href=\"http://engineering.foursquare.com/\">Foursquare Engineering Blog</a></li>\n<li><a href=\"http://googleresearch.blogspot.com/\">Google Research Blog</a></li>\n<li><a href=\"https://engineering.groupon.com/\">Groupn Engineering Blog</a></li>\n<li><a href=\"http://highscalability.com/\">High Scalability</a></li>\n<li><a href=\"http://instagram-engineering.tumblr.com/\">Instagram Engineering</a></li>\n<li><a href=\"http://engineering.linkedin.com/blog\">LinkedIn Engineering</a></li>\n<li><a href=\"http://tech.oyster.com/\">Oyster Tech Blog</a></li>\n<li><a href=\"http://engineering.pinterest.com/\">Pinterest Engineering Blog</a></li>\n<li><a href=\"http://devblog.songkick.com/\">Songkick Technology Blog</a></li>\n<li><a href=\"https://developers.soundcloud.com/blog/\">SoundCloud Backstage Blog</a></li>\n<li><a href=\"http://corner.squareup.com/\">Square The Corner</a></li>\n<li><a href=\"http://www.redditblog.com/\">THE REDDIT BLOG</a></li>\n<li><a href=\"https://github.com/blog/category/engineering\">The GitHub Blog</a></li>\n<li><a href=\"http://techblog.netflix.com/\">The Netflix Tech Blog</a></li>\n<li><a href=\"http://www.twilio.com/engineering\">Twilio Engineering Blog</a></li>\n<li><a href=\"https://engineering.twitter.com/\">Twitter Engineering</a></li>\n<li><a href=\"https://eng.uber.com/\">Uber Engineering</a></li>\n<li><a href=\"https://medium.com/walmartlabs\">Walmart Labs Tech Blog</a></li>\n<li><a href=\"http://engineering.webengage.com/\">WebEngage Engineering Blog</a></li>\n<li><a href=\"http://eng.yammer.com/blog/\">Yammer Engineering</a></li>\n<li><a href=\"http://engineeringblog.yelp.com/\">Yelp Engineering Blog</a></li>\n<li><a href=\"https://smarketshq.com/\">Smarkets Blog</a></li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/common-design-questions/",
            "url": "https://samir.pages.dev/posts/common-design-questions/",
            "title": "Common Design questions",
            "date_published": "2023-08-05T20:52:53.859Z",
            "content_html": "<p>It generally depends what you are and you will be working on. Also what your level is but these are some of the more frequent interview questions.</p>\n<ul>\n<li>Design amazon’s frequently viewed product page (eg. which shows the last 5 items you saw)</li>\n<li>Design an online poker game for multiplayer. Solve for persistence, concurrency, scale. Draw the ER diagram for this </li>\n<li>Design a [url compression system] (<a href=\"http://www.hiredintech.com/system-design/the-system-design-process/\">http://www.hiredintech.com/system-design/the-system-design-process/</a>)</li>\n<li><a href=\"http://infolab.stanford.edu/~backrub/google.html\">Search engine</a> (generally asked with people who have some domain knowledge): basic crawling, collection, hashing etc. Depends on your expertise on this topic</li>\n<li>Design dropbox’s architecture. <a href=\"https://www.youtube.com/watch?v=PE4gwstWhmc\">good talk on this</a></li>\n<li>Design a <a href=\"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html\">picture sharing website</a>. How will you store thumbnails, photos? Usage of CDNS? caching at various layers etc.</li>\n<li><ul>\n<li>Design a news feed (eg. Facebook , Twitter): <a href=\"http://www.quora.com/Software-Engineering-Best-Practices/What-are-best-practices-for-building-something-like-a-News-Feed\">news feed</a></li>\n</ul>\n</li>\n<li>Design a product based on maps, eg hotel &#x2F; ATM finder given a location. </li>\n<li>Design malloc, free and <a href=\"http://courses.cs.washington.edu/courses/csep521/07wi/prj/rick.pdf\">garbage collection system</a>. What data structures to use? decorator pattern over malloc etc.</li>\n<li>Design a site like <a href=\"http://www.junglee.com/\">junglee.com</a> i.e price comparision, availability on e-commerce websites. When and will you cache, how much to query, how to crawl efficiently over e-commerce sites, sharding of databases, basic database design</li>\n<li>A web application for instant messaging, eg <a href=\"http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html\">whatsapp</a>, facebook chat. Issues of each, scaling problems, status and availability notification etc.</li>\n<li>Design a system for collaborating over a document simultaneously (eg <a href=\"https://neil.fraser.name/writing/sync/\">google docs</a>)</li>\n<li>(very common:) top ‘n’ or most frequent items of a running stream of data</li>\n<li>Design election commission architecture :<br> Let’s say we work with the Election Commission. On Counting day, we want to collate the votes received at the lakhs of voting booths all over the country. Each booth has a voting machine, which, when connected to the network, returns an array of the form {[party_id, num_votes],[party_id_2, num_votes_2],…}. We want to collect these and get the current scores in real time. The report we need continuously is how many seats is each party leading in. Please design a system for this.</li>\n<li>Design a logging system<br> (For web applications, it is common to have a large number of servers running the same application, with a load balancer in front to distribute the incoming requests. In this scenario, we want to check and alarm in case an exception is thrown in any of the servers. We want a system that checks for the appearance of specific words, “Exception”, “Disk Full” etc. in the logs of any of the servers. How would you design this system?)</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/client-server-communication/",
            "url": "https://samir.pages.dev/posts/client-server-communication/",
            "title": "Client-Server Communication",
            "date_published": "2023-08-05T20:52:53.857Z",
            "content_html": "<h1 id=\"Client-Server-Communication\"><a href=\"#Client-Server-Communication\" class=\"headerlink\" title=\"Client-Server Communication\"></a>Client-Server Communication</h1><h2 id=\"Standard-HTTP-Web-Request\"><a href=\"#Standard-HTTP-Web-Request\" class=\"headerlink\" title=\"Standard HTTP Web Request\"></a>Standard HTTP Web Request</h2><ol>\n<li>Client opens a connection and requests data from server.</li>\n<li>Server calculates the response.</li>\n<li>Server sends the response back to the client on the opened request.</li>\n</ol>\n<h2 id=\"Ajax-Polling\"><a href=\"#Ajax-Polling\" class=\"headerlink\" title=\"Ajax Polling\"></a>Ajax Polling</h2><p>The client repeatedly polls (or requests) a server for data, and waits for the server to respond with data. If no data is available, an empty response is returned.</p>\n<ol>\n<li>Client opens a connection and requests data from the server using regular HTTP.</li>\n<li>The requested webpage sends requests to the server at regular intervals (e.g., 0.5 seconds).</li>\n<li>The server calculates the response and sends it back, like regular HTTP traffic.</li>\n<li>Client repeats the above three steps periodically to get updates from the server.</li>\n</ol>\n<p>Problems</p>\n<ul>\n<li>Client has to keep asking the server for any new data.</li>\n<li>A lot of responses are empty, creating HTTP overhead.</li>\n</ul>\n<h2 id=\"HTTP-Long-Polling\"><a href=\"#HTTP-Long-Polling\" class=\"headerlink\" title=\"HTTP Long-Polling\"></a>HTTP Long-Polling</h2><p>The client requests information from the server exactly as in normal polling, but with the expectation that the server may not respond immediately.</p>\n<ol>\n<li>The client makes an initial request using regular HTTP and then waits for a response.</li>\n<li>The server delays its response until an update is available, or until a timeout has occurred.</li>\n<li>When an update is available, the server sends a full response to the client.</li>\n<li>The client typically sends a new long-poll request, either immediately upon receiving a response or after a pause to allow an acceptable latency period.</li>\n</ol>\n<p>Each Long-Poll request has a timeout. The client has to reconnect periodically after the connection is closed, due to timeouts.</p>\n<h2 id=\"WebSockets\"><a href=\"#WebSockets\" class=\"headerlink\" title=\"WebSockets\"></a>WebSockets</h2><ul>\n<li>A persistent full duplex communication channels over a single TCP connection. Both server and client can send data at any time.</li>\n<li>A connection is established through WebSocket handshake.</li>\n<li>Low communication overhead.</li>\n<li>Real-time data transfer.</li>\n</ul>\n<h2 id=\"Server-Sent-Event-SSE\"><a href=\"#Server-Sent-Event-SSE\" class=\"headerlink\" title=\"Server-Sent Event (SSE)\"></a>Server-Sent Event (SSE)</h2><ol>\n<li>Client requests data from a server using regular HTTP.</li>\n<li>The requested webpage opens a connection to the server.</li>\n<li>Server sends the data to the client whenever there’s new information available.</li>\n</ol>\n<ul>\n<li>Use case:<ul>\n<li>When real-time traffic from server to client is needed.</li>\n<li>When server generates data in a loop and sends multiple events to client.</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/caching/",
            "url": "https://samir.pages.dev/posts/caching/",
            "title": "Caching",
            "date_published": "2023-08-05T20:52:53.855Z",
            "content_html": "<p>Caching</p>\n<hr>\n<ul>\n<li>Take advantage of the locality of reference principle: recently requested data is likely to be requested again.</li>\n<li>Exist at all levels in architecture, but often found at the level nearest to the front end.</li>\n</ul>\n<h2 id=\"Application-server-cache\"><a href=\"#Application-server-cache\" class=\"headerlink\" title=\"Application server cache\"></a>Application server cache</h2><ul>\n<li>Cache placed on a request layer node.</li>\n<li>When a request layer node is expanded to many nodes<ul>\n<li>Load balancer randomly distributes requests across the nodes.</li>\n<li>The same request can go to different nodes.</li>\n<li>Increase cache misses.</li>\n<li>Solutions:<ul>\n<li>Global caches</li>\n<li>Distributed caches</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Distributed-cache\"><a href=\"#Distributed-cache\" class=\"headerlink\" title=\"Distributed cache\"></a>Distributed cache</h2><ul>\n<li>Each request layer node owns part of the cached data.</li>\n<li>Entire cache is divided up using a consistent hashing function.</li>\n<li>Pro<ul>\n<li>Cache space can be increased easily by adding more nodes to the request pool.</li>\n</ul>\n</li>\n<li>Con<ul>\n<li>A missing node leads to cache lost.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Global-cache\"><a href=\"#Global-cache\" class=\"headerlink\" title=\"Global cache\"></a>Global cache</h2><ul>\n<li>A server or file store that is faster than original store, and accessible by all request layer nodes.</li>\n<li>Two common forms<ul>\n<li>Cache server handles cache miss.<ul>\n<li>Used by most applications.</li>\n</ul>\n</li>\n<li>Request nodes handle cache miss.<ul>\n<li>Have a large percentage of the hot data set in the cache.</li>\n<li>An architecture where the files stored in the cache are static and shouldn’t be evicted.</li>\n<li>The application logic understands the eviction strategy or hot spots better than the cache</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Content-distributed-network-CDN\"><a href=\"#Content-distributed-network-CDN\" class=\"headerlink\" title=\"Content distributed network (CDN)\"></a>Content distributed network (CDN)</h2><ul>\n<li>For sites serving large amounts of static media.</li>\n<li>Process<ul>\n<li>A request first asks the CDN for a piece of static media.</li>\n<li>CDN serves that content if it has it locally available.</li>\n<li>If content isn’t available, CDN will query back-end servers for the file, cache it locally and serve it to the requesting user.</li>\n</ul>\n</li>\n<li>If the system is not large enough for CDN, it can be built like this:<ul>\n<li>Serving static media off a separate subdomain using lightweight HTTP server (e.g. Nginx).</li>\n<li>Cutover the DNS from this subdomain to a CDN later.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cache-invalidation\"><a href=\"#Cache-invalidation\" class=\"headerlink\" title=\"Cache invalidation\"></a>Cache invalidation</h2><ul>\n<li>Keep cache coherent with the source of truth. Invalidate cache when source of truth has changed.</li>\n<li>Write-through cache<ul>\n<li>Data is written into the cache and permanent storage at the same time.</li>\n<li>Pro<ul>\n<li>Fast retrieval, complete data consistency, robust to system disruptions.</li>\n</ul>\n</li>\n<li>Con<ul>\n<li>Higher latency for write operations.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Write-around cache<ul>\n<li>Data is written to permanent storage, not cache.</li>\n<li>Pro<ul>\n<li>Reduce the cache that is no used.</li>\n</ul>\n</li>\n<li>Con<ul>\n<li>Query for recently written data creates a cache miss and higher latency.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Write-back cache<ul>\n<li>Data is only written to cache.</li>\n<li>Write to the permanent storage is done later on.</li>\n<li>Pro<ul>\n<li>Low latency, high throughput for write-intensive applications.</li>\n</ul>\n</li>\n<li>Con<ul>\n<li>Risk of data loss in case of system disruptions.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cache-eviction-policies\"><a href=\"#Cache-eviction-policies\" class=\"headerlink\" title=\"Cache eviction policies\"></a>Cache eviction policies</h2><ul>\n<li>FIFO: first in first out</li>\n<li>LIFO: last in first out</li>\n<li>LRU: least recently used</li>\n<li>MRU: most recently used</li>\n<li>LFU: least frequently used</li>\n<li>RR: random replacement</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "caching",
                "system-design",
                "design-interview"
            ]
        }
    ]
}