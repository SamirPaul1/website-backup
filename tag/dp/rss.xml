<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Samir Paul â€¢ Posts by &#34;dp&#34; tag</title>
        <link>https://samir.pages.dev</link>
        <description>Software Engineer</description>
        <language>en</language>
        <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
        <lastBuildDate>Sun, 06 Aug 2023 02:22:53 +0530</lastBuildDate>
        <category>LeetCode</category>
        <category>GeeksforGeeks</category>
        <category>blog</category>
        <category>coding</category>
        <category>computer-science</category>
        <category>Binary Search</category>
        <category>caching</category>
        <category>system-design</category>
        <category>design-interview</category>
        <category>preparation</category>
        <category>study-plan</category>
        <category>computer-networks</category>
        <category>computer-networks-notes</category>
        <category>projects</category>
        <category>tutorials</category>
        <category>list-of-project-based-tutorials</category>
        <category>curated-list</category>
        <category>DSAlgo</category>
        <category>dsa-in-python</category>
        <category>data-structures-and-algorithms</category>
        <category>dp</category>
        <category>Dynamic Programming</category>
        <category>Patterns</category>
        <category>embed-musicapp</category>
        <category>music</category>
        <category>embeded</category>
        <category>music-player</category>
        <category>programmable-search</category>
        <category>Graph</category>
        <category>distributed-systems</category>
        <category>two pointers problems</category>
        <category>Greedy</category>
        <category>python</category>
        <category>python-frameworks</category>
        <category>python-libraries</category>
        <category>technical-interview</category>
        <category>interview-questions</category>
        <category>leetcode</category>
        <category>leetcode-solutions</category>
        <category>leetcode-solutions-cheetsheet</category>
        <category>leetcode-cheetsheet</category>
        <category>important-leetcode-solutions</category>
        <category>python3</category>
        <category>file-compressor</category>
        <category>flask-application</category>
        <category>python-server</category>
        <category>pdfnet</category>
        <category>pdf-compression</category>
        <category>online-pdf-compressor</category>
        <category>pdfnetpython</category>
        <category>open-external-links</category>
        <category>javascript</category>
        <category>Operating System</category>
        <category>Placements</category>
        <category>OS</category>
        <category>project</category>
        <category>pygame</category>
        <category>python-game</category>
        <category>pyshooter</category>
        <category>shooter-game</category>
        <category>Python Cheat Sheet</category>
        <category>Leetcode</category>
        <category>sql</category>
        <category>nosql</category>
        <category>sharding</category>
        <category>data-partitioning</category>
        <category>certificates</category>
        <category>udemy</category>
        <category>coursera</category>
        <category>datacamp</category>
        <category>INNER JOIN</category>
        <category>RIGHT JOIN</category>
        <category>FULL JOIN</category>
        <category>SQL</category>
        <category>SQL Joins</category>
        <category>web-development</category>
        <category>lossless-data-compression</category>
        <category>online-file-compressor</category>
        <category>txt-compressor</category>
        <category>algorithm</category>
        <category>databases</category>
        <category>short-url</category>
        <category>url-shortner</category>
        <category>networking</category>
        <item>
            <guid isPermalink="true">https://samir.pages.dev/posts/dp-for-beginners/</guid>
            <title>DP for Beginners</title>
            <link>https://samir.pages.dev/posts/dp-for-beginners/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>dp</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;Longest Increasing Subsequence variants:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-increasing-subsequence/&#34;&gt;https://leetcode.com/problems/longest-increasing-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/largest-divisible-subset/&#34;&gt;https://leetcode.com/problems/largest-divisible-subset/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/russian-doll-envelopes/&#34;&gt;https://leetcode.com/problems/russian-doll-envelopes/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-length-of-pair-chain/&#34;&gt;https://leetcode.com/problems/maximum-length-of-pair-chain/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&#34;&gt;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/delete-and-earn/&#34;&gt;https://leetcode.com/problems/delete-and-earn/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-string-chain/&#34;&gt;https://leetcode.com/problems/longest-string-chain/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Partition Subset:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-equal-subset-sum/&#34;&gt;https://leetcode.com/problems/partition-equal-subset-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/last-stone-weight-ii/&#34;&gt;https://leetcode.com/problems/last-stone-weight-ii/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BitMasking:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&#34;&gt;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Longest Common Subsequence Variant:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-common-subsequence/&#34;&gt;https://leetcode.com/problems/longest-common-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/edit-distance/&#34;&gt;https://leetcode.com/problems/edit-distance/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/distinct-subsequences/&#34;&gt;https://leetcode.com/problems/distinct-subsequences/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&#34;&gt;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Palindrome:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/palindrome-partitioning-ii/&#34;&gt;https://leetcode.com/problems/palindrome-partitioning-ii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/palindromic-substrings/&#34;&gt;https://leetcode.com/problems/palindromic-substrings/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coin Change variant:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change/&#34;&gt;https://leetcode.com/problems/coin-change/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change-2/&#34;&gt;https://leetcode.com/problems/coin-change-2/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/combination-sum-iv/&#34;&gt;https://leetcode.com/problems/combination-sum-iv/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/perfect-squares/&#34;&gt;https://leetcode.com/problems/perfect-squares/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-for-tickets/&#34;&gt;https://leetcode.com/problems/minimum-cost-for-tickets/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Matrix multiplication variant:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&#34;&gt;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&#34;&gt;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/burst-balloons/&#34;&gt;https://leetcode.com/problems/burst-balloons/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Matrix&amp;#x2F;2D Array:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/matrix-block-sum/&#34;&gt;https://leetcode.com/problems/matrix-block-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/range-sum-query-2d-immutable/&#34;&gt;https://leetcode.com/problems/range-sum-query-2d-immutable/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/dungeon-game/&#34;&gt;https://leetcode.com/problems/dungeon-game/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/triangle/&#34;&gt;https://leetcode.com/problems/triangle/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximal-square/&#34;&gt;https://leetcode.com/problems/maximal-square/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-falling-path-sum/&#34;&gt;https://leetcode.com/problems/minimum-falling-path-sum/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hash + DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/target-sum/&#34;&gt;https://leetcode.com/problems/target-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-arithmetic-sequence/&#34;&gt;https://leetcode.com/problems/longest-arithmetic-sequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&#34;&gt;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&#34;&gt;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State machine:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Depth First Search + DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/out-of-boundary-paths/&#34;&gt;https://leetcode.com/problems/out-of-boundary-paths/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/knight-probability-in-chessboard/&#34;&gt;https://leetcode.com/problems/knight-probability-in-chessboard/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Minimax DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/predict-the-winner/&#34;&gt;https://leetcode.com/problems/predict-the-winner/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/stone-game/&#34;&gt;https://leetcode.com/problems/stone-game/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Misc:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/greatest-sum-divisible-by-three/&#34;&gt;https://leetcode.com/problems/greatest-sum-divisible-by-three/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/decode-ways/&#34;&gt;https://leetcode.com/problems/decode-ways/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/perfect-squares/&#34;&gt;https://leetcode.com/problems/perfect-squares/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/count-numbers-with-unique-digits/&#34;&gt;https://leetcode.com/problems/count-numbers-with-unique-digits/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-turbulent-subarray/&#34;&gt;https://leetcode.com/problems/longest-turbulent-subarray/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&#34;&gt;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Sample-solutions-for-each-of-above-problem-type&#34;&gt;&lt;a href=&#34;#Sample-solutions-for-each-of-above-problem-type&#34; class=&#34;headerlink&#34; title=&#34;Sample solutions for each of above problem type:&#34;&gt;&lt;/a&gt;Sample solutions for each of above problem type:&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Longest Increasing Subsequence&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-increasing-subsequence/&#34;&gt;https://leetcode.com/problems/longest-increasing-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/largest-divisible-subset/&#34;&gt;https://leetcode.com/problems/largest-divisible-subset/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/russian-doll-envelopes/&#34;&gt;https://leetcode.com/problems/russian-doll-envelopes/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-length-of-pair-chain/&#34;&gt;https://leetcode.com/problems/maximum-length-of-pair-chain/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&#34;&gt;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/delete-and-earn/&#34;&gt;https://leetcode.com/problems/delete-and-earn/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-string-chain/&#34;&gt;https://leetcode.com/problems/longest-string-chain/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int lengthOfLIS(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;LIS(n+1, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; i; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (nums[i] &amp;gt; nums[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					LIS[i] = max(LIS[i], 1 + LIS[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int ans = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ans = max(ans, LIS[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Partition Subset Sum:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-equal-subset-sum/&#34;&gt;https://leetcode.com/problems/partition-equal-subset-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/last-stone-weight-ii/&#34;&gt;https://leetcode.com/problems/last-stone-weight-ii/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool canPartition(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int sum = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sum += nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (sum % 2 != 0) return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int target = sum/2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;bool&amp;gt;dp(target+1, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dp[0] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = target; j &amp;gt;= nums[i]; j--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				dp[j] = dp[j] | dp[j - nums[i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return dp[target];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;BitMasking in DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&#34;&gt;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int dp[(1&amp;lt;&amp;lt;16) + 2];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool canPartitionKSubsets(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		fill(dp, dp+(1&amp;lt;&amp;lt;16)+2, -1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int sum = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sum += nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (sum % k != 0) return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int target = sum/k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dp[0] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int mask = 0; mask &amp;lt; (1&amp;lt;&amp;lt;n); mask++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (dp[mask] == -1) continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (!(mask &amp;amp; (1 &amp;lt;&amp;lt; i)) &amp;amp;&amp;amp; dp[mask] + nums[i] &amp;lt;= target)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					dp[mask | (1 &amp;lt;&amp;lt; i)] = (dp[mask] + nums[i]) % target;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return dp[(1&amp;lt;&amp;lt;n)-1] == 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Longest Common Subsequence&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-common-subsequence/&#34;&gt;https://leetcode.com/problems/longest-common-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/edit-distance/&#34;&gt;https://leetcode.com/problems/edit-distance/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/distinct-subsequences/&#34;&gt;https://leetcode.com/problems/distinct-subsequences/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&#34;&gt;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int longestCommonSubsequenceUtil(string text1, string text2, int n, int m) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (n == 0 || m == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;L(n+1, vector&amp;lt;int&amp;gt;(m+1, 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt;= n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt;= m; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (i == 0 || j == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					L[i][j] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				else if (text1[i-1] == text2[j-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					L[i][j] = 1 + L[i-1][j-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					L[i][j] = max(L[i][j-1], L[i-1][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return L[n][m];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int longestCommonSubsequence(string text1, string text2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = text1.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int m = text2.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return longestCommonSubsequenceUtil(text1, text2, n, m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Palindrome:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/palindrome-partitioning-ii/&#34;&gt;https://leetcode.com/problems/palindrome-partitioning-ii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/palindromic-substrings/&#34;&gt;https://leetcode.com/problems/palindromic-substrings/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int minCut(string s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = s.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int res[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		bool P[n][n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			P[i][i] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int L = 2; L &amp;lt;= n; L++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; n-L+1; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int j = i+L-1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (L == 2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					P[i][j] = (s[i] == s[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					P[i][j] = (s[i] == s[j]) &amp;amp;&amp;amp; P[i+1][j-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (P[0][i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[i] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[i] = INT_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				for (int j = 0; j &amp;lt; i; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					if (P[j+1][i] &amp;amp;&amp;amp; res[i] &amp;gt; 1 + res[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						res[i] = 1+res[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res[n-1] == INT_MAX ? 1 : res[n-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Coin Change:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change/&#34;&gt;https://leetcode.com/problems/coin-change/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change-2/&#34;&gt;https://leetcode.com/problems/coin-change-2/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/combination-sum-iv/&#34;&gt;https://leetcode.com/problems/combination-sum-iv/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/perfect-squares/&#34;&gt;https://leetcode.com/problems/perfect-squares/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-for-tickets/&#34;&gt;https://leetcode.com/problems/minimum-cost-for-tickets/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int coinChange(vector&amp;lt;int&amp;gt;&amp;amp; coins, int amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = coins.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (n == 0) return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;res(amount+1, INT_MAX);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		res[0] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j =  coins[i]; j &amp;lt;= amount; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (res[j-coins[i]] != INT_MAX)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					res[j] = min(res[j], 1+res[j-coins[i]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res[amount] != INT_MAX ? res[amount] : -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Matrix multiplication:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&#34;&gt;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&#34;&gt;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/burst-balloons/&#34;&gt;https://leetcode.com/problems/burst-balloons/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int minScoreTriangulation(vector&amp;lt;int&amp;gt;&amp;amp; A) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = A.size();        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;dp(n, vector&amp;lt;int&amp;gt;(n, 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int L = 2; L &amp;lt;= n; L++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i+L &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int j = i+L;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				dp[i][j] = INT_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				for (int k = i+1; k &amp;lt; j; k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i]*A[k]*A[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return dp[0][n-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Matrix&amp;#x2F;2D Array:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/matrix-block-sum/&#34;&gt;https://leetcode.com/problems/matrix-block-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/range-sum-query-2d-immutable/&#34;&gt;https://leetcode.com/problems/range-sum-query-2d-immutable/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/dungeon-game/&#34;&gt;https://leetcode.com/problems/dungeon-game/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/triangle/&#34;&gt;https://leetcode.com/problems/triangle/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximal-square/&#34;&gt;https://leetcode.com/problems/maximal-square/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-falling-path-sum/&#34;&gt;https://leetcode.com/problems/minimum-falling-path-sum/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; matrixBlockSum(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; mat, int K) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int m = mat.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = mat[0].size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;sum(m+1, vector&amp;lt;int&amp;gt;(n+1, 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 1; i &amp;lt;= m; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 1; j &amp;lt;= n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;res(m, vector&amp;lt;int&amp;gt;(n, 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; m; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int r1 = max(0, i-K); int c1 = max(0, j-K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int r2 = min(m-1, i+K); int c2 = min(n-1, j+K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				r1++; r2++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				c1++; c2++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[i][j] = sum[r2][c2] - (sum[r2][c1-1] + sum[r1-1][c2]- sum[r1-1][c1-1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Hash + DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/target-sum/&#34;&gt;https://leetcode.com/problems/target-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-arithmetic-sequence/&#34;&gt;https://leetcode.com/problems/longest-arithmetic-sequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&#34;&gt;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&#34;&gt;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int findTargetSumWays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int S) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		unordered_map&amp;lt;int, int&amp;gt;hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		hm[0] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			auto mp = hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			hm.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (auto it = mp.begin(); it != mp.end(); it++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				hm[it-&amp;gt;first + nums[i]] += it-&amp;gt;second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				hm[it-&amp;gt;first - nums[i]] += it-&amp;gt;second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return hm[S];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;State machine:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int maxProfit(vector&amp;lt;int&amp;gt;&amp;amp; prices, int fee) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = prices.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;buy(n, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;sell(n, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		buy[0] = -prices[0], sell[0] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 1; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			buy[i] = max(buy[i-1], sell[i-1]-prices[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sell[i] = max(sell[i-1], buy[i-1]+prices[i]-fee);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return sell[n-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Depth First Search +DP:&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/out-of-boundary-paths/&#34;&gt;https://leetcode.com/problems/out-of-boundary-paths/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/knight-probability-in-chessboard/&#34;&gt;https://leetcode.com/problems/knight-probability-in-chessboard/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int mod = 1000000007;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int dfs(int m, int n, int N, int r, int c,  vector&amp;lt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;&amp;amp; dp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (r &amp;lt; 0 || c &amp;lt; 0 || r &amp;gt;= m || c &amp;gt;= n) return 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (N == 0) return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (dp[N][r][c] != -1) return dp[N][r][c]%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int moves = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		moves =  (moves + dfs(m, n, N-1, r, c+1, dp))%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		moves =  (moves + dfs(m, n, N-1, r, c-1, dp))%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		moves =  (moves + dfs(m, n, N-1, r+1, c, dp))%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		moves =  (moves + dfs(m, n, N-1, r-1, c, dp))%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dp[N][r][c] = moves%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return dp[N][r][c];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int findPaths(int m, int n, int N, int i, int j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;dp(N+1, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;(m+1, vector&amp;lt;int&amp;gt;(n+1, -1)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return dfs(m, n, N, i, j, dp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Minimax DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/predict-the-winner/&#34;&gt;https://leetcode.com/problems/predict-the-winner/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/stone-game/&#34;&gt;https://leetcode.com/problems/stone-game/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool PredictTheWinner(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int res[n][n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			res[i][i] = nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int l = 2; l &amp;lt;= n; l++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i+l-1 &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int j = i+l-1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int a = (i+1 &amp;lt;= j-1) ? res[i+1][j-1] : 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int b = (i+2 &amp;lt;= j) ? res[i+2][j] : 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int c = (i &amp;lt;= j-2) ? res[i][j-2] : 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[i][j] = max(nums[i] + min(a,b), nums[j] + min(a, c));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int total = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			total += nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res[0][n-1] &amp;gt;= total - res[0][n-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Miscellaneous:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/greatest-sum-divisible-by-three/&#34;&gt;https://leetcode.com/problems/greatest-sum-divisible-by-three/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/decode-ways/&#34;&gt;https://leetcode.com/problems/decode-ways/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/count-numbers-with-unique-digits/&#34;&gt;https://leetcode.com/problems/count-numbers-with-unique-digits/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-turbulent-subarray/&#34;&gt;https://leetcode.com/problems/longest-turbulent-subarray/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&#34;&gt;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
