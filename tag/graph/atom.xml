<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://samir.pages.dev</id>
    <title>Samir Paul â€¢ Posts by &#34;graph&#34; tag</title>
    <link href="https://samir.pages.dev" />
    <updated>2023-08-05T20:52:53.899Z</updated>
    <category term="interviewbit" />
    <category term="LeetCode" />
    <category term="geeksforgeeks" />
    <category term="blog" />
    <category term="coding" />
    <category term="computer-science" />
    <category term="Binary Search" />
    <category term="caching" />
    <category term="system-design" />
    <category term="design-interview" />
    <category term="preparation" />
    <category term="study-plan" />
    <category term="computer-networks" />
    <category term="computer-networks-notes" />
    <category term="projects" />
    <category term="tutorials" />
    <category term="list-of-project-based-tutorials" />
    <category term="curated-list" />
    <category term="DSAlgo" />
    <category term="dsa-in-python" />
    <category term="data-structures-and-algorithms" />
    <category term="dp" />
    <category term="Dynamic Programming" />
    <category term="Patterns" />
    <category term="embed-musicapp" />
    <category term="music" />
    <category term="embeded" />
    <category term="music-player" />
    <category term="programmable-search" />
    <category term="Graph" />
    <category term="distributed-systems" />
    <category term="two pointers problems" />
    <category term="Greedy" />
    <category term="technical-interview" />
    <category term="interview-questions" />
    <category term="python" />
    <category term="python-frameworks" />
    <category term="python-libraries" />
    <category term="python3" />
    <category term="file-compressor" />
    <category term="flask-application" />
    <category term="python-server" />
    <category term="pdfnet" />
    <category term="pdf-compression" />
    <category term="online-pdf-compressor" />
    <category term="pdfnetpython" />
    <category term="open-external-links" />
    <category term="javascript" />
    <category term="Operating System" />
    <category term="Placements" />
    <category term="OS" />
    <category term="project" />
    <category term="pygame" />
    <category term="python-game" />
    <category term="pyshooter" />
    <category term="shooter-game" />
    <category term="Python Cheat Sheet" />
    <category term="sql" />
    <category term="nosql" />
    <category term="sharding" />
    <category term="data-partitioning" />
    <category term="certificates" />
    <category term="udemy" />
    <category term="coursera" />
    <category term="datacamp" />
    <category term="sql-joins" />
    <category term="web-development" />
    <category term="lossless-data-compression" />
    <category term="online-file-compressor" />
    <category term="txt-compressor" />
    <category term="algorithm" />
    <category term="databases" />
    <category term="short-url" />
    <category term="url-shortner" />
    <category term="networking" />
    <entry>
        <id>https://samir.pages.dev/posts/graph-for-beginners/</id>
        <title>Graph For Beginners</title>
        <link rel="alternate" href="https://samir.pages.dev/posts/graph-for-beginners/"/>
        <content type="html">&lt;p&gt;&lt;strong&gt;Graph Problems For Practice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sharing some topic wise good Graph problems and sample solutions to observe on how to approach.&lt;/p&gt;
&lt;p&gt;List: &lt;a href=&#34;https://leetcode.com/list/x1wy4de7&#34;&gt;https://leetcode.com/list/x1wy4de7&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Union Find:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Identify if problems talks about finding groups or components.&lt;/p&gt;
&lt;p&gt; &lt;a href=&#34;https://leetcode.com/problems/friend-circles/&#34;&gt;https://leetcode.com/problems/friend-circles/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/redundant-connection/&#34;&gt;https://leetcode.com/problems/redundant-connection/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&#34;&gt;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&#34;&gt;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/satisfiability-of-equality-equations/&#34;&gt;https://leetcode.com/problems/satisfiability-of-equality-equations/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/accounts-merge/&#34;&gt;https://leetcode.com/problems/accounts-merge/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; All the above problems can be solved by Union Find algorithm with minor tweaks.&lt;br&gt; Below is a standard template for union find problems.&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;int&amp;gt;parent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int find(int x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return parent[x] == x ? x : find(parent[x]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;int&amp;gt; findRedundantConnection(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; edges) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = edges.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		parent.resize(n+1, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			parent[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;res(2, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int x = find(edges[i][0]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int y = find(edges[i][1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (x != y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				parent[y] = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[0] = edges[i][0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[1] = edges[i][1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Depth First Search&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Start DFS from nodes at boundary:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/surrounded-regions/&#34;&gt;https://leetcode.com/problems/surrounded-regions/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/number-of-enclaves/&#34;&gt;https://leetcode.com/problems/number-of-enclaves/&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int rows, cols;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	void dfs(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; A, int i, int j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (i &amp;lt; 0 || j &amp;lt; 0 || i &amp;gt;= rows || j &amp;gt;= cols)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (A[i][j] != 1) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		A[i][j] = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(A, i+1, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(A, i-1, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(A, i, j+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(A, i, j-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int numEnclaves(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; A) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (A.empty()) return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		rows = A.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		cols = A[0].size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; rows; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; cols; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (i == 0 || j == 0 || i == rows-1 || j == cols-1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					dfs(A, i, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int ans = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; rows; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; cols; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (A[i][j] == 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Time taken to reach all nodes or share information to all graph nodes:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/time-needed-to-inform-all-employees/&#34;&gt;https://leetcode.com/problems/time-needed-to-inform-all-employees/&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	void dfs(unordered_map&amp;lt;int, vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp;hm, int i, vector&amp;lt;int&amp;gt;&amp;amp; informTime, int &amp;amp;res, int curr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		curr += informTime[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		res = max(res, curr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (auto it = hm[i].begin(); it != hm[i].end(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			dfs(hm, *it, informTime, res, curr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int numOfMinutes(int n, int headID, vector&amp;lt;int&amp;gt;&amp;amp; manager, vector&amp;lt;int&amp;gt;&amp;amp; informTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		unordered_map&amp;lt;int, vector&amp;lt;int&amp;gt;&amp;gt;hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (manager[i] != -1) hm[manager[i]].push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int res = 0, curr = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(hm, headID, informTime, res, curr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DFS from each unvisited node&amp;#x2F;Island problems&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/number-of-closed-islands/&#34;&gt;https://leetcode.com/problems/number-of-closed-islands/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/number-of-islands/&#34;&gt;https://leetcode.com/problems/number-of-islands/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/keys-and-rooms/&#34;&gt;https://leetcode.com/problems/keys-and-rooms/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/max-area-of-island/&#34;&gt;https://leetcode.com/problems/max-area-of-island/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/flood-fill/&#34;&gt;https://leetcode.com/problems/flood-fill/&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	void dfs(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid, vector&amp;lt;vector&amp;lt;bool&amp;gt;&amp;gt;&amp;amp; visited, int i, int j, int m, int n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (i &amp;lt; 0 || i &amp;gt;= m || j &amp;lt; 0 || j &amp;gt;= n) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (grid[i][j] == &amp;#x27;0&amp;#x27; || visited[i][j]) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		visited[i][j] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(grid, visited, i+1, j, m, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(grid, visited, i, j+1, m, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(grid, visited, i-1, j, m, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(grid, visited, i, j-1, m, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int numIslands(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (grid.empty()) return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int m = grid.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = grid[0].size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;bool&amp;gt;&amp;gt;visited(m, vector&amp;lt;bool&amp;gt;(n, false));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int res = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; m; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (grid[i][j] == &amp;#x27;1&amp;#x27; &amp;amp;&amp;amp; !visited[i][j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					dfs(grid, visited, i, j, m, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					res++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cycle Find:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/find-eventual-safe-states/&#34;&gt;https://leetcode.com/problems/find-eventual-safe-states/&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool dfs(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; graph, int v, vector&amp;lt;int&amp;gt;&amp;amp; dp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (dp[v])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return dp[v] == 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dp[v] = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (auto it = graph[v].begin(); it != graph[v].end(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!dfs(graph, *it, dp))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dp[v] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;int&amp;gt; eventualSafeNodes(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; graph) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int V = graph.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;dp(V, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; V; i++) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (dfs(graph, i, dp))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res.push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; };&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Breadth First Search&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Shortest Path:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/01-matrix/&#34;&gt;https://leetcode.com/problems/01-matrix/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/as-far-from-land-as-possible/&#34;&gt;https://leetcode.com/problems/as-far-from-land-as-possible/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/rotting-oranges/&#34;&gt;https://leetcode.com/problems/rotting-oranges/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/shortest-path-in-binary-matrix/&#34;&gt;https://leetcode.com/problems/shortest-path-in-binary-matrix/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; Start BFS from nodes from which shortest path is asked for.&lt;br&gt; Below is the sample BFS approach to find the path.&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; updateMatrix(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (matrix.empty()) return matrix;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int rows = matrix.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int cols = matrix[0].size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;pq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; rows; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; cols; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (matrix[i][j] == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					pq.push(&amp;#123;i-1, j&amp;#125;), pq.push(&amp;#123;i+1, j&amp;#125;), pq.push(&amp;#123;i, j-1&amp;#125;), pq.push(&amp;#123;i, j+1&amp;#125;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;bool&amp;gt;&amp;gt;visited(rows, vector&amp;lt;bool&amp;gt;(cols, false));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int steps = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		while (!pq.empty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			steps++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int size = pq.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; size; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				auto front = pq.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int l = front.first;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int r = front.second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				pq.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (l &amp;gt;= 0 &amp;amp;&amp;amp; r &amp;gt;= 0 &amp;amp;&amp;amp; l &amp;lt; rows &amp;amp;&amp;amp; r &amp;lt; cols &amp;amp;&amp;amp; !visited[l][r] &amp;amp;&amp;amp; matrix[l][r] == 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					visited[l][r] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					matrix[l][r] = steps;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					pq.push(&amp;#123;l-1, r&amp;#125;), pq.push(&amp;#123;l+1, r&amp;#125;), pq.push(&amp;#123;l, r-1&amp;#125;), pq.push(&amp;#123;l, r+1&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return matrix;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Graph coloring&amp;#x2F;Bipartition&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/possible-bipartition/&#34;&gt;https://leetcode.com/problems/possible-bipartition/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/is-graph-bipartite/&#34;&gt;https://leetcode.com/problems/is-graph-bipartite/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; Problems asks to check if its possible to divide the graph nodes into 2 groups&lt;br&gt; Apply BFS for same. Below is a sample graph coloring approach.&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		bool isBipartite(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; graph) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int n = graph.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			vector&amp;lt;int&amp;gt;color(n, -1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (color[i] != -1) continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				color[i] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				queue&amp;lt;int&amp;gt;q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				q.push(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				while (!q.empty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int t = q.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					q.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					for (int j = 0; j &amp;lt; graph[t].size(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						if (color[graph[t][j]] == -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;							color[graph[t][j]] = 1-color[t];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;							q.push(graph[t][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						&amp;#125; else if (color[graph[t][j]] == color[t]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;							return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Topological Sort:&lt;/strong&gt;&lt;br&gt; Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0&lt;/p&gt;
&lt;p&gt; &lt;a href=&#34;https://leetcode.com/problems/course-schedule/&#34;&gt;https://leetcode.com/problems/course-schedule/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/course-schedule-ii/&#34;&gt;https://leetcode.com/problems/course-schedule-ii/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; Below is sample approach. Find if cycle is present, if not apply topological sort.&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int V;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	list&amp;lt;int&amp;gt;*adj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool isCyclicUtil(int v, vector&amp;lt;bool&amp;gt;&amp;amp;visited, vector&amp;lt;bool&amp;gt;&amp;amp;recStack) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		visited[v] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		recStack[v] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (auto it = adj[v].begin(); it != adj[v].end(); it++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!visited[*it] &amp;amp;&amp;amp; isCyclicUtil(*it, visited, recStack))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			else if (recStack[*it])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		recStack[v] = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool isCyclic() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;bool&amp;gt;visited(V, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;bool&amp;gt;recStack(V, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; V; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (isCyclicUtil(i, visited, recStack))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	void topologicalSortUtil(int v, vector&amp;lt;bool&amp;gt;&amp;amp;visited, vector&amp;lt;int&amp;gt;&amp;amp; res) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		visited[v] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (auto it = adj[v].begin(); it != adj[v].end(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!visited[*it])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				topologicalSortUtil(*it, visited, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		res.push_back(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;int&amp;gt;topologicalSort(int v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;bool&amp;gt;visited(V, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		topologicalSortUtil(v, visited, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; V; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!visited[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				topologicalSortUtil(i, visited, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;int&amp;gt; findOrder(int numCourses, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; prerequisites) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		V = numCourses;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		adj = new list&amp;lt;int&amp;gt;[V];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		unordered_map&amp;lt;int, vector&amp;lt;int&amp;gt;&amp;gt;hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; prerequisites.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			adj[prerequisites[i][0]].push_back(prerequisites[i][1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			hm[prerequisites[i][1]].push_back(prerequisites[i][0]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (isCyclic()) return vector&amp;lt;int&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int i = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (i = 0; i &amp;lt; V; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (hm.find(i) == hm.end())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return topologicalSort(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; };&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find Shortest Path (Dijkstraâ€™s&amp;#x2F;Bellman Ford)&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/network-delay-time/&#34;&gt;https://leetcode.com/problems/network-delay-time/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;Dijkstras and Bellman Ford:&lt;/strong&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int networkDelayTime(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; times, int N, int K) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;, vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;, greater&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt;pq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			vector&amp;lt;int&amp;gt;dist(N+1, INT_MAX);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pq.push(make_pair(0, K));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			dist[K] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			unordered_map&amp;lt;int, vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt;hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; times.size(); i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				hm[times[i][0]].push_back(make_pair(times[i][1], times[i][2]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			while (!pq.empty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				pair&amp;lt;int, int&amp;gt;p = pq.top();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				pq.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int u = p.second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				for (auto it = hm[u].begin(); it != hm[u].end(); it++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int v = it-&amp;gt;first;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int w = it-&amp;gt;second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					if (dist[v] &amp;gt; dist[u] + w) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						dist[v] = dist[u] + w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						pq.push(make_pair(dist[v], v));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int res = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 1; i &amp;lt;= N; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res = max(res, dist[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return res == INT_MAX ? -1 : res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int networkDelayTime(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; times, int N, int K) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int n = times.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!n) return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			vector&amp;lt;int&amp;gt;dist(N+1, INT_MAX);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int res = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			dist[K] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; N; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int u = times[j][0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int v = times[j][1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int w = times[j][2];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					if (dist[u] != INT_MAX &amp;amp;&amp;amp; dist[u] + w &amp;lt; dist[v])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						dist[v] = w + dist[u];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 1; i &amp;lt;= N; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res = max(res, dist[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return res == INT_MAX ? -1 : res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Complete List: Below are mostly list of problems (mostly medium level and may 1 or 2 easy) which are better to start practice with:&lt;br&gt;(Updated on 14th June â€˜20)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Union Find:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/friend-circles/&#34;&gt;https://leetcode.com/problems/friend-circles/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/redundant-connection/&#34;&gt;https://leetcode.com/problems/redundant-connection/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&#34;&gt;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&#34;&gt;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/satisfiability-of-equality-equations/&#34;&gt;https://leetcode.com/problems/satisfiability-of-equality-equations/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/accounts-merge/&#34;&gt;https://leetcode.com/problems/accounts-merge/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/connecting-cities-with-minimum-cost/&#34;&gt;https://leetcode.com/problems/connecting-cities-with-minimum-cost/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;DFS:&lt;/strong&gt;&lt;br&gt;DFS from boundary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/surrounded-regions/&#34;&gt;https://leetcode.com/problems/surrounded-regions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-enclaves/&#34;&gt;https://leetcode.com/problems/number-of-enclaves/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Shortest time:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/time-needed-to-inform-all-employees/&#34;&gt;https://leetcode.com/problems/time-needed-to-inform-all-employees/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Islands Variants&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-closed-islands/&#34;&gt;https://leetcode.com/problems/number-of-closed-islands/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-islands/&#34;&gt;https://leetcode.com/problems/number-of-islands/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/keys-and-rooms/&#34;&gt;https://leetcode.com/problems/keys-and-rooms/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/max-area-of-island/&#34;&gt;https://leetcode.com/problems/max-area-of-island/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/flood-fill/&#34;&gt;https://leetcode.com/problems/flood-fill/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/coloring-a-border/&#34;&gt;https://leetcode.com/problems/coloring-a-border/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hash&amp;#x2F;DFS:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/employee-importance/&#34;&gt;https://leetcode.com/problems/employee-importance/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/find-the-town-judge/&#34;&gt;https://leetcode.com/problems/find-the-town-judge/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cycle Find:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/find-eventual-safe-states/&#34;&gt;https://leetcode.com/problems/find-eventual-safe-states/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;BFS:&lt;/strong&gt;&lt;br&gt;BFS for shortest path:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/01-matrix/&#34;&gt;https://leetcode.com/problems/01-matrix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/as-far-from-land-as-possible/&#34;&gt;https://leetcode.com/problems/as-far-from-land-as-possible/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/rotting-oranges/&#34;&gt;https://leetcode.com/problems/rotting-oranges/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/shortest-path-in-binary-matrix/&#34;&gt;https://leetcode.com/problems/shortest-path-in-binary-matrix/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Graph coloring:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/possible-bipartition/&#34;&gt;https://leetcode.com/problems/possible-bipartition/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/is-graph-bipartite/&#34;&gt;https://leetcode.com/problems/is-graph-bipartite/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Topological Sort:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/course-schedule-ii/&#34;&gt;https://leetcode.com/problems/course-schedule-ii/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Shortest Path:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/network-delay-time/&#34;&gt;https://leetcode.com/problems/network-delay-time/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/&#34;&gt;https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/cheapest-flights-within-k-stops/&#34;&gt;https://leetcode.com/problems/cheapest-flights-within-k-stops/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="blog" />
        <category term="coding" />
        <category term="computer-science" />
        <category term="Graph" />
        <updated>2023-08-05T20:52:53.899Z</updated>
    </entry>
</feed>
