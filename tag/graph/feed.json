{
    "version": "https://jsonfeed.org/version/1",
    "title": "Samir Paul â€¢ All posts by \"graph\" tag",
    "description": "Software Engineer",
    "home_page_url": "https://samirpaul.in",
    "items": [
        {
            "id": "https://samirpaul.in/posts/graph-for-beginners/",
            "url": "https://samirpaul.in/posts/graph-for-beginners/",
            "title": "Graph For Beginners",
            "date_published": "2023-08-05T20:52:53.899Z",
            "content_html": "<p><strong>Graph Problems For Practice</strong></p>\n<p>Sharing some topic wise good Graph problems and sample solutions to observe on how to approach.</p>\n<p>List: <a href=\"https://leetcode.com/list/x1wy4de7\">https://leetcode.com/list/x1wy4de7</a></p>\n<ol>\n<li><p><strong>Union Find:</strong></p>\n<p> Identify if problems talks about finding groups or components.</p>\n<p> <a href=\"https://leetcode.com/problems/friend-circles/\">https://leetcode.com/problems/friend-circles/</a><br> <a href=\"https://leetcode.com/problems/redundant-connection/\">https://leetcode.com/problems/redundant-connection/</a><br> <a href=\"https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/\">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a><br> <a href=\"https://leetcode.com/problems/number-of-operations-to-make-network-connected/\">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a><br> <a href=\"https://leetcode.com/problems/satisfiability-of-equality-equations/\">https://leetcode.com/problems/satisfiability-of-equality-equations/</a><br> <a href=\"https://leetcode.com/problems/accounts-merge/\">https://leetcode.com/problems/accounts-merge/</a></p>\n<p> All the above problems can be solved by Union Find algorithm with minor tweaks.<br> Below is a standard template for union find problems.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tvector&lt;int&gt;parent;</span><br><span class=\"line\">\tint find(int x) &#123;</span><br><span class=\"line\">\t\treturn parent[x] == x ? x : find(parent[x]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tvector&lt;int&gt; findRedundantConnection(vector&lt;vector&lt;int&gt;&gt;&amp; edges) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tint n = edges.size();</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tparent.resize(n+1, 0);</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt;= n; i++)</span><br><span class=\"line\">\t\t\tparent[i] = i;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tvector&lt;int&gt;res(2, 0);</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tint x = find(edges[i][0]);</span><br><span class=\"line\">\t\t\tint y = find(edges[i][1]);</span><br><span class=\"line\">\t\t\tif (x != y)</span><br><span class=\"line\">\t\t\t\tparent[y] = x;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\tres[0] = edges[i][0];</span><br><span class=\"line\">\t\t\t\tres[1] = edges[i][1];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Depth First Search</strong></p>\n<ol>\n<li><p><strong>Start DFS from nodes at boundary:</strong><br> <a href=\"https://leetcode.com/problems/surrounded-regions/\">https://leetcode.com/problems/surrounded-regions/</a><br> <a href=\"https://leetcode.com/problems/number-of-enclaves/\">https://leetcode.com/problems/number-of-enclaves/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint rows, cols;</span><br><span class=\"line\">\tvoid dfs(vector&lt;vector&lt;int&gt;&gt;&amp; A, int i, int j) &#123;</span><br><span class=\"line\">\t\tif (i &lt; 0 || j &lt; 0 || i &gt;= rows || j &gt;= cols)</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tif (A[i][j] != 1) </span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tA[i][j] = -1;</span><br><span class=\"line\">\t\tdfs(A, i+1, j);</span><br><span class=\"line\">\t\tdfs(A, i-1, j);</span><br><span class=\"line\">\t\tdfs(A, i, j+1);</span><br><span class=\"line\">\t\tdfs(A, i, j-1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint numEnclaves(vector&lt;vector&lt;int&gt;&gt;&amp; A) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tif (A.empty()) return 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\trows = A.size();</span><br><span class=\"line\">\t\tcols = A[0].size();</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; rows; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; cols; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (i == 0 || j == 0 || i == rows-1 || j == cols-1)</span><br><span class=\"line\">\t\t\t\t\tdfs(A, i, j);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint ans = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; rows; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; cols; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (A[i][j] == 1)</span><br><span class=\"line\">\t\t\t\t\tans++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Time taken to reach all nodes or share information to all graph nodes:</strong><br> <a href=\"https://leetcode.com/problems/time-needed-to-inform-all-employees/\">https://leetcode.com/problems/time-needed-to-inform-all-employees/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tvoid dfs(unordered_map&lt;int, vector&lt;int&gt;&gt;&amp;hm, int i, vector&lt;int&gt;&amp; informTime, int &amp;res, int curr) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tcurr += informTime[i];</span><br><span class=\"line\">\t\tres = max(res, curr);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tfor (auto it = hm[i].begin(); it != hm[i].end(); it++)</span><br><span class=\"line\">\t\t\tdfs(hm, *it, informTime, res, curr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint numOfMinutes(int n, int headID, vector&lt;int&gt;&amp; manager, vector&lt;int&gt;&amp; informTime) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tunordered_map&lt;int, vector&lt;int&gt;&gt;hm;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tif (manager[i] != -1) hm[manager[i]].push_back(i);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint res = 0, curr = 0;</span><br><span class=\"line\">\t\tdfs(hm, headID, informTime, res, curr);</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>DFS from each unvisited node&#x2F;Island problems</strong><br> <a href=\"https://leetcode.com/problems/number-of-closed-islands/\">https://leetcode.com/problems/number-of-closed-islands/</a><br> <a href=\"https://leetcode.com/problems/number-of-islands/\">https://leetcode.com/problems/number-of-islands/</a><br> <a href=\"https://leetcode.com/problems/keys-and-rooms/\">https://leetcode.com/problems/keys-and-rooms/</a><br> <a href=\"https://leetcode.com/problems/max-area-of-island/\">https://leetcode.com/problems/max-area-of-island/</a><br> <a href=\"https://leetcode.com/problems/flood-fill/\">https://leetcode.com/problems/flood-fill/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tvoid dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int i, int j, int m, int n) &#123;</span><br><span class=\"line\">\t\tif (i &lt; 0 || i &gt;= m || j &lt; 0 || j &gt;= n) return;</span><br><span class=\"line\">\t\tif (grid[i][j] == &#x27;0&#x27; || visited[i][j]) return;</span><br><span class=\"line\">\t\tvisited[i][j] = true;</span><br><span class=\"line\">\t\tdfs(grid, visited, i+1, j, m, n);</span><br><span class=\"line\">\t\tdfs(grid, visited, i, j+1, m, n);</span><br><span class=\"line\">\t\tdfs(grid, visited, i-1, j, m, n);</span><br><span class=\"line\">\t\tdfs(grid, visited, i, j-1, m, n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\tint numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) &#123;</span><br><span class=\"line\">\t\tif (grid.empty()) return 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint m = grid.size();</span><br><span class=\"line\">\t\tint n = grid[0].size();</span><br><span class=\"line\">\t\tvector&lt;vector&lt;bool&gt;&gt;visited(m, vector&lt;bool&gt;(n, false));</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint res = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (grid[i][j] == &#x27;1&#x27; &amp;&amp; !visited[i][j]) &#123;</span><br><span class=\"line\">\t\t\t\t\tdfs(grid, visited, i, j, m, n);</span><br><span class=\"line\">\t\t\t\t\tres++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Cycle Find:</strong><br> <a href=\"https://leetcode.com/problems/find-eventual-safe-states/\">https://leetcode.com/problems/find-eventual-safe-states/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tbool dfs(vector&lt;vector&lt;int&gt;&gt;&amp; graph, int v, vector&lt;int&gt;&amp; dp) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tif (dp[v])</span><br><span class=\"line\">\t\t\treturn dp[v] == 1;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tdp[v] = -1;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tfor (auto it = graph[v].begin(); it != graph[v].end(); it++)</span><br><span class=\"line\">\t\t\tif (!dfs(graph, *it, dp))</span><br><span class=\"line\">\t\t\t\treturn false;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tdp[v] = 1;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tvector&lt;int&gt; eventualSafeNodes(vector&lt;vector&lt;int&gt;&gt;&amp; graph) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint V = graph.size();</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tvector&lt;int&gt;res;</span><br><span class=\"line\">\t\tvector&lt;int&gt;dp(V, 0);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; V; i++) &#123;    </span><br><span class=\"line\">\t\t\tif (dfs(graph, i, dp))</span><br><span class=\"line\">\t\t\t\tres.push_back(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p> };</p>\n</li>\n</ol>\n</li>\n<li><p><strong>Breadth First Search</strong></p>\n<ol>\n<li><p><strong>Shortest Path:</strong><br> <a href=\"https://leetcode.com/problems/01-matrix/\">https://leetcode.com/problems/01-matrix/</a><br> <a href=\"https://leetcode.com/problems/as-far-from-land-as-possible/\">https://leetcode.com/problems/as-far-from-land-as-possible/</a><br> <a href=\"https://leetcode.com/problems/rotting-oranges/\">https://leetcode.com/problems/rotting-oranges/</a><br> <a href=\"https://leetcode.com/problems/shortest-path-in-binary-matrix/\">https://leetcode.com/problems/shortest-path-in-binary-matrix/</a></p>\n<p> Start BFS from nodes from which shortest path is asked for.<br> Below is the sample BFS approach to find the path.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\tvector&lt;vector&lt;int&gt;&gt; updateMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (matrix.empty()) return matrix;</span><br><span class=\"line\">\t\tint rows = matrix.size();</span><br><span class=\"line\">\t\tint cols = matrix[0].size();</span><br><span class=\"line\">\t\tqueue&lt;pair&lt;int, int&gt;&gt;pq;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; rows; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; cols; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (matrix[i][j] == 0) &#123;</span><br><span class=\"line\">\t\t\t\t\tpq.push(&#123;i-1, j&#125;), pq.push(&#123;i+1, j&#125;), pq.push(&#123;i, j-1&#125;), pq.push(&#123;i, j+1&#125;); </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;vector&lt;bool&gt;&gt;visited(rows, vector&lt;bool&gt;(cols, false));</span><br><span class=\"line\">\t\tint steps = 0;</span><br><span class=\"line\">\t\twhile (!pq.empty()) &#123;</span><br><span class=\"line\">\t\t\tsteps++;</span><br><span class=\"line\">\t\t\tint size = pq.size();</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\tauto front = pq.front();</span><br><span class=\"line\">\t\t\t\tint l = front.first;</span><br><span class=\"line\">\t\t\t\tint r = front.second;</span><br><span class=\"line\">\t\t\t\tpq.pop();</span><br><span class=\"line\">\t\t\t\tif (l &gt;= 0 &amp;&amp; r &gt;= 0 &amp;&amp; l &lt; rows &amp;&amp; r &lt; cols &amp;&amp; !visited[l][r] &amp;&amp; matrix[l][r] == 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tvisited[l][r] = true;</span><br><span class=\"line\">\t\t\t\t\tmatrix[l][r] = steps;</span><br><span class=\"line\">\t\t\t\t\tpq.push(&#123;l-1, r&#125;), pq.push(&#123;l+1, r&#125;), pq.push(&#123;l, r-1&#125;), pq.push(&#123;l, r+1&#125;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn matrix;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>Graph coloring&#x2F;Bipartition</strong><br> <a href=\"https://leetcode.com/problems/possible-bipartition/\">https://leetcode.com/problems/possible-bipartition/</a><br> <a href=\"https://leetcode.com/problems/is-graph-bipartite/\">https://leetcode.com/problems/is-graph-bipartite/</a></p>\n<p> Problems asks to check if its possible to divide the graph nodes into 2 groups<br> Apply BFS for same. Below is a sample graph coloring approach.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tbool isBipartite(vector&lt;vector&lt;int&gt;&gt;&amp; graph) &#123;</span><br><span class=\"line\">\t\t\tint n = graph.size();</span><br><span class=\"line\">\t\t\tvector&lt;int&gt;color(n, -1);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t\tif (color[i] != -1) continue;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\t\tcolor[i] = 1;</span><br><span class=\"line\">\t\t\t\tqueue&lt;int&gt;q;</span><br><span class=\"line\">\t\t\t\tq.push(i);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\t\twhile (!q.empty()) &#123;</span><br><span class=\"line\">\t\t\t\t\tint t = q.front();</span><br><span class=\"line\">\t\t\t\t\tq.pop();</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\t\t\tfor (int j = 0; j &lt; graph[t].size(); j++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tif (color[graph[t][j]] == -1) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tcolor[graph[t][j]] = 1-color[t];</span><br><span class=\"line\">\t\t\t\t\t\t\tq.push(graph[t][j]);</span><br><span class=\"line\">\t\t\t\t\t\t&#125; else if (color[graph[t][j]] == color[t]) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\treturn false;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Topological Sort:</strong><br> Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0</p>\n<p> <a href=\"https://leetcode.com/problems/course-schedule/\">https://leetcode.com/problems/course-schedule/</a><br> <a href=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a></p>\n<p> Below is sample approach. Find if cycle is present, if not apply topological sort.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint V;</span><br><span class=\"line\">\tlist&lt;int&gt;*adj;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tbool isCyclicUtil(int v, vector&lt;bool&gt;&amp;visited, vector&lt;bool&gt;&amp;recStack) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tvisited[v] = true;</span><br><span class=\"line\">\t\trecStack[v] = true;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (auto it = adj[v].begin(); it != adj[v].end(); it++) &#123;</span><br><span class=\"line\">\t\t\tif (!visited[*it] &amp;&amp; isCyclicUtil(*it, visited, recStack))</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t\telse if (recStack[*it])</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\trecStack[v] = false;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tbool isCyclic() &#123;</span><br><span class=\"line\">\t\tvector&lt;bool&gt;visited(V, false);</span><br><span class=\"line\">\t\tvector&lt;bool&gt;recStack(V, false);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; V; i++) &#123;</span><br><span class=\"line\">\t\t\tif (isCyclicUtil(i, visited, recStack))</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid topologicalSortUtil(int v, vector&lt;bool&gt;&amp;visited, vector&lt;int&gt;&amp; res) &#123;</span><br><span class=\"line\">\t\tvisited[v] = true;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (auto it = adj[v].begin(); it != adj[v].end(); it++)</span><br><span class=\"line\">\t\t\tif (!visited[*it])</span><br><span class=\"line\">\t\t\t\ttopologicalSortUtil(*it, visited, res);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tres.push_back(v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvector&lt;int&gt;topologicalSort(int v) &#123;</span><br><span class=\"line\">\t\tvector&lt;int&gt;res;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tvector&lt;bool&gt;visited(V, false);</span><br><span class=\"line\">\t\ttopologicalSortUtil(v, visited, res);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; V; i++) &#123;</span><br><span class=\"line\">\t\t\tif (!visited[i])</span><br><span class=\"line\">\t\t\t\ttopologicalSortUtil(i, visited, res);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\tvector&lt;int&gt; findOrder(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) &#123;</span><br><span class=\"line\">\t\tV = numCourses;</span><br><span class=\"line\">\t\tadj = new list&lt;int&gt;[V];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tunordered_map&lt;int, vector&lt;int&gt;&gt;hm;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; prerequisites.size(); i++) &#123;</span><br><span class=\"line\">\t\t\tadj[prerequisites[i][0]].push_back(prerequisites[i][1]);</span><br><span class=\"line\">\t\t\thm[prerequisites[i][1]].push_back(prerequisites[i][0]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif (isCyclic()) return vector&lt;int&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tint i = 0;</span><br><span class=\"line\">\t\tfor (i = 0; i &lt; V; i++) &#123;</span><br><span class=\"line\">\t\t\tif (hm.find(i) == hm.end())</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn topologicalSort(i);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p> };</p>\n</li>\n<li><p><strong>Find Shortest Path (Dijkstraâ€™s&#x2F;Bellman Ford)</strong><br> <a href=\"https://leetcode.com/problems/network-delay-time/\">https://leetcode.com/problems/network-delay-time/</a></p>\n<p> <strong>Dijkstras and Bellman Ford:</strong></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tint networkDelayTime(vector&lt;vector&lt;int&gt;&gt;&amp; times, int N, int K) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tpriority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt;pq;</span><br><span class=\"line\">\t\t\tvector&lt;int&gt;dist(N+1, INT_MAX);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tpq.push(make_pair(0, K));</span><br><span class=\"line\">\t\t\tdist[K] = 0;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tunordered_map&lt;int, vector&lt;pair&lt;int, int&gt;&gt;&gt;hm;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; times.size(); i++)</span><br><span class=\"line\">\t\t\t\thm[times[i][0]].push_back(make_pair(times[i][1], times[i][2]));</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\twhile (!pq.empty()) &#123;</span><br><span class=\"line\">\t\t\t\tpair&lt;int, int&gt;p = pq.top();</span><br><span class=\"line\">\t\t\t\tpq.pop();</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tint u = p.second;</span><br><span class=\"line\">\t\t\t\tfor (auto it = hm[u].begin(); it != hm[u].end(); it++) &#123;</span><br><span class=\"line\">\t\t\t\t\tint v = it-&gt;first;</span><br><span class=\"line\">\t\t\t\t\tint w = it-&gt;second;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\tif (dist[v] &gt; dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tdist[v] = dist[u] + w;</span><br><span class=\"line\">\t\t\t\t\t\tpq.push(make_pair(dist[v], v));</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tint res = 0;</span><br><span class=\"line\">\t\t\tfor (int i = 1; i &lt;= N; i++)</span><br><span class=\"line\">\t\t\t\tres = max(res, dist[i]);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\treturn res == INT_MAX ? -1 : res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tclass Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tint networkDelayTime(vector&lt;vector&lt;int&gt;&gt;&amp; times, int N, int K) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tint n = times.size();</span><br><span class=\"line\">\t\t\tif (!n) return 0;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tvector&lt;int&gt;dist(N+1, INT_MAX);</span><br><span class=\"line\">\t\t\tint res = 0;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tdist[K] = 0;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; N; i++) &#123;</span><br><span class=\"line\">\t\t\t\tfor (int j = 0; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t\t\tint u = times[j][0];</span><br><span class=\"line\">\t\t\t\t\tint v = times[j][1];</span><br><span class=\"line\">\t\t\t\t\tint w = times[j][2];</span><br><span class=\"line\">\t\t\t\t\tif (dist[u] != INT_MAX &amp;&amp; dist[u] + w &lt; dist[v])</span><br><span class=\"line\">\t\t\t\t\t\tdist[v] = w + dist[u];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tfor (int i = 1; i &lt;= N; i++)</span><br><span class=\"line\">\t\t\t\tres = max(res, dist[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\treturn res == INT_MAX ? -1 : res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Complete List: Below are mostly list of problems (mostly medium level and may 1 or 2 easy) which are better to start practice with:<br>(Updated on 14th June â€˜20)</p>\n<p><strong>Union Find:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/friend-circles/\">https://leetcode.com/problems/friend-circles/</a></li>\n<li><a href=\"https://leetcode.com/problems/redundant-connection/\">https://leetcode.com/problems/redundant-connection/</a></li>\n<li><a href=\"https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/\">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a></li>\n<li><a href=\"https://leetcode.com/problems/number-of-operations-to-make-network-connected/\">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a></li>\n<li><a href=\"https://leetcode.com/problems/satisfiability-of-equality-equations/\">https://leetcode.com/problems/satisfiability-of-equality-equations/</a></li>\n<li><a href=\"https://leetcode.com/problems/accounts-merge/\">https://leetcode.com/problems/accounts-merge/</a></li>\n<li><a href=\"https://leetcode.com/problems/connecting-cities-with-minimum-cost/\">https://leetcode.com/problems/connecting-cities-with-minimum-cost/</a></li>\n</ol>\n<p><strong>DFS:</strong><br>DFS from boundary:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/surrounded-regions/\">https://leetcode.com/problems/surrounded-regions/</a></li>\n<li><a href=\"https://leetcode.com/problems/number-of-enclaves/\">https://leetcode.com/problems/number-of-enclaves/</a></li>\n</ol>\n<p>Shortest time:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/time-needed-to-inform-all-employees/\">https://leetcode.com/problems/time-needed-to-inform-all-employees/</a></li>\n</ol>\n<p>Islands Variants</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/number-of-closed-islands/\">https://leetcode.com/problems/number-of-closed-islands/</a></li>\n<li><a href=\"https://leetcode.com/problems/number-of-islands/\">https://leetcode.com/problems/number-of-islands/</a></li>\n<li><a href=\"https://leetcode.com/problems/keys-and-rooms/\">https://leetcode.com/problems/keys-and-rooms/</a></li>\n<li><a href=\"https://leetcode.com/problems/max-area-of-island/\">https://leetcode.com/problems/max-area-of-island/</a></li>\n<li><a href=\"https://leetcode.com/problems/flood-fill/\">https://leetcode.com/problems/flood-fill/</a></li>\n<li><a href=\"https://leetcode.com/problems/coloring-a-border/\">https://leetcode.com/problems/coloring-a-border/</a></li>\n</ol>\n<p>Hash&#x2F;DFS:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/employee-importance/\">https://leetcode.com/problems/employee-importance/</a></li>\n<li><a href=\"https://leetcode.com/problems/find-the-town-judge/\">https://leetcode.com/problems/find-the-town-judge/</a></li>\n</ol>\n<p>Cycle Find:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/find-eventual-safe-states/\">https://leetcode.com/problems/find-eventual-safe-states/</a></li>\n</ol>\n<p><strong>BFS:</strong><br>BFS for shortest path:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/01-matrix/\">https://leetcode.com/problems/01-matrix/</a></li>\n<li><a href=\"https://leetcode.com/problems/as-far-from-land-as-possible/\">https://leetcode.com/problems/as-far-from-land-as-possible/</a></li>\n<li><a href=\"https://leetcode.com/problems/rotting-oranges/\">https://leetcode.com/problems/rotting-oranges/</a></li>\n<li><a href=\"https://leetcode.com/problems/shortest-path-in-binary-matrix/\">https://leetcode.com/problems/shortest-path-in-binary-matrix/</a></li>\n</ol>\n<p><strong>Graph coloring:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/possible-bipartition/\">https://leetcode.com/problems/possible-bipartition/</a></li>\n<li><a href=\"https://leetcode.com/problems/is-graph-bipartite/\">https://leetcode.com/problems/is-graph-bipartite/</a></li>\n</ol>\n<p><strong>Topological Sort:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a></li>\n</ol>\n<p><strong>Shortest Path:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/network-delay-time/\">https://leetcode.com/problems/network-delay-time/</a></li>\n<li><a href=\"https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/\">https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/</a></li>\n<li><a href=\"https://leetcode.com/problems/cheapest-flights-within-k-stops/\">https://leetcode.com/problems/cheapest-flights-within-k-stops/</a></li>\n</ol>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "Graph"
            ]
        }
    ]
}