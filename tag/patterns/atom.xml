<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://samirpaul.in</id>
    <title>Samir Paul â€¢ Posts by &#34;patterns&#34; tag</title>
    <link href="https://samirpaul.in" />
    <updated>2023-08-05T20:52:53.890Z</updated>
    <category term="LeetCode" />
    <category term="geeksforgeeks" />
    <category term="blog" />
    <category term="coding" />
    <category term="computer-science" />
    <category term="Binary Search" />
    <category term="caching" />
    <category term="system-design" />
    <category term="design-interview" />
    <category term="preparation" />
    <category term="study-plan" />
    <category term="computer-networks" />
    <category term="computer-networks-notes" />
    <category term="projects" />
    <category term="tutorials" />
    <category term="list-of-project-based-tutorials" />
    <category term="curated-list" />
    <category term="dp" />
    <category term="embed-musicapp" />
    <category term="music" />
    <category term="embeded" />
    <category term="music-player" />
    <category term="Dynamic Programming" />
    <category term="Patterns" />
    <category term="programmable-search" />
    <category term="Graph" />
    <category term="distributed-systems" />
    <category term="two pointers problems" />
    <category term="Greedy" />
    <category term="DSAlgo" />
    <category term="dsa-in-python" />
    <category term="data-structures-and-algorithms" />
    <category term="technical-interview" />
    <category term="interview-questions" />
    <category term="python" />
    <category term="python-frameworks" />
    <category term="python-libraries" />
    <category term="python3" />
    <category term="file-compressor" />
    <category term="flask-application" />
    <category term="python-server" />
    <category term="pdfnet" />
    <category term="pdf-compression" />
    <category term="online-pdf-compressor" />
    <category term="pdfnetpython" />
    <category term="open-external-links" />
    <category term="javascript" />
    <category term="Operating System" />
    <category term="Placements" />
    <category term="OS" />
    <category term="project" />
    <category term="pygame" />
    <category term="python-game" />
    <category term="pyshooter" />
    <category term="shooter-game" />
    <category term="Python Cheat Sheet" />
    <category term="sql" />
    <category term="nosql" />
    <category term="sharding" />
    <category term="data-partitioning" />
    <category term="certificates" />
    <category term="udemy" />
    <category term="coursera" />
    <category term="datacamp" />
    <category term="sql-joins" />
    <category term="web-development" />
    <category term="lossless-data-compression" />
    <category term="online-file-compressor" />
    <category term="txt-compressor" />
    <category term="algorithm" />
    <category term="databases" />
    <category term="short-url" />
    <category term="url-shortner" />
    <category term="networking" />
    <entry>
        <id>https://samirpaul.in/posts/dynamic-programming-patterns/</id>
        <title>Dynamic Programming Patterns</title>
        <link rel="alternate" href="https://samirpaul.in/posts/dynamic-programming-patterns/"/>
        <content type="html">&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77569653/226705479-a4d6c0a3-0191-4d45-8bf6-597ffaa5de40.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt;
&lt;p&gt;Before starting the topic let me introduce myself. I am a Mobile Developer currently working in Warsaw and spending my free time for interview preparations. I started to prepare for interviews two years ago. At that time I should say I could not solve the two sum problem. Easy problems seemed to me like hard ones so most of the time I had to look at editorials and discuss section. Currently, I have solved ~800 problems and time to time participate in contests. I usually solve 3 problems in a contest and sometimes 4 problems. Ok, lets come back to the topic.&lt;/p&gt;
&lt;p&gt;Recently I have concentrated my attention on Dynamic Programming cause its one of the hardest topics in an interview prep. After solving ~140 problems in DP I have noticed that there are few patterns that can be found in different problems. So I did a research on that and find the following topics. I will not give complete ways how to solve problems but these patterns may be helpful in solving DP.&lt;/p&gt;
&lt;h1 id=&#34;Patterns&#34;&gt;&lt;a href=&#34;#Patterns&#34; class=&#34;headerlink&#34; title=&#34;Patterns&#34;&gt;&lt;/a&gt;Patterns&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Minimum-(Maximum)-Path-to-Reach-a-Target&#34;&gt;Minimum (Maximum) Path to Reach a Target&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#distinct-ways&#34;&gt;Distinct Ways&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Merging-Intervals&#34;&gt;Merging Intervals&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#DP-on-Strings&#34;&gt;DP on Strings&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Decision-Making&#34;&gt;Decision Making&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;Minimum-Maximum-Path-to-Reach-a-Target&#34;&gt;&lt;a href=&#34;#Minimum-Maximum-Path-to-Reach-a-Target&#34; class=&#34;headerlink&#34; title=&#34;Minimum (Maximum) Path to Reach a Target&#34;&gt;&lt;/a&gt;Minimum (Maximum) Path to Reach a Target&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Problem list: &lt;a href=&#34;https://leetcode.com/list/55ac4kuc&#34;&gt;https://leetcode.com/list/55ac4kuc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generate problem statement for this pattern&lt;/p&gt;
&lt;h3 id=&#34;Statement&#34;&gt;&lt;a href=&#34;#Statement&#34; class=&#34;headerlink&#34; title=&#34;Statement&#34;&gt;&lt;/a&gt;Statement&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a target find minimum (maximum) cost &amp;#x2F; path &amp;#x2F; sum to reach the target.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Approach&#34;&gt;&lt;a href=&#34;#Approach&#34; class=&#34;headerlink&#34; title=&#34;Approach&#34;&gt;&lt;/a&gt;Approach&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;routes[i] = min(routes[i-1], routes[i-2], ... , routes[i-k]) + cost[i]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Generate optimal solutions for all values in the target and return the value for the target.&lt;/p&gt;
&lt;h3 id=&#34;Top-Down&#34;&gt;&lt;a href=&#34;#Top-Down&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int j = 0; j &amp;lt; ways.size(); ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = min(result, topDown(target - ways[j]) + cost/ path / sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[/*state parameters*/] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up&#34;&gt;&lt;a href=&#34;#Bottom-Up&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= target; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 0; j &amp;lt; ways.size(); ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (ways[j] &amp;lt;= i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i] = min(dp[i], dp[i - ways[j]] + cost / path / sum) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[target]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Similar-Problems&#34;&gt;&lt;a href=&#34;#Similar-Problems&#34; class=&#34;headerlink&#34; title=&#34;Similar Problems&#34;&gt;&lt;/a&gt;Similar Problems&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/min-cost-climbing-stairs/&#34;&gt;746. Min Cost Climbing Stairs&lt;/a&gt; &lt;code&gt;Easy&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-1&#34;&gt;&lt;a href=&#34;#Top-Down-1&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int result = min(minCost(n-1, cost, memo), minCost(n-2, cost, memo)) + (n == cost.size() ? 0 : cost[n]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[n] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-1&#34;&gt;&lt;a href=&#34;#Bottom-Up-1&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   dp[i] = min(dp[i-1], dp[i-2]) + (i == n ? 0 : cost[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[n]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-path-sum/&#34;&gt;64. Minimum Path Sum&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-2&#34;&gt;&lt;a href=&#34;#Top-Down-2&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int result = min(pathSum(i+1, j, grid, memo), pathSum(i, j+1, grid, memo)) + grid[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[i][j] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-2&#34;&gt;&lt;a href=&#34;#Bottom-Up-2&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt; n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 1; j &amp;lt; m; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return grid[n-1][m-1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change/&#34;&gt;322. Coin Change&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-3&#34;&gt;&lt;a href=&#34;#Top-Down-3&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 0; i &amp;lt; coins.size(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (coins[i] &amp;lt;= target) &amp;#123; // check validity of a sub-problem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result = min(ans, CoinChange(target - coins[i], coins) + 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[target] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-3&#34;&gt;&lt;a href=&#34;#Bottom-Up-3&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int j = 1; j &amp;lt;= amount; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int i = 0; i &amp;lt; coins.size(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (coins[i] &amp;lt;= j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[j] = min(dp[j], dp[j - coins[i]] + 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-falling-path-sum/&#34;&gt;931. Minimum Falling Path Sum&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-for-tickets/&#34;&gt;983. Minimum Cost For Tickets&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/2-keys-keyboard/&#34;&gt;650. 2 Keys Keyboard&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/perfect-squares/&#34;&gt;279. Perfect Squares&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/last-stone-weight-ii/&#34;&gt;1049. Last Stone Weight II&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/triangle/&#34;&gt;120. Triangle&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/ones-and-zeroes/&#34;&gt;474. Ones and Zeroes&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/maximal-square/&#34;&gt;221. Maximal Square&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change/&#34;&gt;322. Coin Change&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/&#34;&gt;1240. Tiling a Rectangle with the Fewest Squares&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/dungeon-game/&#34;&gt;174. Dungeon Game&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-number-of-refueling-stops/&#34;&gt;871. Minimum Number of Refueling Stops&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;Distinct-Ways&#34;&gt;&lt;a href=&#34;#Distinct-Ways&#34; class=&#34;headerlink&#34; title=&#34;Distinct Ways&#34;&gt;&lt;/a&gt;Distinct Ways&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Problem List: &lt;a href=&#34;https://leetcode.com/list/55ajm50i&#34;&gt;https://leetcode.com/list/55ajm50i&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generate problem statement for this pattern&lt;/p&gt;
&lt;h3 id=&#34;Statement-1&#34;&gt;&lt;a href=&#34;#Statement-1&#34; class=&#34;headerlink&#34; title=&#34;Statement&#34;&gt;&lt;/a&gt;Statement&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a target find a number of distinct ways to reach the target.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Approach-1&#34;&gt;&lt;a href=&#34;#Approach-1&#34; class=&#34;headerlink&#34; title=&#34;Approach&#34;&gt;&lt;/a&gt;Approach&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Sum all possible ways to reach the current state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;routes[i] = routes[i-1] + routes[i-2], ... , + routes[i-k]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Generate sum for all values in the target and return the value for the target.&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-4&#34;&gt;&lt;a href=&#34;#Top-Down-4&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int j = 0; j &amp;lt; ways.size(); ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result += topDown(target - ways[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[/*state parameters*/] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-4&#34;&gt;&lt;a href=&#34;#Bottom-Up-4&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= target; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 0; j &amp;lt; ways.size(); ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (ways[j] &amp;lt;= i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i] += dp[i - ways[j]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[target]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Similar-Problems-1&#34;&gt;&lt;a href=&#34;#Similar-Problems-1&#34; class=&#34;headerlink&#34; title=&#34;Similar Problems&#34;&gt;&lt;/a&gt;Similar Problems&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/climbing-stairs/&#34;&gt;70. Climbing Stairs&lt;/a&gt; &lt;code&gt;Easy&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-5&#34;&gt;&lt;a href=&#34;#Top-Down-5&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int result = climbStairs(n-1, memo) + climbStairs(n-2, memo); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[n] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-5&#34;&gt;&lt;a href=&#34;#Bottom-Up-5&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int stair = 2; stair &amp;lt;= n; ++stair) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int step = 1; step &amp;lt;= 2; ++step) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       dp[stair] += dp[stair-step];   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/unique-paths/&#34;&gt;62. Unique Paths&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-6&#34;&gt;&lt;a href=&#34;#Top-Down-6&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int result = UniquePaths(x-1, y) + UniquePaths(x, y-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[x][y] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-6&#34;&gt;&lt;a href=&#34;#Bottom-Up-6&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt; m; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 1; j &amp;lt; n; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       dp[i][j] = dp[i][j-1] + dp[i-1][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&#34;&gt;1155. Number of Dice Rolls With Target Sum&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int rep = 1; rep &amp;lt;= d; ++rep) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   vector&amp;lt;int&amp;gt; new_ways(target+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int already = 0; already &amp;lt;= target; ++already) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       for (int pipe = 1; pipe &amp;lt;= f; ++pipe) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           if (already - pipe &amp;gt;= 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               new_ways[already] += ways[already - pipe];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               new_ways[already] %= mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ways = new_ways;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some questions point out the number of repetitions, in that case, add one more loop to simulate every repetition.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/knight-probability-in-chessboard/&#34;&gt;688. Knight Probability in Chessboard&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/target-sum/&#34;&gt;494. Target Sum&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/combination-sum-iv/&#34;&gt;377. Combination Sum IV&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/knight-dialer/&#34;&gt;935. Knight Dialer&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/dice-roll-simulation/&#34;&gt;1223. Dice Roll Simulation&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-equal-subset-sum/&#34;&gt;416. Partition Equal Subset Sum&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/soup-servings/&#34;&gt;808. Soup Servings&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/domino-and-tromino-tiling/&#34;&gt;790. Domino and Tromino Tiling&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/&#34;&gt;801. Minimum Swaps To Make Sequences Increasing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&#34;&gt;673. Number of Longest Increasing Subsequence&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/unique-paths-ii/&#34;&gt;63. Unique Paths II&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/out-of-boundary-paths/&#34;&gt;576. Out of Boundary Paths&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/&#34;&gt;1269. Number of Ways to Stay in the Same Place After Some Steps&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/count-vowels-permutation/&#34;&gt;1220. Count Vowels Permutation&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;Merging-Intervals&#34;&gt;&lt;a href=&#34;#Merging-Intervals&#34; class=&#34;headerlink&#34; title=&#34;Merging Intervals&#34;&gt;&lt;/a&gt;Merging Intervals&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Problem List: &lt;a href=&#34;https://leetcode.com/list/55aj8s16&#34;&gt;https://leetcode.com/list/55aj8s16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generate problem statement for this pattern&lt;/p&gt;
&lt;h3 id=&#34;Statement-2&#34;&gt;&lt;a href=&#34;#Statement-2&#34; class=&#34;headerlink&#34; title=&#34;Statement&#34;&gt;&lt;/a&gt;Statement&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Approach-2&#34;&gt;&lt;a href=&#34;#Approach-2&#34; class=&#34;headerlink&#34; title=&#34;Approach&#34;&gt;&lt;/a&gt;Approach&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Find all optimal solutions for every interval and return the best possible answer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// from i to j&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Get the best from the left and right sides and add a solution for the current position.&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-7&#34;&gt;&lt;a href=&#34;#Top-Down-7&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int k = i; k &amp;lt;= j; ++k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = max(result, topDown(nums, i, k-1) + result[k] + topDown(nums, k+1, j));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[/*state parameters*/] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-7&#34;&gt;&lt;a href=&#34;#Bottom-Up-7&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for(int l = 1; l&amp;lt;n; l++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for(int i = 0; i&amp;lt;n-l; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       int j = i+l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       for(int k = i; k&amp;lt;j; k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[0][n-1];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for(int l = 1; l&amp;lt;n; l++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for(int i = 0; i&amp;lt;n-l; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       int j = i+l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       for(int k = i; k&amp;lt;j; k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[0][n-1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Similar-Problems-2&#34;&gt;&lt;a href=&#34;#Similar-Problems-2&#34; class=&#34;headerlink&#34; title=&#34;Similar Problems&#34;&gt;&lt;/a&gt;Similar Problems&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&#34;&gt;1130. Minimum Cost Tree From Leaf Values&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int l = 1; l &amp;lt; n; ++l) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int i = 0; i &amp;lt; n - l; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       int j = i + l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       dp[i][j] = INT_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       for (int k = i; k &amp;lt; j; ++k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxs[i][k] * maxs[k+1][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/unique-binary-search-trees/&#34;&gt;96. Unique Binary Search Trees&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&#34;&gt;1039. Minimum Score Triangulation of Polygon&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-boxes/&#34;&gt;546. Remove Boxes&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-to-merge-stones/&#34;&gt;1000. Minimum Cost to Merge Stones&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/burst-balloons/&#34;&gt;312. Burst Balloons&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-8&#34;&gt;&lt;a href=&#34;#Top-Down-8&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int k = i; k &amp;lt;= j; ++k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = max(result, topDown(nums, i, k-1, memo) + (i-1 &amp;gt;= 0 ? nums[i-1] : 1) * nums[k] * (j+1 &amp;lt; nums.size() ? nums[j+1] : 1) + topDown(nums, k+1, j, memo));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[i][j] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-8&#34;&gt;&lt;a href=&#34;#Bottom-Up-8&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for(int l = 1; l &amp;lt; n; l++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 0; i &amp;lt; n-l; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int j = i+l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int k = i; k &amp;lt;= j; k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp[i][j] = max(dp[i][j], (((k&amp;gt;i &amp;amp;&amp;amp; k&amp;gt;0) ? dp[i][k-1] : 0) + (i&amp;gt;0 ? nums[i-1] : 1) * nums[k] * (j&amp;lt;n-1 ? nums[j+1] : 1) + ((k&amp;lt;j &amp;amp;&amp;amp; k&amp;lt;n-1) ? dp[k+1][j] : 0)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[0][n-1];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/guess-number-higher-or-lower-ii/&#34;&gt;375. Guess Number Higher or Lower II&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;DP-on-Strings&#34;&gt;&lt;a href=&#34;#DP-on-Strings&#34; class=&#34;headerlink&#34; title=&#34;DP on Strings&#34;&gt;&lt;/a&gt;DP on Strings&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Problem List: &lt;a href=&#34;https://leetcode.com/list/55afh7m7&#34;&gt;https://leetcode.com/list/55afh7m7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;General problem statement for this pattern can vary but most of the time you are given two strings where lengths of those strings are not big&lt;/p&gt;
&lt;h3 id=&#34;Statement-3&#34;&gt;&lt;a href=&#34;#Statement-3&#34; class=&#34;headerlink&#34; title=&#34;Statement&#34;&gt;&lt;/a&gt;Statement&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given two strings &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;, return &lt;code&gt;some result&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Approach-3&#34;&gt;&lt;a href=&#34;#Approach-3&#34; class=&#34;headerlink&#34; title=&#34;Approach&#34;&gt;&lt;/a&gt;Approach&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Most of the problems on this pattern requires a solution that can be accepted in O(n^2) complexity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// i - indexing string s1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// j - indexing string s2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (s1[i-1] == s2[j-1]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = /*code*/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = /*code*/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are given one string &lt;code&gt;s&lt;/code&gt; the approach may little vary&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int l = 1; l &amp;lt; n; ++l) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int i = 0; i &amp;lt; n-l; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       int j = i + l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (s[i] == s[j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = /*code*/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = /*code*/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-common-subsequence/&#34;&gt;1143. Longest Common Subsequence&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (text1[i-1] == text2[j-1]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = dp[i-1][j-1] + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = max(dp[i-1][j], dp[i][j-1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/palindromic-substrings/&#34;&gt;647. Palindromic Substrings&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int l = 1; l &amp;lt; n; ++l) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int i = 0; i &amp;lt; n-l; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       int j = i + l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (s[i] == s[j] &amp;amp;&amp;amp; dp[i+1][j-1] == j-i-1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = dp[i+1][j-1] + 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-palindromic-subsequence/&#34;&gt;516. Longest Palindromic Subsequence&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/shortest-common-supersequence/&#34;&gt;1092. Shortest Common Supersequence&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/edit-distance/&#34;&gt;72. Edit Distance&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/distinct-subsequences/&#34;&gt;115. Distinct Subsequences&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&#34;&gt;712. Minimum ASCII Delete Sum for Two Strings&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-palindromic-substring/&#34;&gt;5. Longest Palindromic Substring&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;Decision-Making&#34;&gt;&lt;a href=&#34;#Decision-Making&#34; class=&#34;headerlink&#34; title=&#34;Decision Making&#34;&gt;&lt;/a&gt;Decision Making&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Problem List: &lt;a href=&#34;https://leetcode.com/list/55af7bu7&#34;&gt;https://leetcode.com/list/55af7bu7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The general problem statement for this pattern is forgiven situation decide whether to use or not to use the current state. So, the problem requires you to make a decision at a current state.&lt;/p&gt;
&lt;h3 id=&#34;Statement-4&#34;&gt;&lt;a href=&#34;#Statement-4&#34; class=&#34;headerlink&#34; title=&#34;Statement&#34;&gt;&lt;/a&gt;Statement&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a set of values find an answer with an option to choose or ignore the current value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Approach-4&#34;&gt;&lt;a href=&#34;#Approach-4&#34; class=&#34;headerlink&#34; title=&#34;Approach&#34;&gt;&lt;/a&gt;Approach&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;If you decide to choose the current value use the previous result where the value was ignored; vice-versa, if you decide to ignore the current value use previous result where value was used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// i - indexing a set of values&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// j - options to ignore j values&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt; n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 1; j &amp;lt;= k; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       dp[i][j] = max(&amp;#123;dp[i][j], dp[i-1][j] + arr[i], dp[i-1][j-1]&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       dp[i][j-1] = max(&amp;#123;dp[i][j-1], dp[i-1][j-1] + arr[i], arr[i]&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/house-robber/&#34;&gt;198. House Robber&lt;/a&gt; &lt;code&gt;Easy&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt; n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   dp[i][1] = max(dp[i-1][0] + nums[i], dp[i-1][1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   dp[i][0] = dp[i-1][1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&#34;&gt;121. Best Time to Buy and Sell Stock&lt;/a&gt; &lt;code&gt;Easy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&#34;&gt;714. Best Time to Buy and Sell Stock with Transaction Fee&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&#34;&gt;309. Best Time to Buy and Sell Stock with Cooldown&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&#34;&gt;123. Best Time to Buy and Sell Stock III&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&#34;&gt;188. Best Time to Buy and Sell Stock IV&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I hope these tips will be helpful ðŸ˜Š&lt;/p&gt;
</content>
        <category term="blog" />
        <category term="coding" />
        <category term="computer-science" />
        <category term="Dynamic Programming" />
        <category term="Patterns" />
        <updated>2023-08-05T20:52:53.890Z</updated>
    </entry>
</feed>
