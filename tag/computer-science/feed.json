{
    "version": "https://jsonfeed.org/version/1",
    "title": "Samir Paul • All posts by \"computer-science\" tag",
    "description": "Software Engineer",
    "home_page_url": "https://samirpaul.in",
    "items": [
        {
            "id": "https://samirpaul.in/posts/complete-computer-science-study-plan-to-become-a-software-engineer/",
            "url": "https://samirpaul.in/posts/complete-computer-science-study-plan-to-become-a-software-engineer/",
            "title": "Complete Computer Science Study Plan to Become a Software Engineer",
            "date_published": "2023-08-15T04:24:52.000Z",
            "content_html": "<h2 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h2><h3 id=\"The-Study-Plan\"><a href=\"#The-Study-Plan\" class=\"headerlink\" title=\"The Study Plan\"></a>The Study Plan</h3><ul>\n<li><a href=\"#\">What is it?</a></li>\n<li><a href=\"#why-use-it\">Why use it?</a></li>\n<li><a href=\"#how-to-use-it\">How to use it</a></li>\n<li><a href=\"#dont-feel-you-arent-smart-enough\">Don’t feel you aren’t smart enough</a></li>\n<li><a href=\"#a-note-about-video-resources\">A Note About Video Resources</a></li>\n<li><a href=\"#choose-a-programming-language\">Choose a Programming Language</a></li>\n<li><a href=\"#books-for-data-structures-and-algorithms\">Books for Data Structures and Algorithms</a></li>\n<li><a href=\"#interview-prep-books\">Interview Prep Books</a></li>\n<li><a href=\"#dont-make-my-mistakes\">Don’t Make My Mistakes</a></li>\n<li><a href=\"#what-you-wont-see-covered\">What you Won’t See Covered</a></li>\n<li><a href=\"#the-daily-plan\">The Daily Plan</a></li>\n<li><a href=\"#coding-question-practice\">Coding Question Practice</a></li>\n<li><a href=\"#coding-problems\">Coding Problems</a></li>\n</ul>\n<h3 id=\"Topics-of-Study\"><a href=\"#Topics-of-Study\" class=\"headerlink\" title=\"Topics of Study\"></a>Topics of Study</h3><ul>\n<li><a href=\"#algorithmic-complexity--big-o--asymptotic-analysis\">Algorithmic complexity &#x2F; Big-O &#x2F; Asymptotic analysis</a></li>\n<li><a href=\"#data-structures\">Data Structures</a><ul>\n<li><a href=\"#arrays\">Arrays</a></li>\n<li><a href=\"#linked-lists\">Linked Lists</a></li>\n<li><a href=\"#stack\">Stack</a></li>\n<li><a href=\"#queue\">Queue</a></li>\n<li><a href=\"#hash-table\">Hash table</a></li>\n</ul>\n</li>\n<li><a href=\"#more-knowledge\">More Knowledge</a><ul>\n<li><a href=\"#binary-search\">Binary search</a></li>\n<li><a href=\"#bitwise-operations\">Bitwise operations</a></li>\n</ul>\n</li>\n<li><a href=\"#trees\">Trees</a><ul>\n<li><a href=\"#trees---intro\">Trees - Intro</a></li>\n<li><a href=\"#binary-search-trees-bsts\">Binary search trees: BSTs</a></li>\n<li><a href=\"#heap--priority-queue--binary-heap\">Heap &#x2F; Priority Queue &#x2F; Binary Heap</a></li>\n<li>balanced search trees (general concept, not details)</li>\n<li>traversals: preorder, inorder, postorder, BFS, DFS</li>\n</ul>\n</li>\n<li><a href=\"#sorting\">Sorting</a><ul>\n<li>selection</li>\n<li>insertion</li>\n<li>heapsort</li>\n<li>quicksort</li>\n<li>merge sort</li>\n</ul>\n</li>\n<li><a href=\"#graphs\">Graphs</a><ul>\n<li>directed</li>\n<li>undirected</li>\n<li>adjacency matrix</li>\n<li>adjacency list</li>\n<li>traversals: BFS, DFS</li>\n</ul>\n</li>\n<li><a href=\"#even-more-knowledge\">Even More Knowledge</a><ul>\n<li><a href=\"#recursion\">Recursion</a></li>\n<li><a href=\"#dynamic-programming\">Dynamic Programming</a></li>\n<li><a href=\"#design-patterns\">Design Patterns</a></li>\n<li><a href=\"#combinatorics-n-choose-k--probability\">Combinatorics (n choose k) &amp; Probability</a></li>\n<li><a href=\"#np-np-complete-and-approximation-algorithms\">NP, NP-Complete and Approximation Algorithms</a></li>\n<li><a href=\"#how-computers-process-a-program\">How computers process a program</a></li>\n<li><a href=\"#caches\">Caches</a></li>\n<li><a href=\"#processes-and-threads\">Processes and Threads</a></li>\n<li><a href=\"#testing\">Testing</a></li>\n<li><a href=\"#string-searching--manipulations\">String searching &amp; manipulations</a></li>\n<li><a href=\"#tries\">Tries</a></li>\n<li><a href=\"#floating-point-numbers\">Floating Point Numbers</a></li>\n<li><a href=\"#unicode\">Unicode</a></li>\n<li><a href=\"#endianness\">Endianness</a></li>\n<li><a href=\"#networking\">Networking</a></li>\n</ul>\n</li>\n<li><a href=\"#final-review\">Final Review</a></li>\n</ul>\n<h3 id=\"Getting-the-Job\"><a href=\"#Getting-the-Job\" class=\"headerlink\" title=\"Getting the Job\"></a>Getting the Job</h3><ul>\n<li><a href=\"#update-your-resume\">Update Your Resume</a></li>\n<li><a href=\"#find-a-job\">Find a Job</a></li>\n<li><a href=\"#interview-process--general-interview-prep\">Interview Process &amp; General Interview Prep</a></li>\n<li><a href=\"#be-thinking-of-for-when-the-interview-comes\">Be thinking of for when the interview comes</a></li>\n<li><a href=\"#have-questions-for-the-interviewer\">Have questions for the interviewer</a></li>\n<li><a href=\"#once-youve-got-the-job\">Once You’ve Got The Job</a></li>\n</ul>\n<p><strong>—————- Everything below this point is optional —————-</strong></p>\n<h3 id=\"Optional-Extra-Topics-Resources\"><a href=\"#Optional-Extra-Topics-Resources\" class=\"headerlink\" title=\"Optional Extra Topics &amp; Resources\"></a>Optional Extra Topics &amp; Resources</h3><ul>\n<li><a href=\"#additional-books\">Additional Books</a></li>\n<li><a href=\"#system-design-scalability-data-handling\">System Design, Scalability, Data Handling</a> (if you have 4+ years experience)</li>\n<li><a href=\"#additional-learning\">Additional Learning</a><ul>\n<li><a href=\"#compilers\">Compilers</a></li>\n<li><a href=\"#emacs-and-vim\">Emacs and vi(m)</a></li>\n<li><a href=\"#unix-command-line-tools\">Unix command line tools</a></li>\n<li><a href=\"#information-theory-videos\">Information theory</a></li>\n<li><a href=\"#parity--hamming-code-videos\">Parity &amp; Hamming Code</a></li>\n<li><a href=\"#entropy\">Entropy</a></li>\n<li><a href=\"#cryptography\">Cryptography</a></li>\n<li><a href=\"#compression\">Compression</a></li>\n<li><a href=\"#computer-security\">Computer Security</a></li>\n<li><a href=\"#garbage-collection\">Garbage collection</a></li>\n<li><a href=\"#parallel-programming\">Parallel Programming</a></li>\n<li><a href=\"#messaging-serialization-and-queueing-systems\">Messaging, Serialization, and Queueing Systems</a></li>\n<li><a href=\"#a\">A*</a></li>\n<li><a href=\"#fast-fourier-transform\">Fast Fourier Transform</a></li>\n<li><a href=\"#bloom-filter\">Bloom Filter</a></li>\n<li><a href=\"#hyperloglog\">HyperLogLog</a></li>\n<li><a href=\"#locality-sensitive-hashing\">Locality-Sensitive Hashing</a></li>\n<li><a href=\"#van-emde-boas-trees\">van Emde Boas Trees</a></li>\n<li><a href=\"#augmented-data-structures\">Augmented Data Structures</a></li>\n<li><a href=\"#balanced-search-trees\">Balanced search trees</a><ul>\n<li>AVL trees</li>\n<li>Splay trees</li>\n<li>Red&#x2F;black trees</li>\n<li>2-3 search trees</li>\n<li>2-3-4 Trees (aka 2-4 trees)</li>\n<li>N-ary (K-ary, M-ary) trees</li>\n<li>B-Trees</li>\n</ul>\n</li>\n<li><a href=\"#k-d-trees\">k-D Trees</a></li>\n<li><a href=\"#skip-lists\">Skip lists</a></li>\n<li><a href=\"#network-flows\">Network Flows</a></li>\n<li><a href=\"#disjoint-sets--union-find\">Disjoint Sets &amp; Union Find</a></li>\n<li><a href=\"#math-for-fast-processing\">Math for Fast Processing</a></li>\n<li><a href=\"#treap\">Treap</a></li>\n<li><a href=\"#linear-programming-videos\">Linear Programming</a></li>\n<li><a href=\"#geometry-convex-hull-videos\">Geometry, Convex hull</a></li>\n<li><a href=\"#discrete-math\">Discrete math</a></li>\n</ul>\n</li>\n<li><a href=\"#additional-detail-on-some-subjects\">Additional Detail on Some Subjects</a></li>\n<li><a href=\"#video-series\">Video Series</a></li>\n<li><a href=\"#computer-science-courses\">Computer Science Courses</a></li>\n<li><a href=\"#papers\">Papers</a></li>\n</ul>\n<hr>\n<h2 id=\"Why-use-it\"><a href=\"#Why-use-it\" class=\"headerlink\" title=\"Why use it?\"></a>Why use it?</h2><p>If you want to work as a software engineer for a large company, these are the things you have to know.</p>\n<p>If you missed out on getting a degree in computer science, like I did, this will catch you up and save four years of your life.</p>\n<p>When I started this project, I didn’t know a stack from a heap, didn’t know Big-O anything, or anything about trees, or how to<br>traverse a graph. If I had to code a sorting algorithm, I can tell ya it would have been terrible.<br>Every data structure I had ever used was built into the language, and I didn’t know how they worked<br>under the hood at all. I never had to manage memory unless a process I was running would give an “out of<br>memory” error, and then I’d have to find a workaround. I used a few multidimensional arrays in my life and<br>thousands of associative arrays, but I never created data structures from scratch.</p>\n<p>It’s a long plan. It may take you months. If you are familiar with a lot of this already it will take you a lot less time.</p>\n<h2 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" class=\"headerlink\" title=\"How to use it\"></a>How to use it</h2><p>Everything below is an outline, and you should tackle the items in order from top to bottom.</p>\n<p>I’m using GitHub’s special markdown flavor, including tasks lists to track progress.</p>\n<ul>\n<li><a href=\"https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown\">More about GitHub-flavored markdown</a></li>\n</ul>\n<h3 id=\"If-you-don’t-want-to-use-git\"><a href=\"#If-you-don’t-want-to-use-git\" class=\"headerlink\" title=\"If you don’t want to use git\"></a>If you don’t want to use git</h3><p>On this page, click the Code button near the top, then click “Download ZIP”. Unzip the file and you can work with the text files.</p>\n<p>If you’re open in a code editor that understands markdown, you’ll see everything formatted nicely.</p>\n<p><img src=\"https://d3j2pkmjtin6ou.cloudfront.net/how-to-download-as-zip.png\" alt=\"How to download the repo as a zip file\"></p>\n<h3 id=\"If-you’re-comfortable-with-git\"><a href=\"#If-you’re-comfortable-with-git\" class=\"headerlink\" title=\"If you’re comfortable with git\"></a>If you’re comfortable with git</h3><p>Create a new branch so you can check items like this, just put an x in the brackets: [x]</p>\n<ol>\n<li><p><em><strong>Fork the GitHub repo:</strong></em> <code>https://github.com/jwasham/coding-interview-university</code> by clicking on the Fork button.</p>\n<p> <img src=\"https://d3j2pkmjtin6ou.cloudfront.net/fork-button.png\" alt=\"Fork the GitHub repo\"></p>\n</li>\n<li><p>Clone to your local repo:</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:&lt;your_github_username&gt;/coding-interview-university.git</span><br><span class=\"line\">cd coding-interview-university</span><br><span class=\"line\">git checkout -b progress</span><br><span class=\"line\">git remote add jwasham https://github.com/jwasham/coding-interview-university</span><br><span class=\"line\">git fetch --all</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mark all boxes with X after you completed your changes:</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;Marked x&quot;</span><br><span class=\"line\">git rebase jwasham/main</span><br><span class=\"line\">git push --set-upstream origin progress</span><br><span class=\"line\">git push --force</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Don’t-feel-you-aren’t-smart-enough\"><a href=\"#Don’t-feel-you-aren’t-smart-enough\" class=\"headerlink\" title=\"Don’t feel you aren’t smart enough\"></a>Don’t feel you aren’t smart enough</h2><ul>\n<li>Successful software engineers are smart, but many have an insecurity that they aren’t smart enough.</li>\n<li>Following videos may help you overcome this insecurity:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=0SARbwvhupQ\">The myth of the Genius Programmer</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=1i8ylq4j_EY\">It’s Dangerous to Go Alone: Battling the Invisible Monsters in Tech</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"A-Note-About-Video-Resources\"><a href=\"#A-Note-About-Video-Resources\" class=\"headerlink\" title=\"A Note About Video Resources\"></a>A Note About Video Resources</h2><p>Some videos are available only by enrolling in a Coursera or EdX class. These are called MOOCs.<br>Sometimes the classes are not in session so you have to wait a couple of months, so you have no access.</p>\n<p>It would be great to replace the online course resources with free and always-available public sources,<br>such as YouTube videos (preferably university lectures), so that you people can study these anytime,<br>not just when a specific online course is in session.</p>\n<h2 id=\"Choose-a-Programming-Language\"><a href=\"#Choose-a-Programming-Language\" class=\"headerlink\" title=\"Choose a Programming Language\"></a>Choose a Programming Language</h2><p>You’ll need to choose a programming language for the coding interviews you do,<br>but you’ll also need to find a language that you can use to study computer science concepts.</p>\n<p>Preferably the language would be the same, so that you only need to be proficient in one.</p>\n<h3 id=\"For-this-Study-Plan\"><a href=\"#For-this-Study-Plan\" class=\"headerlink\" title=\"For this Study Plan\"></a>For this Study Plan</h3><p>When I did the study plan, I used 2 languages for most of it: C and Python</p>\n<ul>\n<li>C: Very low level. Allows you to deal with pointers and memory allocation&#x2F;deallocation, so you feel the data structures<br>  and algorithms in your bones. In higher level languages like Python or Java, these are hidden from you. In day to day work, that’s terrific,<br>  but when you’re learning how these low-level data structures are built, it’s great to feel close to the metal.<ul>\n<li>C is everywhere. You’ll see examples in books, lectures, videos, <em>everywhere</em> while you’re studying.</li>\n<li><a href=\"https://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628\">The C Programming Language, Vol 2</a><ul>\n<li>This is a short book, but it will give you a great handle on the C language and if you practice it a little<br>  you’ll quickly get proficient. Understanding C helps you understand how programs and memory work.</li>\n<li>You don’t need to go super deep in the book (or even finish it). Just get to where you’re comfortable reading and writing in C.</li>\n<li><a href=\"https://github.com/lekkas/c-algorithms\">Answers to questions in the book</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Python: Modern and very expressive, I learned it because it’s just super useful and also allows me to write less code in an interview.</li>\n</ul>\n<p>This is my preference. You do what you like, of course.</p>\n<p>You may not need it, but here are some sites for learning a new language:</p>\n<ul>\n<li><a href=\"https://exercism.org/tracks\">Exercism</a></li>\n<li><a href=\"http://www.codewars.com/\">Codewars</a></li>\n<li><a href=\"https://www.hackerearth.com/for-developers/\">HackerEarth</a></li>\n<li><a href=\"https://www.scaler.com/topics/\">Scaler Topics (Java, C++)</a></li>\n</ul>\n<h3 id=\"For-your-Coding-Interview\"><a href=\"#For-your-Coding-Interview\" class=\"headerlink\" title=\"For your Coding Interview\"></a>For your Coding Interview</h3><p>You can use a language you are comfortable in to do the coding part of the interview, but for large companies, these are solid choices:</p>\n<ul>\n<li>C++</li>\n<li>Java</li>\n<li>Python</li>\n</ul>\n<p>You could also use these, but read around first. There may be caveats:</p>\n<ul>\n<li>JavaScript</li>\n<li>Ruby</li>\n</ul>\n<p>Here is an article I wrote about choosing a language for the interview:<br><a href=\"https://startupnextdoor.com/important-pick-one-language-for-the-coding-interview/\">Pick One Language for the Coding Interview</a>.<br>This is the original article my post was based on: <a href=\"https://web.archive.org/web/20210516054124/http://blog.codingforinterviews.com/best-programming-language-jobs/\">Choosing a Programming Language for Interviews</a></p>\n<p>You need to be very comfortable in the language and be knowledgeable.</p>\n<p>Read more about choices: </p>\n<ul>\n<li><a href=\"http://www.byte-by-byte.com/choose-the-right-language-for-your-coding-interview/\">Choose the Right Language for Your Coding Interview</a></li>\n</ul>\n<h2 id=\"Books-for-Data-Structures-and-Algorithms\"><a href=\"#Books-for-Data-Structures-and-Algorithms\" class=\"headerlink\" title=\"Books for Data Structures and Algorithms\"></a>Books for Data Structures and Algorithms</h2><p>This book will form your foundation for computer science.</p>\n<p>Just choose one, in a language that you will be comfortable with. You’ll be doing a lot of reading and coding.</p>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h3><ul>\n<li><a href=\"https://www.amazon.com/Algorithms-Parts-1-5-Bundle-Fundamentals/dp/0201756080\">Algorithms in C, Parts 1-5 (Bundle), 3rd Edition</a><ul>\n<li>Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><ul>\n<li><a href=\"https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275/\">Data Structures and Algorithms in Python</a><ul>\n<li>by Goodrich, Tamassia, Goldwasser</li>\n<li>I loved this book. It covered everything and more.</li>\n<li>Pythonic code</li>\n<li>my glowing book report: <a href=\"https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/\">https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>Your choice:</p>\n<ul>\n<li>Goodrich, Tamassia, Goldwasser<ul>\n<li><a href=\"https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/1118771338/\">Data Structures and Algorithms in Java</a></li>\n</ul>\n</li>\n<li>Sedgewick and Wayne:<ul>\n<li><a href=\"https://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/\">Algorithms</a></li>\n<li>Free Coursera course that covers the book (taught by the authors!):<ul>\n<li><a href=\"https://www.coursera.org/learn/algorithms-part1\">Algorithms I</a></li>\n<li><a href=\"https://www.coursera.org/learn/algorithms-part2\">Algorithms II</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"C-1\"><a href=\"#C-1\" class=\"headerlink\" title=\"C++\"></a>C++</h3><p>Your choice:</p>\n<ul>\n<li>Goodrich, Tamassia, and Mount<ul>\n<li><a href=\"https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/0470383275\">Data Structures and Algorithms in C++, 2nd Edition</a></li>\n</ul>\n</li>\n<li>Sedgewick and Wayne<ul>\n<li><a href=\"https://www.amazon.com/Algorithms-Parts-1-4-Fundamentals-Structure/dp/0201350882/\">Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching</a></li>\n<li><a href=\"https://www.amazon.com/Algorithms-Part-Graph-3rd-Pt-5/dp/0201361183/\">Algorithms in C++ Part 5: Graph Algorithms</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Interview-Prep-Books\"><a href=\"#Interview-Prep-Books\" class=\"headerlink\" title=\"Interview Prep Books\"></a>Interview Prep Books</h2><p>You don’t need to buy a bunch of these. Honestly “Cracking the Coding Interview” is probably enough,<br>but I bought more to give myself more practice. But I always do too much.</p>\n<p>I bought both of these. They gave me plenty of practice.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Programming-Interviews-Exposed-Through-Interview/dp/111941847X/\">Programming Interviews Exposed: Coding Your Way Through the Interview, 4th Edition</a><ul>\n<li>Answers in C++ and Java</li>\n<li>This is a good warm-up for Cracking the Coding Interview</li>\n<li>Not too difficult. Most problems may be easier than what you’ll see in an interview (from what I’ve read)</li>\n</ul>\n</li>\n<li><a href=\"http://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/\">Cracking the Coding Interview, 6th Edition</a><ul>\n<li>answers in Java</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"If-you-have-tons-of-extra-time\"><a href=\"#If-you-have-tons-of-extra-time\" class=\"headerlink\" title=\"If you have tons of extra time:\"></a>If you have tons of extra time:</h3><p>Choose one:</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Elements-Programming-Interviews-Insiders-Guide/dp/1479274836\">Elements of Programming Interviews (C++ version)</a></li>\n<li><a href=\"https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949/\">Elements of Programming Interviews in Python</a></li>\n<li><a href=\"https://www.amazon.com/Elements-Programming-Interviews-Java-Insiders/dp/1517435803/\">Elements of Programming Interviews (Java version)</a><br>  - <a href=\"https://github.com/gardncl/elements-of-programming-interviews\">Companion Project - Method Stub and Test Cases for Every Problem in the Book</a></li>\n</ul>\n<h2 id=\"Don’t-Make-My-Mistakes\"><a href=\"#Don’t-Make-My-Mistakes\" class=\"headerlink\" title=\"Don’t Make My Mistakes\"></a>Don’t Make My Mistakes</h2><p>This list grew over many months, and yes, it got out of hand.</p>\n<p>Here are some mistakes I made so you’ll have a better experience. And you’ll save months of time.</p>\n<h3 id=\"1-You-Won’t-Remember-it-All\"><a href=\"#1-You-Won’t-Remember-it-All\" class=\"headerlink\" title=\"1. You Won’t Remember it All\"></a>1. You Won’t Remember it All</h3><p>I watched hours of videos and took copious notes, and months later there was much I didn’t remember. I spent 3 days going<br>through my notes and making flashcards, so I could review. I didn’t need all of that knowledge.</p>\n<p>Please, read so you won’t make my mistakes:</p>\n<p><a href=\"https://startupnextdoor.com/retaining-computer-science-knowledge/\">Retaining Computer Science Knowledge</a>.</p>\n<h3 id=\"2-Use-Flashcards\"><a href=\"#2-Use-Flashcards\" class=\"headerlink\" title=\"2. Use Flashcards\"></a>2. Use Flashcards</h3><p>To solve the problem, I made a little flashcards site where I could add flashcards of 2 types: general and code.<br>Each card has different formatting. I made a mobile-first website, so I could review on my phone or tablet, wherever I am.</p>\n<p>Make your own for free:</p>\n<ul>\n<li><a href=\"https://github.com/jwasham/computer-science-flash-cards\">Flashcards site repo</a></li>\n</ul>\n<p><strong>I DON’T RECOMMEND using my flashcards.</strong> There are too many and most of them are trivia that you don’t need.</p>\n<p>But if you don’t want to listen to me, here you go:</p>\n<ul>\n<li><a href=\"https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham.db\">My flash cards database (1200 cards)</a>:</li>\n<li><a href=\"https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham-extreme.db\">My flash cards database (extreme - 1800 cards)</a>:</li>\n</ul>\n<p>Keep in mind I went overboard and have cards covering everything from assembly language and Python trivia to machine learning and statistics.<br>It’s way too much for what’s required.</p>\n<p><strong>Note on flashcards:</strong> The first time you recognize you know the answer, don’t mark it as known. You have to see the<br>same card and answer it several times correctly before you really know it. Repetition will put that knowledge deeper in<br>your brain.</p>\n<p>An alternative to using my flashcard site is <a href=\"http://ankisrs.net/\">Anki</a>, which has been recommended to me numerous times.<br>It uses a repetition system to help you remember. It’s user-friendly, available on all platforms and has a cloud sync system.<br>It costs $25 on iOS but is free on other platforms.</p>\n<p>My flashcard database in Anki format: <a href=\"https://ankiweb.net/shared/info/25173560\">https://ankiweb.net/shared/info/25173560</a> (thanks <a href=\"https://github.com/xiewenya\">@xiewenya</a>).</p>\n<p>Some students have mentioned formatting issues with white space that can be fixed by doing the following: open deck, edit card, click cards, select the “styling” radio button, add the member “white-space: pre;” to the card class.</p>\n<h3 id=\"3-Do-Coding-Interview-Questions-While-You’re-Learning\"><a href=\"#3-Do-Coding-Interview-Questions-While-You’re-Learning\" class=\"headerlink\" title=\"3. Do Coding Interview Questions While You’re Learning\"></a>3. Do Coding Interview Questions While You’re Learning</h3><p>THIS IS VERY IMPORTANT.</p>\n<p>Start doing coding interview questions while you’re learning data structures and algorithms.</p>\n<p>You need to apply what you’re learning to solving problems, or you’ll forget. I made this mistake. </p>\n<p>Once you’ve learned a topic, and feel somewhat comfortable with it, for example, <strong>linked lists</strong>:</p>\n<ol>\n<li>Open one of the <a href=\"#interview-prep-books\">coding interview books</a> (or coding problem websites, listed below) </li>\n<li>Do 2 or 3 questions regarding linked lists. </li>\n<li>Move on to the next learning topic.</li>\n<li>Later, go back and do another 2 or 3 linked list problems.</li>\n<li>Do this with each new topic you learn.</li>\n</ol>\n<p><strong>Keep doing problems while you’re learning all this stuff, not after.</strong></p>\n<p>You’re not being hired for knowledge, but how you apply the knowledge.</p>\n<p>There are many resources for this, listed below. Keep going.</p>\n<h3 id=\"4-Focus\"><a href=\"#4-Focus\" class=\"headerlink\" title=\"4. Focus\"></a>4. Focus</h3><p>There are a lot of distractions that can take up valuable time. Focus and concentration are hard. Turn on some music<br>without lyrics and you’ll be able to focus pretty well.</p>\n<h2 id=\"What-you-won’t-see-covered\"><a href=\"#What-you-won’t-see-covered\" class=\"headerlink\" title=\"What you won’t see covered\"></a>What you won’t see covered</h2><p>These are prevalent technologies but not part of this study plan:</p>\n<ul>\n<li>SQL</li>\n<li>Javascript</li>\n<li>HTML, CSS, and other front-end technologies</li>\n</ul>\n<h2 id=\"The-Daily-Plan\"><a href=\"#The-Daily-Plan\" class=\"headerlink\" title=\"The Daily Plan\"></a>The Daily Plan</h2><p>This course goes over a lot of subjects. Each will probably take you a few days, or maybe even a week or more. It depends on your schedule.</p>\n<p>Each day, take the next subject in the list, watch some videos about that subject, and then write an implementation<br>of that data structure or algorithm in the language you chose for this course.</p>\n<p>You can see my code here:</p>\n<ul>\n<li><a href=\"https://github.com/jwasham/practice-c\">C</a></li>\n<li><a href=\"https://github.com/jwasham/practice-cpp\">C++</a></li>\n<li><a href=\"https://github.com/jwasham/practice-python\">Python</a></li>\n</ul>\n<p>You don’t need to memorize every algorithm. You just need to be able to understand it enough to be able to write your own implementation.</p>\n<h2 id=\"Coding-Question-Practice\"><a href=\"#Coding-Question-Practice\" class=\"headerlink\" title=\"Coding Question Practice\"></a>Coding Question Practice</h2><p>🤔 Why is this here? I’m not ready to interview.</p>\n<p><a href=\"#3-do-coding-interview-questions-while-youre-learning\">Then go back and read this.</a></p>\n<p>Why you need to practice doing programming problems:</p>\n<ul>\n<li>Problem recognition, and where the right data structures and algorithms fit in</li>\n<li>Gathering requirements for the problem</li>\n<li>Talking your way through the problem like you will in the interview</li>\n<li>Coding on a whiteboard or paper, not a computer</li>\n<li>Coming up with time and space complexity for your solutions (see Big-O below)</li>\n<li>Testing your solutions</li>\n</ul>\n<p>There is a great intro for methodical, communicative problem solving in an interview. You’ll get this from the programming<br>interview books, too, but I found this outstanding:<br><a href=\"http://www.hiredintech.com/algorithm-design/\">Algorithm design canvas</a></p>\n<p>Write code on a whiteboard or paper, not a computer. Test with some sample inputs. Then type it and test it out on a computer.</p>\n<p>If you don’t have a whiteboard at home, pick up a large drawing pad from an art store. You can sit on the couch and practice.<br>This is my “sofa whiteboard”. I added the pen in the photo just for scale. If you use a pen, you’ll wish you could erase.<br>Gets messy quick. <strong>I use a pencil and eraser.</strong></p>\n<p><img src=\"https://d3j2pkmjtin6ou.cloudfront.net/art_board_sm_2.jpg\" alt=\"my sofa whiteboard\"></p>\n<p><strong>Coding question practice is not about memorizing answers to programming problems.</strong></p>\n<h2 id=\"Coding-Problems\"><a href=\"#Coding-Problems\" class=\"headerlink\" title=\"Coding Problems\"></a>Coding Problems</h2><p>Don’t forget your key coding interview books <a href=\"#interview-prep-books\">here</a>.</p>\n<p>Solving Problems:</p>\n<ul>\n<li><a href=\"https://www.topcoder.com/thrive/articles/How%20To%20Find%20a%20Solution\">How to Find a Solution</a></li>\n<li><a href=\"https://www.topcoder.com/thrive/articles/How%20To%20Dissect%20a%20Topcoder%20Problem%20Statement%20Content\">How to Dissect a Topcoder Problem Statement</a></li>\n</ul>\n<p>Coding Interview Question Videos:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PLamzFoFxwoNjPfxzaWqs7cZGsPYy0x_gI\">IDeserve (88 videos)</a></li>\n<li><a href=\"https://www.youtube.com/user/tusharroy2525/playlists?shelf_id=2&view=50&sort=dd\">Tushar Roy (5 playlists)</a><ul>\n<li>Super for walkthroughs of problem solutions</li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLU_sdQYzUj2keVENTP0a5rdykRSgg9Wp-\">Nick White - LeetCode Solutions (187 Videos)</a><ul>\n<li>Good explanations of solution and the code</li>\n<li>You can watch several in a short time</li>\n</ul>\n</li>\n<li><a href=\"https://youtube.com/FisherCoder\">FisherCoder - LeetCode Solutions</a></li>\n</ul>\n<p>Challenge&#x2F;Practice sites:</p>\n<ul>\n<li><a href=\"https://leetcode.com/\">LeetCode</a><ul>\n<li>My favorite coding problem site. It’s worth the subscription money for the 1-2 months you’ll likely be preparing.</li>\n<li>See Nick White and FisherCoder Videos above for code walk-throughs.</li>\n</ul>\n</li>\n<li><a href=\"https://www.hackerrank.com/\">HackerRank</a></li>\n<li><a href=\"https://www.topcoder.com/\">TopCoder</a></li>\n<li><a href=\"https://codeforces.com/\">Codeforces</a></li>\n<li><a href=\"https://codility.com/programmers/\">Codility</a></li>\n<li><a href=\"https://practice.geeksforgeeks.org/explore/?page=1\">Geeks for Geeks</a></li>\n<li><a href=\"https://www.interviewbit.com/\">InterviewBit</a></li>\n<li><a href=\"https://www.algoexpert.io/product\">AlgoExpert</a><ul>\n<li>Created by Google engineers, this is also an excellent resource to hone your skills.</li>\n</ul>\n</li>\n<li><a href=\"https://projecteuler.net/\">Project Euler</a><ul>\n<li>very math focused, and not really suited for coding interviews</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Let’s-Get-Started\"><a href=\"#Let’s-Get-Started\" class=\"headerlink\" title=\"Let’s Get Started\"></a>Let’s Get Started</h2><p>Alright, enough talk, let’s learn!</p>\n<p>But don’t forget to do coding problems from above while you learn!</p>\n<h2 id=\"Algorithmic-complexity-Big-O-Asymptotic-analysis\"><a href=\"#Algorithmic-complexity-Big-O-Asymptotic-analysis\" class=\"headerlink\" title=\"Algorithmic complexity &#x2F; Big-O &#x2F; Asymptotic analysis\"></a>Algorithmic complexity &#x2F; Big-O &#x2F; Asymptotic analysis</h2><ul>\n<li>Nothing to implement here, you’re just watching videos and taking notes! Yay!</li>\n<li>There are a lot of videos here. Just watch enough until you understand it. You can always come back and review.</li>\n<li>Don’t worry if you don’t understand all the math behind it.</li>\n<li>You just need to understand how to express the complexity of an algorithm in terms of Big-O.</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=iOq5kSKqeR4\">Harvard CS50 - Asymptotic Notation (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=V6mKVRU1evU\">Big O Notations (general quick tutorial) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ei-A_wy5Yxw&index=2&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN\">Big O Notation (and Omega and Theta) - best mathematical explanation (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=z1mkCe3kVUA\">Skiena (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_VIS4YDpuP98\">UC Berkeley Big O (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=B3SpQZaAZP4&index=10&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN\">Amortized Analysis (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> TopCoder (includes recurrence relations and master theorem):<ul>\n<li><a href=\"https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20one\">Computational Complexity: Section 1</a></li>\n<li><a href=\"https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20two\">Computational Complexity: Section 2</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://bigocheatsheet.com/\">Cheat sheet</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/__vX2sjlpXU\">[Review] Big-O notation in 5 minutes (video)</a></li>\n</ul>\n<p>Well, that’s about enough of that. </p>\n<p>When you go through “Cracking the Coding Interview”, there is a chapter on this, and at the end there is a quiz to see<br>if you can identify the runtime complexity of different algorithms. It’s a super review and test.</p>\n<h2 id=\"Data-Structures\"><a href=\"#Data-Structures\" class=\"headerlink\" title=\"Data Structures\"></a>Data Structures</h2><ul>\n<li><h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> About Arrays:<ul>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/arrays-OsBSF\">Arrays (video)</a></li>\n<li><a href=\"https://archive.org/details/ucberkeley_webcast_Wp8oiO_CZZE\">UC Berkeley CS61B - Linear and Multi-Dim Arrays (video)</a> (Start watching from 15m 32s)</li>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/dynamic-arrays-EwbnV\">Dynamic Arrays (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=1jtrQqYpt7g\">Jagged Arrays (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement a vector (mutable array with automatic resizing):<ul>\n<li><input disabled=\"\" type=\"checkbox\"> Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing.</li>\n<li><input disabled=\"\" type=\"checkbox\"> New raw data array with allocated memory<ul>\n<li>can allocate int array under the hood, just not use its features</li>\n<li>start with 16, or if starting number is greater, use power of 2 - 16, 32, 64, 128</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> size() - number of items</li>\n<li><input disabled=\"\" type=\"checkbox\"> capacity() - number of items it can hold</li>\n<li><input disabled=\"\" type=\"checkbox\"> is_empty()</li>\n<li><input disabled=\"\" type=\"checkbox\"> at(index) - returns item at given index, blows up if index out of bounds</li>\n<li><input disabled=\"\" type=\"checkbox\"> push(item)</li>\n<li><input disabled=\"\" type=\"checkbox\"> insert(index, item) - inserts item at index, shifts that index’s value and trailing elements to the right</li>\n<li><input disabled=\"\" type=\"checkbox\"> prepend(item) - can use insert above at index 0</li>\n<li><input disabled=\"\" type=\"checkbox\"> pop() - remove from end, return value</li>\n<li><input disabled=\"\" type=\"checkbox\"> delete(index) - delete item at index, shifting all trailing elements left</li>\n<li><input disabled=\"\" type=\"checkbox\"> remove(item) - looks for value and removes index holding it (even if in multiple places)</li>\n<li><input disabled=\"\" type=\"checkbox\"> find(item) - looks for value and returns first index with that value, -1 if not found</li>\n<li><input disabled=\"\" type=\"checkbox\"> resize(new_capacity) &#x2F;&#x2F; private function<ul>\n<li>when you reach capacity, resize to double the size</li>\n<li>when popping an item, if size is 1&#x2F;4 of capacity, resize to half</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Time<ul>\n<li>O(1) to add&#x2F;remove at end (amortized for allocations for more space), index, or update</li>\n<li>O(n) to insert&#x2F;remove elsewhere</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Space<ul>\n<li>contiguous in memory, so proximity helps performance</li>\n<li>space needed &#x3D; (array capacity, which is &gt;&#x3D; n) * size of item, but even if 2n, still O(n)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Linked-Lists\"><a href=\"#Linked-Lists\" class=\"headerlink\" title=\"Linked Lists\"></a>Linked Lists</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Description:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/singly-linked-lists-kHhgK\">Singly Linked Lists (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_htzJdKoEmO0\">CS 61B - Linked Lists 1 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_-c4I3gFYe3w\">CS 61B - Linked Lists 2 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/F8AbOfQwl1c\">[Review] Linked lists in 4 minutes (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=QN6FPiD0Gzo\">C Code (video)</a><br>  - not the whole video, just portions about Node struct and memory allocation</li>\n<li><input disabled=\"\" type=\"checkbox\"> Linked List vs Arrays:<ul>\n<li><a href=\"https://www.coursera.org/lecture/data-structures-optimizing-performance/core-linked-lists-vs-arrays-rjBs9\">Core Linked Lists Vs Arrays (video)</a></li>\n<li><a href=\"https://www.coursera.org/lecture/data-structures-optimizing-performance/in-the-real-world-lists-vs-arrays-QUaUd\">In The Real World Linked Lists Vs Arrays (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=YQs6IC-vgmo\">Why you should avoid linked lists (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Gotcha: you need pointer to pointer knowledge:<br>  (for when you pass a pointer to a function that may change the address where that pointer points)<br>  This page is just to get a grasp on ptr to ptr. I don’t recommend this list traversal style. Readability and maintainability suffer due to cleverness.<ul>\n<li><a href=\"https://www.eskimo.com/~scs/cclass/int/sx8.html\">Pointers to Pointers</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement (I did with tail pointer &amp; without):<ul>\n<li><input disabled=\"\" type=\"checkbox\"> size() - returns number of data elements in list</li>\n<li><input disabled=\"\" type=\"checkbox\"> empty() - bool returns true if empty</li>\n<li><input disabled=\"\" type=\"checkbox\"> value_at(index) - returns the value of the nth item (starting at 0 for first)</li>\n<li><input disabled=\"\" type=\"checkbox\"> push_front(value) - adds an item to the front of the list</li>\n<li><input disabled=\"\" type=\"checkbox\"> pop_front() - remove front item and return its value</li>\n<li><input disabled=\"\" type=\"checkbox\"> push_back(value) - adds an item at the end</li>\n<li><input disabled=\"\" type=\"checkbox\"> pop_back() - removes end item and returns its value</li>\n<li><input disabled=\"\" type=\"checkbox\"> front() - get value of front item</li>\n<li><input disabled=\"\" type=\"checkbox\"> back() - get value of end item</li>\n<li><input disabled=\"\" type=\"checkbox\"> insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index</li>\n<li><input disabled=\"\" type=\"checkbox\"> erase(index) - removes node at given index</li>\n<li><input disabled=\"\" type=\"checkbox\"> value_n_from_end(n) - returns the value of the node at nth position from the end of the list</li>\n<li><input disabled=\"\" type=\"checkbox\"> reverse() - reverses the list</li>\n<li><input disabled=\"\" type=\"checkbox\"> remove_value(value) - removes the first item in the list with this value</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Doubly-linked List<ul>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/doubly-linked-lists-jpGKD\">Description (video)</a></li>\n<li>No need to implement</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/stacks-UdKzQ\">Stacks (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/KcT3aVgrrpU\">[Review] Stacks in 3 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Will not implement. Implementing with array is trivial</li>\n</ul>\n</li>\n<li><h3 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/queues-EShpq\">Queue (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://en.wikipedia.org/wiki/Circular_buffer\">Circular buffer&#x2F;FIFO</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/D6gu-_tmEpQ\">[Review] Queues in 3 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement using linked-list, with tail pointer:<ul>\n<li>enqueue(value) - adds value at position at tail</li>\n<li>dequeue() - returns value and removes least recently added element (front)</li>\n<li>empty()</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement using fixed-sized array:<ul>\n<li>enqueue(value) - adds item at end of available storage</li>\n<li>dequeue() - returns value and removes least recently added element</li>\n<li>empty()</li>\n<li>full()</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Cost:<ul>\n<li>a bad implementation using linked list where you enqueue at head and dequeue at tail would be O(n)<br>  because you’d need the next to last element, causing a full traversal each dequeue</li>\n<li>enqueue: O(1) (amortized, linked list and array [probing])</li>\n<li>dequeue: O(1) (linked list and array)</li>\n<li>empty: O(1) (linked list and array)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Hash-table\"><a href=\"#Hash-table\" class=\"headerlink\" title=\"Hash table\"></a>Hash table</h3><ul>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nVideos:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=0M_kIqhwbFo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=8\">Hashing with Chaining (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=BRO7mVIFt08&index=9&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">Table Doubling, Karp-Rabin (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=rvdJDijO2Ro&index=10&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">Open Addressing, Cryptographic Hashing (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=C4Kc8xzcA68\">PyCon 2010: The Mighty Dictionary (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=66P5FMkWoVU\">PyCon 2017: The Dictionary Even Mightier (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=z0lJ2k0sl1g&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=11\">(Advanced) Randomization: Universal &amp; Perfect Hashing (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=N0COwN14gt0&list=PL2B4EEwhKD-NbwZ4ezj7gyc_3yNrojKM9&index=4\">(Advanced) Perfect hashing (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/knV86FlSXJ8\">[Review] Hash tables in 4 minutes (video)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nOnline Courses:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures-optimizing-performance/core-hash-tables-m7UuP\">Core Hash Tables (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/home/week/4\">Data Structures (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/phone-book-problem-NYZZP\">Phone Book Problem (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> distributed hash tables:<ul>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/instant-uploads-and-storage-optimization-in-dropbox-DvaIb\">Instant Uploads And Storage Optimization In Dropbox (video)</a></li>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/distributed-hash-tables-tvH8H\">Distributed Hash Tables (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nImplement with array using linear probing</p>\n<ul>\n<li>hash(k, m) - m is size of hash table</li>\n<li>add(key, value) - if key already exists, update value</li>\n<li>exists(key)</li>\n<li>get(key)</li>\n<li>remove(key)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"More-Knowledge\"><a href=\"#More-Knowledge\" class=\"headerlink\" title=\"More Knowledge\"></a>More Knowledge</h2><ul>\n<li><h3 id=\"Binary-search\"><a href=\"#Binary-search\" class=\"headerlink\" title=\"Binary search\"></a>Binary search</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=D5SrAga1pno\">Binary Search (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search\">Binary Search (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.topcoder.com/thrive/articles/Binary%20Search\">detail</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems\">blueprint</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/fDKIpRe8GW4\">[Review] Binary search in 4 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement:<ul>\n<li>binary search (on sorted array of integers)</li>\n<li>binary search using recursion</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Bitwise-operations\"><a href=\"#Bitwise-operations\" class=\"headerlink\" title=\"Bitwise operations\"></a>Bitwise operations</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/bits-cheat-sheet.pdf\">Bits cheat sheet</a> - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32)</li>\n<li><input disabled=\"\" type=\"checkbox\"> Get a really good understanding of manipulating bits with: &amp;, |, ^, ~, &gt;&gt;, &lt;&lt;<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://en.wikipedia.org/wiki/Word_(computer_architecture)\">words</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Good intro:<br>  <a href=\"https://www.youtube.com/watch?v=7jkIUgLC29I\">Bit Manipulation (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=d0AwjSpNXR0\">C Programming Tutorial 2-10: Bitwise Operators (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://en.wikipedia.org/wiki/Bit_manipulation\">Bit Manipulation</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation\">Bitwise Operation</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://graphics.stanford.edu/~seander/bithacks.html\">Bithacks</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://bits.stephan-brumme.com/\">The Bit Twiddler</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://bits.stephan-brumme.com/interactive.html\">The Bit Twiddler Interactive</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ZusiKXcz_ac\">Bit Hacks (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://pconrad.github.io/old_pconrad_cs16/topics/bitOps/\">Practice Operations</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> 2s and 1s complement<ul>\n<li><a href=\"https://www.youtube.com/watch?v=lKTsv6iVxV4\">Binary: Plusses &amp; Minuses (Why We Use Two’s Complement) (video)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Ones%27_complement\">1s Complement</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\">2s Complement</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Count set bits<ul>\n<li><a href=\"https://youtu.be/Hzuzo9NJrlc\">4 ways to count bits in a byte (video)</a></li>\n<li><a href=\"https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\">Count Bits</a></li>\n<li><a href=\"http://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer\">How To Count The Number Of Set Bits In a 32 Bit Integer</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Swap values:<ul>\n<li><a href=\"https://bits.stephan-brumme.com/swap.html\">Swap</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Absolute value:<ul>\n<li><a href=\"https://bits.stephan-brumme.com/absInteger.html\">Absolute Integer</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Trees\"><a href=\"#Trees\" class=\"headerlink\" title=\"Trees\"></a>Trees</h2><ul>\n<li><h3 id=\"Trees-Intro\"><a href=\"#Trees-Intro\" class=\"headerlink\" title=\"Trees - Intro\"></a>Trees - Intro</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/trees-95qda\">Intro to Trees (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/tree-traversal-fr51b\">Tree Traversal (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=uWL6FJhq5fM\">BFS(breadth-first search) and DFS(depth-first search) (video)</a><ul>\n<li>BFS notes:<ul>\n<li>level order (BFS, using queue)</li>\n<li>time complexity: O(n)</li>\n<li>space complexity: best: O(1), worst: O(n&#x2F;2)&#x3D;O(n)</li>\n</ul>\n</li>\n<li>DFS notes:<ul>\n<li>time complexity: O(n)</li>\n<li>space complexity:<br>  best: O(log n) - avg. height of tree<br>  worst: O(n)</li>\n<li>inorder (DFS: left, self, right)</li>\n<li>postorder (DFS: left, right, self)</li>\n<li>preorder (DFS: self, left, right)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/HZ5YTanv5QE\">[Review] Breadth-first search in 4 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/Urx87-NMm6c\">[Review] Depth-first search in 4 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZO1JC2RgEi04nLy6D-rKk6b\">[Review] Tree Traversal (playlist) in 11 minutes (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Binary-search-trees-BSTs\"><a href=\"#Binary-search-trees-BSTs\" class=\"headerlink\" title=\"Binary search trees: BSTs\"></a>Binary search trees: BSTs</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=x6At0nzX92o&index=1&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6\">Binary Search Tree Review (video)</a>    </li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/E7cXP/introduction\">Introduction (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=76dhtgZt38A&ab_channel=MITOpenCourseWare\">MIT (video)</a></li>\n<li>C&#x2F;C++:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=COZK7NATh4k&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=28\">Binary search tree - Implementation in C&#x2F;C++ (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=hWokyBoo0aI&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=29\">BST implementation - memory allocation in stack and heap (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Ut90klNN264&index=30&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Find min and max element in a binary search tree (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=_pnqMz5nrRs&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=31\">Find height of a binary tree (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=9RHO6jU--GU&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=32\">Binary tree traversal - breadth-first and depth-first strategies (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=86g8jAQug04&index=33&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Binary tree: Level Order Traversal (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=gm8DUJJhmY4&index=34&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Binary tree traversal: Preorder, Inorder, Postorder (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=yEwSGhSsT0U&index=35&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Check if a binary tree is binary search tree or not (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=gcULXE7ViZw&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=36\">Delete a node from Binary Search Tree (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=5cPbNCrdotA&index=37&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Inorder Successor in a binary search tree (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> insert    &#x2F;&#x2F; insert value into tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_node_count &#x2F;&#x2F; get count of values stored</li>\n<li><input disabled=\"\" type=\"checkbox\"> print_values &#x2F;&#x2F; prints the values in the tree, from min to max</li>\n<li><input disabled=\"\" type=\"checkbox\"> delete_tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> is_in_tree &#x2F;&#x2F; returns true if given value exists in the tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_height &#x2F;&#x2F; returns the height in nodes (single node’s height is 1)</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_min   &#x2F;&#x2F; returns the minimum value stored in the tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_max   &#x2F;&#x2F; returns the maximum value stored in the tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> is_binary_search_tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> delete_value</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_successor &#x2F;&#x2F; returns next-highest value in tree after given value, -1 if none</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Heap-Priority-Queue-Binary-Heap\"><a href=\"#Heap-Priority-Queue-Binary-Heap\" class=\"headerlink\" title=\"Heap &#x2F; Priority Queue &#x2F; Binary Heap\"></a>Heap &#x2F; Priority Queue &#x2F; Binary Heap</h3><ul>\n<li>visualized as a tree, but is usually linear in storage (array, linked list)</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://en.wikipedia.org/wiki/Heap_(data_structure)\">Heap</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/introduction-2OpTs\">Introduction (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/GRV2q/binary-trees\">Binary Trees (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/supplement/S5xxz/tree-height-remark\">Tree Height Remark (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/0g1dl/basic-operations\">Basic Operations (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/gl5Ni/complete-binary-trees\">Complete Binary Trees (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/HxQo9/pseudocode\">Pseudocode (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/odNJmw5TOEE?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3291\">Heap Sort - jumps to start (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/heap-sort-hSzMO\">Heap Sort (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/building-a-heap-dwrOS\">Building a heap (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=B7hVxCmfPtM&index=4&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">MIT: Heaps and Heap Sort (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_yIUFT6AKBGE\">CS 61B Lecture 24: Priority Queues (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=MiyLo8adrWw\">Linear Time BuildHeap (max-heap)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZNsyqgPW-DNwUeT8F8uhWc6\">[Review] Heap (playlist) in 13 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement a max-heap:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> insert</li>\n<li><input disabled=\"\" type=\"checkbox\"> sift_up - needed for insert</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_max - returns the max item, without removing it</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_size() - return number of elements stored</li>\n<li><input disabled=\"\" type=\"checkbox\"> is_empty() - returns true if heap contains no elements</li>\n<li><input disabled=\"\" type=\"checkbox\"> extract_max - returns the max item, removing it</li>\n<li><input disabled=\"\" type=\"checkbox\"> sift_down - needed for extract_max</li>\n<li><input disabled=\"\" type=\"checkbox\"> remove(x) - removes item at index x</li>\n<li><input disabled=\"\" type=\"checkbox\"> heapify - create a heap from an array of elements, needed for heap_sort</li>\n<li><input disabled=\"\" type=\"checkbox\"> heap_sort() - take an unsorted array and turn it into a sorted array in-place using a max heap or min heap</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Sorting\"><a href=\"#Sorting\" class=\"headerlink\" title=\"Sorting\"></a>Sorting</h2><ul>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nNotes:</p>\n<ul>\n<li>Implement sorts &amp; know best case&#x2F;worst case, average complexity of each:<ul>\n<li>no bubble sort - it’s terrible - O(n^2), except when n &lt;&#x3D; 16</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Stability in sorting algorithms (“Is Quicksort stable?”)<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\">Sorting Algorithm Stability</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1517793/stability-in-sorting-algorithms\">Stability In Sorting Algorithms</a></li>\n<li><a href=\"http://www.geeksforgeeks.org/stability-in-sorting-algorithms/\">Stability In Sorting Algorithms</a></li>\n<li><a href=\"http://homepages.math.uic.edu/~leon/cs-mcs401-s08/handouts/stability.pdf\">Sorting Algorithms - Stability</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Which algorithms can be used on linked lists? Which on arrays? Which on both?<ul>\n<li>I wouldn’t recommend sorting a linked list, but merge sort is doable.</li>\n<li><a href=\"http://www.geeksforgeeks.org/merge-sort-for-linked-list/\">Merge Sort For Linked List</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>For heapsort, see Heap data structure above. Heap sort is great, but not stable</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.coursera.org/learn/algorithms-part1/home/week/3\">Sedgewick - Mergesort (5 videos)</a></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/mergesort-ARWDq\">1. Mergesort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part1/lecture/PWNEl/bottom-up-mergesort\">2. Bottom up Mergesort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/sorting-complexity-xAltF\">3. Sorting Complexity</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/comparators-9FYhS\">4. Comparators</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part1/lecture/pvvLZ/stability\">5. Stability</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.coursera.org/learn/algorithms-part1/home/week/3\">Sedgewick - Quicksort (4 videos)</a></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/quicksort-vjvnC\">1. Quicksort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/selection-UQxFT\">2. Selection</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/duplicate-keys-XvjPd\">3. Duplicate Keys</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/system-sorts-QBNZ7\">4. System Sorts</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nUC Berkeley:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_EiUvYS2DT6I\">CS 61B Lecture 29: Sorting I (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_2hTY3t80Qsk\">CS 61B Lecture 30: Sorting II (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_Y6LOLpxg6Dc\">CS 61B Lecture 32: Sorting III (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_qNMQ4ly43p4\">CS 61B Lecture 33: Sorting V (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_pvbBMd-3NoI\">CS 61B 2014-04-21: Radix Sort(video)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=P00xJgWzz2c&index=1&list=PL89B61F78B552C1AB\">Bubble Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=ni_zk257Nqo&index=7&list=PL89B61F78B552C1AB\">Analyzing Bubble Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=Kg4bqzAqRBM&index=3&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">Insertion Sort, Merge Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=c4BRHC7kTaQ&index=2&list=PL89B61F78B552C1AB\">Insertion Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=GCae1WNvnZM&index=3&list=PL89B61F78B552C1AB\">Merge Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=y_G9BkAm6B8&index=4&list=PL89B61F78B552C1AB\">Quicksort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=6nDMgr0-Yyo&index=8&list=PL89B61F78B552C1AB\">Selection Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nMerge sort code:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/examples/sorting/mergesort.c\">Using output array (C)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/jwasham/practice-python/blob/master/merge_sort/merge_sort.py\">Using output array (Python)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/jwasham/practice-cpp/blob/master/merge_sort/merge_sort.cc\">In-place (C++)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nQuick sort code:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/examples/randomization/quick.c\">Implementation (C)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/jwasham/practice-c/blob/master/quick_sort/quick_sort.c\">Implementation (C)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py\">Implementation (Python)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZOZSbGAXAPIq1BeUf4j20pl\">[Review] Sorting (playlist) in 18 minutes</a></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/Hoixgm4-P4M\">Quick sort in 4 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/2DmK_H7IdTo\">Heap sort in 4 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/4VqmGXwpLqc\">Merge sort in 3 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/xli_FI7CuzA\">Bubble sort in 2 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/g-PGLbMth_g\">Selection sort in 3 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/JU767SDMDvA\">Insertion sort in 2 minutes (video)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nImplement:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> Mergesort: O(n log n) average and worst case</li>\n<li><input disabled=\"\" type=\"checkbox\"> Quicksort O(n log n) average case</li>\n<li>Selection sort and insertion sort are both O(n^2) average and worst case</li>\n<li>For heapsort, see Heap data structure above</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nNot required, but I recommended them:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/home/week/3\">Sedgewick - Radix Sorts (6 videos)</a><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/vGHvb/strings-in-java\">1. Strings in Java</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part2/key-indexed-counting-2pi1Z\">2. Key Indexed Counting</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/c1U7L/lsd-radix-sort\">3. Least Significant Digit First String Radix Sort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/gFxwG/msd-radix-sort\">4. Most Significant Digit First String Radix Sort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part2/3-way-radix-quicksort-crkd5\">5. 3 Way Radix Quicksort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays\">6. Suffix Arrays</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#radixSort\">Radix Sort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=xhr26ia4k38\">Radix Sort (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Nz1KZXbghj8&index=7&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">Radix Sort, Counting Sort (linear time given constraints) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=cNB2lADK3_s&index=8&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">Randomization: Matrix Multiply, Quicksort, Freivalds’ algorithm (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=pOKy3RZbSws&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&index=14\">Sorting in Linear Time (video)</a></li>\n</ul>\n</li>\n</ul>\n<p>As a summary, here is a visual representation of <a href=\"https://www.youtube.com/watch?v=kPRA0W1kECg\">15 sorting algorithms</a>.<br>If you need more detail on this subject, see “Sorting” section in <a href=\"#additional-detail-on-some-subjects\">Additional Detail on Some Subjects</a></p>\n<h2 id=\"Graphs\"><a href=\"#Graphs\" class=\"headerlink\" title=\"Graphs\"></a>Graphs</h2><p>Graphs can be used to represent many problems in computer science, so this section is long, like trees and sorting were.</p>\n<ul>\n<li><p>Notes:</p>\n<ul>\n<li>There are 4 basic ways to represent a graph in memory:<ul>\n<li>objects and pointers</li>\n<li>adjacency matrix</li>\n<li>adjacency list</li>\n<li>adjacency map</li>\n</ul>\n</li>\n<li>Familiarize yourself with each representation and its pros &amp; cons</li>\n<li>BFS and DFS - know their computational complexity, their trade offs, and how to implement them in real code</li>\n<li>When asked a question, look for a graph-based solution first, then move on if none</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nMIT(videos):</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=oFVYVzlvk9c&t=14s&ab_channel=MITOpenCourseWare\">Breadth-First Search</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=IBfWDYSffUU&t=32s&ab_channel=MITOpenCourseWare\">Depth-First Search</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nSkiena Lectures - great intro:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Sjk0xqWWPCc&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=10\">CSE373 2020 - Lecture 10 - Graph Data Structures (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ZTwjXj81NVY&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=11\">CSE373 2020 - Lecture 11 - Graph Traversal (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=KyordYB3BOs&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=12\">CSE373 2020 - Lecture 12 - Depth First Search (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=oolm2VnJUKw&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=13\">CSE373 2020 - Lecture 13 - Minimum Spanning Trees (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=RktgPx0MarY&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=14\">CSE373 2020 - Lecture 14 - Minimum Spanning Trees (con’t) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=MUe5DXRhyAo&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=15\">CSE373 2020 - Lecture 15 - Graph Algorithms (con’t 2) (video)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nGraphs (review and more):</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Aa2sqUhIn-E&index=15&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">6.006 Single-Source Shortest Paths Problem (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=NSHizBK9JD8&t=1731s&ab_channel=MITOpenCourseWare\">6.006 Dijkstra (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=f9cVS_URPc0&ab_channel=MITOpenCourseWare\">6.006 Bellman-Ford (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=CHvQ3q_gJ7E&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=18\">6.006 Speeding Up Dijkstra (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=i_AQT_XfvD8&index=6&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\">Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim’s Algorithm -  Lecture 6 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ufj5_bppBsA&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=7\">Aduni: Graph Algorithms II - DFS, BFS, Kruskal’s Algorithm, Union Find Data Structure - Lecture 7 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=DiedsPsMKXc&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=8\">Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=XIAQRlNkJAw&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=9\">Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_zFbq8vOZ_0k\">CS 61B 2014: Weighted graphs (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=tKwnms5iRBU&index=16&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">Greedy Algorithms: Minimum Spanning Tree (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=RpgcYiky7uw\">Strongly Connected Components Kosaraju’s Algorithm Graph Algorithm (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZO-Y-H3xIC9DGSfVYJng9Yw\">[Review] Shortest Path Algorithms (playlist) in 16 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZObEi3Hf6lmyW-CBfs7nkOV\">[Review] Minimum Spanning Trees (playlist) in 4 minutes (video)</a></li>\n</ul>\n</li>\n<li><p>Full Coursera Course:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-on-graphs/home/welcome\">Algorithms on Graphs (video)</a></li>\n</ul>\n</li>\n<li><p>I’ll implement:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> DFS with adjacency list (recursive)</li>\n<li><input disabled=\"\" type=\"checkbox\"> DFS with adjacency list (iterative with stack)</li>\n<li><input disabled=\"\" type=\"checkbox\"> DFS with adjacency matrix (recursive)</li>\n<li><input disabled=\"\" type=\"checkbox\"> DFS with adjacency matrix (iterative with stack)</li>\n<li><input disabled=\"\" type=\"checkbox\"> BFS with adjacency list</li>\n<li><input disabled=\"\" type=\"checkbox\"> BFS with adjacency matrix</li>\n<li><input disabled=\"\" type=\"checkbox\"> single-source shortest path (Dijkstra)</li>\n<li><input disabled=\"\" type=\"checkbox\"> minimum spanning tree</li>\n<li>DFS-based algorithms (see Aduni videos above):<ul>\n<li><input disabled=\"\" type=\"checkbox\"> check for cycle (needed for topological sort, since we’ll check for cycle before starting)</li>\n<li><input disabled=\"\" type=\"checkbox\"> topological sort</li>\n<li><input disabled=\"\" type=\"checkbox\"> count connected components in a graph</li>\n<li><input disabled=\"\" type=\"checkbox\"> list strongly connected components</li>\n<li><input disabled=\"\" type=\"checkbox\"> check for bipartite graph</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Even-More-Knowledge\"><a href=\"#Even-More-Knowledge\" class=\"headerlink\" title=\"Even More Knowledge\"></a>Even More Knowledge</h2><ul>\n<li><h3 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Stanford lectures on recursion &amp; backtracking:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=gl3emqCuueQ&list=PLFE6E58F856038C69&index=8\">Lecture 8 | Programming Abstractions (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=uFJhEPrbycQ&list=PLFE6E58F856038C69&index=9\">Lecture 9 | Programming Abstractions (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=NdF1QDTRkck&index=10&list=PLFE6E58F856038C69\">Lecture 10 | Programming Abstractions (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=p-gpaIGRCQI&list=PLFE6E58F856038C69&index=11\">Lecture 11 | Programming Abstractions (video)</a></li>\n</ul>\n</li>\n<li>When it is appropriate to use it?</li>\n<li>How is tail recursion better than not?<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.quora.com/What-is-tail-recursion-Why-is-it-so-bad\">What Is Tail Recursion Why Is It So Bad?</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/programming-languages/tail-recursion-YZic1\">Tail Recursion (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/ngCos392W4w\">5 Simple Steps for Solving Any Recursive Problem(video)</a></li>\n</ul>\n<p>  Backtracking Blueprint: <a href=\"https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)\">Java</a><br>  <a href=\"https://leetcode.com/problems/combination-sum/discuss/429538/General-Backtracking-questions-solutions-in-Python-for-reference-%3A\">Python</a></p>\n</li>\n<li><h3 id=\"Dynamic-Programming\"><a href=\"#Dynamic-Programming\" class=\"headerlink\" title=\"Dynamic Programming\"></a>Dynamic Programming</h3><ul>\n<li>You probably won’t see any dynamic programming problems in your interview, but it’s worth being able to recognize a<br>  problem as being a candidate for dynamic programming.</li>\n<li>This subject can be pretty difficult, as each DP soluble problem must be defined as a recursion relation, and coming up with it can be tricky.</li>\n<li>I suggest looking at many examples of DP problems until you have a solid understanding of the pattern involved.</li>\n<li><input disabled=\"\" type=\"checkbox\"> Videos:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=wAA0AMfcJHQ&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=18\">Skiena: CSE373 2020 - Lecture 19 - Introduction to Dynamic Programming (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=T3A4jlHlhtA&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=19\">Skiena: CSE373 2020 - Lecture 20 - Edit Distance (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=iPnPVcZmRbE&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=20\">Skiena: CSE373 2020 - Lecture 20 - Edit Distance (continued) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=2xPE4Wq8coQ&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=21\">Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=2xPE4Wq8coQ&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=21\">Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming and Review (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/J5aJEcOr6Eo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3558\">Simonson: Dynamic Programming 0 (starts at 59:18) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=0EzHjQ_SOeU&index=11&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\">Simonson: Dynamic Programming I - Lecture 11 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=v1qiRwuJU7g&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=12\">Simonson: Dynamic programming II - Lecture 12 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> List of individual DP problems (each is short):<br>  <a href=\"https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr\">Dynamic Programming (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Yale Lecture notes:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#dynamicProgramming\">Dynamic Programming</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Coursera:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithmic-thinking-2/lecture/80RrW/the-rna-secondary-structure-problem\">The RNA secondary structure problem (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithmic-thinking-2/a-dynamic-programming-algorithm-PSonq\">A dynamic programming algorithm (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithmic-thinking-2/illustrating-the-dp-algorithm-oUEK2\">Illustrating the DP algorithm (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithmic-thinking-2/lecture/nfK2r/running-time-of-the-dp-algorithm\">Running time of the DP algorithm (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithmic-thinking-2/lecture/M999a/dp-vs-recursive-implementation\">DP vs. recursive implementation (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithmic-thinking-2/global-pairwise-sequence-alignment-UZ7o6\">Global pairwise sequence alignment (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithmic-thinking-2/lecture/WnNau/local-pairwise-sequence-alignment\">Local pairwise sequence alignment (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Design-patterns\"><a href=\"#Design-patterns\" class=\"headerlink\" title=\"Design patterns\"></a>Design patterns</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=3cmzqZzwNDM&list=PLGLfVvz_LVvQ5G-LdJ8RLqe-ndo7QITYc&index=3\">Quick UML review (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Learn these patterns:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> strategy</li>\n<li><input disabled=\"\" type=\"checkbox\"> singleton</li>\n<li><input disabled=\"\" type=\"checkbox\"> adapter</li>\n<li><input disabled=\"\" type=\"checkbox\"> prototype</li>\n<li><input disabled=\"\" type=\"checkbox\"> decorator</li>\n<li><input disabled=\"\" type=\"checkbox\"> visitor</li>\n<li><input disabled=\"\" type=\"checkbox\"> factory, abstract factory</li>\n<li><input disabled=\"\" type=\"checkbox\"> facade</li>\n<li><input disabled=\"\" type=\"checkbox\"> observer</li>\n<li><input disabled=\"\" type=\"checkbox\"> proxy</li>\n<li><input disabled=\"\" type=\"checkbox\"> delegate</li>\n<li><input disabled=\"\" type=\"checkbox\"> command</li>\n<li><input disabled=\"\" type=\"checkbox\"> state</li>\n<li><input disabled=\"\" type=\"checkbox\"> memento</li>\n<li><input disabled=\"\" type=\"checkbox\"> iterator</li>\n<li><input disabled=\"\" type=\"checkbox\"> composite</li>\n<li><input disabled=\"\" type=\"checkbox\"> flyweight</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PLF206E906175C7E07\">Series of videos (27 videos)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124\">Book: Head First Design Patterns</a><ul>\n<li>I know the canonical book is “Design Patterns: Elements of Reusable Object-Oriented Software”, but Head First is great for beginners to OO.</li>\n</ul>\n</li>\n<li><a href=\"https://sourcemaking.com/design-patterns-and-tips\">Handy reference: 101 Design Patterns &amp; Tips for Developers</a></li>\n</ul>\n</li>\n<li><h3 id=\"Combinatorics-n-choose-k-Probability\"><a href=\"#Combinatorics-n-choose-k-Probability\" class=\"headerlink\" title=\"Combinatorics (n choose k) &amp; Probability\"></a>Combinatorics (n choose k) &amp; Probability</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=8RRo6Ti9d0U\">Math Skills: How to find Factorial, Permutation and Combination (Choose) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=sZkAAk9Wwa4\">Make School: Probability (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=dNaJg-mLobQ\">Make School: More Probability and Markov Chains (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Khan Academy:<ul>\n<li>Course layout:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.khanacademy.org/math/probability/probability-and-combinatorics-topic\">Basic Theoretical Probability</a></li>\n</ul>\n</li>\n<li>Just the videos - 41 (each are simple and each are short):<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=uzkc-qNVoOk&list=PLC58778F28211FA19\">Probability Explained (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"NP-NP-Complete-and-Approximation-Algorithms\"><a href=\"#NP-NP-Complete-and-Approximation-Algorithms\" class=\"headerlink\" title=\"NP, NP-Complete and Approximation Algorithms\"></a>NP, NP-Complete and Approximation Algorithms</h3><ul>\n<li>Know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem,<br>  and be able to recognize them when an interviewer asks you them in disguise.</li>\n<li>Know what NP-complete means.</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=moPtwq_cVH8&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=23\">Computational Complexity (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Simonson:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=2939\">Greedy Algs. II &amp; Intro to NP Completeness (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=e0tGC6ZQdQE&index=16&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\">NP Completeness II &amp; Reductions (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=fCX1BGT3wjE&index=17&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\">NP Completeness III (Video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=NKLDp3Rch3M&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=18\">NP Completeness IV (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Skiena:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ItHp5laE1VE&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=23\">CSE373 2020 - Lecture 23 - NP-Completeness (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=inaFJeCzGxU&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=24\">CSE373 2020 - Lecture 24 - Satisfiability (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=B-bhKxjZLlc&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=25\">CSE373 2020 - Lecture 25 - More NP-Completeness (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=_EzetTkG_Cc&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=26\">CSE373 2020 - Lecture 26 - NP-Completeness Challenge (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=eHZifpgyH_4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=22\">Complexity: P, NP, NP-completeness, Reductions (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=MEz1J9wY2iM&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=24\">Complexity: Approximation Algorithms (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=4q-jmGrmxKs&index=25&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">Complexity: Fixed-Parameter Algorithms (video)</a></li>\n<li>Peter Norvig discusses near-optimal solutions to traveling salesman problem:<ul>\n<li><a href=\"http://nbviewer.jupyter.org/url/norvig.com/ipython/TSP.ipynb\">Jupyter Notebook</a></li>\n</ul>\n</li>\n<li>Pages 1048 - 1140 in CLRS if you have it.</li>\n</ul>\n</li>\n<li><h3 id=\"How-computers-process-a-program\"><a href=\"#How-computers-process-a-program\" class=\"headerlink\" title=\"How computers process a program\"></a>How computers process a program</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=XM4lGflQFvA\">How CPU executes a program (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/1I5ZMmrOfnA\">How computers calculate - ALU (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/fpnE6UAfbtU\">Registers and RAM (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/FZGugFqdr60\">The Central Processing Unit (CPU) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/zltgXvg6r3k\">Instructions and Programs (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Caches\"><a href=\"#Caches\" class=\"headerlink\" title=\"Caches\"></a>Caches</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> LRU cache:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=R5ON3iwx78M\">The Magic of LRU Cache (100 Days of Google Dev) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=bq6N7Ym81iI\">Implementing LRU (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=8-FZRAjR7qU\">LeetCode - 146 LRU Cache (C++) (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> CPU cache:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=vjYF_fAZI5E&list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-&index=24\">MIT 6.004 L15: The Memory Hierarchy (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ajgC3-pyGlk&index=25&list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-\">MIT 6.004 L16: Cache Issues (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Processes-and-Threads\"><a href=\"#Processes-and-Threads\" class=\"headerlink\" title=\"Processes and Threads\"></a>Processes and Threads</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Computer Science 162 - Operating Systems (25 videos):<ul>\n<li>for processes and threads see videos 1-11</li>\n<li><a href=\"https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iBDyz-ba4yDskqMDY6A1w_c\">Operating Systems and System Programming (video)</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread\">What Is The Difference Between A Process And A Thread?</a></li>\n<li>Covers:<ul>\n<li>Processes, Threads, Concurrency issues<ul>\n<li>Difference between processes and threads</li>\n<li>Processes</li>\n<li>Threads</li>\n<li>Locks</li>\n<li>Mutexes</li>\n<li>Semaphores</li>\n<li>Monitors</li>\n<li>How they work?</li>\n<li>Deadlock</li>\n<li>Livelock</li>\n</ul>\n</li>\n<li>CPU activity, interrupts, context switching</li>\n<li>Modern concurrency constructs with multicore processors</li>\n<li><a href=\"https://youtu.be/O4nwUqQodAg\">Paging, segmentation and virtual memory (video)</a></li>\n<li><a href=\"https://youtu.be/iKlAWIKEyuw\">Interrupts (video)</a></li>\n<li>Process resource needs (memory: code, static storage, stack, heap, and also file descriptors, i&#x2F;o)</li>\n<li>Thread resource needs (shares above (minus stack) with other threads in the same process but each has its own pc, stack counter, registers, and stack)</li>\n<li>Forking is really copy on write (read-only) until the new process writes to memory, then it does a full copy.</li>\n<li>Context switching<ul>\n<li>How context switching is initiated by the operating system and underlying hardware?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL5jc9xFGsL8E12so1wlMS0r0hTQoJL74M\">threads in C++ (series - 10 videos)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PLacuG5pysFbDQU8kKxbUh4K5c1iL5_k7k\">CS 377 Spring ‘14: Operating Systems from University of Massachusetts</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> concurrency in Python (videos):<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL1H1sBF1VAKVMONJWJkmUh6_p8g4F2oy1\">Short series on threads</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Bs7vPNbB9JM\">Python Threads</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Obt-vMVdM8s\">Understanding the Python GIL (2010)</a><ul>\n<li><a href=\"http://www.dabeaz.com/GIL\">reference</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=MCs5OvhV9S4\">David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ZzfHjytDceU\">Keynote David Beazley - Topics of Interest (Python Asyncio)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=0zaPs8OtyKY\">Mutex in Python</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h3><ul>\n<li>To cover:<ul>\n<li>how unit testing works</li>\n<li>what are mock objects</li>\n<li>what is integration testing</li>\n<li>what is dependency injection</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=SAhJf36_u5U\">Agile Software Testing with James Bach (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ILkT_HV9DVU\">Open Lecture by James Bach on Software Testing (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://vimeo.com/83960706\">Steve Freeman - Test-Driven Development (that’s not what we meant) (video)</a><ul>\n<li><a href=\"http://gotocon.com/dl/goto-berlin-2013/slides/SteveFreeman_TestDrivenDevelopmentThatsNotWhatWeMeant.pdf\">slides</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Dependency injection:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=IKD2-MAkXyQ\">video</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://jasonpolites.github.io/tao-of-testing/ch3-1.1.html\">Tao Of Testing</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://jasonpolites.github.io/tao-of-testing/ch4-1.1.html\">How to write tests</a></li>\n</ul>\n</li>\n<li><h3 id=\"String-searching-manipulations\"><a href=\"#String-searching-manipulations\" class=\"headerlink\" title=\"String searching &amp; manipulations\"></a>String searching &amp; manipulations</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays\">Sedgewick - Suffix Arrays (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/home/week/4\">Sedgewick - Substring Search (videos)</a><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part2/introduction-to-substring-search-n3ZpG\">1. Introduction to Substring Search</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/2Kn5i/brute-force-substring-search\">2. Brute-Force Substring Search</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/TAtDr/knuth-morris-pratt\">3. Knuth-Morris Pratt</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/CYxOT/boyer-moore\">4. Boyer-Moore</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part2/rabin-karp-3KiqT\">5. Rabin-Karp</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/tAfHI/search-pattern-in-text\">Search pattern in text (video)</a></li>\n</ul>\n<p>  If you need more detail on this subject, see “String Matching” section in <a href=\"#additional-detail-on-some-subjects\">Additional Detail on Some Subjects</a>.</p>\n</li>\n<li><h3 id=\"Tries\"><a href=\"#Tries\" class=\"headerlink\" title=\"Tries\"></a>Tries</h3><ul>\n<li>Note there are different kinds of tries. Some have prefixes, some don’t, and some use string instead of bits<br>  to track the path</li>\n<li>I read through code, but will not implement</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/home/week/4\">Sedgewick - Tries (3 videos)</a><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/CPVdr/r-way-tries\">1. R Way Tries</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/yQM8K/ternary-search-tries\">2. Ternary Search Tries</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/jwNmV/character-based-operations\">3. Character Based Operations</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Tries\">Notes on Data Structures and Programming Techniques</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Short course videos:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/08Xyf/core-introduction-to-tries\">Introduction To Tries (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/PvlZW/core-performance-of-tries\">Performance Of Tries (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/DFvd3/core-implementing-a-trie\">Implementing A Trie (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.toptal.com/java/the-trie-a-neglected-data-structure\">The Trie: A Neglected Data Structure</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.topcoder.com/thrive/articles/Using%20Tries\">TopCoder - Using Tries</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=TJ8SkcUSdbU\">Stanford Lecture (real world use case) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=NinWEPPrkDQ&index=16&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf\">MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through) (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Floating-Point-Numbers\"><a href=\"#Floating-Point-Numbers\" class=\"headerlink\" title=\"Floating Point Numbers\"></a>Floating Point Numbers</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> simple 8-bit: <a href=\"https://www.youtube.com/watch?v=ji3SfClm8TU\">Representation of Floating Point Numbers - 1 (video - there is an error in calculations - see video description)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.joelonsoftware.com/articles/Unicode.html\">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://kunststube.net/encoding/\">What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text</a></li>\n</ul>\n</li>\n<li><h3 id=\"Endianness\"><a href=\"#Endianness\" class=\"headerlink\" title=\"Endianness\"></a>Endianness</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://web.archive.org/web/20180107141940/http://www.cs.umd.edu:80/class/sum2003/cmsc311/Notes/Data/endian.html\">Big And Little Endian</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=JrNF0KRAlyo\">Big Endian Vs Little Endian (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=oBSuXP-1Tc0\">Big And Little Endian Inside&#x2F;Out (video)</a><ul>\n<li>Very technical talk for kernel devs. Don’t worry if most is over your head.</li>\n<li>The first half is enough.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Networking\"><a href=\"#Networking\" class=\"headerlink\" title=\"Networking\"></a>Networking</h3><ul>\n<li><strong>If you have networking experience or want to be a reliability engineer or operations engineer, expect questions</strong></li>\n<li>Otherwise, this is just good to know</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.khanacademy.org/computing/code-org/computers-and-the-internet\">Khan Academy</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Vdc8TCESIg8\">UDP and TCP: Comparison of Transport Protocols (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=e5DEVa9eSN0\">TCP&#x2F;IP and the OSI Model Explained! (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=nomyRJehhnM\">Packet Transmission across the Internet. Networking &amp; TCP&#x2F;IP tutorial. (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=WGJrLqtX7As\">HTTP (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=S2iBR2ZlZf0\">SSL and HTTPS (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Rp3iZUvXWlM\">SSL&#x2F;TLS (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=E9FxNzv1Tr8\">HTTP 2.0 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PLEbnTDJUr_IegfoqO4iPnPYQui46QqT0j\">Video Series (21 videos) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=t5xYI0jzOf4\">Subnetting Demystified - Part 5 CIDR Notation (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Sockets:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=6G_W54zuadg&t=6s\">Java - Sockets - Introduction (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=G75vN2mnJeQ\">Socket Programming (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Final-Review\"><a href=\"#Final-Review\" class=\"headerlink\" title=\"Final Review\"></a>Final Review</h2><ul>\n<li><p>This section will have shorter videos that you can watch pretty quickly to review most of the important concepts.<br>  It’s nice if you want a refresher often.</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nSeries of 2-3 minutes short subject videos (23 videos)</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=r4r1DZcx1cM&list=PLmVb1OknmNJuC5POdcDv5oCS7_OUkDgpj&index=22\">Videos</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nSeries of 2-5 minutes short subject videos - Michael Sambol (38 videos):</p>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UCzDJwLWoYCUQowF_nG3m5OQ\">Videos</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.coursera.org/learn/algorithms-part1\">Sedgewick Videos - Algorithms I</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.coursera.org/learn/algorithms-part2\">Sedgewick Videos - Algorithms II</a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Update-Your-Resume\"><a href=\"#Update-Your-Resume\" class=\"headerlink\" title=\"Update Your Resume\"></a>Update Your Resume</h2><ul>\n<li>See Resume prep information in the books: “Cracking The Coding Interview” and “Programming Interviews Exposed”</li>\n<li>I don’t know how important this is (you can do your own research) but here is an article on making your resume ATS Compliant:<ul>\n<li><a href=\"https://ayedot.com/97/MiniBlog/Meaning-of-ATS-compliant-resume-and-How-to-create-ATS-Resume-for-Free\">How to Create or Check if your Resume is ATS Compliant</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.careercup.com/resume\">“This Is What A GOOD Resume Should Look Like” by Gayle McDowell (author of Cracking the Coding Interview)</a>, <ul>\n<li>Note by the author: “This is for a US-focused resume. CVs for India and other countries have different expectations, although many of the points will be the same.”</li>\n</ul>\n</li>\n<li><a href=\"https://www.techinterviewhandbook.org/resume/guide\">“Step-by-step resume guide” by Tech Interview Handbook</a><ul>\n<li>Detailed guide on how to set up your resume from scratch, write effective resume content, optimize it, and test your resume</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Find-a-Job\"><a href=\"#Find-a-Job\" class=\"headerlink\" title=\"Find a Job\"></a>Find a Job</h2><ul>\n<li><a href=\"https://ayedot.com/151/MiniBlog/Top-10-Best-Websites-for-Careers--Jobs\">Sites for Finding Jobs</a></li>\n</ul>\n<h2 id=\"Interview-Process-General-Interview-Prep\"><a href=\"#Interview-Process-General-Interview-Prep\" class=\"headerlink\" title=\"Interview Process &amp; General Interview Prep\"></a>Interview Process &amp; General Interview Prep</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://davidbyttow.medium.com/how-to-pass-the-engineering-interview-in-2021-45f1b389a1\">How to Pass the Engineering Interview in 2021</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=N233T0epWTs\">Demystifying Tech Recruiting</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> How to Get a Job at the Big 4:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=YJZCUhxNCv8\">How to Get a Job at the Big 4 - Amazon, Facebook, Google &amp; Microsoft (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=6790FVXWBw8&feature=youtu.be\">How to Get a Job at the Big 4.1 (Follow-up video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Cracking The Coding Interview Set 1:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=rEJzOhC5ZtQ\">Gayle L McDowell - Cracking The Coding Interview (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=aClxtDcdpsQ\">Cracking the Coding Interview with Author Gayle Laakmann McDowell (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Cracking the Facebook Coding Interview:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=wCl9kvQGHPI\">The Approach</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=4UWDyJq8jZg\">Problem Walkthrough</a></li>\n</ul>\n</li>\n<li>Prep Courses:<ul>\n<li><a href=\"https://www.udemy.com/software-engineer-interview-unleashed\">Software Engineer Interview Unleashed (paid course)</a>:<ul>\n<li>Learn how to make yourself ready for software engineer interviews from a former Google interviewer.</li>\n</ul>\n</li>\n<li><a href=\"https://www.udemy.com/python-for-data-structures-algorithms-and-interviews/\">Python for Data Structures, Algorithms, and Interviews (paid course)</a>:<ul>\n<li>A Python centric interview prep course which covers data structures, algorithms, mock interviews and much more.</li>\n</ul>\n</li>\n<li><a href=\"https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513\">Intro to Data Structures and Algorithms using Python (Udacity free course)</a>:<ul>\n<li>A free Python centric data structures and algorithms course.</li>\n</ul>\n</li>\n<li><a href=\"https://www.udacity.com/course/data-structures-and-algorithms-nanodegree--nd256\">Data Structures and Algorithms Nanodegree! (Udacity paid Nanodegree)</a>:<ul>\n<li>Get hands-on practice with over 100 data structures and algorithm exercises and guidance from a dedicated mentor to help prepare you for interviews and on-the-job scenarios.</li>\n</ul>\n</li>\n<li><a href=\"https://www.educative.io/courses/grokking-the-behavioral-interview\">Grokking the Behavioral Interview (Educative free course)</a>:<ul>\n<li>Many times, it’s not your technical competency that holds you back from landing your dream job, it’s how you perform on the behavioral interview.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Mock Interviews:</p>\n<ul>\n<li><a href=\"http://www.gainlo.co/#!/\">Gainlo.co: Mock interviewers from big companies</a> - I used this and it helped me relax for the phone screen and on-site interview</li>\n<li><a href=\"https://www.pramp.com/\">Pramp: Mock interviews from&#x2F;with peers</a> - peer-to-peer model of practice interviews</li>\n<li><a href=\"https://interviewing.io/\">interviewing.io: Practice mock interview with senior engineers</a> - anonymous algorithmic&#x2F;systems design interviews with senior engineers from FAANG anonymously</li>\n</ul>\n<h2 id=\"Be-thinking-of-for-when-the-interview-comes\"><a href=\"#Be-thinking-of-for-when-the-interview-comes\" class=\"headerlink\" title=\"Be thinking of for when the interview comes\"></a>Be thinking of for when the interview comes</h2><p>Think of about 20 interview questions you’ll get, along with the lines of the items below. Have at least one answer for each.<br>Have a story, not just data, about something you accomplished.</p>\n<ul>\n<li><p>Why do you want this job?</p>\n</li>\n<li><p>What’s a tough problem you’ve solved?</p>\n</li>\n<li><p>Biggest challenges faced?</p>\n</li>\n<li><p>Best&#x2F;worst designs seen?</p>\n</li>\n<li><p>Ideas for improving an existing product</p>\n</li>\n<li><p>How do you work best, as an individual and as part of a team?</p>\n</li>\n<li><p>Which of your skills or experiences would be assets in the role and why?</p>\n</li>\n<li><p>What did you most enjoy at [job x &#x2F; project y]?</p>\n</li>\n<li><p>What was the biggest challenge you faced at [job x &#x2F; project y]?</p>\n</li>\n<li><p>What was the hardest bug you faced at [job x &#x2F; project y]?</p>\n</li>\n<li><p>What did you learn at [job x &#x2F; project y]?</p>\n</li>\n<li><p>What would you have done better at [job x &#x2F; project y]?</p>\n</li>\n<li><p>If you find it hard to come up with good answers of these types of interview questions, here are some ideas: </p>\n<ul>\n<li><a href=\"https://ayedot.com/119/MiniBlog/General-Interview-Questions-and-their-Answers-for-Tech-Jobs\">General Interview Questions and their Answers</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Have-questions-for-the-interviewer\"><a href=\"#Have-questions-for-the-interviewer\" class=\"headerlink\" title=\"Have questions for the interviewer\"></a>Have questions for the interviewer</h2><p>Some of mine (I already may know the answers, but want their opinion or team perspective):</p>\n<ul>\n<li>How large is your team?</li>\n<li>What does your dev cycle look like? Do you do waterfall&#x2F;sprints&#x2F;agile?</li>\n<li>Are rushes to deadlines common? Or is there flexibility?</li>\n<li>How are decisions made in your team?</li>\n<li>How many meetings do you have per week?</li>\n<li>Do you feel your work environment helps you concentrate?</li>\n<li>What are you working on?</li>\n<li>What do you like about it?</li>\n<li>What is the work life like?</li>\n<li>How is the work&#x2F;life balance?</li>\n</ul>\n<h2 id=\"Once-You’ve-Got-The-Job\"><a href=\"#Once-You’ve-Got-The-Job\" class=\"headerlink\" title=\"Once You’ve Got The Job\"></a>Once You’ve Got The Job</h2><p>Congratulations!</p>\n<p>Keep learning.</p>\n<p>You’re never really done.</p>\n<hr>\n<p>Everything below this point is optional. It is NOT needed for an entry-level interview.<br>However, by studying these, you’ll get greater exposure to more CS concepts, and will be better prepared for<br>any software engineering job. You’ll be a much more well-rounded software engineer.</p>\n<hr>\n<h2 id=\"Additional-Books\"><a href=\"#Additional-Books\" class=\"headerlink\" title=\"Additional Books\"></a>Additional Books</h2><p>📚 These are here so you can dive into a topic you find interesting.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/dp/013937681X\">The Unix Programming Environment</a><ul>\n<li>An oldie but a goodie</li>\n</ul>\n</li>\n<li><a href=\"https://www.amazon.com/dp/1593273894/\">The Linux Command Line: A Complete Introduction</a><ul>\n<li>A modern option</li>\n</ul>\n</li>\n<li><a href=\"https://en.wikipedia.org/wiki/TCP/IP_Illustrated\">TCP&#x2F;IP Illustrated Series</a></li>\n<li><a href=\"https://www.amazon.com/gp/product/0596007124/\">Head First Design Patterns</a><ul>\n<li>A gentle introduction to design patterns</li>\n</ul>\n</li>\n<li><a href=\"https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612\">Design Patterns: Elements of Reusable Object-Oriente​d Software</a><ul>\n<li>AKA the “Gang Of Four” book, or GOF</li>\n<li>The canonical design patterns book</li>\n</ul>\n</li>\n<li><a href=\"http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1849967202\">Algorithm Design Manual</a> (Skiena)<ul>\n<li>As a review and problem recognition</li>\n<li>The algorithm catalog portion is well beyond the scope of difficulty you’ll get in an interview</li>\n<li>This book has 2 parts:<ul>\n<li>Class textbook on data structures and algorithms<ul>\n<li>Pros:<ul>\n<li>Is a good review as any algorithms textbook would be</li>\n<li>Nice stories from his experiences solving problems in industry and academia</li>\n<li>Code examples in C</li>\n</ul>\n</li>\n<li>Cons:<ul>\n<li>Can be as dense or impenetrable as CLRS, and in some cases, CLRS may be a better alternative for some subjects</li>\n<li>Chapters 7, 8, 9 can be painful to try to follow, as some items are not explained well or require more brain than I have</li>\n<li>Don’t get me wrong: I like Skiena, his teaching style, and mannerisms, but I may not be Stony Brook material</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Algorithm catalog:<ul>\n<li>This is the real reason you buy this book.</li>\n<li>This book is better as an algorithm reference, and not something you read cover to cover.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Can rent it on Kindle</li>\n<li>Answers:<ul>\n<li><a href=\"https://web.archive.org/web/20150404194210/http://www.algorithm.cs.sunysb.edu/algowiki/index.php/The_Algorithms_Design_Manual_(Second_Edition)\">Solutions</a></li>\n</ul>\n</li>\n<li><a href=\"http://www3.cs.stonybrook.edu/~skiena/algorist/book/errata\">Errata</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.amazon.com/Write-Great-Code-Understanding-Machine/dp/1593270038\">Write Great Code: Volume 1: Understanding the Machine</a><ul>\n<li>The book was published in 2004, and is somewhat outdated, but it’s a terrific resource for understanding a computer in brief</li>\n<li>The author invented <a href=\"https://en.wikipedia.org/wiki/High_Level_Assembly\">HLA</a>, so take mentions and examples in HLA with a grain of salt. Not widely used, but decent examples of what assembly looks like</li>\n<li>These chapters are worth the read to give you a nice foundation:<ul>\n<li>Chapter 2 - Numeric Representation</li>\n<li>Chapter 3 - Binary Arithmetic and Bit Operations</li>\n<li>Chapter 4 - Floating-Point Representation</li>\n<li>Chapter 5 - Character Representation</li>\n<li>Chapter 6 - Memory Organization and Access</li>\n<li>Chapter 7 - Composite Data Types and Memory Objects</li>\n<li>Chapter 9 - CPU Architecture</li>\n<li>Chapter 10 - Instruction Set Architecture</li>\n<li>Chapter 11 - Memory Architecture and Organization</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://www.amazon.com/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X\">Introduction to Algorithms</a><ul>\n<li><strong>Important:</strong> Reading this book will only have limited value. This book is a great review of algorithms and data structures, but won’t teach you how to write good code. You have to be able to code a decent solution efficiently</li>\n<li>AKA CLR, sometimes CLRS, because Stein was late to the game</li>\n</ul>\n</li>\n<li><a href=\"https://www.amazon.com/dp/0128119055\">Computer Architecture, Sixth Edition: A Quantitative Approach</a><ul>\n<li>For a richer, more up-to-date (2017), but longer treatment</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"System-Design-Scalability-Data-Handling\"><a href=\"#System-Design-Scalability-Data-Handling\" class=\"headerlink\" title=\"System Design, Scalability, Data Handling\"></a>System Design, Scalability, Data Handling</h2><p><strong>You can expect system design questions if you have 4+ years of experience.</strong></p>\n<ul>\n<li>Scalability and System Design are very large topics with many topics and resources, since<br>there is a lot to consider when designing a software&#x2F;hardware system that can scale.<br>Expect to spend quite a bit of time on this</li>\n<li>Considerations:<ul>\n<li>Scalability<ul>\n<li>Distill large data sets to single values</li>\n<li>Transform one data set to another</li>\n<li>Handling obscenely large amounts of data</li>\n</ul>\n</li>\n<li>System design<ul>\n<li>features sets</li>\n<li>interfaces</li>\n<li>class hierarchies</li>\n<li>designing a system under certain constraints</li>\n<li>simplicity and robustness</li>\n<li>tradeoffs</li>\n<li>performance analysis and optimization</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <strong>START HERE</strong>: <a href=\"https://github.com/donnemartin/system-design-primer\">The System Design Primer</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.hiredintech.com/system-design/\">System Design from HiredInTech</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023\">How Do I Prepare To Answer Design Questions In A Technical Interview?</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/\">8 Things You Need to Know Before a System Design Interview</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=UrYLYV7WSHM\">Database Normalization - 1NF, 2NF, 3NF and 4NF (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/checkcheckzz/system-design-interview\">System Design Interview</a> - There are a lot of resources in this one. Look through the articles and examples. I put some of them below</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://web.archive.org/web/20120716060051/http://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/\">How to ace a systems design interview</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/\">Numbers Everyone Should Know</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html\">How long does it take to make a context switch?</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=srOgpXECblk\">Transactions Across Datacenters (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://ksat.me/a-plain-english-introduction-to-cap-theorem\">A plain English introduction to CAP Theorem</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=cQP8WApzIQQ&list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB\">MIT 6.824: Distributed Systems, Spring 2020 (20 videos)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Consensus Algorithms:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> Paxos - <a href=\"https://www.youtube.com/watch?v=s8JqcZtvnsM\">Paxos Agreement - Computerphile (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Raft - <a href=\"https://www.youtube.com/watch?v=P9Ydif5_qvE\">An Introduction to the Raft Distributed Consensus Algorithm (video)</a><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://raft.github.io/\">Easy-to-read paper</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://thesecretlivesofdata.com/raft/\">Infographic</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.tom-e-white.com/2007/11/consistent-hashing.html\">Consistent Hashing</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://horicky.blogspot.com/2009/11/nosql-patterns.html\">NoSQL Patterns</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Scalability:<ul>\n<li>You don’t need all of these. Just pick a few that interest you.</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=-W9F__D3oY4\">Great overview (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Short series:<ul>\n<li><a href=\"http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones\">Clones</a></li>\n<li><a href=\"http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database\">Database</a></li>\n<li><a href=\"http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache\">Cache</a></li>\n<li><a href=\"http://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism\">Asynchronism</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.aosabook.org/en/distsys.html\">Scalable Web Architecture and Distributed Systems</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf\">Fallacies of Distributed Computing Explained</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=modXC5IWTJI\">Jeff Dean - Building Software Systems At Google and Lessons Learned (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://lethain.com/introduction-to-architecting-systems-for-scale/\">Introduction to Architecting Systems for Scale</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=9nWyWwY2Onc\">Scaling mobile games to a global audience using App Engine and Cloud Datastore (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=H4vMcD7zKM0\">How Google Does Planet-Scale Engineering for Planet-Scale Infra (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.topcoder.com/thrive/articles/The%20Importance%20of%20Algorithms\">The Importance of Algorithms</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html\">Sharding</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=p0jGmgIrf_M&list=PLRXxvay_m8gqVlExPC5DG3TGWJTaBgqSA&index=4\">Engineering for the Long Game - Astrid Atkinson Keynote(video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2012/3/26/7-years-of-youtube-scalability-lessons-in-30-minutes.html\">7 Years Of YouTube Scalability Lessons In 30 Minutes</a><ul>\n<li><a href=\"https://www.youtube.com/watch?v=G-lGCC4KKok\">video</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/8/15/how-paypal-scaled-to-billions-of-transactions-daily-using-ju.html\">How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://blog.clevertap.com/how-to-remove-duplicates-in-large-datasets/\">How to Remove Duplicates in Large Datasets</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=3vV4YiqKm1o\">A look inside Etsy’s scale and engineering culture with Jon Cowie (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://thenewstack.io/led-amazon-microservices-architecture/\">What Led Amazon to its Own Microservices Architecture</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://eng.uber.com/trip-data-squeeze/\">To Compress Or Not To Compress, That Was Uber’s Question</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/2/25/when-should-approximate-query-processing-be-used.html\">When Should Approximate Query Processing Be Used?</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/2/23/googles-transition-from-single-datacenter-to-failover-to-a-n.html\">Google’s Transition From Single Datacenter, To Failover, To A Native Multihomed Architecture</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html\">The Image Optimization Technology That Serves Millions Of Requests Per Day</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/2/1/a-patreon-architecture-short.html\">A Patreon Architecture Short</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/1/27/tinder-how-does-one-of-the-largest-recommendation-engines-de.html\">Tinder: How Does One Of The Largest Recommendation Engines Decide Who You’ll See Next?</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html\">Design Of A Modern Cache</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/1/13/live-video-streaming-at-facebook-scale.html\">Live Video Streaming At Facebook Scale</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html\">A Beginner’s Guide To Scaling To 11 Million+ Users On Amazon’s AWS</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2015/11/9/a-360-degree-view-of-the-entire-netflix-stack.html\">A 360 Degree View Of The Entire Netflix Stack</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-crush-it\">Latency Is Everywhere And It Costs You Sales - How To Crush It</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances\">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html\">Salesforce Architecture - How They Handle 1.3 Billion Transactions A Day</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html\">ESPN’s Architecture At Scale - Operating At 100,000 Duh Nuh Nuhs Per Second</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> See “Messaging, Serialization, and Queueing Systems” way below for info on some of the technologies that can glue services together</li>\n<li><input disabled=\"\" type=\"checkbox\"> Twitter:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=5cKTP36HVgI\">O’Reilly MySQL CE 2011: Jeremy Cole, “Big and Small Data at @Twitter” (video)</a></li>\n<li><a href=\"https://www.infoq.com/presentations/Twitter-Timeline-Scalability\">Timelines at Scale</a></li>\n</ul>\n</li>\n<li>For even more, see “Mining Massive Datasets” video series in the <a href=\"#video-series\">Video Series</a> section</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Practicing the system design process: Here are some ideas to try working through on paper, each with some documentation on how it was handled in the real world:<ul>\n<li>review: <a href=\"https://github.com/donnemartin/system-design-primer\">The System Design Primer</a></li>\n<li><a href=\"http://www.hiredintech.com/system-design/\">System Design from HiredInTech</a></li>\n<li><a href=\"https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/system-design.pdf\">cheat sheet</a></li>\n<li>flow:<ol>\n<li>Understand the problem and scope:<ul>\n<li>Define the use cases, with interviewer’s help</li>\n<li>Suggest additional features</li>\n<li>Remove items that interviewer deems out of scope</li>\n<li>Assume high availability is required, add as a use case</li>\n</ul>\n</li>\n<li>Think about constraints:<ul>\n<li>Ask how many requests per month</li>\n<li>Ask how many requests per second (they may volunteer it or make you do the math)</li>\n<li>Estimate reads vs. writes percentage</li>\n<li>Keep 80&#x2F;20 rule in mind when estimating</li>\n<li>How much data written per second</li>\n<li>Total storage required over 5 years</li>\n<li>How much data read per second</li>\n</ul>\n</li>\n<li>Abstract design:<ul>\n<li>Layers (service, data, caching)</li>\n<li>Infrastructure: load balancing, messaging</li>\n<li>Rough overview of any key algorithm that drives the service</li>\n<li>Consider bottlenecks and determine solutions</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Exercises:<ul>\n<li><a href=\"https://blog.twitter.com/2010/announcing-snowflake\">Design a random unique ID generation system</a></li>\n<li><a href=\"http://www.slideshare.net/dvirsky/introduction-to-redis\">Design a key-value database</a></li>\n<li><a href=\"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html\">Design a picture sharing system</a></li>\n<li><a href=\"http://ijcai13.org/files/tutorial_slides/td3.pdf\">Design a recommendation system</a></li>\n<li><a href=\"http://www.hiredintech.com/system-design/the-system-design-process/\">Design a URL-shortener system: copied from above</a></li>\n<li><a href=\"https://web.archive.org/web/20220217064329/https://adayinthelifeof.nl/2011/02/06/memcache-internals/\">Design a cache system</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Additional-Learning\"><a href=\"#Additional-Learning\" class=\"headerlink\" title=\"Additional Learning\"></a>Additional Learning</h2><p>I added them to help you become a well-rounded software engineer, and to be aware of certain<br>technologies and algorithms, so you’ll have a bigger toolbox.</p>\n<ul>\n<li><h3 id=\"Compilers\"><a href=\"#Compilers\" class=\"headerlink\" title=\"Compilers\"></a>Compilers</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=IhC7sdYe-Jg\">How a Compiler Works in ~1 minute (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=CSZLNYF4Klo\">Harvard CS50 - Compilers (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=twodd1KFfGk\">C++ (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=FnGCDLhaxKU\">Understanding Compiler Optimization (C++) (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Emacs-and-vi-m\"><a href=\"#Emacs-and-vi-m\" class=\"headerlink\" title=\"Emacs and vi(m)\"></a>Emacs and vi(m)</h3><ul>\n<li>Familiarize yourself with a unix-based code editor</li>\n<li>vi(m):<ul>\n<li><a href=\"https://www.youtube.com/watch?v=5givLEMcINQ&index=1&list=PL13bz4SHGmRxlZVmWQ9DvXo1fEg4UdGkr\">Editing With vim 01 - Installation, Setup, and The Modes (video)</a></li>\n<li><a href=\"http://vim-adventures.com/\">VIM Adventures</a></li>\n<li>set of 4 videos:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=SI8TeVMX8pk\">The vi&#x2F;vim editor - Lesson 1</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=F3OO7ZIOaJE\">The vi&#x2F;vim editor - Lesson 2</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ZYEccA_nMaI\">The vi&#x2F;vim editor - Lesson 3</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=1lYD5gwgZIA\">The vi&#x2F;vim editor - Lesson 4</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Using_Vi_instead_of_Emacs\">Using Vi Instead of Emacs</a></li>\n</ul>\n</li>\n<li>emacs:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=hbmV1bnQ-i0\">Basics Emacs Tutorial (video)</a></li>\n<li>set of 3 (videos):<ul>\n<li><a href=\"https://www.youtube.com/watch?v=ujODL7MD04Q\">Emacs Tutorial (Beginners) -Part 1- File commands, cut&#x2F;copy&#x2F;paste, cursor commands</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=XWpsRupJ4II\">Emacs Tutorial (Beginners) -Part 2- Buffer management, search, M-x grep and rgrep modes</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=paSgzPso-yc\">Emacs Tutorial (Beginners) -Part 3- Expressions, Statements, ~&#x2F;.emacs file and packages</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=JWD1Fpdd4Pc\">Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs (video)</a></li>\n<li><a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Writing_C_programs_with_Emacs\">Writing C Programs With Emacs</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=48JlgiBpw_I&t=0s\">The Absolute Beginner’s Guide to Emacs (video by David Wilson)</a></li>\n<li><a href=\"https://systemcrafters.net/emacs-essentials/absolute-beginners-guide-to-emacs/\">The Absolute Beginner’s Guide to Emacs (notes by David Wilson)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Unix-command-line-tools\"><a href=\"#Unix-command-line-tools\" class=\"headerlink\" title=\"Unix command line tools\"></a>Unix command line tools</h3><ul>\n<li>I filled in the list below from good tools.</li>\n<li>bash</li>\n<li>cat</li>\n<li>grep</li>\n<li>sed</li>\n<li>awk</li>\n<li>curl or wget</li>\n<li>sort</li>\n<li>tr</li>\n<li>uniq</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Strace\">strace</a></li>\n<li><a href=\"https://danielmiessler.com/study/tcpdump/\">tcpdump</a></li>\n</ul>\n</li>\n<li><h3 id=\"Information-theory-videos\"><a href=\"#Information-theory-videos\" class=\"headerlink\" title=\"Information theory (videos)\"></a>Information theory (videos)</h3><ul>\n<li><a href=\"https://www.khanacademy.org/computing/computer-science/informationtheory\">Khan Academy</a></li>\n<li>More about Markov processes:<ul>\n<li><a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/waxgx/core-markov-text-generation\">Core Markov Text Generation</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/gZhiC/core-implementing-markov-text-generation\">Core Implementing Markov Text Generation</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/EUjrq/project-markov-text-generation-walk-through\">Project &#x3D; Markov Text Generation Walk Through</a></li>\n</ul>\n</li>\n<li>See more in MIT 6.050J Information and Entropy series below</li>\n</ul>\n</li>\n<li><h3 id=\"Parity-Hamming-Code-videos\"><a href=\"#Parity-Hamming-Code-videos\" class=\"headerlink\" title=\"Parity &amp; Hamming Code (videos)\"></a>Parity &amp; Hamming Code (videos)</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=q-3BctoUpHE\">Intro</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=DdMcAUlxh1M\">Parity</a></li>\n<li>Hamming Code:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=1A_NcXxdoCc\">Error detection</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=JAMLuxdHH8o\">Error correction</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=wbH2VxzmoZk\">Error Checking</a></li>\n</ul>\n</li>\n<li><h3 id=\"Entropy\"><a href=\"#Entropy\" class=\"headerlink\" title=\"Entropy\"></a>Entropy</h3><ul>\n<li>Also see videos below</li>\n<li>Make sure to watch information theory videos first</li>\n<li><a href=\"https://youtu.be/JnJq3Py0dyM?t=176\">Information Theory, Claude Shannon, Entropy, Redundancy, Data Compression &amp; Bits (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Cryptography\"><a href=\"#Cryptography\" class=\"headerlink\" title=\"Cryptography\"></a>Cryptography</h3><ul>\n<li>Also see videos below</li>\n<li>Make sure to watch information theory videos first</li>\n<li><a href=\"https://www.khanacademy.org/computing/computer-science/cryptography\">Khan Academy Series</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=KqqOXndnvic&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=30\">Cryptography: Hash Functions</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=9TNI2wHmaeI&index=31&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">Cryptography: Encryption</a></li>\n</ul>\n</li>\n<li><h3 id=\"Compression\"><a href=\"#Compression\" class=\"headerlink\" title=\"Compression\"></a>Compression</h3><ul>\n<li>Make sure to watch information theory videos first</li>\n<li>Computerphile (videos):<ul>\n<li><a href=\"https://www.youtube.com/watch?v=Lto-ajuqW3w\">Compression</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=M5c_RFKVkko\">Entropy in Compression</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=umTbivyJoiI\">Upside Down Trees (Huffman Trees)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=DV8efuB3h2g\">EXTRA BITS&#x2F;TRITS - Huffman Trees</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=goOa3DGezUA\">Elegant Compression in Text (The LZ 77 Method)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=cCDCfoHTsaU\">Text Compression Meets Probabilities</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLOU2XLYxmsIJGErt5rrCqaSGTMyyqNt2H\">Compressor Head videos</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=whGwm0Lky2s\">(optional) Google Developers Live: GZIP is not enough!</a></li>\n</ul>\n</li>\n<li><h3 id=\"Computer-Security\"><a href=\"#Computer-Security\" class=\"headerlink\" title=\"Computer Security\"></a>Computer Security</h3><ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">MIT (23 videos)</a><ul>\n<li><a href=\"https://www.youtube.com/watch?v=GqmQg-cszw4&index=1&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Introduction, Threat Models</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=6bwzNg5qQ0o&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&index=2\">Control Hijacking Attacks</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=drQyrzRoRiA&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&index=3\">Buffer Overflow Exploits and Defenses</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=6SIJmoE9L9g&index=4&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Privilege Separation</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8VqTSY-11F4&index=5&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Capabilities</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=VEV74hwASeU&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&index=6\">Sandboxing Native Code</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=chkFBigodIw&index=7&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Web Security Model</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=EBQIGy1ROLY&index=8&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Securing Web Applications</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=yRVZPvHYHzw&index=9&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Symbolic Execution</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=SIEVvk3NVuk&index=11&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Network Security</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=QOtA76ga_fY&index=12&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Network Protocols</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=PuVMkSEcPiI&index=15&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Side-Channel Attacks</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Garbage-collection\"><a href=\"#Garbage-collection\" class=\"headerlink\" title=\"Garbage collection\"></a>Garbage collection</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=iHVs_HkjdmI\">GC in Python (video)</a></li>\n<li><a href=\"https://www.infoq.com/presentations/garbage-collection-benefits\">Deep Dive Java: Garbage Collection is Good!</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=P-8Z0-MhdQs&list=PLdzf4Clw0VbOEWOS_sLhT_9zaiQDrS5AR&index=3\">Deep Dive Python: Garbage Collection in CPython (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Parallel-Programming\"><a href=\"#Parallel-Programming\" class=\"headerlink\" title=\"Parallel Programming\"></a>Parallel Programming</h3><ul>\n<li><a href=\"https://www.coursera.org/learn/parprog1/home/week/1\">Coursera (Scala)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=uY85GkaYzBk\">Efficient Python for High Performance Parallel Computing (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Messaging-Serialization-and-Queueing-Systems\"><a href=\"#Messaging-Serialization-and-Queueing-Systems\" class=\"headerlink\" title=\"Messaging, Serialization, and Queueing Systems\"></a>Messaging, Serialization, and Queueing Systems</h3><ul>\n<li><a href=\"https://thrift.apache.org/\">Thrift</a><ul>\n<li><a href=\"http://thrift-tutorial.readthedocs.io/en/latest/intro.html\">Tutorial</a></li>\n</ul>\n</li>\n<li><a href=\"https://developers.google.com/protocol-buffers/\">Protocol Buffers</a><ul>\n<li><a href=\"https://developers.google.com/protocol-buffers/docs/tutorials\">Tutorials</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.grpc.io/\">gRPC</a><ul>\n<li><a href=\"https://www.youtube.com/watch?v=5tmPvSe7xXQ&list=PLcTqM9n_dieN0k1nSeN36Z_ppKnvMJoly&index=1\">gRPC 101 for Java Developers (video)</a></li>\n</ul>\n</li>\n<li><a href=\"http://redis.io/\">Redis</a><ul>\n<li><a href=\"http://try.redis.io/\">Tutorial</a></li>\n</ul>\n</li>\n<li><a href=\"https://aws.amazon.com/sqs/\">Amazon SQS (queue)</a></li>\n<li><a href=\"https://aws.amazon.com/sns/\">Amazon SNS (pub-sub)</a></li>\n<li><a href=\"https://www.rabbitmq.com/\">RabbitMQ</a><ul>\n<li><a href=\"https://www.rabbitmq.com/getstarted.html\">Get Started</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.celeryproject.org/\">Celery</a><ul>\n<li><a href=\"http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html\">First Steps With Celery</a></li>\n</ul>\n</li>\n<li><a href=\"http://zeromq.org/\">ZeroMQ</a><ul>\n<li><a href=\"http://zeromq.org/intro:read-the-manual\">Intro - Read The Manual</a></li>\n</ul>\n</li>\n<li><a href=\"http://activemq.apache.org/\">ActiveMQ</a></li>\n<li><a href=\"http://kafka.apache.org/documentation.html#introduction\">Kafka</a></li>\n<li><a href=\"http://msgpack.org/index.html\">MessagePack</a></li>\n<li><a href=\"https://avro.apache.org/\">Avro</a></li>\n</ul>\n</li>\n<li><h3 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A*\"></a>A*</h3><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/A*_search_algorithm\">A Search Algorithm</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-L-WgKMFuhE\">A* Pathfinding (E01: algorithm explanation) (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Fast-Fourier-Transform\"><a href=\"#Fast-Fourier-Transform\" class=\"headerlink\" title=\"Fast Fourier Transform\"></a>Fast Fourier Transform</h3><ul>\n<li><a href=\"https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/\">An Interactive Guide To The Fourier Transform</a></li>\n<li><a href=\"http://www.askamathematician.com/2012/09/q-what-is-a-fourier-transform-what-is-it-used-for/\">What is a Fourier transform? What is it used for?</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Xxut2PN-V8Q\">What is the Fourier Transform? (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=iTMn0Kt18tg&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=4\">Divide &amp; Conquer: FFT (video)</a></li>\n<li><a href=\"http://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/\">Understanding The FFT</a></li>\n</ul>\n</li>\n<li><h3 id=\"Bloom-Filter\"><a href=\"#Bloom-Filter\" class=\"headerlink\" title=\"Bloom Filter\"></a>Bloom Filter</h3><ul>\n<li>Given a Bloom filter with m bits and k hashing functions, both insertion and membership testing are O(k)</li>\n<li><a href=\"https://www.youtube.com/watch?v=-SuTGoFYjZs\">Bloom Filters (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=qBTdukbzc78\">Bloom Filters | Mining of Massive Datasets | Stanford University (video)</a></li>\n<li><a href=\"http://billmill.org/bloomfilter-tutorial/\">Tutorial</a></li>\n<li><a href=\"http://blog.michaelschmatz.com/2016/04/11/how-to-write-a-bloom-filter-cpp/\">How To Write A Bloom Filter App</a></li>\n</ul>\n</li>\n<li><h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><ul>\n<li><a href=\"http://highscalability.com/blog/2012/4/5/big-data-counting-how-to-count-a-billion-distinct-objects-us.html\">How To Count A Billion Distinct Objects Using Only 1.5KB Of Memory</a></li>\n</ul>\n</li>\n<li><h3 id=\"Locality-Sensitive-Hashing\"><a href=\"#Locality-Sensitive-Hashing\" class=\"headerlink\" title=\"Locality-Sensitive Hashing\"></a>Locality-Sensitive Hashing</h3><ul>\n<li>Used to determine the similarity of documents</li>\n<li>The opposite of MD5 or SHA which are used to determine if 2 documents&#x2F;strings are exactly the same</li>\n<li><a href=\"http://ferd.ca/simhashing-hopefully-made-simple.html\">Simhashing (hopefully) made simple</a></li>\n</ul>\n</li>\n<li><h3 id=\"van-Emde-Boas-Trees\"><a href=\"#van-Emde-Boas-Trees\" class=\"headerlink\" title=\"van Emde Boas Trees\"></a>van Emde Boas Trees</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=hmReJCupbNU&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=6\">Divide &amp; Conquer: van Emde Boas Trees (video)</a></li>\n<li><a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2012/lecture-notes/MIT6_046JS12_lec15.pdf\">MIT Lecture Notes</a></li>\n</ul>\n</li>\n<li><h3 id=\"Augmented-Data-Structures\"><a href=\"#Augmented-Data-Structures\" class=\"headerlink\" title=\"Augmented Data Structures\"></a>Augmented Data Structures</h3><ul>\n<li><a href=\"https://archive.org/details/ucberkeley_webcast_zksIj9O8_jc\">CS 61B Lecture 39: Augmenting Data Structures</a></li>\n</ul>\n</li>\n<li><h3 id=\"Balanced-search-trees\"><a href=\"#Balanced-search-trees\" class=\"headerlink\" title=\"Balanced search trees\"></a>Balanced search trees</h3><ul>\n<li><p>Know at least one type of balanced binary tree (and know how it’s implemented):</p>\n</li>\n<li><p>“Among balanced search trees, AVL and 2&#x2F;3 trees are now passé, and red-black trees seem to be more popular.<br>  A particularly interesting self-organizing data structure is the splay tree, which uses rotations<br>  to move any accessed key to the root.” - Skiena</p>\n</li>\n<li><p>Of these, I chose to implement a splay tree. From what I’ve read, you won’t implement a<br>  balanced search tree in your interview. But I wanted exposure to coding one up<br>  and let’s face it, splay trees are the bee’s knees. I did read a lot of red-black tree code</p>\n<ul>\n<li>Splay tree: insert, search, delete functions<br>  If you end up implementing red&#x2F;black tree try just these:</li>\n<li>Search and insertion functions, skipping delete</li>\n</ul>\n</li>\n<li><p>I want to learn more about B-Tree since it’s used so widely with very large data sets</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree\">Self-balancing binary search tree</a></p>\n</li>\n<li><p><strong>AVL trees</strong></p>\n<ul>\n<li>In practice:<br>  From what I can tell, these aren’t used much in practice, but I could see where they would be:<br>  The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly<br>  balanced than red–black trees, leading to slower insertion and removal but faster retrieval. This makes it<br>  attractive for data structures that may be built once and loaded without reconstruction, such as language<br>  dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter)</li>\n<li><a href=\"https://www.youtube.com/watch?v=FNeL18KsWPc&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=6\">MIT AVL Trees &#x2F; AVL Sort (video)</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/Qq5E0/avl-trees\">AVL Trees (video)</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/PKEBC/avl-tree-implementation\">AVL Tree Implementation (video)</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/22BgE/split-and-merge\">Split And Merge</a></li>\n</ul>\n</li>\n<li><p><strong>Splay trees</strong></p>\n<ul>\n<li>In practice:<br>  Splay trees are typically used in the implementation of caches, memory allocators, routers, garbage collectors,<br>  data compression, ropes (replacement of string used for long text strings), in Windows NT (in the virtual memory,<br>  networking and file system code) etc</li>\n<li><a href=\"https://archive.org/details/ucberkeley_webcast_G5QIXywcJlY\">CS 61B: Splay Trees (video)</a></li>\n<li>MIT Lecture: Splay Trees:<ul>\n<li>Gets very mathy, but watch the last 10 minutes for sure.</li>\n<li><a href=\"https://www.youtube.com/watch?v=QnPl_Y6EqMo\">Video</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Red&#x2F;black trees</strong></p>\n<ul>\n<li>These are a translation of a 2-3 tree (see below).</li>\n<li>In practice:<br>  Red–black trees offer worst-case guarantees for insertion time, deletion time, and search time.<br>  Not only does this make them valuable in time-sensitive applications such as real-time applications,<br>  but it makes them valuable building blocks in other data structures which provide worst-case guarantees;<br>  for example, many data structures used in computational geometry can be based on red–black trees, and<br>  the Completely Fair Scheduler used in current Linux kernels uses red–black trees. In the version 8 of Java,<br>  the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor<br>  hashcodes, a Red-Black tree is used</li>\n<li><a href=\"https://youtu.be/1W3x0f_RmUo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3871\">Aduni - Algorithms - Lecture 4 (link jumps to starting point) (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hm2GHwyKF1o&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=5\">Aduni - Algorithms - Lecture 5 (video)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Red%E2%80%93black_tree\">Red-Black Tree</a></li>\n<li><a href=\"https://www.topcoder.com/thrive/articles/An%20Introduction%20to%20Binary%20Search%20and%20Red-Black%20Trees\">An Introduction To Binary Search And Red Black Tree</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin\">[Review] Red-Black Trees (playlist) in 30 minutes (video)</a></li>\n</ul>\n</li>\n<li><p><strong>2-3 search trees</strong></p>\n<ul>\n<li>In practice:<br>  2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees).</li>\n<li>You would use 2-3 tree very rarely because its implementation involves different types of nodes. Instead, people use Red Black trees.</li>\n<li><a href=\"https://www.youtube.com/watch?v=C3SsdUqasD4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=2\">23-Tree Intuition and Definition (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=iYvBtGKsqSg&index=3&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6\">Binary View of 23-Tree</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=TOb1tuEZ2X4&index=5&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">2-3 Trees (student recitation) (video)</a></li>\n</ul>\n</li>\n<li><p><strong>2-3-4 Trees (aka 2-4 trees)</strong></p>\n<ul>\n<li>In practice:<br>  For every 2-4 tree, there are corresponding red–black trees with data elements in the same order. The insertion and deletion<br>  operations on 2-4 trees are also equivalent to color-flipping and rotations in red–black trees. This makes 2-4 trees an<br>  important tool for understanding the logic behind red–black trees, and this is why many introductory algorithm texts introduce<br>  2-4 trees just before red–black trees, even though <strong>2-4 trees are not often used in practice</strong>.</li>\n<li><a href=\"https://archive.org/details/ucberkeley_webcast_zqrqYXkth6Q\">CS 61B Lecture 26: Balanced Search Trees (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=DQdMYevEyE4&index=4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6\">Bottom Up 234-Trees (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=2679VQ26Fp4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=5\">Top Down 234-Trees (video)</a></li>\n</ul>\n</li>\n<li><p><strong>N-ary (K-ary, M-ary) trees</strong></p>\n<ul>\n<li>note: the N or K is the branching factor (max branches)</li>\n<li>binary trees are a 2-ary tree, with branching factor &#x3D; 2</li>\n<li>2-3 trees are 3-ary</li>\n<li><a href=\"https://en.wikipedia.org/wiki/K-ary_tree\">K-Ary Tree</a></li>\n</ul>\n</li>\n<li><p><strong>B-Trees</strong></p>\n<ul>\n<li>Fun fact: it’s a mystery, but the B could stand for Boeing, Balanced, or Bayer (co-inventor).</li>\n<li>In Practice:<br>  B-Trees are widely used in databases. Most modern filesystems use B-trees (or Variants). In addition to<br>  its use in databases, the B-tree is also used in filesystems to allow quick random access to an arbitrary<br>  block in a particular file. The basic problem is turning the file block i address into a disk block<br>  (or perhaps to a cylinder-head-sector) address</li>\n<li><a href=\"https://en.wikipedia.org/wiki/B-tree\">B-Tree</a></li>\n<li><a href=\"http://btechsmartclass.com/data_structures/b-trees.html\">B-Tree Datastructure</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=I22wEC1tTGo&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=6\">Introduction to B-Trees (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=s3bCdZGrgpA&index=7&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6\">B-Tree Definition and Insertion (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=svfnVhJOfMc&index=8&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6\">B-Tree Deletion (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=V3omVLzI0WE&index=7&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf\">MIT 6.851 - Memory Hierarchy Models (video)</a><br>  - covers cache-oblivious B-Trees, very interesting data structures<br>  - the first 37 minutes are very technical, may be skipped (B is block size, cache line size)</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZNFPPv98DjTdD9X6UI9KMHz\">[Review] B-Trees (playlist) in 26 minutes (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"k-D-Trees\"><a href=\"#k-D-Trees\" class=\"headerlink\" title=\"k-D Trees\"></a>k-D Trees</h3><ul>\n<li>Great for finding number of points in a rectangle or higher dimension object</li>\n<li>A good fit for k-nearest neighbors</li>\n<li><a href=\"https://www.youtube.com/watch?v=Y4ZgLlDfKDg\">kNN K-d tree algorithm (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Skip-lists\"><a href=\"#Skip-lists\" class=\"headerlink\" title=\"Skip lists\"></a>Skip lists</h3><ul>\n<li>“These are somewhat of a cult data structure” - Skiena</li>\n<li><a href=\"https://www.youtube.com/watch?v=2g9OSRKJuzM&index=10&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">Randomization: Skip Lists (video)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Skip_list\">For animations and a little more detail</a></li>\n</ul>\n</li>\n<li><h3 id=\"Network-Flows\"><a href=\"#Network-Flows\" class=\"headerlink\" title=\"Network Flows\"></a>Network Flows</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=Tl90tNtKvxs\">Ford-Fulkerson in 5 minutes — Step by step example (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=v1VgJmkEJW0\">Ford-Fulkerson Algorithm (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=2vhN4Ice5jI\">Network Flows (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Disjoint-Sets-Union-Find\"><a href=\"#Disjoint-Sets-Union-Find\" class=\"headerlink\" title=\"Disjoint Sets &amp; Union Find\"></a>Disjoint Sets &amp; Union Find</h3><ul>\n<li><a href=\"https://archive.org/details/ucberkeley_webcast_MAEGXTwmUsI\">UCB 61B - Disjoint Sets; Sorting &amp; selection (video)</a></li>\n<li><a href=\"https://www.coursera.org/learn/algorithms-part1/home/week/1\">Sedgewick Algorithms - Union-Find (6 videos)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Math-for-Fast-Processing\"><a href=\"#Math-for-Fast-Processing\" class=\"headerlink\" title=\"Math for Fast Processing\"></a>Math for Fast Processing</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=eCaXlAaN2uE&index=11&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">Integer Arithmetic, Karatsuba Multiplication (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ru7mWZJlRQg\">The Chinese Remainder Theorem (used in cryptography) (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Treap\"><a href=\"#Treap\" class=\"headerlink\" title=\"Treap\"></a>Treap</h3><ul>\n<li>Combination of a binary search tree and a heap</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Treap\">Treap</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=6podLUYinH8\">Data Structures: Treaps explained (video)</a></li>\n<li><a href=\"https://www.cs.cmu.edu/~scandal/papers/treaps-spaa98.pdf\">Applications in set operations</a></li>\n</ul>\n</li>\n<li><h3 id=\"Linear-Programming-videos\"><a href=\"#Linear-Programming-videos\" class=\"headerlink\" title=\"Linear Programming (videos)\"></a>Linear Programming (videos)</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=M4K6HYLHREQ\">Linear Programming</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=2ACJ9ewUC6U\">Finding minimum cost</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8AA_81xI3ik\">Finding maximum value</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=44pAWI7v5Zk\">Solve Linear Equations with Python - Simplex Algorithm</a></li>\n</ul>\n</li>\n<li><h3 id=\"Geometry-Convex-hull-videos\"><a href=\"#Geometry-Convex-hull-videos\" class=\"headerlink\" title=\"Geometry, Convex hull (videos)\"></a>Geometry, Convex hull (videos)</h3><ul>\n<li><a href=\"https://youtu.be/XIAQRlNkJAw?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3164\">Graph Alg. IV: Intro to geometric algorithms - Lecture 9</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=J5aJEcOr6Eo&index=10&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\">Geometric Algorithms: Graham &amp; Jarvis - Lecture 10</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=EzeYI7p9MjU&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=2\">Divide &amp; Conquer: Convex Hull, Median Finding</a></li>\n</ul>\n</li>\n<li><h3 id=\"Discrete-math\"><a href=\"#Discrete-math\" class=\"headerlink\" title=\"Discrete math\"></a>Discrete math</h3><ul>\n<li><a href=\"http://www.infocobuild.com/education/audio-video-courses/computer-science/cs70-spring2015-berkeley.html\">Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLWX710qNZo_sNlSWRMVIh6kfTjolNaZ8t\">Discrete Mathematics by Shai Simonson (19 videos)</a></li>\n<li><a href=\"https://nptel.ac.in/courses/106/106/106106183/\">Discrete Mathematics By IIT Ropar NPTEL</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Additional-Detail-on-Some-Subjects\"><a href=\"#Additional-Detail-on-Some-Subjects\" class=\"headerlink\" title=\"Additional Detail on Some Subjects\"></a>Additional Detail on Some Subjects</h2><ul>\n<li><p>I added these to reinforce some ideas already presented above, but didn’t want to include them<br>above because it’s just too much. It’s easy to overdo it on a subject.<br>You want to get hired in this century, right?</p>\n</li>\n<li><p><strong>SOLID</strong>   </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=TMuno5RZNeE\">Bob Martin SOLID Principles of Object Oriented and Agile Design (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> S - <a href=\"http://www.oodesign.com/single-responsibility-principle.html\">Single Responsibility Principle</a> | <a href=\"http://www.javacodegeeks.com/2011/11/solid-single-responsibility-principle.html\">Single responsibility to each Object</a><ul>\n<li><a href=\"https://docs.google.com/open?id=0ByOwmqah_nuGNHEtcU5OekdDMkk\">more flavor</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> O - <a href=\"http://www.oodesign.com/open-close-principle.html\">Open&#x2F;Closed Principle</a>  | <a href=\"https://en.wikipedia.org/wiki/Open/closed_principle\">On production level Objects are ready for extension but not for modification</a><ul>\n<li><a href=\"http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1&hl=en\">more flavor</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> L - <a href=\"http://www.oodesign.com/liskov-s-substitution-principle.html\">Liskov Substitution Principle</a> | <a href=\"http://stackoverflow.com/questions/56860/what-is-the-liskov-substitution-principle\">Base Class and Derived class follow ‘IS A’ Principle</a><ul>\n<li><a href=\"http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh&hl=en\">more flavor</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> I - <a href=\"http://www.oodesign.com/interface-segregation-principle.html\">Interface segregation principle</a> | clients should not be forced to implement interfaces they don’t use<ul>\n<li><a href=\"https://www.youtube.com/watch?v=3CtAfl7aXAQ\">Interface Segregation Principle in 5 minutes (video)</a></li>\n<li><a href=\"http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi&hl=en\">more flavor</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> D -<a href=\"http://www.oodesign.com/dependency-inversion-principle.html\">Dependency Inversion principle</a> | Reduce the dependency In composition of objects.<ul>\n<li><a href=\"http://stackoverflow.com/questions/62539/what-is-the-dependency-inversion-principle-and-why-is-it-important\">Why Is The Dependency Inversion Principle And Why Is It Important</a></li>\n<li><a href=\"http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz&hl=en\">more flavor</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Union-Find</strong></p>\n<ul>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/JssSY/overview\">Overview</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/EM5D0/naive-implementations\">Naive Implementation</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/Mxu0w/trees\">Trees</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/qb4c2/union-by-rank\">Union By Rank</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/Q9CVI/path-compression\">Path Compression</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/GQQLN/analysis-optional\">Analysis Options</a></li>\n</ul>\n</li>\n<li><p><strong>More Dynamic Programming</strong> (videos)</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=r4-cftqTcdI&ab_channel=MITOpenCourseWare\">6.006: Dynamic Programming I: Fibonacci, Shortest Paths</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=KLBCUx1is2c&ab_channel=MITOpenCourseWare\">6.006: Dynamic Programming II: Text Justification, Blackjack</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=TDo3r5M1LNo&ab_channel=MITOpenCourseWare\">6.006: DP III: Parenthesization, Edit Distance, Knapsack</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=i9OAOk0CUQE&ab_channel=MITOpenCourseWare\">6.006: DP IV: Guitar Fingering, Tetris, Super Mario Bros.</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Tw1k46ywN6E&index=14&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">6.046: Dynamic Programming &amp; Advanced DP</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=NzgFUwOaoIw&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=15\">6.046: Dynamic Programming: All-Pairs Shortest Paths</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=krZI60lKPek&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=12\">6.046: Dynamic Programming (student recitation)</a></li>\n</ul>\n</li>\n<li><p><strong>Advanced Graph Processing</strong> (videos)</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=mUBmcbbJNf4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=27\">Synchronous Distributed Algorithms: Symmetry-Breaking. Shortest-Paths Spanning Trees</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=kQ-UQAzcnzA&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=28\">Asynchronous Distributed Algorithms: Shortest-Paths Spanning Trees</a></li>\n</ul>\n</li>\n<li><p>MIT <strong>Probability</strong> (mathy, and go slowly, which is good for mathy things) (videos):</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=SmFwFdESMHI&index=18&list=PLB7540DEDD482705B\">MIT 6.042J - Probability Introduction</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=E6FbvM-FGZ8&index=19&list=PLB7540DEDD482705B\">MIT 6.042J - Conditional Probability</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=l1BCv3qqW4A&index=20&list=PLB7540DEDD482705B\">MIT 6.042J - Independence</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=MOfhhFaQdjw&list=PLB7540DEDD482705B&index=21\">MIT 6.042J - Random Variables</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=gGlMSe7uEkA&index=22&list=PLB7540DEDD482705B\">MIT 6.042J - Expectation I</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=oI9fMUqgfxY&index=23&list=PLB7540DEDD482705B\">MIT 6.042J - Expectation II</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=q4mwO2qS2z4&index=24&list=PLB7540DEDD482705B\">MIT 6.042J - Large Deviations</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=56iFMY8QW2k&list=PLB7540DEDD482705B&index=25\">MIT 6.042J - Random Walks</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=oDniZCmNmNw&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=19\">Simonson: Approximation Algorithms (video)</a></p>\n</li>\n<li><p><strong>String Matching</strong></p>\n<ul>\n<li>Rabin-Karp (videos):<ul>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/rabin-karps-algorithm-c0Qkw\">Rabin Karps Algorithm</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/nYrc8/optimization-precomputation\">Precomputing</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/h4ZLc/optimization-implementation-and-analysis\">Optimization: Implementation and Analysis</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=BRO7mVIFt08&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=9\">Table Doubling, Karp-Rabin</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=w6nuXg0BISo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=32\">Rolling Hashes, Amortized Analysis</a></li>\n</ul>\n</li>\n<li>Knuth-Morris-Pratt (KMP):<ul>\n<li><a href=\"https://www.youtube.com/watch?v=5i7oKodCRJo\">TThe Knuth-Morris-Pratt (KMP) String Matching Algorithm</a></li>\n</ul>\n</li>\n<li>Boyer–Moore string search algorithm<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm\">Boyer-Moore String Search Algorithm</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=QDZpzctPf10\">Advanced String Searching Boyer-Moore-Horspool Algorithms (video)</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.coursera.org/learn/algorithms-on-strings/home/week/1\">Coursera: Algorithms on Strings</a><ul>\n<li>starts off great, but by the time it gets past KMP it gets more complicated than it needs to be</li>\n<li>nice explanation of tries</li>\n<li>can be skipped</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Sorting</strong></p>\n<ul>\n<li>Stanford lectures on sorting:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=ENp00xylP7c&index=15&list=PLFE6E58F856038C69\">Lecture 15 | Programming Abstractions (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=y4M9IVgrVKo&index=16&list=PLFE6E58F856038C69\">Lecture 16 | Programming Abstractions (video)</a></li>\n</ul>\n</li>\n<li>Shai Simonson, <a href=\"http://www.aduni.org/\">Aduni.org</a>:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=odNJmw5TOEE&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=2\">Algorithms - Sorting - Lecture 2 (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hj8YKFTFKEE&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=3\">Algorithms - Sorting II - Lecture 3 (video)</a></li>\n</ul>\n</li>\n<li>Steven Skiena lectures on sorting:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=jUf-UQ3a0kg&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=8\">CSE373 2020 - Mergesort&#x2F;Quicksort (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=0ksyQKmre84&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=9\">CSE373 2020 - Linear Sorting (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Video-Series\"><a href=\"#Video-Series\" class=\"headerlink\" title=\"Video Series\"></a>Video Series</h2><p>Sit back and enjoy.</p>\n<ul>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr\">List of individual Dynamic Programming problems (each is short)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL038BE01D3BAEFDB0\">x86 Architecture, Assembly, Applications (11 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8\">MIT 18.06 Linear Algebra, Spring 2005 (35 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL3B08AE665AB9002A\">Excellent - MIT Calculus Revisited: Single Variable Calculus</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=22hwcnXIGgk&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=1\">Skiena lectures from Algorithm Design Manual - CSE373 2020 - Analysis of Algorithms (26 videos)</a></p>\n</li>\n<li><p><a href=\"https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iAlnI-BQr9hjqADPBtujFJd\">UC Berkeley 61B (Spring 2014): Data Structures (25 videos)</a></p>\n</li>\n<li><p><a href=\"https://archive.org/details/ucberkeley-webcast-PL4BBB74C7D2A1049C\">UC Berkeley 61B (Fall 2006): Data Structures (39 videos)</a></p>\n</li>\n<li><p><a href=\"https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iCl2-D-FS5mk0jFF6cYSJs_\">UC Berkeley 61C: Machine Structures (26 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLJ9pm_Rc9HesnkwKlal_buSIHA-jTZMpO\">OOSE: Software Dev Using UML and Java (21 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLDSlqjcPpoL64CJdF0Qee5oWqGS6we_Yu\">MIT 6.004: Computation Structures (49 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL5PHm2jkkXmi5CxxI7b3JCL1TWybTDtKq\">Carnegie Mellon - Computer Architecture Lectures (39 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=HtSuA80QTyo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&nohtml5=False\">MIT 6.006: Intro to Algorithms (47 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=zm2VP0kHl1M&list=PL6535748F59DCA484\">MIT 6.033: Computer System Engineering (22 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLUl4u3cNGP63gFHB6xb-kVBiQHYe_4hSi\">MIT 6.034 Artificial Intelligence, Fall 2010 (30 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=L3LMbpZIKhQ&list=PLB7540DEDD482705B\">MIT 6.042J: Mathematics for Computer Science, Fall 2010 (25 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=2P-yW7LQr08&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">MIT 6.046: Design and Analysis of Algorithms (34 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=cQP8WApzIQQ&list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB\">MIT 6.824: Distributed Systems, Spring 2020 (20 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=T0yzrZL1py0&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&index=1\">MIT 6.851: Advanced Data Structures (22 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c\">MIT 6.854: Advanced Algorithms, Spring 2016 (24 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL2SOU6wwxB0uP4rJgf5ayhHWgw7akUWSf\">Harvard COMPSCI 224: Advanced Algorithms (25 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=GqmQg-cszw4&index=1&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">MIT 6.858 Computer Systems Security, Fall 2014</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL9D558D49CA734A02\">Stanford: Programming Paradigms (27 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL6N5qY2nvvJE8X75VkXglSrVhLv1tVcfy\">Introduction to Cryptography by Christof Paar</a></p>\n<ul>\n<li><a href=\"http://www.crypto-textbook.com/\">Course Website along with Slides and Problem Sets</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLLssT5z_DsK9JDLcT8T62VtzwyW9LNepV\">Mining Massive Datasets - Stanford University (94 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/user/DrSaradaHerke/playlists?shelf_id=5&view=50&sort=dd\">Graph Theory by Sarada Herke (67 videos)</a></p>\n</li>\n</ul>\n<h2 id=\"Computer-Science-Courses\"><a href=\"#Computer-Science-Courses\" class=\"headerlink\" title=\"Computer Science Courses\"></a>Computer Science Courses</h2><ul>\n<li><a href=\"https://github.com/open-source-society/computer-science\">Directory of Online CS Courses</a></li>\n<li><a href=\"https://github.com/prakhar1989/awesome-courses\">Directory of CS Courses (many with online lectures)</a></li>\n</ul>\n<h2 id=\"Algorithms-implementation\"><a href=\"#Algorithms-implementation\" class=\"headerlink\" title=\"Algorithms implementation\"></a>Algorithms implementation</h2><ul>\n<li><a href=\"https://algs4.cs.princeton.edu/code\">Multiple Algorithms implementation by Princeton University</a></li>\n</ul>\n<h2 id=\"Papers\"><a href=\"#Papers\" class=\"headerlink\" title=\"Papers\"></a>Papers</h2><ul>\n<li><a href=\"https://www.cs.cmu.edu/~crary/819-f09/\">Love classic papers?</a></li>\n<li><a href=\"http://spinroot.com/courses/summer/Papers/hoare_1978.pdf\">1978: Communicating Sequential Processes</a><ul>\n<li><a href=\"https://godoc.org/github.com/thomas11/csp\">implemented in Go</a></li>\n</ul>\n</li>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf\">2003: The Google File System</a><ul>\n<li>replaced by Colossus in 2012</li>\n</ul>\n</li>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf\">2004: MapReduce: Simplified Data Processing on Large Clusters</a><ul>\n<li>mostly replaced by Cloud Dataflow?</li>\n</ul>\n</li>\n<li><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf\">2006: Bigtable: A Distributed Storage System for Structured Data</a></li>\n<li><a href=\"https://research.google.com/archive/chubby-osdi06.pdf\">2006: The Chubby Lock Service for Loosely-Coupled Distributed Systems</a></li>\n<li><a href=\"http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf\">2007: Dynamo: Amazon’s Highly Available Key-value Store</a><ul>\n<li>The Dynamo paper kicked off the NoSQL revolution</li>\n</ul>\n</li>\n<li><a href=\"https://www.akkadia.org/drepper/cpumemory.pdf\">2007: What Every Programmer Should Know About Memory (very long, and the author encourages skipping of some sections)</a></li>\n<li>2012: AddressSanitizer: A Fast Address Sanity Checker:<ul>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37752.pdf\">paper</a></li>\n<li><a href=\"https://www.usenix.org/conference/atc12/technical-sessions/presentation/serebryany\">video</a></li>\n</ul>\n</li>\n<li>2013: Spanner: Google’s Globally-Distributed Database:<ul>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf\">paper</a></li>\n<li><a href=\"https://www.usenix.org/node/170855\">video</a></li>\n</ul>\n</li>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43790.pdf\">2015: Continuous Pipelines at Google</a></li>\n<li><a href=\"https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44686.pdf\">2015: High-Availability at Massive Scale: Building Google’s Data Infrastructure for Ads</a></li>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43835.pdf\">2015: How Developers Search for Code: A Case Study</a></li>\n<li>More papers: <a href=\"https://github.com/0voice/computer_expert_paper\">1,000 papers</a></li>\n</ul>\n",
            "tags": [
                "computer-science",
                "study-plan"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/computer-networks-notes/",
            "url": "https://samirpaul.in/posts/computer-networks-notes/",
            "title": "Computer Networks Notes",
            "date_published": "2023-08-15T04:24:52.000Z",
            "content_html": "<h1 id=\"Chapter-1-Computer-Networks-and-the-Internet\"><a href=\"#Chapter-1-Computer-Networks-and-the-Internet\" class=\"headerlink\" title=\"Chapter 1: Computer Networks and the Internet\"></a>Chapter 1: Computer Networks and the Internet</h1><h2 id=\"1-1-What-is-the-Internet\"><a href=\"#1-1-What-is-the-Internet\" class=\"headerlink\" title=\"1.1 What is the Internet?\"></a>1.1 What is the Internet?</h2><h3 id=\"1-1-1-A-nuts-and-bolts-description\"><a href=\"#1-1-1-A-nuts-and-bolts-description\" class=\"headerlink\" title=\"1.1.1 A nuts-and-bolts description\"></a>1.1.1 A nuts-and-bolts description</h3><p>The Internet is a computer networks that interconnects hundreds of millions of computing devices through the world. Today not only computers and workstation are being connected to the network, therefore the term <em>computer network</em> may sound a bit dated.</p>\n<p>All the devices connected to the Internet are called <strong>hosts</strong> or <strong>end systems</strong>. End systems are connected together by a network of <strong>communication links</strong> and <strong>packets switches</strong>.</p>\n<p>Different links can transmit data at different rates, with the <strong>transmission rate</strong> of a link measured in bits&#x2F;second.</p>\n<p>When one end system has data to send to another end system, the sending end system <em>segments</em> the data and adds <em>header bytes</em> to each segment. The resulting packages of information, called <strong>packets</strong>, are then sent through the network to the destination and system where they a reassembled into the original data.</p>\n<p>A packet switch takes a packet arriving on one of its incoming communication links and forwards that packet on one of its outgoing communication links. The two most prominent types of packets switches are <strong>routers</strong> and <strong>link switches</strong>. The sequence of communication links and packet switches traversed by a packet from the sending end system to the receiving end system is known as <strong>route</strong> or <strong>path</strong>.</p>\n<p>End systems access the Internet through <strong>Internet Service Providers (ISPs)</strong>, including residential ISPs (cable or phone company), corporate, university ISPs …<br>Each ISP in itself is a network of packet switches and communication links.<br><em>Lower tier</em> (which interconnect end-systems) ISPs are interconnected through national and international <em>upper tier</em> ISP. An upper-tier ISP consists of high speed routers interconnected with high-speed fiber-optic links. Each ISP network is managed independently.</p>\n<p>End systems, packet switches and other pieces of the Internet run <strong>protocols</strong> that control the sending and receiving of information within the Internet.</p>\n<h3 id=\"1-1-2-A-Services-Description\"><a href=\"#1-1-2-A-Services-Description\" class=\"headerlink\" title=\"1.1.2 A Services Description\"></a>1.1.2 A Services Description</h3><p>The Internet can be described as <em>an infrastructure that provides services to applications</em>. These applications (Web, social networks, VoIP…) are said to be <strong>distributed</strong> since they involve multiple end systems that exchange data with each other.<br><strong>Internet applications run on end systems, not in the packet switches or routers</strong>, packet switches facilitate the exchange of data, but they are not concerned with the application that is the source or sink of data.</p>\n<p>End systems attached to the Internet provide and <strong>Application Programming Interface (API)</strong> that specifies how a program running on one end system asks the Internet infrastructure to deliver data to a specific destination program running on another end system.</p>\n<h3 id=\"1-1-3-What-Is-a-Protocol\"><a href=\"#1-1-3-What-Is-a-Protocol\" class=\"headerlink\" title=\"1.1.3 What Is a Protocol?\"></a>1.1.3 What Is a Protocol?</h3><p>All the activity in the Internet that involves two or more communicating remote entities is governed by a protocol.</p>\n<p><strong>A protocol defines the format and the order of messages exchanged between two or more communicating entities, as weel as the actions taken on the trasmission and&#x2F;or receipt of a message or other event</strong></p>\n<h2 id=\"1-2-The-Network-Edge\"><a href=\"#1-2-The-Network-Edge\" class=\"headerlink\" title=\"1.2 The Network Edge\"></a>1.2 The Network Edge</h2><p>Computers and other devices connected to the Internet are often referred to as <em>end systems</em> as they sit at the edge of the Internet. They are also called <em>hosts</em> as they host, run, applications programs such as a Web Browser or an email client.</p>\n<p>Hosts are sometimes further divided into two categories: <em>clients</em> and <em>servers</em>. The former being desktop, mobile pcs, smartphones, the latter being powerful machines that store and distribute Web pages, streams…<br>Nowadays most of the servers reside in large <em>data centers</em></p>\n<h3 id=\"1-2-1-Access-Networks\"><a href=\"#1-2-1-Access-Networks\" class=\"headerlink\" title=\"1.2.1 Access Networks\"></a>1.2.1 Access Networks</h3><p>They are the networks that physically connect end systems to the first router on a path from the end system to any other distant end system.<br>Examples: mobile network, national or global ISP, local or regional ISP, home networks enterprise networks.</p>\n<h4 id=\"Home-Access-DSL-Cable-FITH-Dial-Up-and-Satellite\"><a href=\"#Home-Access-DSL-Cable-FITH-Dial-Up-and-Satellite\" class=\"headerlink\" title=\"Home Access: DSL, Cable, FITH, Dial-Up and Satellite\"></a>Home Access: DSL, Cable, FITH, Dial-Up and Satellite</h4><p>Today, the two most prevalent types of broadband residential access are <strong>digital subscriber line (DSL)</strong> and <strong>cable</strong>.</p>\n<p>A residence typically obtains DSL access from the telephone company (telco) that provides its wired local phone access. The customer’s telco is therefore its ISP.<br>DSL modem use the existing telephone lines to exchange data with DSLAMs (digital subscriber line access multiplexer) located in the telco local central office. The DSL modem takes digital data and translates it to high-frequency tones for transmission over telephone wires, these analog signals from many houses are translated back into digital format at the DSLAM. The use of different frequencies allows the phone line to carry a high-speed downstream channel, a medium-speed upstream channel and an ordinary two-way telephone channel.<br>Hundreds or even thousands of households connect to a single DSLAM.</p>\n<p>DSL: 24 Mbps downstream and 2.5 Mbps upstream (MAX VALUES). Because of the difference between these two values, the access is said to be <strong>asymmetric</strong>.</p>\n<p><strong>Cable Internet</strong> access makes use of the cable television company’s existing cable television infrastructure. Cable modems connect to CMTS (Cablem Modem Termination System) which does the same job the DSLAM does for phone lines. The access is typically asymmetric.<br>CABLE: 42.8 Mbps downstream and 30.7 Mbps upstream (MAX VALUES).<br>Cable Internet access is a shared broadcast medium: each packet travels downstream on every link to every home and viceversa. For this, if several users are simultaneously using the downstream channel, the actual rate will be significantly lower.</p>\n<p>Another up-and-coming technology that promises very high speeds is <strong>fiber to the home (FTTH)</strong>. The concept is simple: provide an optical fiber path from the Central Office (CO)</p>\n<h4 id=\"Access-in-the-Enterprise-and-the-Home-Ethernet-and-WiFi\"><a href=\"#Access-in-the-Enterprise-and-the-Home-Ethernet-and-WiFi\" class=\"headerlink\" title=\"Access in the Enterprise and the Home: Ethernet and WiFi\"></a>Access in the Enterprise and the Home: Ethernet and WiFi</h4><p>On corporate and university campuses, and increasingly in home settings, a <strong>Local Area Network (LAN)</strong> is used to connect an end system to the edge router.<br>Ethernet is by far the most prevalent access technology is corporate, university and home networks. Ethernet uses twisted-pair copper wire to connect to an Ethernet switch which is connected into the larger Internet.<br>The Internet is increasingly accessed wirelessly: wireless users transmit&#x2F;receive packets to&#x2F;from an access point connected into the enterprise’s network which in turn is connected to the wired Internet.</p>\n<h4 id=\"Wide-Area-Wireless-Access-3G-and-LTE\"><a href=\"#Wide-Area-Wireless-Access-3G-and-LTE\" class=\"headerlink\" title=\"Wide-Area Wireless Access: 3G and LTE\"></a>Wide-Area Wireless Access: 3G and LTE</h4><p>Smartphones and Tablets employ the same wireless infrastructure used for cellular telephony to send&#x2F;receive packets through a base station operated by the cellular network provider. Third generation (3G) wireless and fourth generation (4G) of wide-area network are being deployed. LTE (“Long-Term Evolution”) has its root in 3G and can potentially achieve rates in excess of 10 Mbps.</p>\n<h3 id=\"1-2-2-Physical-Media\"><a href=\"#1-2-2-Physical-Media\" class=\"headerlink\" title=\"1.2.2 Physical Media\"></a>1.2.2 Physical Media</h3><p>The book talks about it in detail but we haven’t talked about it in class</p>\n<p>A bit, when traveling from source to destination, passes through a series of transmitter-receiver pairs, for each pair, the bit is sent by propagating electromagnetic waves or optical pulses across a <strong>physical medium</strong>. This can take many shapes and forms and doesn’t have to be of the same type for each transmitter-receiver pair along the path.<br>Physical media fall into two categories:</p>\n<ul>\n<li><strong>guided media</strong>: the waves are guided along a solid medium (fiber-optic cable, twisted-pair copper wire, coaxial cable)</li>\n<li><strong>unguided media</strong>: the waves propagate in the atmosphere and in outer space (wireless LAN, digital satellite channel)</li>\n</ul>\n<h2 id=\"1-3-The-Network-Core\"><a href=\"#1-3-The-Network-Core\" class=\"headerlink\" title=\"1.3 The Network Core\"></a>1.3 The Network Core</h2><h3 id=\"1-3-1-Packet-Switching\"><a href=\"#1-3-1-Packet-Switching\" class=\"headerlink\" title=\"1.3.1 Packet Switching\"></a>1.3.1 Packet Switching</h3><p>In a network application, end systems exchange <strong>messages</strong> with each other. To send a message from a source end system to a destination end system, the source breaks long messages into smaller chunks of data known as <strong>packets</strong>.<br>Between source and destination, each packet travels through communication links and <strong>packet switches</strong> (for which there are two predominant types, <strong>routers</strong> and <strong>link-layer switches</strong>).<br>Packets are transmitted over each communication link at a rate equal to the <em>full</em> transmission rate of the link. So, if a source end system or a packet switch is send a packet of L bits over a link with transmission rate R bits&#x2F;sec, then the time to transmit the packet is L&#x2F;R seconds.</p>\n<h4 id=\"Store-and-forward-Transmission\"><a href=\"#Store-and-forward-Transmission\" class=\"headerlink\" title=\"Store-and-forward Transmission\"></a>Store-and-forward Transmission</h4><p>Most packet switches use <strong>store-and-forward transmission</strong> at the inputs to the links. Store-and-forward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link. The link must <strong>buffer</strong> (“store”) the packet’s bits and only after the router has received all of the packet’s bits can it begin to transmit (“forward”) the packet onto the outbound link.</p>\n<h4 id=\"Queuing-Delays-and-Packet-Loss\"><a href=\"#Queuing-Delays-and-Packet-Loss\" class=\"headerlink\" title=\"Queuing Delays and Packet Loss\"></a>Queuing Delays and Packet Loss</h4><p>Each packet switch has multiple links attached to it. For each attached link, the packet switch has an <strong>output buffer</strong> (or <strong>output queue</strong>) which stores packets that the router is about to send into that link.<br>If an arriving packet needs to be transmitted onto a link but finds the link busy with the transmission of another packet, the arriving packet must wait in the output buffer. Thus, packets suffer output buffer <strong>queuing delays</strong> which are variable and depend on the level of congestion in the network. Since the amount of buffer space is finite, an arriving packet may find the buffer completely full. In this case, <strong>packet loss</strong> will occur, either the arriving packet or one of the already queued packets will be dropped.</p>\n<h4 id=\"Forwarding-tables-and-routing-protocols\"><a href=\"#Forwarding-tables-and-routing-protocols\" class=\"headerlink\" title=\"Forwarding tables and routing protocols\"></a>Forwarding tables and routing protocols</h4><p>In the Internet, every end system has an address called an IP address. When a source end system wants to send a packet to a destination end system, the source includes the destination’s IP address in the packet’s header.<br>Each router has a <strong>forwarding table</strong> that maps destination addresses (or portions of the destination addresses) to that router’s outbound links. When a packet arrives at the router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link.<br>A number of special <strong>routing protocols</strong> are used to automatically set the forwarding tables.</p>\n<h3 id=\"1-3-2-Circuit-Switching\"><a href=\"#1-3-2-Circuit-Switching\" class=\"headerlink\" title=\"1.3.2 Circuit Switching\"></a>1.3.2 Circuit Switching</h3><p>In circuit-switched networks, the resources needed along a path(buffers, link transmission rate) to provide for communication between the end systems are <strong>reserved</strong> for the duration of the communication sessions.<br>When two hosts want to communicate, the network establishes a <strong>dedicated end-to-end connection</strong> between them.</p>\n<h4 id=\"Multiplexing-in-Circuit-Switched-Networks\"><a href=\"#Multiplexing-in-Circuit-Switched-Networks\" class=\"headerlink\" title=\"Multiplexing in Circuit-Switched Networks\"></a>Multiplexing in Circuit-Switched Networks</h4><p>A circuit in a link is implemented with either <strong>frequency-division multiplexing (FDM)</strong> or <strong>time-division multiplexing (TDM)</strong>.<br>With FDM, the frequency spectrum of a link is divided up among the connections established across the link. The width of the band is called the <strong>bandwidth</strong>.<br>For a TDM link, time is divided into frames of fixed duration, and each frame is divided into a fixed number of time slots.</p>\n<h4 id=\"Packet-Switching-Versus-Circuit-Switching\"><a href=\"#Packet-Switching-Versus-Circuit-Switching\" class=\"headerlink\" title=\"Packet Switching Versus Circuit Switching\"></a>Packet Switching Versus Circuit Switching</h4><p>Packet switching is more flexible, uses resources efficiently and is simpler to implement (even if it requires congestion control).<br>Circuit switching offers performance guarantees but uses resources inefficiently</p>\n<h3 id=\"1-3-3-A-Network-of-Networks\"><a href=\"#1-3-3-A-Network-of-Networks\" class=\"headerlink\" title=\"1.3.3 A Network of Networks\"></a>1.3.3 A Network of Networks</h3><p>To create the Internet, ISPs must be interconnected, thus creating a <em>network of networks</em>.<br>Much of the evolution of the structure of the Internet is driven by economics and national policy, rather than by performance consideration.</p>\n<p>Today’s Internet is complex, consisting of a dozen or so tier-1 ISPs and hundreds of thousands of lower-tier ISPs. The ISPs are diverse in their coverage, with some spanning multiple continents and oceans, and others limited to narrow geographic regions. The lower-tier ISPs connect to the higher-tier ISPs and the higher-tier ISPs interconnect with one another. Users and content providers are customers of lower-tier ISPs and lower-tier ISPs are customers of higher-tier ISPs. Recently, major content providers (Google) have also created their own networks and connect directly into lower-tier ISPs where possible.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-network_of_networks.png\" alt=\"network_of_networks\"></p>\n<h2 id=\"1-4-Delay-Loss-and-Throughput-in-Packet-Switched-Networks\"><a href=\"#1-4-Delay-Loss-and-Throughput-in-Packet-Switched-Networks\" class=\"headerlink\" title=\"1.4 Delay, Loss and Throughput in Packet-Switched Networks\"></a>1.4 Delay, Loss and Throughput in Packet-Switched Networks</h2><p>Computer networks necessarily constrain <strong>throughput</strong> (the amount of data per second that can be transferred) between end system, introduce delays between end systems and can actually lose packets.</p>\n<h3 id=\"1-4-1-Overview-of-Delay-in-Packet-Switched-networks\"><a href=\"#1-4-1-Overview-of-Delay-in-Packet-Switched-networks\" class=\"headerlink\" title=\"1.4.1 Overview of Delay in Packet-Switched networks\"></a>1.4.1 Overview of Delay in Packet-Switched networks</h3><p>As a packet travels from one node (host or router) to the subsequent host along his path, it suffers from several types of delays at <em>each</em> node along the path.</p>\n<h4 id=\"Types-of-Delay\"><a href=\"#Types-of-Delay\" class=\"headerlink\" title=\"Types of Delay\"></a>Types of Delay</h4><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-type_of_delays.png\" alt=\"type_of_delays\"></p>\n<h5 id=\"Processing-Delay\"><a href=\"#Processing-Delay\" class=\"headerlink\" title=\"Processing Delay\"></a>Processing Delay</h5><p>The <strong>processing delay</strong> consists of the time required to examine the packet’s header and determine where to direct the packet. It may also include other factors, such as the time needed to check for bit-level errors occurred during transmission.<br>They typically are of the order of microseconds or less.<br>After processing the packet is sent to the queue preceding the link to the next router</p>\n<h5 id=\"Queuing-Delay\"><a href=\"#Queuing-Delay\" class=\"headerlink\" title=\"Queuing Delay\"></a>Queuing Delay</h5><p>At the queue, the packet experiences a <strong>queuing delay</strong> as it waits to be transmitted onto the link. It depends on the number of earlier-arriving packets, therefore if the queue is empty, then the packet’s queuing delay will be 0.<br>Typically of the order of microseconds or milliseconds.</p>\n<h5 id=\"Transmission-delays\"><a href=\"#Transmission-delays\" class=\"headerlink\" title=\"Transmission delays\"></a>Transmission delays</h5><p>If the length of the packet is <em>L</em> bits, and the <strong>transmission rate</strong> of the link is <em>R</em> bits&#x2F;sec, then the <strong>transmission delay</strong> is <em>L&#x2F;R</em>.<br>This is the amount of time required to push (transmit) all of the packet’s bits into the link.<br>Typically on the order of microseconds to milliseconds.</p>\n<h5 id=\"Propagation-Delay\"><a href=\"#Propagation-Delay\" class=\"headerlink\" title=\"Propagation Delay\"></a>Propagation Delay</h5><p>The time required to propagate a bit from the beginning of the link to the next router is the <strong>propagation delay</strong>. The bit propagates at the propagation speed of the link, which depends on the physical medium of the link.<br>The propagation delay is the distance between two routers divided by the propagation speed of the link.</p>\n<h5 id=\"Total-nodal-delay\"><a href=\"#Total-nodal-delay\" class=\"headerlink\" title=\"Total nodal delay\"></a>Total nodal delay</h5><p>it is the summation of the previous delays</p>\n<h3 id=\"1-4-2-Queuing-Delay-and-Packet-Loss\"><a href=\"#1-4-2-Queuing-Delay-and-Packet-Loss\" class=\"headerlink\" title=\"1.4.2 Queuing Delay and Packet Loss\"></a>1.4.2 Queuing Delay and Packet Loss</h3><p>The queuing delay depends can vary from packet to packet, therefore when characterizing queuing delay, one typically uses statistical measures, such as <em>average queuing delay, variance of queuing delay, and the probability that the queuing delay exceeds some specified value</em>.</p>\n<h4 id=\"Packet-Loss\"><a href=\"#Packet-Loss\" class=\"headerlink\" title=\"Packet Loss\"></a>Packet Loss</h4><p>A queue preceding a link has finite capacity. If a packet finds a full queue, then the router will <strong>drop</strong> it, the packet will be lost.<br>The fraction of lost packets increases as the traffic intensity increases.</p>\n<h3 id=\"1-4-3-End-to-End-Delay\"><a href=\"#1-4-3-End-to-End-Delay\" class=\"headerlink\" title=\"1.4.3 End-to-End Delay\"></a>1.4.3 End-to-End Delay</h3><p>Let’s now consider the <strong>total delay, from source to destination</strong> (not only the nodal delay). Let’s suppose there are <em>N-1</em> routers between the source host and the destination host, then the nodal delays accumulate and give an <strong>end-to-end delay</strong>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d(end_end) = N * [d(proc) + d(queue) + d(trans) + d(prop)]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-4-Throughput-in-Computer-Networks\"><a href=\"#1-4-4-Throughput-in-Computer-Networks\" class=\"headerlink\" title=\"1.4.4 Throughput in Computer Networks\"></a>1.4.4 Throughput in Computer Networks</h3><p>Another critical performance measure in computer networks is <em>end-to-end throughput</em>.<br>The <strong>instantaneous throughput</strong> at any instant of time is the rate (in bits&#x2F;sec) at which host B is receiving a file.<br>If the file consists of <em>F</em> bits and the transfers takes <em>T</em> seconds to transfer the whole file, then the <strong>average throughput</strong> of the file is <em>F&#x2F;T bits&#x2F;sec</em>.<br>For a simple two-link network, the throughput is the min of all the throughputs, that is the transmission rate of the <strong>bottleneck link</strong>.<br>Therefore, the constraining factor for throughput in today’s Internet is typically the <em>access network</em>.</p>\n<h2 id=\"1-5-Protocol-Layers-and-Their-Service-Models\"><a href=\"#1-5-Protocol-Layers-and-Their-Service-Models\" class=\"headerlink\" title=\"1.5 Protocol Layers and Their Service Models\"></a>1.5 Protocol Layers and Their Service Models</h2><h3 id=\"1-5-1-Layered-Architecture\"><a href=\"#1-5-1-Layered-Architecture\" class=\"headerlink\" title=\"1.5.1 Layered Architecture\"></a>1.5.1 Layered Architecture</h3><p>A layered architecture allows us to discuss a well-defined, specific part of a large and complex system. This simplification itself is of considerable value by providing <em>modularity</em>, making it much easier to change the implementation of the service provided by the layer: as long as the layer provides the same service to the layer above it, and uses the same services from the layer below it, the remainder of the system remains unchanged when a layer’s implementation is changed.</p>\n<h4 id=\"Protocol-Layering\"><a href=\"#Protocol-Layering\" class=\"headerlink\" title=\"Protocol Layering\"></a>Protocol Layering</h4><p>To provide structure to the design of network protocols, the network designers organize protocols in <strong>layers</strong>. <strong>Each protocol belongs to one of the layers</strong>. We are interested in the <strong>services</strong> that a layer offers to the layer above, <strong>service model</strong> of a layer.<br>When taken together, the protocols of the various layers are called the <strong>protocol stack</strong>. The Internet protocol stack consists of five layers:</p>\n<ul>\n<li>Application</li>\n<li>Transport</li>\n<li>Network</li>\n<li>Link</li>\n<li>Physical</li>\n</ul>\n<h5 id=\"Application-Layer\"><a href=\"#Application-Layer\" class=\"headerlink\" title=\"Application Layer\"></a>Application Layer</h5><p>Where network applications and their applications-layer protocols reside.<br>The Internet’s application layer includes many protocols: HTTP, SMTP, FTP, DNS.<br>An application-layer protocol is distributed over multiple end systems, with the application in one end system using the protocol to exchange packets of information with the application in another end system. This packet of information at the application layer is called <strong>message</strong>.</p>\n<h5 id=\"Transport-Layer\"><a href=\"#Transport-Layer\" class=\"headerlink\" title=\"Transport Layer\"></a>Transport Layer</h5><p>It transports application-layer messages between application endpoints.<br>In the Internet there are two transport protocols: TCP and UDP.<br>TCP provides a connection-oriented service to its application: the service includes guaranteed delivery of application-layer messages to the destination and flow control unit. TCP also breaks long messages into shorter segments and provides a <strong>congestion-control mechanism</strong>, so that a source throttles its transmission rate when the network is congested.<br>HTTP and SMTP use TCP</p>\n<p>UDP provides a connectionless service to its applications: it’s a no-frills service that provides no guarantees, no reliability, no flow control and no congestion control.<br>A transport-layer packet is called <strong>segment</strong><br>Skype uses UDP (speed required)</p>\n<h5 id=\"Network-Layer\"><a href=\"#Network-Layer\" class=\"headerlink\" title=\"Network Layer\"></a>Network Layer</h5><p>It is responsible for moving network-layer packets known as <strong>datagrams</strong> from one host to another.<br>The Internet’s network layer includes the IP Protocol. There is only one IP Protocol and all the Internet components that have a network layer must run it.<br>The Internet’s network layer also contains routing protocols that determine the routes that datagrams take between sources and destinations.<br>The Internet has many routing protocols.<br>Often it is simply referred to as the IP protocols, forgetting that it includes routing too.</p>\n<h5 id=\"Link-Layer\"><a href=\"#Link-Layer\" class=\"headerlink\" title=\"Link Layer\"></a>Link Layer</h5><p>To move a packet from one node to the next, the network layer relies on the services of the link layer.<br>The services provided by the link layer depend on the specific link-layer protocol that is employed over the link.<br>Examples are Ethernet, WiFi.<br>We will refer to the link-layer packets as <strong>frames</strong></p>\n<h5 id=\"Physical-Layer\"><a href=\"#Physical-Layer\" class=\"headerlink\" title=\"Physical Layer\"></a>Physical Layer</h5><p>The job of the physical layer is to move the individual bits within the frame from one node to the next.<br>The protocols are link dependent and further depend of the actual transmission medium of the link.</p>\n<h3 id=\"1-5-2-Encapsulation\"><a href=\"#1-5-2-Encapsulation\" class=\"headerlink\" title=\"1.5.2 Encapsulation\"></a>1.5.2 Encapsulation</h3><p>Routers and link-layer switches are both packet switches but routers and link-layer switches do not implement all of the layers in the protocol stack: link-layer switches implement Physical and Link while router add the Network Layer too.</p>\n<p>From the Application Layer, the message passes to the transport layer, which appends additional information to it (the <strong>Header</strong>) that will be used by the receiver-side transport layer. The transport layer then adds its own header and passes the datagram to the link layer which adds it own link-layer header information.<br>Thus, we see that at each layer, a packet has two types of fields: <strong>header fields</strong> and a <strong>payload field</strong>, the payload typically being the packet from the layer above.</p>\n<p>The process of encapsulation can be more complex: for example a large message may be divided into multiple transport-layer segments, which will be divided into multiple datagrams….</p>\n<h2 id=\"1-6-Networks-Under-Attack\"><a href=\"#1-6-Networks-Under-Attack\" class=\"headerlink\" title=\"1.6 Networks Under Attack\"></a>1.6 Networks Under Attack</h2><h3 id=\"Malware\"><a href=\"#Malware\" class=\"headerlink\" title=\"Malware\"></a>Malware</h3><p>Along with all the good files we exchange on the Internet, come malicious software, collectively known as <strong>malware</strong> that can also enter and infect our devices.<br>Once a device infected, the malware can do all kinds of evil things: deleting files, install spyware…<br>A compromised host may also be enrolled in a network of thousands of similarly compromised devices, known as <strong>botnet</strong> which can be used for spam or distributed denial-of-service.<br>Much of the malware is <strong>self-replicating</strong>: it seeks entry into other hosts from the infected machines. Malware can spread in the from of a virus or a worm.</p>\n<ul>\n<li><strong>Viruses</strong> are malware that requires some form of user interaction to infect the user’s device.</li>\n<li><strong>Worms</strong> are malware that can enter a device without any explicit user interaction.</li>\n</ul>\n<h3 id=\"DoS\"><a href=\"#DoS\" class=\"headerlink\" title=\"DoS\"></a>DoS</h3><p>Denial-of-Service attacks render a network, host, or other piece of infrastructure unusable by legittimate users. Most of them fall into one of the three categories:</p>\n<ul>\n<li><em>Vulnerability Attack</em>: a few well-crafted messages are sent to a vulnerable application or operating system running on the targeted host. The service might stop or the host might crash.</li>\n<li><em>Bandwidth flooding</em>: a deluge of packets is sent to the targeted host, so many packets that the target’s access link becomes clogged preventing legitimate packets from reaching the server</li>\n<li><em>Connection flooding</em>: a large number of half-open or fully open TCP connections are established at the targeted host, which can become so bogged down that it stops accepting legitimate connections.</li>\n</ul>\n<p>In a <strong>distributed DoS</strong> (<strong>DDoS</strong>) attack the attacker controls multiple sources and has each source blast traffic at the target.</p>\n<h3 id=\"Sniffing\"><a href=\"#Sniffing\" class=\"headerlink\" title=\"Sniffing\"></a>Sniffing</h3><p>A passive receiver can record a copy of every packet that passes through the network. It is then called a <strong>packet sniffer</strong>.<br>Because packet sniffers are <em>passive</em> (they do not inject packets into the channel), they are difficult to detect. Some of the best defenses against packet sniffing involve cryptography.</p>\n<h3 id=\"Spoofing\"><a href=\"#Spoofing\" class=\"headerlink\" title=\"Spoofing\"></a>Spoofing</h3><p>The ability to inject packets into the Internet with a false source address is known as <strong>IP Spoofing</strong> and is but one of many ways in which one user can masquerade as another user.<br>To solve this problem we will need <em>end-point authentication</em>.</p>\n<h3 id=\"The-history-of-the-Internet-shaped-is-structure\"><a href=\"#The-history-of-the-Internet-shaped-is-structure\" class=\"headerlink\" title=\"The history of the Internet shaped is structure\"></a>The history of the Internet shaped is structure</h3><p>The Internet was originally designed to be based on the model of a <em>group of mutually trusting users attached to a transparent network</em>, a model in which there is no need for security. Many aspects of the original Internet architecture deeply reflect this notion of mutual trust, such as the ability for one to send a packet to any other user is the default rather than a requested&#x2F;granted capability.<br>However today’s Internet certainly does not involve “mutually trusted users”: communication among mutually trusted users is the exception rather the rule.</p>\n<h2 id=\"History-of-Computer-Networking-and-the-Internet\"><a href=\"#History-of-Computer-Networking-and-the-Internet\" class=\"headerlink\" title=\"History of Computer Networking and the Internet\"></a>History of Computer Networking and the Internet</h2><h1 id=\"Chapter-2-Application-Layer\"><a href=\"#Chapter-2-Application-Layer\" class=\"headerlink\" title=\"Chapter 2: Application Layer\"></a>Chapter 2: Application Layer</h1><p>Network applications are the <em>raison d’être</em> of a computer network. They include  text email, remote access to computers, file transfers, the WorldWideWeb (mid 90s), web searching, e-commerce, Twitter&#x2F;Facebook, Amazon, Netflix, Youtube, WoW…</p>\n<h2 id=\"2-1-Principles-of-Network-Applications\"><a href=\"#2-1-Principles-of-Network-Applications\" class=\"headerlink\" title=\"2.1 Principles of Network Applications\"></a>2.1 Principles of Network Applications</h2><p>At the core of network application development is writing programs that run on different <strong>end systems</strong> and communicate with each over the network. The programs running on end systems might be different (server-client architecture) or identical (Peer-to-Peer architecture).<br>Importantly we write programs that run on end systems&#x2F;hosts, not on network-core devices (routers&#x2F;link-layer switches).</p>\n<h3 id=\"2-1-1-Network-Application-Architectures\"><a href=\"#2-1-1-Network-Application-Architectures\" class=\"headerlink\" title=\"2.1.1 Network Application Architectures\"></a>2.1.1 Network Application Architectures</h3><p>From the application developer’s perspective, the network architecture is fixed and provides a specific set of services to applications.<br>The <strong>application architecture</strong>, on the other hand, is chosen by him. In choosing the application architecture, a developer will likely draw one of the two predominant architectural paradigms used in modern network applications:</p>\n<ul>\n<li><strong>Client-server architecture</strong>: there is an always on host, called the <em>server</em> which serves requests from many other hosts, called <em>clients</em>: [Web Browser and Web Server]. Clients do not communicate directly with each other. The server has a fixed, well-known address, called an IP address that clients use to connect to him. Often, a single server host is incapable of keeping up with all the requests from clients, for this reason, a <strong>data center</strong>, housing a large number of hosts, is often used to create a powerful virtual server (via <em>proxyin</em>).</li>\n<li><strong>P2P architecture</strong>: there is minimal or no reliance on dedicated servers in data centers, the application exploits direct communication between pairs of intermittently connected bots, called <em>peers</em>. They are end systems owned and controlled by users. [Bittorrent, Skype]. P2P applications provide <strong>self-scalability</strong> (the network load is distributed) They are also <strong>cost-effective</strong> since they don’t require significant infrastructure and server bandwidth. P2P face challenges:<ol>\n<li>ISP Friendly (asymmetric nature of residential ISPs)</li>\n<li>Security</li>\n<li>Incentives (convincing users to participate)</li>\n</ol>\n</li>\n</ul>\n<p>Some applications have hybrid architectures, such as for many instant messaging applications: a server keeps track of the IP addresses of users, but user-to-user messages are sent directly between users.</p>\n<h3 id=\"2-1-2-Processes-Communicating\"><a href=\"#2-1-2-Processes-Communicating\" class=\"headerlink\" title=\"2.1.2 Processes Communicating\"></a>2.1.2 Processes Communicating</h3><p>In the jargon of operating systems, it’s not programs but <strong>processes</strong> that communicate. A process can be thought of as a program that is running within an end system.<br>Processes on two different end systems communicate with each other by exchanging <strong>messages</strong> across the computer network: a sending process creates and sends messages into the network, a receiving process receives these messages and possibly responds by sending messages back.</p>\n<h4 id=\"Client-and-Server-Processes\"><a href=\"#Client-and-Server-Processes\" class=\"headerlink\" title=\"Client and Server Processes\"></a>Client and Server Processes</h4><p>A network application consists of pairs of processes that send messages to each other over a network. For each pair of communicating processes we label:</p>\n<ul>\n<li>the process that initiates the communication as the <strong>client</strong> [web browser]</li>\n<li>the process that waits to be contacted to begin the session as the <strong>server</strong> [web server]</li>\n</ul>\n<p>This labels stand even for P2P applications in the <em>context of a communication session</em>.</p>\n<h4 id=\"The-Interface-Between-the-Process-and-the-Computer-Network\"><a href=\"#The-Interface-Between-the-Process-and-the-Computer-Network\" class=\"headerlink\" title=\"The Interface Between the Process and the Computer Network\"></a>The Interface Between the Process and the Computer Network</h4><p>A process sends messages into, and receives messages from, the network through a software interface called a <strong>socket</strong>.<br><strong>A socket is the interface between the application layer and the transport layer within a host</strong>, it is also referred to as the <strong>Application Programming Interface</strong> (<strong>API</strong>) between the application and the network.<br>The application developer has control of everything on the application-layer of the socket but has little control of the transport-layer side of the socket. The only control that he has over the transport-layer is:</p>\n<ol>\n<li>The choice of the transport protocol</li>\n<li>Perhaps the ability to fix a few transport-layer parameters such as maximum buffer and maximum segment sizes</li>\n</ol>\n<h4 id=\"Addressing-Processes\"><a href=\"#Addressing-Processes\" class=\"headerlink\" title=\"Addressing Processes\"></a>Addressing Processes</h4><p>In order for a process running on one host to send packets to a process running on another host, the receiving process needs to have an address. To identify the receiving processes, two pieces of information need to be specified:</p>\n<ol>\n<li>The address of the host. In the Internet, the host is identified by its <strong>IP Address</strong>, a 32-bit (or 64) quantity that identifies the host uniquely.</li>\n<li>An identifier that specifies the receiving process in the destination host: the destination <strong>port number</strong>. Popular applications have been assigned specific port numbers (web server -&gt; 80)</li>\n</ol>\n<h3 id=\"2-1-3-Transport-Services-Available-to-Applications\"><a href=\"#2-1-3-Transport-Services-Available-to-Applications\" class=\"headerlink\" title=\"2.1.3 Transport Services Available to Applications\"></a>2.1.3 Transport Services Available to Applications</h3><p>What are the services that a transport-layer protocol can offer to applications invoking it?</p>\n<h4 id=\"Reliable-Data-Transfer\"><a href=\"#Reliable-Data-Transfer\" class=\"headerlink\" title=\"Reliable Data Transfer\"></a>Reliable Data Transfer</h4><p>For many applications, such as email, file transfer, web document transfers and financial applications, packet’s drops and data loss can have devastating consequences. If a protocol provides guarantees that the data sent is delivered completely and correctly, it is said to provide <strong>reliable data transfer</strong>. The sending process can just pass its data into the socket and know with complete confidence that the data will arrive without errors at the receiving process.</p>\n<h4 id=\"Throughput\"><a href=\"#Throughput\" class=\"headerlink\" title=\"Throughput\"></a>Throughput</h4><p>A transport-layer protocol could provide guaranteed available throughput at some specific rate. Applications that have throughput requirements are said to be <strong>bandwidth-sensitive applications</strong>.</p>\n<h4 id=\"Timing\"><a href=\"#Timing\" class=\"headerlink\" title=\"Timing\"></a>Timing</h4><p>A transport-layer protocol can also provide timing guarantees. Example: guarantees that every bit the sender pumps into the socket arrives at the receiver’s socket no more than 100 msec later, interesting for real-time applications such as telephony, virtual environments…</p>\n<h4 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h4><p>A transport-layer protocol can provide an application with one or more security services. It could encrypt all data transmitted by sending process and in the receiving host decrypt it.</p>\n<h3 id=\"2-1-4-Transport-Services-Provided-by-the-Internet\"><a href=\"#2-1-4-Transport-Services-Provided-by-the-Internet\" class=\"headerlink\" title=\"2.1.4 Transport Services Provided by the Internet\"></a>2.1.4 Transport Services Provided by the Internet</h3><p>The Internet makes two transport protocols available to applications: TCP and UDP.</p>\n<h4 id=\"TCP-Services\"><a href=\"#TCP-Services\" class=\"headerlink\" title=\"TCP Services\"></a>TCP Services</h4><p>TCP includes a connection-oriented service and a reliable data transfer service:</p>\n<ul>\n<li><strong>Connection-oriented service</strong>: client and server exchange transport-layer control information <em>before</em> the application-level messages begin to flow. This so-called <em>handshaking</em> procedure alerts the client and server, allowing them to prepare for an onslaught of packets. Then a <strong>TCP connection</strong> is said to exist between the sockets of the two processes. When the application finishes sending messages, it must tear down the connection</li>\n</ul>\n<h5 id=\"SECURING-TCP\"><a href=\"#SECURING-TCP\" class=\"headerlink\" title=\"SECURING TCP\"></a>SECURING TCP</h5><p>Nether TCP nor UDP provide encryption. Therefore the Internet community has developed an enhancement for TCP called <strong>Secure Sockets Layer (SSL)</strong>, which not only does everything that traditional TCP does but also provides critical process-to-process security services including <em>encryption</em>, <em>data integrity</em> and <em>end-point authentication</em>. It is not a third protocol, but an enhancement of TCP, <strong>the enhancement being implemented in the application layer</strong> in both the client and the server side of the application (highly optimized libraries exist). SSL has its own socket API, similar to the traditional one. Sending processes passes cleartext data to the SSL socket which encrypts it.</p>\n<ul>\n<li><strong>Reliable data transfer service</strong> The communicating processes can rely on TCP to deliver all data sent without error and in the proper order.</li>\n</ul>\n<p>TCP also includes a <strong>congestion-control mechanism</strong>, a service for the general welfare of the Internet rather than for the direct benefit of the communicating processes. It throttles a sending process when the network is congested between sender and receiver.</p>\n<h4 id=\"UDP-Services\"><a href=\"#UDP-Services\" class=\"headerlink\" title=\"UDP Services\"></a>UDP Services</h4><p>UDP is a no-frills, lightweight transport protocol, providing minimal services. It is connectionless, there’s no handshaking. The data transfer is unreliable: there are no guarantees that the message sent will ever reach the receiving process. Furthermore messages may arrive out of order. UDP does not provide a congestion-control mechanism neither.</p>\n<h4 id=\"Services-Not-Provided-by-Internet-Transport-Protocols\"><a href=\"#Services-Not-Provided-by-Internet-Transport-Protocols\" class=\"headerlink\" title=\"Services Not Provided by Internet Transport Protocols\"></a>Services Not Provided by Internet Transport Protocols</h4><p>These two protocols do not provide timing or throughput guarantees, services not provided by today’s Internet transport protocols. We therefore design applications to cope, to the greatest extent possible, with this lack of guarantees.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-app_tras.png\" alt=\"app tras\"></p>\n<h3 id=\"2-1-5-Application-Layer-Protocols\"><a href=\"#2-1-5-Application-Layer-Protocols\" class=\"headerlink\" title=\"2.1.5 Application-Layer Protocols\"></a>2.1.5 Application-Layer Protocols</h3><p>An <strong>application-layer protocol</strong> defines how an application’s processes, running on different end systems, pass messages to each other. It defines:</p>\n<ul>\n<li>The type of the messages exchanged (request&#x2F;response)</li>\n<li>The syntax of the various message types</li>\n<li>The semantics of the fields (meaning of the information in fields)</li>\n<li>The rules for determining whem and how a process sends messages and responds to messages</li>\n</ul>\n<h2 id=\"2-2-The-Web-and-HTTP\"><a href=\"#2-2-The-Web-and-HTTP\" class=\"headerlink\" title=\"2.2 The Web and HTTP\"></a>2.2 The Web and HTTP</h2><p>In the early 1990s, a major new application arrived on the scene: the World Wide Web (Berners-Lee 1994), the first application that caught the general public’s eye.<br>The Web operates <em>on demand</em>: users receives what they want, when they want it.<br>It is enormously easy for an individual to make information available over the web, hyperlinks and search engines help us navigate through the ocean of web sites…</p>\n<h3 id=\"2-2-1-Overview-of-HTTP\"><a href=\"#2-2-1-Overview-of-HTTP\" class=\"headerlink\" title=\"2.2.1 Overview of HTTP\"></a>2.2.1 Overview of HTTP</h3><p>The <strong>HyperText Transfer Protocol (HTTP)</strong>, the Web’s application-layer protocol is a the heart of the Web. It is implemented in two programs: a client program and a server program.<br>The two programs talk to each other by exchanging HTTP messages.<br>A <strong>Web page</strong> (or document) consists of objects. An <strong>object</strong> is simply a file (HTML file, jpeg image…) that is <em>addressable by a single URL</em>.<br>Most Web pages consist of a <strong>base HTML file</strong> and several referenced objects. The HTML file references the other objects in the page with the objects’ URLs.<br>Each URL has two components: the hostname of the server that houses the object and the object’s path name.<br><strong>Web Browsers</strong> implement the client side of HTTP.<br><strong>HTTP</strong> uses TCP as its underlying transport protocol.<br>The server sends requested files to clients without storing any state information about the client: it is a <strong>stateless protocol</strong></p>\n<h3 id=\"2-2-2-Non-Persistent-and-Persistent-Connections\"><a href=\"#2-2-2-Non-Persistent-and-Persistent-Connections\" class=\"headerlink\" title=\"2.2.2 Non-Persistent and Persistent Connections\"></a>2.2.2 Non-Persistent and Persistent Connections</h3><p>In many Internet applications, the client and server communicate for an extended period of time, depending on the application and on how the application is being used, the series of requests may be back-to-back, periodically at regular intervals or intermittently. When this is happening over TCP, the developer must take an important decision: should each request&#x2F;response pair be sent over a <em>separate</em> TCP connection or should all of the requests and their corresponding responses be sent over the <em>same</em> TCP connection?<br>In the former approach, the application is said to use <strong>non-persistent connections</strong> and in the latter it is said to use <strong>persistent connections</strong><br>By default HTTP uses non-persistent connections but can be configured to be use persistent connections.<br>To estimate the amount of time that elapses when a client requests the base HTML file until the entire file is received by the client we define the <strong>round-trip time</strong> (<strong>RTT</strong>) which is the time it takes for a small packet to travel from client to server and then back to the client.</p>\n<h4 id=\"HTTP-with-Non-Persistent-Connections\"><a href=\"#HTTP-with-Non-Persistent-Connections\" class=\"headerlink\" title=\"HTTP with Non-Persistent Connections\"></a>HTTP with Non-Persistent Connections</h4><p>For the page and each object it contains, a TCP connection must be opened (handshake request, handshake answer), we therefore observe an addition RTT, and for each object we will have a request followed by the reply<br>This model can be expensive on the server side: a new connection needs to be established for each requested object, for each connection a TCP buffer must be allocated along some memory to store TCP variables.</p>\n<h4 id=\"HTTP-with-Persistent-Connections\"><a href=\"#HTTP-with-Persistent-Connections\" class=\"headerlink\" title=\"HTTP with Persistent Connections\"></a>HTTP with Persistent Connections</h4><p>The server leaves the TCP connection open after sending a response, subsequent requests and responses between the same client and server will be sent over the same connection. In particular an entire web page (text + objects) ca be sent over a single persistent TCP connection, multiple web pages residing on the same server can be sent from the server to the same client over a single persistent TCP connection.<br><strong>These requests can be make back-to-back</strong> without waiting for replies to pending requests (<strong>pipelining</strong>).<br>When the server receives back-to-back requests, it sends the objects back-to-back.<br>If connection isn’t used for a pre-decided amount of time, it will be closed.</p>\n<h3 id=\"2-2-3-HTTP-Message-Format\"><a href=\"#2-2-3-HTTP-Message-Format\" class=\"headerlink\" title=\"2.2.3 HTTP Message Format\"></a>2.2.3 HTTP Message Format</h3><p>Two types of HTTP messages:</p>\n<h4 id=\"HTTP-Request-Message\"><a href=\"#HTTP-Request-Message\" class=\"headerlink\" title=\"HTTP Request Message\"></a>HTTP Request Message</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /somedir/page.html HTTP/1.1</span><br><span class=\"line\">Host: www.someschool.edu</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">User-agent: Mozilla/5.0</span><br><span class=\"line\">Accept-language: fr</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Ordinary ASCII text</li>\n<li>First line: <strong>request line</strong></li>\n<li>Other lines: <strong>header lines</strong></li>\n<li>the first lines has 3 fields: method field, URL field, HTTP version field:<ul>\n<li>method field possible values: <code>GET, POST, HEAD, PUT, DELETE</code></li>\n</ul>\n</li>\n</ul>\n<p>The majority of HTTP requests use the GET method, used to request an object.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-http_request.png\" alt=\"http requests\"></p>\n<p> The entity body (empty with <code>GET</code>) is used by the <code>POST</code> method, for example for filling out forms. The user is still requesting a Web page but the specific contents of the page depend on what the user entered into the form fields. When <code>POST</code> is used, the entity body contains what the user entered into the form fields.<br>Requests can also be made with <code>GET</code> including the inputted data in the requested URL.<br>The <code>HEAD</code> method is similar to <code>GET</code>, when a server receives it, it responds with an HTTP message but it leaves out the requested object. It is often used for debugging.<br><code>PUT</code> is often used in conjunction with web publishing tools, to allow users to upload an object to a specific path on the web servers.<br>Finally, <code>DELETE</code> allows a user or application to delete an object on a web server.</p>\n<h4 id=\"HTTP-Response-Message\"><a href=\"#HTTP-Response-Message\" class=\"headerlink\" title=\"HTTP Response Message\"></a>HTTP Response Message</h4><p>A typical HTTP response message:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Date: ...</span><br><span class=\"line\">Server: ...</span><br><span class=\"line\">Last-Modified: ...</span><br><span class=\"line\">Content-Length: ...</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\"></span><br><span class=\"line\">(data data data data data ...)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Status line: protocol version, status code, corresponding status message</li>\n<li>six header lines:<ul>\n<li>the connection will be closed after sending the message</li>\n<li>date and time when the response was created (when the server retrieves the object from the file system, insert object in the message, sends the response message)</li>\n<li>Type of the server &#x2F; software</li>\n<li>Last modified: useful for object caching</li>\n<li>Content-Length: number of bytes in the object</li>\n<li>Content-Type</li>\n</ul>\n</li>\n<li>entity body: contains the requested object itself (data)</li>\n</ul>\n<p>Some common status codes:</p>\n<ul>\n<li><code>200 OK</code>: request succeeded, information returned</li>\n<li><code>301 Moved Permanently</code>: the object has moved, the new location is specified in the header of the response</li>\n<li><code>400 Bad Request</code>: generic error code, request not understood</li>\n<li><code>404 Not Found</code>: The requested document doesn’t exist on the server</li>\n<li><code>505 HTTP Version Not Supported</code>: The requested HTTP protocol version is not supported by the server</li>\n</ul>\n<h3 id=\"2-2-4-User-Server-Interaction-Cookies\"><a href=\"#2-2-4-User-Server-Interaction-Cookies\" class=\"headerlink\" title=\"2.2.4 User-Server Interaction: Cookies\"></a>2.2.4 User-Server Interaction: Cookies</h3><p>An HTTP server is <em>stateless</em> in order to simplify server design and improves performances. A website can identify users using <strong>cookies</strong>.<br>Cookie technology has 4 components:</p>\n<ol>\n<li>Cookie header in HTTP response message</li>\n<li>Cookie header in HTTP request message</li>\n<li>Cookie file on the user’s end-system managed by the browser</li>\n<li>Back-end database at the Website</li>\n</ol>\n<p>User connects to website using cookies:</p>\n<ul>\n<li>Server creates a unique identification number and creates an entry in its back-end database indexed by the identification number<br> -server responds to user’s browser including in the header: <code>Set-cookie: identification number</code></li>\n<li>The browser will append to the cookie file the hostname of the server and the identification number header</li>\n<li>Each time the browser will request a page, it will consult the cookie file, extract the identification number for the site and put a cookie header line including the identification number</li>\n</ul>\n<p>The server can track the user’s activity: it knows exactly what pages, in which order and at what times that identification number has visited. This is also why cookies are controversial: a website can learn a lot about a user and sell this information to a third party.</p>\n<p>Therefore <strong>cookies can be used to create a user session layer on top of stateless HTTP</strong>.</p>\n<h3 id=\"2-2-5-Web-Caching\"><a href=\"#2-2-5-Web-Caching\" class=\"headerlink\" title=\"2.2.5 Web Caching\"></a>2.2.5 Web Caching</h3><p>A <strong>Web cache</strong>, also called <strong>proxy server</strong> is a network entity that satisfies HTTP requests on behalf of an origin Web server. It has its own disk storage and keeps copies of recently requested objects in this storage.</p>\n<ol>\n<li>The browser establishes a TCP connection to the web cache, sending an HTTP request for the object to the Web cache.</li>\n<li>The web cache checks to see if it has a copy of the object stored locally. If yes, it will return it within an HTTP response message to the browser.</li>\n<li>If not, the Web cache opens a TCP connection to the origin server, which responds with the requested object.</li>\n<li>The Web caches receives the object, stores a copy in its storage and sends a copy, within an HTTP response message, to the browser over the existing TCP connection.</li>\n</ol>\n<p>Therefore a <strong>cache is both a server and a client at the same time</strong>.<br>Usually caches are purchased and installed by ISPs.<br>They can substantially reduce the response time for a client request and substantially reduce traffic on an institution’s access link to the Internet.</p>\n<p>Through the use of <strong>Content Distribution Networks (CDNs)</strong> web caches are increasingly playing an important role in the Internet. A CDN installs many geographically distributed caches throughout the Internet, localizing much of the traffic.</p>\n<h3 id=\"2-2-6-The-Conditional-GET\"><a href=\"#2-2-6-The-Conditional-GET\" class=\"headerlink\" title=\"2.2.6 The Conditional GET\"></a>2.2.6 The Conditional <code>GET</code></h3><p>Caches introduce a new problem: what if the copy of an object residing in the cache is stale?<br>The <strong>conditional GET</strong> is used to verify that an object is up to date.<br>An HTTP request message is a conditional get if</p>\n<ol>\n<li>the request message uses the <code>GET</code> method</li>\n<li>the request message includes an <code>If-modified-since:</code> header line.</li>\n</ol>\n<p>A conditional get message is sent from the cache to server which responds only if the object has been modified.</p>\n<h2 id=\"2-5-DNS-The-Internet’s-Directory-Service\"><a href=\"#2-5-DNS-The-Internet’s-Directory-Service\" class=\"headerlink\" title=\"2.5 DNS - The Internet’s Directory Service\"></a>2.5 DNS - The Internet’s Directory Service</h2><p>One identifier for a host is its <strong>hostname</strong> [<code>cnn.com</code>, <code>www.yahoo.com</code>]. Hostnames are mnemonic and therefore used by humans. Hosts are also identified by <strong>IP addresses</strong>.</p>\n<h3 id=\"2-5-1-Services-provided-by-DNS\"><a href=\"#2-5-1-Services-provided-by-DNS\" class=\"headerlink\" title=\"2.5.1 Services provided by DNS\"></a>2.5.1 Services provided by DNS</h3><p>Routers and use IP addresses. The Internet’s <strong>domain name system (DNS)</strong> translates hostnames to IP addresses. The DNS is:</p>\n<ol>\n<li>A distributed database implemented in a hierarchy of <strong>DNS Servers</strong></li>\n<li>An application-layer protocol that allows hosts to query the distributed database.</li>\n</ol>\n<p>DNS servers are often UNIX machines running the <strong>B</strong>erkeley <strong>I</strong>nternet <strong>N</strong>ame <strong>D</strong>omaine (BIND) software.</p>\n<p><strong>DNS runs over UDP and uses port 53</strong><br>It is often employed by other application-layer protocols (HTTP, FTP…) to translate user-supplied hostnames to IP addresses.</p>\n<p>How it works:</p>\n<ul>\n<li>The user machine runs the client side of the DNS application</li>\n<li>The browser extracts <code>www. xxxxx . xxx</code> from the URL and passes the hostname to the client side of the DNS application</li>\n<li>The DNS sends a query containing the hostname to a DNS server</li>\n<li>The DNS client eventually receives a reply including the IP address for the hostname</li>\n<li>The browser can initiate a TCP connection.</li>\n</ul>\n<p><strong>DNS adds an additional delay</strong></p>\n<p>DNS provides other services in addition to translating hostnames to IP addresses:</p>\n<ul>\n<li><strong>host aliasing</strong>: a host with a complicated hostname can have more alias names. The original one is said to be a <strong>canonical hostname</strong>.</li>\n<li><strong>mail server aliasing</strong>: to make email servers’ hostnames more mnemonic. This also allows for an e-mail server and an Web server to have the same hostname.</li>\n<li><strong>load distribution</strong>: replicated servers can have the same hostname. In this case, a set of IP addresses is associated with one canonical hostname. When a client make a DNS query for a name mapped to a set of addresses, the server responds with the entire set, but rotates the ordering within each reply.</li>\n</ul>\n<h3 id=\"2-5-2-Overview-of-How-DNS-Works\"><a href=\"#2-5-2-Overview-of-How-DNS-Works\" class=\"headerlink\" title=\"2.5.2 Overview of How DNS Works\"></a>2.5.2 Overview of How DNS Works</h3><p>From the perspective of the invoking application in the user’s host, DNS is a black box providing a simple, straightforward translation service.<br>Having one single global DNS server would be simple, but it’s not realistic because it would a <strong>single point of failure</strong>, it would have an impossible <strong>traffic volume</strong>, it would be <strong>geographically too distant</strong> from some querying clients, its <strong>maintenance</strong> would be impossible.</p>\n<h4 id=\"A-Distributed-Hierarchical-Database\"><a href=\"#A-Distributed-Hierarchical-Database\" class=\"headerlink\" title=\"A Distributed, Hierarchical Database\"></a>A Distributed, Hierarchical Database</h4><p>The DNS uses a large number of servers, organized in a hierarchical fashion and distributed around the world.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-dns-servers.png\" alt=\"dns servers\"></p>\n<p>The three classes of DNS servers:</p>\n<ul>\n<li><strong>Root DNS servers</strong>: In the Internet there are 13 root DNS servers, most hosted in North America, each of these is in reality a network of replicated servers, for both security and reliability purposes (total: 247)</li>\n<li><strong>Top-level domain (TLD) servers</strong>: responsible for top-level domains such as com org net edu and govand all of the country top-level domains uk fr jp</li>\n<li><strong>Authoritative DNS servers</strong>: every organization with publicly accessible hosts must provide publicly accessible DNS records that map the names of those hosts to IP addresses. An organization can choose to implement its own authoritative DNS server or to pay to have the records stored in an authoritative DNS of some service provider.</li>\n</ul>\n<p>Finally there are <strong>local DNS servers</strong> which is central to the DNS architecture. They are hosted by ISPs. When a hosts connects to one of these, the local DNS server provides the host with the IP addresses of one or more of its local DNS servers. Requests can ho up to the root DNS servers and back down.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-distributedDNS.png\" alt=\"distriuted dns\"></p>\n<p>We can have both <strong>recursive</strong> and <strong>iterative queries</strong>.<br>In <strong>recursive queries</strong> the user sends the request its nearest DNS which will ask to a higher-tier server, which will ask to lower order… the chain goes on until it reaches a DNS that can reply, the reply will follow the inverse path that the request had.<br>In <strong>iterative queries</strong> the same machine sends requests and receives replies.<br>Any DNS can be iterative or recursive or both.</p>\n<h4 id=\"DNS-Caching\"><a href=\"#DNS-Caching\" class=\"headerlink\" title=\"DNS Caching\"></a>DNS Caching</h4><p>DNS extensively exploits DNS caching in order to improve the delay performance and to reduce the number of DNS messages ricocheting around the Internet.<br>In a query chain, when a DNS receives a DNS reply it can cache the mapping in its local memory.</p>\n<h3 id=\"2-5-3-DNS-Records-and-Messages\"><a href=\"#2-5-3-DNS-Records-and-Messages\" class=\"headerlink\" title=\"2.5.3 DNS Records and Messages\"></a>2.5.3 DNS Records and Messages</h3><p>The DNS servers that implement the DNS distributed database store <strong>resource records (RRs)</strong> including RRs that provide hostname-to-IP address mappings.<br>Each DNS reply messages carries one or more resource records.</p>\n<p>A resource record is a four-tuple that contains the fields: <code>(Name, Value, Type, TTL)</code><br><code>TTL</code> is the time to live of the resource record (when a resource should be removed from a cache). The meaning of <code>Name</code> and <code>Value</code> depend on <code>Type</code>:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>a hostname</td>\n<td>IP address</td>\n</tr>\n<tr>\n<td>NS</td>\n<td>a domain (foo.com)</td>\n<td>hostname of an  authoritative DNS server which knows how to obtain the IP addresses for hosts in the domain. Used to route queries further along in the query chain</td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>a alias name</td>\n<td>canonical hostname for the name in Name</td>\n</tr>\n<tr>\n<td>MX</td>\n<td>alias hostname</td>\n<td>canonical hostname of a mail server that has an alias hostname Name</td>\n</tr>\n</tbody></table>\n<h4 id=\"DNS-Messages\"><a href=\"#DNS-Messages\" class=\"headerlink\" title=\"DNS Messages\"></a>DNS Messages</h4><p>The only types of DNS messages are DNS queries and reply messages. They have the same format:</p>\n<ul>\n<li>first 12 bytes in the <em>header section</em>: 16-bit number identifying the query, which will be copied into the reply query so that the client can match received replies with sent queries. 1 bit query&#x2F;reply flag (0 query, 1 reply). 1 bit flag authoritative flag set in reply messages when DNS server is an authoritative for a queried name. 1 bit recursion flag if the client desires that the server performs recursion when it doesn’t have a record, 1 bit recursion-available field is set in the reply if the DNS server supports recursion</li>\n<li><em>question section</em>: information about the query: name field containing the name being queried, type field</li>\n<li><em>answer section</em>: resource records for the name originally queried: Type, Value, TTL. Multiple RRs can be returned if the server has multiple IP addresses</li>\n<li><em>authority section</em>: records for other authoritative servers.</li>\n<li><em>additional section</em>: other helpful records: canonical hostnames…</li>\n</ul>\n<h4 id=\"Inserting-Records-into-the-DNS-Database\"><a href=\"#Inserting-Records-into-the-DNS-Database\" class=\"headerlink\" title=\"Inserting Records into the DNS Database\"></a>Inserting Records into the DNS Database</h4><p>We created a new company. Next we register th domain name <code>newcompany.com</code> at a registrar. A <strong>registrar is a commercial entity that verifies the uniqueness of the domain name, enters it into the DNS database and collects a small fee for these services</strong>. When we register the address, <strong>we need the provide the registrar with the IP address of our primary and secondary authoritative DNS servers</strong>, that will make sure that a Type NS and a Type A records are entered into the TLD com servers for our two DNS servers.</p>\n<h5 id=\"Focus-on-security-DNS-vulnerabilities\"><a href=\"#Focus-on-security-DNS-vulnerabilities\" class=\"headerlink\" title=\"Focus on security: DNS vulnerabilities\"></a>Focus on security: DNS vulnerabilities</h5><ul>\n<li>DDoS bandwidth-flooding attack</li>\n<li>MITM: the mitm answers queries with false replies tricking the user into connecting to another server.</li>\n<li>The DNS infrastructure can be used to launch a DDoS attack against a targeted host</li>\n</ul>\n<p>To date, there hasn’t been an attack that that has successfully impeded the DNS service, DNS has demonstrated itself to be surprisingly robust against attacks. However there have been successful reflector attacks, these can be addressed by appropriate configuration of DNS servers.</p>\n<h2 id=\"2-6-Peer-to-Peer-Applications\"><a href=\"#2-6-Peer-to-Peer-Applications\" class=\"headerlink\" title=\"2.6 Peer-to-Peer Applications\"></a>2.6 Peer-to-Peer Applications</h2><h3 id=\"2-6-1-File-Distribution\"><a href=\"#2-6-1-File-Distribution\" class=\"headerlink\" title=\"2.6.1 File Distribution\"></a>2.6.1 File Distribution</h3><p>In P2P file distribution, each peer can redistribute any portion of the file it has received to any peers, thereby assisting the server in the distribution process. As of 2012 the most popular P2P file distribution protocol is BitTorrent, developed by Bram Cohen.</p>\n<h4 id=\"Scalability-of-P2P-architectures\"><a href=\"#Scalability-of-P2P-architectures\" class=\"headerlink\" title=\"Scalability of P2P architectures\"></a>Scalability of P2P architectures</h4><p>Denote the upload rate of the server’s access link by $u_s$, the upload rate of the <em>i</em>th peer’s access link by $u_i$ and the download rate of the <em>i</em>th access link by $d_i$, tthe size of the to be distributed in bits ()<br>Comparison client-server and P2P.</p>\n<h4 id=\"Client-Server\"><a href=\"#Client-Server\" class=\"headerlink\" title=\"Client-Server\"></a>Client-Server</h4><p>The server must transmit one copy of the file to <em>N</em> peers, thus it transmits *NF *bits. The time to distribute the file is at least <strong>NF&#x2F;u_s</strong>.<br>Denote $d_min &#x3D; min{ d_i }$ the link with the slowest download rate cannot obtain all <em>F</em> bits in less than $F&#x2F;d_min$ seconds<br>Therefore:<br>$$ D_{cs} \\geq \\max \\left{ \\frac{NF}{u_s} , \\frac{F}{d_min} \\right} $$</p>\n<h4 id=\"P2P\"><a href=\"#P2P\" class=\"headerlink\" title=\"P2P\"></a>P2P</h4><p>When a peer receives some file data, it can use its own upload capacity to redistribute the data to other peers.</p>\n<ul>\n<li>At the beginning of the distribution only the server has the file. It must send all the bits at least once. $D \\geq F&#x2F;u_s$</li>\n<li>The peer with the lowest download rate cannot obtain all <em>F</em> bits of the file in less than $F&#x2F;d_min $ seconds.</li>\n<li>The total upload capacity of the system is equal to the summation of the upload rates of the server and of all the peers. The system must upload <em>F</em> bits to <em>N</em> peers, thus delivering a total of <em>NF</em> bits which can’t be done faster that $u_total$.</li>\n</ul>\n<p>We obtain:<br>$$ D_{P2P} &#x3D; \\max \\left{ \\frac{F}{u_s} , \\frac{F}{d_{min}} , \\frac{NF}{u_s + \\sum_{i&#x3D;1}^N u_j} \\right} $$</p>\n<h4 id=\"BitTorrent\"><a href=\"#BitTorrent\" class=\"headerlink\" title=\"BitTorrent\"></a>BitTorrent</h4><p>In BitTorrent the collection of all peers participating in the distribution of a particular file is called a <em>torrent</em>. Peers in a torrent download equal-size <em>chunks</em> of the file from one another with a typical chunk size of 256 KBytes.<br>At the beginning a peer has no chunks, it accumulates more and more chunks over time. While it downloads chunks it also uploads chunks to other peers. Once a peer has acquired the entire file it may leave the torrent or remain in it and continue to upload chunks to other peers (becoming a <em>seeder</em>). Any peer can leave the torrent at any time and later rejoin it at anytime as well.</p>\n<p>Each torrent has an infrastructure node called a <em>tracker</em>: when a peer joins a torrent, it registers itself with the tracker and periodically informs it that it is still in the torrent. The tracker keeps track of the peers participating in the torrent. A torrent can have up to thousands of peers participating at any instant of time.</p>\n<p>User joins the torrent, the tracker randomly selects a subset of peers from the set of participating peers. User establishes concurrent TCP connections with all of these peers, called <em>neighboring peers</em>. The neighboring peers can change over time.<br>The user will ask each of his neighboring peers for the list of chunks they have (one list per neighbor).<br>The user starts downloading the chunks that have the fewest repeated copies among the neighbors (<strong>rares first</strong> technique). In this manner the rarest chunks get more quickly redistributed, roughly equalizing the numbers of copies of each chunk in the torrent.</p>\n<p>Every 10 seconds the user measures the rate at which she receives bits and determines the four peers that are sending to her at the highest rate. It then reciprocates by sending chunks to these same four peers. The four peers are called <strong>unchocked</strong>. Every 30 seconds it also choses one additional neighbor and sends it chunks. These peers are called <strong>optmistically unchocked</strong>.</p>\n<h3 id=\"2-6-2-Distributed-Hash-Tables-DHTs\"><a href=\"#2-6-2-Distributed-Hash-Tables-DHTs\" class=\"headerlink\" title=\"2.6.2 Distributed Hash Tables (DHTs)\"></a>2.6.2 Distributed Hash Tables (DHTs)</h3><p>How to implement a simple database in a P2P network?<br>In the P2P system each peer will only hold a small subset of the totality of the (key, value) pairs. Any peer can query the distributed database with a particular key, the database will locate the peers that have the corresponding pair and return the pair to querying peer. Any peer can also insert a new pair in the databse. Such a distributed database is referred to as a <strong>distributed hash table (DHT)</strong>.<br>In a P2P file sharing application a DHT can be used to store the chunks associated to the IP of the peer in possession of them.</p>\n<h6 id=\"An-approach\"><a href=\"#An-approach\" class=\"headerlink\" title=\"An approach:\"></a>An approach:</h6><p>Let’s assign an identifier to each peer, where the identifier is an integer in the range <strong><code>[0, 2^n -1]</code></strong> for some fixed <strong><code>n</code></strong>. Such an identifier can be expressed by a <strong><code>n-bit</code></strong> representation. A hash function is used to transform non-integer values into integer values. We suppose that this function is available to all peers.<br><strong>How to assign keys to peers?</strong> We assign each <code>(key,value)</code> pair to the peer <em><strong>whose identifier is the closest to key</strong></em>, which is the identifier defined as <em><strong>the closest successor of the key</strong></em>.<br>To avoid having each peer keeping track of all other peers (scalability issue) we use</p>\n<h4 id=\"Circular-DHT\"><a href=\"#Circular-DHT\" class=\"headerlink\" title=\"Circular DHT\"></a>Circular DHT</h4><p>If we organize peers into a circle, each peer only keeps track of its immediate successor and predecessor <strong>(modulo <code>2^n</code>)</strong>. This circular arrangement of peers is a special case of an <strong>overlay network</strong>: the peers form an abstract logical network which resides above the “underlay” computer network, the overlay links are not physical but virtual liaisons between pairs of peers. A single overlay link typically uses many physical links and physical routers in the underlying network.</p>\n<p>In the circle a peer asks “who is responsible for key <em>k</em>?” and it sends the message clockwise around the circle. Whenever a peer receives such message, it knows the identifier of its predecessor and predecessor, it can determine whether it is responsible (closest to) for the key in question. If not, it passes the message to its successor. When the message reaches the peer responsible for the key, it can send a message back to the querying peer indicating that it is responsible for that key.<br>Using this system <strong><code>N/2*</code></strong> messages are sent on average <strong>(N &#x3D; number of peers)</strong>. In designing a DHT there is always a tradeoff between the number of neighbors for each peer and the number of DHT messages needed to resolve a single query. (1 message if each peer keeps track of all other peers; <strong><code>N/2</code></strong> messages if each knows only 2 neighbors).<br>To improve our circular DHT we could add shortcuts so that each peer not only keeps track of its immediate successor and predecessor but also of relatively small number of shortcut peers scattered around the circle.<br><strong>How many shortcut neighbors?</strong> Studies show that DHT can be designed so that the number of neighbors per peer as well as the number of messages per query is <strong><code>O(log *N*)</code> (<code>N</code> the number of peers)</strong>.</p>\n<h4 id=\"Peer-Churn\"><a href=\"#Peer-Churn\" class=\"headerlink\" title=\"Peer Churn\"></a>Peer Churn</h4><p>In a P2P system, a peer can come or go without warning. To keep the DHT overlay in place in presence of a such peer churn we require each peer to keep track (know to IP address) of its predecessor and successor, and to periodically verify that its two successors are alive.<br>If a peer abruptly leaves, its successor and predecessor need to update their information. The predecessor replaces its first successor with its second successor and ask it for the identifier and IP address of its immediate successor.</p>\n<p>What if a peer joins? If it only knows one peer, it will ask him what will be his predecessor and successor. The message will reach the predecessor which will send the new arrived its predecessor and successor information. The new arrived can join the DHT making its predecessor successor its own successor and by notifying its predecessor to change its successor information.</p>\n<h2 id=\"2-7-Socket-Programming-Creating-Network-Applications\"><a href=\"#2-7-Socket-Programming-Creating-Network-Applications\" class=\"headerlink\" title=\"2.7 Socket Programming: Creating Network Applications\"></a>2.7 Socket Programming: Creating Network Applications</h2><p>Only code explication —-&gt; skipping</p>\n<h1 id=\"Chapter-3-Transport-Layer\"><a href=\"#Chapter-3-Transport-Layer\" class=\"headerlink\" title=\"Chapter 3: Transport Layer\"></a>Chapter 3: Transport Layer</h1><h2 id=\"3-1-Introduction-and-Transport-Layer-Services\"><a href=\"#3-1-Introduction-and-Transport-Layer-Services\" class=\"headerlink\" title=\"3.1 Introduction and Transport-Layer Services\"></a>3.1 Introduction and Transport-Layer Services</h2><p>A transport-layer protocol provides for <strong>logical communication</strong> (as if the hosts running the processes were directly connected) between application processes running on different hosts. Application processes use the logical communication provided by the transport layer to send messages to each other, free from the worry of the details of the physical infrastructure used.<br><strong>Transport-layer protocols are implemented in the end systems but not in network routers</strong>.<br>On the sending side, the transport layer converts the application messages into transport-layer packets, known as transport-layer <strong>segments</strong>. This is done by breaking them into smaller chunks and adding a transport-layer header to each chunk. The transport-layer then passes the segment to the network-layer packet at the sending end-system.<br>On the receiving side, the network layer extracts the transport-layer segment from the datagram and passes the segment up to the transport-layer which then processes the received segment, making the data in the segment available to the received application.</p>\n<h3 id=\"3-1-1-Relationship-Between-Transport-and-Network-Layers\"><a href=\"#3-1-1-Relationship-Between-Transport-and-Network-Layers\" class=\"headerlink\" title=\"3.1.1 Relationship Between Transport and Network Layers\"></a>3.1.1 Relationship Between Transport and Network Layers</h3><p>A transport-layer protocol provides logical communication between <strong><em>processes</em></strong> running on different hosts. Whereas a network-layer protocol provides logical communication between <strong><em>hosts</em></strong>.</p>\n<h3 id=\"3-1-2-Overview-of-the-Transport-Layer-in-the-Internet\"><a href=\"#3-1-2-Overview-of-the-Transport-Layer-in-the-Internet\" class=\"headerlink\" title=\"3.1.2 Overview of the Transport Layer in the Internet\"></a>3.1.2 Overview of the Transport Layer in the Internet</h3><p>A TCP&#x2F;IP network (such as the Internet) makes two distinct transport-layer protocols available to the application layer:</p>\n<ul>\n<li><strong>UDP</strong> [ <strong>U</strong>ser <strong>D</strong>atagram <strong>P</strong>rotocol], which provides an unreliable, connectionless service to the invoking application</li>\n<li><strong>TCP</strong> [<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol] which provides a reliable, connection-oriented service to the invoking application.</li>\n</ul>\n<p>We need to spend a few words on the network-layer protocol: the Internet network-layer protocol is the IP (Internet Protocol). It provides a logical communication between hosts. The IP service model is a <strong>best-effort delivery service</strong>: it makes the best effort to deliver segments between hosts, <em>but it <strong>doesnt</strong> provide guarantees</em>:</p>\n<ul>\n<li>it doesn’t guarantee segment <strong>delivery</strong></li>\n<li>it doesn’t guarantee <strong>orderly</strong> delivery of segments</li>\n<li>it doesn’t guarantee the <strong>integrity</strong> of the data in the segments</li>\n</ul>\n<p>Thus IP is said to be an <strong>unreliable service</strong>.<br>Every host has <strong>at least one network-layer address</strong> a so-called IP address.</p>\n<p>UDP and TCP extend IP’s delivery service between 2 end systems to a delivery service between two processes running on the end systems.<br>Extend host-to-host delivery to process-to-process delivery is called <strong>transport-layer multiplexing and demultiplexing</strong>.<br>UDP provides process-to-process delivery and error checking services. Therefore it is an <strong>unreliable service</strong>.<br>TCP provides <strong>reliable data transfer</strong> using flow control, sequence numbers, acknowledgements and timers. <strong>TCP thus converts IP’s unreliable service between end systems into a reliable data transport service between processes</strong>.<br>TCP also provides <strong>congestion control</strong>, a service not really provided to the invoking application as it is to the Internet as a whole: <strong>it prevents any TCP connection from swamping the links and routers between communication hosts with an excessive amount of traffic giving each connection traversing a congested link an equal share of the bandwidth.</strong></p>\n<h2 id=\"3-2-Multiplexing-and-Demultiplexing\"><a href=\"#3-2-Multiplexing-and-Demultiplexing\" class=\"headerlink\" title=\"3.2 Multiplexing and Demultiplexing\"></a>3.2 Multiplexing and Demultiplexing</h2><p>Here we’ll cover multiplexing &amp; demultiplexing in the context of the Internet but <strong>a multiplexing&#x2F;demultiplexing service is needed for all computer networks</strong>.</p>\n<ul>\n<li>The job of delivering the data in a transport-layer segment to the correct socket is called <strong>demultiplexing</strong>.</li>\n<li>The job of gathering data chunks at the source host from different sockets, encapsulating each data chunk with header information (which will be used in demultiplexing) to create segments and passing the segments to the networks layer is called <strong>multiplexing</strong>.</li>\n</ul>\n<p> Therefore sockets need to have unique identifiers and each segment needs to have special fields that indicate the socket to which the segment is delivered. These fields are the <strong>source port number field</strong> and the <strong>destination port number field</strong>. Each port number is a <strong>16-bit number</strong> ranging from 0 to 65535.<br> Port numbers ranging from 0 to 1023 are called <strong>well-known port numbers</strong> and are restricted, reserved for us by well-known application protocols such as HTTP (80) and FTP (21). Designing an application, we should assign it a port number.</p>\n<h4 id=\"Connectionless-Multiplexing-and-Demultiplexing\"><a href=\"#Connectionless-Multiplexing-and-Demultiplexing\" class=\"headerlink\" title=\"Connectionless Multiplexing and Demultiplexing\"></a>Connectionless Multiplexing and Demultiplexing</h4><p>A UDP socket is fully identified by the <strong>two-tuple</strong>:<br><code>(destination IP address , destination port number)</code><br>therefore if two UDP segments have different source IP address and&#x2F;or source port numbers but have the same destination IP address and destination port number, than the two segments will be directed to the same destination process via the same destination socket.<br>The source port number serves as part of the <strong><code>return address</code></strong>.</p>\n<h4 id=\"Connection-oriented-Multiplexing-and-Demultiplexing\"><a href=\"#Connection-oriented-Multiplexing-and-Demultiplexing\" class=\"headerlink\" title=\"Connection-oriented Multiplexing and Demultiplexing\"></a>Connection-oriented Multiplexing and Demultiplexing</h4><p>A TCP socket is identified by the <strong>four-tuple</strong>:<br><code>(source IP address, source port number, destination IP address, destination port number)</code><br>When a TCP segment arrives from the network to a host, the <strong>host uses all four values to demultiplex the segment to the appropriate socket</strong>.<br>Two arriving TCP segments with different source IP addresses or source port numbers will (with the exception of a TCP carrying the original connection establishment request) be directed to two different sockets.</p>\n<p>Routine:</p>\n<ul>\n<li>The TCP server application always has a <strong>welcoming socket</strong> that waits for connection establishment requests from TCP clients on port number <code>X</code></li>\n<li>The TCP client creates a socket and sends a connection <strong>establishment request</strong> (a TCP segment including destination port, source port number and <em>a special connection-establishment bit set in the TCP header</em>)</li>\n<li>The server OS receives the incoming connection-request segment on port <code>X</code>, it locates the server process that is waiting to accept a connection on port number <code>X</code>, then creates <strong>a new socket</strong> which will be identified by<br> <code>(source port number in the segment (cleint), IP address of source host (client), the destination port number in the segment (its own), its own IP address)</code></li>\n<li>With the TCP connection in place, client and server can now send data to each other</li>\n</ul>\n<p>The server may support many simultaneous TCP connection sockets, with each socket attached to a process and each socket identified by its own four-tuple.<br>When a TCP segment arrives at the host, all the fours fields are used to demultiplex the segment to the appropriate socket.</p>\n<h5 id=\"Port-Scanning\"><a href=\"#Port-Scanning\" class=\"headerlink\" title=\"Port Scanning\"></a>Port Scanning</h5><p>Can be used both by attackers and system administrator to find vulnerabilities in the target or to know network applications are running in the network.<br>The most used port scanner is <strong>nmap</strong> free and open source.<br>For TCP it scans port looking for port accepting connections, for UDP looking for UDP ports that respond to transmitted UDP segments.<br>It then returns a list of open, closed or unreachable ports.<br>A host running nmap can attempt to scan any target <em>anywhere</em> in the Internet</p>\n<h4 id=\"Web-Servers-and-TCP\"><a href=\"#Web-Servers-and-TCP\" class=\"headerlink\" title=\"Web Servers and TCP\"></a>Web Servers and TCP</h4><p>In a web server, all segments have destination port 80 and both the initial connection-establishment segments and the segments carrying HTTP request messages will have destination port 80, the server will distinguish clients using the source IP addresses and port numbers.<br>Moreover in today’s high-performing Web, servers often use only one process and <em>create a new thread with a new connection soket for each new client connection</em>.</p>\n<p>If using persistent HTTP, client and server will exchange messages via the same server socket. If using non-persistent HTTP, a new TCP connection is created and closed for every request&#x2F;response and hence a new socket is created and closed for every request&#x2F;response.</p>\n<h2 id=\"3-3-Connectionless-Transport-UDP\"><a href=\"#3-3-Connectionless-Transport-UDP\" class=\"headerlink\" title=\"3.3 Connectionless Transport: UDP\"></a>3.3 Connectionless Transport: UDP</h2><p>UDP does multiplexing&#x2F;demultiplexing, light error checking, nothing more. If the developer chooses UDP, the application is almost directly talking with IP.<br>Note that with UDP there is no handshaking between sending and receiving transport-layer entities before sending a segment. For this reason UDP is said to be <strong>connectionless</strong>.<br>DNS is an example of an application layer protocol that typically uses UDP: there is no handshaking and when a client doesn’t receive a reply either it tries sending the query to another name server or it informs the invoking application that it can’t get a reply. Why should a developer choose UDP?</p>\n<ul>\n<li><em>Finer application-level controll over what data is sent and when</em>: as soon as the application passes data to UDP, UDP will package the data inside a segment and immediately pass it to the network layer. TCP’s congestion control can delay the sending of the segment and will try sending the packet until this is received. In real time applications the sending rate is important, so we can trade off some data loss for some sending rate.</li>\n<li><em>No connection establishement</em> UDP justs send data without any formal preliminaries without introducing any delay, probably the reason why DNS runs over UDP.</li>\n<li><em>No connection state</em>: because a UDP application doesn’t need to keep track of the users or to keep connections alive, it can typically support many more active clients than a TCP application</li>\n<li><em>Small packet header overhead</em> TCP has 20 bytes of header overhead in every segment versus the 8 of UDP</li>\n</ul>\n<p>It is possible for an application developer to have reliable data transfer when using UDP. This can be done if reliability is built into the application itself (eg adding acknowledgement and retransmission mechanisms) but it is a nontrivial task and may keep the developer busy for a long time.</p>\n<h3 id=\"3-3-1-UDP-Segment-Structure\"><a href=\"#3-3-1-UDP-Segment-Structure\" class=\"headerlink\" title=\"3.3.1 UDP Segment Structure\"></a>3.3.1 UDP Segment Structure</h3><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-udp_segment.png\" alt=\"udp segment\"></p>\n<p>The UDP header has only four fields, each consisting of two bytes: </p>\n<ul>\n<li><code>source port number</code></li>\n<li><code>destination port number</code></li>\n<li><code>checksum</code> (used for error detection.)</li>\n<li><code>length</code> (which specifies the number of bytes in the UDP segment, header + data)</li>\n</ul>\n<p>This <code>length</code> field is needed since the size of the data field may differ from one UDP segment to the next.</p>\n<h3 id=\"3-3-2-UDP-Checksum\"><a href=\"#3-3-2-UDP-Checksum\" class=\"headerlink\" title=\"3.3.2 UDP Checksum\"></a>3.3.2 UDP Checksum</h3><p>Provides for error detection, to determine whether the bits in the segment have been altered as it moves from source to destination.</p>\n<p>At the send side, UDP performs the 1s complement of the sum of all the 16-bit (max 64) words in the segment, with any overflow encountered during the sum being wrapped around. This result is put in the checksum field of the UDP segment header.</p>\n<p>UDP implements error detection according to the <strong>end-end principle</strong>: certain functionality (error detection in this case) must be implemented on an end-end basis: “functions placed at the lower levels may be redundant or of little value when compared to the cost of providing them at the higher level”.</p>\n<h2 id=\"3-4-Principles-of-Reliable-Data-Transfer\"><a href=\"#3-4-Principles-of-Reliable-Data-Transfer\" class=\"headerlink\" title=\"3.4 Principles of Reliable Data Transfer\"></a>3.4 Principles of Reliable Data Transfer</h2><p>It is the responsibility of a <strong>realiable data transfer protocol</strong> to implement reliable data service: no transferred data bits are corrupted or lost and all are delivered in the order in which they were sent.<br>We will consider the following actions:</p>\n<ul>\n<li>The sending side of the data transfer protocol will be invoked from above by a call to <code>rdt_send()</code></li>\n<li>On the receiving side <code>rdt_rcv()</code> will be called when a packet arrives while <code>deliver_data()</code> will be called when the <code>rdt</code> protocol wants to deliver data to the upper layer.</li>\n</ul>\n<p>We use the term packet rather than segment because the concepts explained here applies to computer networks in general.<br>We will only consider the case of <strong>unidirectional data transfer</strong> that is data transfer from the sending to the receiving side. The case of reliable <strong>bidirectional</strong> (full-duplex) <strong>data transfer</strong> is not more difficult but more tedious to explain. Nonetheless sending and receiving side will need to transmit packets in <em>both directions</em>.</p>\n<h3 id=\"3-4-1-Building-a-Reliable-Data-Transfer-Protocol\"><a href=\"#3-4-1-Building-a-Reliable-Data-Transfer-Protocol\" class=\"headerlink\" title=\"3.4.1 Building a Reliable Data Transfer Protocol\"></a>3.4.1 Building a Reliable Data Transfer Protocol</h3><p><strong>Finite-state machine</strong>s (FSM) are boring! And unlikely to be asked at the exam, therefore I decided not to cover them here.</p>\n<h3 id=\"3-4-2-Pipelined-Reliable-Data-Transfer-Protocols\"><a href=\"#3-4-2-Pipelined-Reliable-Data-Transfer-Protocols\" class=\"headerlink\" title=\"3.4.2 Pipelined Reliable Data Transfer Protocols\"></a>3.4.2 Pipelined Reliable Data Transfer Protocols</h3><p>In today’s high-speed networks stop-and-wait protocols are simply not tolerable: we  cannot send one packet and wait for the ACK and then send the second one, it is inefficient as we can see computing the <strong>utilization of the channel</strong>:</p>\n<p>$$ U &#x3D; \\frac{L&#x2F;R}{RTT+ L&#x2F;R} $$</p>\n<p>The solution is simple: rather than operate in a stop-and-wait manner, the sender is allowed to send multiple packets without waiting for acknowledgements. Since the many in-transit send-to-receiver packets can be visualized as filling a pipeline, this technique is known as <strong>pipelining</strong>.</p>\n<p>Some consequences:</p>\n<ul>\n<li>The range of sequence numbers must be increased: <strong>each in-transit packet must have a unique sequence number</strong></li>\n<li>Sender and receiver may have to buffer more than one packet.</li>\n</ul>\n<p>Two basic approaches toward pipelined error recovery can be identified: <strong>Go-Back-N</strong> and <strong>Selective Repeat</strong></p>\n<h3 id=\"3-4-3-Go-Back-N-GBN\"><a href=\"#3-4-3-Go-Back-N-GBN\" class=\"headerlink\" title=\"3.4.3 Go-Back-N (GBN)\"></a>3.4.3 Go-Back-N (GBN)</h3><p>The sender is allowed to send N packets (<strong>sender window size &#x3D; N</strong>), the receiver has a window of size <strong>1</strong>.<br>If a segment from sender to receiver is lost, the receiver discards all the segments with sequence number greater than the sequence number of the dropped packet, answering with ACK with this sequence number. (no packet re-ordering)<br>The sender will wait for ACK in order to move the window and send new packets. The wait is not infinite, after a certain time a timeout will occur and the sender will retransmit all the packets in the sending window.<br>In a Go-Back-N protocol, acknowledgements are <strong>cumulative</strong>: if sender receives ACK3 he will know that all the packets from 0 to 3 have been received, even if hasn’t received ACK2.</p>\n<h3 id=\"3-4-4-Selective-Repeat\"><a href=\"#3-4-4-Selective-Repeat\" class=\"headerlink\" title=\"3.4.4 Selective Repeat\"></a>3.4.4 Selective Repeat</h3><p>When the window-size and bandwidth-delay product are both large, many packets can be in the pipeline and a single packet error can thus cause GBN to retransmit a large number of packets, many unnecessarily.<br><strong>Selective Repeat</strong> avoid unnecessary retransmissions by having the sender retransmit only those that packets it suspects were received in error at the receiver:<br><strong>individual acknowledgements</strong> (opposed to cumulative).<br><strong>sender window size &#x3D; N</strong> and <strong>receiver window site &#x3D; N</strong>.<br>The sender has a timer for each packet in its window. When a timeout occurs, only the missing packet is resent.<br>The receiver buffers out of order packets.</p>\n<h2 id=\"3-5-Conncetion-Oriented-Transport-TCP\"><a href=\"#3-5-Conncetion-Oriented-Transport-TCP\" class=\"headerlink\" title=\"3.5 Conncetion-Oriented Transport: TCP\"></a>3.5 Conncetion-Oriented Transport: TCP</h2><h3 id=\"3-5-1-The-TCP-Connection\"><a href=\"#3-5-1-The-TCP-Connection\" class=\"headerlink\" title=\"3.5.1 The TCP Connection\"></a>3.5.1 The TCP Connection</h3><p>TCP is said to be <strong>connection-oriented</strong> because before one application process can begin to send data to another, the two processes must first “handshake” with each other. During the connection establishment, both sides of the connection will initialize many TCP state variables.<br>TCP connection is not an end-to-end TDM or FDM circuit nor is it a virtual circuit as <strong>the connection state resides entirely in the two end systems</strong> and not in the intermediate network elements.<br>A TCP connection provides a <strong>full-duplex service</strong>: when a connection between process A and process B, application layer data can flow from A to B and, at the same time, from B to A.<br>TCP is also <strong>point-to-point</strong>: a connection is always  between a <em>single sender</em> and a <em>single receiver</em>, no multicast possible.</p>\n<p>Establishment of the connection: the client first sends a special TCP segment, the server responds with a second special TCP segment and the client answer again with a third special TCP segment. The first two cannot contain a payload while the third can. Three segments: <strong>three-way handshake</strong>.<br>Both the sender and the receiver have buffers that are set up during the handshake.<br>The maximum amount if data that can be grabbed and placed in a segment is limited by the <strong>maximum segment size (MSS)</strong>.<br>TCP therefore splits data into smaller chunks and pairs each chunk of client data with a TCP header thereby forming <strong>TCP segments</strong> which are passed down to the network layer. When TCP receives a segment at the other end, the segment’s data is placed in the TCP connection’s receive buffer. <strong>Each side of the connection has its own send buffer and its own receive buffer</strong></p>\n<h3 id=\"3-5-2-TCP-Segment-Structure\"><a href=\"#3-5-2-TCP-Segment-Structure\" class=\"headerlink\" title=\"3.5.2 TCP Segment Structure\"></a>3.5.2 TCP Segment Structure</h3><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-tcp-segment.png\" alt=\"tcp segment\"></p>\n<ul>\n<li>32 bit sequence number and acknowledgement number necessary for reliable data transmission</li>\n<li>16 bit <strong>receive window</strong> used for flow control, indicates the number of bytes that a receiver is willing to accept</li>\n<li>4 bit <strong>header length field</strong>. The TCP header can be of a variable length due to the TCP options field (usually empty therefore usual length is 20 bytes)</li>\n<li><strong>options field</strong> used to negotiate MSS or as a window scaling factor for use in high speed networks.</li>\n<li><strong>flag field</strong>: 6 bits:<ol>\n<li>ACK used to indicate that the value carried in the acknowledgement field is valid, that is the segment contains an acknowledgement for a segment that has been successfully received.</li>\n<li>,  3. and 4. <strong>RST, SYN, FIN</strong> for connection setup and teardown</li>\n<li><strong>PSH</strong> indicates that the receiver should pass the data to upper layer immediately</li>\n<li>URG indicates that there is data in the segment that the sending side upper layer has marked as urgent.</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"Sequence-Numbers-and-Acknowledgment-Numbers\"><a href=\"#Sequence-Numbers-and-Acknowledgment-Numbers\" class=\"headerlink\" title=\"Sequence Numbers and Acknowledgment Numbers\"></a>Sequence Numbers and Acknowledgment Numbers</h4><p>TCP views data as <em>an unstructured, but ordered, stream of bytes</em> and TCP’s use of sequence numbers reflects this view: sequence numbers are over the stream of bytes and not over the series of transmitted segments.<br>The <strong>sequence number for a segment</strong> is the byte-stream number of the first byte in the segment.<br>EX 500,000 bytes, MSS &#x3D; 1,000 bytes &#x3D;&gt; 500 segments are created. First is numbered 0, second 1000, third 2000…..</p>\n<p><strong>The acknowledgement number</strong> <em>that Host A puts in its segment is the sequence number of the next byte Host A is expecting from Host B</em>.<br>TCP is said to provide <strong>cumulative acknowledgements</strong>: if sender receives ACK 536 he will know that all the bytes from 0 to 535 have been well received.<br>What does a host do when it receives out-of-order segments? The receiver buffers the out-of-order bytes and waits for the missing bytes to fill in the gaps.<br>Usually both sides of a TCP connection randomly choose an initial sequence number <strong>randomly</strong> both for security and for minimizing the possibility that a segment that is still present in the network from an earlier, already terminated connection between two hosts is mistaken for a valid segment in a later connection between these same two hosts.</p>\n<h3 id=\"3-5-3-Round-Trip-Time-Estimation-and-Timeout\"><a href=\"#3-5-3-Round-Trip-Time-Estimation-and-Timeout\" class=\"headerlink\" title=\"3.5.3 Round-Trip Time Estimation and Timeout\"></a>3.5.3 Round-Trip Time Estimation and Timeout</h3><p>TCP uses a timeout&#x2F;retransmit mechanism to recover from lost segments. The question rises: How long should the timeout intervals be?<br>Clearly the timeout should be larger than the connection’s round-trip time? How much larger? How can the RTT be evaluated?</p>\n<h4 id=\"Estimating-the-Round-Trip-Time\"><a href=\"#Estimating-the-Round-Trip-Time\" class=\"headerlink\" title=\"Estimating the Round-Trip Time\"></a>Estimating the Round-Trip Time</h4><p>The sample RTT, <code>SampleRTT</code>, for a segment is the amount of time between when the segment is sent (passed to network layer) and when an acknowledgement for the segment is received.<br>Most TCP implementations take one <code>SampleRTT</code> at a time: at any point in time, the <code>SampleRTT</code> is being estimated for only one of the transmitted but currently unacknowledged segments, leading to a <em>new value of <code>SampleRTT</code> for approximatively every RTT</em>.<br>TCP <strong>never computes a <code>SampleRTT</code> for a segment that has been retransmitted</strong>, only for segments transmitted once.<br>In order to estimate a typical RTT, TCP keeps an average called <code>EstimatedRTT</code> of the <code>SampleRTT</code> values. Upon obtaining a new <code>SampleRTT</code> TCP updates this estimation according to the formula:</p>\n<p><code>EstimatedRTT = (1 - a) * EstimatedRTT + a * SampleRTT</code></p>\n<p> where usually a &#x3D; 1&#x2F;8 &#x3D; 0.125</p>\n<p>We note that this weighted average puts more weight on recent samples than on old samples. In statistics such an average is called an <strong>exponential weighted moving average (EWMA)</strong>.<br>It is also useful to having an estimate of the <em>variability of the RTT</em>. We can measure how much <code>SampleRTT</code> typically deviates from <code>EstimatedRTT</code>:</p>\n<p><code>DevRTT = (1 - b) * DevRTT + b* | SampleRTT - EstimatedRTT |</code></p>\n<p>We note that this is an EWMA of the difference of estimated and last measured RTT. The recommended value for b is b &#x3D; 0.25</p>\n<h4 id=\"Setting-and-Managing-the-Retransmission-Timeout-Interval\"><a href=\"#Setting-and-Managing-the-Retransmission-Timeout-Interval\" class=\"headerlink\" title=\"Setting and Managing the Retransmission Timeout Interval\"></a>Setting and Managing the Retransmission Timeout Interval</h4><p><code>TimeoutInterval = EstimatedRTT + 4 * DevRTT</code></p>\n<p>An initial <code>TimeoutInterval</code> value of 1 second is recommended.<br>Also <strong>when a timeout occurs, the value of <code>TimeoutInterval</code> is doubled</strong> in order to avoid a premature timeout occurring for a subsequent segment that will soon be acknowledged. As soon as a segment is received and <code>EstimatedRTT</code> is updated, the <code>TimeoutInterval</code> is again computed using the formula above.</p>\n<h3 id=\"3-5-4-Reliable-Data-Transfer\"><a href=\"#3-5-4-Reliable-Data-Transfer\" class=\"headerlink\" title=\"3.5.4 Reliable Data Transfer\"></a>3.5.4 Reliable Data Transfer</h3><p>TCP creates a <strong>reliable data transfer service</strong> on top of IP’s unreliable best-effort service. It ensures that the data stream that a process reads out of its TCP receive buffer is <em>uncorrupted, without gaps, without duplication and in sequence</em>.<br>We supposed until now that an individual timer was associated with each transmitted segment. However timer management can require considerable overhead. Thus the recommended TCP timer management procedures (defined by RFC standards) use only a <em><strong>single</strong></em> retransmission timer (it is helpful to think of the timer as being <em>associated with the oldest unacknowledged segment</em>).</p>\n<ol>\n<li>Upon receiving data from the application layer, TCP encapsulates it in a segment and passes to the segment to IP. If the timer is not running for some other segment, TCP starts it when the segment is passed to IP, the timer expiration interval being <code>TimeoutInterval</code></li>\n<li>If the timeout occurs, TCP responds by <strong>retransmitting the segment that caused the timeout</strong> and by restarting the timer</li>\n<li>An valid acknowledgement segment is received: TCP compares the ACK <code>y</code> value with its <code>sendBase</code> (the sequence number of the oldest unacknowledged byte). If <code>y &gt; sendBase</code> then ACK is acknowledging one or more previously unacknowledged segments (cumulative acknowledgement). The <code>sendBase</code> variable is updated and the timer is restarted if there are not-yet-acknowledged segments.</li>\n</ol>\n<h4 id=\"Doubling-the-Timeout-Interval\"><a href=\"#Doubling-the-Timeout-Interval\" class=\"headerlink\" title=\"Doubling the Timeout Interval\"></a>Doubling the Timeout Interval</h4><p>Each time TCP retransmits, it sets the next timeout interval to twice the prevous value. However when the timer is restarted after receiving data from the application layer or after receiving an ACK, the <code>TimeoutInterval</code> is recomputed as described previously</p>\n<h4 id=\"Fast-Retransmit\"><a href=\"#Fast-Retransmit\" class=\"headerlink\" title=\"Fast Retransmit\"></a>Fast Retransmit</h4><p>The problem with timeout-triggered retransmission is that the timeout period can be relatively long.<br>The sender can however often detect packet loss before the timeout event occurs by noting <em>duplicate ACKs</em>. A <strong>duplicate ACK</strong> is an ACK that reacknowledges a segment for which the sender has already received an earlier acknowledgement.<br>When the TCP sender receives <strong>three duplicate ACK for the same data</strong> it takes this as an indication that the segment following the segment that has been ACKed three times has been lost. In the case that three duplicate ACKs are received, the TCP sender performs a <strong>fast restransmit</strong>: it retransmits the missing segment <em>before</em> that segment’s timer expires.</p>\n<h4 id=\"Go-Back-N-or-Selective-Repeat\"><a href=\"#Go-Back-N-or-Selective-Repeat\" class=\"headerlink\" title=\"Go-Back-N or Selective Repeat?\"></a>Go-Back-N or Selective Repeat?</h4><p>Acknowledgments are cumulative (GBN) but many TCP implementations will buffer correctly received but out-of-order segments.<br>Also consider fast retransmit where only the missing packet is resent (SR) instead of all the window (GBN).<br>We can see that TCP’s error recovery mechanism is categorized as a <strong>hybdrid of GB and SR protocols</strong>.</p>\n<h3 id=\"3-5-5-Flow-Control\"><a href=\"#3-5-5-Flow-Control\" class=\"headerlink\" title=\"3.5.5 Flow Control\"></a>3.5.5 Flow Control</h3><p>The host on each side of a TCP connection set aside a receive buffer for the connection. When TCP receives bytes that are correct and in sequence, it places the data in the receive buffer. The associated application process will read data from this buffer, but necessarily at the instant the data arrives (busy, not interested…). Thus the <em>the sender can easily overflow the connection’s receive bufffer by sending too much data too quickly</em>. To avoid this event, TCP provides a <strong>flow-control service</strong>.<br>Flow control is a <em>speed-matching service</em>: matching the rate at which the sender is sending against the rate at which the receiving application is reading.</p>\n<p><strong>Flow control and congestion control are not the same!</strong>: the former preventing overflow at the receiver side and being actuated only by the two end points, the latter preventing congestion of the network.</p>\n<p>TCP provides flow control by having the <em>sender</em> maintain a variable called the <strong>receive window</strong>, used to give the sender an idea of how much free buffer space is available at the receiver.</p>\n<p>Host A sends a large file to Host B over TCP.</p>\n<h5 id=\"B-side\"><a href=\"#B-side\" class=\"headerlink\" title=\"B side\"></a>B side</h5><ul>\n<li>B allocates a receive buffer to its connection, its size being <code>RcvBuffer</code></li>\n<li>B also keeps the variables: <code>LastByteRead</code> (number of last byte in the data stream read by the application process) and <code>LastByteRcvd</code> (the number of the last byte arrived from the network and placed in the receive buffer)</li>\n</ul>\n<p>We have: <code>LastByteRcvd - LastByteRead &lt;= RcvBuffer</code> (we don’t want overflow!)</p>\n<p>Receive window aka the <em>amount of spare room in the buffer</em> <code>rwnd = RcvBuffer -  [LastByteRcvd - LastByteRead]</code><br><code>rwnd</code> is dynamic</p>\n<h5 id=\"A-side\"><a href=\"#A-side\" class=\"headerlink\" title=\"A side\"></a>A side</h5><p>A keeps track of two variables:</p>\n<pre><code>1. `LastByteSent`\n2. `LastByteAcked`\n</code></pre>\n<p>Through the connection’s life A must make sure that <code>LastByteSent - LastByteSent &lt;= rwnd</code></p>\n<p>If B’s buffer becomes full, he sends <code>rwnd = 0</code>.  If <em>B has nothing to send to A</em>, when the application process empties B’s buffer, TCP does not send a new segment with the new value of <code>rwnd</code> to A (TCP sends to A only if it needs to send data or if it needs to send an ACK).<br>Therefore A is never informed that B’s buffer has some free space and <strong>he is blocked and can trasmit no more data</strong>.<br>To solve this problem, TCP requires A to <strong>continue to send segments with one data byte when B’s receive window is 0</strong>, these segments will be acknowledged by B. Eventually the buffer will begin to empty and the acknowledgements will contain à non-zero <code>rwnd</code> value.</p>\n<p>We remember that <strong>UDP has no flow control service</strong></p>\n<h3 id=\"3-5-6-TCP-Connection-Management\"><a href=\"#3-5-6-TCP-Connection-Management\" class=\"headerlink\" title=\"3.5.6 TCP Connection Management\"></a>3.5.6 TCP Connection Management</h3><h4 id=\"How-is-the-connection-established-Three-way-handshake\"><a href=\"#How-is-the-connection-established-Three-way-handshake\" class=\"headerlink\" title=\"How is the connection established? Three-way handshake\"></a>How is the connection established? <strong>Three-way handshake</strong></h4><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-three-way.png\" alt=\"three way\"></p>\n<ol>\n<li>The client-side TCP sends a special TCP segment to server-side TCP. This segment <strong>doesn’t contain any application-layer data</strong> but the <strong>flag bit SYN is set to 1</strong>. The segment is referred to as a <em>SYN segment</em>. The client also <strong>randomly chooses an initial sequence number</strong> (<code>client_isn</code>) and <strong>puts this number in the sequence number field of the initial TCP SYN segment</strong>. (randomizing <code>client_isn</code> is interesting to avoid security attacks).</li>\n<li>The TCP SYN segment arrives at the server-side, it is extracted from the datagram. The server allocates the TCP buffers and variables to the connection and <strong>sends a connection-granted segment to the client</strong>. This segment also contains no application-layer data. The <strong>SYN flag is set to 1</strong>, the <strong>ACK field in the header is set to <code>client_isn+1</code></strong>. <strong>The server chooses its own initial sequence number <code>server_isn</code></strong> and <strong>puts this value in the sequence number field of the TCP segment header</strong>. This segment is referred to as <em>SYNACK segment</em>.</li>\n<li>Upon receiving the SYNACK segment, the client also allocates buffers and variables to the connection. The client then <strong>sends the server yet another segment which acknowledges the SYNACK</strong> (<code>server_isn+1</code> is set the acknowledgement field of the TCP segment header)</li>\n</ol>\n<p>After this setup, all the segments will have the SYN bit set to 0 in their headers.</p>\n<h4 id=\"Tearing-down-a-TCP-connection\"><a href=\"#Tearing-down-a-TCP-connection\" class=\"headerlink\" title=\"Tearing down a TCP connection\"></a>Tearing down a TCP connection</h4><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-tcp-end.png\" alt=\"tcp end\"></p>\n<p>The client decides to end the connection:</p>\n<ol>\n<li>The client sends a special TCP segment to the server, this special segment having the <strong>FIN bit flag set to 1</strong> in the header.</li>\n<li>The server receives the segment and sends an acknowledgement to the client.</li>\n<li>The server then sends its own shutdown segment which also <strong>has the FIN bit set to 1</strong></li>\n<li>The client acknowledges the server’s shutdown segment.</li>\n<li>The “resources” (buffers and variables) in the host<strong>s</strong> are deallocated.</li>\n</ol>\n<h4 id=\"What-if-the-two-ends-are-not-ready-for-communication\"><a href=\"#What-if-the-two-ends-are-not-ready-for-communication\" class=\"headerlink\" title=\"What if the two ends are not ready for communication?\"></a>What if the two ends are not ready for communication?</h4><p> A host receives a TCP segment whose port number or source IP address do not match with any of the ongoing sockets in the host -&gt; the host sends a special reset segment to the source (RST flag bit set to 1) and drops the packet (UDP does responds with a special ICMP datagram)</p>\n<h2 id=\"3-6-Principles-of-Congestion-Control\"><a href=\"#3-6-Principles-of-Congestion-Control\" class=\"headerlink\" title=\"3.6 Principles of Congestion Control\"></a>3.6 Principles of Congestion Control</h2><h3 id=\"3-6-1-The-Causes-and-the-Costs-of-Congestion\"><a href=\"#3-6-1-The-Causes-and-the-Costs-of-Congestion\" class=\"headerlink\" title=\"3.6.1 The Causes and the Costs of Congestion\"></a>3.6.1 The Causes and the Costs of Congestion</h3><h4 id=\"Scenario-1-Two-Senders-A-Router-with-Infinite-Buffers\"><a href=\"#Scenario-1-Two-Senders-A-Router-with-Infinite-Buffers\" class=\"headerlink\" title=\"Scenario 1: Two Senders, A Router with Infinite Buffers\"></a>Scenario 1: Two Senders, A Router with Infinite Buffers</h4><p>A -&gt; D, B -&gt; C, A and B connect to the Internet through the same router, B and C connect to the Internet through the same router<br>(pas envie)</p>\n<h2 id=\"3-7-TCP-Congestion-Control\"><a href=\"#3-7-TCP-Congestion-Control\" class=\"headerlink\" title=\"3.7 TCP Congestion Control\"></a>3.7 TCP Congestion Control</h2><p>TCP limits the rate at which it sends traffic into its connection as a function of perceived network congestion.<br>The TCP congestion-control mechanism operating at the sender keeps track of an additional variable: the <strong>congestion window</strong>, noted <code>cwnd</code> which imposes a constraint on the rate at which a TCP sender can send traffic into the network. Specifically: <code>LastByteSent - LastByteAcked &lt;= min&#123;cwnd, rwnd&#125;</code>.<br>Limiting the amount of unacknowledged data at the sender we can limit the sender’s send rate.<br>At the beginning of each RTT the sender sends <code>cwnd</code> bytes of data and at the end of the RTT he acknowledges. Thus <strong>the sender’s send rate is roughly <code>cwnd/RTT</code> bytes&#x2F;sec. Adjusting the value of <code>cwnd</code> the sender can adjust the rate at which it sends data into the connection</strong>.<br>Let now consider a <em>loss event</em> (timeout OR three duplicate ACKs). When there is excessive congestion some router buffers along the path overflows, causing a loss event at the sender <em>which is taken by the sender to be an indication of congestion on the sender-to-receiver path</em>.<br>If there is no congestion then all the acknowledgements will be received at the sender, which will take these arrivals as an indication that segments have been received and that he can increase the congestion window size and hence its transmission rate. If acknowledgements arrive at a slow rate then the congestion window will be increased at a relatively slow rate and, viceversa, it will be increased more quickly if ACKs arrive at a high rate.<br>Because TCP uses acknowledgements to trigger (or clock) its increase in congestion window size, TCP is said to be <strong>self-clocking</strong>. TCP uses the principles:</p>\n<ol>\n<li><em>A lost segment implies congestion therefore the sender rate should be decreased.</em></li>\n<li><em>An acknowledged segment means the network’s working, therefore the sender’s rate can be increased</em> (if ACK of unacknowledged segment)</li>\n<li><em>Bandwidth probing</em>: the transmission rates increases with ACKs and decreases with loss events: TCP is continuously checking (probing) the congestion state of the network</li>\n</ol>\n<h3 id=\"TCP-Congestion-Control-Algorithm\"><a href=\"#TCP-Congestion-Control-Algorithm\" class=\"headerlink\" title=\"TCP Congestion-Control Algorithm\"></a>TCP Congestion-Control Algorithm</h3><p>Three components :</p>\n<h4 id=\"1-Slow-Start\"><a href=\"#1-Slow-Start\" class=\"headerlink\" title=\"1 - Slow Start\"></a>1 - Slow Start</h4><p>When a TCP connection begins, <code>cwnd</code> is usually initialized to a small value of 1 MSS and only one segment is sent. <strong>Each acknowledged packet</strong> will cause the <code>cwnd</code> to be increased by 1 MSS and the sender will send now two segments (because the window is increased by one for each ack).<br>Therefore the number of segments doubles at each RTT, therefore the sending rate also doubles every RTT. Thus TCP send rate <strong>starts slow but grows exponentially during the slow start phase</strong>.<br>When does the growth end?</p>\n<ul>\n<li>Timeout: <code>cwnd</code> is set to 1 MSS and the slow start is started anew. Also the variable slow start threshold is initialized:<br> <code>ssthresh = cwnd / 2 - (half of value of cwnd when congestion is detected)</code></li>\n<li>When <code>cwnd &gt;= ssthresh</code> slow starts is stopped -&gt; congestion avoidance state</li>\n<li>Three duplicate ACKs: fast retransmit and fast recovery state</li>\n</ul>\n<h4 id=\"2-Congestion-Avoidance\"><a href=\"#2-Congestion-Avoidance\" class=\"headerlink\" title=\"2 - Congestion Avoidance\"></a>2 - Congestion Avoidance</h4><p>TCP suppose congestion is present, how to adapt?<br>Instead of doubling <code>cwnd</code> every RTT, <code>cwnd</code> is increased <strong>by just a single MSS every RTT</strong>.<br>When should this linear increase stop?</p>\n<ul>\n<li>Timeout: <code>cwnd</code> is set to 1 MSS, and <code>ssthresh = cwnd (when loss happened) / 2</code></li>\n<li>Three duplicate ACKs: <code>cwnd = (cwnd / 2) + 3 MSS</code> and <code>ssthresh = cwnd (when 3 ACKs received) / 2</code> -&gt; fast recovery state</li>\n</ul>\n<h4 id=\"3-Fast-Recovery\"><a href=\"#3-Fast-Recovery\" class=\"headerlink\" title=\"3 - Fast Recovery\"></a>3 - Fast Recovery</h4><p><code>cwnd</code> is increased by 1 MSS for every duplicate ACK received for the missing state that caused TCP to enter this state. When the ACK arrives for the missing segment, TCP goes into Congestion Avoidance after reducing <code>cwnd</code>.<br>If a timeout occurs <code>cwnd</code> is set to 1 MSS and <code>ssthresh</code> is set to half the value of <code>cwnd</code> when the loss event occurred.<br>Fast recovery is recommended but not required in TCP, in fact only the newer version of TCP, <strong>TCP Reno</strong> incorporated fast recovery.</p>\n<h4 id=\"Macroscopic-Description-of-TCP-Throughput\"><a href=\"#Macroscopic-Description-of-TCP-Throughput\" class=\"headerlink\" title=\"Macroscopic Description of TCP Throughput\"></a>Macroscopic Description of TCP Throughput</h4><p>What is the average throughput (average rate) of a long-lived TCP connection?<br>Ignoring the slow start phase (usually very short as the rate grows exponentially). When the window size is <em>w</em> the transmission rate is roughly <em>w</em>&#x2F;RTT. <em>w</em> is increased by 1 MSS each RTT until a loss event.<br>Denote by <em>W</em> the value of <em>w</em> when a loss event occurs. Then we have</p>\n<p>average throughput of a connection &#x3D; (0.75 * W)&#x2F;RTT</p>\n<h4 id=\"TCP-Over-High-Bandwidth-Paths\"><a href=\"#TCP-Over-High-Bandwidth-Paths\" class=\"headerlink\" title=\"TCP Over High-Bandwidth Paths\"></a>TCP Over High-Bandwidth Paths</h4><p>Today’s high speed links allow to have huge windows. What happens if one of the segments in the window gets lost? What fraction of the transmitted segments could be lost that would allow the TCP congestion control to achieve the desired rate?</p>\n<p>average throughput of a connection &#x3D; (1.22 * MSS)&#x2F;(RTT * sqrt(L))</p>\n<p>Where L is the loss rate</p>\n<h1 id=\"Chapter-4-The-Network-Layer\"><a href=\"#Chapter-4-The-Network-Layer\" class=\"headerlink\" title=\"Chapter 4: The Network Layer\"></a>Chapter 4: The Network Layer</h1><p>In the chapter, there is an important distinction between the <strong>routing</strong> and <strong>forwarding</strong> functions of the network layer. Forwarding involves the transfer of a packet from an incoming link to an outgoing link <em>within a single router</em> while routing involves <em>all of a network’s routers</em> whose collective interactions via routing protocols determine the paths that packets take on their trips from source to destination.</p>\n<h2 id=\"4-1-Introduction\"><a href=\"#4-1-Introduction\" class=\"headerlink\" title=\"4.1 Introduction\"></a>4.1 Introduction</h2><p>The primary role of routers is to forward datagrams from input links to output links. Routers do not run nor the application-layer or the transport-layer, they go only up until the network layer.</p>\n<h3 id=\"4-1-1-Forwarding-and-Routing\"><a href=\"#4-1-1-Forwarding-and-Routing\" class=\"headerlink\" title=\"4.1.1 Forwarding and Routing\"></a>4.1.1 Forwarding and Routing</h3><p>The role of the network layer is deceptively simple: <strong>to move packets from a sending hosts to a receiving host</strong>. To do so it performs two important functions:</p>\n<ul>\n<li><em><strong>Forwarding</strong></em>: When a packet arrives to a router’s input link, the router must move the packet to the appropriate output link. It is an action <strong>local</strong> to the router</li>\n<li><em><strong>Routing</strong></em>: The network layer must determine the route or path taken by packets as they flow from a sender to a receiver. The algorithms that calculate these paths are referred to as <strong>routing algorithsm</strong>. It is a <strong>network-wide</strong> action</li>\n</ul>\n<p>Every router has a <strong>forwarding table</strong>. When a router receives a packet, it extracts a value from a specific field in the header and searches for that value in in the forwarding table.<br>The procedure used to set up and update the table depends on the protocol used. However a router receives and sends <em>routing protocol messages</em> to configure its forwarding table.</p>\n<p>We also need to mark the distinction between routers and <em>packet switches</em>.</p>\n<ul>\n<li>Packet-switches: performs forwarding according to the value in a field in the header of the packet. Some packet switches called <strong>link-layer switches</strong> base their forwarding decisions on values in the fields of the <em>link-layer frame</em> (link-layer devices)</li>\n<li>Routers: base forwarding decisions on the value in the network-layer field. (network-layer devices) but also must implement link layer (no 3 without 2)</li>\n</ul>\n<h4 id=\"Connection-Setup\"><a href=\"#Connection-Setup\" class=\"headerlink\" title=\"Connection Setup\"></a>Connection Setup</h4><p>in some computer networks there is a third really important networks-layer function: <strong>connection setup</strong>: a <strong>path-wide</strong> process that sets up connection state in routers.</p>\n<h3 id=\"4-1-2-Network-Service-Models\"><a href=\"#4-1-2-Network-Service-Models\" class=\"headerlink\" title=\"4.1.2 Network Service Models\"></a>4.1.2 Network Service Models</h3><p>The <strong>network service model</strong> defines the characteristics of end-to-end transport of packets between sending and receiving end systems. Some possible service for a network layer:</p>\n<ol>\n<li>Sending side:<ul>\n<li><em>Guaranteed delivery</em></li>\n<li><em>Guaranteed delivery with bounded delay</em></li>\n</ul>\n</li>\n<li>Flow and receiving side:<ul>\n<li><em>In-order packet delivery</em></li>\n<li><em>Guaranteed minimal bandwidth</em></li>\n<li><em>Guaranteed maximum jitter</em> (amount of time between transmission of two successive packets at the sender side is equal to the amount of time between their receipt at the destination, or that this spacing changes by no more than some specified value)</li>\n<li><em>Security services</em>: encryption for confidentiality, data integrity and source authentication</li>\n</ul>\n</li>\n</ol>\n<p><strong>The Internet’s network layer doesn’t provide any of these</strong>: it provides a <strong>best-effort service</strong> there are no timing or bandwidth guarantees, no loss or order guarantees and congestion control indications.</p>\n<h2 id=\"4-2-Virtual-Circuit-and-Datagrams-Networks\"><a href=\"#4-2-Virtual-Circuit-and-Datagrams-Networks\" class=\"headerlink\" title=\"4.2 Virtual  Circuit and Datagrams Networks\"></a>4.2 Virtual  Circuit and Datagrams Networks</h2><p>As in transport layer, the network layer can use connection or connection-less protocols. There however some differences with the transport layer:</p>\n<ul>\n<li>In the network layer these services are <strong>host-to-host</strong> services (not the case for the TL, just look at TCP)</li>\n<li>The network layer provides either a host-to-host connectionless service or a host-to-host connection service <strong>but no both</strong>. Connection service -&gt; <strong>Virtual-Circuit (VC) networks</strong>, Connectionless service -&gt; <strong>datagram networks</strong></li>\n</ul>\n<h3 id=\"4-2-1-Virtual-Circuit-Networks\"><a href=\"#4-2-1-Virtual-Circuit-Networks\" class=\"headerlink\" title=\"4.2.1 Virtual-Circuit Networks\"></a>4.2.1 Virtual-Circuit Networks</h3><p>The Internet is a datagram network but many alternative network architectures (ATM) are virtual-circuit networks. The connections in VC are called *<em>virtual circuits (VCs)3</em>.<br>A VC consists of</p>\n<ol>\n<li>A source-to-destination <em>path</em></li>\n<li>VC numbers, one for each link along the path</li>\n<li>Entries in the forwarding table in each router along the path</li>\n</ol>\n<p>A packet belonging to a virtual circuit will carry a VC number in its header. Because a VC may have different VC numbers on each link, each router must replace the VC number of traversing packets with a new VC number, which is obtained from the forwarding table. How is this determined?<br>Whenever a VC is established across a router, an entry is added to the forwarding table, and one (corresponding to the terminating VC) is removed whenever a VC ends.<br>The routers must maintain <strong>connection state information</strong> for the ongoing connections (using the tablea). There are 3 phases in a VC:</p>\n<ul>\n<li><em>VC Setup</em>: sending side contacts networks layer specifying the IP address of the destination. The network sets up the VC. The path is determined as well as the VC number for each link along the path. The forwarding tables are updated and resources reserved.</li>\n<li><em>Data transfer</em>: the packets flow</li>\n<li><em>VC teardown</em>: The call termination propagates along the path, the forwarding tables are updated</li>\n</ul>\n<p>During network-layer setup <em>all the routers along the path between source and destination are involved in VC setup, and each router is fully aware of all VCs passing through it</em> (not in TCP: setup and connection only between source and destination).<br>The messages used by end ssystems to initiate or terminate a VC are called <strong>signaling messages</strong> and the protocols used to exchange them are called <strong>signaling protocols</strong>.</p>\n<h3 id=\"4-2-2-Datagram-Networks\"><a href=\"#4-2-2-Datagram-Networks\" class=\"headerlink\" title=\"4.2.2 Datagram Networks\"></a>4.2.2 Datagram Networks</h3><p>Each time an end system wants to send a packet, it sampts the packet with the address of the destination end system and pops the packet into the network. The routers along the path will use this address to forward it.<br>The router has a forward table that <em>maps destination addresses to link interfaces</em>. When a packet arrives, it reads the destination address, uses the table to determine what link to use, and forwards the packet to that output link interface.</p>\n<p>If we consider IPv4, addresses are 32 bits long. To avoid having tables with 2^32 entries, routers use <strong>prefixes</strong>. When there are multiple mathces to one address, the router uses the <strong>longest prefix matching rule</strong>.</p>\n<p>Although routers in datagram networks maintain no connection state information, they nevertheless maintain forwarding state information in their forwarding tables.</p>\n<h3 id=\"4-2-3-Origins-of-VC-and-Datagram-Networks\"><a href=\"#4-2-3-Origins-of-VC-and-Datagram-Networks\" class=\"headerlink\" title=\"4.2.3 Origins of VC and Datagram Networks\"></a>4.2.3 Origins of VC and Datagram Networks</h3><p>VC has its roots in the telephony world, which uses circuits switching too.<br>The datagram model instead comes from the need to simplify as much as possible the network to bring computers together.</p>\n<h2 id=\"4-3-What’s-Inside-a-Router\"><a href=\"#4-3-What’s-Inside-a-Router\" class=\"headerlink\" title=\"4.3 What’s Inside a Router?\"></a>4.3 What’s Inside a Router?</h2><ul>\n<li><em>Input ports</em>: performs the physical layer functions of incoming link at the router. It is also here that the forwarding table is consulted to determine the output port to which the arriving packet will be forwarded via the switching fabric. Control packets (protocol info) are forwarded to the routing processor.</li>\n<li><em>Switching fabric</em>: connects input prots to output ports.</li>\n<li><em>Output ports</em>: stores packets received from the switching fabric and performs the necessary link layer and physical layer functions.</li>\n<li><em>Routing processor</em>: executes the routing protocols (algorithms), maintains routing tables and attached link state information and computes the forwarding table for the router.</li>\n</ul>\n<p>Input ports, switching fabric and output ports implement the forwarding function and are almost always implemented in hardware (<em>routing forwarding plane hardware</em>) while the routing processor implements the routing function and is usually implemented in software running on traditional CPU (<em>router control plane</em>)</p>\n<h3 id=\"4-3-1-Input-Processing\"><a href=\"#4-3-1-Input-Processing\" class=\"headerlink\" title=\"4.3.1 Input Processing\"></a>4.3.1 Input Processing</h3><p>The packet arrives and the link and phyisical layer unpacking functions are performed. The forwarding table is computed and updated by the routing processor with a shadow copy typically stored at each input port so that forwarding decision can be made locallly without invoking the centralized routing processor on a per packet basis and thus avoiding a centralized processing bottleneck. The table is transferred to ports through separated bus. The lookup is then just a search (implemented in hardware and using high performance algorithms), speed also depends on the memory technology (DRAM, SRAM…). Lookup is important but input processing also consists of</p>\n<ul>\n<li>physical and link layer processing</li>\n<li>chekcing the packet’s version number, checksum, time to live….</li>\n<li>updating counters for network management.</li>\n</ul>\n<p>Input ports than moves the packet to the switching fabric (eventually queuing them if this is busy)</p>\n<h3 id=\"4-3-2-Switching\"><a href=\"#4-3-2-Switching\" class=\"headerlink\" title=\"4.3.2 Switching\"></a>4.3.2 Switching</h3><p>Can be performed in different ways:</p>\n<h4 id=\"Switching-via-memory\"><a href=\"#Switching-via-memory\" class=\"headerlink\" title=\"Switching via memory\"></a>Switching via memory</h4><p>Switching under the control of the CPU and input and output ports functioned as traditional I&#x2F;O devices in a traditional operating system. The packet arrives, is copied into the processor memory, the processor determines the output port and copies the packet to the output port’s buffer.<br>No parallel forwarding (only 1 memory read&#x2F;write bus)</p>\n<h4 id=\"Switching-via-a-bus\"><a href=\"#Switching-via-a-bus\" class=\"headerlink\" title=\"Switching via a bus\"></a>Switching via a bus</h4><p>An input port transfers a packet directly to the output port over a shared bus without intervention by the routing processor. The input port pre-pends an internal header to the packet. All the output ports receive the packet but only the one that matches the label in the internal header will keep the packet. The output port will remove this internal header. The switching speed is limited to the bus speed as one packet at a time can cross the bus (multiple arriving packets will have to wait). Sufficient only for small area and enterprise networks</p>\n<h4 id=\"Switching-via-an-interconnected-network\"><a href=\"#Switching-via-an-interconnected-network\" class=\"headerlink\" title=\"Switching via an interconnected network\"></a>Switching via an interconnected network</h4><p>To overcome the bandwidth limitation of a single shared bus a more sophisticated interconnection network can be used.<br>A <em>crossbar switch</em> is an interconnection network consisting of 2N buses that connect N input ports to N output ports. Each vertical bus intersects each horizontal bus at a crosspoint which can be opened or closed at any time by the switch fabric controller. If a packet has to go from input X to output Y, only the crosspoint between the horizontal bus from X and the vertical bus to Y will be closed.<br>Thus packets directed to different output ports can be forwarded simultaneously, but not multiple packets directed to the same output port.</p>\n<h3 id=\"4-3-3-Output-Processing\"><a href=\"#4-3-3-Output-Processing\" class=\"headerlink\" title=\"4.3.3 Output Processing\"></a>4.3.3 Output Processing</h3><p>takes packets stored in the output’s port’s memory and transmits them over the output link, thus selecting de dequeuing packets for transmission and performing the necessary link and physical layer transmission functions.</p>\n<h3 id=\"4-3-4-Where-Does-Queuing-Occur\"><a href=\"#4-3-4-Where-Does-Queuing-Occur\" class=\"headerlink\" title=\"4.3.4 Where Does Queuing Occur?\"></a>4.3.4 Where Does Queuing Occur?</h3><p>Queues may form at both the input ports and the output ports. The location and the extent of queuing will depend on traffic load, speed of the switching fabric, and line speed. As the queues grow large, the router’s memory can eventually be exhausted and <strong>packet loss</strong> will occur. IS THIS USEFUL ? NOT COVERED BY TEACHER</p>\n<h2 id=\"4-4-The-Internet-Protocol-IP-Forwarding-and-Addressing-in-the-Internet\"><a href=\"#4-4-The-Internet-Protocol-IP-Forwarding-and-Addressing-in-the-Internet\" class=\"headerlink\" title=\"4.4 The Internet Protocol (IP): Forwarding and Addressing in the Internet\"></a>4.4 The Internet Protocol (IP): Forwarding and Addressing in the Internet</h2><p>We know move to study of the network layer in the Internet. There are two versions of the IP (Internet Protocol) in use today: IPv4 and IPv6.<br>There 3 main components in the Internet: the IP Protocol (addressing, datagram format and packet handling conventions), the routing protocol (path selection), the Internet Control Message Protocol (ICMP) (error reporting and network information).</p>\n<h3 id=\"4-4-1-Datagram-Format\"><a href=\"#4-4-1-Datagram-Format\" class=\"headerlink\" title=\"4.4.1 Datagram Format\"></a>4.4.1 Datagram Format</h3><p>A network layer packet is referred to as a <strong>datagram</strong>.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ipv4datagram.png\" alt=\"ipv4 datagram\"></p>\n<p>Some fields:</p>\n<ul>\n<li><em>Version number</em>: 4 bits specifying the IP protocol version of the datagram (IPv4 or IPv6 )</li>\n<li><em>Header length</em>: the length of the packet is variable therefore this field tells where the header ends and the data begins. Usually datagrams contain no option so that the typical IP datagram has <strong>20-byte header</strong></li>\n<li><em>Type of service</em> (TOS): allows different types of datagrams to be distinguished from each other. (eg real time vs non real time)</li>\n<li><em>Datagram length</em>: 16 bits specifying the total length, that is header + data measured in bytes. 16 bits -&gt; max header length &#x3D; 65535 bytes, but usually datagrams are rarely larger than 1500 bytes.</li>\n<li><em>Identifier, flags, fragmentation offset</em>: used for IP fragmentation. (NB: IPv6 doesn’t allow fragmentation at routers)</li>\n<li><em>Time-to-live</em> (TTL): used to avoid that datagrams circulate forever. It is decreased by one each time the datagram is processed by a router. When TTL &#x3D; 0, the datagram is dropped</li>\n<li><em>Protocol</em>: only used when datagram reaches its final destination, it specifies what <em>transport protocol</em> to which the data of the datagram should be passed. EX: 6 -&gt; TCP, 17 -&gt; UDP</li>\n<li><em>Header checksum</em>: helps the router to detect bit errors in a received IP datagram. Computation: each two bytes in the <strong>header</strong> are considered as numbers, summed up using the 1s complement arithmetic. The 1s complement of this sum is then put in the checksum field. A router computes the checksum for each datagram. If the computed one doesn’t equal the one in the field then the router has detected an error. Usually the datagram is discarded. As it is recomputed at each router, it may change.</li>\n<li><em>Source and destination IP addresses</em></li>\n<li><em>Options</em>: rarely used, dropped by IPv6</li>\n<li><em>Data (payload)</em>: usually contains the transport layer segment but can also contain ICMP messages</li>\n</ul>\n<h4 id=\"IP-Datagram-Fragmentation\"><a href=\"#IP-Datagram-Fragmentation\" class=\"headerlink\" title=\"IP Datagram Fragmentation\"></a>IP Datagram Fragmentation</h4><p>The maximum amount of data that a link layer can carry is called the <strong>Maximum Transmission Unit (MTU)</strong>. As each datagram is encapsulated in a link layer frame, the MTU imposes a hard limit on the length of the datagram. Each of the links along the route can use different link-layer protocols and therefore can have different MTU.<br>We therefore have to break the IP datagram into smaller datagrams, each of which will go in different link layer frames. Each of these smaller datagrams is referred to as a <strong>fragment</strong>.<br>A fragment must be reassembled before it can be passed to the transport layer. To reduce the workload on routers, the designers of IPv4 decided that reassembling should only be done at the destination end system.</p>\n<p>In IPv4, to comply with fragmentation, the header contains the fields:</p>\n<ul>\n<li><em>Identifiers</em>: identifies the <strong>unfragmented datagram</strong> (same for all fragments)</li>\n<li><em>flags</em>: in particular there is one flag set to 0 if the fragment is the last or to 1 if there are more to come</li>\n<li><em>fragmentation offset</em>: an integer x, the data in the fragment should be inserted beginning at byte x * 8</li>\n</ul>\n<p>If one fragment contains error or is lost, all the others are dropped and TCP will have the sender retransmit all the data.<br>Fragmentation complicates the network and end systems and can be used in lethal DoS attacks such as the Jolt2 attack</p>\n<h3 id=\"4-4-2-IPv4-Addressing\"><a href=\"#4-4-2-IPv4-Addressing\" class=\"headerlink\" title=\"4.4.2 IPv4 Addressing\"></a>4.4.2 IPv4 Addressing</h3><p>The boundary between the host and the physical link is called an <strong>interface</strong>. A router has multiple links connected to it, therefore multiple interfaces and therefore a router has multiple IP addresses and <em>an IP address is technically associated with an interface rather than with a host or router</em>.<br>IPv4 addresses are 32 bits long (4 bytes) -&gt; max 2^32 possible addresses. They are typically writen in <strong>dotted decimal notation</strong> where each byte of the address is written in deciaml from and separated by a period from the others.<br>EX 193.32.216.9 &#x3D;&#x3D;&#x3D; 11000001 00100000 11011000 00001001<br>Each interface on every host (except host behind NATs) must have a unique IP address. How are these computed?<br>A portion is determined by the subnet to which the host is connected.<br>A subnet is the portion of the network interconnected end systems and one one router. (also called <em>IP network</em> or <em>network</em>). IP assigns an address to a subnet x.x.x.x&#x2F;y where &#x2F;y notation, sometimes known as a <strong>subnet mask</strong> indicates <em>that the leftmost y bits of the 32 bit quantity define the subnet address</em>. If y is 24, then any host attached to the a.a.a.0&#x2F;24 subnet would be <em>required</em> to have an address of the form a.a.a.xxx.</p>\n<p>FIGURE 4.17 WTF</p>\n<p>The Internet’s address assignment strategy is known as <strong>Classless Interdomain Routing (CIDR)</strong>. It generalizes the notion of subnet addressing. Consider a.b.c.d&#x2F;x : the x most significant bits constitute the network portion of the IP address and are often referred to as the <strong>prefix</strong> (or <em>network prefix</em>). EX an organization is assigned a block of contiguous addresses, that is, a range of addresses with a common prefix.<br>When someone outside the organization want to send a datagram to someone inside, he will only need this x bits. The remaining 32-x bits can be thought of as distinguishing among the devices within the organization. These bits may have an additional subnetting structure.<br>There is yet another type of IP address, the <em>IP broadcast address 255.255.255.255</em>. When a datagram is sent to this address, the datagram is delivered to all hosts on the same subnet.</p>\n<h4 id=\"Obtaining-a-Block-of-Addresses\"><a href=\"#Obtaining-a-Block-of-Addresses\" class=\"headerlink\" title=\"Obtaining a Block of Addresses\"></a>Obtaining a Block of Addresses</h4><p>A network administrator contacts an ISP which would provide a partition of the addresses that had already been allocated to him.<br>EX ISP has 200.23.16.0&#x2F;20, it splits in 8 equal sized blocks: 200.23.16.0&#x2F;23, 200.23.18.0&#x2F;23, 200.23.20.0&#x2F;23, …, 200.23.30.0&#x2F;23<br>Who assigns set of addresses to ISPs? The <em><strong>Internet Corporation for Assigned Names and Numbers (ICANN)</strong></em> which allocates IP addresses, manages DNS root servers, assigns domain names and solves domain name disputes.</p>\n<h4 id=\"Obtaining-a-Host-Address-The-Dynamic-Host-Configuration-Protocol\"><a href=\"#Obtaining-a-Host-Address-The-Dynamic-Host-Configuration-Protocol\" class=\"headerlink\" title=\"Obtaining a Host Address: The Dynamic Host Configuration Protocol\"></a>Obtaining a Host Address: The Dynamic Host Configuration Protocol</h4><p>Once an organization has obtained a block of addresses, it can assign individual IP addresses to the hosts and router interfaces which are part of it. This can be done either <strong>manually</strong> (by the network administrator) or automatically by the <strong>Dynamic Host Configuration Protocol (DHCP)</strong>.<br>It can be configured so that a host receives the same IP each time it connects to the network or a temporary IP addresses that will change upon each connection. DHCP also transmits to hosts additional information (subnet mask, address of first-hop &#x3D; default gateway, address of local DNS server).<br>As it automates the connection of a host into the network, DHCP is often referred to as a <strong>plug-and-play protocol</strong>. It is also popular in *wireless LANs where hosts join and leave frequently and in <em>residential ISP access networks</em>.<br>DHCP is a <em>client-server protocol</em>, the client being a newly arriving host needing network configuration information and the server being a router or a <em>DHCP relay agent</em> that know the address of a DHCP server for that network.<br>For a new client there is a 4 step process i nthe DHCP protcol:</p>\n<ol>\n<li><em>DHCP server discovery</em> c (client) looks for a server sending <strong>DHCP discover message</strong> a UDP packet directed to port 67. This segment is encapsulated in datagram sent to 255.255.255.255 (broadcast address) from address 0.0.0.0</li>\n<li><em>DHCP server offer(s)</em> s (server) replies with a <strong>DHCP offer message</strong> broadcast to all nodes on the subnet using (sent to 255.255.255.0). c may receiver many of these (more servers) containing the transaction ID, proposed IP address and an address lease time (amout of time for which the address will be valid)</li>\n<li><em>DHCP request</em>: c chooses one offer and responds to s with a <strong>DHCP request message</strong> echoing back the configuration parameters</li>\n<li><em>DHCP ACK</em> s responds with <strong>DHCP ACK message</strong> confirming</li>\n</ol>\n<p>DHCP also provides a mechanism for renewing the lease on an address.</p>\n<h4 id=\"Network-Address-Translation-NAT\"><a href=\"#Network-Address-Translation-NAT\" class=\"headerlink\" title=\"Network Address Translation (NAT)\"></a>Network Address Translation (NAT)</h4><p>Every IP-capable device needs an IP address. The number of connected devices grows fast, how to deal with IPv4 address space exhaustion?<br><strong>Network Address Translation (NAT)</strong><br>The NAT-enabled router defines a <strong>realm</strong> (or private network) (a network whose addresses only have meaning to devices within that network) and it can use the whole 32 bit address space for devices connected to it, it will also have a public address used to communicate with the exterior. The picture is explicative.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-nat.png\" alt=\"nat\"></p>\n<p>From the outside the router looks like a single device with a single IP address. It hides the details of the internal network from the outside world. Internal addresses can be assigned using DHCP.</p>\n<p>Problems with NAT:</p>\n<ul>\n<li>Port number should be used for addressingi processes not hosts</li>\n<li>Routers shouldn’t have access to the transport layer (ports)</li>\n<li>NAT violates end-to-end argument (any host should be able to contact any other host)</li>\n<li>NAT interferes with P2P applications (peers hidden by NAT), therefore the need of <strong>connection reversal</strong> for <strong>NAT traversal</strong></li>\n</ul>\n<h4 id=\"UPnP\"><a href=\"#UPnP\" class=\"headerlink\" title=\"UPnP\"></a>UPnP</h4><p>NAT traversal is increasingly provided by Universal Plug and Play. It requires both the host and the NAT to be compatible. Host requests a NAT mapping_<br><em>(private IP address, private port number) -&gt; (public IP address, public port number)</em><br>If the NAT accepts and creates the mapping, then outsiders can create connections to (public IP address, public port number).</p>\n<h3 id=\"4-4-3-Internet-Control-Message-Protocol\"><a href=\"#4-4-3-Internet-Control-Message-Protocol\" class=\"headerlink\" title=\"4.4.3 Internet Control Message Protocol\"></a>4.4.3 Internet Control Message Protocol</h3><p>ICMP is used to communicate network-layer information between hosts and routers, usually for error reporting (ex Destination network unreachable).<br>ICMP is considered part of IP but architecturally lies just above IP as ICMP messages are carried inside IP datagrams as payloads.<br>ICMP have a type and a code field and carry the header and the first 8 bytes of the datagram that caused the message to be generated in the first place.<br>Ping and traceroute are implemented using ICMP messages</p>\n<h4 id=\"Inspecting-datagrams-firewalls-and-intrusion-detection-systems\"><a href=\"#Inspecting-datagrams-firewalls-and-intrusion-detection-systems\" class=\"headerlink\" title=\"Inspecting datagrams: firewalls and intrusion detection systems\"></a>Inspecting datagrams: firewalls and intrusion detection systems</h4><p>Firewalls inspect the datagram and segment header fields denying suspicious datagrams entry into the internal network. Firewalls can block ICMP packages or packets based on port numbers, addresses.<br>Additional protection can be provided by IDS, placed at the boundary of the network, performs <em>deep packet inspection</em> examining not only headers but also payloads (including application layer data). IDS have databases of packet signatures that are know to be dangerous. As packets flow through the IDS, it tries to match them to signatures in its database, if a match is found, an alert is created. IPS (intrusion prevention system) in addition to detecting, also blocks packets raising alerts.</p>\n<h3 id=\"4-4-4-IPv6\"><a href=\"#4-4-4-IPv6\" class=\"headerlink\" title=\"4.4.4 IPv6\"></a>4.4.4 IPv6</h3><p>Developed because of IPv4 address space exhaustion</p>\n<h4 id=\"Datagram-format\"><a href=\"#Datagram-format\" class=\"headerlink\" title=\"Datagram format\"></a>Datagram format</h4><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ipv6datagram.png\" alt=\"ipv6 datagram\"></p>\n<ul>\n<li>the size of the source and destination addresses is increased <strong>from 32 to 128 bits</strong>: every grain of sand on the planet can be addressable.<br>Unicast and multicast addresses are joind by the <strong>anycast address</strong> which allow a datagram to be delivered to any one of a group of hosts.</li>\n<li>A number of IPv4 fields have been dropped or made optional resulting in a <strong>40-byte fixed-length header</strong> which allows faster datagram processing.</li>\n<li><em>Flow label</em> not clear definition. 20-bit</li>\n<li><em>Version</em>: 4-bit for IPv6 or 4. If ipv6 -&gt; 0110</li>\n<li><em>Traffic class</em>: 8 bit similar to TOS</li>\n<li><em>Payload length</em>: 16 bit unsigned integer indicating number of bytes following the 40-byte datagram header</li>\n<li><em>Next header</em>: transport layer protocol</li>\n<li><em>Hop limit</em>: decremented by one by each router forwarding the datagram, when 0, the datagram is discarded</li>\n</ul>\n<p>Fragmentation and reassembly cannot be done by intermediate routers, only by source and destination. If a router cannot trasmit a datagram because too big, it drops it and sends back an ICMP error message “Packet too big”. This reduces a lot the workload on the network.</p>\n<p>As the transport layer and the link layer already perform check-summing, this functionality has been removed from the network layer for faster datagram processing.</p>\n<p>An option field is no longer part of the header, instead it is one of the possible next headers pointed to from the header.<br>A <strong>new version of ICMP has been defined for IPv6</strong> which includes messages adapted to IPv6 (“packet too big”) and replaces IGMP (Internet Group Management Protocol), used to manage a host’s joining and leaving of multicast groups.</p>\n<h4 id=\"Transitioning-from-IPv4-to-IPv6\"><a href=\"#Transitioning-from-IPv4-to-IPv6\" class=\"headerlink\" title=\"Transitioning from IPv4 to IPv6\"></a>Transitioning from IPv4 to IPv6</h4><p>IPv6 is back compatible with IPv4 but not viceversa.</p>\n<p>It’s not humanable possible to decide a date on which all machines would change their protocol.<br>The most straightfoward way is a <strong>dual stack</strong> approach where IPv6 nodes also have a complete IPv4 implementation. To determine whether anotehr node is IPv6 or IPv4-only DNS can be used, just checking whether the node has a IPv6 address or an IPv4 one. However this will bring about the loss of data in specific IPv6 header fields.<br>Another approach would be <strong>tunneling</strong> : when two IPv6 nodes are connected by intervening IPv4 routers, we call the IPv4 nodes <strong>tunnel</strong>, the entire IPv6 datagram is put in the payload field of a IPv4 datagram which will be propagated by the tunnel unaware of the details and received by the destination IPv6 node which is able to extract the IPv6 datagram and to route it.<br>This migration shows the difficulty in changing network-layer protocols.</p>\n<h1 id=\"4-5-Routing-Algorithms\"><a href=\"#4-5-Routing-Algorithms\" class=\"headerlink\" title=\"4.5 Routing Algorithms\"></a>4.5 Routing Algorithms</h1><p>A host is attached directly to one router, the <strong>default router</strong> for the host (also called <strong>first hop router</strong>). Whenever a host sends a packet, the packet is transferred to its default router, which we’ll call <strong>source router</strong>, we’ll call the default router for the destination host as the <strong>destination router</strong>. Routing a packet from source to destination boils down to routing the packet from source router to destination router.</p>\n<p>The purpose of a routing algorithm is simple: given a set of routers connected by links, it finds a “good” path from source to destination router. <em>A good path is the least expensive one</em>.</p>\n<p>Graphs (see Algorithms course) are used to formulate routing problems, the node representing routers and the edges the links connecting them. Each edge also has a <strong>value representing its cost</strong>. For any nodes x and y in the G(raph) we denote c(x,y) the cost of the edge between them. If (x,y) doesn’t belong to G, we set c(x,y) &#x3D; infinity. We only consider undirected graphs.<br>We just have to find the least costly paths between sources and destinations.<br>We can classify routing algorithms in two groups:</p>\n<ul>\n<li><strong>Global routing algorithms</strong>: compute the least-cost path between a source and a destination using complete, global knowledge about the network.<br> They are often referred to as <strong>link-state (LS) algorithms</strong> since the algorithm must be aware of the cost of each link in the network</li>\n<li><strong>Decentralized routing algorthms</strong>: compute the least-cost path in an iterative, distributed manner: no node has complete information about the cost of all network links. Instead, each node begins with only the knowledge of the costs of its own directly attached links.</li>\n</ul>\n<p>We could also make another classification separating <strong>static routing algorithms</strong> (routes change very slowly, eg after human intervention) and <strong>dynamic routing algorithms</strong>( routing change as the load or topology change). Finally another distinction could be made between <strong>load-sensitive</strong> or <strong>load-insensitive</strong> algorithms according to whether link costs vary reflecting the level of congestion.</p>\n<h3 id=\"4-5-1-The-Link-State-LS-Routing-Algorithm\"><a href=\"#4-5-1-The-Link-State-LS-Routing-Algorithm\" class=\"headerlink\" title=\"4.5.1 The Link-State (LS) Routing Algorithm\"></a>4.5.1 The Link-State (LS) Routing Algorithm</h3><p>All link costs are known. In practice this is accomplished by having each node broadcast link-state packets to all other nodes in the network, each packet containing the identities and costs of its attached links resulting in <strong>all nodes having an identical and complete view of the network</strong> (each node could run the algorithm).<br>A link-state algorithm can be <em><strong>Dijkstra’s algorithm</strong></em> or <em><strong>Prim’s algorithm</strong></em>.<br>Code and example page 394</p>\n<h3 id=\"4-5-2-The-Distance-Vector-DV-Routing-Algorithm\"><a href=\"#4-5-2-The-Distance-Vector-DV-Routing-Algorithm\" class=\"headerlink\" title=\"4.5.2 The Distance-Vector (DV) Routing Algorithm\"></a>4.5.2 The Distance-Vector (DV) Routing Algorithm</h3><p>The <strong>distance-vector</strong> algorithm is <strong>iterative</strong>, <strong>asynchronous</strong> and <strong>distributed</strong>.</p>\n<ul>\n<li><em>Distributed</em> because each node receives some information from one or more of its directly attached neighbors, performs a calculation and then distributes the results back to its neighbors.</li>\n<li><em>iterative</em>: the process continues on until no more information is exchanged between neighbors (self terminating)</li>\n<li><em>asynchronous</em>: the nodes are not required to operate in lockstep with each other</li>\n</ul>\n<p>The least cost between x and y d(x,y) can be determined using the <em><strong>Bellman-Ford</strong></em> equation :</p>\n<p>d(x,y) &#x3D; min_v {c(x,y) + d(v,y)}</p>\n<p>… to be continued</p>\n<h3 id=\"4-5-3-Hierarchical-Routing\"><a href=\"#4-5-3-Hierarchical-Routing\" class=\"headerlink\" title=\"4.5.3 Hierarchical Routing\"></a>4.5.3 Hierarchical Routing</h3><p>In practice it is not possible to have a network of interconnected routers running the same routing algorithm because of two reasons:</p>\n<ul>\n<li><em>Scale</em> if the number of routers is large, running LS or DV algorithms for the whole network becomes prohibitive for memory, processing, storing and timing costs.</li>\n<li><em>Administrative autonomoy</em> an organization should be able to organize its network as it wishes, while still being able to connect its network to the outside world.</li>\n</ul>\n<p>Therefore routers are organized into <strong>autonomous systems (ASs)</strong>, each of which being under the same administrative control. Routers in the same AS run the same routing algorithm and have information about each other. The routing algorithm running <em>within</em> an AS is called an <strong>intra-autonomous system routing protocol</strong>. In an AS, one or more routers will have the task of being responsible for forwarding packets outside the AS, these routers are called <strong>gateway routers</strong>.<br>To obtain reachability information from neighboring ASs and propagating the reachability information to all routers interal to its AS, gateway routers use <strong>inter-AS routing protocols</strong>. Two communicating ASs must run the same inter-AS routing protocol.</p>\n<p>When a router needs to forward a packet outside its AS and there are multiple gateway routers, the router has to make a choice. One often employed practice is to use <strong>hot-potato routing</strong>: the AS gets rid of the packet as quickly as possible (as inexpensively as possible), the router sends the packet to the gateway router that has the smallest router-to-gateway cost among all gateways with a path to the destination.<br>An AS can decide what (internal) destinations to advertise to neighboring ASs: this a <em>policy</em> decision.</p>\n<h2 id=\"4-6-Routing-in-the-Internet\"><a href=\"#4-6-Routing-in-the-Internet\" class=\"headerlink\" title=\"4.6 Routing in the Internet\"></a>4.6 Routing in the Internet</h2><h3 id=\"4-6-1-Intra-AS-Routing-in-the-Internet-RIP\"><a href=\"#4-6-1-Intra-AS-Routing-in-the-Internet-RIP\" class=\"headerlink\" title=\"4.6.1 Intra-AS Routing in the Internet: RIP\"></a>4.6.1 Intra-AS Routing in the Internet: RIP</h3><p>Intra-AS routing protocols are also known as <strong>interior gateway protocols</strong>. Historically two of these have been used extensively in the Internet: <strong>Routing Information Protocol (RIP)</strong> and <strong>Open Shortest Path First (OSPF)</strong>.</p>\n<p>RIP was started for the Xerox Network Systems (XNS) architecture and was was widely deployed after being included in BSD. It is a <strong>distance-vector</strong> protocol working very similarly to what studied before. RIP uses <em>hop count</em> as a cost metric (each link has cost 1). Costs are from source router a destination subnet (not router-to-router as previously seen).<br><strong>hop</strong> &#x3D; number of subnets traversed along the shortest path from source to destination subnet, including the destination subnet.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-riphop.png\" alt=\"riphop\"></p>\n<p>Routing updates [messages] are exchanged between neighbors approximately every 30 seconds using a <strong>RIP response message</strong>, which contains a list of up to 25 destination subnets within the AS as well as the sender’s distance to each of those subnets. Response messages are also known as <strong>RIP advertisements</strong>.<br>Each router maintains a RIP table known as a <strong>routing table</strong> which includes both the router’s distance vector and the router’s forwarding table. There are three columns in it: the destination subnet, the identity of next router along shortest path to reach destination and the number of hops to get to the destination along the shortest path.</p>\n<p>If a router doesn’t hear from its neighbor for at least once every 180 seconds, that neighbor is considered to be no longer reachable (died or link down).<br>Routers can also request information about its neighbor’s cost to a given destination using RIP’s request messages, which are transmitted over UDP using port 520.<br>RIP is implemented in software but has access to the routing tables through the UNIX kernel.</p>\n<h3 id=\"4-6-2-Intra-AS-Routing-in-the-Internet-OSPF\"><a href=\"#4-6-2-Intra-AS-Routing-in-the-Internet-OSPF\" class=\"headerlink\" title=\"4.6.2 Intra-AS Routing in the Internet: OSPF\"></a>4.6.2 Intra-AS Routing in the Internet: OSPF</h3><p>OSPF and the related IS-IS are typically deployed in upper-tier ISPs whereas RIP is deployed in lower-tier ISPs and enterprise networks. Open indicates that the routing protocol speficication is publicly available.<br>It was conceived as the successor to RIP. It is however a <strong>link state protocol</strong> that uses <strong>flooding of link-state information</strong> and a <strong>Dijkstra least-cost path algorithm</strong>: routers construct a complete topological map (graph) of the AS, then run Dijkstra’s algorithm to determine a shortest-path tree to <em>all subnets</em> with itself as the root node. Link costs are individually configured by the networks administrator who might choose to set all the link costs to 1, thus achieving minimum hop routuing or might choose to set the link weights to be <em>inversely proportional to link capacity</em> in order to discourage traffic from using low-bandwidth links.<br>A router broadcasts routing information to <em><strong>all other routers</strong></em> in the AS, not just the neighbors. The broadcast happens whenever there is a change in a link’s state or every 30 minutes if the link’s state doesn’t change. OSPF advertisements are contained in <strong>OSPF messages</strong>  that are carried by IP with an upper-lyerprotocol of 89 for OSPF, therefore OSPF must implement reliable message transfer and link-state broadcast; OSP also checks that links are operational using HELLO messages to attached neighbors. OSPF offers some services:</p>\n<ul>\n<li><em>security</em>: OSPF messages can be authenticated (not active by default).</li>\n<li><em>multiple same-cost paths</em>: two paths having same cost can be used at the same time.</li>\n<li><em>integrated support for unicast and multicast routing</em></li>\n<li><em>support for hierarchy within a single routing domain</em>: ability to structure an autonomous system hierarchically. A OSPF AS can be configured hierarchically into areas, each running its own OSPF algorithm, with each router broadcasting its link state to all other routers in that area. <strong>Area border routers</strong> are responsible for routing packets outside the area and one area is configured to be the <strong>backbone area</strong>, which routes traffic between other areas in the AS, it contains area border routers but also normal routers.</li>\n</ul>\n<h3 id=\"4-6-3-Inter-AS-Routing-BGP\"><a href=\"#4-6-3-Inter-AS-Routing-BGP\" class=\"headerlink\" title=\"4.6.3 Inter-AS Routing: BGP\"></a>4.6.3 Inter-AS Routing: BGP</h3><p>The <strong>Border Gateway Protocol (BGP)</strong> is the de facto standard inter-AS routing protocol in today’s Internet. It provides each AS means to:</p>\n<ul>\n<li>obtain reachability information from neighboring ASs</li>\n<li>propagate reachability information to all internal routers</li>\n<li>determine good routes to subnets using reachability information and AS policy.</li>\n<li>it allows <strong>each subnet to advertise its existence to the rest of the Internet</strong></li>\n</ul>\n<h4 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h4><p>It is a very complex algorithm. Routers exchange information over semipermanent TCP connections using port 179. There is typically one such BGP TCP connection for each link directly connecting two routers in two different ASs but there are also semipermanent TCP connections between routers in the same AS. For each connection, the two routers at the end of it are called <strong>BGP peers</strong> and the connection is called a <strong>BGP session</strong>. A session spanning two ASs is an <strong>external BGP (eBGP) session</strong> and BGP sessions between routers within an AS is called an <strong>internal BGP (iBGP) session</strong>. Destinations are not hosts, but CIDRized <strong>prefixes</strong>, each representing a subnet or collection of subnets.</p>\n<h4 id=\"Path-Attributes-and-BGP-Routes\"><a href=\"#Path-Attributes-and-BGP-Routes\" class=\"headerlink\" title=\"Path Attributes and BGP Routes\"></a>Path Attributes and BGP Routes</h4><p>In BGP an AS is identified by its <strong>globally unique AS number (ASN)</strong> which is assigned by ICANN regional registries. When a router advertises a prefix across a BGP session, it includes with the prefix a number of <strong>BGP attributes</strong>, a prefix with its attributes is called a <strong>route</strong>. Two other important attributes are:</p>\n<ul>\n<li><em>AS-PATH</em>: contains the ASs through which the advertisement for the prefix has passed. When a prefix is passed into an AS, the AS adds its ASN to the AS-PATH.<br> This attribute is used to detect and prevent looping advertisements (if router sees that its AS is already in AS-PATH, it rejects the ad) and to choose among multiple paths to the same prefix.<br> -<em>NEXT-HOP</em>: <strong>the router interface that begins the AS-PATH</strong>.</li>\n</ul>\n<p>BGP also includes attributes allowing routers to assign preferences metrics to the routes and indicating how to prefix was inserted into BGP at the origins.<br>When a router receives a route advertisement, it uses its <strong>import policy</strong> to decide whether to accept or filter the route and whether to set certain attributes such as the router preference metrics.</p>\n<h4 id=\"BGP-Route-Selection\"><a href=\"#BGP-Route-Selection\" class=\"headerlink\" title=\"BGP Route Selection\"></a>BGP Route Selection</h4><p>The input of the selection is the set of all routes that have been learned and accepted by the router. If two or more routes exist for the same prefix, elimination rules are applied until only one remains.</p>\n<h1 id=\"Chapter-8-Security-in-Computer-Networks\"><a href=\"#Chapter-8-Security-in-Computer-Networks\" class=\"headerlink\" title=\"Chapter 8: Security in Computer Networks\"></a>Chapter 8: Security in Computer Networks</h1><h2 id=\"8-1-What-is-Network-Security\"><a href=\"#8-1-What-is-Network-Security\" class=\"headerlink\" title=\"8.1 What is Network Security?\"></a>8.1 What is Network Security?</h2><p>Desirable properties of <strong>secure communication</strong>:</p>\n<ul>\n<li><em>Confindentiality</em>: only sender and receiver should be able to understand the contents of the transmitted message -&gt; encryption</li>\n<li><em>Message integrity</em>: make sure the content of the communication is not altered -&gt; checksum</li>\n<li><em>End-point authentication</em>: sender and receiver should be able to confirm the identity of the other party involved in the communication.</li>\n<li><em>Operation security</em>: ability to counter attacks to internal networks -&gt; firewalls, IPS, IDS</li>\n</ul>\n<p>Possible attacks:</p>\n<ul>\n<li><em>eavesdropping</em>: sniffing and recording messages flowing in a channel</li>\n<li><em>modification, inserion, deletion</em> of messages or message content</li>\n</ul>\n<p>These two allow to mount many other types of attacks</p>\n<h2 id=\"8-2-Principle-of-Cryptography\"><a href=\"#8-2-Principle-of-Cryptography\" class=\"headerlink\" title=\"8.2 Principle of Cryptography\"></a>8.2 Principle of Cryptography</h2><p>See Information Science, BA2<br>ADDITION:</p>\n<h4 id=\"Block-Ciphers\"><a href=\"#Block-Ciphers\" class=\"headerlink\" title=\"Block Ciphers\"></a>Block Ciphers</h4><p>Today there are two broad classes of symmetric encryption techniques: <strong>stream ciphers</strong> and <strong>block ciphers</strong>(used for PGP, SSL, IPssec)<br>In a block cipher, the message to be encrypted is processed into blocks of <em>k</em> bis and each block is encrypted independently. To encode a bloc, the cipher uses a <em>on-to-one</em> mapping to map the <em>k</em>-bit block of cleartext to a <em>k</em>-bit block of ciphertext. To avoid bruteforce attacks, cipher blocks usually employ large blocks (<em>k</em>&#x3D;64) but longer blocks implies longer tables to store the mappings.<br>Block ciphers typically use functions that simulate randomly permuted tables. EX<br>64 bit input split into 8 8-bit chunks, each of which is processed by a 8-bit to 8-bit table, each chunk having its table. The encrypted chunks are reassembled into a 64 bits message which is fed again to the input. After <em>n</em> such cycles, the function provides a 64-bit block of ciphertext. The key for this block would be the eight permutation tables, assuming that the scramble function is publicly known. Popular block ciphers: DES (Data Encryption Standard), 3DES, AES (Advanced Encryption Standard). These use functions instead of predetermined tables. Each of them uses a string of bits for a key (64-bit blocks with 56-bit key in DES, 128-bits blocks and 128&#x2F;192&#x2F;256 bits-long keys)</p>\n<h5 id=\"Cipher-Block-Chaining\"><a href=\"#Cipher-Block-Chaining\" class=\"headerlink\" title=\"Cipher-Block Chaining\"></a>Cipher-Block Chaining</h5><p>We need to avoid long messages avoiding that two or more identical ciphertexts (produced for identical cleartexts by a symmetric encryption).<br>(I DON’T FINISH THIS PART, IT GOES TOO DEEP INTO ENCRYPTION TECHNIQUES WHICH IS NOT WHAT WE ARE INTERESTED IN)</p>\n<h2 id=\"8-3-Message-Integrity-and-Digital-Signatures\"><a href=\"#8-3-Message-Integrity-and-Digital-Signatures\" class=\"headerlink\" title=\"8.3 Message Integrity and Digital Signatures\"></a>8.3 Message Integrity and Digital Signatures</h2><p>We want to provide <strong>message integrity</strong> (aka message authentication). Message integrity is verified when:</p>\n<ul>\n<li>The message received indeed originated from the sender</li>\n<li>The message was not tampered with on its way to the receiver</li>\n</ul>\n<h3 id=\"8-3-1-Cryptographic-Hash-Functions\"><a href=\"#8-3-1-Cryptographic-Hash-Functions\" class=\"headerlink\" title=\"8.3.1 Cryptographic Hash Functions\"></a>8.3.1 Cryptographic Hash Functions</h3><p>A <strong>hash function</strong> takes an input <em>m</em> and computes a fixed length size string <em>H(m)</em> known as a hash. A <strong>cryptographic hash function</strong> is required to have an additional property:</p>\n<p><strong>it is computationally infeasible to find any two different messages <em>x</em> and <em>y</em> such that H(x) &#x3D; H(y)</strong><br>Some used cryptographic hashing functions are md5, SHA…</p>\n<h3 id=\"8-3-2-Message-Authentication-Code\"><a href=\"#8-3-2-Message-Authentication-Code\" class=\"headerlink\" title=\"8.3.2 Message Authentication Code\"></a>8.3.2 Message Authentication Code</h3><p>To perform message integrity we also need a shared secret <em>s</em>, called the <strong>authentication key</strong>. The procedure is then:</p>\n<ol>\n<li>Alice creates message <em>m</em>, concatenates <em>m+s</em> and computes the hash <em>H(m+s)</em> to create the <strong>message authentication code (MAC)</strong></li>\n<li>Alice <strong>appends the MAC to the message</strong> <em>m</em> creating <em>(m+H(m+s))</em></li>\n<li>Bob receives the message and knowing the hash function and the secret, computes the hash. He creates <em>H(m+s)</em> and compares it with what he received.</li>\n</ol>\n<p>MAC is nice because <em>it doesn’t require any encryption algorithm</em><br>The most popular standard of mac today is <strong>HMAC</strong> which can be used with either MD5 or SHA-1. The problem then is: how to distribute the secret?<br> Physically?</p>\n<h3 id=\"8-3-3-Digital-Signatures\"><a href=\"#8-3-3-Digital-Signatures\" class=\"headerlink\" title=\"8.3.3 Digital Signatures\"></a>8.3.3 Digital Signatures</h3><p>A <strong>digital signature</strong> is a cryptographic technique to indicate the owner or creator of a document or to signify one’s agreement with a document’s content.<br>Just as with handwritten signatures, digital signatures should be created in a way that they are <strong>verifiable</strong> (prove that the the author of a signature is indeed the author) and nonforgeable** (prove that only that individual could have signed the document).<br>We can use the public and private keys we already created for asymmetric confidentiality.<br>To sign a message <em>m</em> Bob can encrypt the message with the <strong>private key</strong> (only the matching public key will be able to decrypt).<br>However encryption and decryption and computationally expensive therefore:</p>\n<ol>\n<li>Bob computes the hash of the message</li>\n<li>Bob uses his private key to encrypt the hash</li>\n<li>Bob contants the encrypted hash and the message</li>\n<li>Alice can decrypt, find the hash, compute a hash herself check for identity</li>\n</ol>\n<p>We saw that both digital signatures and MACs involve using a hash function but digital signatures, requiring encryption, need heavier operations and also need a <em>Public Key infrastructure</em> (PKI) with certification authorities.</p>\n<h4 id=\"Public-Key-Certification\"><a href=\"#Public-Key-Certification\" class=\"headerlink\" title=\"Public Key Certification\"></a>Public Key Certification</h4><p>An important application of digital signatures is <strong>public key certification</strong>, that is, <strong>certifying that a public key belongs to a specific entity</strong>. It is used in IPsec and SSL.<br>A <strong>Certification Authority</strong> binds a public key to a particular entity. It has the follow roles:</p>\n<ol>\n<li>A CA verifies that an entity (person, router, …) is who it says it is. The method depends on the authority</li>\n<li>The CA creates a <strong>cerificate</strong> that binds the public key of the entity to the identity. The certificate contains the public key and globally unique identifying information about the owner of the public key. The <strong>certificate is digitally signed by the CA</strong></li>\n</ol>\n<h2 id=\"8-4-End-Point-Authentication\"><a href=\"#8-4-End-Point-Authentication\" class=\"headerlink\" title=\"8.4 End-Point Authentication\"></a>8.4 End-Point Authentication</h2><p><strong>End-point authentication</strong> is the process of one entity proving its identity to another entity over a computer network.<br>Authentication must be done solely on the basis of messages and data exchanged as part of an <strong>authentication protocol</strong>. Typically this would run before the two communicating parties run some other protocol.</p>\n<p>We can analyze authentication developing a simple algorithm step by step:</p>\n<h4 id=\"Version-1-0\"><a href=\"#Version-1-0\" class=\"headerlink\" title=\"Version 1.0\"></a>Version 1.0</h4><p>Alice simply sends a message to Bob saying “I’m Alice”</p>\n<h4 id=\"Version-2-0\"><a href=\"#Version-2-0\" class=\"headerlink\" title=\"Version 2.0\"></a>Version 2.0</h4><p>Alice and Bob always communicate using the same addresses. Bob can simply check that the message has the source IP of Alice. However is fairly easy to spoof an IP address: crafting a special datagram is feasible using a custom kernel e.g Linux.</p>\n<h4 id=\"Version-3-0\"><a href=\"#Version-3-0\" class=\"headerlink\" title=\"Version 3.0\"></a>Version 3.0</h4><p>Alice and Bob could share a secret password, a secrete between the authenticator and the person being authenticated.<br>Alice: I’m Alice, Password.<br>However password can be eavesdropped, sniffed (read and stored).</p>\n<h4 id=\"Version-3-1\"><a href=\"#Version-3-1\" class=\"headerlink\" title=\"Version 3.1\"></a>Version 3.1</h4><p>We could encrypt the password using a shared symmetric cryptographic key.<br>However this protocol is subject to <strong>playback attacks</strong> an eavesdropper could sniff the encrypted secret and, without having to decrypt, could send it to impersonate Alice.</p>\n<h4 id=\"Version-4-0\"><a href=\"#Version-4-0\" class=\"headerlink\" title=\"Version 4.0\"></a>Version 4.0</h4><p>To avoid playback attacks we could use the same principle behind TCP’s three way handshake. A <strong>nonce</strong> is a number that a protocol will use only once in a lifetime.<br>The procedure is then:</p>\n<ol>\n<li>Alice sends: <code>I am Alice</code></li>\n<li>bob chooses a nonce and sends it to Alice</li>\n<li>Alice encrypts it using Alice and Bob’s symmetric secret key and sends the encrypted nonce.</li>\n<li>Bob decrypts the received nonce and checks for equality with the one he generated.</li>\n</ol>\n<h2 id=\"8-5-Securing-e-mail\"><a href=\"#8-5-Securing-e-mail\" class=\"headerlink\" title=\"8.5 Securing e-mail\"></a>8.5 Securing e-mail</h2><p>Security functionalities are provided by many layers of the network stack. Why? There is a need for security at higher layers as well as blanket coverage at lower layers and it easier to provide security at higher layers.</p>\n<h3 id=\"8-5-1-Secure-E-Mail\"><a href=\"#8-5-1-Secure-E-Mail\" class=\"headerlink\" title=\"8.5.1 Secure E-Mail\"></a>8.5.1 Secure E-Mail</h3><p>What features do we want? <em>Confindentiality, Sender authentication, Receiver authentication</em>.</p>\n<ul>\n<li>Confidentiality: to overcome the problem of sharing a symmetric secret, Alice and Bob use asymmetric cryptography. Bob makes his public key publicly available (key server or web page) and Alice encrypts her message with Bob’s public key. Bob can decrypt using his private key. However asymmetric crypto is quite inefficient. A <em>session key</em> can be used: Alice selects a <strong>random symmetric key</strong>. She uses it to encrypt the message. She the encrypts this key using Bob’s public key and concatenates the symmetricly encrypted message and the asymmetricly encrypted key.</li>\n<li>Sender authentication and message integrity: we suppose that Alice and Bob don’t care for confidentiality. They will use <strong>digital signatures</strong> and <strong>message digests</strong>.<br> Alice applies a hash function <em>H</em> to her message <em>m</em>, obtain a message digest, signs the digest with her private key to create a digital signature, concatenates the original message with the signature to create a package and sends the package to Bob’s e-mail address.<br> Bob uses Alice’s public key to the digest and compares the result fo this operation with his own hash <em>H</em> of the message.</li>\n<li>Confidentiality, sender authentication and message integrity: the two procedures above can be combined, message and digest are concatenated and the treated as a new message which is encrypted using the first technique.</li>\n</ul>\n<p>These techniques suppose however that Alice and Bob are able to exchange their public keys. An intruder could in fact send a public key to Bob pretending to be Alice. <em>Certification is needed</em>.</p>\n<h4 id=\"Phil-Zimmermann-and-PGP\"><a href=\"#Phil-Zimmermann-and-PGP\" class=\"headerlink\" title=\"Phil Zimmermann and PGP\"></a>Phil Zimmermann and PGP</h4><p>PZ was the creator of PGP. For that he was legally attacked by the US Government, he distributed PGP while it should have stayed a secret weapon in the heads of the defense. The US dropped the case and PGP became the most widely used e-mail encryption software in the world despite the lack of funding, paid staff.</p>\n<h3 id=\"8-5-2-PGP\"><a href=\"#8-5-2-PGP\" class=\"headerlink\" title=\"8.5.2 PGP\"></a>8.5.2 PGP</h3><p>Pretty Good Privacy (PGP) is an e-mail encryption scheme that has become the De Facto standard.<br>It uses the same design shown above, giving the option of signing, encrypting or both.<br>When PGP is installed, it creates a public key pair for the user, the public key can be posted online while the private key is protected by a password which has to be entered every time the user accesses the private key.<br>A PGP message appears after the <strong>MIME</strong> header.<br>PGP also provides a mechanism for public key certification. PGP public keys are certified by <em><strong>Web of Trust</strong></em>: Alice can certify any key&#x2F;username pair when she believes the pair really belong together and, in addition, PGP permits Alice to say that she trusts another user to vouch for the authenticity of more keys. Some PGP users sign each other’s key by holding <em>key-signing parties</em>.</p>\n<h2 id=\"8-6-Securing-TCP-Connections-SSL\"><a href=\"#8-6-Securing-TCP-Connections-SSL\" class=\"headerlink\" title=\"8.6 Securing TCP Connections: SSL\"></a>8.6 Securing TCP Connections: SSL</h2><p>We now move to the transport layer. The enhanced version of TCP is called <strong>Secure Socket Layer (SSL)</strong>, a slightly modified version of SSL v3 called <strong>Transport Layer Security (TLS)</strong> has been standardized by the IETF.<br>Originally developed by Netscape, SSL has enjoyed broad deployment since its origins, providing secure communication between all recent browsers and online services. <strong>SSL provides TCP with confidentiality, data integrity, server authentication and client authentication</strong>.<br>SSL is often used over HTTP, however, as it secures TCP, it can be employed by any application that runs over TCP. SSL provides a simple <em>Application Programming Interface</em> with sockets, similar to TCP’s API.<br>When an application wants to use SSL, it must include SSL classes&#x2F;libraries. <strong>Technically SSL resides in the application layer</strong> but from the developer’s perspective it is a transport layer protocol that provides TCP’s services enhanced with security services.</p>\n<h3 id=\"8-6-1-The-Big-Picture-primitive-almost-SSL\"><a href=\"#8-6-1-The-Big-Picture-primitive-almost-SSL\" class=\"headerlink\" title=\"8.6.1 The Big Picture (primitive almost-SSL)\"></a>8.6.1 The Big Picture (primitive almost-SSL)</h3><p>Three phases:</p>\n<ol>\n<li><strong>Handshake</strong>: Bob initiates a TCP connection is established (TCP SYN, SYNACK, ACK). Bob sends <em>SSL Hello</em>, Alice responds with her certificate containing her public key (the certificate being certified by a CA, Bob is sure that the key belongs to Alice). Bob generates a <em><strong>master secrect (MS)</strong></em>, encrypts it with Alice’s public key to create the <em><strong>Encrypted Master Secret (EMS)</strong></em> and sends it to Alice who will decrypt it with her private key to get the MS which can be used for confidentiality and integrity as seen before.</li>\n<li><strong>Key Derivation</strong> instead of using the MS for integrity and confidentiality, it is safer to use different keys for different functions. Therefore <em>both</em> Alice and Bob <strong>use the MS to generate</strong>:<ul>\n<li>Eb &#x3D; session encryption key for data Bob -&gt; Alice</li>\n<li>Mb &#x3D; session MAC key for data Bob -&gt; Alice</li>\n<li>Ea &#x3D; session encryption key for data Alice -&gt; Bob</li>\n<li>Ma &#x3D; session MAC key for data Alice -&gt; Bob<br>The MS could simply be split in four chunks, but real SSL does it differently.</li>\n</ul>\n</li>\n<li><strong>Data Transfer</strong> TCP is a byte-stream protocol, so where would we put the MAC for the integrity check? SSL breaks the data stream into <strong>records</strong>, appends a MAC to each record and then encrypts record+MAC. However, in a MITM attack, the order of packets could be reversed as TCP sequence numbers are not encrypted. SSL therefore uses sequence numbers. Bob keeps a sequence number counter which begins at zero and is incremented at each record transmission. He includesthe sequence number in the MAC calculation: MAC &#x3D; hash(data+Mb+SeqNum). Alice tracks Bob’s sequence numbers so that she can verify the MAC.</li>\n</ol>\n<h4 id=\"SSL-Record\"><a href=\"#SSL-Record\" class=\"headerlink\" title=\"SSL Record\"></a>SSL Record</h4><p>The real SSL record:</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-sslrecord.png\" alt=\"ssl record\"></p>\n<ul>\n<li>Type: handshake message, data message, connection teardown message</li>\n<li>Length: used to extract the records out of the TCP byte stream</li>\n</ul>\n<h3 id=\"8-6-2-A-More-Complete-Picture\"><a href=\"#8-6-2-A-More-Complete-Picture\" class=\"headerlink\" title=\"8.6.2 A More Complete Picture\"></a>8.6.2 A More Complete Picture</h3><p>SSL allows Alice and Bob to agree on the cryptographic algorithms at the beginning of the SSL session, during handshake. Steps:</p>\n<ol>\n<li>The client sends a list of cryptographic algorithms it supports, along with a client nonce</li>\n<li>The server chooses a symmetric algorithm (ex: AES), a public key algorithm (ex RSA) and a MAC algorithm. It sends back to the client its choices as well as a certificate and a server nonce.</li>\n<li>The client verifies the certificate, extracts the server’s public key, generates a <em>Pre-Master Secret</em> (PMS), encrypts it with the server’s public key and sends the encrypted PMS to server.</li>\n<li>Using the same key derivation function (specified by SSL standard), <em>client and server independently compute the Master Secret (MS) from the PMS and the nonces</em>. The MS is sliced up to create the two encryption and the two MAC keys. Furthemore when the symmetric cipher employs CBC (ex 3DES or AES) the two Initialization Vectors (IVs), one for each side of the connection, are also obtained from hte MS. Henceforth <strong>all messages sent between client and server are encrypted and authenticated (using MAC)</strong></li>\n<li>The client sends a MAC of all the handshake messages</li>\n<li>The server sends a MAC of the handshake messages.</li>\n</ol>\n<p>5 and 6 protect the handshake from tampering: if in the end MAC are not coherent with the previously sent messages, the connection is stopped. (prevents an attacker from impersonating the server and imposing weak algorithms).<br>Nonces are used to avoid <em>connection replay attacks</em> (resending packets sniffed during a previous connection again, using nonces allows to have different MACs and therefore messages at each connection, even if the content of the communication is the same).</p>\n<h4 id=\"Connection-Closure\"><a href=\"#Connection-Closure\" class=\"headerlink\" title=\"Connection Closure\"></a>Connection Closure</h4><p>TCP FIN segments can be crafted by an attacker (<em>truncation attack</em>), therefore they cannot be used.<br>The type field of SSL records is used for these purpose, even if it sent in the clear, it is authenticated at the receivers using record’s MAC.</p>\n<h2 id=\"8-7-Network-Layer-Security-IPsec-and-Virtual-Private-Networks\"><a href=\"#8-7-Network-Layer-Security-IPsec-and-Virtual-Private-Networks\" class=\"headerlink\" title=\"8.7 Network-Layer Security: IPsec and Virtual Private Networks\"></a>8.7 Network-Layer Security: IPsec and Virtual Private Networks</h2><p>The IP security protocol is called <strong>IPsec</strong>, it secures IP datagrams between any two network-layer entities (host, routers)</p>\n<h3 id=\"8-7-1-IPsec-and-Virtual-Private-Networks-VPNs\"><a href=\"#8-7-1-IPsec-and-Virtual-Private-Networks-VPNs\" class=\"headerlink\" title=\"8.7.1 IPsec and Virtual Private Networks (VPNs)\"></a>8.7.1 IPsec and Virtual Private Networks (VPNs)</h3><p>An institution extending overt multiple geographical regions might want its own IP network so that the machines in it can communicate securely. Such a disjoint network is a <strong>private network</strong>. A physical private network can be expensive. VPN can be used to deploy and maintain a private network over the existing public Internet. The traffic is sent over the Internet but encrypted before entering the public net.<br>Not all traffic sent into the Internet by the gateway routers or laptops will be IPsec secured (only the portion accessing internal resources)</p>\n<h3 id=\"8-7-2-The-AH-and-ESP-Protocols\"><a href=\"#8-7-2-The-AH-and-ESP-Protocols\" class=\"headerlink\" title=\"8.7.2 The AH and ESP Protocols\"></a>8.7.2 The AH and ESP Protocols</h3><p>In the IPsec protocol suite, there are two principal protocols: the <strong>Authentication Header (AH)</strong> protocol and the <strong>Encapsulation Security Payload (ESP)</strong> protocol.<br>When a source IPsec entity (router or host) sends secure datagrams to a destination entity it does so with either ESP or AH. AH provides <em>source authentication</em> and <em>data integrity</em> while ESP provides <em>source authentication, data integrity and confidentiality</em>. Because the latter is often critical for VPNs, ESP is much more widely used AH. We will only study ESP.</p>\n<h3 id=\"8-7-3-Security-Associations\"><a href=\"#8-7-3-Security-Associations\" class=\"headerlink\" title=\"8.7.3 Security Associations\"></a>8.7.3 Security Associations</h3><p>Before sending IPsec datagrams from source entity to destination entity, source and destination create a network-layer logical connection called <strong>security association (SA)</strong>. SA is a simplex (unidirectional from source to destination) logical connection. If both entities want to send datagrams to each other, then two SAs need to be established, one in each direction.<br>The VPN server (headquarters gateway router) will maintain state information about the SA, which will include:</p>\n<ul>\n<li>32-bit identifier for the SA, called <em>Security Parameter Index (SPI)</em></li>\n<li>The origin interface (client outside) of the SA and its destination (its out facing interface) [IP addresses]</li>\n<li>Type of the encryption used</li>\n<li>Encryption key</li>\n<li>Type of the integrity check</li>\n<li>Authentication key</li>\n</ul>\n<p>An IPsec entity often maintains state information for many SAs (all outside clients) using its <em>Security Association Database</em> (SAD) which is a data structure in the entity’s OS kernel.</p>\n<h3 id=\"8-7-4-The-IPsec-Datagram\"><a href=\"#8-7-4-The-IPsec-Datagram\" class=\"headerlink\" title=\"8.7.4 The IPsec Datagram\"></a>8.7.4 The IPsec Datagram</h3><p>IPsec has two different packet forms, one for <strong>tunnel mode</strong> and one for <strong>transport mode</strong>, the first one, being more appropriate for VPNs, is more widely deployed than the transport mode, we will therefore only focus on it.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ipsecdatagram.png\" alt=\"ipsec datagram\"></p>\n<p>The headquarters’s gateway receives an IPv4 datagram from inside the network directed to a VPN client outside. Here is what happens:</p>\n<ol>\n<li>It appends to the back of the original datagram (which includes the original header fields) in the <em>ESP trailer</em> field</li>\n<li>It encrypts the result using the algorithm and key specified in the SA</li>\n<li>Appends to the front of the result a <em>ESP Header</em> creating the “enchilada”</li>\n<li>Creates an authentication MAC over the whole enchilada using algorithm and key specified in the SA</li>\n<li>Appends the MAC to the back of the enchilada forming the <em>payload</em></li>\n<li>Creates a brand new IP header with all the classic IPv4 header fields which it appends before the payload.</li>\n</ol>\n<p>The protocol number field is set to 50, designating IPsec. The routers along the path will treat the datagram as a normal one, oblivious that it is an IPsec datagram.<br>To decide whether outgoing packets should be treated as above or simply let through, the gateway maintains a <em>Security Policy Database</em> (SPD) which indicates what types of datagrams (as a function of the source and destination IPs and of the protocol) are to be IPsec processed and, for those that are, which SA should be used.<br><strong>IPsec provides confidentiality, source authentication, data integrity, replay-attack prevention.</strong></p>\n<h3 id=\"8-7-5-IKE-Key-Management-in-IPsec\"><a href=\"#8-7-5-IKE-Key-Management-in-IPsec\" class=\"headerlink\" title=\"8.7.5 IKE: Key Management in IPsec\"></a>8.7.5 IKE: Key Management in IPsec</h3><p>Who&#x2F;What should populate the SAD? For small VPNs this can be done manually. For larger ones there is the <em><strong>Internet Key Exchange (IKE) protocol</strong></em>.<br>IKE is similar to the handshake in SSL. Here are the steps:</p>\n<ul>\n<li>During the first exchange of messages, the two sides use Diffie-Hellman to create a Bi-Directional IKE SA between the routers, which is entirely different form the IPsec SA discussed above. This IKESA provides an authenticated and encrypted channel between the two routers. Keys are established for encryption and authentication for IKESA. Also established is a master secret.</li>\n<li>During the second exchange of messages, both sides reveal their identity to each other by signing their messages. However the identities are not revealed to an eventual sniffer, since the messages are sent over the IKE sa channel. The two sides also negotiate the IPsec encryption and authentication algorithms to be employed by the IPsec SA. Finally the two sides create an SA n each direction.</li>\n</ul>\n<p>We have two phases to reduce computational costs: we don’t need asymmetric cryptography during second phase, allowing IKE to generate many SAs with relatively little computational cost.</p>\n<h2 id=\"8-9-Operational-Security-Firewalls-and-Intrusion-Detection-Systems\"><a href=\"#8-9-Operational-Security-Firewalls-and-Intrusion-Detection-Systems\" class=\"headerlink\" title=\"8.9 Operational Security: Firewalls and Intrusion Detection Systems\"></a>8.9 Operational Security: Firewalls and Intrusion Detection Systems</h2><h3 id=\"8-9-1-Firewalls\"><a href=\"#8-9-1-Firewalls\" class=\"headerlink\" title=\"8.9.1 Firewalls\"></a>8.9.1 Firewalls</h3><p>A firewall is a combination of hardware and software that isolates an organization’s internal network from the Internet at large, allowing some packets to pass and blocking others. It has three goals</p>\n<ol>\n<li><em>All traffic from outside to inside, and vice versa, passes through the firewall</em></li>\n<li><em>Only authorized traffic, as defined by the local security by the local policy, will be allowed to pass</em>.</li>\n<li><em>The firewall itself is immune to penetration</em></li>\n</ol>\n<p>Firewalls can be classified in three categories:</p>\n<h4 id=\"1-Traditional-Packet-Filters\"><a href=\"#1-Traditional-Packet-Filters\" class=\"headerlink\" title=\"1: Traditional Packet Filters\"></a>1: Traditional Packet Filters</h4><p>Packet filters examine each datagram in isolation determining whether the datagram should be allowed to pass or should be dropped based on administrator-specific rules.<br>Filtering decisions can be based on IP source&#x2F;destination, protocol type, TCP&#x2F;UDP, TCP flags&#x2F; ICMP message type, rules for leaving&#x2F;entering, rules for different router interfaces.<br>The parameters are based on the policy of the organization taking account of user productivity and bandwidth usage as well as security concerns.</p>\n<h4 id=\"2-Stateful-Packet-Filters\"><a href=\"#2-Stateful-Packet-Filters\" class=\"headerlink\" title=\"2: Stateful Packet Filters\"></a>2: Stateful Packet Filters</h4><p>Decisions are made on each packet in isolation. Stateful filters track TCP connecions and use this knowledge to make filtering decisions.</p>\n<h4 id=\"3-Application-Gateways\"><a href=\"#3-Application-Gateways\" class=\"headerlink\" title=\"3: Application Gateways\"></a>3: Application Gateways</h4><p>Application Gateways look beyond the IP&#x2F;TCP&#x2F;UDP headers and make policy decisions based on application data. An <strong>Application Gateway</strong> is an application-specific server through which all application data must pass. Multiple AG can run on the same host, but each gateway is a separate server with its own processes.</p>\n<h3 id=\"8-9-2-Intrusion-Detection-Systems\"><a href=\"#8-9-2-Intrusion-Detection-Systems\" class=\"headerlink\" title=\"8.9.2 Intrusion Detection Systems\"></a>8.9.2 Intrusion Detection Systems</h3><p>An <strong>intrusion detection system (IDS)</strong> is a device that alerts when it observes potentially malicious traffic. An <strong>intrusion prevention system (IPS)</strong>  is a device that filters out suspicious traffic. Both types of device perform <strong>deep packet inspection</strong>: they look beyond the header fields and into the actual application data that the packets carry.</p>\n<p>An IDS can detect a wide range of attacks, including network mapping, port scans, TCP stack scans, DoS, worms, viruses, OS vulnerability attacks and application vulnerability attacks.<br>An organization can deploy one more IDS sensors in its network. When many are used, they work together, usually coordinated by a central server. More than one is often a good solution as each one compare each passing packet with tens of thousands of signatures. They are usually classified as either <strong>signature-based systems</strong> or <strong>anomaly-based systems</strong>.<br>A signature based IDS maintains an extensive database of attack signature, each of which being a set of rules pertaining to an intrusion activity. A signature can be a list of packet characteristics or may relate to a series of packets. They are created by network security engineers researching attacks. The ids sniffs every packet passing by it, comparing it with signatures.<br>Signature based IDS, although widely deployed, have a number of limitations: they require a previous knowledge of the attack to generate an accurate signature, false alarms may be generated, they can be slow and fail to detect attacks if overwhelmed.<br>Anomaly-based packets study normal traffic and looks for statistically unusual events. They don’t rely on previous knowledge of attacks.</p>\n<h1 id=\"Chapter-5-The-Link-Layer-Links-Access-Networks-and-LANs\"><a href=\"#Chapter-5-The-Link-Layer-Links-Access-Networks-and-LANs\" class=\"headerlink\" title=\"Chapter 5: The Link Layer: Links, Access Networks and LANs\"></a>Chapter 5: The Link Layer: Links, Access Networks and LANs</h1><h2 id=\"5-1-Introduction-to-the-Link-Layer\"><a href=\"#5-1-Introduction-to-the-Link-Layer\" class=\"headerlink\" title=\"5.1 Introduction to the Link Layer\"></a>5.1 Introduction to the Link Layer</h2><p>Some terminology:</p>\n<ul>\n<li><strong>node</strong> &#x3D; any device running a link-layer protocol (hosts, routers, switches…)</li>\n<li><strong>link</strong> &#x3D; communication channels connecting adjacent nodes along the path.</li>\n<li>Over a given link, a transmitting node encapsulates the datagram in a <strong>link-layer frame</strong> and transmits the frame into the link.</li>\n</ul>\n<h3 id=\"5-1-1-The-Services-Provided-by-The-Link-Layer\"><a href=\"#5-1-1-The-Services-Provided-by-The-Link-Layer\" class=\"headerlink\" title=\"5.1.1 The Services Provided by The Link Layer\"></a>5.1.1 The Services Provided by The Link Layer</h3><p>Possible services offered by a link-layer protocol include:</p>\n<ul>\n<li><em>Framing</em>: all link layer protocols encapsulate each network layer datagram  within a link-layer frame before transmission. A frame consists of a data field, containing the datagram, and a number of header fields, whose structure is determined by the protocol.</li>\n<li><em>Link access</em>: A <strong>Medium Access Control</strong> (MAC) protocol specifies the rules by which a frame is transmitted onto the link.</li>\n<li><em>Reliable delivery</em>: the protocol guarantees to move each datagram across the link without loss or errors. A reliable delivery protocol is often used for links highly prone to errors (WiFi) so that the error can be corrected locally, where it happens, rather than forcing an end-to-end retransmission. However it can represent a significant overhead for low bit-error links (cable) and therefore many wired link-layer protocols do not provide a reliable delivery service.</li>\n<li><em>Error detection and correction</em>: signal attenuation and electromagnetic noise can introduce errors. Because there is no need to forward a datagram that has an error, may link-layer protocols provide a mechanism to detect such bit errors so that they can drop the frames. This can be accomplished transmitting error-detection bits in the frame. Link layer error detection is usually more sophisticated and <em>implemented in hardware</em>.</li>\n</ul>\n<h3 id=\"5-1-2-Where-Is-the-Link-Layer-Implemented\"><a href=\"#5-1-2-Where-Is-the-Link-Layer-Implemented\" class=\"headerlink\" title=\"5.1.2 Where Is the Link Layer Implemented?\"></a>5.1.2 Where Is the Link Layer Implemented?</h3><p>In routers, the link layer is implemented in the line card. Is a host’s link layer implemented in hardware or software?<br>For the most part, the link layer is implemented in a <strong>network adapter</strong>, sometimes known as <strong>network interface card (NIC)</strong>. At the heart of the NIC is the link-layer controller, usually a single, special purpose chip that implements many of the link-layer services. Thus, much of a link-layer controller’s functionality is implemented in hardware.<br>Part of the link layer is implemented in software that runs on the host’s CPU, this part implement higher-level functionalities.<br>Link-Layer is a combination of hardware and software, the place in the protocol stack where software meets hardware.</p>\n<h2 id=\"5-2-Error-Detection-and-Correction-Techniques\"><a href=\"#5-2-Error-Detection-and-Correction-Techniques\" class=\"headerlink\" title=\"5.2 Error-Detection and -Correction Techniques\"></a>5.2 Error-Detection and -Correction Techniques</h2><p>Error detection and correction allow the receiver to sometimes, <em>but not always</em>, detect that bit errors have occurred. Even with the use of error-detection bits, there still may be <strong>undetected bit errors</strong> (the receiver is unaware of the presence of corrupted bits).<br>We want to keep the probability of such an event small. Let’s now consider three techniques for detecting errors in the transmitted data: parity checks, checksumming methods and cyclic redundancy checks</p>\n<h3 id=\"5-2-1-Parity-Checks\"><a href=\"#5-2-1-Parity-Checks\" class=\"headerlink\" title=\"5.2.1 Parity Checks\"></a>5.2.1 Parity Checks</h3><p>Perhaps the simplest form of error detection is the use of a single <strong>parity bit</strong>. Suppose that the information to be sent, <em>D</em>, has <em>d</em> bits.<br>In an even parity scheme, the sender simply includes one additional bit and chooses its value such that the total number of 1s in the <em>d+1</em> bits (original + parity bit) is even. (odd parity scheme, parity bit to one if #1s % 2 !&#x3D; 0).<br>The receiver only needs to count the number of 1s in the <em>d+1</em> bits. If an odd number of 1 valued bits are found with an even parity scheme, the receiver knows that <em>some odd number</em> of bit error has occurred.<br>If an even number of bit errors occur, this would result in an undetected error.<br>Another approach is to use a <em><strong>two dimensional even parity</strong></em>: the <em>d</em> bits are divided into <em>i</em> rows and <em>j</em> columns. A parity value is computed for each row and for each column. The result <em>i + j + 1</em> parity bits comprise the error-detection bits.<br>A single bit error in the original <em>d</em> bits will cause the parity of both the column and the row containing the flipped bit to to be in error. The receiver can not only detect the error, but also use the column and row indices of the column and row with parity errors to actually identify the bit that was corrupted and <em>correct</em> the error.<br>This technique also allows to detect an error in the <em>parity bits</em>.<br>The ability of the receiver to both detect and correct errors is known as <strong>forward error correction (FEC)</strong></p>\n<h3 id=\"5-2-2-Checksumming-Methods\"><a href=\"#5-2-2-Checksumming-Methods\" class=\"headerlink\" title=\"5.2.2 Checksumming Methods\"></a>5.2.2 Checksumming Methods</h3><p>The <em>d</em> bits of data are treated as a sequence of <em>k</em>-bit integers for example the Internet checksum already studied: bytes of data are treated as integers and summed, the 1s complement of this sum forms the Internet checksum carried in the header. The receiver checks the checksum by taking the 1s complement of the sum of the received data (including checksum) and checking whether the result is all 1 bits, if there are any 0, an error is indicated. In TCP and UDP the checksum is computed over all fields (header and data).<br>Checksumming methods require little packet overhead but they provide relatively weak protection against errors.<br>Why is checksumming used in transport layer and cyclic redundancy check used at the link layer?<br>Transport layer is implemented in software (OS) and therefore needs a simple and fast error detection scheme while error detection at link layer is implemented in hardware which can perform the more complex CRC operations.</p>\n<h3 id=\"5-2-3-Cyclic-Redundancy-Check-CRC\"><a href=\"#5-2-3-Cyclic-Redundancy-Check-CRC\" class=\"headerlink\" title=\"5.2.3 Cyclic Redundancy Check (CRC)\"></a>5.2.3 Cyclic Redundancy Check (CRC)</h3><p><strong>Cyclic Redundancy Check (CRC) codes</strong> are also known as <strong>polynomial codes</strong> since it is possible to view the string to be sent as a polynomial whose coefficients are the 0 and 1 values in the bit string with operation interpreted as polynomial arithmetic.<br>Sender and receiver must agree on a <em>r+1</em> bit pattern know as <strong>generator</strong> which we’ll denote as <em>G</em>. We require the leftmost bit of G to be a 1. For a given piece of data <em>D</em> the sender will choose <em>r</em> additional bits, <em>R</em>, and append them to <em>D</em> such that the resulting <em>d + r</em> bit pattern, interpreted as a binary number, is exactly divisible by G using modulo-2 arithmetic.<br>Checking is therefore easy: the receiver divides the <em>d + r</em> received by bits by <em>G</em>, if the remainder is nonzero, an error has occurred, otherwise the data is accepted as being correct.<br>All CRC calculations are done in modulo 2 without carries in addition or borrows in subtraction (+ &#x3D; - &#x3D; xor).</p>\n<h2 id=\"5-3-Multiple-Access-Links-and-Protocols\"><a href=\"#5-3-Multiple-Access-Links-and-Protocols\" class=\"headerlink\" title=\"5.3 Multiple Access Links and Protocols\"></a>5.3 Multiple Access Links and Protocols</h2><p>There are two types of network links: point-to-point and broadcast links. A <strong>point-to-point link</strong> consists of a single sender at one end of the link and a single receiver at the other end of the link. A <strong>broadcast link</strong> can have multiple sending and receiving nodes all connected to the same, single, shared broadcast channel. The term <em>broadcast</em> is used because when any node transmits a frame, the channel broadcasts the frame and each other node receives a copy (ex: ethernet, wireless).</p>\n<p>The <strong>multiple access problem</strong>: How to coordinate the access of multiple sending and receiving nodes to a shared broadcast channel?<br>Computer networks have <strong>multiple access protocols</strong> by which nodes regulate their transmission into the shared broadcast channel.<br>More than two nodes can transmit frames at the same time, which will result in all of the nodes receiving multiple frames at the same time: the frames <strong>collide</strong> at all of the receivers. Typically in case of collision, <em>none of the receiving nodes can make any sense of any of the frames</em>, they become inextricably tangled together and are therefore <strong>lost</strong>, the channel being wasted during collision.<br>Thus it is necessary to coordinate the transmission of the active nodes.<br>We can classify multiple access protocols in three categories: <strong>channel partitioning protocols, random access protocols, taking-turns protocols</strong>.</p>\n<h3 id=\"5-3-1-Channel-Partitioning-Protocols\"><a href=\"#5-3-1-Channel-Partitioning-Protocols\" class=\"headerlink\" title=\"5.3.1 Channel Partitioning Protocols\"></a>5.3.1 Channel Partitioning Protocols</h3><p>TDM and FDM (from circuit switching) are in this category.<br>A third channel partitioning tool is <strong>code division multiple access (CDMA)</strong> which assigns a different <em>code</em> to each node. Each node then uses its unique code to encode the data bits it sends. If the codes are chosen carefully, then all nodes can transmit simultaneously and yet have their respective receivers correctly receive a sender’s encoded data bits. Originally used in military systems, it’s now widely used for civilian use, particularly in cellular telephony.</p>\n<h3 id=\"5-3-2-Random-Access-Protocols\"><a href=\"#5-3-2-Random-Access-Protocols\" class=\"headerlink\" title=\"5.3.2 Random Access Protocols\"></a>5.3.2 Random Access Protocols</h3><p>A transmitting node always transmits at the full rate of the channel, <em>R</em> bps. When there is a collision, each node involved in the collision repeatedly retransmits its frame until the frame gets through without a collision.<br>But when a node experiences a collision, <em>it waits a random dely before retransmitting the frame</em>. The delay is chosen independently.<br>Here a few of the most commonly used random access protocols:</p>\n<h4 id=\"Slotted-ALOHA\"><a href=\"#Slotted-ALOHA\" class=\"headerlink\" title=\"Slotted ALOHA\"></a>Slotted ALOHA</h4><p>All frames consist of <em>L</em> bits, time is divided into slots of size <em>L&#x2F;R</em> seconds, nodes start to transmit frames only at the beginning of slots. Moreover nodes are synchronized so that each node when the slot begins. If two or more frames collide in a slot, then all the nodes detect the collision event before the slot ends.</p>\n<p>If <em>p</em> is a probability then the operation of slotted ALOHA in each node is simple:</p>\n<ul>\n<li>each node waits the beginning of the next slot to transmit the entire frame in a slot</li>\n<li>If no collision occurs, the frame is considered delivered</li>\n<li>If collision, this is detect before the end of the slot. The node retransmits its frame <em>in each subsequent slot</em> with probability <em>p</em> (probability of retransmission) until the frame is transmitted  without a collision.</li>\n</ul>\n<p>Slotted ALOHA allows transmission at full rate <em>R</em>, is highly decentralized, and is extremely simple.<br>The computed maximal efficiency (successfully used slots in transmission &#x2F; total slots) of Slotted ALOHA) is 37% thus the effective transmission rate is 0.37<em>R</em> bps.</p>\n<h4 id=\"Aloha\"><a href=\"#Aloha\" class=\"headerlink\" title=\"Aloha\"></a>Aloha</h4><p>all nodes synchronize their transmissions to start at the beginning of a slot. The node immediately transmits a frame in its entirety in the channel. In case of collision, the node will then immediately retransmit the frame with probability <em>p</em> otherwise the node waits for a frame transmission time, after which it transmits the frame with probability <em>p</em> or wait for another frame with probability <em>1-p</em>. The maximum efficiency is 1&#x2F;(2e) but the protocol is fully decentralized.</p>\n<h4 id=\"Carrier-Sense-Multiple-Access-CSMA\"><a href=\"#Carrier-Sense-Multiple-Access-CSMA\" class=\"headerlink\" title=\"Carrier Sense Multiple Access (CSMA)\"></a>Carrier Sense Multiple Access (CSMA)</h4><p>CSMA and CSMA&#x2F;CD (collision detection) embody two rules:</p>\n<ul>\n<li><strong>carrier sensing</strong>: if a node is transmitting, the others wait until they detect no transmission for a short amount of time and begin transmission.</li>\n<li><strong>collision detection</strong>: a transmitting node listens to the channel while it’s transmitting, if it detects that another node is transmitting, it stops transmitting and waits for a random amount of time before repeating the sense-and-transmit-when-idle-cycle.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-csmaDIA.png\" alt=\"csmaDIA\"></p>\n<p>It is evident that the <strong>propagation delay</strong> of the channel plays a crucial role: the longer, the larger the chance that a carrier sensing node is not yet able to sense a transmission that has already begun.</p>\n<h4 id=\"Carrier-Sense-Multiple-Access-with-Collision-Detection-CSMA-CD\"><a href=\"#Carrier-Sense-Multiple-Access-with-Collision-Detection-CSMA-CD\" class=\"headerlink\" title=\"Carrier Sense Multiple Access with Collision Detection (CSMA&#x2F;CD)\"></a>Carrier Sense Multiple Access with Collision Detection (CSMA&#x2F;CD)</h4><p>When a node detects a collision, it ceases transmission immediately in Collision Detection.<br>A link layer frame is prepared, if the node senses that the channel is idle (no energy is entering the adapter from the channel), it starts to transmit the frame, else it waits until it detects idle. While transmitting, the node monitors the channel for usage from other nodes, if the entire frame is transmitted without detecting usage, then the adapter is finished. If energy is detected from other adapters while transmitting, the node aborts transmission (stops), waits for  a random amount of time and then returns to checking for idle.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-csmacdDIA.png\" alt=\"csmacdDIA\"></p>\n<p>The wait for random amount of time is required in order to avoid the nodes to keep colliding.</p>\n<h4 id=\"CSMA-CD-Efficiency\"><a href=\"#CSMA-CD-Efficiency\" class=\"headerlink\" title=\"CSMA&#x2F;CD Efficiency\"></a>CSMA&#x2F;CD Efficiency</h4><p>Is the long run fraction of time during which frames are being transmitted without collision. If the propagation delay approaches 0, the efficiency approaches 1.<br>Also if the propagation delay becomes very large, efficiency approaches 1.</p>\n<h3 id=\"5-3-3-Taking-Turns-Protocols\"><a href=\"#5-3-3-Taking-Turns-Protocols\" class=\"headerlink\" title=\"5.3.3 Taking-Turns Protocols\"></a>5.3.3 Taking-Turns Protocols</h3><p>There are a lot of them, we’ll cover two of the more important, the first one being the <strong>polling protocol</strong>. It requires one of the nodes to be designated as a master node which <strong>polls</strong> each of the nodes in a round-robin fashion.<br>The master tells node 1 that it can transmit up to some maximum number of frames, when node 1 is finished (the master checks for energy in the channel) the master tells the same to node 2 and so on.<br>The polling protocol eliminates the collisions and empty slots that plague random access protocols, resulting in a much higher efficiency.<br>However it introduces a <em>polling delay</em> (the amount of time required to notify a node that it can transmit) [if only one is transmitting, it will have to wait for the master to poll all the others]. Moreover the master node represents a single point of failure.</p>\n<p>The second protocol is the <strong>token-passing protocol</strong> in which there is no master method. A small, special purpose frame known as <strong>token</strong> is exchanged among the nodes in some fixed order. When a node receives a toke, it holds it only if it has some frames to transmit otherwise it immediately forwards it to the next node.If a node has frames to transmit when it receives the token, it sends up to a maximum number of frames and then passes the token. Token passing is decentralized and highly efficient but the failure of one node could crash the entire channel, or a node could neglect to release the token….</p>\n<h3 id=\"5-3-4-DOCSIS-The-Link-Layer-Protocol-for-Cable-Internet-Access\"><a href=\"#5-3-4-DOCSIS-The-Link-Layer-Protocol-for-Cable-Internet-Access\" class=\"headerlink\" title=\"5.3.4 DOCSIS: The Link-Layer Protocol for Cable Internet Access\"></a>5.3.4 DOCSIS: The Link-Layer Protocol for Cable Internet Access</h3><p>The Data-Over-Cable-Service-Interface-Specifications specifies the cable data network architecture and its protocols. DOCSIS uses FDM to divide the downstream and upstream network segments into multiple frequency channels. Each upstream and downstream channel is a broadcast channel. Several cable modems share the same upstream channel (frequency) to the CMTS and thus collision can potentially occur.<br>Each upstream channel is divided into intervals of time (TDM-like) each containing a sequence of mini-slots during which cable modems can transmit to the CMTS, which explicitly grants permission to individual modems to transmit during specific mini-slots. This is done sending a special control message known as a MAP message on a downstream channel to specify which cable modem can transmit during which mini-slot.<br>Modems send mini-slot-request frames to the CMTS during a special set of interval mini-slots dedicated for this purpose. The requests are transmitted in a random access manner and may collide with each other. The modem cannot detect activity nor collisions: it simply infers that its request experienced collision if it does not receive a response in the next downstream control message.<br>When a collision is inferred, a modem uses binary exponential backoff to defer the transmission to a future slot.</p>\n<h2 id=\"5-4-Switched-Local-Area-Networks\"><a href=\"#5-4-Switched-Local-Area-Networks\" class=\"headerlink\" title=\"5.4 Switched Local Area Networks\"></a>5.4 Switched Local Area Networks</h2><p>Switched local networks connect hosts using link-layer switches which <strong>do not run networks-layer protocols</strong>.</p>\n<h3 id=\"5-4-1-Link-Layer-Addressing-and-ARP\"><a href=\"#5-4-1-Link-Layer-Addressing-and-ARP\" class=\"headerlink\" title=\"5.4.1 Link-Layer Addressing and ARP\"></a>5.4.1 Link-Layer Addressing and ARP</h3><h4 id=\"MAC-Addresses\"><a href=\"#MAC-Addresses\" class=\"headerlink\" title=\"MAC Addresses\"></a>MAC Addresses</h4><p>Network interfaces in hosts and routers have link-layer addresses, however <em>link-layer switches do not have link-layer addresses associated with their interfaces</em> so that they can carry datagrams without having routers or hosts having to explicitly address the frame to the intervening switch.<br>A link-layer address is called <strong>LAN address</strong>, <strong>physical address</strong> or <strong>MAC address</strong>, the last name being the most popular. This address is <strong>6 bytes long</strong>, typically expressed in hexadecimal notation. They are supposed to be permanent but can be changed via software.<br><strong>No two adapters have the same address</strong>: the IEEE manages the MAC address space, usually assigning a 24 prefix to each manufacturer and letting him choose the content of the remaining 24 bits.<br>MAC address have a flat structure (no hierarchy such as in IP) and do not change.<br>When an adapter wants to send a frame to some destination adapter, it inserts the destination adapter’s MAC address into the frame and then sends the frame into the LAN. An adapter might receive a frame that isn’t addressed to it, when this happens, the adapter checks whether the frame’s destination address matches its own, if not it discards the frame. When a sending adapter want to broadcast to the whole network, it inserts a special <strong>MAC broadcast address</strong> into the destination address field, for 6bytes addresses that is FF-FF-FF-FF-FF-FF</p>\n<h4 id=\"Address-Resolution-Protocol-ARP\"><a href=\"#Address-Resolution-Protocol-ARP\" class=\"headerlink\" title=\"Address Resolution Protocol (ARP)\"></a>Address Resolution Protocol (ARP)</h4><p>The <strong>Address Resolution Protocol (ARP)</strong> translates network-layer addresses into link-layer addresses, analogously to DNS, but ARP resolves IP addresses only for hosts and router interfaces on the same subnet.<br>Each host and router has an <strong>ARP table</strong> which contain mappings of IP addresses to MAC addresses and a time-to-live TTL value which indicates when each mapping will be deleted from the table. A typical TTL is 20 minutes from when an entry is placed in the ARP table.<br>The table does not necessarily contain an entry for every host and router on the subnet.<br>What if a frame has to be sent to an address which does not appear in the table?<br>The sender creates a special packet, an <strong>ARP packet</strong>, containing the sending and receiving IP and MAC addresses. Both ARP query and response have the same format: the sending forwards the ARP request to the broadcast address (destination address) the frame containing the query is received by all the other adapters in the subnet. Each adapter passes the frame to the ARP module which checks if its IP address matches the destination IP address in the query. The one with a match sends back the response with the desired mapping. The querying can update its table and send the IP datagram encapsulated in a link-layer frame.<br>ARP is plug and play: the table gets build automatically.<br>ARP stands in the boundary between the link and network layers.</p>\n<h3 id=\"Sending-a-Datagram-off-the-Subnet\"><a href=\"#Sending-a-Datagram-off-the-Subnet\" class=\"headerlink\" title=\"Sending a Datagram off the Subnet\"></a>Sending a Datagram off the Subnet</h3><p>A datagram that has to be sent out of the subnet is first sent to the first-hop router on the path to the final destination (which is outside the subnet). How is its MAC acquired? Using ARP.<br>When the frame reaches the next-hop router of the destination subnet, it has to be moved inside, the router having to decide what interface to use. This is done using the forwarding table: the router extracts the datagram and checks the destination IP. The datagram is encapsulated again and sent into the subnet, this time the MAC address of the frame is indeed the destination MAC address of the ultimate destination, which the router acquire via ARP.</p>\n<h3 id=\"5-4-2-Ethernet\"><a href=\"#5-4-2-Ethernet\" class=\"headerlink\" title=\"5.4.2 Ethernet\"></a>5.4.2 Ethernet</h3><p>It has pretty much taken over the wired LAN market. Since its invention in the 70’s, it has grown and become faster.<br>At the beginning the original Ethernet LAN used a coaxial bus to interconnect the nodes, creating a broadcast LAN. By the late 90s, most companies and universities had replaces their LANs with Ethernet installation using a hub-based star topology: hosts and routers are directly connected to a hub with twisted-pair copper wire. A <strong>hub</strong> is a physical layer device that acts on individual bits rather than frames. When a hub receives a bit, it simply recreates it boosting its energy strength and transmits the bit onto all the other interfaces (it’s still a broadcast LAN). In the early 2000s, the star topology evolved: the hub was replaced with a <strong>switch</strong>, allowing a collision-less LAN.</p>\n<h4 id=\"Ethernet-Frame-Structure\"><a href=\"#Ethernet-Frame-Structure\" class=\"headerlink\" title=\"Ethernet Frame Structure\"></a>Ethernet Frame Structure</h4><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ethernetframe.png\" alt=\"ethernet frame\"></p>\n<ul>\n<li><em>Data fields</em> (46 to 1,500 bytes): carries the IP datagram (or other network-layer datagram). The MTU (maximum transmission unit) is 1500 bytes, compensated with fragmentation. The minimum is 46, is less, the data is “stuffed” and the receiving network layer uses the length field to eliminate the stuffing</li>\n<li><em>Destination address</em> (6 bytes) destination MAC address.</li>\n<li><em>Source address</em> (6 bytes)</li>\n<li><em>Type field</em> (2 bytes) allows to multiplex network layer protocols (if not only IP is used, also ARP has its own type number 0x0806)</li>\n<li><em>Cyclic redundant check (CRC)</em> (4 bytes): used for bit error detection</li>\n<li><em>Preamble</em> (8 bytes): the first seven have value 10101010, the last has value 10101011. The first seven serve as “wake up” the receiving side and to <em>synchronize their clocks to that of the sender’s clock</em> the two 1s at the end of byte 8 alerts the receiver that the important stuff is about to come.</li>\n</ul>\n<p>All of the Ethernet technologies provide <strong>connectionless service</strong>  (no handshaking, similar to UDP) and <strong>unrealiable service</strong> to the network layer (no ACK, drop in case of errors) which help to make Ethernet simple and cheap.<br>If there are gaps due to discarded Ethernet frames, the fact that the application sees the gaps or not depends on the transport layer protocol used: not with TCP (reliable data transfer), yes with UDP.</p>\n<h4 id=\"Ethernet-Technologies\"><a href=\"#Ethernet-Technologies\" class=\"headerlink\" title=\"Ethernet Technologies\"></a>Ethernet Technologies</h4><p>There are many variants and flavors of Ethernet which have been standardized over the years by the IEEE. They vary in speed: 10 Megabit, 100 Megabit, 1000 Megabit, 10 Gigabit…<br>They can also vary in the type of traffic they can transport….</p>\n<h3 id=\"5-4-3-Link-Layer-Switches\"><a href=\"#5-4-3-Link-Layer-Switches\" class=\"headerlink\" title=\"5.4.3 Link-Layer Switches\"></a>5.4.3 Link-Layer Switches</h3><p>Switch receive and forward frames. They are <strong>transparent</strong>: adapters address each other, without knowing that the switch is sitting in the middle. As they’re output rate might be smaller than the input rate, they also have buffers to queue frames.</p>\n<h3 id=\"Forwarding-and-Filtering\"><a href=\"#Forwarding-and-Filtering\" class=\"headerlink\" title=\"Forwarding and Filtering\"></a>Forwarding and Filtering</h3><p><strong>Filtering</strong> is the switch function that determines whether a frame should be forwarded to some interface or should just be dropped.<br><strong>Forwarding</strong> is the switch function that the determines the interfaces to which a frame should be directed and then moves the frame to those interfaces.<br>Switch filtering and forwarding are done with a <strong>switch table</strong> which contains entries for some (not necessarily all) of the hosts and routers on a LAN. Each entry contains:<br><code>(MAC address, interface leading toward that MAC, time at which the entry was placed in the table)</code><br>Switches forward frames based on the MAC addresses rather than on IP addresses.</p>\n<p>When a switch receives a frame:</p>\n<ul>\n<li>There is no entry in the table associated with the destination address -&gt; the packet is broadcast through all the interfaces (except the one through which the frame was received)</li>\n<li>There is an entry in the table that point to the same interface through which the frame was received -&gt; The frame is discarded (filtering)</li>\n<li>There is an entry in the table that point to an interface different from the one through which the frame was received -&gt; the frame is put in the output buffer preceding the interface discovered thanks to the table (forwarding)</li>\n</ul>\n<h4 id=\"Self-Learning\"><a href=\"#Self-Learning\" class=\"headerlink\" title=\"Self-Learning\"></a>Self-Learning</h4><p>The switch table is build <em><strong>automatically, dynamically and autonomously</strong></em> without any intervention from a network administrator: <strong>switches are self learning</strong>.</p>\n<ol>\n<li>The switch table is initially empty</li>\n<li>For each incoming frame, the switch stores in its table<ol>\n<li>the MAC address in the frame’s <em>source address field</em></li>\n<li>the interface from which the frame arrived</li>\n<li>the current time</li>\n</ol>\n</li>\n<li>The switch deletes an address in the table if no frame are received with that address as the source after some period (<strong>aging time</strong>) so that to eliminate unused entries from the table</li>\n</ol>\n<p>Thus switches are <strong>plug-and-play devices</strong>: they require no human intervention. Switches are also full-duplex, meaning any interface can send and receive at the same time.</p>\n<h4 id=\"Properties-of-Link-Layer-Switching\"><a href=\"#Properties-of-Link-Layer-Switching\" class=\"headerlink\" title=\"Properties of Link-Layer Switching\"></a>Properties of Link-Layer Switching</h4><p>Advantages over buses or hubs:</p>\n<ul>\n<li><em>Elimination of collisions</em>: the switch buffers frames and never transmit more than one frame on a segment at any one time. The maximum aggregated throughput is the sum of all the switch interface rates</li>\n<li><em>Heterogeneous links</em>: The switch providing isolation, different links can operate at different speeds and run over different media. Therefore switches are ideal for mixing legacy equipment with new equipment.</li>\n<li><em>Management</em>: A switch can disconnect a malfunctioning adapter and a cut cable isolates only one host. Switches can gather statistics useful for debugging and planning the evolution of the network.</li>\n</ul>\n<h4 id=\"Switches-Versus-Routers\"><a href=\"#Switches-Versus-Routers\" class=\"headerlink\" title=\"Switches Versus Routers\"></a>Switches Versus Routers</h4><p>They are both packet switches but switches are layer-2 packet switches while routers are layer-3 packet switches.<br>Switches are plug-and-play, have relatively high filtering and forwarding rates.<br>However to <strong>prevent the cycling of broadcast frames, the active topology of a swtiched network is restricted to a spanning tree</strong>. A large network requires large ARP tables in hosts and routers and would generate substantial ARP traffic and processing. Switches are also susceptible to broadcast storms: if one goes crazy and send an endless stream of broadcast frames, the others will forward all of the frames resulting in a network collapse.<br>Routers network addressing is hierarchical, packets do not normally cycle and the topology is not limited to a spanning tree even when the network has redundant paths. Therefore packets can use the best path between source and destination. But routers are not plug-and-play (a host need the IP to connect) and often have a larger per-packet processing time than switches. Finally two pronunciation cause a lot of disputes.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-interconnectiondevices.png\" alt=\"interconnectiondevices\"></p>\n<h1 id=\"PDF-Note👇\"><a href=\"#PDF-Note👇\" class=\"headerlink\" title=\"PDF Note👇\"></a>PDF Note👇</h1><object data=\"/assets/doc/computer_networking_notes_for_tech_placements.pdf\" loading=\"lazy\" type=\"application/pdf\" width=\"100%\" height=\"700px\">\n</object>\n",
            "tags": [
                "computer-science",
                "computer-networks",
                "computer-networks-notes"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/operating-system-notes-for-placement/",
            "url": "https://samirpaul.in/posts/operating-system-notes-for-placement/",
            "title": "Operating System Notes For Placement",
            "date_published": "2023-08-05T20:52:53.913Z",
            "content_html": "<h1 id=\"Operating-Systems-Overview\"><a href=\"#Operating-Systems-Overview\" class=\"headerlink\" title=\"Operating Systems Overview\"></a>Operating Systems Overview</h1><hr>\n\n<p><strong>Operating Systems</strong> :</p>\n<ul>\n<li>Direct operational resources [CPU, memory, devices]</li>\n<li>Enforces working policies [Resource usage, access]</li>\n<li>Mitigates difficulty of complex tasks [abstract hardware details (using system calls)]</li>\n</ul>\n<h2 id=\"What-is-an-Operating-System\"><a href=\"#What-is-an-Operating-System\" class=\"headerlink\" title=\"What is an Operating System?\"></a>What is an Operating System?</h2><ul>\n<li>Intermediate between Hardware and Software applications</li>\n<li>Hides hardware complexity (Read&#x2F;write file storage, send&#x2F;receive socket network)</li>\n<li>Handles resource management (CPU scheduling, Memory management)</li>\n<li>Provide isolation and protection (allocate different parts of memory to different applications so that applications don’t overwrite other memory locations)</li>\n</ul>\n<h2 id=\"Operating-System-definition\"><a href=\"#Operating-System-definition\" class=\"headerlink\" title=\"Operating System definition:\"></a>Operating System definition:</h2><p>An <strong>Operating System</strong> is a layer of systems software that:</p>\n<ul>\n<li>directly has privileged access to the underlying hardware;</li>\n<li>hides the hardware complexity;</li>\n<li>manages hardware on behalf of one or more application according to some predifined policies.</li>\n<li>In addition, it ensures that applications are isolated and protected from one another.</li>\n</ul>\n<h2 id=\"Operating-System-examples\"><a href=\"#Operating-System-examples\" class=\"headerlink\" title=\"Operating System examples:\"></a>Operating System examples:</h2><table>\n<thead>\n<tr>\n<th>Desktop</th>\n<th>Embedded devices</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Microsoft Windows</td>\n<td>Android OS</td>\n</tr>\n<tr>\n<td>MAC OS X (BSD)</td>\n<td>iOS</td>\n</tr>\n<tr>\n<td>LINUX</td>\n<td>Symbian</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h2 id=\"OS-Elements\"><a href=\"#OS-Elements\" class=\"headerlink\" title=\"OS Elements\"></a>OS Elements</h2><ul>\n<li><strong>Abstractions</strong> (corresponds to applications that OS executes)<ul>\n<li>process, thread, file, socket,  memory page</li>\n</ul>\n</li>\n<li><strong>Mechanisms</strong>  (on top of Abstractions)<ul>\n<li>create, schedule, open, write, allocate</li>\n</ul>\n</li>\n<li><strong>Policies</strong> (how mechanisms are used to manage underlying hardware)    <ul>\n<li>Least Recently Used (LRU) , Earliest Deadline First (EDF), etc.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example :\"></a>Example :</h4><p><em>Memory Management:</em></p>\n<ul>\n<li><strong>Abstractions</strong>: Memory page</li>\n<li><strong>Mechanisms</strong>: Allocate, map to a process</li>\n<li><strong>Policies</strong>: LRU</li>\n</ul>\n<h2 id=\"OS-Design-Principles\"><a href=\"#OS-Design-Principles\" class=\"headerlink\" title=\"OS Design Principles\"></a>OS Design Principles</h2><ul>\n<li>Seperation of mechanism and policy<ul>\n<li>implement flexible mechanisms to support many policies </li>\n<li>e.g. LRU, LFU, random</li>\n</ul>\n</li>\n<li>Optimize for common case <ul>\n<li>Where will the OS be used?</li>\n<li>What will the user want to execute on that machine?</li>\n<li>What are the workload requirements?</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"User-Kernel-Protection-Boundary\"><a href=\"#User-Kernel-Protection-Boundary\" class=\"headerlink\" title=\"User&#x2F; Kernel Protection Boundary\"></a>User&#x2F; Kernel Protection Boundary</h2><ul>\n<li>user-level &#x3D;&gt; applications [underprivileged mode]</li>\n<li>kernel-level &#x3D;&gt; OS Kernel [privileged access, hardware access]</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/userkernelprotectionboundary.png\" alt=\"userkernelprotectionboundary\"></p>\n<ul>\n<li>User-Kernel switch is supported by hardware.<ul>\n<li>using trap instructions</li>\n<li>system calls like:<ul>\n<li>open (file)</li>\n<li>send (socket)</li>\n<li>malloc (memory)</li>\n</ul>\n</li>\n<li>signals</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"System-call-Flowcart\"><a href=\"#System-call-Flowcart\" class=\"headerlink\" title=\"System call Flowcart\"></a>System call Flowcart</h2><p><img src=\"https://spcdn.pages.dev/blog/os/systemcallflowchart.png\" alt=\"systemcallflowchart\"></p>\n<ul>\n<li>To make a system call, an application must:<ul>\n<li>write arguments</li>\n<li>save relevant data ast well defined location</li>\n<li>make system calls using system call number</li>\n</ul>\n</li>\n<li>In synchronous mode : wait until system call completes.</li>\n</ul>\n<h2 id=\"Basic-OS-services\"><a href=\"#Basic-OS-services\" class=\"headerlink\" title=\"Basic OS services\"></a>Basic OS services</h2><ul>\n<li>process management</li>\n<li>file management</li>\n<li>device management</li>\n<li>memory management</li>\n<li>storage management</li>\n<li>security</li>\n</ul>\n<h2 id=\"Linux-System-Calls\"><a href=\"#Linux-System-Calls\" class=\"headerlink\" title=\"Linux System Calls\"></a>Linux System Calls</h2><table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Commands</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Process Control</td>\n<td>fork (); exit(); wait();</td>\n</tr>\n<tr>\n<td>File Manipulation</td>\n<td>open(); read(); write();</td>\n</tr>\n<tr>\n<td>Device Manipulation</td>\n<td>ioctl(); read(); write();</td>\n</tr>\n<tr>\n<td>Information Maintenance</td>\n<td>getpid(); alarm(); sleep();</td>\n</tr>\n<tr>\n<td>Communication</td>\n<td>pipe(); shmget(); mmap();</td>\n</tr>\n<tr>\n<td>Protection</td>\n<td>chmod(); umask(); chown();</td>\n</tr>\n</tbody></table>\n<h2 id=\"Linux-Architecture\"><a href=\"#Linux-Architecture\" class=\"headerlink\" title=\"Linux Architecture\"></a>Linux Architecture</h2><p><img src=\"https://spcdn.pages.dev/blog/os/linuxarch.png\" alt=\"linuxarchitecture\"></p>\n<hr>\n\n\n<h1 id=\"Process-and-Process-Management\"><a href=\"#Process-and-Process-Management\" class=\"headerlink\" title=\"Process and Process Management\"></a>Process and Process Management</h1><p><strong>Process</strong>: Instance of an executing program.</p>\n<ul>\n<li>State of execution<ul>\n<li>program counter, stack pointer</li>\n</ul>\n</li>\n<li>Parts and temporary holding area<ul>\n<li>data, register state, occupies state in memory</li>\n</ul>\n</li>\n<li>May require special hardware<ul>\n<li>I&#x2F;O devices</li>\n</ul>\n</li>\n</ul>\n<p>Process is a state of a program when executing and loaded in memory (active state) as opposed to application (static state).</p>\n<h2 id=\"What-does-a-process-look-like\"><a href=\"#What-does-a-process-look-like\" class=\"headerlink\" title=\"What does a process look like?\"></a>What does a process look like?</h2><p><img src=\"https://spcdn.pages.dev/blog/os/process.png\" alt=\"Process\"></p>\n<h3 id=\"Type-of-state\"><a href=\"#Type-of-state\" class=\"headerlink\" title=\"Type of state\"></a>Type of state</h3><ul>\n<li>Text and Data<ul>\n<li>static state when process loads first</li>\n</ul>\n</li>\n<li>Heap <ul>\n<li>dynamically created during execution</li>\n</ul>\n</li>\n<li>Stack<ul>\n<li>grows and shrinks </li>\n<li>LIFO queue (used to store task checkpoints to resume the original process after switching from another.)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"How-does-the-OS-know-what-a-process-is-doing\"><a href=\"#How-does-the-OS-know-what-a-process-is-doing\" class=\"headerlink\" title=\"How does the OS know what a process is doing?\"></a>How does the OS know what a process is doing?</h2><p>Using:</p>\n<ul>\n<li>Program counter</li>\n<li>CPU registers</li>\n<li>Stack pointer</li>\n</ul>\n<h2 id=\"Process-Control-Block-PCB\"><a href=\"#Process-Control-Block-PCB\" class=\"headerlink\" title=\"Process Control Block (PCB)\"></a>Process Control Block (PCB)</h2><p><img src=\"https://spcdn.pages.dev/blog/os/pcb.png\" alt=\"PCB\"></p>\n<ul>\n<li>PCB created when process is created</li>\n<li>Certain fields are updated when process state change e.g. memory mapping</li>\n<li>or other fields that change very frequently e.g. Program Counter</li>\n</ul>\n<h2 id=\"How-is-PCB-used\"><a href=\"#How-is-PCB-used\" class=\"headerlink\" title=\"How is PCB used ?\"></a>How is PCB used ?</h2><p><img src=\"https://spcdn.pages.dev/blog/os/howpcbisused.png\" alt=\"howpcbisused\"></p>\n<h2 id=\"Context-Switch\"><a href=\"#Context-Switch\" class=\"headerlink\" title=\"Context Switch\"></a>Context Switch</h2><ul>\n<li>Mechanism used to switch from the context of one process to another in the CPU.</li>\n</ul>\n<ul>\n<li>They are expensive!<ul>\n<li>direct costs: no of cycles for load and store instructions.</li>\n<li>indirect costs: <strong>COLD</strong> cache (read more <a href=\"http://stackoverflow.com/questions/22756092/what-does-it-mean-by-cold-cache-and-warm-cache-concept\">here</a>)<ul>\n<li>Therefore limit frequency how context switching is done.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>When a cache is <strong>HOT</strong>, most process data is in the cache so the process performance will be at its best.</p>\n<p>Sometimes there are situations where we have to Context Switch (higher priority process, timesharing, etc.)</p>\n<h2 id=\"Process-Lifecycle\"><a href=\"#Process-Lifecycle\" class=\"headerlink\" title=\"Process Lifecycle\"></a>Process Lifecycle</h2><p><img src=\"https://spcdn.pages.dev/blog/os/processlifecycle.png\" alt=\"processlifecycle\"></p>\n<p>CPU is able to execute a process when the process is in Running or Ready state.</p>\n<h2 id=\"Process-Creation\"><a href=\"#Process-Creation\" class=\"headerlink\" title=\"Process Creation\"></a>Process Creation</h2><h4 id=\"Mechanisms\"><a href=\"#Mechanisms\" class=\"headerlink\" title=\"Mechanisms:\"></a>Mechanisms:</h4><ul>\n<li><p>fork :</p>\n<ul>\n<li>copies the parent PCB into new child PCB</li>\n<li>child contains execution at instruction after fork</li>\n</ul>\n</li>\n<li><p>exec :</p>\n<ul>\n<li>replace child image</li>\n<li>load new program and start from first instruction</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"What-is-the-role-of-CPU-scheduler\"><a href=\"#What-is-the-role-of-CPU-scheduler\" class=\"headerlink\" title=\"What is the role of CPU scheduler?\"></a>What is the role of CPU scheduler?</h2><p>CPU scheduler determines which one of the currently ready processes will be dispatched to the CPU to start running, and how long it should run for.</p>\n<p>OS must :</p>\n<ul>\n<li>preempt &#x3D;&gt; interrupt and save current context</li>\n<li>schedule &#x3D;&gt; run scheduler to choose next process</li>\n<li>dispatch &#x3D;&gt; dispatch process 2 switch into its context</li>\n</ul>\n<h2 id=\"Scheduling-design-decisions\"><a href=\"#Scheduling-design-decisions\" class=\"headerlink\" title=\"Scheduling design decisions\"></a>Scheduling design decisions</h2><p><img src=\"https://spcdn.pages.dev/blog/os/timeslice.png\" alt=\"timeslice\"></p>\n<ul>\n<li>What are the appropriate timeslice values?</li>\n<li>Metrics to choose next process to run?</li>\n</ul>\n<h2 id=\"I-O\"><a href=\"#I-O\" class=\"headerlink\" title=\"I&#x2F;O\"></a>I&#x2F;O</h2><p>A process can make way in the ready queue in a number of ways.</p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/io.png\" alt=\"io\"></p>\n<h2 id=\"Can-process-interact\"><a href=\"#Can-process-interact\" class=\"headerlink\" title=\"Can process interact?\"></a>Can process interact?</h2><h4 id=\"Inter-Process-communication\"><a href=\"#Inter-Process-communication\" class=\"headerlink\" title=\"Inter Process communication:\"></a>Inter Process communication:</h4><p>IPC mechanisms:</p>\n<ul>\n<li>transfer data&#x2F;info between address space</li>\n<li>maintain protection and isolation</li>\n<li>provide flexibility and performance</li>\n</ul>\n<p>Two types of IPC models:</p>\n<h4 id=\"1-Message-Passing-IPC\"><a href=\"#1-Message-Passing-IPC\" class=\"headerlink\" title=\"1. Message Passing IPC\"></a>1. <strong>Message Passing IPC</strong></h4><p><img src=\"https://spcdn.pages.dev/blog/os/messagepassing.png\" alt=\"messagepassing\"></p>\n<ul>\n<li>OS provides communication channel line shared buffer</li>\n<li>Processes can write(send), read(receive) msg to&#x2F;from channel</li>\n</ul>\n<p><strong>Advantages</strong>: OS manages the channel<br><br><strong>Disadvantages</strong>: Overheads</p>\n<h4 id=\"2-Shared-Memory-IPC\"><a href=\"#2-Shared-Memory-IPC\" class=\"headerlink\" title=\"2. Shared Memory IPC\"></a>2. <strong>Shared Memory IPC</strong></h4><p><img src=\"https://spcdn.pages.dev/blog/os/sharedmemory.png\" alt=\"sharedmemory\"></p>\n<ul>\n<li>OS establishes a shared channel and maps it into each processes’ address space</li>\n<li>Processes directly write(send), read(receive) msg to&#x2F;from this memory</li>\n</ul>\n<p><strong>Advantages</strong>: OS is out of the way after establishing the shared channel<br><br><strong>Disadvantages</strong>: Re-implementing a lot of code that could have been done by the OS</p>\n<p>Overall, <strong>shared memory</strong> based communication is better if mapping memory between two processes is ammortized over a large number of messages.</p>\n<hr>\n\n\n<h1 id=\"Threads-and-Concurrency\"><a href=\"#Threads-and-Concurrency\" class=\"headerlink\" title=\"Threads and Concurrency\"></a>Threads and Concurrency</h1><p><strong>Thread</strong>:</p>\n<ul>\n<li>is an active<ul>\n<li>entity executing unit of a process</li>\n</ul>\n</li>\n<li>works simultaneously with others<ul>\n<li>many threads execute together</li>\n</ul>\n</li>\n<li>requires coordination<ul>\n<li>sharing of I&#x2F;O devices, CPUs, memory</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Process-vs-Thread\"><a href=\"#Process-vs-Thread\" class=\"headerlink\" title=\"Process vs Thread\"></a>Process vs Thread</h2><p><img src=\"https://spcdn.pages.dev/blog/os/processvthread.png\" alt=\"processvthread\"></p>\n<h2 id=\"Why-are-threads-useful\"><a href=\"#Why-are-threads-useful\" class=\"headerlink\" title=\"Why are threads useful?\"></a>Why are threads useful?</h2><ul>\n<li>Parallelization &#x3D;&gt; Speedup</li>\n<li>Specialization &#x3D;&gt; Hot cache</li>\n<li>Efficiency &#x3D;&gt; lower memory requirement &amp; cheaper IPC</li>\n<li>Time for context switch in threads is less, since memory is shared, hence mapping is not required between virtual and physical memory.<ul>\n<li>Therefore multithreading can be used to hide latency.</li>\n</ul>\n</li>\n<li>Benefits to both applicatioons and OS code <ul>\n<li>Multithreaded OS kernel<ul>\n<li>threads working on behalf of applications</li>\n<li>OS level services like daemons and drivers</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"What-do-we-need-to-support-threads\"><a href=\"#What-do-we-need-to-support-threads\" class=\"headerlink\" title=\"What do we need to support threads?\"></a>What do we need to support threads?</h2><ul>\n<li>Threads data structure<ul>\n<li>Identify threads, keep track of resource usage..</li>\n</ul>\n</li>\n<li>Mechanisms to create and manage threads</li>\n<li>Mechanisms to safely coordinate among threads running concurrently in the same address space</li>\n</ul>\n<h2 id=\"Concurrency-control-and-Coordination\"><a href=\"#Concurrency-control-and-Coordination\" class=\"headerlink\" title=\"Concurrency control and Coordination\"></a>Concurrency control and Coordination</h2><ul>\n<li>Mutual exclusion <ul>\n<li>Exclusive access to only one thread at a time</li>\n<li><strong>mutex</strong></li>\n</ul>\n</li>\n<li>Waiting on other threads<ul>\n<li>Specific condition before proceeding</li>\n<li><strong>condition variable</strong></li>\n</ul>\n</li>\n<li>Waking up other threads from wait state</li>\n</ul>\n<h2 id=\"Threads-and-Threads-creation\"><a href=\"#Threads-and-Threads-creation\" class=\"headerlink\" title=\"Threads and Threads creation\"></a>Threads and Threads creation</h2><ul>\n<li><p>Thread data structure: </p>\n<ul>\n<li>Thread type, Thread ID, PC, SP, registers, stack, attributes.</li>\n</ul>\n</li>\n<li><p><strong>Fork</strong>(proc, args)</p>\n<ul>\n<li>create a thread</li>\n<li>not UNIX fork</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t1 = fork(proc, args)   </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>Join</strong>(thread)<ul>\n<li>terminate a thread</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">child_result = join(t1)   </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example:\"></a>Example:</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread  t1;</span><br><span class=\"line\">Shared_List list;</span><br><span class=\"line\">t1 = fork(safe_insert, 4);</span><br><span class=\"line\">safe_insert(6);</span><br><span class=\"line\">join(t1); //Optional</span><br></pre></td></tr></table></figure>\n\n<p>The list can be accessed by reading shared variable.</p>\n<h2 id=\"Mutual-Exclusion\"><a href=\"#Mutual-Exclusion\" class=\"headerlink\" title=\"Mutual Exclusion\"></a>Mutual Exclusion</h2><ul>\n<li>Mutex data structure:<ul>\n<li>locked?, owner, blocked_threads</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lock(mutex)&#123;</span><br><span class=\"line\">\t//Critical Section</span><br><span class=\"line\">    //Only one thread can access at a time</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unlock(mutex)</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://spcdn.pages.dev/blog/os/mutex.png\" alt=\"mutex\"></p>\n<h2 id=\"Producer-Consumer-problem\"><a href=\"#Producer-Consumer-problem\" class=\"headerlink\" title=\"Producer Consumer problem\"></a>Producer Consumer problem</h2><p>What if the processing you wish to perform with mutual exclusion needs to occur under certai conditions?</p>\n<p>For e.g. The producer appends items to a list until the list is full, and the consumer has to print out all the items of the list once the list if full and then empty the list. Thus we have to execute the Consumer thread only under a certain condition (here- when the list becomes empty, print items).</p>\n<p>Solution: Use <strong>Condition Variables</strong></p>\n<ul>\n<li><p>Wait(mutex, condition)</p>\n<ul>\n<li>mutex is automatically released and reaquired on wait</li>\n<li>The consumer applies <em>Wait</em> until the list is full</li>\n</ul>\n</li>\n<li><p>Signal(condition)    </p>\n<ul>\n<li>Notify only one thread waiting on condition</li>\n<li>The Producer applies <em>Signal</em> to the Consumer thread when the list is full</li>\n</ul>\n</li>\n<li><p>Broadcast(condition)    </p>\n<ul>\n<li>Notify all waiting threads</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/producerconsumer.png\" alt=\"producerconsumer\">    </p>\n<h2 id=\"Readers-Writer-problem\"><a href=\"#Readers-Writer-problem\" class=\"headerlink\" title=\"Readers &#x2F; Writer problem\"></a>Readers &#x2F; Writer problem</h2><ul>\n<li>0 or more readers can access a resource</li>\n<li>0 or 1 writer can write the resource concurrently at the same time</li>\n</ul>\n<ul>\n<li><p>One solution:</p>\n<ul>\n<li>lock on resource<ul>\n<li>good for writer</li>\n<li>too restrictive for readers</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Better solution:</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ((read_count == 0) &amp; (read_count == 0))</span><br><span class=\"line\">\tR okay, W okay</span><br><span class=\"line\">if (read_count &gt; 0)</span><br><span class=\"line\">\tR okay    </span><br><span class=\"line\">if (read_count == 1)</span><br><span class=\"line\">\tR not-okay, W not-okay    </span><br></pre></td></tr></table></figure>\n\n<p>State of shared resource:</p>\n<ul>\n<li>free : resource_counter &#x3D; 0</li>\n<li>reading : resource_counter &gt; 0</li>\n<li>writing : resource_counter &#x3D; -1</li>\n</ul>\n<p>Thus essentially we can apply mutex on the new proxy ‘resource_counter’ variable that represents the state of the shared resource.</p>\n<h2 id=\"Avoiding-common-mistakes\"><a href=\"#Avoiding-common-mistakes\" class=\"headerlink\" title=\"Avoiding common mistakes\"></a>Avoiding common mistakes</h2><ul>\n<li>keep track of mutex&#x2F;lock variable used with a resource<ul>\n<li>e.g. mutex_type m1; &#x2F;&#x2F; mutex for file1</li>\n</ul>\n</li>\n<li>check that you are always and correctly using lock and unlock \t- Compilers can be used as they generate errors&#x2F;warnings to correct this type of mistake  \t</li>\n<li>Use a single mutex to access a single resource</li>\n<li>check that you are signalling correct condition</li>\n<li>check that you are not using signal when broadcast is needed<ul>\n<li>signal : only 1 thread is will proceed, remaining threads will wait</li>\n</ul>\n</li>\n<li>check thread execution order to be controlled by signals to condition variables</li>\n</ul>\n<h2 id=\"Spurious-Unnecessary-Wake-ups\"><a href=\"#Spurious-Unnecessary-Wake-ups\" class=\"headerlink\" title=\"Spurious(Unnecessary) Wake ups\"></a>Spurious(Unnecessary) Wake ups</h2><p>When we wake up threads knowing they may not be able to proceed.</p>\n<h2 id=\"Deadlocks\"><a href=\"#Deadlocks\" class=\"headerlink\" title=\"Deadlocks\"></a>Deadlocks</h2><p>Two or more competing threads are said to be in a deadlock if they are waiting on each other to complete, but none of them ever do.</p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/deadlock.png\" alt=\"deadlock\"></p>\n<p>Here T1 and T2 are in deadlock.</p>\n<h3 id=\"How-to-avoid-this\"><a href=\"#How-to-avoid-this\" class=\"headerlink\" title=\"How to avoid this?\"></a>How to avoid this?</h3><ol>\n<li>Unlock T1 before locking T2<ul>\n<li>Fine-grained locking but T1 nad T2 may both be required</li>\n</ul>\n</li>\n<li>Use one mega lock, get all locks upfront, then release at end<ul>\n<li>For some applications this may be ok. But generally its too restrictive and limits parallelism</li>\n</ul>\n</li>\n<li>Maintain lock order<ul>\n<li>first m_T1</li>\n<li>then m_T2 <ul>\n<li>this will prevent cycles in wait graph</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<p>A cycle in wait graph is necessary and sufficient for deadlock to occur.<br><br>(thread-waiting-on-resource —edge—&gt; thread-owning-resource)</p>\n<ul>\n<li><p>Deadlock prevention &#x3D;&gt; Expensive<br><br>Pre-check for cycles and then delay process or change code</p>\n</li>\n<li><p>Deadlock Detection and Recovery &#x3D;&gt; Rollback</p>\n</li>\n</ul>\n<h2 id=\"Kernel-vs-User-level-Threads\"><a href=\"#Kernel-vs-User-level-Threads\" class=\"headerlink\" title=\"Kernel vs User level Threads\"></a>Kernel vs User level Threads</h2><p><img src=\"https://spcdn.pages.dev/blog/os/kernelvuserthread.png\" alt=\"kernelvuserthread\"></p>\n<p>Three types of models:</p>\n<h4 id=\"1-One-to-One-model\"><a href=\"#1-One-to-One-model\" class=\"headerlink\" title=\"1. One to One model:\"></a>1. <strong>One to One model</strong>:</h4><p><img src=\"https://spcdn.pages.dev/blog/os/onetoone.png\" alt=\"onetoone\"></p>\n<p><strong>Advantages</strong>: </p>\n<ul>\n<li>OS sees threads</li>\n<li>Synchronization</li>\n<li>Blocking</li>\n</ul>\n<p><strong>Disadvantages</strong>: </p>\n<ul>\n<li>Must go to OS for all operations</li>\n<li>OS may have limits on policies, threads</li>\n<li>Portability</li>\n</ul>\n<h4 id=\"2-Many-to-One-model\"><a href=\"#2-Many-to-One-model\" class=\"headerlink\" title=\"2. Many to One model:\"></a>2. <strong>Many to One model</strong>:</h4><p><img src=\"https://spcdn.pages.dev/blog/os/manytoone.png\" alt=\"manytoone\"></p>\n<p><strong>Advantages</strong>: </p>\n<ul>\n<li>Totally Portable </li>\n<li>Doesn’t depend on OS limits and policies</li>\n</ul>\n<p><strong>Disadvantages</strong>: </p>\n<ul>\n<li>OS may block entire process if one user-level thread blocks on I&#x2F;O</li>\n</ul>\n<h4 id=\"3-Many-to-Many-model\"><a href=\"#3-Many-to-Many-model\" class=\"headerlink\" title=\"3. Many to Many model:\"></a>3. <strong>Many to Many model</strong>:</h4><p><img src=\"https://spcdn.pages.dev/blog/os/manytomany.png\" alt=\"manytomany\"></p>\n<p><strong>Advantages</strong>: </p>\n<ul>\n<li>Best of both worlds</li>\n<li>Can have bound or unbound threads</li>\n</ul>\n<p><strong>Disadvantages</strong>: </p>\n<ul>\n<li>Requires coordination between user and kernel level thread managers</li>\n</ul>\n<h2 id=\"Multithreading-patterns\"><a href=\"#Multithreading-patterns\" class=\"headerlink\" title=\"Multithreading patterns\"></a>Multithreading patterns</h2><p><strong>1. Boss-Workers pattern</strong></p>\n<ul>\n<li>Boss- assigns work</li>\n<li>Workers- perform entire task</li>\n</ul>\n<p>Throughput of system is limited by boss thread. Hence boss thread must be kept efficient.</p>\n<p>Throughput &#x3D; 1&#x2F;boss-time-orders</p>\n<p>Boss assigns works by:</p>\n<ol>\n<li>Directly signalling specific works<ul>\n<li><strong>+</strong> workers don’t need to sync</li>\n<li><strong>-</strong> boss must keep track of everyone</li>\n</ul>\n</li>\n<li>Placing work in queue<ul>\n<li><strong>+</strong> boss doesn’t neeed to know details about workers</li>\n<li><strong>-</strong> queue synchronization</li>\n</ul>\n</li>\n</ol>\n<p>How many workers?</p>\n<ul>\n<li>on demand</li>\n<li>pool of workers</li>\n<li>static vs dynamic (i.e dynamically increasing size according to work)</li>\n</ul>\n<p><strong>Advantages</strong>: </p>\n<ul>\n<li>Simplicity</li>\n</ul>\n<p><strong>Disadvantages</strong>: </p>\n<ul>\n<li>Thread pool management</li>\n<li>Locality</li>\n</ul>\n<p><strong>1B. Boss-Workers pattern variant</strong></p>\n<ul>\n<li>Here workers are specialized for certain tasks opposite to the previous equally created workers</li>\n</ul>\n<p><strong>Advantages</strong>: </p>\n<ul>\n<li>Better locality</li>\n<li>Quality of Service management</li>\n</ul>\n<p><strong>Disadvantages</strong>: </p>\n<ul>\n<li>Load balancing</li>\n</ul>\n<p><strong>2. Pipeline pattern</strong></p>\n<ul>\n<li>Threads assigned one subtask in the system</li>\n<li>Entire task &#x3D; Pipeline of threads</li>\n<li>Multiple tasks concurrently run in the system, in different pipeline stages</li>\n<li>Throughput depends on weakest link</li>\n<li>Shared buffer based communication between stages</li>\n</ul>\n<p><strong>3. Layered pattern</strong></p>\n<ul>\n<li>Layers of threads are assigned group of related subtasks</li>\n<li>End to end task must pass up and down through all layers</li>\n</ul>\n<p><strong>Advantages</strong>: </p>\n<ul>\n<li>Specialization</li>\n<li>Less fine-grained than pipeline</li>\n</ul>\n<p><strong>Disadvantages</strong>: </p>\n<ul>\n<li>Not suitable for all applications</li>\n<li>Synchronization</li>\n</ul>\n<h3 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example:\"></a>Example:</h3><p><strong>Q)</strong> For 6 step toy order application we have 2 solutions:</p>\n<ol>\n<li>Boss-workers solution</li>\n<li>Pipeline solution</li>\n</ol>\n<p>Both have 6 threads. In the boss-workers solution, a worker produces a toy order in 120 ms. In the pipeline solution, each of 6 stages take 20 ms.</p>\n<p>How long will it take for these solutions to complete 10 toy orders and 11 toy orders?</p>\n<p><strong>A)</strong> 6 threads means for Boss-workers, 1 thread is for boss, 5 for workers. In pipeline 6 threads are equally used.</p>\n<p>For 10 toy orders:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boss-workers(10) = 120 + 120 = 240 ms</span><br><span class=\"line\">Pipeline(10) = 120 + (9*20) = 300 ms</span><br></pre></td></tr></table></figure>\n<p>Here Boss-workers is better than Pipeline.</p>\n<p>For 11 toy orders:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Boss-workers(11) = 120 + 120 + 120 = 360 ms</span><br><span class=\"line\">Pipeline(11) = 120 + (10*20) = 320 ms</span><br></pre></td></tr></table></figure>\n<p>Here Pipeline is better than Boss-workers.</p>\n<p>This proves that choosing a better pattern depends on the number of threads and the work required to be done.</p>\n<h2 id=\"PThreads\"><a href=\"#PThreads\" class=\"headerlink\" title=\"PThreads\"></a>PThreads</h2><p>PThreads &#x3D;&#x3D; POSIX Threads</p>\n<p>POSIX &#x3D; Portable OS interface</p>\n<h3 id=\"Compiling-PThreads\"><a href=\"#Compiling-PThreads\" class=\"headerlink\" title=\"Compiling PThreads\"></a>Compiling PThreads</h3><ol>\n<li>#include&lt;pthread.h&gt; in main file</li>\n<li>Compile source with -lpthread or -pthread<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o main main.c -lpthread</span><br><span class=\"line\">gcc -o main main.c -pthread</span><br></pre></td></tr></table></figure></li>\n<li>Check return values of common examples</li>\n</ol>\n<h3 id=\"PThread-mutexes\"><a href=\"#PThread-mutexes\" class=\"headerlink\" title=\"PThread mutexes\"></a>PThread mutexes</h3><ul>\n<li>to solve mutual exclusion problems among concurrent threads</li>\n</ul>\n<h3 id=\"Safety-tips\"><a href=\"#Safety-tips\" class=\"headerlink\" title=\"Safety tips\"></a>Safety tips</h3><ul>\n<li>Shared data should always be accessed through single mutex</li>\n<li>Mutex scope must be visible to all</li>\n<li>Globally order locks<ul>\n<li>for all threads, lock mutexes in order</li>\n</ul>\n</li>\n<li>Always unlock a mutex (correctly)</li>\n</ul>\n<h2 id=\"Thread-Design-Considerations\"><a href=\"#Thread-Design-Considerations\" class=\"headerlink\" title=\"Thread Design Considerations\"></a>Thread Design Considerations</h2><h3 id=\"Kernel-vs-User-Level-Threads\"><a href=\"#Kernel-vs-User-Level-Threads\" class=\"headerlink\" title=\"Kernel vs User Level Threads\"></a>Kernel vs User Level Threads</h3><p><img src=\"https://spcdn.pages.dev/blog/os/userlevelvkernellevel.png\" alt=\"userlevelvkernellevel\"></p>\n<h3 id=\"Thread-related-data-structures\"><a href=\"#Thread-related-data-structures\" class=\"headerlink\" title=\"Thread related data structures\"></a>Thread related data structures</h3><p><img src=\"https://spcdn.pages.dev/blog/os/threadds.png\" alt=\"threadds\"></p>\n<h3 id=\"Hard-vs-Light-Process-states\"><a href=\"#Hard-vs-Light-Process-states\" class=\"headerlink\" title=\"Hard vs Light Process states\"></a>Hard vs Light Process states</h3><p>PCB is divided into multiple data structures classified as follows:</p>\n<ul>\n<li>Light Process states<ul>\n<li>Signal mask </li>\n<li>System call args</li>\n</ul>\n</li>\n<li>Heavy Process states <ul>\n<li>virtual address mapping</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Rationale-for-Multiple-Data-Structures\"><a href=\"#Rationale-for-Multiple-Data-Structures\" class=\"headerlink\" title=\"Rationale for Multiple Data Structures:\"></a>Rationale for Multiple Data Structures:</h4><table>\n<thead>\n<tr>\n<th>Single PCB</th>\n<th>Multiple DS</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Large continuos DS</td>\n<td>Smaller DS</td>\n</tr>\n<tr>\n<td>Private for each entity</td>\n<td>Easier to share</td>\n</tr>\n<tr>\n<td>Saved and restored on each context switch</td>\n<td>Save and Restore only what needs to change on context switch</td>\n</tr>\n<tr>\n<td>Update for any changes</td>\n<td>User lever library need to only update portion of the state</td>\n</tr>\n</tbody></table>\n<ul>\n<li>Thus the following disadvantages for single PCB become advantages for Multiple DS : <ul>\n<li>Scalability</li>\n<li>Overheads</li>\n<li>Performance</li>\n<li>Flexibility</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Comparison-of-Interrupts-and-Signals\"><a href=\"#Comparison-of-Interrupts-and-Signals\" class=\"headerlink\" title=\"Comparison of Interrupts and Signals\"></a>Comparison of Interrupts and Signals</h2><ul>\n<li>Handled in specific ways<br>  - interrupt and signal handlers<ul>\n<li>Can be ignored<ul>\n<li>interrupt and signal mask</li>\n</ul>\n</li>\n<li>Expected or unexpected    <ul>\n<li>appear synchronously or asynchronously</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Difference:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Interrupts</th>\n<th>Signals</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Events generated externally by components other than CPU (I&#x2F;O devices, timers, other CPUs)</td>\n<td>Events triggered by CPU and software running on it</td>\n</tr>\n<tr>\n<td>Determined based on physical platform</td>\n<td>Determined based on OS</td>\n</tr>\n<tr>\n<td>Appear asynchronously</td>\n<td>Appear synchronously or asynchronously</td>\n</tr>\n</tbody></table>\n<ul>\n<li>Similarities:<ul>\n<li>Have a unique ID depending on h&#x2F;w or OS</li>\n<li>Can be masked and disabled&#x2F;suspended via corresponding mask<ul>\n<li>per-CPU interrupt mask, preprocess signal mask</li>\n</ul>\n</li>\n<li>if enabled, trigger corresponding to handler   <ul>\n<li>interrupt handler set for entire system by OS</li>\n<li>signal handler set on per process basis by process</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>An interrupt is like a snowstorm alarm<br><br>A signal is like a low battery warning</p>\n</blockquote>\n<h3 id=\"Interrupts\"><a href=\"#Interrupts\" class=\"headerlink\" title=\"Interrupts\"></a>Interrupts</h3><p><img src=\"https://spcdn.pages.dev/blog/os/interrupts.png\" alt=\"interrupts\"></p>\n<h3 id=\"Signals\"><a href=\"#Signals\" class=\"headerlink\" title=\"Signals\"></a>Signals</h3><p><img src=\"https://spcdn.pages.dev/blog/os/signals.png\" alt=\"signals\"></p>\n<h4 id=\"Handlers-Actions\"><a href=\"#Handlers-Actions\" class=\"headerlink\" title=\"Handlers &#x2F; Actions\"></a>Handlers &#x2F; Actions</h4><ul>\n<li>Default actions<ul>\n<li>Terminate, ignore</li>\n<li>Terminate and core dump</li>\n<li>Stop or continue</li>\n</ul>\n</li>\n<li>Process Installs Handler<ul>\n<li>signal(), sigaction()</li>\n<li>for most signals, some cannot be “caught”</li>\n</ul>\n</li>\n<li><strong>Synchronous</strong><ul>\n<li>SIGSEGV (access to protected memory)</li>\n<li>SIGFPE (divided by zero)</li>\n<li>SIGKILL (kill, id)<ul>\n<li>can be directed to a specific thread</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>Asynchronous</strong>*        <ul>\n<li>SIGKILL (kill)</li>\n<li>SIGALARM</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Why-disable-Interrupts-or-Signals\"><a href=\"#Why-disable-Interrupts-or-Signals\" class=\"headerlink\" title=\"Why disable Interrupts or Signals\"></a>Why disable Interrupts or Signals</h3><p><img src=\"https://spcdn.pages.dev/blog/os/disableis.png\" alt=\"disableis\"></p>\n<p>Here PC: First instruction in handler<br><br>SP : thread stack</p>\n<p>To prevent deadlock,</p>\n<ol>\n<li>Keep handler code simple<ul>\n<li>avoid mutex</li>\n<li><strong>-</strong> too restrictive</li>\n</ul>\n</li>\n<li>Control interruptions by handler code<ul>\n<li>Use interrupt&#x2F;signal masks</li>\n<li>0011100110.. (0: disabled, 1: enabled)</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clear_field_in_mask(mask)</span><br><span class=\"line\">lock(mutex)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">#disabled =&gt; remaining pending</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unlock(mutex)</span><br><span class=\"line\">reset_field_in_mask(mask)</span><br><span class=\"line\"></span><br><span class=\"line\">#enabled =&gt; execute handler code</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Interrupt masks are per CPU </p>\n<ul>\n<li>if mask disables interrupt, hardware interrupt rounting mechanism will not deliver interrupt</li>\n</ul>\n</li>\n<li><p>Signal are per execution context (User-level thread on top of Kernel-level thread)</p>\n<ul>\n<li>if mask disables signal, kernel sees mask and will not interrupt corresponding thread</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Types-of-Signals\"><a href=\"#Types-of-Signals\" class=\"headerlink\" title=\"Types of Signals\"></a>Types of Signals</h3><ol>\n<li>One-shot Signals<ul>\n<li>“n signals pending &#x3D;&#x3D; 1 signal pending” : atleast once </li>\n<li>must be explicitly re-enabled</li>\n</ul>\n</li>\n<li>Realtime Signals <ul>\n<li>“if n signals raised, then handler is called n times”</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Handling-interrupts-as-threads\"><a href=\"#Handling-interrupts-as-threads\" class=\"headerlink\" title=\"Handling interrupts as threads\"></a>Handling interrupts as threads</h3><p><img src=\"https://spcdn.pages.dev/blog/os/interruptsasthreads.png\" alt=\"interruptsasthreads\"></p>\n<p>but dynamic thread creation is expensive!</p>\n<ul>\n<li>Dynamic decision<ul>\n<li>if handler doesn’t lock<ul>\n<li>execute on interrupted threads stack</li>\n</ul>\n</li>\n<li>if handler can block<ul>\n<li>turn into real thread</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Optimization        <ul>\n<li>pre-create and pre-initialize thread structure for interrupt routines</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Threads-and-Signal-Handling\"><a href=\"#Threads-and-Signal-Handling\" class=\"headerlink\" title=\"Threads and Signal Handling\"></a>Threads and Signal Handling</h3><p><img src=\"https://spcdn.pages.dev/blog/os/tshandling.png\" alt=\"tshandling\"></p>\n<p><strong>Case 1 :</strong></p>\n<ul>\n<li>User-Level-Thread mask &#x3D; 1</li>\n<li>Kernel-Level-Thread mask &#x3D; 1</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/case1.png\" alt=\"case1\"></p>\n<p><strong>Case 2 :</strong></p>\n<ul>\n<li>User-Level-Thread mask &#x3D; 0</li>\n<li>Kernel-Level-Thread mask &#x3D; 1</li>\n<li>another User-Level-Thread mask &#x3D; 1</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/case2.png\" alt=\"case2\"></p>\n<p><strong>Case 3 :</strong></p>\n<ul>\n<li>User-Level-Thread mask &#x3D; 0</li>\n<li>Kernel-Level-Thread mask &#x3D; 1</li>\n<li>another User-Level-Thread mask &#x3D; 1</li>\n<li>another Kernel-Level-Thread mask &#x3D; 1</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/case3.png\" alt=\"case3\"></p>\n<p><strong>Case 4 :</strong></p>\n<ul>\n<li>User-Level-Thread mask &#x3D; 0</li>\n<li>Kernel-Level-Thread mask &#x3D; 1</li>\n<li>all User-Level-Thread mask &#x3D; 0</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/case4.png\" alt=\"case4\"></p>\n<p><strong>Optimize common case</strong></p>\n<ul>\n<li>signals less frequennt than signal mask updates</li>\n<li>system calls avoided<ul>\n<li>cheaper to update user-level mask</li>\n</ul>\n</li>\n<li>signal handling more expensive</li>\n</ul>\n<h2 id=\"Multi-processing-vs-Multi-threading\"><a href=\"#Multi-processing-vs-Multi-threading\" class=\"headerlink\" title=\"Multi-processing vs Multi-threading\"></a>Multi-processing vs Multi-threading</h2><p>How to best provide concurrency?</p>\n<h3 id=\"Multi-Processing-MP\"><a href=\"#Multi-Processing-MP\" class=\"headerlink\" title=\"Multi-Processing (MP)\"></a>Multi-Processing (MP)</h3><p><strong>Advantages</strong><br> </p>\n<ul>\n<li>Simple programming</li>\n</ul>\n<p><strong>Disadvantages</strong><br> </p>\n<ul>\n<li>High memory usage</li>\n<li>Costs context switch</li>\n<li>costly to maintain shared state (tricky port setup)</li>\n</ul>\n<h3 id=\"Multi-Threading-MP\"><a href=\"#Multi-Threading-MP\" class=\"headerlink\" title=\"Multi-Threading (MP)\"></a>Multi-Threading (MP)</h3><p><strong>Advantages</strong><br> </p>\n<ul>\n<li>Shared address space</li>\n<li>Shared state (no sys calls to other threads)</li>\n<li>Cheap context switch</li>\n</ul>\n<p><strong>Disadvantages</strong><br> </p>\n<ul>\n<li>Complex implementation</li>\n<li>Requires synchronization</li>\n<li>Requires underlying support for threads</li>\n</ul>\n<h2 id=\"Event-Driven-model\"><a href=\"#Event-Driven-model\" class=\"headerlink\" title=\"Event Driven model\"></a>Event Driven model</h2><p><img src=\"https://spcdn.pages.dev/blog/os/eventdrivenmodel.png\" alt=\"eventdrivenmodel\"></p>\n<p>Features:</p>\n<ul>\n<li>Single address space</li>\n<li>Single process</li>\n<li>Single thread of control</li>\n</ul>\n<p>Dispatcher : acts as a state machine and accepts any external events</p>\n<p>When call handler &#x3D;&gt; jump to code</p>\n<p>The handler:</p>\n<ul>\n<li>Runs to completion</li>\n<li>if they need to block<ul>\n<li>initiate blocking operation and pass control to dispatch loop</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Concurrent-execution-in-Event-driven-models\"><a href=\"#Concurrent-execution-in-Event-driven-models\" class=\"headerlink\" title=\"Concurrent execution in Event-driven models\"></a>Concurrent execution in Event-driven models</h3><ul>\n<li>MP &amp; MT :  1 request per execution context (process&#x2F;thread)</li>\n<li>Event Driven : Many requests interleaved in an execution context</li>\n<li>Single thread switches among processing of different requests</li>\n<li>Process requests until wait is necessary<ul>\n<li>then switch to another request</li>\n</ul>\n</li>\n</ul>\n<p><strong>Advantages</strong><br>    </p>\n<ul>\n<li>Single address space</li>\n<li>Single flow of control</li>\n<li>Smaller memory requirement<ul>\n<li>Event Driven model requires less memory than Boss-workers&#x2F;Pipeline model, where the extra memory is required for helper thread for concurrent blocking I&#x2F;O not for all concurrent requests.</li>\n</ul>\n</li>\n<li>No context switches</li>\n<li>No synchronization</li>\n</ul>\n<p><strong>Disadvantages</strong><br>    </p>\n<ul>\n<li>A blocking request&#x2F;handler will block entire process</li>\n</ul>\n<h3 id=\"Asynchronous-I-O-operations\"><a href=\"#Asynchronous-I-O-operations\" class=\"headerlink\" title=\"Asynchronous I&#x2F;O operations\"></a>Asynchronous I&#x2F;O operations</h3><p>Asynchronous I&#x2F;O operations fit well with Event-driven models\t</p>\n<p>Since asynchronous calls are not easily avalible, helpers can be used to implement the async call functionality:</p>\n<ul>\n<li>designated for blocking I&#x2F;O operations only</li>\n<li>pipe&#x2F;socket based communication with event dispatcher<ul>\n<li>select()&#x2F; poll() still okay</li>\n</ul>\n</li>\n<li>helper blocks, but main event loop (&amp; process) will not</li>\n</ul>\n<h3 id=\"Asymmetric-Multi-Process-Event-Driven-model-AMPED-AMTED\"><a href=\"#Asymmetric-Multi-Process-Event-Driven-model-AMPED-AMTED\" class=\"headerlink\" title=\"Asymmetric Multi-Process Event Driven model (AMPED &amp; AMTED)\"></a>Asymmetric Multi-Process Event Driven model (AMPED &amp; AMTED)</h3><p><strong>Advantages</strong><br></p>\n<ul>\n<li>Resolve portability limitations of basic event driven model</li>\n<li>Smaller footprint than regular worker thread</li>\n</ul>\n<p><strong>Disadvantages</strong><br></p>\n<ul>\n<li>Applicability to certain classes of applications</li>\n<li>Event routing on multi CPU systems</li>\n</ul>\n<p>Eg <a href=\"https://en.wikipedia.org/wiki/Apache_HTTP_Server\">Apache Web Server</a></p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/apachewebserver.png\" alt=\"apachewebserver.png\"></p>\n<ul>\n<li>Core : basic server skeleton</li>\n<li>Modules : per functionality</li>\n<li>Flow of Control : Similar to Event Driven model</li>\n<li>But its an combination of MP + MT,<ul>\n<li>each process &#x3D; boss&#x2F;worker with dynamic thread pool</li>\n<li>number of processes can also be dynamically adjusted</li>\n</ul>\n</li>\n</ul>\n<hr>    \n\n\n\n\n<h1 id=\"Scheduling\"><a href=\"#Scheduling\" class=\"headerlink\" title=\"Scheduling\"></a>Scheduling</h1><p>Operating System perform scheduling in the following simple ways:</p>\n<ul>\n<li>Dispatch orders immediately<ul>\n<li>scheduling is simple FIFO (First-Come-First-Serve)</li>\n</ul>\n</li>\n<li>Dispatch simple orders first<ul>\n<li>maximize number of orders processed over time</li>\n<li>maximize throughput (SJF)</li>\n</ul>\n</li>\n<li>Dispatch complex orders first<ul>\n<li>maximize utilization of CPU, devices, memory</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CPU-Scheduler\"><a href=\"#CPU-Scheduler\" class=\"headerlink\" title=\"CPU Scheduler\"></a>CPU Scheduler</h2><ul>\n<li>Decides how and when process (and their threads) access shared CPUs</li>\n<li>Schedules tasks running at user level processes&#x2F;threads as well as kernel level threads</li>\n<li>Chooses one of the ready tasks to run on CPU</li>\n<li>Runs when<ul>\n<li>CPU becomes idle</li>\n<li>new task becomes ready</li>\n<li>timeslice expired timeout</li>\n</ul>\n</li>\n</ul>\n<p>Context switch, enter user mode, set PC and go! &lt;&#x3D; Thread is dispatched on CPU.</p>\n<ul>\n<li>Which task should be selected?<ul>\n<li>Scheduling policy&#x2F;algorithm</li>\n</ul>\n</li>\n<li>How is this done?<ul>\n<li>Depends on runqueue data structure</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"“Run-to-completion”-Scheduling\"><a href=\"#“Run-to-completion”-Scheduling\" class=\"headerlink\" title=\"“Run-to-completion” Scheduling\"></a>“Run-to-completion” Scheduling</h3><ul>\n<li>Initial assumptions<ul>\n<li>group of tasks&#x2F;jobs</li>\n<li>known execution time</li>\n<li>no preemption</li>\n<li>single CPU</li>\n</ul>\n</li>\n<li>Metrics<ul>\n<li>throughput</li>\n<li>average job completion time</li>\n<li>average job wait time</li>\n<li>CPU utilization</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Scheduling-algorithms\"><a href=\"#Scheduling-algorithms\" class=\"headerlink\" title=\"Scheduling algorithms:\"></a>Scheduling algorithms:</h2><h3 id=\"1-First-Come-First-Serve-FCFS\"><a href=\"#1-First-Come-First-Serve-FCFS\" class=\"headerlink\" title=\"1. First Come First Serve (FCFS)\"></a>1. First Come First Serve (FCFS)</h3><ul>\n<li>Schedules tasks in order of arrival</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runqueue = queue(FIFO)</span><br></pre></td></tr></table></figure>\n\n<p>If T1, T2, T3 arrive in the given order and T1 has execution time 1s, T2 10s and T3 1s then :</p>\n<ul>\n<li>Throughput &#x3D; 3&#x2F;(1+10+1) &#x3D; 3&#x2F;12 &#x3D; 0.25s</li>\n<li>Average completion time &#x3D; (1 + 11 + 12)&#x2F;3 &#x3D; 8s</li>\n<li>Average wait time &#x3D; (1+1+11)&#x2F;3 &#x3D; 4s</li>\n<li>Starvation NOT possible</li>\n</ul>\n<h3 id=\"2-Shortest-Job-First-SJF\"><a href=\"#2-Shortest-Job-First-SJF\" class=\"headerlink\" title=\"2. Shortest Job First (SJF)\"></a>2. Shortest Job First (SJF)</h3><ul>\n<li>Schedules tasks in order of execution time</li>\n<li>Therefore for the above example, T1(1s) &gt; T3(1s) &gt; T2(10s)</li>\n<li>Starvation possible</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runqueue = ordered(queue)</span><br><span class=\"line\"></span><br><span class=\"line\">//or</span><br><span class=\"line\"></span><br><span class=\"line\">runqueue = tree()</span><br></pre></td></tr></table></figure>\n\n<p>For SJF,</p>\n<ul>\n<li>Throughput &#x3D; 3&#x2F;(1+10+1) &#x3D; 3&#x2F;12 &#x3D; 0.25s</li>\n<li>Average completion time &#x3D; (1 + 2 + 12)&#x2F;3 &#x3D; 5s</li>\n<li>Average wait time &#x3D; (0+1+2)&#x2F;3 &#x3D; 1s</li>\n</ul>\n<h3 id=\"Preemptive-Scheduling\"><a href=\"#Preemptive-Scheduling\" class=\"headerlink\" title=\"Preemptive Scheduling\"></a>Preemptive Scheduling</h3><ul>\n<li>SJF + Preemption</li>\n<li>Starvation is possible</li>\n</ul>\n<p>T2 arrives first.</p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/preemptive.png\" alt=\"preemptive\"></p>\n<h3 id=\"Priority-Scheduling\"><a href=\"#Priority-Scheduling\" class=\"headerlink\" title=\"Priority Scheduling\"></a>Priority Scheduling</h3><ul>\n<li>Tasks have different priority levels</li>\n<li>Run highest priority task next (preemption)</li>\n<li>Starvation is possible</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/priority.png\" alt=\"priority\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runqueue = per priority_queue()</span><br><span class=\"line\"></span><br><span class=\"line\">//or </span><br><span class=\"line\"></span><br><span class=\"line\">runqueue = tree() ordered on priority</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>low priority task stuck in runqueue &#x3D;&gt; starvation</li>\n<li>“priority aging” <ul>\n<li>priority &#x3D; f(actual priority, time spent in runqueue)</li>\n<li>eventually tasks will run</li>\n<li>prevents starvation</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"3-Round-Robin-Scheduling\"><a href=\"#3-Round-Robin-Scheduling\" class=\"headerlink\" title=\"3. Round-Robin Scheduling\"></a>3. Round-Robin Scheduling</h3><ul>\n<li>Pick up the first task from queue (like FCFS)</li>\n<li>Task may yield to wait on I&#x2F;O (unlike FCFCS)</li>\n<li>Starvation is NOT possible</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/rr1.png\" alt=\"rr1\"></p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/rr2.png\" alt=\"rr2\"></p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/rr3.png\" alt=\"rr3\"></p>\n<h3 id=\"4-Shortest-Remaining-Time-First-SRTF\"><a href=\"#4-Shortest-Remaining-Time-First-SRTF\" class=\"headerlink\" title=\"4. Shortest Remaining Time First (SRTF)\"></a>4. Shortest Remaining Time First (SRTF)</h3><ul>\n<li>Chooses the process with the shortest CPU burst remaining and executes that one. If processes come in during execution that have less remaining time, the current one is preempted and the new one executed. Therefore, it can lead to starvation.</li>\n</ul>\n<h4 id=\"Timeslicing\"><a href=\"#Timeslicing\" class=\"headerlink\" title=\"Timeslicing\"></a>Timeslicing</h4><ul>\n<li>Timeslice &#x3D; max amount of uninterrupted time given to a task</li>\n<li>task may run less than timeslice<ul>\n<li>has to wait on I&#x2F;O sync<ul>\n<li>will be placed on queue</li>\n</ul>\n</li>\n<li>higher priority task becomes runnable</li>\n</ul>\n</li>\n<li>using timeslice tasks are interleaved<ul>\n<li>timesharing the CPU</li>\n<li>CPU bound tasks &#x3D;&gt; preemption after timeslice</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/rr4.png\" alt=\"rr4\">    </p>\n<p><strong>Advantages</strong><br></p>\n<ul>\n<li>Short tasks finish sooner</li>\n<li>More responsive</li>\n<li>Lengthy I&#x2F;O operations initiated sooner<ul>\n<li>best to keep timeslice &gt; context-switch-time</li>\n</ul>\n</li>\n</ul>\n<p><strong>Disdvantages</strong><br>    </p>\n<ul>\n<li>Overheads</li>\n</ul>\n<h4 id=\"How-long-should-a-timeslice-be-be\"><a href=\"#How-long-should-a-timeslice-be-be\" class=\"headerlink\" title=\"How long should a timeslice be be?\"></a>How long should a timeslice be be?</h4><ul>\n<li>should balance benefits and overheads</li>\n</ul>\n<h3 id=\"For-CPU-bound-tasks\"><a href=\"#For-CPU-bound-tasks\" class=\"headerlink\" title=\"For CPU bound tasks:\"></a>For CPU bound tasks:</h3><p><img src=\"https://spcdn.pages.dev/blog/os/cputs.png\" alt=\"cputs\">    </p>\n<ul>\n<li>Hence, for CPU bound tasks, larger timeslice values are better</li>\n</ul>\n<h3 id=\"For-I-O-bound-tasks\"><a href=\"#For-I-O-bound-tasks\" class=\"headerlink\" title=\"For I&#x2F;O bound tasks:\"></a>For I&#x2F;O bound tasks:</h3><p><img src=\"https://spcdn.pages.dev/blog/os/iots.png\" alt=\"iots\">    </p>\n<ul>\n<li>Hence, for I&#x2F;O bound tasks, smaller timeslice values are better<ul>\n<li>Keeps CPU and I&#x2F;P devices busy, I&#x2F;O bound tasks run quickly, makes I&#x2F;O requests responds to a user.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><ul>\n<li><p>CPU bound tasks prefer longer timeslices</p>\n<ul>\n<li>limits context switching overheads</li>\n<li>keeps CPU utilization and throughput</li>\n</ul>\n</li>\n<li><p>I&#x2F;O bound tasks prefer smaller timeslices </p>\n<ul>\n<li>However, if all the tasks in contention are I&#x2F;O bound, it may not make such a difference</li>\n<li>If a portion of them are I&#x2F;O smaller timeslices keeps CPU and device utilization high</li>\n<li>Provides better user-perceived performance</li>\n</ul>\n</li>\n</ul>\n<hr>\n\n\n\n<h1 id=\"Memory-Management\"><a href=\"#Memory-Management\" class=\"headerlink\" title=\"Memory Management\"></a>Memory Management</h1><p>Operating systems:</p>\n<ul>\n<li>uses intelligently size containers<ul>\n<li>memory pages of segments</li>\n</ul>\n</li>\n<li>Not all parts are needed at once <ul>\n<li>tasks operate on subset of memory</li>\n</ul>\n</li>\n<li>Optimized for performance<ul>\n<li>reduce time to access state in memory<ul>\n<li>leads to better performance!</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Memory-Management-Goals\"><a href=\"#Memory-Management-Goals\" class=\"headerlink\" title=\"Memory Management Goals\"></a>Memory Management Goals</h2><p><img src=\"https://spcdn.pages.dev/blog/os/mmgoals.png\" alt=\"mmgoals.png\"></p>\n<h4 id=\"Virtual-vs-Physical-memory\"><a href=\"#Virtual-vs-Physical-memory\" class=\"headerlink\" title=\"Virtual vs Physical memory\"></a>Virtual vs Physical memory</h4><ul>\n<li>Allocate <ul>\n<li>allocation, replacement</li>\n</ul>\n</li>\n<li>Arbitrate<ul>\n<li>address translation and validation</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Page-based-Memory-Management\"><a href=\"#Page-based-Memory-Management\" class=\"headerlink\" title=\"Page-based Memory Management\"></a>Page-based Memory Management</h4><ul>\n<li>Allocate &#x3D;&gt; pages &#x3D;&gt; page frames</li>\n<li>Arbitrate &#x3D;&gt; page tables</li>\n</ul>\n<h4 id=\"Segment-based-Memory-Management\"><a href=\"#Segment-based-Memory-Management\" class=\"headerlink\" title=\"Segment-based Memory Management\"></a>Segment-based Memory Management</h4><ul>\n<li>Allocate &#x3D;&gt; segments</li>\n<li>Arbitrate &#x3D;&gt; segment registers</li>\n</ul>\n<h2 id=\"Hardware-Support\"><a href=\"#Hardware-Support\" class=\"headerlink\" title=\"Hardware Support\"></a>Hardware Support</h2><p><img src=\"https://spcdn.pages.dev/blog/os/hardwaresupport.png\" alt=\"hardwaresupport.png\"></p>\n<h3 id=\"Memory-Management-Unit-MMU\"><a href=\"#Memory-Management-Unit-MMU\" class=\"headerlink\" title=\"Memory Management Unit (MMU)\"></a>Memory Management Unit (MMU)</h3><ul>\n<li>translate virtual to physical address </li>\n<li>reports faults (illegal access, permission, not present in memory)</li>\n</ul>\n<h3 id=\"Registers\"><a href=\"#Registers\" class=\"headerlink\" title=\"Registers\"></a>Registers</h3><ul>\n<li>pointers to page tables</li>\n<li>base and limit size, number of segments</li>\n</ul>\n<h3 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h3><ul>\n<li>Translation lookaside buffer</li>\n<li>Valid VA-PA translations using TLB</li>\n</ul>\n<h3 id=\"Translation\"><a href=\"#Translation\" class=\"headerlink\" title=\"Translation\"></a>Translation</h3><ul>\n<li>Actual PA generation done in hardware</li>\n</ul>\n<h2 id=\"Page-Tables\"><a href=\"#Page-Tables\" class=\"headerlink\" title=\"Page Tables\"></a>Page Tables</h2><p><img src=\"https://spcdn.pages.dev/blog/os/pagetables.png\" alt=\"pagetables.png\"></p>\n<ul>\n<li>OS creates page table per process</li>\n<li>On context switch, switch to valid page table</li>\n<li>Updates register that points to correct page table.<br>  E.g CR3 on x86 architecture</li>\n</ul>\n<h2 id=\"Page-Table-Entry-PTE\"><a href=\"#Page-Table-Entry-PTE\" class=\"headerlink\" title=\"Page Table Entry (PTE)\"></a>Page Table Entry (PTE)</h2><p><img src=\"https://spcdn.pages.dev/blog/os/pfn.png\" alt=\"pfn.png\"></p>\n<h4 id=\"Flags\"><a href=\"#Flags\" class=\"headerlink\" title=\"Flags\"></a>Flags</h4><ul>\n<li>Present (valid&#x2F;invalid)</li>\n<li>Dirty (written to)</li>\n<li>Accessed (for read or write)</li>\n<li>Protection bits &#x3D;&gt; RWX</li>\n</ul>\n<h2 id=\"Page-Table-Entry-on-x86\"><a href=\"#Page-Table-Entry-on-x86\" class=\"headerlink\" title=\"Page Table Entry on x86\"></a>Page Table Entry on x86</h2><p><img src=\"https://spcdn.pages.dev/blog/os/pfnx86.png\" alt=\"pfnx86.png\"></p>\n<h4 id=\"Flags-1\"><a href=\"#Flags-1\" class=\"headerlink\" title=\"Flags\"></a>Flags</h4><ul>\n<li>Present </li>\n<li>Dirty </li>\n<li>Accessed</li>\n<li>R&#x2F;W permission bit 0: R only, 1: R&#x2F;W</li>\n<li>U&#x2F;S permission bit 0: usermode, 1: superviser mode only</li>\n<li>others: caching related info (write through, caching disabled)</li>\n<li>unused: for future use</li>\n</ul>\n<h2 id=\"Page-faults\"><a href=\"#Page-faults\" class=\"headerlink\" title=\"Page faults\"></a>Page faults</h2><p><img src=\"https://spcdn.pages.dev/blog/os/pagefaults.png\" alt=\"pagefaults.png\"></p>\n<h2 id=\"Page-Table-Size\"><a href=\"#Page-Table-Size\" class=\"headerlink\" title=\"Page Table Size\"></a>Page Table Size</h2><p><img src=\"https://spcdn.pages.dev/blog/os/pts.png\" alt=\"pts.png\"></p>\n<ul>\n<li>32 bit architecture<ul>\n<li>Page Table Entry (PTE) &#x3D; 4 Bytes, including PFN + flags</li>\n<li>Virtual Page Number (VPN) &#x3D; 2^32&#x2F;page_size</li>\n<li>Page size &#x3D; 4KB (…8KB, 2MB, 4MB, 1GB)</li>\n</ul>\n</li>\n</ul>\n<p>Therefore Page Table Size &#x3D; (2^32 * 2^12)*4B &#x3D; 4MB (per process)</p>\n<ul>\n<li>for 64 bit architecture<ul>\n<li>Page Table Entry (PTE) &#x3D; 8 Bytes</li>\n<li>Page size &#x3D; 4KB</li>\n</ul>\n</li>\n</ul>\n<p>Page Table Size &#x3D; (2^64 * 2^12)*8B &#x3D; 32PB (per process!)</p>\n<ul>\n<li>processes don’t use entire address space</li>\n<li>even on 32 bit architecture, it will not always use all 4GB</li>\n</ul>\n<p>But Page Table assumes an entry per VPN regardless, of whether corresponding virtual memory is needed or not.</p>\n<h2 id=\"Hierarchical-Page-Tables\"><a href=\"#Hierarchical-Page-Tables\" class=\"headerlink\" title=\"Hierarchical Page Tables\"></a>Hierarchical Page Tables</h2><p><img src=\"https://spcdn.pages.dev/blog/os/hierarchicalpt.png\" alt=\"hierarchicalpt.png\"></p>\n<p>On malloc, a new internal page table may be allocated.</p>\n<h4 id=\"Address-split\"><a href=\"#Address-split\" class=\"headerlink\" title=\"Address split:\"></a>Address split:</h4><table>\n  <tr>\n    <th colspan=\"2\">Page Number</th>\n    <th>offset</th>\n  </tr>\n  <tr>\n    <td>P1</td>\n    <td>P2</td>\n    <td>d</td>\n  </tr>\n  <tr>\n    <td>12</td>\n    <td>10</td>\n    <td>10</td>\n  </tr>\n</table>\n\n<ul>\n<li>inner table addresses &#x3D;&gt; 2^10 * page_size &#x3D; 2^10*2^10 &#x3D; 1MB</li>\n<li>don’t need an inner table for each 1MB virtual memory gap</li>\n</ul>\n<p>Additional Layers</p>\n<ul>\n<li>page table directory pointer (3rd level)</li>\n<li>page table directory map (4th level)</li>\n</ul>\n<ul>\n<li>Important on 64 bit architectures</li>\n<li>larger and more sparse &#x3D;&gt; larger gaps would save more internal page table components</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/hierarchicalpt2.png\" alt=\"hierarchicalpt2.png\"></p>\n<h3 id=\"Tradeoffs-of-Multilevel-Page-Tables\"><a href=\"#Tradeoffs-of-Multilevel-Page-Tables\" class=\"headerlink\" title=\"Tradeoffs of Multilevel Page Tables\"></a>Tradeoffs of Multilevel Page Tables</h3><p><strong>Advantages</strong><br></p>\n<ul>\n<li>Smaller internal page tables&#x2F;directories </li>\n<li>Granularity of coverage<ul>\n<li>Potentially reduced page table size</li>\n</ul>\n</li>\n</ul>\n<p><strong>Disadvantages</strong><br></p>\n<ul>\n<li>More memory accesses required for translation</li>\n<li>increased translation latency</li>\n</ul>\n<h2 id=\"Overheads-of-Address-Translation\"><a href=\"#Overheads-of-Address-Translation\" class=\"headerlink\" title=\"Overheads of Address Translation\"></a>Overheads of Address Translation</h2><p>For each memory reference :</p>\n<table>\n<thead>\n<tr>\n<th>Single level page table</th>\n<th>Four level page table</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>x1 access to PTE</td>\n<td>x4 accesses to PTE</td>\n</tr>\n<tr>\n<td>x1 access to mem</td>\n<td>x1 access to mem</td>\n</tr>\n</tbody></table>\n<p>which results in slowdown.</p>\n<h2 id=\"Page-Table-Cache\"><a href=\"#Page-Table-Cache\" class=\"headerlink\" title=\"Page Table Cache\"></a>Page Table Cache</h2><p><img src=\"https://spcdn.pages.dev/blog/os/ptcache.png\" alt=\"ptcache.png\"></p>\n<h4 id=\"Translation-Lookaside-Buffer\"><a href=\"#Translation-Lookaside-Buffer\" class=\"headerlink\" title=\"Translation Lookaside Buffer\"></a>Translation Lookaside Buffer</h4><ul>\n<li>MMU level address translation cache</li>\n<li>On TLB miss &#x3D;&gt; page table access from memory</li>\n<li>has protection&#x2F;validity bits</li>\n<li>small number of cached address &#x3D;&gt; high TLB hit rate<ul>\n<li>temporal and spatial locality</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>Example<ul>\n<li>x86 Core i7<ul>\n<li>per core : 64-entry data TLB <br> 128-entry instruction TLB </li>\n<li>512-entry shared second-level TLB</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Inverted-Page-Tables\"><a href=\"#Inverted-Page-Tables\" class=\"headerlink\" title=\"Inverted Page Tables\"></a>Inverted Page Tables</h3><p><img src=\"https://spcdn.pages.dev/blog/os/invertedpt.png\" alt=\"invertedpt.png\"></p>\n<h3 id=\"Hashing-Page-Tables\"><a href=\"#Hashing-Page-Tables\" class=\"headerlink\" title=\"Hashing Page Tables\"></a>Hashing Page Tables</h3><p><img src=\"https://spcdn.pages.dev/blog/os/hashingpt.png\" alt=\"hashingpt.png\"></p>\n<h2 id=\"Segmentation\"><a href=\"#Segmentation\" class=\"headerlink\" title=\"Segmentation\"></a>Segmentation</h2><p>Segmentation is the process of mapping virtual to physical memory using segments.</p>\n<ul>\n<li>Segments: arbitrary granularity (size)<ul>\n<li>e.g. code, heap, data, stack..</li>\n<li>address &#x3D; segment - selector + offset</li>\n</ul>\n</li>\n<li>Segment<ul>\n<li>contiguous physical memory</li>\n<li>segment size &#x3D; segment base + limit registers</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/segmentation.png\" alt=\"segmentation.png\"></p>\n<h4 id=\"Segmentation-Paging\"><a href=\"#Segmentation-Paging\" class=\"headerlink\" title=\"Segmentation + Paging\"></a>Segmentation + Paging</h4><p><img src=\"https://spcdn.pages.dev/blog/os/segmentationpaging.png\" alt=\"segmentationpaging.png\"></p>\n<h2 id=\"Page-Size\"><a href=\"#Page-Size\" class=\"headerlink\" title=\"Page Size\"></a>Page Size</h2><ul>\n<li>10 bit offset &#x3D;&gt; 1 KB page size [2^10]</li>\n<li>12 bit offset &#x3D;&gt; 4 KB page size [2^12]</li>\n</ul>\n<p>In real world examples,</p>\n<ul>\n<li>Linux&#x2F;x86 : 4 KB, 2MB, 1GB</li>\n<li>Solaris&#x2F;Sparse: 8kB, 4MB, 2GB</li>\n</ul>\n<p>||Large|Huge|<br>|—-|—–|<br>|page size|2 MB|1 GB|<br>|offset bits|21 bits|30 bits|<br>|reduction factor on page table size|x512|x1024|</p>\n<p><strong>Advantages</strong><br></p>\n<ul>\n<li>larger pages<ul>\n<li>fewer page table entries, smaller page tables, more TLB hits</li>\n</ul>\n</li>\n</ul>\n<p><strong>Disadvantages</strong><br></p>\n<ul>\n<li>internal fragmentation &#x3D;&gt; wastes memory</li>\n</ul>\n<h2 id=\"Memory-Allocation\"><a href=\"#Memory-Allocation\" class=\"headerlink\" title=\"Memory Allocation\"></a>Memory Allocation</h2><ul>\n<li><p>Memory allocator</p>\n<ul>\n<li>determines VA to PA mapping</li>\n<li>address translation, page tables<br>  &#x3D;&gt; simply determine PA from VA and check validity&#x2F;permsissions</li>\n</ul>\n</li>\n<li><p>Kernel Level Allocators</p>\n<ul>\n<li>kernel state, static process state</li>\n</ul>\n</li>\n<li><p>User Level Allocators</p>\n<ul>\n<li>dynamic process state (heap), malloc&#x2F;free</li>\n<li>e.g. d&#x2F;malloc, jemalloc, Hoard, tcmalloc</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Demand-Paging\"><a href=\"#Demand-Paging\" class=\"headerlink\" title=\"Demand Paging\"></a>Demand Paging</h2><ul>\n<li>Virtual Memory &gt;&gt; Physical Memory<ul>\n<li>virtual memory page is not always in physical memory</li>\n<li>physical page frame saved and restored to&#x2F;from secondary storage</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Demand-paging\"><a href=\"#Demand-paging\" class=\"headerlink\" title=\"Demand paging:\"></a>Demand paging:</h3><ul>\n<li>pages swapped in&#x2F;out of memory &amp; a swap partition (e.g. on a disk)</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/demandpaging.png\" alt=\"demandpaging.png\"></p>\n<ul>\n<li>Original PA !&#x3D; PA after swapping<ul>\n<li>if page is “pinned”, swapping is disabled</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"When-pages-should-be-swapped\"><a href=\"#When-pages-should-be-swapped\" class=\"headerlink\" title=\"When pages should be swapped?\"></a>When pages should be swapped?</h4><ul>\n<li>page(out) daemon</li>\n<li>when memory usage is above threshold</li>\n<li>when CPU usage is below threshold</li>\n</ul>\n<h4 id=\"Which-page-should-be-swapped-out\"><a href=\"#Which-page-should-be-swapped-out\" class=\"headerlink\" title=\"Which page should be swapped out?\"></a>Which page should be swapped out?</h4><ul>\n<li>pages that won’t be used</li>\n<li>history based prediction<ul>\n<li>Least Recently Used (LRU policy). Access bit tracks if page is referenced.</li>\n</ul>\n</li>\n<li>page that don’t need to be written out<ul>\n<li>Dirty bit to track if modified</li>\n</ul>\n</li>\n<li>avoid non-swappable pages</li>\n</ul>\n<h2 id=\"Checkpointing\"><a href=\"#Checkpointing\" class=\"headerlink\" title=\"Checkpointing\"></a>Checkpointing</h2><ul>\n<li>Failure and Recovery management technique<ul>\n<li>periodically save process state</li>\n<li>failure may be unavoidable but can restart from checkpoint, so recovery would be faster</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Simple-Approach\"><a href=\"#Simple-Approach\" class=\"headerlink\" title=\"Simple Approach\"></a>Simple Approach</h4><ul>\n<li>pause and save</li>\n</ul>\n<h4 id=\"Better-Approach\"><a href=\"#Better-Approach\" class=\"headerlink\" title=\"Better Approach\"></a>Better Approach</h4><ul>\n<li>write-protect and copy everything at once </li>\n<li>copy diffs of dirties pages for incremental checkpoints<ul>\n<li>rebuild from multiple diffs, or in background</li>\n</ul>\n</li>\n</ul>\n<p>Checkpointing can also be used in other services:</p>\n<ul>\n<li><p>Debugging</p>\n<ul>\n<li>Rewind-Replay</li>\n<li>rewind &#x3D; restart from checkpoint </li>\n<li>gradually go back to earlier checkpoints until error is found</li>\n</ul>\n</li>\n<li><p>Migration</p>\n<ul>\n<li>continue on another machine</li>\n<li>disaster recovery</li>\n<li>consolidation</li>\n<li>repeated checkpoints in a fast loop until pause and copy becomes acceptable (or unavoidable)</li>\n</ul>\n</li>\n</ul>\n<hr>\n\n\n<h1 id=\"Inter-Process-Communication\"><a href=\"#Inter-Process-Communication\" class=\"headerlink\" title=\"Inter Process Communication\"></a>Inter Process Communication</h1><ul>\n<li>Processes share memory<ul>\n<li>data in shared messages</li>\n</ul>\n</li>\n<li>Processes exchange messages<ul>\n<li>message passing via sockets</li>\n</ul>\n</li>\n<li>Requires synchronization<ul>\n<li>mutex, waiting</li>\n</ul>\n</li>\n</ul>\n<p><strong>Inter Process Communication</strong>(IPC) is an OS supported mechanism for interaction among processes (coordination and communication)   </p>\n<ul>\n<li>Message Passing<ul>\n<li>e.g. sockets, pips, msgs, queues</li>\n</ul>\n</li>\n<li>Memory based IPC <ul>\n<li>shared memory, memory mapped files</li>\n</ul>\n</li>\n<li>Higher level semantics<ul>\n<li>files, <a href=\"10-Remote-Procedure-Calls.md\">RPC</a></li>\n</ul>\n</li>\n<li>Synchronization primitives</li>\n</ul>\n<h2 id=\"Message-Passing\"><a href=\"#Message-Passing\" class=\"headerlink\" title=\"Message Passing\"></a>Message Passing</h2><ul>\n<li>Send&#x2F;Receive messages </li>\n<li>OS creates and maintains a channel<ul>\n<li>buffer, FIFO queue</li>\n</ul>\n</li>\n<li>OS provides interfaces to processes<ul>\n<li>a port</li>\n<li>processes send&#x2F;write messages to this port</li>\n<li>processes receive&#x2F;read messages from this port</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/messagepassingipc.png\" alt=\"messagepassingipc.png\"></p>\n<ul>\n<li>Kernel required to <ul>\n<li>establish communication</li>\n<li>perform each IPC operation</li>\n<li>send: system call + data copy</li>\n<li>receive: system call + data copy</li>\n</ul>\n</li>\n<li>Request-response:<br>  4x user&#x2F; kernel crossings + <br><br>  4x data copies</li>\n</ul>\n<p><strong>Advantages</strong><br> </p>\n<ul>\n<li>simplicity : kernel does channel management and synchronization</li>\n</ul>\n<p><strong>Disadvantages</strong><br> </p>\n<ul>\n<li>Overheads</li>\n</ul>\n<h3 id=\"Forms-of-Message-Passing-IPC\"><a href=\"#Forms-of-Message-Passing-IPC\" class=\"headerlink\" title=\"Forms of Message Passing IPC\"></a>Forms of Message Passing IPC</h3><h4 id=\"1-Pipes\"><a href=\"#1-Pipes\" class=\"headerlink\" title=\"1. Pipes\"></a>1. Pipes</h4><ul>\n<li>Carry byte stream between 2 process</li>\n<li>e.g connect output from 1 process to input of another</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/pipes.png\" alt=\"pipes.png\">    </p>\n<h4 id=\"2-Message-queues\"><a href=\"#2-Message-queues\" class=\"headerlink\" title=\"2. Message queues\"></a>2. Message queues</h4><ul>\n<li>Carry “messages” among processes</li>\n<li>OS management includes priorities, scheduling of message delivery </li>\n<li>APIs : Sys-V and POSIX</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/msgq.png\" alt=\"msgq.png\">        </p>\n<h4 id=\"3-Sockets\"><a href=\"#3-Sockets\" class=\"headerlink\" title=\"3. Sockets\"></a>3. Sockets</h4><ul>\n<li>send() and recv() : pass message buffers</li>\n<li>socket() : create kernel level socket buffer</li>\n<li>associated neccessary kernel processing (TCP-IP,..)</li>\n<li>If different machines, channel between processes and network devices</li>\n<li>If same machine, bypass full protocol stack</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/sockets.png\" alt=\"sockets.png\">        </p>\n<h2 id=\"Shared-Memory-IPC\"><a href=\"#Shared-Memory-IPC\" class=\"headerlink\" title=\"Shared Memory IPC\"></a>Shared Memory IPC</h2><ul>\n<li>read and write to shared memory region</li>\n<li>OS establishes shared channel between the processes<ol>\n<li>physical pages mapped into virtual address space</li>\n<li>VA(P1) and VA(P2) map to same physical address</li>\n<li>VA(P1) !&#x3D; VA(P2)</li>\n<li>physical mempry doesn’t need to be contiguous</li>\n</ol>\n</li>\n<li>APIs : SysV, POSIX, memory mapped files, Android ashmem</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/sharedmemoryipc.png\" alt=\"sharedmemoryipc.png\"></p>\n<p><strong>Advantages</strong><br></p>\n<ul>\n<li>System calls only for setup data copies potentially reduced (but not eliminated)</li>\n</ul>\n<p><strong>Disdvantages</strong><br></p>\n<ul>\n<li>explicit synchronization</li>\n<li>communication protocol, shared buffer management<ul>\n<li>programmer’s responsibility</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Which-is-better\"><a href=\"#Which-is-better\" class=\"headerlink\" title=\"Which is better?\"></a>Which is better?</h2><p><strong>Overheads for</strong></p>\n<ol>\n<li>Message Passing : must perform multiple copies</li>\n<li>Shared Memory : must establish all mappings among processes’ address space and shared memory pages</li>\n</ol>\n<p>Thus, it depends.</p>\n<h2 id=\"Copy-vs-Map\"><a href=\"#Copy-vs-Map\" class=\"headerlink\" title=\"Copy vs Map\"></a>Copy vs Map</h2><p>Goal for both is to transfer data from one into target saddress space</p>\n<table>\n<thead>\n<tr>\n<th>Copy (Message Passing)</th>\n<th>Map (Shared Memory)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>CPU cycles to copy data to&#x2F;from port</td>\n<td>CPU cycles to map memory into address space</td>\n</tr>\n<tr>\n<td>CPU to copy data to channel</td>\n<td></td>\n</tr>\n<tr>\n<td>If channel setup once, use many times (good payoff)</td>\n<td></td>\n</tr>\n<tr>\n<td>Can perform well for 1 time use</td>\n<td></td>\n</tr>\n</tbody></table>\n<ul>\n<li>Large Data: t(Copy) &gt;&gt; t(Map)<ul>\n<li>e.g. tradeoff exercised in Window “Local” Procedure Calls (LPC)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Shared-Memory-and-Synchronization\"><a href=\"#Shared-Memory-and-Synchronization\" class=\"headerlink\" title=\"Shared Memory and Synchronization\"></a>Shared Memory and Synchronization</h2><p>Use threads accessing shared state in a single addressing space, but for process</p>\n<p>Synchronization method:</p>\n<ol>\n<li>mechanism supported by processing threading library (pthreads)</li>\n<li>OS supported IPC for sync</li>\n</ol>\n<p>Either method must coordinate</p>\n<ul>\n<li>no of concurrent access to shared segment</li>\n<li>when data is available and ready for consumption</li>\n</ul>\n<h3 id=\"IPC-Synchronization\"><a href=\"#IPC-Synchronization\" class=\"headerlink\" title=\"IPC Synchronization\"></a>IPC Synchronization</h3><table>\n<thead>\n<tr>\n<th>Message Queues</th>\n<th>Semaphores</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Implement “mutual exclusion” via send&#x2F;receive</td>\n<td>OS supported synchronization construct</td>\n</tr>\n<tr>\n<td>binary construct (either allow process or not)</td>\n<td></td>\n</tr>\n<tr>\n<td>Like mutex, if value &#x3D; 0, stop; if value &#x3D; 1, decrement(lock) and proceed</td>\n<td></td>\n</tr>\n</tbody></table>\n<hr>\n\n\n<h1 id=\"Synchronization\"><a href=\"#Synchronization\" class=\"headerlink\" title=\"Synchronization\"></a>Synchronization</h1><p>Waiting for other processes, so that they can continue working together</p>\n<ul>\n<li>may repeatedly check to continue<ul>\n<li>sync using spinlocks</li>\n</ul>\n</li>\n<li>may wait for a signal to continue<ul>\n<li>sync using mutexes and condition vatiables</li>\n</ul>\n</li>\n<li>waiting hurts performance<ul>\n<li>CPUs wste cycles for checking; cache effects</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Limitation-of-mutextes-and-condition-variables\"><a href=\"#Limitation-of-mutextes-and-condition-variables\" class=\"headerlink\" title=\"Limitation of mutextes and condition variables\"></a>Limitation of mutextes and condition variables</h2><ul>\n<li>Error prone&#x2F;correctness&#x2F;ease of use<ul>\n<li>unlock wrong mutex, signal wrong condition variable</li>\n</ul>\n</li>\n<li>Lack of expressive power<ul>\n<li>helper variables for access or priority control</li>\n</ul>\n</li>\n</ul>\n<p>Low-level support: hardware atmoic instructions</p>\n<h2 id=\"Synchronization-constructs\"><a href=\"#Synchronization-constructs\" class=\"headerlink\" title=\"Synchronization constructs\"></a>Synchronization constructs</h2><ol>\n<li>Spinlocks (basic sync construct)<ul>\n<li>Spinlock is like a mutex <ul>\n<li>mutual exclusion</li>\n<li>lock and unlock(free)</li>\n<li>but, lock &#x3D;&#x3D; busy &#x3D;&gt; spinning</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Semaphores<ul>\n<li>common sync construct in OS kernels</li>\n<li>like a traffic light: Stop and Go</li>\n<li>like mutex, but more general</li>\n</ul>\n</li>\n</ol>\n<p>Semaphore &#x3D;&#x3D; integer value</p>\n<ul>\n<li>on init<ul>\n<li>assigned a max value (positive int) &#x3D;&gt; max count</li>\n</ul>\n</li>\n<li>on try(wait)<ul>\n<li>if non-zero, decrement and proceed &#x3D;&gt; counting semaphore</li>\n</ul>\n</li>\n<li>if initialized with 1<ul>\n<li>semaphore &#x3D;&#x3D; mutex(binary semaphore)</li>\n</ul>\n</li>\n<li>on exit(post)<ul>\n<li>increment</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Syncing-different-types-of-accesses\"><a href=\"#Syncing-different-types-of-accesses\" class=\"headerlink\" title=\"Syncing different types of accesses\"></a>Syncing different types of accesses</h2><h3 id=\"Reader-Writer-locks\"><a href=\"#Reader-Writer-locks\" class=\"headerlink\" title=\"Reader&#x2F;Writer locks\"></a>Reader&#x2F;Writer locks</h3><table>\n<tr>\n<td>read (don't modify)</td>\n<td>write (always modify)</td>\n</tr>\n<tr>\n<td>shared access</td>\n<td>exclusive access</td>\n</tr>\n</table>\n\n<ul>\n<li>RW locks<ul>\n<li>specify type of access, then lock behaves accordingly</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Monitors-highlevel-construct\"><a href=\"#Monitors-highlevel-construct\" class=\"headerlink\" title=\"Monitors (highlevel construct)\"></a>Monitors (highlevel construct)</h3><ul>\n<li>shared resource</li>\n<li>entry resource</li>\n<li>possible condition variables</li>\n</ul>\n<ul>\n<li>On entry:<ul>\n<li>lock, check</li>\n</ul>\n</li>\n<li>On exit:<ul>\n<li>unlock, check, signal</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"More-synchroniaztion-constructs\"><a href=\"#More-synchroniaztion-constructs\" class=\"headerlink\" title=\"More synchroniaztion constructs\"></a>More synchroniaztion constructs</h3><ul>\n<li>serializers</li>\n<li>path expressions</li>\n<li>barriers</li>\n<li>rendezvous points</li>\n<li>optimistic wait-free sync (RCU) [Read Copy Update]</li>\n</ul>\n<p>All need hardware support.</p>\n<h2 id=\"Need-for-hardware-support\"><a href=\"#Need-for-hardware-support\" class=\"headerlink\" title=\"Need for hardware support\"></a>Need for hardware support</h2><ul>\n<li>Problem <ul>\n<li>concurrent check&#x2F;update on different CPUs can overlap</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Atomic-instructions\"><a href=\"#Atomic-instructions\" class=\"headerlink\" title=\"Atomic instructions\"></a>Atomic instructions</h3><p> Critical section with hardware supported synchronization</p>\n<h4 id=\"Hardware-specific\"><a href=\"#Hardware-specific\" class=\"headerlink\" title=\"Hardware specific\"></a>Hardware specific</h4><ul>\n<li><p>test-and-set</p>\n<ul>\n<li>returns(tests) original values and sets new-value!&#x3D; 1 (busy) automatically</li>\n<li>first thread: test-and-set(lock) &#x3D;&gt; 0 : free</li>\n<li>next ones: test-and-set(lock) &#x3D;&gt; 1 busy<ul>\n<li>reset lock to 1, but that’s okay</li>\n</ul>\n</li>\n<li><strong>+</strong> : Latency </li>\n<li><strong>+</strong> : minimal (Atomic)</li>\n<li><strong>+</strong> : Delay potentially min</li>\n<li><strong>-</strong> : Contention processors go to memory on each spin<br> - To reduce contention, introduce delay<br>   - Static(based on a fixed value) or Dynamic(backoff based, random delay)</li>\n</ul>\n</li>\n<li><p>read-and-increment</p>\n</li>\n<li><p>compare-and-swap</p>\n</li>\n</ul>\n<h4 id=\"Guarantees\"><a href=\"#Guarantees\" class=\"headerlink\" title=\"Guarantees\"></a>Guarantees</h4><ul>\n<li>atomicity</li>\n<li>mutual exclusion</li>\n<li>queue all concurrent instructions but one</li>\n</ul>\n<h3 id=\"Shared-Memory-Multiprocessors\"><a href=\"#Shared-Memory-Multiprocessors\" class=\"headerlink\" title=\"Shared Memory Multiprocessors\"></a>Shared Memory Multiprocessors</h3><p>Also called symmetric multiprocessors (SMP)</p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/sharedmmmp.png\" alt=\"sharedmmmp\"></p>\n<ul>\n<li>Caches <ul>\n<li>hide memory latency, “memory” further away due to contention</li>\n<li>no-write, write-through, write-back</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Cache-Coherence\"><a href=\"#Cache-Coherence\" class=\"headerlink\" title=\"Cache Coherence\"></a>Cache Coherence</h3><p><img src=\"https://spcdn.pages.dev/blog/os/cachecoherence.png\" alt=\"cachecoherence\"></p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/cachecoherence2.png\" alt=\"cachecoherence2\"></p>\n<hr>\n\n    \n    \n    \n    \n<pre><code># I/O Management\n</code></pre>\n<p>Operating system</p>\n<ul>\n<li>Has protocols <ul>\n<li>Interfaces for device I&#x2F;O</li>\n</ul>\n</li>\n<li>Has dedicated handlers<ul>\n<li>Device drivers, interrupt handlers</li>\n</ul>\n</li>\n<li>Decouple I&#x2F;O details from core processing<ul>\n<li>abstract I&#x2F;O device detail from applications</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"I-O-Device-Features\"><a href=\"#I-O-Device-Features\" class=\"headerlink\" title=\"I&#x2F;O Device Features\"></a>I&#x2F;O Device Features</h2><ul>\n<li>Control registers (accessed by CPU)<ul>\n<li>Command</li>\n<li>Data Transfers</li>\n<li>Status</li>\n</ul>\n</li>\n<li>Microcontroller : device’s CPU</li>\n<li>On device memory</li>\n<li>Other logic<ul>\n<li>e.g. analog to digital</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Device-drivers\"><a href=\"#Device-drivers\" class=\"headerlink\" title=\"Device drivers\"></a>Device drivers</h2><ul>\n<li>per each device type</li>\n<li>responsible for device access management and control</li>\n<li>provided by device manufacturers per OS &#x2F;version</li>\n<li>each OS standardizes interfaces<ul>\n<li>device independence</li>\n<li>device diversity</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Types-of-devices\"><a href=\"#Types-of-devices\" class=\"headerlink\" title=\"Types of devices\"></a>Types of devices</h2><ul>\n<li>Block<ul>\n<li>e.g. disk</li>\n<li>read&#x2F;write blocks of data</li>\n<li>direct access to arbitrary block</li>\n</ul>\n</li>\n<li>Character<ul>\n<li>e.g. keyboard</li>\n<li>get&#x2F;put character</li>\n</ul>\n</li>\n<li>Network devices</li>\n</ul>\n<p>OS representation of a device : special device file</p>\n<p>UNIX like systems:</p>\n<ul>\n<li>&#x2F;dev</li>\n<li>tmpfs</li>\n<li>devfs</li>\n</ul>\n<p>Linux supports a number of pseudo “virtual” devices that provide special functionality to a system.</p>\n<h2 id=\"CPU-device-interactions\"><a href=\"#CPU-device-interactions\" class=\"headerlink\" title=\"CPU device interactions\"></a>CPU device interactions</h2><p><img src=\"https://spcdn.pages.dev/blog/os/iointeractions.png\" alt=\"iointeractions.png\"></p>\n<p>access device registers : memory load&#x2F;store</p>\n<ol>\n<li>Memory mapped I&#x2F;0<ul>\n<li>part of ‘host’ physical memory dedicated for device interactions</li>\n<li>Base Address Registers (BAR)</li>\n</ul>\n</li>\n<li>I&#x2F;O Port<ul>\n<li>dedicated in low instructions for device access</li>\n<li>target device (I&#x2F;0 port) and value in register</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Path-from-Device-to-CPU\"><a href=\"#Path-from-Device-to-CPU\" class=\"headerlink\" title=\"Path from Device to CPU\"></a>Path from Device to CPU</h2><ol>\n<li>Interrupt<ul>\n<li>Overhead: Interrupt handling steps</li>\n<li>+: Can be generated as soon as possible</li>\n</ul>\n</li>\n<li>Polling<ul>\n<li>Overhead: Delay or CPU overhead</li>\n<li>when convenient for OS</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Device-access-Programmed-I-O-PIO\"><a href=\"#Device-access-Programmed-I-O-PIO\" class=\"headerlink\" title=\"Device access : Programmed I&#x2F;O (PIO)\"></a>Device access : Programmed I&#x2F;O (PIO)</h2><ul>\n<li>No additional hardware support</li>\n<li>CPU “programs” the device<ul>\n<li>via command registers</li>\n<li>data movement</li>\n</ul>\n</li>\n<li>E.g. NIC(Network Interface Card)<ul>\n<li>data &#x3D; network packet</li>\n</ul>\n</li>\n<li>Write command to request packet information</li>\n<li>Copy packet to data registers</li>\n<li>Repeat until packet sent</li>\n</ul>\n<p>E.g. 1500B packet; 8 byte registers or bus &#x3D;&gt; 1(for bus command) + 188(for data) &#x3D; 189 CPU store instructions</p>\n<h2 id=\"Direct-Memory-Access-DMA\"><a href=\"#Direct-Memory-Access-DMA\" class=\"headerlink\" title=\"Direct Memory Access (DMA)\"></a>Direct Memory Access (DMA)</h2><ul>\n<li>Relies on DMA controller</li>\n<li>CPU “programs” the device<ul>\n<li>via command registers</li>\n<li>via DMA controls</li>\n</ul>\n</li>\n<li>E.g. NIC (data &#x3D; network packet)</li>\n<li>Write command to request packet information</li>\n<li>Configure DMA controller with in memory address and size of packet buffer</li>\n</ul>\n<p>E.g. 1500B packet; 8 byte registers or bus &#x3D;&gt; 1(for bus command) + 1(for DMA configuration) &#x3D; total 2 CPU store instructions. Less steps, but DMA configuration is more complex.</p>\n<p>For DMAs</p>\n<ul>\n<li>data buffer must be in physical memory until transfer completes</li>\n<li>pinning regions (non-swappable)</li>\n</ul>\n<h2 id=\"Typical-Device-Access\"><a href=\"#Typical-Device-Access\" class=\"headerlink\" title=\"Typical Device Access\"></a>Typical Device Access</h2><p><img src=\"https://spcdn.pages.dev/blog/os/typicaldeviceaccess.png\" alt=\"typicaldeviceaccess.png\"></p>\n<ul>\n<li>System call</li>\n<li>In-kernel stack</li>\n<li>Driver Invocation</li>\n<li>Device request configuration</li>\n<li>Device performs request</li>\n</ul>\n<h3 id=\"OS-bypass\"><a href=\"#OS-bypass\" class=\"headerlink\" title=\"OS bypass\"></a>OS bypass</h3><p><img src=\"https://spcdn.pages.dev/blog/os/osbypass.png\" alt=\"osbypass.png\"></p>\n<ul>\n<li>device registers&#x2F;data<ul>\n<li>directly available</li>\n</ul>\n</li>\n<li>OS configures<ul>\n<li>then gets out of the way</li>\n</ul>\n</li>\n<li>“user level driver”<ul>\n<li>in library</li>\n</ul>\n</li>\n<li>OS retains coarse-grain control</li>\n<li>relies on device features<ul>\n<li>sufficient registers</li>\n<li>demux capability</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"What-happens-to-a-calling-thread\"><a href=\"#What-happens-to-a-calling-thread\" class=\"headerlink\" title=\"What happens to a calling thread?\"></a>What happens to a calling thread?</h2><p><img src=\"https://spcdn.pages.dev/blog/os/access.png\" alt=\"access.png\"></p>\n<ul>\n<li>Synchronous I&#x2F;O operations<ul>\n<li>process blocks</li>\n</ul>\n</li>\n<li>Asynchronous I&#x2F;O operations<ul>\n<li>process continues</li>\n<li>Later, process checks and retrieves result</li>\n<li>OR</li>\n<li>process is notified that operation is completed and results are ready</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Block-Device-Stack\"><a href=\"#Block-Device-Stack\" class=\"headerlink\" title=\"Block Device Stack\"></a>Block Device Stack</h2><p>Block device typical storage for files:</p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/blockdevicestack.png\" alt=\"blockdevicestack.png\"></p>\n<ul>\n<li>processes use files &#x3D;&gt; logical storage unit</li>\n<li>kernel file system (KFS)<ul>\n<li>where how to find and access file</li>\n<li>OS specifies interface</li>\n</ul>\n</li>\n<li>generic block layer<ul>\n<li>OS standardized block interface</li>\n</ul>\n</li>\n<li>Device driver</li>\n</ul>\n<h2 id=\"Virtual-File-System\"><a href=\"#Virtual-File-System\" class=\"headerlink\" title=\"Virtual File System\"></a>Virtual File System</h2><p><img src=\"https://spcdn.pages.dev/blog/os/vfs.png\" alt=\"vfs.png\"></p>\n<h3 id=\"Virtual-File-System-Abstractions\"><a href=\"#Virtual-File-System-Abstractions\" class=\"headerlink\" title=\"Virtual File System Abstractions\"></a>Virtual File System Abstractions</h3><ul>\n<li>File : Elements on which the VFS operates</li>\n<li>File Descriptor : OS representation of file<ul>\n<li>open, read, write, send file , lock, close</li>\n</ul>\n</li>\n<li>inode : Persistent representation of file “index”<ul>\n<li>list of all data blocks</li>\n<li>device, permissions, size</li>\n</ul>\n</li>\n<li>dentry : Directory entry, corresponding to the single path component, <ul>\n<li>dentry cache</li>\n</ul>\n</li>\n<li>super block : file system specific information regarding the File System layout</li>\n</ul>\n<h3 id=\"VFS-on-disk\"><a href=\"#VFS-on-disk\" class=\"headerlink\" title=\"VFS on disk\"></a>VFS on disk</h3><ul>\n<li>File : data blocks on disk</li>\n<li>inode : track file blocks<ul>\n<li>also resides on disk in some block</li>\n</ul>\n</li>\n<li>super block : overall map of disk blocks<ul>\n<li>inode blocks</li>\n<li>data blocks</li>\n<li>free blocks</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Inodes\"><a href=\"#Inodes\" class=\"headerlink\" title=\"Inodes\"></a>Inodes</h3><p>Index of all disk blocks corresponding to a file</p>\n<ul>\n<li>File : identified by inode</li>\n<li>inode : list of all blocks + other metadata</li>\n</ul>\n<p><strong>+</strong>: Easy to perform sequential or random access<br><br><strong>-</strong>: Limit on file size</p>\n<h3 id=\"Inodes-with-indirect-pointers\"><a href=\"#Inodes-with-indirect-pointers\" class=\"headerlink\" title=\"Inodes with indirect pointers\"></a>Inodes with indirect pointers</h3><ul>\n<li>Index of all disk blocks corresponding to a file</li>\n<li>Index contain:<ul>\n<li>metadata</li>\n<li>pointers to blocks</li>\n</ul>\n</li>\n<li>Direct pointer : Points to data block<ul>\n<li>1 KB per entry</li>\n</ul>\n</li>\n<li>Indirect pointer : Points to block of pointers<ul>\n<li>256 KB per entry</li>\n</ul>\n</li>\n<li>Double Indirect pointer : Points to block of block of pointers<ul>\n<li>64 MB per entry</li>\n</ul>\n</li>\n</ul>\n<p><strong>+</strong>: Small inode &#x3D;&gt; large file size<br><br><strong>-</strong>: File access slowdown</p>\n<h2 id=\"Disk-access-optimizations\"><a href=\"#Disk-access-optimizations\" class=\"headerlink\" title=\"Disk access optimizations\"></a>Disk access optimizations</h2><p>Reducing file access overheads</p>\n<ol>\n<li>Caching&#x2F;buffering : reducenumber of disk accesses<ul>\n<li>buffer cache in main menu</li>\n<li>read&#x2F;write from cache</li>\n<li>periodically flush to disk - fsync()</li>\n</ul>\n</li>\n<li>I&#x2F;O scheduling : reduce disk head movement<ul>\n<li>maximize sequential vs random access</li>\n</ul>\n</li>\n<li>Prefetching : increases cache hits<ul>\n<li>leverages locality</li>\n</ul>\n</li>\n<li>Journaling&#x2F;logging: reduce random access (ext3, ext4)<ul>\n<li>“describe” write in log : block, offset, value..</li>\n<li>periodically apply updates to proper disk locations</li>\n</ul>\n</li>\n</ol>\n<hr>    \n \n    \n<pre><code># Virtualization\n</code></pre>\n<p>Virtualization allows concurrent execution of multiple OSs and their applications on the same physical machine.</p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/virtualization.png\" alt=\"virtualization.png\"></p>\n<ul>\n<li>Virtual resources : each OS thinks that ot “owns” hardware resources</li>\n<li>Virtual machine (VM) : OS + applications + virtual resources (guest domain)</li>\n<li>Virtualization layer : management of physical hardware (virtual machine monitor, hypervisor)</li>\n</ul>\n<h2 id=\"Defining-Virtual-Machine\"><a href=\"#Defining-Virtual-Machine\" class=\"headerlink\" title=\"Defining Virtual Machine\"></a>Defining Virtual Machine</h2><p>A Virtual Machine is an efficient, isolated duplicate of the real machine.</p>\n<ul>\n<li>Supported by a Virtual Machine Monitor (VMM):<ol>\n<li>provides environment essentially identical with the original machine</li>\n<li>programs show only minor decrease in speed at worst</li>\n<li>VMM is in complete control of the system resources</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"VMM-goals\"><a href=\"#VMM-goals\" class=\"headerlink\" title=\"VMM goals\"></a>VMM goals</h2><ul>\n<li>Fidelity</li>\n<li>Performance</li>\n<li>Safety and Isolation</li>\n</ul>\n<h2 id=\"Virtualization-advantages\"><a href=\"#Virtualization-advantages\" class=\"headerlink\" title=\"Virtualization advantages\"></a>Virtualization advantages</h2><ul>\n<li>consolidation<ul>\n<li>decrease cost, improve manageability</li>\n</ul>\n</li>\n<li>migration<ul>\n<li>availibility, reliability</li>\n</ul>\n</li>\n<li>security, debugging, support for legacy OS</li>\n</ul>\n<h2 id=\"Two-main-Virtualization-Models\"><a href=\"#Two-main-Virtualization-Models\" class=\"headerlink\" title=\"Two main Virtualization Models:\"></a>Two main Virtualization Models:</h2><h3 id=\"1-Bare-metal-or-Hypervisor-based-Type-1\"><a href=\"#1-Bare-metal-or-Hypervisor-based-Type-1\" class=\"headerlink\" title=\"1. Bare-metal or Hypervisor based (Type 1)\"></a>1. Bare-metal or Hypervisor based (Type 1)</h3><p><img src=\"https://spcdn.pages.dev/blog/os/hypervisor.png\" alt=\"hypervisor.png\"></p>\n<ul>\n<li>VMM (hypervisor) manages all hardware resources abd supports execution of VMs</li>\n<li>privileged, secure VM to deal with devices (and other configuration and management tasks)</li>\n<li>Adopted by Xen(Opensource or Citriol Xen Server) and ESX (VMware)</li>\n</ul>\n<h3 id=\"1-Hosted-Type-2\"><a href=\"#1-Hosted-Type-2\" class=\"headerlink\" title=\"1. Hosted (Type 2)\"></a>1. Hosted (Type 2)</h3><p><img src=\"https://spcdn.pages.dev/blog/os/hosted.png\" alt=\"hosted.png\"></p>\n<ul>\n<li>Host owns all hardware</li>\n<li>Special VMM modle provides hardware interfaces to VMs and deals with VM context switching</li>\n</ul>\n<h2 id=\"Virtualization-requirements\"><a href=\"#Virtualization-requirements\" class=\"headerlink\" title=\"Virtualization requirements\"></a>Virtualization requirements</h2><ul>\n<li>Present virtual platform interface to VMs<ul>\n<li>virtualize CPU, memory, devices</li>\n</ul>\n</li>\n<li>Provide isolation across VMs<ul>\n<li>preemption, MMU for address translation and validation</li>\n</ul>\n</li>\n<li>Protect guest OS from applications<ul>\n<li>can’t run guest OS and applications at same protection level</li>\n</ul>\n</li>\n<li>Protect VMs from guest OS<ul>\n<li>can’t run guest OS and VMMs at same protection level</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Hardware-protection-levels\"><a href=\"#Hardware-protection-levels\" class=\"headerlink\" title=\"Hardware protection levels\"></a>Hardware protection levels</h2><p>Commodity hardware has more than two protection levels</p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/hwprotectionlevels.png\" alt=\"hwprotectionlevels\"></p>\n<ul>\n<li>x86 has 4 protection levels (rings)<ul>\n<li>ring 3 : lowest privilege (applications)</li>\n<li>ring 1 : OS</li>\n<li>ring 0 : highest privilege (hypervisor)</li>\n</ul>\n</li>\n<li>and 2 protection modes<ul>\n<li>non root : VMs <ul>\n<li>ring 3 : apps</li>\n<li>ring 0 : OS</li>\n</ul>\n</li>\n<li>root : <ul>\n<li>ring 0 : hypervisor</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Process-Virtualization-Trap-and-Emulate\"><a href=\"#Process-Virtualization-Trap-and-Emulate\" class=\"headerlink\" title=\"Process Virtualization (Trap-and-Emulate)\"></a>Process Virtualization (Trap-and-Emulate)</h2><ul>\n<li>Guest instruments<ul>\n<li>executed directly by hardware</li>\n<li>for non-privileged operations : hardware speeds &#x3D;&gt; efficiency</li>\n<li>for privileged operations : trap to hypervisor</li>\n</ul>\n</li>\n<li>Hypervisor determines what needs to be done:<ul>\n<li>if illegal operation : terminate VM</li>\n<li>if legal operation : emulate the behaviour the guest OS was expecting from the hardware</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Problems-with-Trap-and-Emulate\"><a href=\"#Problems-with-Trap-and-Emulate\" class=\"headerlink\" title=\"Problems with Trap-and-Emulate\"></a>Problems with Trap-and-Emulate</h2><ul>\n<li>17 privileged information do not trao but fail silently</li>\n<li>Hypervisor doesn’t know, so it doesn’t try to change settings</li>\n<li>OS doesn’t know, so assumes change was successful</li>\n</ul>\n<h2 id=\"Binary-Translation\"><a href=\"#Binary-Translation\" class=\"headerlink\" title=\"Binary Translation\"></a>Binary Translation</h2><p><strong>Goal</strong> : Full Virtualization i.e. guest OS is not modified</p>\n<p><strong>Approach</strong> : Dynamic Binary Translation</p>\n<ol>\n<li>Inspect code blocks to be executed</li>\n<li>If needed, translate to alternate instruction sequence<ul>\n<li>e.g. to emulate desired behaviour, possibly avoid traps</li>\n</ul>\n</li>\n<li>Otherwise run at hardware speeds<ul>\n<li>cache translated blocks to ammortize translation costs</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Paravirtualization\"><a href=\"#Paravirtualization\" class=\"headerlink\" title=\"Paravirtualization\"></a>Paravirtualization</h2><p><strong>Goal</strong> : Performance; give up on modified guest OSs</p>\n<p><strong>Approach</strong> : Paravirtualization : modify guest OSs so that </p>\n<ul>\n<li>it knows it is running virtualized</li>\n<li>it makes explicit calls to hyperisor (hypercalls)</li>\n<li>hypercalls (~ system calls)<ul>\n<li>package context information</li>\n<li>specify desired hypercall</li>\n<li>trap to VMM</li>\n</ul>\n</li>\n<li>Xen : opensource hypervisor</li>\n</ul>\n<h2 id=\"Memory-virtualization\"><a href=\"#Memory-virtualization\" class=\"headerlink\" title=\"Memory virtualization\"></a>Memory virtualization</h2><ul>\n<li>Full virtualization<ul>\n<li>all guests expect contiguous physical memory starting at 0</li>\n<li>virtual vs physical vs machine addresses and page frame numbers</li>\n<li>still leverages hardware (MMU, TLB..)</li>\n</ul>\n</li>\n<li>Option 1<ul>\n<li>guest page table : VA &#x3D;&gt; PA</li>\n<li>hypervisor : PA &#x3D;&gt; MA</li>\n<li>too expensive!</li>\n</ul>\n</li>\n<li>Option 2<ul>\n<li>guest page tables : VA &#x3D;&gt; PA</li>\n<li>hypervisor shadow PT : VA &#x3D;&gt; MA</li>\n<li>hypervisor maintains consistence<ul>\n<li>e.g. invalidate on context switch, write protect guest PT to track new mappings</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Paravirtualized <ul>\n<li>guest aware of virtualization</li>\n<li>no longer strict requirement on contiguous physical memory starting at 0</li>\n<li>explicitly registers page tables with hypervisor</li>\n<li>can “batch” page tables updates to reduce VM exits</li>\n<li>other optimazations</li>\n</ul>\n</li>\n</ul>\n<p>Overheads eliminated or reduced on newer platforms</p>\n<h2 id=\"Device-Virtualization\"><a href=\"#Device-Virtualization\" class=\"headerlink\" title=\"Device Virtualization\"></a>Device Virtualization</h2><ul>\n<li>For CPUs and Memory<ul>\n<li>less diversity, Intruction-Set-Architecture(ISA) level</li>\n<li>Standardization of interface</li>\n</ul>\n</li>\n<li>For Devices<ul>\n<li>high diversity</li>\n<li>lack of standard specification of device interface and behaviour</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-key-models-for-Device-Virtualization\"><a href=\"#3-key-models-for-Device-Virtualization\" class=\"headerlink\" title=\"3 key models for Device Virtualization:\"></a>3 key models for Device Virtualization:</h4><h3 id=\"1-Pass-through-model\"><a href=\"#1-Pass-through-model\" class=\"headerlink\" title=\"1. Pass through model\"></a>1. Pass through model</h3><p>Approach: VMM-level-driver configures device access permissions</p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/passthrough.png\" alt=\"passthrough.png\"></p>\n<p><strong>Advantages</strong><br></p>\n<ul>\n<li>VM provided with exclusive and direct (VMM bypass) access to the device</li>\n</ul>\n<p><strong>Disadvantages</strong><br></p>\n<ul>\n<li>Device sharing difficult</li>\n<li>VMM must have exact type of device as what VM expects</li>\n<li>VM migration tricky</li>\n</ul>\n<h3 id=\"2-Hypervisor-Direct-model\"><a href=\"#2-Hypervisor-Direct-model\" class=\"headerlink\" title=\"2. Hypervisor - Direct model\"></a>2. Hypervisor - Direct model</h3><p>Approach: </p>\n<ul>\n<li>VMM interrupts all device accesses</li>\n<li>Emulate device operations<ul>\n<li>translate to generic I&#x2F;O operations</li>\n<li>traverse VMM-resident I&#x2F;O stack</li>\n<li>invoke VMM-resident driver</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/hypervisordirect.png\" alt=\"hypervisordirect.png\">    </p>\n<p><strong>Advantages</strong><br></p>\n<ul>\n<li>VM decoupled from physical device</li>\n<li>Sharing, migration, dealing with device specifics</li>\n</ul>\n<p><strong>Disadvantages</strong><br></p>\n<ul>\n<li>Latency of device operations</li>\n<li>Device driver ecosystem complexities in Hypervisor</li>\n</ul>\n<h3 id=\"3-Split-Device-Driver-model\"><a href=\"#3-Split-Device-Driver-model\" class=\"headerlink\" title=\"3. Split Device-Driver model\"></a>3. Split Device-Driver model</h3><p>Approach: </p>\n<ul>\n<li>Device access control split between</li>\n<li>Emulate device operations<ul>\n<li>front-end driver in guest VM (device API)</li>\n<li>back-end driver in service VM (or Host)</li>\n<li>modified guest drivers<ul>\n<li>i.e. limited to paravirtualized guests</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/splitdevicedriver.png\" alt=\"splitdevicedriver.png\">          </p>\n<p><strong>Advantages</strong><br></p>\n<ul>\n<li>Eliminate emulation overhead</li>\n<li>Allow for better management of shared devices</li>\n</ul>\n<hr>\n\n\n\n<h1 id=\"Remote-Procedure-Calls\"><a href=\"#Remote-Procedure-Calls\" class=\"headerlink\" title=\"Remote Procedure Calls\"></a>Remote Procedure Calls</h1><p>Example : GetFile App</p>\n<ul>\n<li>Client Server</li>\n<li>Create and init sockets</li>\n<li>Allocate and populate buffers</li>\n<li>Include ‘protocol’ info<ul>\n<li>GetFile, size</li>\n</ul>\n</li>\n<li>Copy data into buffers<ul>\n<li>filename, file</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>common steps related to remote IPC</li>\n</ul>\n<h4 id=\"Remote-Procedure-Calls-RPC\"><a href=\"#Remote-Procedure-Calls-RPC\" class=\"headerlink\" title=\"Remote Procedure Calls (RPC)\"></a>Remote Procedure Calls (RPC)</h4><ul>\n<li>Intended to simplify the development of cross address space and cross machine interactions</li>\n</ul>\n<p><strong>+</strong> Higher-level interface for data movement and communication<br><br><strong>+</strong> Error handling<br><br><strong>+</strong> Hiding complexities of cross machine interactions</p>\n<h2 id=\"RPC-requirements\"><a href=\"#RPC-requirements\" class=\"headerlink\" title=\"RPC requirements\"></a>RPC requirements</h2><p><img src=\"https://spcdn.pages.dev/blog/os/rpcrequirements.png\" alt=\"rpcrequirements\"></p>\n<ol>\n<li>Client&#x2F;Server interactions</li>\n<li>Procedure Call Interface &#x3D;&gt; RPC<ul>\n<li>sync call semantics</li>\n</ul>\n</li>\n<li>Type checking <ul>\n<li>error handling </li>\n<li>packet bytes interpretation</li>\n</ul>\n</li>\n<li>Cross machine conversion<ul>\n<li>e.g. big&#x2F;little endian</li>\n</ul>\n</li>\n<li>Higher level protocol<ul>\n<li>access control, fault tolerance, different transport protocols</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Structure-of-RPC\"><a href=\"#Structure-of-RPC\" class=\"headerlink\" title=\"Structure of RPC\"></a>Structure of RPC</h2><p><img src=\"https://spcdn.pages.dev/blog/os/rpcstructure.png\" alt=\"rpcstructure\"></p>\n<h2 id=\"RPC-Steps\"><a href=\"#RPC-Steps\" class=\"headerlink\" title=\"RPC Steps:\"></a>RPC Steps:</h2><p>(-1.) register : server registers procedure, arg types, location<br><br>(0.) bind : client finds and binds to desired server</p>\n<ol>\n<li>call : client make RPC call; control passed to stub, client code blocks</li>\n<li>marshal : client stub “marshals” args (serialize args into buffer)</li>\n<li>send : client sends message to server</li>\n<li>receive : server receives message; passes message to server stub; access control</li>\n<li>unmarshal : server stub “unmarshals” args (extract args from buffer)</li>\n<li>actual call : server stub calls local procedure implementation</li>\n<li>result : server performs operation and computes result of RPC operation</li>\n</ol>\n<p>(same on return &lt;&#x3D;)</p>\n<h2 id=\"Interface-definition-Language-IDL\"><a href=\"#Interface-definition-Language-IDL\" class=\"headerlink\" title=\"Interface definition Language (IDL)\"></a>Interface definition Language (IDL)</h2><ul>\n<li>Used to describe the interface the server expects<ul>\n<li>procedure name, args, 2 result types</li>\n<li>version number</li>\n</ul>\n</li>\n</ul>\n<p>RPC can use IDL that is </p>\n<ol>\n<li>Language agnostic<ul>\n<li>XDR in SunRPC</li>\n</ul>\n</li>\n<li>Language specific<ul>\n<li>Java in JavaRMI</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Marshalling\"><a href=\"#Marshalling\" class=\"headerlink\" title=\"Marshalling\"></a>Marshalling</h2><p><img src=\"https://spcdn.pages.dev/blog/os/marshalling.png\" alt=\"Marshalling\"></p>\n<h2 id=\"Unmarshalling\"><a href=\"#Unmarshalling\" class=\"headerlink\" title=\"Unmarshalling\"></a>Unmarshalling</h2><p><img src=\"https://spcdn.pages.dev/blog/os/unmarshalling.png\" alt=\"Unmarshalling\"></p>\n<p>Marshalling&#x2F;Unmarshalling routines are provided by RPC system compiler.</p>\n<h2 id=\"Binding-and-Registry\"><a href=\"#Binding-and-Registry\" class=\"headerlink\" title=\"Binding and Registry\"></a>Binding and Registry</h2><ul>\n<li>Client determines<ul>\n<li><strong>which</strong> server to connect to?<ul>\n<li>service name. version number</li>\n</ul>\n</li>\n<li><strong>how</strong> to connect to that server?<ul>\n<li>IP address, network protocol</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Registry : database of available services<ul>\n<li>search for service name to find server(which) and contact details(how)</li>\n<li>distributed <ul>\n<li>any RPC service can register</li>\n</ul>\n</li>\n<li>machine-specific<ul>\n<li>for services running on same machine</li>\n<li>clients must know machine addresses</li>\n<li>registry provides port number needed for connection</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Who can provide a service?<ul>\n<li>lookup registry for image processing</li>\n</ul>\n</li>\n<li>What services do they provide?<ul>\n<li>compress&#x2F;filter.. version number &#x3D;&gt; IDL</li>\n</ul>\n</li>\n<li>How will they ship package?     <ul>\n<li>TCP &#x2F; UDP -&gt; registry</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Pointers\"><a href=\"#Pointers\" class=\"headerlink\" title=\"Pointers\"></a>Pointers</h2><ul>\n<li>Procedure interface : foo(int,int)</li>\n<li>in Local Calls : foo(x,y) &#x3D;&gt; okay</li>\n<li>in Remote Calls : foo(x,y) &#x3D;&gt; ?</li>\n</ul>\n<p>here, y points to location in caller address space </p>\n<ul>\n<li>Solutions:<ul>\n<li>No pointers</li>\n<li>Serialize pointers; copy referenced (“points to”) data structure to send buffer</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Handling-Partial-Failures\"><a href=\"#Handling-Partial-Failures\" class=\"headerlink\" title=\"Handling Partial Failures\"></a>Handling Partial Failures</h2><ul>\n<li>Special RPC error notification (signal, exception..)<ul>\n<li>Catch all possible ways in which RPC can (partially) fail</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"RPC-Design-choice\"><a href=\"#RPC-Design-choice\" class=\"headerlink\" title=\"RPC Design choice\"></a>RPC Design choice</h2><ul>\n<li>Binding &#x3D;&gt; How to find the server</li>\n<li>IDL &#x3D;&gt; How to talk to server; how to package data</li>\n<li>Pointers as args &#x3D;&gt; Disallow or serialize pointer data</li>\n<li>Partial failures &#x3D;&gt; Special error notifications</li>\n</ul>\n<hr>\n\n\n\n<h1 id=\"Distributed-File-Systems\"><a href=\"#Distributed-File-Systems\" class=\"headerlink\" title=\"Distributed File Systems\"></a>Distributed File Systems</h1><ul>\n<li>Accessed via well defined interface<ul>\n<li>access via Virtual File Systems</li>\n</ul>\n</li>\n<li>Focus on consistent state<ul>\n<li>tracking state, file update, cache coherence</li>\n</ul>\n</li>\n<li>Mixed distribution models possible <ul>\n<li>replicates vs partitioned, peer-like systems</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DFS-models\"><a href=\"#DFS-models\" class=\"headerlink\" title=\"DFS models\"></a>DFS models</h2><ul>\n<li>Client Server on different machines</li>\n<li>File server distributed on multiple machines <ul>\n<li>replicated (each server : all files)</li>\n<li>partitioned (each server : parts of files)</li>\n<li>both (files partitioned, each partition replicates)</li>\n</ul>\n</li>\n<li>Files stored on and served from all machines (peers)<ul>\n<li>blurred distinction between clients and servers</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Remote-File-Service-Extremes\"><a href=\"#Remote-File-Service-Extremes\" class=\"headerlink\" title=\"Remote File Service : Extremes\"></a>Remote File Service : Extremes</h2><p><img src=\"https://spcdn.pages.dev/blog/os/extremes.png\" alt=\"extremes\"></p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/extremes2.png\" alt=\"extremes2\"></p>\n<ol>\n<li>Extreme1 : Upload&#x2F;Download<ul>\n<li>like FTP, SVN </li>\n<li><strong>+</strong> local read&#x2F;writes at client</li>\n<li><strong>-</strong> entire file download&#x2F;upload evn for small accesses</li>\n<li><strong>-</strong> server gives up contro;</li>\n</ul>\n</li>\n<li>Extreme2 : True Remote File Access<ul>\n<li>Every access to remote file, nothing done locally</li>\n<li><strong>+</strong> file access centralized, easy to reason about consistency</li>\n<li><strong>-</strong> every file operation pays network cost, limits server scalablity</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Remote-File-Service-A-compromise\"><a href=\"#Remote-File-Service-A-compromise\" class=\"headerlink\" title=\"Remote File Service : A compromise\"></a>Remote File Service : A compromise</h2><p>A more practical Remote File access (with Caching)</p>\n<ol>\n<li>Allow clients to store parts of files locally (blocks)<ul>\n<li><strong>+</strong> low latency on file operations</li>\n<li><strong>+</strong> server load reduces &#x3D;&gt; more scalable</li>\n</ul>\n</li>\n<li>Force clients to interact with server (frequently)   <ul>\n<li><strong>+</strong> server has insights into what clients are doing</li>\n<li><strong>+</strong> server has control into which accesses can be permitted &#x3D;&gt; easier to maintain consistency</li>\n<li><strong>-</strong> server more complex, requires different file sharing semantics</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Stateless-vs-Stateful-File-server\"><a href=\"#Stateless-vs-Stateful-File-server\" class=\"headerlink\" title=\"Stateless vs Stateful File server\"></a>Stateless vs Stateful File server</h2><table>\n<thead>\n<tr>\n<th>Stateless</th>\n<th>Stateful</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Keeps no state; Okay with extreme models, but can’t support ‘practical’ model</td>\n<td>Keeps client state needed for ‘practical’ model to track what is cached&#x2F;accessed</td>\n</tr>\n<tr>\n<td><strong>-</strong> Can’t support caching and consistency management</td>\n<td><strong>+</strong> Can support locking, caching, incremental operations</td>\n</tr>\n<tr>\n<td><strong>-</strong> Every request self-contained. &#x3D;&gt; more bits transferred</td>\n<td><strong>-</strong> Overheads to maintain state and consistency. Depends on caching mechanism and consistency protocol.</td>\n</tr>\n<tr>\n<td><strong>+</strong> No resources are used on server side (CPU, MM). On failure just restart</td>\n<td><strong>-</strong> On failure, need checkpoining and recovery mechanisms</td>\n</tr>\n</tbody></table>\n<h2 id=\"Caching-state-in-a-DFS\"><a href=\"#Caching-state-in-a-DFS\" class=\"headerlink\" title=\"Caching state in a DFS\"></a>Caching state in a DFS</h2><ul>\n<li>Locally clients maintain portion of state (e.g. file blocks)</li>\n<li>Locally clients perform operations on cached state (e.g. open&#x2F;read&#x2F;write)</li>\n<li>requires coherent mechanisms</li>\n</ul>\n<p><img src=\"https://spcdn.pages.dev/blog/os/cachingstate.png\" alt=\"cachingstate.png\"></p>\n<table>\n<thead>\n<tr>\n<th>System</th>\n<th>How</th>\n<th>When</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>SMP</td>\n<td>Write-update&#x2F;Write-invalidate</td>\n<td>On write</td>\n</tr>\n<tr>\n<td>DFS</td>\n<td>Client&#x2F;Server-driven</td>\n<td>On demand, periodically, on open..</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>Files or File blocks can be (with 1 server and multiple clients) cached in:</p>\n<ul>\n<li>in client memory</li>\n<li>on client  storage device (HDD&#x2F;SDD)</li>\n<li>in buffer cache in memory on server<ul>\n<li>(usefulness will depend on client load, request interleaving)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>File Sharing Semantics in DFS</p>\n</li>\n<li><p>Session semantics (between open-close &#x3D;&gt; Session)</p>\n<ul>\n<li>write-back on close(), update on open()</li>\n<li>easy to reason, but may be insufficient</li>\n</ul>\n</li>\n<li><p>Periodic updates</p>\n<ul>\n<li>client writes-back periodically<ul>\n<li>clients have a “lease” on cached data (not exclusively necessary)</li>\n</ul>\n</li>\n<li>servers invalidates periodically &#x3D;&gt; provides biunds on “inconsistency”</li>\n<li>augment with flush()&#x2F;sync() API</li>\n</ul>\n</li>\n<li><p>Immutable files &#x3D;&gt; never modify, new files created</p>\n</li>\n<li><p>Transactions &#x3D;&gt; all changes atomic</p>\n</li>\n</ul>\n<h1 id=\"Replication-vs-Partitioning\"><a href=\"#Replication-vs-Partitioning\" class=\"headerlink\" title=\"Replication vs Partitioning\"></a>Replication vs Partitioning</h1><table>\n<tr>\n<th></th>\n<th>Replication</th>\n<th>Partitioning</th>\n</tr>\n<tr>\n<td></td>\n<td>Each machine holds all files</td>\n<td>Each machine has subset of files</td>\n</tr>\n<tr>\n<td>Advantages</td>\n<td>Load balancing, availibility, fault tolerance </td>\n<td>Availibility vs single server DFS;<br>Scalability with file system size;<br>single file writes simpler</td>\n</tr>\n<tr>\n<td>Disadvantages</td>\n<td>Write becomes more complex<br>- Synchronous to all<br>- or, write to one, then propagate to others<br>replicas must be reconciled e.g. Voting</td>\n<td>On failure, lose portion of data<br>load balancing harder, if not balanced, then hot-spots possible</td>\n</tr>\n</table>\n\n<ul>\n<li>Can combine both techniques<ul>\n<li>Replicate each partition!</li>\n</ul>\n</li>\n</ul>\n<hr>\n\n\n\n<h1 id=\"Distributed-Shared-Memory\"><a href=\"#Distributed-Shared-Memory\" class=\"headerlink\" title=\"Distributed Shared Memory\"></a>Distributed Shared Memory</h1><ul>\n<li>Must decide placement<ul>\n<li>place memory (pages) close to relevant processes</li>\n</ul>\n</li>\n<li>Must decide migration<ul>\n<li>when to copy memory (pages) from remote to local</li>\n</ul>\n</li>\n<li>Must decide sharing rules<ul>\n<li>ensure memory generations are properly ordered</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"“Peer”-Distribution-Applications\"><a href=\"#“Peer”-Distribution-Applications\" class=\"headerlink\" title=\"“Peer” Distribution Applications\"></a>“Peer” Distribution Applications</h2><ul>\n<li>Each node <ul>\n<li>“owns” state</li>\n<li>provide service</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>all nodes are “peers”.</li>\n</ul>\n<p>Examples: Big-data analytics, web searches, context sharing or distributed shared memory (DSM)</p>\n<h2 id=\"Distributed-Shared-Memory-DSM\"><a href=\"#Distributed-Shared-Memory-DSM\" class=\"headerlink\" title=\"Distributed Shared Memory (DSM)\"></a>Distributed Shared Memory (DSM)</h2><p>DSM is a service that manages memory accross multiple nodes so that applications that are running on top will have an illusion that they are running on a shared memory.</p>\n<ul>\n<li>Each node <ul>\n<li>“owns” state &#x3D;&gt; memory</li>\n<li>provide service<ul>\n<li>memory read&#x2F;writes from any nodes</li>\n<li>consistency protocols</li>\n</ul>\n</li>\n<li>permits scaling beyond single machine memory limits<ul>\n<li>more “shared” memory at lower cost </li>\n<li>slower overall memory access</li>\n<li>commodity interconnect technologies support this RDMA(Remote Direct Memory Access)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Hardware-vs-Software-DSM\"><a href=\"#Hardware-vs-Software-DSM\" class=\"headerlink\" title=\"Hardware vs Software DSM\"></a>Hardware vs Software DSM</h2><ul>\n<li>Hardware-supported (expensive!)<ul>\n<li>relies on interconnect</li>\n<li>OS manages larger physical memory </li>\n<li>NIC(Network Interface Cards) translate remote memory accesses to messages</li>\n<li>NICs involved in all aspects of memory management; support atomics..</li>\n</ul>\n</li>\n<li>Software supported<ul>\n<li>everything done by software</li>\n<li>OS,or language runtime</li>\n</ul>\n</li>\n<li>Hybrid (Software tasks in Hardware) DSM implementations<ul>\n<li>prefetch pages</li>\n<li>address translation (easier done in hardware)</li>\n<li>triggering invalidations (easier done in hardware)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DSM-Design-Sharing-Granularity\"><a href=\"#DSM-Design-Sharing-Granularity\" class=\"headerlink\" title=\"DSM Design : Sharing Granularity\"></a>DSM Design : Sharing Granularity</h2><ul>\n<li>cache line granularity?<ul>\n<li>overheads too high for DSM</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>variable granularity [N]</li>\n<li>page granularity [Y] (OS level)</li>\n<li>object granularity [Y] (Language runtime)<ul>\n<li>beware of false sharing E.g. x and y shared on same page</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"What-types-of-applications-use-DSM\"><a href=\"#What-types-of-applications-use-DSM\" class=\"headerlink\" title=\"What types of applications use DSM?\"></a>What types of applications use DSM?</h2><p>Application access algorithm</p>\n<ul>\n<li>Single reader&#x2F; single writer (SRSW)</li>\n<li>Multiple readers&#x2F; single writer (MRSW)</li>\n<li>Multiple reader&#x2F; Multiple writers (MRMW)</li>\n</ul>\n<h2 id=\"Performance-considerations\"><a href=\"#Performance-considerations\" class=\"headerlink\" title=\"Performance considerations\"></a>Performance considerations</h2><ul>\n<li>DSM performance metric &#x3D;&#x3D; access latency</li>\n<li>Achieving low latency through <ul>\n<li>Migration<ul>\n<li>makes sense for SRSW</li>\n<li>requires data movement</li>\n</ul>\n</li>\n<li>Replication (caching)        <ul>\n<li>more general </li>\n<li>requires consistency management</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Hence, migration is okay for SRSW but not for all. </li>\n<li>Caching and Replication        <ul>\n<li>Copies of data to incerease data access</li>\n<li>for many concurrent writes, overheads too high but stil generally better than Migration</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Consistency-Management\"><a href=\"#Consistency-Management\" class=\"headerlink\" title=\"Consistency Management\"></a>Consistency Management</h2><ul>\n<li>In SMP<ul>\n<li>write invalidate</li>\n<li>write update</li>\n</ul>\n</li>\n<li>coherence operations triggered in each write <ul>\n<li>overhead too high</li>\n</ul>\n</li>\n<li>Push invalidations when data is written to <ol>\n<li>Proactive</li>\n<li>Eager</li>\n<li>Pessimistic</li>\n</ol>\n</li>\n<li>Pull modifications information periodically<ol>\n<li>on demand (reactive)</li>\n<li>lazy</li>\n<li>optimistic</li>\n</ol>\n</li>\n<li>when these methods get triggered depends on the consistency model for the shared state</li>\n</ul>\n<h2 id=\"DSM-architecture-page-based-OS-supported\"><a href=\"#DSM-architecture-page-based-OS-supported\" class=\"headerlink\" title=\"DSM architecture (page-based, OS-supported)\"></a>DSM architecture (page-based, OS-supported)</h2><ul>\n<li>Page-based DSM architecture<ul>\n<li>distributed nodes, each with own local memory contribution</li>\n<li>pool of pages from all nodes</li>\n<li>each page has IO (“home” node), page frame number</li>\n</ul>\n</li>\n<li>if MRMW <ul>\n<li>need local caches for performances (latency)</li>\n<li>“home” or “manager” node drives coherence operations</li>\n<li>all nodes responsible for part if distributed memory (state) management</li>\n</ul>\n</li>\n<li>Home node    <ul>\n<li>keeps state: page accessed, modifications, caching enabled&#x2F;disabled, locked..</li>\n</ul>\n</li>\n<li>Current owner<ul>\n<li>owner may not be equal to home node</li>\n</ul>\n</li>\n<li>Explicit replicas <ul>\n<li>for load balancing, performance, or reliability<br>  home, manager node controls memory</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DSM-metadata\"><a href=\"#DSM-metadata\" class=\"headerlink\" title=\"DSM metadata\"></a>DSM metadata</h2><p><img src=\"https://spcdn.pages.dev/blog/os/metadata.png\" alt=\"metadata.png\"></p>\n<h2 id=\"Implementing-DSMs\"><a href=\"#Implementing-DSMs\" class=\"headerlink\" title=\"Implementing DSMs\"></a>Implementing DSMs</h2><ul>\n<li>Problem : DSM must intercept access to DSM state <ul>\n<li>to send remote messages requesting access</li>\n<li>to trigger coherence messages</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li>overheads should be avoided for local non-shared state (pages)</li>\n<li>dynamically engage and disengage DSM when necessary</li>\n</ul>\n<ul>\n<li>Solution : Use hardware MMU support!<ul>\n<li>trap in OS if mapping invalid or access denied</li>\n<li>remote address mapping -&gt; trap and pass to DSM to send message</li>\n<li>cached content -&gt; trap and pass to DSM to perform memory coherence operations</li>\n<li>other MMU information useful (e.g. Dirty page)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Consistency-model\"><a href=\"#Consistency-model\" class=\"headerlink\" title=\"Consistency model\"></a>Consistency model</h2><ul>\n<li>Agreement between memory (state) and upper software layers</li>\n<li>Memory behaves correctly if and only if software follows specific rules</li>\n<li>Memory (state) guarantees to behave correctly<ul>\n<li>access ordering</li>\n<li>propagation&#x2F; visibility of updates</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Our-notation\"><a href=\"#Our-notation\" class=\"headerlink\" title=\"Our notation\"></a>Our notation</h3><p><img src=\"https://spcdn.pages.dev/blog/os/notation.png\" alt=\"notation.png\"></p>\n<ul>\n<li>R_m1(X) &#x3D;&gt; X was read from memory location m1</li>\n<li>W_m1(Y) &#x3D;&gt; Y was written to memory location m1</li>\n</ul>\n<h3 id=\"Strict-Consistency\"><a href=\"#Strict-Consistency\" class=\"headerlink\" title=\"Strict Consistency\"></a>Strict Consistency</h3><p>Strict Consistency &#x3D;&gt; updates visible everywhere immediately</p>\n<p><img src=\"https://spcdn.pages.dev/blog/os/strict.png\" alt=\"strict.png\"></p>\n<ul>\n<li>In practice<ul>\n<li>Even on single SMP no guarantees on order without extra locking and synchronization</li>\n<li>in DS, latency and message reorder make this even harder</li>\n<li>Hence almost impossible to guarantee strict consistency</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Sequential-Consistency\"><a href=\"#Sequential-Consistency\" class=\"headerlink\" title=\"Sequential Consistency\"></a>Sequential Consistency</h3><p><img src=\"https://spcdn.pages.dev/blog/os/seq.png\" alt=\"seq.png\"></p>\n<p>Sequential consistency &#x3D;&gt;</p>\n<ul>\n<li>memory updates from different  processors may be arbitrarily interleaved</li>\n<li>All processes will see the same interleaving</li>\n<li>Operations from the same process always appearin order they were issued</li>\n</ul>\n<h3 id=\"Causal-Consistency\"><a href=\"#Causal-Consistency\" class=\"headerlink\" title=\"Causal Consistency\"></a>Causal Consistency</h3><p><img src=\"https://spcdn.pages.dev/blog/os/causal.png\" alt=\"causal.png\"></p>\n<ul>\n<li>For writes not causally related, “concurrent” writes doesnt gurantee.</li>\n<li>Don’t permit arbitrary ordering from same process writer</li>\n</ul>\n<h3 id=\"Weak-Consistency\"><a href=\"#Weak-Consistency\" class=\"headerlink\" title=\"Weak Consistency\"></a>Weak Consistency</h3><p><img src=\"https://spcdn.pages.dev/blog/os/weak.png\" alt=\"weak.png\"></p>\n<ul>\n<li>Use of synchronization<ul>\n<li>Synchronization point &#x3D;&gt; operations that are available (R,W,Sync)</li>\n<li>all updates prior to a sync point will be visible</li>\n<li>no guarantee what happens in between</li>\n</ul>\n</li>\n</ul>\n<p><strong>+</strong> limit data movement of coherence operations</p>\n<p><strong>-</strong> maintain extra state for additional operations</p>\n<ul>\n<li>Variations:<ul>\n<li>Single sync operation (sync)</li>\n<li>Seperate sync per surface of state (page)</li>\n<li>Seperate “entry&#x2F;acquire” vs “exit&#x2F;release” operations<hr></li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "Operating System",
                "Placements",
                "OS"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/sql-joins-inner-left-right-and-full-joins/",
            "url": "https://samirpaul.in/posts/sql-joins-inner-left-right-and-full-joins/",
            "title": "SQL Joins - Inner, Left, Right and Full Joins",
            "date_published": "2023-08-05T20:52:53.910Z",
            "content_html": "<p><strong>SQL Join</strong> statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are as follows: </p>\n<ul>\n<li>INNER JOIN</li>\n<li>LEFT JOIN</li>\n<li>RIGHT JOIN</li>\n<li>FULL JOIN</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/77569653/227738791-78897c64-4c15-4d6a-b75a-656c6a59a5d2.png\" alt=\"SQL Joins\"></p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "sql",
                "sql-joins"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-cheat-sheet-for-leetcode/",
            "url": "https://samirpaul.in/posts/python-cheat-sheet-for-leetcode/",
            "title": "Python Cheat Sheet for LeetCode",
            "date_published": "2023-08-05T20:52:53.907Z",
            "content_html": "<h1 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h1><ul>\n<li><p>Data Types</p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172329842-38f3de07-62d9-4d7d-9a19-fc576ee396a9.jpg\" alt=\"Untitled\"></p>\n</li>\n<li><p>Operators and it’s precendence</p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172329850-61fc0809-a4b0-416c-848b-1c502ecb4772.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<h1 id=\"Data-Structures\"><a href=\"#Data-Structures\" class=\"headerlink\" title=\"Data Structures\"></a>Data Structures</h1><p><em>Important data structures for Leetcode</em></p>\n<h2 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h2><blockquote>\n<p>Lists are used to store multiple items in a single variable</p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172330098-1c5f0a6e-7f80-4f4f-9be6-1d734e2c70cd.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">nums.index(1) # returns index</span><br><span class=\"line\">nums.append(1) # appends 1</span><br><span class=\"line\">nums.insert(0,10) # inserts 10 at 0th index</span><br><span class=\"line\">nums.remove(3) # removes all instances of 3</span><br><span class=\"line\">nums.copy(1) # returns copy of the list</span><br><span class=\"line\">nums.count(1) # returns no.of times &#x27;1&#x27; is present in the list</span><br><span class=\"line\">nums.extend(someOtherList) # ...</span><br><span class=\"line\">nums.pop() # pops last element [which element to pop can also be given as optional argument]</span><br><span class=\"line\">nums.reverse() # reverses original list (nums in this case)</span><br><span class=\"line\">nums.sort() # sorts list [does NOT return sorted list]</span><br><span class=\"line\">#Python&#x27;s default sort uses Tim Sort, which is a combination of both merge sort and insertion sort.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It&#x27;s pretty simple really:</span><br><span class=\"line\"></span><br><span class=\"line\">a[start:stop]  # items start through stop-1</span><br><span class=\"line\">a[start:]      # items start through the rest of the array</span><br><span class=\"line\">a[:stop]       # items from the beginning through stop-1</span><br><span class=\"line\">a[:]           # a copy of the whole array</span><br><span class=\"line\">There is also the step value, which can be used with any of the above:</span><br><span class=\"line\"></span><br><span class=\"line\">a[start:stop:step] # start through not past stop, by step</span><br><span class=\"line\">The key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).</span><br><span class=\"line\"></span><br><span class=\"line\">The other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:</span><br><span class=\"line\"></span><br><span class=\"line\">a[-1]    # last item in the array</span><br><span class=\"line\">a[-2:]   # last two items in the array</span><br><span class=\"line\">a[:-2]   # everything except the last two items</span><br><span class=\"line\">Similarly, step may be a negative number:</span><br><span class=\"line\"></span><br><span class=\"line\">a[::-1]    # all items in the array, reversed</span><br><span class=\"line\">a[1::-1]   # the first two items, reversed</span><br><span class=\"line\">a[:-3:-1]  # the last two items, reversed</span><br><span class=\"line\">a[-3::-1]  # everything except the last two items, reversed</span><br><span class=\"line\">Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</span><br><span class=\"line\"></span><br><span class=\"line\">Relation to slice() object</span><br><span class=\"line\">The slicing operator [] is actually being used in the above code with a slice() object using the : notation (which is only valid within []), i.e.:</span><br><span class=\"line\"></span><br><span class=\"line\">a[start:stop:step]</span><br><span class=\"line\">is equivalent to:</span><br><span class=\"line\"></span><br><span class=\"line\">a[slice(start, stop, step)]</span><br><span class=\"line\">Slice objects also behave slightly differently depending on the number of arguments, similarly to range(), i.e. both slice(stop) and slice(start, stop[, step]) are supported. To skip specifying a given argument, one might use None, so that e.g. a[start:] is equivalent to a[slice(start, None)] or a[::-1] is equivalent to a[slice(None, None, -1)].</span><br><span class=\"line\"></span><br><span class=\"line\">While the :-based notation is very helpful for simple slicing, the explicit use of slice() objects simplifies the programmatic generation of slicing.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dictionary\"><a href=\"#Dictionary\" class=\"headerlink\" title=\"Dictionary\"></a>Dictionary</h2><blockquote>\n<p>Dictionaries are used to store data values in key:value pairs. <em>Info about <strong>collections.Counter()</strong> available below.</em></p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172330107-e68e3228-1c76-4bfb-bb38-04d18f94d5b9.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2,&#x27;c&#x27;:3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dict.keys() # returns list of keys of dictionary</span><br><span class=\"line\">dict.values() # returns list of values of dictionary</span><br><span class=\"line\">dict.get(&#x27;a&#x27;) # returns value for any corresponding key</span><br><span class=\"line\">dict.items() # returns [(&#x27;a&#x27;,1),(&#x27;b&#x27;,2),(&#x27;c&#x27;,3)]</span><br><span class=\"line\">dict.copy() # returns copy of the dictionary</span><br><span class=\"line\"># NOTE : items() Returns view object that will be updated with any future changes to dict</span><br><span class=\"line\">dict.pop(KEY) # pops key-value pair with that key</span><br><span class=\"line\">dict.popitem() # removes most recent pair added</span><br><span class=\"line\">dict.setDefault(KEY,DEFAULT_VALUE) # returns value of key, if key exists, else default value returned</span><br><span class=\"line\"># If the key exist, this parameter(DEFAULT_VALUE) has no effect.</span><br><span class=\"line\"># If the key does not exist, DEFAULT_VALUE becomes the key&#x27;s value. 2nd argument&#x27;s default is None.</span><br><span class=\"line\">dict.update(&#123;KEY:VALUE&#125;) # inserts pair in dictionary if not present, if present, corresponding value is overriden (not key)</span><br><span class=\"line\"># defaultdict ensures that if any element is accessed that is not present in the dictionary</span><br><span class=\"line\"># it will be created and error will not be thrown (which happens in normal dictionary)</span><br><span class=\"line\"># Also, the new element created will be of argument type, for example in the below line</span><br><span class=\"line\"># an element of type &#x27;list&#x27; will be made for a Key that does not exist</span><br><span class=\"line\">myDictionary = defaultdict(list) </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h2><blockquote>\n<p>Python Counter is a container that will hold the count of each of the elements present in the container. The counter is a sub-class available inside the dictionary class. Specifically used for element frequencies</p>\n</blockquote>\n<p><em>Pretty similar to dictionary, infact I use</em> <strong>defaultdict(int)</strong> <em>most of the time</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import Counter #(capital &#x27;C&#x27;)</span><br><span class=\"line\"># can also be used as &#x27;collections.Counter()&#x27; in code</span><br><span class=\"line\"></span><br><span class=\"line\">list1 = [&#x27;x&#x27;,&#x27;y&#x27;,&#x27;z&#x27;,&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;,&#x27;y&#x27;, &#x27;z&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\"># Initialization</span><br><span class=\"line\">Counter(list1) # =&gt; Counter(&#123;&#x27;x&#x27;: 4, &#x27;y&#x27;: 2, &#x27;z&#x27;: 2&#125;)</span><br><span class=\"line\">Counter(&quot;Welcome to Guru99 Tutorials!&quot;) # =&gt; Counter(&#123;&#x27;o&#x27;: 3, &#x27; &#x27;: 3, &#x27;u&#x27;: 3, &#x27;e&#x27;: 2.....&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Updating</span><br><span class=\"line\">counterObject = collections.Counter(list1)</span><br><span class=\"line\">counterObject.keys() = [ &#x27;x&#x27; , &#x27;y&#x27; , &#x27;z&#x27; ]</span><br><span class=\"line\">most_common_element = counterObject.most_common(1) # [(&#x27;x&#x27;, 4)]</span><br><span class=\"line\">counterObject.update(&quot;some string&quot;) # =&gt; Counter(&#123;&#x27;o&#x27;: 3, &#x27;u&#x27;: 3, &#x27;e&#x27;: 2, &#x27;s&#x27;: 2&#125;)</span><br><span class=\"line\">counterObject[&#x27;s&#x27;] += 1 # Increase/Decrease frequency</span><br><span class=\"line\"></span><br><span class=\"line\"># Accessing</span><br><span class=\"line\">frequency_of_s = counterObject[&#x27;s&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\"># Deleting</span><br><span class=\"line\">del couterObject[&#x27;s&#x27;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Deque\"><a href=\"#Deque\" class=\"headerlink\" title=\"Deque\"></a>Deque</h2><blockquote>\n<p>A double-ended queue, or deque, has the feature of adding and removing elements from either end.</p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172330115-78500420-3276-4e45-8ce3-fd668b7eb14e.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import deque</span><br><span class=\"line\"></span><br><span class=\"line\">queue = deque([&#x27;name&#x27;,&#x27;age&#x27;,&#x27;DOB&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">queue.append(&quot;append_from_right&quot;) # Append from right</span><br><span class=\"line\">queue.pop() # Pop from right</span><br><span class=\"line\"></span><br><span class=\"line\">queue.appendleft(&quot;fromLeft&quot;) # Append from left</span><br><span class=\"line\">queue.popleft() # Pop from left</span><br><span class=\"line\"></span><br><span class=\"line\">queue.index(element,begin_index,end_index) # Returns first index of element b/w the 2 indices.</span><br><span class=\"line\">queue.insert(index,element)</span><br><span class=\"line\">queue.remove() # removes first occurrance</span><br><span class=\"line\">queue.count() # obvious</span><br><span class=\"line\"></span><br><span class=\"line\">queue.reverse() # reverses order of queue elements</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Heapq\"><a href=\"#Heapq\" class=\"headerlink\" title=\"Heapq\"></a>Heapq</h2><blockquote>\n<p>As we know the Heap Data Structure is used to implement the Priority Queue ADT. In python we can directly access a Priority Queue implemented using a Heap by using the <strong>Heapq</strong> library&#x2F;module.</p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172330122-29cf0756-89bc-4654-a4e8-4e318156c7d1.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import heapq # (minHeap by Default)</span><br><span class=\"line\"></span><br><span class=\"line\">nums = [5, 7, 9, 1, 3]</span><br><span class=\"line\"></span><br><span class=\"line\">heapq.heapify(nums) # converts list into heap. Can be converted back to list by list(nums).</span><br><span class=\"line\">heapq.heappush(nums,element) # Push an element into the heap</span><br><span class=\"line\">heapq.heappop(nums) # Pop an element from the heap</span><br><span class=\"line\">#heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.</span><br><span class=\"line\">#heappop(heap) :- This function is used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.</span><br><span class=\"line\"></span><br><span class=\"line\"># Other Methods Available in the Library</span><br><span class=\"line\"># Used to return the k largest elements from the iterable specified </span><br><span class=\"line\"># The key is a function with that accepts single element from iterable,</span><br><span class=\"line\"># and the returned value from that function is then used to rank that element in the heap</span><br><span class=\"line\">heapq.nlargest(k, iterable, key = fun)</span><br><span class=\"line\">heapq.nsmallest(k, iterable, key = fun)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sets\"><a href=\"#Sets\" class=\"headerlink\" title=\"Sets\"></a>Sets</h2><blockquote>\n<p>A set is a collection which is unordered, immutable, unindexed, No Duplicates.</p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172330132-7a785f5f-bbc6-43b9-b82f-794190813787.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set = &#123;1,2,3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set.add(item)</span><br><span class=\"line\">set.remove(item)</span><br><span class=\"line\">set.discard(item) | set.remove(item) # removes item | remove will throw error if item is not there, discard will not</span><br><span class=\"line\">set.pop() # removes random item (since unordered)</span><br><span class=\"line\"></span><br><span class=\"line\">set.isdisjoint(anotherSet) # returns true if no common elements</span><br><span class=\"line\">set.issubset(anotherSet) # returns true if all elements from anotherSet is present in original set</span><br><span class=\"line\">set.issuperset(anotherSet) # returns true if all elements from original set is present in anotherSet</span><br><span class=\"line\"></span><br><span class=\"line\">set.difference(anotherSet) # returns set containing items ONLY in first set</span><br><span class=\"line\">set.difference_update(anotherSet) # removes common elements from first set [no new set is created or returned]</span><br><span class=\"line\">set.intersection(anotherSet) # returns new set with common elements</span><br><span class=\"line\">set.intersection_update(anotherSet) # modifies first set keeping only common elements</span><br><span class=\"line\">set.symmetric_difference(anotherSet) # returns set containing all non-common elements of both sets</span><br><span class=\"line\">set.symmetric_difference_update(anotherSet) # same as symmetric_difference but changes are made on original set</span><br><span class=\"line\"></span><br><span class=\"line\">set.union(anotherSet) # ...</span><br><span class=\"line\">set.update(anotherSet) # adds anotherSet without duplicate</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Tuples\"><a href=\"#Tuples\" class=\"headerlink\" title=\"Tuples\"></a>Tuples</h2><blockquote>\n<p>A tuple is a collection which is ordered, unchangeable and can contain duplicate values</p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  Similar to list</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple = (1,2,3,1)</span><br><span class=\"line\"></span><br><span class=\"line\">tuple.count(1) # returns occurence of an item</span><br><span class=\"line\">tuple.index(1) # returns index of 1 in array</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ** split Function **</span><br><span class=\"line\">#The split() method breaks up a string at the specified separator and returns a list of strings.</span><br><span class=\"line\">text = &#x27;Python is a fun programming language&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># split the text from space</span><br><span class=\"line\">print(text.split(&#x27; &#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">#convert string to list</span><br><span class=\"line\">s=&quot;abcd&quot;</span><br><span class=\"line\">s=list(s)</span><br><span class=\"line\"></span><br><span class=\"line\"># Output: [&#x27;Python&#x27;, &#x27;is&#x27;, &#x27;a&#x27;, &#x27;fun&#x27;, &#x27;programming&#x27;, &#x27;language&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\"># ** count Function **</span><br><span class=\"line\">#The count() method returns the number of occurrences of a substring in the given string.</span><br><span class=\"line\">#Example</span><br><span class=\"line\">message = &#x27;python is popular programming language&#x27;</span><br><span class=\"line\"># number of occurrence of &#x27;p&#x27;</span><br><span class=\"line\">print(&#x27;Number of occurrence of p:&#x27;, message.count(&#x27;p&#x27;)) # Output: Number of occurrence of p: 4</span><br><span class=\"line\"></span><br><span class=\"line\">#The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.</span><br><span class=\"line\">s = &#x27;1242323&#x27;</span><br><span class=\"line\">print(s.isnumeric()) #Output: True</span><br><span class=\"line\"></span><br><span class=\"line\">#The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1.</span><br><span class=\"line\"># check the index of &#x27;fun&#x27;</span><br><span class=\"line\">print(message.find(&#x27;fun&#x27;)) # Output: 12</span><br><span class=\"line\"></span><br><span class=\"line\">#The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.</span><br><span class=\"line\"></span><br><span class=\"line\">name = &quot;M3onica Gell22er &quot;</span><br><span class=\"line\">print(name.isalnum()) # Output : False</span><br><span class=\"line\"></span><br><span class=\"line\">#The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False</span><br><span class=\"line\">name = &quot;Monica&quot;</span><br><span class=\"line\">print(name.isalpha()) #output true</span><br><span class=\"line\"></span><br><span class=\"line\">#other imp functions</span><br><span class=\"line\">string.strip([chars]) #The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).</span><br><span class=\"line\">string.upper() #he upper() method converts all lowercase characters in a string into uppercase characters and returns it.</span><br><span class=\"line\">string.lower() #The lower() method converts all uppercase characters in a string into lowercase characters and returns it.</span><br><span class=\"line\">string.islower()</span><br><span class=\"line\">string.isdigit()</span><br><span class=\"line\">string.isupper()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Built-in-or-Library-functions\"><a href=\"#Built-in-or-Library-functions\" class=\"headerlink\" title=\"Built-in or Library functions\"></a>Built-in or Library functions</h1><ul>\n<li><p>Functions to iterate over list &#x2F; other iterable (tuple, dictionaries)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">** map(fun, iter) **</span><br><span class=\"line\">#fun : It is a function to which map passes each element of given iterable.</span><br><span class=\"line\">#iter : It is a iterable which is to be mapped.</span><br><span class=\"line\"></span><br><span class=\"line\">** zip(list,list) **</span><br><span class=\"line\">for elem1,elem2 in zip(firstList,secondList):</span><br><span class=\"line\">\t# will merge both lists and produce tuples with both elements</span><br><span class=\"line\">\t# Tuples will stop at shortest list (in case of both lists having different len)</span><br><span class=\"line\">#Example</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">a = (&quot;John&quot;, &quot;Charles&quot;, &quot;Mike&quot;)</span><br><span class=\"line\">b = (&quot;Jenny&quot;, &quot;Christy&quot;, &quot;Monica&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">x = zip(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\">#use the tuple() function to display a readable version of the result:</span><br><span class=\"line\"></span><br><span class=\"line\">print(tuple(x))</span><br><span class=\"line\">o/p: ((&#x27;John&#x27;, &#x27;Jenny&#x27;), (&#x27;Charles&#x27;, &#x27;Christy&#x27;), (&#x27;Mike&#x27;, &#x27;Monica&#x27;))</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">** any(list) ** [ OPPOSITE IS =&gt; ** all() ** ]</span><br><span class=\"line\">any(someList) # returns true if ANY element in list is true [any string, all numbers except 0 also count as true]</span><br><span class=\"line\"></span><br><span class=\"line\">** enumerate(list|tuple) ** </span><br><span class=\"line\"># [when you need to attach indexes to lists or tuples ]</span><br><span class=\"line\">enumerate(anyList) # [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;] =&gt; [(0, &#x27;a&#x27;), (1, &#x27;b&#x27;), (2, &#x27;c&#x27;)]</span><br><span class=\"line\"></span><br><span class=\"line\">** filter(function|list) **</span><br><span class=\"line\">filter(myFunction,list) # returns list with elements that returned true when passed in function</span><br><span class=\"line\"></span><br><span class=\"line\">***************** import bisect ***********************</span><br><span class=\"line\"></span><br><span class=\"line\">** bisect.bisect(list,number,begin,end) ** O(log(n))</span><br><span class=\"line\"># [ returns the index where the element should be inserted </span><br><span class=\"line\">#\t\tsuch that sorting order is maintained ]</span><br><span class=\"line\">a = [1,2,4]</span><br><span class=\"line\">bisect.bisect(a,3,0,4) # [1,2,4] =&gt; 2 coz &#x27;3&#x27; should be inserted in 2nd index to maintain sorting order</span><br><span class=\"line\"></span><br><span class=\"line\"># Other variants of this functions are =&gt; bisect.bisect_left() | bisect.bisect_right()</span><br><span class=\"line\"># they have same arguments. Suppose the element we want to insert is already present</span><br><span class=\"line\"># in the sorting list, the bisect_left() will return index left of the existing number</span><br><span class=\"line\"># and the bisect_right() or bisect() will return index right to the existing number</span><br><span class=\"line\"></span><br><span class=\"line\"># ** bisect.insort(list,number,begin,end)       ** O(n) to insert</span><br><span class=\"line\"># ** bisect.insort_right(list,number,begin,end) ** </span><br><span class=\"line\"># ** bisect.insort_left(list,number,begin,end)  ** </span><br><span class=\"line\"></span><br><span class=\"line\">The above 3 functions are exact same of bisect.bisect(), the only difference</span><br><span class=\"line\">is that they return the sorted list after inserting and not the index. The</span><br><span class=\"line\">left() right() logic is also same as above.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Getting ASCII value of a character</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">** ord(str) **</span><br><span class=\"line\"># returns ascii value of the character , Example ord(&quot;a&quot;) = 97</span><br><span class=\"line\">** chr(int) ** </span><br><span class=\"line\">#return character of given ascii value , Example chr(97) = &quot;a&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"Clean-Code-Tips\"><a href=\"#Clean-Code-Tips\" class=\"headerlink\" title=\"Clean Code Tips\"></a>Clean Code Tips</h1><ul>\n<li><p><strong>Doc Strings -</strong> Documentation for your functions in the interview to look slic 😎</p>\n<p>  A docstring is short for documentation string.</p>\n<p>  Python docstrings (documentation strings) are the <a href=\"https://www.programiz.com/python-programming/string\">string</a> literals that appear right after the definition of a function, method, class, or module.</p>\n<p>  Triple quotes are used while writing docstrings. For example:</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def double(num):</span><br><span class=\"line\">    &quot;&quot;&quot;Function to double the value&quot;&quot;&quot;</span><br><span class=\"line\">    return 2*num</span><br></pre></td></tr></table></figure>\n<p>  Docstrings appear right after the definition of a function, class, or a module. This separates docstrings from multiline comments using triple quotes.</p>\n<p>  The docstrings are associated with the object as their <code>__doc__</code> attribute.</p>\n<p>  So, we can access the docstrings of the above function with the following lines of code:</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def double(num):</span><br><span class=\"line\">    &quot;&quot;&quot;Function to double the value&quot;&quot;&quot;</span><br><span class=\"line\">    return 2*num</span><br><span class=\"line\">print(double.__doc__)</span><br></pre></td></tr></table></figure>\n<p>  <strong>Output</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function to double the value</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Use <strong>Assert keyword</strong> in python for testing edge cases. Looks more professional.</p>\n<h3 id=\"Definition-and-Usage\"><a href=\"#Definition-and-Usage\" class=\"headerlink\" title=\"Definition and Usage\"></a>Definition and Usage</h3><p>  The <code>assert</code> keyword is used when debugging code.</p>\n<p>  The <code>assert</code> keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.</p>\n<p>  You can write a message to be written if the code returns False, check the example below.</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#if condition returns False, AssertionError is raised:</span><br><span class=\"line\">assert x == &quot;goodbye&quot;, &quot;x should be &#x27;hello&#x27;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ALWAYS</strong> be aware of any code snippet that is being <strong>REPEATED</strong> in your solution. <strong>MODULARITY</strong> #1 Priority. Refactoring is also an important part of interview.</p>\n<ul>\n<li>This is usually asked as a follow up after coding the solution. <em>Are there any changes you want to make to this solution?</em></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Miscellaneous\"><a href=\"#Miscellaneous\" class=\"headerlink\" title=\"Miscellaneous\"></a>Miscellaneous</h1><ul>\n<li><p>How to take multiple line input in python?</p>\n<ul>\n<li>Using split() method</li>\n<li>Using List comprehension</li>\n</ul>\n<p>  <strong>Syntax :</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input().split(separator, maxsplit)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python program showing how to</span><br><span class=\"line\"># multiple input using split</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking two inputs at a time</span><br><span class=\"line\">x, y = input(&quot;Enter a two value: &quot;).split()</span><br><span class=\"line\">print(&quot;Number of boys: &quot;, x)</span><br><span class=\"line\">print(&quot;Number of girls: &quot;, y)</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking three inputs at a time</span><br><span class=\"line\">x, y, z = input(&quot;Enter a three value: &quot;).split()</span><br><span class=\"line\">print(&quot;Total number of students: &quot;, x)</span><br><span class=\"line\">print(&quot;Number of boys is : &quot;, y)</span><br><span class=\"line\">print(&quot;Number of girls is : &quot;, z)</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking two inputs at a time</span><br><span class=\"line\">a, b = input(&quot;Enter a two value: &quot;).split()</span><br><span class=\"line\">print(&quot;First number is &#123;&#125; and second number is &#123;&#125;&quot;.format(a, b))</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking multiple inputs at a time</span><br><span class=\"line\"># and type casting using list() function</span><br><span class=\"line\">x = list(map(int, input(&quot;Enter a multiple value: &quot;).split()))</span><br><span class=\"line\">print(&quot;List of students: &quot;, x)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python program showing</span><br><span class=\"line\"># how to take multiple input</span><br><span class=\"line\"># using List comprehension</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking two input at a time</span><br><span class=\"line\">x, y = [int(x) for x in input(&quot;Enter two value: &quot;).split()]</span><br><span class=\"line\">print(&quot;First Number is: &quot;, x)</span><br><span class=\"line\">print(&quot;Second Number is: &quot;, y)</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking three input at a time</span><br><span class=\"line\">x, y, z = [int(x) for x in input(&quot;Enter three value: &quot;).split()]</span><br><span class=\"line\">print(&quot;First Number is: &quot;, x)</span><br><span class=\"line\">print(&quot;Second Number is: &quot;, y)</span><br><span class=\"line\">print(&quot;Third Number is: &quot;, z)</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking two inputs at a time</span><br><span class=\"line\">x, y = [int(x) for x in input(&quot;Enter two value: &quot;).split()]</span><br><span class=\"line\">print(&quot;First number is &#123;&#125; and second number is &#123;&#125;&quot;.format(x, y))</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking multiple inputs at a time</span><br><span class=\"line\">x = [int(x) for x in input(&quot;Enter multiple value: &quot;).split()]</span><br><span class=\"line\">print(&quot;Number of list is: &quot;, x)</span><br><span class=\"line\"></span><br><span class=\"line\"># taking multiple inputs at a time separated by comma</span><br><span class=\"line\">x = [int(x) for x in input(&quot;Enter multiple value: &quot;).split(&quot;,&quot;)]</span><br><span class=\"line\">print(&quot;Number of list is: &quot;, x)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax :</span><br><span class=\"line\">math.log(a,Base)</span><br><span class=\"line\">Parameters :a : The numeric value</span><br><span class=\"line\">Base :  Base to which the logarithm has to be computed.</span><br><span class=\"line\">Return Value :</span><br><span class=\"line\">Returns natural log if 1 argument is passed and log with</span><br><span class=\"line\">specified base if 2 arguments are passed.</span><br><span class=\"line\">Exceptions :</span><br><span class=\"line\">Raises ValueError is a negative no. is passed as argument.</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\">  </span><br><span class=\"line\"># Printing the log base e of 14</span><br><span class=\"line\">print (&quot;Natural logarithm of 14 is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.log(14))</span><br><span class=\"line\">  </span><br><span class=\"line\"># Printing the log base 5 of 14</span><br><span class=\"line\">print (&quot;Logarithm base 5 of 14 is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.log(14,5))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Finding the ceiling and the floor value<ul>\n<li>Ceil value means the smallest integral value greater than the number and the floor value means the greatest integral value smaller than the number. This can be easily calculated using the ceil() and floor() method respectively.</li>\n</ul>\n</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python code to demonstrate the working of</span><br><span class=\"line\"># ceil() and floor()</span><br><span class=\"line\"> </span><br><span class=\"line\"># importing &quot;math&quot; for mathematical operations</span><br><span class=\"line\">import math</span><br><span class=\"line\"> </span><br><span class=\"line\">a = 2.3</span><br><span class=\"line\"> </span><br><span class=\"line\"># returning the ceil of 2.3 (i.e 3)</span><br><span class=\"line\">print (&quot;The ceil of 2.3 is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.ceil(a))</span><br><span class=\"line\"> </span><br><span class=\"line\"># returning the floor of 2.3 (i.e 2)</span><br><span class=\"line\">print (&quot;The floor of 2.3 is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.floor(a))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Other Important functions</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Constants</span><br><span class=\"line\"># Print the value of Euler e (2.718281828459045)</span><br><span class=\"line\">print (math.e)</span><br><span class=\"line\"># Print the value of pi (3.141592653589793)</span><br><span class=\"line\">print (math.pi)</span><br><span class=\"line\">print (math.gcd(b, a))</span><br><span class=\"line\">print (pow(3,4))</span><br><span class=\"line\"># print the square root of 4</span><br><span class=\"line\">print(math.sqrt(4))</span><br><span class=\"line\">a = math.pi/6</span><br><span class=\"line\">b = 30</span><br><span class=\"line\"> </span><br><span class=\"line\"># returning the converted value from radians to degrees</span><br><span class=\"line\">print (&quot;The converted value from radians to degrees is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.degrees(a))</span><br><span class=\"line\"> </span><br><span class=\"line\"># returning the converted value from degrees to radians</span><br><span class=\"line\">print (&quot;The converted value from degrees to radians is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.radians(b))</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">** bin(int) **</span><br><span class=\"line\">bin(anyNumber) # Returns binary version of number</span><br><span class=\"line\"></span><br><span class=\"line\">** divmod(int,int) **</span><br><span class=\"line\">divmod(dividend,divisor) # returns tuple like (quotient, remainder)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"How-the-custom-comparator-works\"><a href=\"#How-the-custom-comparator-works\" class=\"headerlink\" title=\"How the custom comparator works\"></a>How the custom comparator works</h2><p>  When providing a custom comparator, it should generally return an integer&#x2F;float value that follows the following pattern (as with most other programming languages and frameworks):</p>\n<ul>\n<li>return a negative value (<code>&lt; 0</code>) when the left item should be sorted <em>before</em> the right item</li>\n<li>return a positive value (<code>&gt; 0</code>) when the left item should be sorted <em>after</em> the right item</li>\n<li>return <code>0</code> when both the left and the right item have the same weight and should be ordered “equally” without precedence</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import cmp_to_key</span><br><span class=\"line\">sorted(mylist, key=cmp_to_key(compare))</span><br><span class=\"line\"></span><br><span class=\"line\">#Example</span><br><span class=\"line\">def compare(item1, item2):</span><br><span class=\"line\">    if fitness(item1) &lt; fitness(item2):</span><br><span class=\"line\">        return -1</span><br><span class=\"line\">    elif fitness(item1) &gt; fitness(item2):</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return 0</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>Python integer division behaves differently with -ve numbers ex: -3&#x2F;&#x2F;2 will give -2 answer instead of -1 so always use int(-3&#x2F;2) for integer division in problems</p>\n</blockquote>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://betterprogramming.pub/modulo-operation-with-negative-numbers-in-python-38cb7256bb32\">The Modulo Operation (%) With Negative Numbers in Python</a></p>\n<h3 id=\"Cheat-Sheet-PDF\"><a href=\"#Cheat-Sheet-PDF\" class=\"headerlink\" title=\"Cheat Sheet PDF\"></a>Cheat Sheet PDF</h3><p><a href=\"https://drive.google.com/file/d/1EojiCPYkyLi0f5DYW4UF3Lwp-Pwihr7q/view?usp=sharing\"><strong>Click Here</strong></a></p>\n",
            "tags": [
                "LeetCode",
                "blog",
                "coding",
                "computer-science",
                "Python Cheat Sheet"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/leetcode-greedy-for-beginners/",
            "url": "https://samirpaul.in/posts/leetcode-greedy-for-beginners/",
            "title": "LeetCode Greedy for Beginners",
            "date_published": "2023-08-05T20:52:53.905Z",
            "content_html": "<p>Greedy for practice:</p>\n<p>Sharing good Greedy problems for practice:<br>List: <a href=\"https://leetcode.com/list/xyehq5j6\">https://leetcode.com/list/xyehq5j6</a></p>\n<p><strong>Sort&#x2F;Array</strong><br><a href=\"https://leetcode.com/problems/jump-game/\">https://leetcode.com/problems/jump-game/</a><br><a href=\"https://leetcode.com/problems/jump-game-ii/\">https://leetcode.com/problems/jump-game-ii/</a><br><a href=\"https://leetcode.com/problems/gas-station/\">https://leetcode.com/problems/gas-station/</a><br><a href=\"https://leetcode.com/problems/candy/\">https://leetcode.com/problems/candy/</a><br><a href=\"https://leetcode.com/problems/remove-k-digits/\">https://leetcode.com/problems/remove-k-digits/</a><br><a href=\"https://leetcode.com/problems/wiggle-subsequence/\">https://leetcode.com/problems/wiggle-subsequence/</a><br><a href=\"https://leetcode.com/problems/assign-cookies/\">https://leetcode.com/problems/assign-cookies/</a><br><a href=\"https://leetcode.com/problems/boats-to-save-people/\">https://leetcode.com/problems/boats-to-save-people/</a><br><a href=\"https://leetcode.com/problems/bag-of-tokens/\">https://leetcode.com/problems/bag-of-tokens/</a><br><a href=\"https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/\">https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/</a><br><a href=\"https://leetcode.com/problems/queue-reconstruction-by-height/\">https://leetcode.com/problems/queue-reconstruction-by-height/</a><br><a href=\"https://leetcode.com/problems/play-with-chips/\">https://leetcode.com/problems/play-with-chips/</a><br><a href=\"https://leetcode.com/problems/previous-permutation-with-one-swap/\">https://leetcode.com/problems/previous-permutation-with-one-swap/</a><br><a href=\"https://leetcode.com/problems/lemonade-change/\">https://leetcode.com/problems/lemonade-change/</a><br><a href=\"https://leetcode.com/problems/bag-of-tokens/\">https://leetcode.com/problems/bag-of-tokens/</a></p>\n<p><strong>Hash&#x2F;Multi-set:</strong><br><a href=\"https://leetcode.com/problems/task-scheduler/\">https://leetcode.com/problems/task-scheduler/</a><br><a href=\"https://leetcode.com/problems/partition-labels/\">https://leetcode.com/problems/partition-labels/</a><br><a href=\"https://leetcode.com/problems/car-pooling/\">https://leetcode.com/problems/car-pooling/</a><br><a href=\"https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\">https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</a><br><a href=\"https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/\">https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/</a><br><a href=\"https://leetcode.com/problems/cinema-seat-allocation/\">https://leetcode.com/problems/cinema-seat-allocation/</a><br><a href=\"https://leetcode.com/problems/construct-k-palindrome-strings/\">https://leetcode.com/problems/construct-k-palindrome-strings/</a><br><a href=\"https://leetcode.com/problems/advantage-shuffle/\">https://leetcode.com/problems/advantage-shuffle/</a></p>\n<p><strong>Strings:</strong><br><a href=\"https://leetcode.com/problems/reorganize-string/\">https://leetcode.com/problems/reorganize-string/</a><br><a href=\"https://leetcode.com/problems/string-without-aaa-or-bbb/\">https://leetcode.com/problems/string-without-aaa-or-bbb/</a><br><a href=\"https://leetcode.com/problems/check-if-a-string-can-break-another-string/\">https://leetcode.com/problems/check-if-a-string-can-break-another-string/</a><br><a href=\"https://leetcode.com/problems/remove-duplicate-letters/\">https://leetcode.com/problems/remove-duplicate-letters/</a></p>\n<p><strong>Heap:</strong><br><a href=\"https://leetcode.com/problems/last-stone-weight/\">https://leetcode.com/problems/last-stone-weight/</a><br><a href=\"https://leetcode.com/problems/reduce-array-size-to-the-half/\">https://leetcode.com/problems/reduce-array-size-to-the-half/</a></p>\n<p><strong>Stack:</strong><br><a href=\"https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/\">https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/</a></p>\n<p><strong>Sharing solutions for little tricky problems</strong>:</p>\n<p><a href=\"https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\">https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tbool isPossibleDivide(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\">\t\tif (n % k != 0) return false;</span><br><span class=\"line\">\t\tint ssize = n/k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tmap&lt;int, int&gt;hm;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\thm[nums[i]]++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (auto it = hm.begin(); it != hm.end(); it++) &#123;</span><br><span class=\"line\">\t\t\tif (hm[it-&gt;first] &gt; 0) &#123;</span><br><span class=\"line\">\t\t\t\tfor (int i = k-1; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">\t\t\t\t\thm[it-&gt;first+i] -= hm[it-&gt;first];</span><br><span class=\"line\">\t\t\t\t\tif (hm[it-&gt;first+i] &lt; 0)</span><br><span class=\"line\">\t\t\t\t\t\treturn false;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/car-pooling/\">https://leetcode.com/problems/car-pooling/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tbool carPooling(vector&lt;vector&lt;int&gt;&gt;&amp; trips, int capacity) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint trip_len = 1001;</span><br><span class=\"line\">\t\tvector&lt;int&gt;stops(trip_len, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; trips.size(); i++) &#123;</span><br><span class=\"line\">\t\t\tstops[trips[i][1]] += trips[i][0];</span><br><span class=\"line\">\t\t\tstops[trips[i][2]] -= trips[i][0];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; trip_len; i++) &#123;</span><br><span class=\"line\">\t\t\tif (i != 0) stops[i] += stops[i-1];</span><br><span class=\"line\">\t\t\tif (stops[i] &gt; capacity)</span><br><span class=\"line\">\t\t\t\treturn false;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/reorganize-string/\">https://leetcode.com/problems/reorganize-string/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tstatic bool compare(pair&lt;char, int&gt;p1, pair&lt;char, int&gt;p2) &#123;</span><br><span class=\"line\">\t\treturn p1.second &gt; p2.second;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tstring reorganizeString(string S) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = S.length();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tunordered_map&lt;char, int&gt;m;</span><br><span class=\"line\">\t\tvector&lt;pair&lt;char, int&gt;&gt;v;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) </span><br><span class=\"line\">\t\t\tm[S[i]]++;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor(auto it = m.begin(); it != m.end(); it++) &#123;</span><br><span class=\"line\">\t\t\tif (it-&gt;second &gt; (n+1)/2)</span><br><span class=\"line\">\t\t\t\treturn &quot;&quot;;</span><br><span class=\"line\">\t\t\tv.push_back(make_pair(it-&gt;first, it-&gt;second));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tsort(v.begin(), v.end(), compare);</span><br><span class=\"line\">\t\tstring str;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; v.size(); i++) &#123;</span><br><span class=\"line\">\t\t\twhile (v[i].second--)</span><br><span class=\"line\">\t\t\t\tstr += v[i].first;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tstring ans;</span><br><span class=\"line\">\t\tint size = str.size();</span><br><span class=\"line\">\t\tint i = 0, j = (size-1)/2+1;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\twhile (i &lt; (size-1)/2+1) &#123;</span><br><span class=\"line\">\t\t\tans += str[i];</span><br><span class=\"line\">\t\t\tans += str[j];</span><br><span class=\"line\">\t\t\ti++; j++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/candy/\">https://leetcode.com/problems/candy/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint candy(vector&lt;int&gt;&amp; ratings) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = ratings.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;int&gt;left(n, 1); </span><br><span class=\"line\">\t\tfor (int i = 1; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tif (ratings[i] &gt; ratings[i-1])</span><br><span class=\"line\">\t\t\t\tleft[i] = left[i-1]+1;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint sum = left[n-1];</span><br><span class=\"line\">\t\tfor (int i = n-2; i &gt;= 0; i--) &#123;</span><br><span class=\"line\">\t\t\tif (ratings[i] &gt; ratings[i+1])</span><br><span class=\"line\">\t\t\t\tleft[i] = max(left[i], left[i+1]+1);</span><br><span class=\"line\">\t\t\tsum += left[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn sum;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode",
                "blog",
                "coding",
                "computer-science",
                "Greedy"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/graph-for-beginners/",
            "url": "https://samirpaul.in/posts/graph-for-beginners/",
            "title": "Graph For Beginners",
            "date_published": "2023-08-05T20:52:53.899Z",
            "content_html": "<p><strong>Graph Problems For Practice</strong></p>\n<p>Sharing some topic wise good Graph problems and sample solutions to observe on how to approach.</p>\n<p>List: <a href=\"https://leetcode.com/list/x1wy4de7\">https://leetcode.com/list/x1wy4de7</a></p>\n<ol>\n<li><p><strong>Union Find:</strong></p>\n<p> Identify if problems talks about finding groups or components.</p>\n<p> <a href=\"https://leetcode.com/problems/friend-circles/\">https://leetcode.com/problems/friend-circles/</a><br> <a href=\"https://leetcode.com/problems/redundant-connection/\">https://leetcode.com/problems/redundant-connection/</a><br> <a href=\"https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/\">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a><br> <a href=\"https://leetcode.com/problems/number-of-operations-to-make-network-connected/\">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a><br> <a href=\"https://leetcode.com/problems/satisfiability-of-equality-equations/\">https://leetcode.com/problems/satisfiability-of-equality-equations/</a><br> <a href=\"https://leetcode.com/problems/accounts-merge/\">https://leetcode.com/problems/accounts-merge/</a></p>\n<p> All the above problems can be solved by Union Find algorithm with minor tweaks.<br> Below is a standard template for union find problems.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tvector&lt;int&gt;parent;</span><br><span class=\"line\">\tint find(int x) &#123;</span><br><span class=\"line\">\t\treturn parent[x] == x ? x : find(parent[x]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tvector&lt;int&gt; findRedundantConnection(vector&lt;vector&lt;int&gt;&gt;&amp; edges) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tint n = edges.size();</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tparent.resize(n+1, 0);</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt;= n; i++)</span><br><span class=\"line\">\t\t\tparent[i] = i;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tvector&lt;int&gt;res(2, 0);</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tint x = find(edges[i][0]);</span><br><span class=\"line\">\t\t\tint y = find(edges[i][1]);</span><br><span class=\"line\">\t\t\tif (x != y)</span><br><span class=\"line\">\t\t\t\tparent[y] = x;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\tres[0] = edges[i][0];</span><br><span class=\"line\">\t\t\t\tres[1] = edges[i][1];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Depth First Search</strong></p>\n<ol>\n<li><p><strong>Start DFS from nodes at boundary:</strong><br> <a href=\"https://leetcode.com/problems/surrounded-regions/\">https://leetcode.com/problems/surrounded-regions/</a><br> <a href=\"https://leetcode.com/problems/number-of-enclaves/\">https://leetcode.com/problems/number-of-enclaves/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint rows, cols;</span><br><span class=\"line\">\tvoid dfs(vector&lt;vector&lt;int&gt;&gt;&amp; A, int i, int j) &#123;</span><br><span class=\"line\">\t\tif (i &lt; 0 || j &lt; 0 || i &gt;= rows || j &gt;= cols)</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tif (A[i][j] != 1) </span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tA[i][j] = -1;</span><br><span class=\"line\">\t\tdfs(A, i+1, j);</span><br><span class=\"line\">\t\tdfs(A, i-1, j);</span><br><span class=\"line\">\t\tdfs(A, i, j+1);</span><br><span class=\"line\">\t\tdfs(A, i, j-1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint numEnclaves(vector&lt;vector&lt;int&gt;&gt;&amp; A) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tif (A.empty()) return 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\trows = A.size();</span><br><span class=\"line\">\t\tcols = A[0].size();</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; rows; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; cols; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (i == 0 || j == 0 || i == rows-1 || j == cols-1)</span><br><span class=\"line\">\t\t\t\t\tdfs(A, i, j);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint ans = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; rows; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; cols; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (A[i][j] == 1)</span><br><span class=\"line\">\t\t\t\t\tans++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Time taken to reach all nodes or share information to all graph nodes:</strong><br> <a href=\"https://leetcode.com/problems/time-needed-to-inform-all-employees/\">https://leetcode.com/problems/time-needed-to-inform-all-employees/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tvoid dfs(unordered_map&lt;int, vector&lt;int&gt;&gt;&amp;hm, int i, vector&lt;int&gt;&amp; informTime, int &amp;res, int curr) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tcurr += informTime[i];</span><br><span class=\"line\">\t\tres = max(res, curr);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tfor (auto it = hm[i].begin(); it != hm[i].end(); it++)</span><br><span class=\"line\">\t\t\tdfs(hm, *it, informTime, res, curr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint numOfMinutes(int n, int headID, vector&lt;int&gt;&amp; manager, vector&lt;int&gt;&amp; informTime) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tunordered_map&lt;int, vector&lt;int&gt;&gt;hm;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tif (manager[i] != -1) hm[manager[i]].push_back(i);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint res = 0, curr = 0;</span><br><span class=\"line\">\t\tdfs(hm, headID, informTime, res, curr);</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>DFS from each unvisited node&#x2F;Island problems</strong><br> <a href=\"https://leetcode.com/problems/number-of-closed-islands/\">https://leetcode.com/problems/number-of-closed-islands/</a><br> <a href=\"https://leetcode.com/problems/number-of-islands/\">https://leetcode.com/problems/number-of-islands/</a><br> <a href=\"https://leetcode.com/problems/keys-and-rooms/\">https://leetcode.com/problems/keys-and-rooms/</a><br> <a href=\"https://leetcode.com/problems/max-area-of-island/\">https://leetcode.com/problems/max-area-of-island/</a><br> <a href=\"https://leetcode.com/problems/flood-fill/\">https://leetcode.com/problems/flood-fill/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tvoid dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int i, int j, int m, int n) &#123;</span><br><span class=\"line\">\t\tif (i &lt; 0 || i &gt;= m || j &lt; 0 || j &gt;= n) return;</span><br><span class=\"line\">\t\tif (grid[i][j] == &#x27;0&#x27; || visited[i][j]) return;</span><br><span class=\"line\">\t\tvisited[i][j] = true;</span><br><span class=\"line\">\t\tdfs(grid, visited, i+1, j, m, n);</span><br><span class=\"line\">\t\tdfs(grid, visited, i, j+1, m, n);</span><br><span class=\"line\">\t\tdfs(grid, visited, i-1, j, m, n);</span><br><span class=\"line\">\t\tdfs(grid, visited, i, j-1, m, n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\tint numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) &#123;</span><br><span class=\"line\">\t\tif (grid.empty()) return 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint m = grid.size();</span><br><span class=\"line\">\t\tint n = grid[0].size();</span><br><span class=\"line\">\t\tvector&lt;vector&lt;bool&gt;&gt;visited(m, vector&lt;bool&gt;(n, false));</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint res = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (grid[i][j] == &#x27;1&#x27; &amp;&amp; !visited[i][j]) &#123;</span><br><span class=\"line\">\t\t\t\t\tdfs(grid, visited, i, j, m, n);</span><br><span class=\"line\">\t\t\t\t\tres++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Cycle Find:</strong><br> <a href=\"https://leetcode.com/problems/find-eventual-safe-states/\">https://leetcode.com/problems/find-eventual-safe-states/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tbool dfs(vector&lt;vector&lt;int&gt;&gt;&amp; graph, int v, vector&lt;int&gt;&amp; dp) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tif (dp[v])</span><br><span class=\"line\">\t\t\treturn dp[v] == 1;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tdp[v] = -1;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tfor (auto it = graph[v].begin(); it != graph[v].end(); it++)</span><br><span class=\"line\">\t\t\tif (!dfs(graph, *it, dp))</span><br><span class=\"line\">\t\t\t\treturn false;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tdp[v] = 1;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tvector&lt;int&gt; eventualSafeNodes(vector&lt;vector&lt;int&gt;&gt;&amp; graph) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint V = graph.size();</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tvector&lt;int&gt;res;</span><br><span class=\"line\">\t\tvector&lt;int&gt;dp(V, 0);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; V; i++) &#123;    </span><br><span class=\"line\">\t\t\tif (dfs(graph, i, dp))</span><br><span class=\"line\">\t\t\t\tres.push_back(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p> };</p>\n</li>\n</ol>\n</li>\n<li><p><strong>Breadth First Search</strong></p>\n<ol>\n<li><p><strong>Shortest Path:</strong><br> <a href=\"https://leetcode.com/problems/01-matrix/\">https://leetcode.com/problems/01-matrix/</a><br> <a href=\"https://leetcode.com/problems/as-far-from-land-as-possible/\">https://leetcode.com/problems/as-far-from-land-as-possible/</a><br> <a href=\"https://leetcode.com/problems/rotting-oranges/\">https://leetcode.com/problems/rotting-oranges/</a><br> <a href=\"https://leetcode.com/problems/shortest-path-in-binary-matrix/\">https://leetcode.com/problems/shortest-path-in-binary-matrix/</a></p>\n<p> Start BFS from nodes from which shortest path is asked for.<br> Below is the sample BFS approach to find the path.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\tvector&lt;vector&lt;int&gt;&gt; updateMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (matrix.empty()) return matrix;</span><br><span class=\"line\">\t\tint rows = matrix.size();</span><br><span class=\"line\">\t\tint cols = matrix[0].size();</span><br><span class=\"line\">\t\tqueue&lt;pair&lt;int, int&gt;&gt;pq;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; rows; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; cols; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (matrix[i][j] == 0) &#123;</span><br><span class=\"line\">\t\t\t\t\tpq.push(&#123;i-1, j&#125;), pq.push(&#123;i+1, j&#125;), pq.push(&#123;i, j-1&#125;), pq.push(&#123;i, j+1&#125;); </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;vector&lt;bool&gt;&gt;visited(rows, vector&lt;bool&gt;(cols, false));</span><br><span class=\"line\">\t\tint steps = 0;</span><br><span class=\"line\">\t\twhile (!pq.empty()) &#123;</span><br><span class=\"line\">\t\t\tsteps++;</span><br><span class=\"line\">\t\t\tint size = pq.size();</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\tauto front = pq.front();</span><br><span class=\"line\">\t\t\t\tint l = front.first;</span><br><span class=\"line\">\t\t\t\tint r = front.second;</span><br><span class=\"line\">\t\t\t\tpq.pop();</span><br><span class=\"line\">\t\t\t\tif (l &gt;= 0 &amp;&amp; r &gt;= 0 &amp;&amp; l &lt; rows &amp;&amp; r &lt; cols &amp;&amp; !visited[l][r] &amp;&amp; matrix[l][r] == 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tvisited[l][r] = true;</span><br><span class=\"line\">\t\t\t\t\tmatrix[l][r] = steps;</span><br><span class=\"line\">\t\t\t\t\tpq.push(&#123;l-1, r&#125;), pq.push(&#123;l+1, r&#125;), pq.push(&#123;l, r-1&#125;), pq.push(&#123;l, r+1&#125;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn matrix;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>Graph coloring&#x2F;Bipartition</strong><br> <a href=\"https://leetcode.com/problems/possible-bipartition/\">https://leetcode.com/problems/possible-bipartition/</a><br> <a href=\"https://leetcode.com/problems/is-graph-bipartite/\">https://leetcode.com/problems/is-graph-bipartite/</a></p>\n<p> Problems asks to check if its possible to divide the graph nodes into 2 groups<br> Apply BFS for same. Below is a sample graph coloring approach.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tbool isBipartite(vector&lt;vector&lt;int&gt;&gt;&amp; graph) &#123;</span><br><span class=\"line\">\t\t\tint n = graph.size();</span><br><span class=\"line\">\t\t\tvector&lt;int&gt;color(n, -1);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t\tif (color[i] != -1) continue;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\t\tcolor[i] = 1;</span><br><span class=\"line\">\t\t\t\tqueue&lt;int&gt;q;</span><br><span class=\"line\">\t\t\t\tq.push(i);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\t\twhile (!q.empty()) &#123;</span><br><span class=\"line\">\t\t\t\t\tint t = q.front();</span><br><span class=\"line\">\t\t\t\t\tq.pop();</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\t\t\tfor (int j = 0; j &lt; graph[t].size(); j++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tif (color[graph[t][j]] == -1) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tcolor[graph[t][j]] = 1-color[t];</span><br><span class=\"line\">\t\t\t\t\t\t\tq.push(graph[t][j]);</span><br><span class=\"line\">\t\t\t\t\t\t&#125; else if (color[graph[t][j]] == color[t]) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\treturn false;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Topological Sort:</strong><br> Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0</p>\n<p> <a href=\"https://leetcode.com/problems/course-schedule/\">https://leetcode.com/problems/course-schedule/</a><br> <a href=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a></p>\n<p> Below is sample approach. Find if cycle is present, if not apply topological sort.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint V;</span><br><span class=\"line\">\tlist&lt;int&gt;*adj;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tbool isCyclicUtil(int v, vector&lt;bool&gt;&amp;visited, vector&lt;bool&gt;&amp;recStack) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tvisited[v] = true;</span><br><span class=\"line\">\t\trecStack[v] = true;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (auto it = adj[v].begin(); it != adj[v].end(); it++) &#123;</span><br><span class=\"line\">\t\t\tif (!visited[*it] &amp;&amp; isCyclicUtil(*it, visited, recStack))</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t\telse if (recStack[*it])</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\trecStack[v] = false;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tbool isCyclic() &#123;</span><br><span class=\"line\">\t\tvector&lt;bool&gt;visited(V, false);</span><br><span class=\"line\">\t\tvector&lt;bool&gt;recStack(V, false);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; V; i++) &#123;</span><br><span class=\"line\">\t\t\tif (isCyclicUtil(i, visited, recStack))</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid topologicalSortUtil(int v, vector&lt;bool&gt;&amp;visited, vector&lt;int&gt;&amp; res) &#123;</span><br><span class=\"line\">\t\tvisited[v] = true;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (auto it = adj[v].begin(); it != adj[v].end(); it++)</span><br><span class=\"line\">\t\t\tif (!visited[*it])</span><br><span class=\"line\">\t\t\t\ttopologicalSortUtil(*it, visited, res);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tres.push_back(v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvector&lt;int&gt;topologicalSort(int v) &#123;</span><br><span class=\"line\">\t\tvector&lt;int&gt;res;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tvector&lt;bool&gt;visited(V, false);</span><br><span class=\"line\">\t\ttopologicalSortUtil(v, visited, res);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; V; i++) &#123;</span><br><span class=\"line\">\t\t\tif (!visited[i])</span><br><span class=\"line\">\t\t\t\ttopologicalSortUtil(i, visited, res);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\tvector&lt;int&gt; findOrder(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) &#123;</span><br><span class=\"line\">\t\tV = numCourses;</span><br><span class=\"line\">\t\tadj = new list&lt;int&gt;[V];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tunordered_map&lt;int, vector&lt;int&gt;&gt;hm;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; prerequisites.size(); i++) &#123;</span><br><span class=\"line\">\t\t\tadj[prerequisites[i][0]].push_back(prerequisites[i][1]);</span><br><span class=\"line\">\t\t\thm[prerequisites[i][1]].push_back(prerequisites[i][0]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif (isCyclic()) return vector&lt;int&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tint i = 0;</span><br><span class=\"line\">\t\tfor (i = 0; i &lt; V; i++) &#123;</span><br><span class=\"line\">\t\t\tif (hm.find(i) == hm.end())</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn topologicalSort(i);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p> };</p>\n</li>\n<li><p><strong>Find Shortest Path (Dijkstra’s&#x2F;Bellman Ford)</strong><br> <a href=\"https://leetcode.com/problems/network-delay-time/\">https://leetcode.com/problems/network-delay-time/</a></p>\n<p> <strong>Dijkstras and Bellman Ford:</strong></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tint networkDelayTime(vector&lt;vector&lt;int&gt;&gt;&amp; times, int N, int K) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tpriority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt;pq;</span><br><span class=\"line\">\t\t\tvector&lt;int&gt;dist(N+1, INT_MAX);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tpq.push(make_pair(0, K));</span><br><span class=\"line\">\t\t\tdist[K] = 0;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tunordered_map&lt;int, vector&lt;pair&lt;int, int&gt;&gt;&gt;hm;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; times.size(); i++)</span><br><span class=\"line\">\t\t\t\thm[times[i][0]].push_back(make_pair(times[i][1], times[i][2]));</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\twhile (!pq.empty()) &#123;</span><br><span class=\"line\">\t\t\t\tpair&lt;int, int&gt;p = pq.top();</span><br><span class=\"line\">\t\t\t\tpq.pop();</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tint u = p.second;</span><br><span class=\"line\">\t\t\t\tfor (auto it = hm[u].begin(); it != hm[u].end(); it++) &#123;</span><br><span class=\"line\">\t\t\t\t\tint v = it-&gt;first;</span><br><span class=\"line\">\t\t\t\t\tint w = it-&gt;second;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\tif (dist[v] &gt; dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tdist[v] = dist[u] + w;</span><br><span class=\"line\">\t\t\t\t\t\tpq.push(make_pair(dist[v], v));</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tint res = 0;</span><br><span class=\"line\">\t\t\tfor (int i = 1; i &lt;= N; i++)</span><br><span class=\"line\">\t\t\t\tres = max(res, dist[i]);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\treturn res == INT_MAX ? -1 : res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tclass Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tint networkDelayTime(vector&lt;vector&lt;int&gt;&gt;&amp; times, int N, int K) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tint n = times.size();</span><br><span class=\"line\">\t\t\tif (!n) return 0;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tvector&lt;int&gt;dist(N+1, INT_MAX);</span><br><span class=\"line\">\t\t\tint res = 0;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tdist[K] = 0;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; N; i++) &#123;</span><br><span class=\"line\">\t\t\t\tfor (int j = 0; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t\t\tint u = times[j][0];</span><br><span class=\"line\">\t\t\t\t\tint v = times[j][1];</span><br><span class=\"line\">\t\t\t\t\tint w = times[j][2];</span><br><span class=\"line\">\t\t\t\t\tif (dist[u] != INT_MAX &amp;&amp; dist[u] + w &lt; dist[v])</span><br><span class=\"line\">\t\t\t\t\t\tdist[v] = w + dist[u];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tfor (int i = 1; i &lt;= N; i++)</span><br><span class=\"line\">\t\t\t\tres = max(res, dist[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\treturn res == INT_MAX ? -1 : res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Complete List: Below are mostly list of problems (mostly medium level and may 1 or 2 easy) which are better to start practice with:<br>(Updated on 14th June ‘20)</p>\n<p><strong>Union Find:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/friend-circles/\">https://leetcode.com/problems/friend-circles/</a></li>\n<li><a href=\"https://leetcode.com/problems/redundant-connection/\">https://leetcode.com/problems/redundant-connection/</a></li>\n<li><a href=\"https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/\">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a></li>\n<li><a href=\"https://leetcode.com/problems/number-of-operations-to-make-network-connected/\">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a></li>\n<li><a href=\"https://leetcode.com/problems/satisfiability-of-equality-equations/\">https://leetcode.com/problems/satisfiability-of-equality-equations/</a></li>\n<li><a href=\"https://leetcode.com/problems/accounts-merge/\">https://leetcode.com/problems/accounts-merge/</a></li>\n<li><a href=\"https://leetcode.com/problems/connecting-cities-with-minimum-cost/\">https://leetcode.com/problems/connecting-cities-with-minimum-cost/</a></li>\n</ol>\n<p><strong>DFS:</strong><br>DFS from boundary:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/surrounded-regions/\">https://leetcode.com/problems/surrounded-regions/</a></li>\n<li><a href=\"https://leetcode.com/problems/number-of-enclaves/\">https://leetcode.com/problems/number-of-enclaves/</a></li>\n</ol>\n<p>Shortest time:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/time-needed-to-inform-all-employees/\">https://leetcode.com/problems/time-needed-to-inform-all-employees/</a></li>\n</ol>\n<p>Islands Variants</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/number-of-closed-islands/\">https://leetcode.com/problems/number-of-closed-islands/</a></li>\n<li><a href=\"https://leetcode.com/problems/number-of-islands/\">https://leetcode.com/problems/number-of-islands/</a></li>\n<li><a href=\"https://leetcode.com/problems/keys-and-rooms/\">https://leetcode.com/problems/keys-and-rooms/</a></li>\n<li><a href=\"https://leetcode.com/problems/max-area-of-island/\">https://leetcode.com/problems/max-area-of-island/</a></li>\n<li><a href=\"https://leetcode.com/problems/flood-fill/\">https://leetcode.com/problems/flood-fill/</a></li>\n<li><a href=\"https://leetcode.com/problems/coloring-a-border/\">https://leetcode.com/problems/coloring-a-border/</a></li>\n</ol>\n<p>Hash&#x2F;DFS:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/employee-importance/\">https://leetcode.com/problems/employee-importance/</a></li>\n<li><a href=\"https://leetcode.com/problems/find-the-town-judge/\">https://leetcode.com/problems/find-the-town-judge/</a></li>\n</ol>\n<p>Cycle Find:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/find-eventual-safe-states/\">https://leetcode.com/problems/find-eventual-safe-states/</a></li>\n</ol>\n<p><strong>BFS:</strong><br>BFS for shortest path:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/01-matrix/\">https://leetcode.com/problems/01-matrix/</a></li>\n<li><a href=\"https://leetcode.com/problems/as-far-from-land-as-possible/\">https://leetcode.com/problems/as-far-from-land-as-possible/</a></li>\n<li><a href=\"https://leetcode.com/problems/rotting-oranges/\">https://leetcode.com/problems/rotting-oranges/</a></li>\n<li><a href=\"https://leetcode.com/problems/shortest-path-in-binary-matrix/\">https://leetcode.com/problems/shortest-path-in-binary-matrix/</a></li>\n</ol>\n<p><strong>Graph coloring:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/possible-bipartition/\">https://leetcode.com/problems/possible-bipartition/</a></li>\n<li><a href=\"https://leetcode.com/problems/is-graph-bipartite/\">https://leetcode.com/problems/is-graph-bipartite/</a></li>\n</ol>\n<p><strong>Topological Sort:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a></li>\n</ol>\n<p><strong>Shortest Path:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/network-delay-time/\">https://leetcode.com/problems/network-delay-time/</a></li>\n<li><a href=\"https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/\">https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/</a></li>\n<li><a href=\"https://leetcode.com/problems/cheapest-flights-within-k-stops/\">https://leetcode.com/problems/cheapest-flights-within-k-stops/</a></li>\n</ol>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "Graph"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/leetcode-all-two-pointers-problems/",
            "url": "https://samirpaul.in/posts/leetcode-all-two-pointers-problems/",
            "title": "LeetCode all two pointers problems",
            "date_published": "2023-08-05T20:52:53.899Z",
            "content_html": "<table>\n<thead>\n<tr>\n<th>1. Running from both ends of an array</th>\n</tr>\n</thead>\n</table>\n<p>The first type of problems are, having two pointers at left and right end of array, then moving them to the center while processing something with them.<br><img src=\"https://user-images.githubusercontent.com/77569653/226705317-e62636ef-7fac-4897-a7d0-4625cd71826f.png\" alt=\"image\"></p>\n<ul>\n<li><p>2 Sum problem<br>  (*) <a href=\"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\">https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/</a><br>  <a href=\"https://leetcode.com/problems/3sum/\">https://leetcode.com/problems/3sum/</a><br>  <a href=\"https://leetcode.com/problems/4sum/\">https://leetcode.com/problems/4sum/</a><br>  <a href=\"https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/\">https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/</a><br>  <a href=\"https://leetcode.com/problems/two-sum-iv-input-is-a-bst/\">https://leetcode.com/problems/two-sum-iv-input-is-a-bst/</a><br>  <a href=\"https://leetcode.com/problems/sum-of-square-numbers/\">https://leetcode.com/problems/sum-of-square-numbers/</a><br>  <a href=\"https://leetcode.com/problems/boats-to-save-people/\">https://leetcode.com/problems/boats-to-save-people/</a><br>  <a href=\"https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/\">https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/</a><br>  <a href=\"https://leetcode.com/problems/3sum-with-multiplicity/\">https://leetcode.com/problems/3sum-with-multiplicity/</a></p>\n</li>\n<li><p>Trapping Water<br>  (*) <a href=\"https://leetcode.com/problems/trapping-rain-water/\">https://leetcode.com/problems/trapping-rain-water/</a><br>  <a href=\"https://leetcode.com/problems/container-with-most-water/\">https://leetcode.com/problems/container-with-most-water/</a></p>\n</li>\n<li><p>Next Permutation<br>  (*) <a href=\"https://leetcode.com/problems/next-permutation/\">https://leetcode.com/problems/next-permutation/</a><br>  <a href=\"https://leetcode.com/problems/next-greater-element-iii/\">https://leetcode.com/problems/next-greater-element-iii/</a><br>  <a href=\"https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/\">https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/</a></p>\n</li>\n<li><p>Reversing &#x2F; Swapping<br>  <a href=\"https://leetcode.com/problems/valid-palindrome/\">https://leetcode.com/problems/valid-palindrome/</a><br>  (*) <a href=\"https://leetcode.com/problems/reverse-string/\">https://leetcode.com/problems/reverse-string/</a><br>  <a href=\"https://leetcode.com/problems/reverse-vowels-of-a-string/\">https://leetcode.com/problems/reverse-vowels-of-a-string/</a><br>  <a href=\"https://leetcode.com/problems/valid-palindrome-ii/\">https://leetcode.com/problems/valid-palindrome-ii/</a><br>  <a href=\"https://leetcode.com/problems/reverse-only-letters/\">https://leetcode.com/problems/reverse-only-letters/</a><br>  <a href=\"https://leetcode.com/problems/remove-element/\">https://leetcode.com/problems/remove-element/</a><br>  <a href=\"https://leetcode.com/problems/sort-colors/\">https://leetcode.com/problems/sort-colors/</a><br>  <a href=\"https://leetcode.com/problems/flipping-an-image/\">https://leetcode.com/problems/flipping-an-image/</a><br>  <a href=\"https://leetcode.com/problems/squares-of-a-sorted-array/\">https://leetcode.com/problems/squares-of-a-sorted-array/</a><br>  <a href=\"https://leetcode.com/problems/sort-array-by-parity/\">https://leetcode.com/problems/sort-array-by-parity/</a><br>  <a href=\"https://leetcode.com/problems/sort-array-by-parity-ii/\">https://leetcode.com/problems/sort-array-by-parity-ii/</a><br>  <a href=\"https://leetcode.com/problems/pancake-sorting/\">https://leetcode.com/problems/pancake-sorting/</a><br>  <a href=\"https://leetcode.com/problems/reverse-prefix-of-word/\">https://leetcode.com/problems/reverse-prefix-of-word/</a><br>  <a href=\"https://leetcode.com/problems/reverse-string-ii/\">https://leetcode.com/problems/reverse-string-ii/</a><br>  <a href=\"https://leetcode.com/problems/reverse-words-in-a-string/\">https://leetcode.com/problems/reverse-words-in-a-string/</a><br>  <a href=\"https://leetcode.com/problems/reverse-words-in-a-string-iii/\">https://leetcode.com/problems/reverse-words-in-a-string-iii/</a></p>\n</li>\n<li><p>Others<br>  <a href=\"https://leetcode.com/problems/bag-of-tokens/\">https://leetcode.com/problems/bag-of-tokens/</a><br>  <a href=\"https://leetcode.com/problems/di-string-match/\">https://leetcode.com/problems/di-string-match/</a><br>  <a href=\"https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/\">https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/</a><br>  <a href=\"https://leetcode.com/problems/sentence-similarity-iii/\">https://leetcode.com/problems/sentence-similarity-iii/</a><br>  <a href=\"https://leetcode.com/problems/find-k-closest-elements/\">https://leetcode.com/problems/find-k-closest-elements/</a><br>  <a href=\"https://leetcode.com/problems/shortest-distance-to-a-character/\">https://leetcode.com/problems/shortest-distance-to-a-character/</a></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>2.Slow &amp; Fast Pointers</th>\n</tr>\n</thead>\n</table>\n<p>Next type is using two pointers with different speed of movement. Typically they starts from the left end, then the first pointer advances fast and give some feedback to the slow pointer and do some calculation.<br><img src=\"https://user-images.githubusercontent.com/77569653/226705223-95601d5c-7c9c-416a-a561-3bc6213afd75.png\" alt=\"image\"></p>\n<ul>\n<li><p>Linked List Operations<br>  (*) <a href=\"https://leetcode.com/problems/linked-list-cycle/\">https://leetcode.com/problems/linked-list-cycle/</a><br>  <a href=\"https://leetcode.com/problems/linked-list-cycle-ii/\">https://leetcode.com/problems/linked-list-cycle-ii/</a><br>  <a href=\"https://leetcode.com/problems/remove-nth-node-from-end-of-list/\">https://leetcode.com/problems/remove-nth-node-from-end-of-list/</a><br>  <a href=\"https://leetcode.com/problems/rotate-list/\">https://leetcode.com/problems/rotate-list/</a><br>  <a href=\"https://leetcode.com/problems/reorder-list/\">https://leetcode.com/problems/reorder-list/</a><br>  <a href=\"https://leetcode.com/problems/palindrome-linked-list/\">https://leetcode.com/problems/palindrome-linked-list/</a></p>\n</li>\n<li><p>Cyclic Detection<br>  (*) <a href=\"https://leetcode.com/problems/find-the-duplicate-number/\">https://leetcode.com/problems/find-the-duplicate-number/</a><br>  <a href=\"https://leetcode.com/problems/circular-array-loop/\">https://leetcode.com/problems/circular-array-loop/</a></p>\n</li>\n<li><p>Sliding Window&#x2F;Caterpillar Method<br>  <img src=\"https://assets.leetcode.com/users/images/29d2e356-77fe-4caf-8921-7a39d06e56d2_1642139764.6173265.jpeg\" alt=\"image\"><br>  (*) <a href=\"https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/\">https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/</a><br>  <a href=\"https://leetcode.com/problems/find-k-th-smallest-pair-distance/\">https://leetcode.com/problems/find-k-th-smallest-pair-distance/</a><br>  <a href=\"https://leetcode.com/problems/moving-stones-until-consecutive-ii/\">https://leetcode.com/problems/moving-stones-until-consecutive-ii/</a><br>  <a href=\"https://leetcode.com/problems/count-pairs-of-nodes/\">https://leetcode.com/problems/count-pairs-of-nodes/</a><br>  <a href=\"https://leetcode.com/problems/count-binary-substrings/\">https://leetcode.com/problems/count-binary-substrings/</a><br>  <a href=\"https://leetcode.com/problems/k-diff-pairs-in-an-array/\">https://leetcode.com/problems/k-diff-pairs-in-an-array/</a></p>\n</li>\n<li><p>Rotation<br>  (*) <a href=\"https://leetcode.com/problems/rotating-the-box/\">https://leetcode.com/problems/rotating-the-box/</a><br>  <a href=\"https://leetcode.com/problems/rotate-array/\">https://leetcode.com/problems/rotate-array/</a></p>\n</li>\n<li><p>String<br>  (*) <a href=\"https://leetcode.com/problems/string-compression/\">https://leetcode.com/problems/string-compression/</a><br>  <a href=\"https://leetcode.com/problems/last-substring-in-lexicographical-order/\">https://leetcode.com/problems/last-substring-in-lexicographical-order/</a></p>\n</li>\n<li><p>Remove Duplicate<br>  (*) <a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array/\">https://leetcode.com/problems/remove-duplicates-from-sorted-array/</a><br>  <a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/\">https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/</a><br>  <a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/\">https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/</a><br>  <a href=\"https://leetcode.com/problems/duplicate-zeros/\">https://leetcode.com/problems/duplicate-zeros/</a></p>\n</li>\n<li><p>Others<br>  <a href=\"https://leetcode.com/problems/statistics-from-a-large-sample/\">https://leetcode.com/problems/statistics-from-a-large-sample/</a><br>  <a href=\"https://leetcode.com/problems/partition-labels/\">https://leetcode.com/problems/partition-labels/</a><br>  <a href=\"https://leetcode.com/problems/magical-string/\">https://leetcode.com/problems/magical-string/</a><br>  <a href=\"https://leetcode.com/problems/friends-of-appropriate-ages/\">https://leetcode.com/problems/friends-of-appropriate-ages/</a><br>  <a href=\"https://leetcode.com/problems/longest-mountain-in-array/\">https://leetcode.com/problems/longest-mountain-in-array/</a><br>  <a href=\"https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/\">https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/</a></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>3.Running from beginning of 2 arrays &#x2F; Merging 2 arrays</th>\n</tr>\n</thead>\n</table>\n<p>In this category, you will be given 2 arrays or lists, then have to process them with individual pointers.<br><img src=\"https://user-images.githubusercontent.com/77569653/226705109-0e41c781-9c08-4796-90fd-8b2169cef242.png\" alt=\"image\"></p>\n<ul>\n<li><p>Sorted arrays<br>  (*) <a href=\"https://leetcode.com/problems/merge-sorted-array/\">https://leetcode.com/problems/merge-sorted-array/</a><br>  <a href=\"https://leetcode.com/problems/heaters/\">https://leetcode.com/problems/heaters/</a><br>  <a href=\"https://leetcode.com/problems/find-the-distance-value-between-two-arrays/\">https://leetcode.com/problems/find-the-distance-value-between-two-arrays/</a></p>\n</li>\n<li><p>Intersections&#x2F;LCA like<br>  (*) <a href=\"https://leetcode.com/problems/intersection-of-two-linked-lists/\">https://leetcode.com/problems/intersection-of-two-linked-lists/</a><br>  <a href=\"https://leetcode.com/problems/intersection-of-two-arrays/\">https://leetcode.com/problems/intersection-of-two-arrays/</a><br>  <a href=\"https://leetcode.com/problems/intersection-of-two-arrays-ii/\">https://leetcode.com/problems/intersection-of-two-arrays-ii/</a></p>\n</li>\n<li><p>SubString<br>  (*) <a href=\"https://leetcode.com/problems/implement-strstr/\">https://leetcode.com/problems/implement-strstr/</a><br>  <a href=\"https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/\">https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/</a><br>  <a href=\"https://leetcode.com/problems/long-pressed-name/\">https://leetcode.com/problems/long-pressed-name/</a><br>  <a href=\"https://leetcode.com/problems/longest-uncommon-subsequence-ii/\">https://leetcode.com/problems/longest-uncommon-subsequence-ii/</a><br>  <a href=\"https://leetcode.com/problems/compare-version-numbers/\">https://leetcode.com/problems/compare-version-numbers/</a><br>  <a href=\"https://leetcode.com/problems/camelcase-matching/\">https://leetcode.com/problems/camelcase-matching/</a><br>  <a href=\"https://leetcode.com/problems/expressive-words/\">https://leetcode.com/problems/expressive-words/</a></p>\n</li>\n<li><p>Median Finder<br>  (*) <a href=\"https://leetcode.com/problems/find-median-from-data-stream/\">https://leetcode.com/problems/find-median-from-data-stream/</a></p>\n</li>\n<li><p>Meet-in-the-middle &#x2F; Binary Search<br>  (*) <a href=\"https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/\">https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/</a><br>  <a href=\"https://leetcode.com/problems/closest-subsequence-sum/\">https://leetcode.com/problems/closest-subsequence-sum/</a><br>  <a href=\"https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/\">https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/</a><br>  <a href=\"https://leetcode.com/problems/3sum-closest/\">https://leetcode.com/problems/3sum-closest/</a><br>  <a href=\"https://leetcode.com/problems/valid-triangle-number/\">https://leetcode.com/problems/valid-triangle-number/</a></p>\n</li>\n<li><p>Others<br>  <a href=\"https://leetcode.com/problems/shortest-unsorted-continuous-subarray/\">https://leetcode.com/problems/shortest-unsorted-continuous-subarray/</a><br>  <a href=\"https://leetcode.com/problems/most-profit-assigning-work/\">https://leetcode.com/problems/most-profit-assigning-work/</a><br>  <a href=\"https://leetcode.com/problems/largest-merge-of-two-strings/\">https://leetcode.com/problems/largest-merge-of-two-strings/</a><br>  <a href=\"https://leetcode.com/problems/swap-adjacent-in-lr-string/\">https://leetcode.com/problems/swap-adjacent-in-lr-string/</a></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>4.Split &amp; Merge of an array &#x2F; Divide &amp; Conquer</th>\n</tr>\n</thead>\n</table>\n<p>The last one is similiar to previous category but there is one thing is added. First, you need to split the given list into 2 separate lists and then do two pointers approach to merge or unify them. There aren’t many tasks here.<br><img src=\"https://user-images.githubusercontent.com/77569653/226704881-583b72b9-d759-46f6-ab8f-a81310800c30.png\" alt=\"image\"></p>\n<ul>\n<li><p>Partition<br>  (*) <a href=\"https://leetcode.com/problems/partition-list/\">https://leetcode.com/problems/partition-list/</a></p>\n</li>\n<li><p>Sorting<br>  (*) <a href=\"https://leetcode.com/problems/sort-list/\">https://leetcode.com/problems/sort-list/</a></p>\n</li>\n</ul>\n",
            "tags": [
                "LeetCode",
                "blog",
                "coding",
                "computer-science",
                "two pointers problems"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/binary-search-template/",
            "url": "https://samirpaul.in/posts/binary-search-template/",
            "title": "Binary Search Template",
            "date_published": "2023-08-05T20:52:53.890Z",
            "content_html": "<p>Binary Search is quite easy to understand conceptually. Basically, it splits the search space into two halves and only keep the half that probably has the search target and throw away the other half that would not possibly have the answer. In this manner, we reduce the search space to half the size at every step, until we find the target. Binary Search helps us reduce the search time from linear O(n) to logarithmic O(log n). <strong>But when it comes to implementation, it’s rather difficult to write a bug-free code in just a few minutes</strong>. Some of the most common problems include:</p>\n<ul>\n<li>When to exit the loop? Should we use <code>left &lt; right</code> or <code>left &lt;= right</code> as the while loop condition?</li>\n<li>How to initialize the boundary variable <code>left</code> and <code>right</code>?</li>\n<li>How to update the boundary? How to choose the appropriate combination from <code>left = mid</code>, <code>left = mid + 1</code> and <code>right = mid</code>, <code>right = mid - 1</code>?</li>\n</ul>\n<p>A rather common misunderstanding of binary search is that people often think this technique could only be used in simple scenario like “Given a sorted array, find a specific value in it”. As a matter of fact, it can be applied to much more complicated situations.</p>\n<p>After a lot of practice in LeetCode, I’ve made a powerful binary search template and solved many Hard problems by just slightly twisting this template. I’ll share the template with you guys in this post. <strong>I don’t want to just show off the code and leave. Most importantly, I want to share the logical thinking: how to apply this general template to all sorts of problems</strong>. Hopefully, after reading this post, people wouldn’t be pissed off any more when LeetCoding, “This problem could be solved with binary search! Why didn’t I think of that before!”</p>\n<hr>\n<h1 id=\"Most-Generalized-Binary-Search\"><a href=\"#Most-Generalized-Binary-Search\" class=\"headerlink\" title=\"&gt;&gt; Most Generalized Binary Search\"></a>&gt;&gt; Most Generalized Binary Search</h1><p>Suppose we have a <strong>search space</strong>. It could be an array, a range, etc. Usually it’s sorted in ascending order. For most tasks, we can transform the requirement into the following generalized form:</p>\n<p><strong>Minimize k , s.t. condition(k) is True</strong></p>\n<p>The following code is the most generalized binary search template:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def binary_search(array) -&gt; int:</span><br><span class=\"line\">    def condition(value) -&gt; bool:</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = min(search_space), max(search_space) # could be [0, n], [1, n] etc. Depends on problem</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if condition(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<p>What’s really nice of this template is that, for most of the binary search problems, <strong>we only need to modify three parts after copy-pasting this template, and never need to worry about corner cases and bugs in code any more</strong>:</p>\n<ul>\n<li>Correctly initialize the boundary variables <code>left</code> and <code>right</code> to specify search space. Only one rule: set up the boundary to <strong>include all possible elements</strong>;</li>\n<li>Decide return value. Is it <code>return left</code> or <code>return left - 1</code>? Remember this: <strong>after exiting the while loop, <code>left</code> is the minimal k​ satisfying the <code>condition</code> function</strong>;</li>\n<li>Design the <code>condition</code> function. This is the most difficult and most beautiful part. Needs lots of practice.</li>\n</ul>\n<p>Below I’ll show you guys how to apply this powerful template to many LeetCode problems.</p>\n<hr>\n<h1 id=\"Basic-Application\"><a href=\"#Basic-Application\" class=\"headerlink\" title=\"&gt;&gt; Basic Application\"></a>&gt;&gt; Basic Application</h1><h2 id=\"278-First-Bad-Version-Easy\"><a href=\"#278-First-Bad-Version-Easy\" class=\"headerlink\" title=\"278. First Bad Version [Easy]\"></a><a href=\"https://leetcode.com/problems/first-bad-version/\">278. First Bad Version [Easy]</a></h2><p>You are a product manager and currently leading a team to develop a new product. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad. You are given an API <code>bool isBadVersion(version)</code> which will return whether <code>version</code> is bad.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given n = 5, and version = 4 is the first bad version.</span><br><span class=\"line\"></span><br><span class=\"line\">call isBadVersion(3) -&gt; false</span><br><span class=\"line\">call isBadVersion(5) -&gt; true</span><br><span class=\"line\">call isBadVersion(4) -&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">Then 4 is the first bad version. </span><br></pre></td></tr></table></figure>\n\n<p>First, we initialize <code>left = 1</code> and <code>right = n</code> to include all possible values. Then we notice that we don’t even need to design the <code>condition</code> function. It’s already given by the <code>isBadVersion</code> API. Finding the first bad version is equivalent to finding the minimal k satisfying <code>isBadVersion(k) is True</code>. Our template can fit in very nicely:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution:</span><br><span class=\"line\">    def firstBadVersion(self, n) -&gt; int:</span><br><span class=\"line\">        left, right = 1, n</span><br><span class=\"line\">        while left &lt; right:</span><br><span class=\"line\">            mid = left + (right - left) // 2</span><br><span class=\"line\">            if isBadVersion(mid):</span><br><span class=\"line\">                right = mid</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                left = mid + 1</span><br><span class=\"line\">        return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"69-Sqrt-x-Easy\"><a href=\"#69-Sqrt-x-Easy\" class=\"headerlink\" title=\"69. Sqrt(x) [Easy]\"></a><a href=\"https://leetcode.com/problems/sqrtx/\">69. Sqrt(x) [Easy]</a></h2><p>Implement <code>int sqrt(int x)</code>. Compute and return the square root of <em>x</em>, where <em>x</em> is guaranteed to be a non-negative integer. Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 4</span><br><span class=\"line\">Output: 2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 8</span><br><span class=\"line\">Output: 2</span><br></pre></td></tr></table></figure>\n\n<p>Easy one. First we need to search for minimal k satisfying condition <code>k^2 &gt; x</code>, then <code>k - 1</code> is the answer to the question. We can easily come up with the solution. Notice that I set <code>right = x + 1</code> instead of <code>right = x</code> to deal with special input cases like <code>x = 0</code> and <code>x = 1</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def mySqrt(x: int) -&gt; int:</span><br><span class=\"line\">    left, right = 0, x + 1</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if mid * mid &gt; x:</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left - 1  # `left` is the minimum k value, `k - 1` is the answer</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"35-Search-Insert-Position-Easy\"><a href=\"#35-Search-Insert-Position-Easy\" class=\"headerlink\" title=\"35. Search Insert Position [Easy]\"></a><a href=\"https://leetcode.com/problems/search-insert-position/\">35. Search Insert Position [Easy]</a></h2><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You may assume no duplicates in the array.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [1,3,5,6], 5</span><br><span class=\"line\">Output: 2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [1,3,5,6], 2</span><br><span class=\"line\">Output: 1</span><br></pre></td></tr></table></figure>\n\n<p>Very classic application of binary search. We are looking for the minimal k value satisfying <code>nums[k] &gt;= target</code>, and we can just copy-paste our template. Notice that our solution is correct regardless of whether the input array <code>nums</code> has duplicates. Also notice that the input <code>target</code> might be larger than all elements in <code>nums</code> and therefore needs to placed at the end of the array. That’s why we should initialize <code>right = len(nums)</code> instead of <code>right = len(nums) - 1</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution:</span><br><span class=\"line\">    def searchInsert(self, nums: List[int], target: int) -&gt; int:</span><br><span class=\"line\">        left, right = 0, len(nums)</span><br><span class=\"line\">        while left &lt; right:</span><br><span class=\"line\">            mid = left + (right - left) // 2</span><br><span class=\"line\">            if nums[mid] &gt;= target:</span><br><span class=\"line\">                right = mid</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                left = mid + 1</span><br><span class=\"line\">        return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Advanced-Application\"><a href=\"#Advanced-Application\" class=\"headerlink\" title=\"&gt;&gt; Advanced Application\"></a>&gt;&gt; Advanced Application</h1><p>The above problems are quite easy to solve, because they already give us the array to be searched. We’d know that we should use binary search to solve them at first glance. However, <strong>more often are the situations where the search space and search target are not so readily available</strong>. Sometimes we won’t even realize that the problem should be solved with binary search – we might just turn to dynamic programming or DFS and get stuck for a very long time.</p>\n<p>As for the question “When can we use binary search?”, my answer is that, <strong>If we can discover some kind of monotonicity, for example, if <code>condition(k) is True</code> then <code>condition(k + 1) is True</code>, then we can consider binary search</strong>.</p>\n<h2 id=\"1011-Capacity-To-Ship-Packages-Within-D-Days-Medium\"><a href=\"#1011-Capacity-To-Ship-Packages-Within-D-Days-Medium\" class=\"headerlink\" title=\"1011. Capacity To Ship Packages Within D Days [Medium]\"></a><a href=\"https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/\">1011. Capacity To Ship Packages Within D Days [Medium]</a></h2><p>A conveyor belt has packages that must be shipped from one port to another within <code>D</code> days. The <code>i</code>-th package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p>\n<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>D</code> days.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5</span><br><span class=\"line\">Output: 15</span><br><span class=\"line\">Explanation: </span><br><span class=\"line\">A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:</span><br><span class=\"line\">1st day: 1, 2, 3, 4, 5</span><br><span class=\"line\">2nd day: 6, 7</span><br><span class=\"line\">3rd day: 8</span><br><span class=\"line\">4th day: 9</span><br><span class=\"line\">5th day: 10</span><br><span class=\"line\"></span><br><span class=\"line\">Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. </span><br></pre></td></tr></table></figure>\n\n<p>Binary search probably would not come to our mind when we first meet this problem. We might automatically treat <code>weights</code> as search space and then realize we’ve entered a dead end after wasting lots of time. In fact, we are looking for the minimal one among all feasible capacities. We dig out the monotonicity of this problem: if we can successfully ship all packages within <code>D</code> days with capacity <code>m</code>, then we can definitely ship them all with any capacity larger than <code>m</code>. Now we can design a <code>condition</code> function, let’s call it <code>feasible</code>, given an input <code>capacity</code>, it returns whether it’s possible to ship all packages within <code>D</code> days. This can run in a greedy way: if there’s still room for the current package, we put this package onto the conveyor belt, otherwise we wait for the next day to place this package. If the total days needed exceeds <code>D</code>, we return <code>False</code>, otherwise we return <code>True</code>.</p>\n<p>Next, we need to initialize our boundary correctly. Obviously <code>capacity</code> should be at least <code>max(weights)</code>, otherwise the conveyor belt couldn’t ship the heaviest package. On the other hand, <code>capacity</code> need not be more than<code>sum(weights)</code>, because then we can ship all packages in just one day.</p>\n<p>Now we’ve got all we need to apply our binary search template:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def shipWithinDays(weights: List[int], D: int) -&gt; int:</span><br><span class=\"line\">    def feasible(capacity) -&gt; bool:</span><br><span class=\"line\">        days = 1</span><br><span class=\"line\">        total = 0</span><br><span class=\"line\">        for weight in weights:</span><br><span class=\"line\">            total += weight</span><br><span class=\"line\">            if total &gt; capacity:  # too heavy, wait for the next day</span><br><span class=\"line\">                total = weight</span><br><span class=\"line\">                days += 1</span><br><span class=\"line\">                if days &gt; D:  # cannot ship within D days</span><br><span class=\"line\">                    return False</span><br><span class=\"line\">        return True</span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = max(weights), sum(weights)</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if feasible(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"410-Split-Array-Largest-Sum-Hard\"><a href=\"#410-Split-Array-Largest-Sum-Hard\" class=\"headerlink\" title=\"410. Split Array Largest Sum [Hard]\"></a><a href=\"https://leetcode.com/problems/split-array-largest-sum/\">410. Split Array Largest Sum [Hard]</a></h2><p>Given an array which consists of non-negative integers and an integer <em>m</em>, you can split the array into <em>m</em> non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these <em>m</em> subarrays.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:</span><br><span class=\"line\">nums = [7,2,5,10,8]</span><br><span class=\"line\">m = 2</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">18</span><br><span class=\"line\"></span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.</span><br></pre></td></tr></table></figure>\n\n<p>If you take a close look, you would probably see how similar this problem is with LC 1011 above. Similarly, we can design a <code>feasible</code> function: given an input <code>threshold</code>, then decide if we can split the array into several subarrays such that every subarray-sum is less than or equal to <code>threshold</code>. In this way, we discover the monotonicity of the problem: if <code>feasible(m)</code> is <code>True</code>, then all inputs larger than <code>m</code> can satisfy <code>feasible</code> function. You can see that the solution code is exactly the same as LC 1011.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def splitArray(nums: List[int], m: int) -&gt; int:        </span><br><span class=\"line\">    def feasible(threshold) -&gt; bool:</span><br><span class=\"line\">        count = 1</span><br><span class=\"line\">        total = 0</span><br><span class=\"line\">        for num in nums:</span><br><span class=\"line\">            total += num</span><br><span class=\"line\">            if total &gt; threshold:</span><br><span class=\"line\">                total = num</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\">                if count &gt; m:</span><br><span class=\"line\">                    return False</span><br><span class=\"line\">        return True</span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = max(nums), sum(nums)</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if feasible(mid):</span><br><span class=\"line\">            right = mid     </span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<p>But we probably would have doubts: It’s true that <code>left</code> returned by our solution is the minimal value satisfying <code>feasible</code>, but how can we know that we can split the original array to <strong>actually get this subarray-sum</strong>? For example, let’s say <code>nums = [7,2,5,10,8]</code> and <code>m = 2</code>. We have 4 different ways to split the array to get 4 different largest subarray-sum correspondingly: <code>25:[[7], [2,5,10,8]]</code>, <code>23:[[7,2], [5,10,8]]</code>, <code>18:[[7,2,5], [10,8]]</code>, <code>24:[[7,2,5,10], [8]]</code>. Only 4 values. But our search space <code>[max(nums), sum(nums)] = [10, 32]</code> has much more that just 4 values. That is, no matter how we split the input array, we cannot get most of the values in our search space.</p>\n<p>Let’s say <code>k</code> is the minimal value satisfying <code>feasible</code> function. We can prove the correctness of our solution with <strong>proof by contradiction</strong>. Assume that no subarray’s sum is equal to <code>k</code>, that is, every subarray sum is less than <code>k</code>. The variable <code>total</code> inside <code>feasible</code> function keeps track of the total weights of current load. If our assumption is correct, then <code>total</code> would always be less than <code>k</code>. As a result, <code>feasible(k - 1)</code> must be <code>True</code>, because <code>total</code> would at most be equal to <code>k - 1</code> and would never trigger the if-clause <code>if total &gt; threshold</code>, <strong>therefore <code>feasible(k - 1)</code> must have the same output as <code>feasible(k)</code>, which is <code>True</code></strong>. But we already know that <code>k</code> is the minimal value satisfying <code>feasible</code> function, <strong>so <code>feasible(k - 1)</code> has to be <code>False</code>, which is a contradiction</strong>. So our assumption is incorrect. Now we’ve proved that our algorithm is correct.</p>\n<hr>\n<h2 id=\"875-Koko-Eating-Bananas-Medium\"><a href=\"#875-Koko-Eating-Bananas-Medium\" class=\"headerlink\" title=\"875. Koko Eating Bananas [Medium]\"></a><a href=\"https://leetcode.com/problems/koko-eating-bananas/\">875. Koko Eating Bananas [Medium]</a></h2><p>Koko loves to eat bananas. There are <code>N</code> piles of bananas, the <code>i</code>-th pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>H</code> hours. Koko can decide her bananas-per-hour eating speed of <code>K</code>. Each hour, she chooses some pile of bananas, and eats K bananas from that pile. If the pile has less than <code>K</code> bananas, she eats all of them instead, and won’t eat any more bananas during this hour.</p>\n<p>Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back. <strong>Return the minimum integer <code>K</code> such that she can eat all the bananas within <code>H</code> hours</strong>.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles = [3,6,7,11], H = 8</span><br><span class=\"line\">Output: 4</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles = [30,11,23,4,20], H = 5</span><br><span class=\"line\">Output: 30</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles = [30,11,23,4,20], H = 6</span><br><span class=\"line\">Output: 23</span><br></pre></td></tr></table></figure>\n\n<p>Very similar to LC 1011 and LC 410 mentioned above. Let’s design a <code>feasible</code> function, given an input <code>speed</code>, determine whether Koko can finish all bananas within <code>H</code> hours with hourly eating speed <code>speed</code>. Obviously, the lower bound of the search space is 1, and upper bound is <code>max(piles)</code>, because Koko can only choose one pile of bananas to eat every hour.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def minEatingSpeed(piles: List[int], H: int) -&gt; int:</span><br><span class=\"line\">    def feasible(speed) -&gt; bool:</span><br><span class=\"line\">        # return sum(math.ceil(pile / speed) for pile in piles) &lt;= H  # slower        </span><br><span class=\"line\">        return sum((pile - 1) // speed + 1 for pile in piles) &lt;= H  # faster</span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = 1, max(piles)</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left  + (right - left) // 2</span><br><span class=\"line\">        if feasible(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"1482-Minimum-Number-of-Days-to-Make-m-Bouquets-Medium\"><a href=\"#1482-Minimum-Number-of-Days-to-Make-m-Bouquets-Medium\" class=\"headerlink\" title=\"1482. Minimum Number of Days to Make m Bouquets [Medium]\"></a><a href=\"https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/\">1482. Minimum Number of Days to Make m Bouquets [Medium]</a></h2><p>Given an integer array <code>bloomDay</code>, an integer <code>m</code> and an integer <code>k</code>. We need to make <code>m</code> bouquets. To make a bouquet, you need to use <code>k</code> <strong>adjacent flowers</strong> from the garden. The garden consists of <code>n</code> flowers, the <code>ith</code> flower will bloom in the <code>bloomDay[i]</code> and then can be used in <strong>exactly one</strong> bouquet. Return <em>the minimum number of days</em> you need to wait to be able to make <code>m</code> bouquets from the garden. If it is impossible to make <code>m</code> bouquets return <strong>-1</strong>.</p>\n<p><strong>Examples:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: bloomDay = [1,10,3,10,2], m = 3, k = 1</span><br><span class=\"line\">Output: 3</span><br><span class=\"line\">Explanation: Let&#x27;s see what happened in the first three days. x means flower bloomed and _ means flower didn&#x27;t bloom in the garden.</span><br><span class=\"line\">We need 3 bouquets each should contain 1 flower.</span><br><span class=\"line\">After day 1: [x, _, _, _, _]   // we can only make one bouquet.</span><br><span class=\"line\">After day 2: [x, _, _, _, x]   // we can only make two bouquets.</span><br><span class=\"line\">After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: bloomDay = [1,10,3,10,2], m = 3, k = 2</span><br><span class=\"line\">Output: -1</span><br><span class=\"line\">Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.</span><br></pre></td></tr></table></figure>\n\n<p>Now that we’ve solved three advanced problems above, this one should be pretty easy to do. The monotonicity of this problem is very clear: if we can make <code>m</code> bouquets after waiting for <code>d</code> days, then we can definitely finish that as well if we wait for more than <code>d</code> days.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def minDays(bloomDay: List[int], m: int, k: int) -&gt; int:</span><br><span class=\"line\">    def feasible(days) -&gt; bool:</span><br><span class=\"line\">        bonquets, flowers = 0, 0</span><br><span class=\"line\">        for bloom in bloomDay:</span><br><span class=\"line\">            if bloom &gt; days:</span><br><span class=\"line\">                flowers = 0</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                bonquets += (flowers + 1) // k</span><br><span class=\"line\">                flowers = (flowers + 1) % k</span><br><span class=\"line\">        return bonquets &gt;= m</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(bloomDay) &lt; m * k:</span><br><span class=\"line\">        return -1</span><br><span class=\"line\">    left, right = 1, max(bloomDay)</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if feasible(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"668-Kth-Smallest-Number-in-Multiplication-Table-Hard\"><a href=\"#668-Kth-Smallest-Number-in-Multiplication-Table-Hard\" class=\"headerlink\" title=\"668. Kth Smallest Number in Multiplication Table [Hard]\"></a><a href=\"https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/description/\">668. Kth Smallest Number in Multiplication Table [Hard]</a></h2><p>Nearly every one have used the <a href=\"https://en.wikipedia.org/wiki/Multiplication_table\">Multiplication Table</a>. But could you find out the <code>k-th</code> smallest number quickly from the multiplication table? Given the height <code>m</code> and the length <code>n</code> of a <code>m * n</code> Multiplication Table, and a positive integer <code>k</code>, you need to return the <code>k-th</code> smallest number in this table.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: m = 3, n = 3, k = 5</span><br><span class=\"line\">Output: 3</span><br><span class=\"line\">Explanation: </span><br><span class=\"line\">The Multiplication Table:</span><br><span class=\"line\">1\t2\t3</span><br><span class=\"line\">2\t4\t6</span><br><span class=\"line\">3\t6\t9</span><br><span class=\"line\"></span><br><span class=\"line\">The 5-th smallest number is 3 (1, 2, 2, 3, 3).</span><br></pre></td></tr></table></figure>\n\n<p>For Kth-Smallest problems like this, what comes to our mind first is Heap. Usually we can maintain a Min-Heap and just pop the top of the Heap for k times. However, that doesn’t work out in this problem. We don’t have every single number in the entire Multiplication Table, instead, we only have the height and the length of the table. If we are to apply Heap method, we need to explicitly calculate these <code>m * n</code> values and save them to a heap. The time complexity and space complexity of this process are both O(mn), which is quite inefficient. This is when binary search comes in. Remember we say that designing <code>condition</code> function is the most difficult part? In order to find the k-th smallest value in the table, we can design an <code>enough</code> function, given an input <code>num</code>, determine whether there’re at least k values less than or equal to <code>num</code>. <strong>The minimal <code>num</code> satisfying <code>enough</code> function is the answer we’re looking for</strong>. Recall that the key to binary search is discovering monotonicity. In this problem, if <code>num</code> satisfies <code>enough</code>, then of course any value larger than <code>num</code> can satisfy. This monotonicity is the fundament of our binary search algorithm.</p>\n<p>Let’s consider search space. Obviously the lower bound should be 1, and the upper bound should be the largest value in the Multiplication Table, which is <code>m * n</code>, then we have search space <code>[1, m * n]</code>. The overwhelming advantage of binary search solution to heap solution is that it doesn’t need to explicitly calculate all numbers in that table, all it needs is just picking up one value out of the search space and apply <code>enough</code> function to this value, to determine should we keep the left half or the right half of the search space. In this way, binary search solution only requires constant space complexity, much better than heap solution.</p>\n<p>Next let’s consider how to implement <code>enough</code> function. It can be observed that every row in the Multiplication Table is just multiples of its index. For example, all numbers in 3rd row <code>[3,6,9,12,15...]</code> are multiples of 3. Therefore, we can just go row by row to count the total number of entries less than or equal to input <code>num</code>. Following is the complete solution.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def findKthNumber(m: int, n: int, k: int) -&gt; int:</span><br><span class=\"line\">    def enough(num) -&gt; bool:</span><br><span class=\"line\">        count = 0</span><br><span class=\"line\">        for val in range(1, m + 1):  # count row by row</span><br><span class=\"line\">            add = min(num // val, n)</span><br><span class=\"line\">            if add == 0:  # early exit</span><br><span class=\"line\">                break</span><br><span class=\"line\">            count += add</span><br><span class=\"line\">        return count &gt;= k                </span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = 1, n * m</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if enough(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left </span><br></pre></td></tr></table></figure>\n\n<p>In LC 410 above, we have doubt “Is the result from binary search actually a subarray sum?”. Here we have a similar doubt: “<strong>Is the result from binary search actually in the Multiplication Table?</strong>“. The answer is yes, and we also can apply proof by contradiction. Denote <code>num</code> as the minimal input that satisfies <code>enough</code> function. Let’s assume that <code>num</code> is not in the table, which means that <code>num</code> is not divisible by any <code>val</code> in <code>[1, m]</code>, that is, <code>num % val &gt; 0</code>. Therefore, changing the input from <code>num</code> to <code>num - 1</code> doesn’t have any effect on the expression <code>add = min(num // val, n)</code>. So <code>enough(num - 1)</code> would also return <code>True</code>, same as <code>enough(num)</code>. But we already know <code>num</code> is the minimal input satisfying <code>enough</code> function, so <code>enough(num - 1)</code> has to be <code>False</code>. Contradiction! The opposite of our original assumption is true: <code>num</code> is actually in the table.</p>\n<hr>\n<h2 id=\"719-Find-K-th-Smallest-Pair-Distance-Hard\"><a href=\"#719-Find-K-th-Smallest-Pair-Distance-Hard\" class=\"headerlink\" title=\"719. Find K-th Smallest Pair Distance [Hard]\"></a><a href=\"https://leetcode.com/problems/find-k-th-smallest-pair-distance/\">719. Find K-th Smallest Pair Distance [Hard]</a></h2><p>Given an integer array, return the k-th smallest <strong>distance</strong> among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:</span><br><span class=\"line\">nums = [1,3,1]</span><br><span class=\"line\">k = 1</span><br><span class=\"line\">Output: 0 </span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">Following are all the pairs. The 1st smallest distance pair is (1,1), and its distance is 0.</span><br><span class=\"line\">(1,3) -&gt; 2</span><br><span class=\"line\">(1,1) -&gt; 0</span><br><span class=\"line\">(3,1) -&gt; 2</span><br></pre></td></tr></table></figure>\n\n<p>Very similar to LC 668 above, both are about finding Kth-Smallest. Just like LC 668, We can design an <code>enough</code> function, given an input <code>distance</code>, determine whether there’re at least k pairs whose distances are less than or equal to <code>distance</code>. We can sort the input array and use two pointers (fast pointer and slow pointer, pointed at a pair) to scan it. Both pointers go from leftmost end. If the current pair pointed at has a distance less than or equal to <code>distance</code>, all pairs between these pointers are valid (since the array is already sorted), we move forward the fast pointer. Otherwise, we move forward the slow pointer. By the time both pointers reach the rightmost end, we finish our scan and see if total counts exceed k. Here is the implementation:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def enough(distance) -&gt; bool:  # two pointers</span><br><span class=\"line\">    count, i, j = 0, 0, 0</span><br><span class=\"line\">    while i &lt; n or j &lt; n:</span><br><span class=\"line\">        while j &lt; n and nums[j] - nums[i] &lt;= distance:  # move fast pointer</span><br><span class=\"line\">            j += 1</span><br><span class=\"line\">        count += j - i - 1  # count pairs</span><br><span class=\"line\">        i += 1  # move slow pointer</span><br><span class=\"line\">    return count &gt;= k</span><br></pre></td></tr></table></figure>\n\n<p>Obviously, our search space should be <code>[0, max(nums) - min(nums)]</code>. Now we are ready to copy-paste our template:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def smallestDistancePair(nums: List[int], k: int) -&gt; int:</span><br><span class=\"line\">    nums.sort()</span><br><span class=\"line\">    n = len(nums)</span><br><span class=\"line\">    left, right = 0, nums[-1] - nums[0]</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if enough(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"1201-Ugly-Number-III-Medium\"><a href=\"#1201-Ugly-Number-III-Medium\" class=\"headerlink\" title=\"1201. Ugly Number III [Medium]\"></a><a href=\"https://leetcode.com/problems/ugly-number-iii/\">1201. Ugly Number III [Medium]</a></h2><p>Write a program to find the <code>n</code>-th ugly number. Ugly numbers are <strong>positive integers</strong> which are divisible by <code>a</code> <strong>or</strong> <code>b</code> <strong>or</strong> <code>c</code>.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n = 3, a = 2, b = 3, c = 5</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n = 4, a = 2, b = 3, c = 4</span><br><span class=\"line\">Output: 6</span><br><span class=\"line\">Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.</span><br></pre></td></tr></table></figure>\n\n<p>Nothing special. Still finding the Kth-Smallest. We need to design an <code>enough</code> function, given an input <code>num</code>, determine whether there are at least n ugly numbers less than or equal to <code>num</code>. Since <code>a</code> might be a multiple of <code>b</code> or <code>c</code>, or the other way round, we need the help of greatest common divisor to avoid counting duplicate numbers.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def nthUglyNumber(n: int, a: int, b: int, c: int) -&gt; int:</span><br><span class=\"line\">    def enough(num) -&gt; bool:</span><br><span class=\"line\">        total = num//a + num//b + num//c - num//ab - num//ac - num//bc + num//abc</span><br><span class=\"line\">        return total &gt;= n</span><br><span class=\"line\"></span><br><span class=\"line\">    ab = a * b // math.gcd(a, b)</span><br><span class=\"line\">    ac = a * c // math.gcd(a, c)</span><br><span class=\"line\">    bc = b * c // math.gcd(b, c)</span><br><span class=\"line\">    abc = a * bc // math.gcd(a, bc)</span><br><span class=\"line\">    left, right = 1, 10 ** 10</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if enough(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"1283-Find-the-Smallest-Divisor-Given-a-Threshold-Medium\"><a href=\"#1283-Find-the-Smallest-Divisor-Given-a-Threshold-Medium\" class=\"headerlink\" title=\"1283. Find the Smallest Divisor Given a Threshold [Medium]\"></a><a href=\"https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/\">1283. Find the Smallest Divisor Given a Threshold [Medium]</a></h2><p>Given an array of integers <code>nums</code> and an integer <code>threshold</code>, we will choose a positive integer divisor and divide all the array by it and sum the result of the division. Find the <strong>smallest</strong> divisor such that the result mentioned above is less than or equal to <code>threshold</code>.</p>\n<p>Each result of division is rounded to the nearest integer greater than or equal to that element. (For example: 7&#x2F;3 &#x3D; 3 and 10&#x2F;2 &#x3D; 5). It is guaranteed that there will be an answer.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [1,2,5,9], threshold = 6</span><br><span class=\"line\">Output: 5</span><br><span class=\"line\">Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. </span><br><span class=\"line\">If the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). </span><br></pre></td></tr></table></figure>\n\n<p>After so many problems introduced above, this one should be a piece of cake. We don’t even need to bother to design a <code>condition</code> function, because the problem has already told us explicitly what condition we need to satisfy.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def smallestDivisor(nums: List[int], threshold: int) -&gt; int:</span><br><span class=\"line\">    def condition(divisor) -&gt; bool:</span><br><span class=\"line\">        return sum((num - 1) // divisor + 1 for num in nums) &lt;= threshold</span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = 1, max(nums)</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if condition(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h1><p>Wow, thank you so much for making it to the end! Really appreciate that. As you can see from the python codes above, they all look very similar to each other. That’s because I copy-pasted my own template all the time. No exception. This is the strong proof of my template’s powerfulness and adaptability. I believe everyone can acquire this binary search template to solve many problems. All we need is just more practice to build up our ability to discover the monotonicity of the problem and to design a beautiful <code>condition</code> function.</p>\n<p>Hope this helps.</p>\n<p><strong>Reference</strong></p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/split-array-largest-sum/discuss/89819/C%2B%2B-Fast-Very-clear-explanation-Clean-Code-Solution-with-Greedy-Algorithm-and-Binary-Search\">[C++ &#x2F; Fast &#x2F; Very clear explanation &#x2F; Clean Code] Solution with Greedy Algorithm and Binary Search</a></li>\n<li><a href=\"https://leetcode.com/problems/find-k-th-smallest-pair-distance/discuss/109082/Approach-the-problem-using-the-%22trial-and-error%22-algorithm\">Approach the problem using the “trial and error” algorithm</a></li>\n<li><a href=\"https://leetcode.com/problems/binary-search/discuss/423162/Binary-Search-101-The-Ultimate-Binary-Search-Handbook\">Binary Search 101 The-Ultimate-Binary-Search-Handbook - LeetCode</a></li>\n<li><a href=\"https://leetcode.com/problems/ugly-number-iii/discuss/387539/cpp-Binary-Search-with-picture-and-Binary-Search-Template\">ugly-number-iii Binary Search with picture &amp; Binary Search Template - LeetCode</a></li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "Binary Search"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/dp-for-beginners/",
            "url": "https://samirpaul.in/posts/dp-for-beginners/",
            "title": "DP for Beginners",
            "date_published": "2023-08-05T20:52:53.890Z",
            "content_html": "<p><strong>Longest Increasing Subsequence variants:</strong><br><a href=\"https://leetcode.com/problems/longest-increasing-subsequence/\">https://leetcode.com/problems/longest-increasing-subsequence/</a><br><a href=\"https://leetcode.com/problems/largest-divisible-subset/\">https://leetcode.com/problems/largest-divisible-subset/</a><br><a href=\"https://leetcode.com/problems/russian-doll-envelopes/\">https://leetcode.com/problems/russian-doll-envelopes/</a><br><a href=\"https://leetcode.com/problems/maximum-length-of-pair-chain/\">https://leetcode.com/problems/maximum-length-of-pair-chain/</a><br><a href=\"https://leetcode.com/problems/number-of-longest-increasing-subsequence/\">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a><br><a href=\"https://leetcode.com/problems/delete-and-earn/\">https://leetcode.com/problems/delete-and-earn/</a><br><a href=\"https://leetcode.com/problems/longest-string-chain/\">https://leetcode.com/problems/longest-string-chain/</a></p>\n<p><strong>Partition Subset:</strong><br><a href=\"https://leetcode.com/problems/partition-equal-subset-sum/\">https://leetcode.com/problems/partition-equal-subset-sum/</a><br><a href=\"https://leetcode.com/problems/last-stone-weight-ii/\">https://leetcode.com/problems/last-stone-weight-ii/</a></p>\n<p><strong>BitMasking:</strong><br><a href=\"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/\">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a></p>\n<p><strong>Longest Common Subsequence Variant:</strong><br><a href=\"https://leetcode.com/problems/longest-common-subsequence/\">https://leetcode.com/problems/longest-common-subsequence/</a><br><a href=\"https://leetcode.com/problems/edit-distance/\">https://leetcode.com/problems/edit-distance/</a><br><a href=\"https://leetcode.com/problems/distinct-subsequences/\">https://leetcode.com/problems/distinct-subsequences/</a><br><a href=\"https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/\">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>\n<p><strong>Palindrome:</strong><br><a href=\"https://leetcode.com/problems/palindrome-partitioning-ii/\">https://leetcode.com/problems/palindrome-partitioning-ii/</a><br><a href=\"https://leetcode.com/problems/palindromic-substrings/\">https://leetcode.com/problems/palindromic-substrings/</a></p>\n<p><strong>Coin Change variant:</strong><br><a href=\"https://leetcode.com/problems/coin-change/\">https://leetcode.com/problems/coin-change/</a><br><a href=\"https://leetcode.com/problems/coin-change-2/\">https://leetcode.com/problems/coin-change-2/</a><br><a href=\"https://leetcode.com/problems/combination-sum-iv/\">https://leetcode.com/problems/combination-sum-iv/</a><br><a href=\"https://leetcode.com/problems/perfect-squares/\">https://leetcode.com/problems/perfect-squares/</a><br><a href=\"https://leetcode.com/problems/minimum-cost-for-tickets/\">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>\n<p><strong>Matrix multiplication variant:</strong><br><a href=\"https://leetcode.com/problems/minimum-score-triangulation-of-polygon/\">https://leetcode.com/problems/minimum-score-triangulation-of-polygon/</a><br><a href=\"https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/\">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a><br><a href=\"https://leetcode.com/problems/burst-balloons/\">https://leetcode.com/problems/burst-balloons/</a></p>\n<p><strong>Matrix&#x2F;2D Array:</strong><br><a href=\"https://leetcode.com/problems/matrix-block-sum/\">https://leetcode.com/problems/matrix-block-sum/</a><br><a href=\"https://leetcode.com/problems/range-sum-query-2d-immutable/\">https://leetcode.com/problems/range-sum-query-2d-immutable/</a><br><a href=\"https://leetcode.com/problems/dungeon-game/\">https://leetcode.com/problems/dungeon-game/</a><br><a href=\"https://leetcode.com/problems/triangle/\">https://leetcode.com/problems/triangle/</a><br><a href=\"https://leetcode.com/problems/maximal-square/\">https://leetcode.com/problems/maximal-square/</a><br><a href=\"https://leetcode.com/problems/minimum-falling-path-sum/\">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>\n<p><strong>Hash + DP:</strong><br><a href=\"https://leetcode.com/problems/target-sum/\">https://leetcode.com/problems/target-sum/</a><br><a href=\"https://leetcode.com/problems/longest-arithmetic-sequence/\">https://leetcode.com/problems/longest-arithmetic-sequence/</a><br><a href=\"https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/\">https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/</a><br><a href=\"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/\">https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/</a></p>\n<p><strong>State machine:</strong><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>\n<p><strong>Depth First Search + DP:</strong><br><a href=\"https://leetcode.com/problems/out-of-boundary-paths/\">https://leetcode.com/problems/out-of-boundary-paths/</a><br><a href=\"https://leetcode.com/problems/knight-probability-in-chessboard/\">https://leetcode.com/problems/knight-probability-in-chessboard/</a></p>\n<p><strong>Minimax DP:</strong><br><a href=\"https://leetcode.com/problems/predict-the-winner/\">https://leetcode.com/problems/predict-the-winner/</a><br><a href=\"https://leetcode.com/problems/stone-game/\">https://leetcode.com/problems/stone-game/</a></p>\n<p><strong>Misc:</strong><br><a href=\"https://leetcode.com/problems/greatest-sum-divisible-by-three/\">https://leetcode.com/problems/greatest-sum-divisible-by-three/</a><br><a href=\"https://leetcode.com/problems/decode-ways/\">https://leetcode.com/problems/decode-ways/</a><br><a href=\"https://leetcode.com/problems/perfect-squares/\">https://leetcode.com/problems/perfect-squares/</a><br><a href=\"https://leetcode.com/problems/count-numbers-with-unique-digits/\">https://leetcode.com/problems/count-numbers-with-unique-digits/</a><br><a href=\"https://leetcode.com/problems/longest-turbulent-subarray/\">https://leetcode.com/problems/longest-turbulent-subarray/</a><br><a href=\"https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/\">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>\n<hr>\n<h1 id=\"Sample-solutions-for-each-of-above-problem-type\"><a href=\"#Sample-solutions-for-each-of-above-problem-type\" class=\"headerlink\" title=\"Sample solutions for each of above problem type:\"></a>Sample solutions for each of above problem type:</h1><hr>\n<p><strong>Longest Increasing Subsequence</strong><br><a href=\"https://leetcode.com/problems/longest-increasing-subsequence/\">https://leetcode.com/problems/longest-increasing-subsequence/</a><br><a href=\"https://leetcode.com/problems/largest-divisible-subset/\">https://leetcode.com/problems/largest-divisible-subset/</a><br><a href=\"https://leetcode.com/problems/russian-doll-envelopes/\">https://leetcode.com/problems/russian-doll-envelopes/</a><br><a href=\"https://leetcode.com/problems/maximum-length-of-pair-chain/\">https://leetcode.com/problems/maximum-length-of-pair-chain/</a><br><a href=\"https://leetcode.com/problems/number-of-longest-increasing-subsequence/\">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a><br><a href=\"https://leetcode.com/problems/delete-and-earn/\">https://leetcode.com/problems/delete-and-earn/</a><br><a href=\"https://leetcode.com/problems/longest-string-chain/\">https://leetcode.com/problems/longest-string-chain/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint lengthOfLIS(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;int&gt;LIS(n+1, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; i; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (nums[i] &gt; nums[j])</span><br><span class=\"line\">\t\t\t\t\tLIS[i] = max(LIS[i], 1 + LIS[j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint ans = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tans = max(ans, LIS[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Partition Subset Sum:</strong><br><a href=\"https://leetcode.com/problems/partition-equal-subset-sum/\">https://leetcode.com/problems/partition-equal-subset-sum/</a><br><a href=\"https://leetcode.com/problems/last-stone-weight-ii/\">https://leetcode.com/problems/last-stone-weight-ii/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tbool canPartition(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint sum = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tsum += nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (sum % 2 != 0) return false;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint target = sum/2;</span><br><span class=\"line\">\t\tvector&lt;bool&gt;dp(target+1, false);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdp[0] = true;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = target; j &gt;= nums[i]; j--) &#123;</span><br><span class=\"line\">\t\t\t\tdp[j] = dp[j] | dp[j - nums[i]];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn dp[target];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>BitMasking in DP:</strong><br><a href=\"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/\">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint dp[(1&lt;&lt;16) + 2];</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tbool canPartitionKSubsets(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfill(dp, dp+(1&lt;&lt;16)+2, -1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint sum = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tsum += nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (sum % k != 0) return false;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint target = sum/k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdp[0] = 0;</span><br><span class=\"line\">\t\tfor (int mask = 0; mask &lt; (1&lt;&lt;n); mask++) &#123;</span><br><span class=\"line\">\t\t\tif (dp[mask] == -1) continue;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t\tif (!(mask &amp; (1 &lt;&lt; i)) &amp;&amp; dp[mask] + nums[i] &lt;= target)</span><br><span class=\"line\">\t\t\t\t\tdp[mask | (1 &lt;&lt; i)] = (dp[mask] + nums[i]) % target;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn dp[(1&lt;&lt;n)-1] == 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Longest Common Subsequence</strong><br><a href=\"https://leetcode.com/problems/longest-common-subsequence/\">https://leetcode.com/problems/longest-common-subsequence/</a><br><a href=\"https://leetcode.com/problems/edit-distance/\">https://leetcode.com/problems/edit-distance/</a><br><a href=\"https://leetcode.com/problems/distinct-subsequences/\">https://leetcode.com/problems/distinct-subsequences/</a><br><a href=\"https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/\">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint longestCommonSubsequenceUtil(string text1, string text2, int n, int m) &#123;</span><br><span class=\"line\">\t\tif (n == 0 || m == 0)</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;vector&lt;int&gt;&gt;L(n+1, vector&lt;int&gt;(m+1, 0));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt;= m; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (i == 0 || j == 0)</span><br><span class=\"line\">\t\t\t\t\tL[i][j] = 0;</span><br><span class=\"line\">\t\t\t\telse if (text1[i-1] == text2[j-1])</span><br><span class=\"line\">\t\t\t\t\tL[i][j] = 1 + L[i-1][j-1];</span><br><span class=\"line\">\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t\tL[i][j] = max(L[i][j-1], L[i-1][j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn L[n][m];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint longestCommonSubsequence(string text1, string text2) &#123;</span><br><span class=\"line\">\t\tint n = text1.size();</span><br><span class=\"line\">\t\tint m = text2.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn longestCommonSubsequenceUtil(text1, text2, n, m);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Palindrome:</strong><br><a href=\"https://leetcode.com/problems/palindrome-partitioning-ii/\">https://leetcode.com/problems/palindrome-partitioning-ii/</a><br><a href=\"https://leetcode.com/problems/palindromic-substrings/\">https://leetcode.com/problems/palindromic-substrings/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint minCut(string s) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint res[n];</span><br><span class=\"line\">\t\tbool P[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tP[i][i] = true;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int L = 2; L &lt;= n; L++) &#123;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; n-L+1; i++) &#123;</span><br><span class=\"line\">\t\t\t\tint j = i+L-1;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tif (L == 2) &#123;</span><br><span class=\"line\">\t\t\t\t\tP[i][j] = (s[i] == s[j]);</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tP[i][j] = (s[i] == s[j]) &amp;&amp; P[i+1][j-1];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tif (P[0][i])</span><br><span class=\"line\">\t\t\t\tres[i] = 0;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\tres[i] = INT_MAX;</span><br><span class=\"line\">\t\t\t\tfor (int j = 0; j &lt; i; j++) &#123;</span><br><span class=\"line\">\t\t\t\t\tif (P[j+1][i] &amp;&amp; res[i] &gt; 1 + res[j])</span><br><span class=\"line\">\t\t\t\t\t\tres[i] = 1+res[j];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn res[n-1] == INT_MAX ? 1 : res[n-1];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Coin Change:</strong><br><a href=\"https://leetcode.com/problems/coin-change/\">https://leetcode.com/problems/coin-change/</a><br><a href=\"https://leetcode.com/problems/coin-change-2/\">https://leetcode.com/problems/coin-change-2/</a><br><a href=\"https://leetcode.com/problems/combination-sum-iv/\">https://leetcode.com/problems/combination-sum-iv/</a><br><a href=\"https://leetcode.com/problems/perfect-squares/\">https://leetcode.com/problems/perfect-squares/</a><br><a href=\"https://leetcode.com/problems/minimum-cost-for-tickets/\">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = coins.size();</span><br><span class=\"line\">\t\tif (n == 0) return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;int&gt;res(amount+1, INT_MAX);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tres[0] = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j =  coins[i]; j &lt;= amount; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (res[j-coins[i]] != INT_MAX)</span><br><span class=\"line\">\t\t\t\t\tres[j] = min(res[j], 1+res[j-coins[i]]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn res[amount] != INT_MAX ? res[amount] : -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Matrix multiplication:</strong><br><a href=\"https://leetcode.com/problems/minimum-score-triangulation-of-polygon/\">https://leetcode.com/problems/minimum-score-triangulation-of-polygon/</a><br><a href=\"https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/\">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a><br><a href=\"https://leetcode.com/problems/burst-balloons/\">https://leetcode.com/problems/burst-balloons/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint minScoreTriangulation(vector&lt;int&gt;&amp; A) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = A.size();        </span><br><span class=\"line\">\t\tvector&lt;vector&lt;int&gt;&gt;dp(n, vector&lt;int&gt;(n, 0));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int L = 2; L &lt;= n; L++) &#123;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i+L &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t\tint j = i+L;</span><br><span class=\"line\">\t\t\t\tdp[i][j] = INT_MAX;</span><br><span class=\"line\">\t\t\t\tfor (int k = i+1; k &lt; j; k++) &#123;</span><br><span class=\"line\">\t\t\t\t\tdp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i]*A[k]*A[j]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn dp[0][n-1];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Matrix&#x2F;2D Array:</strong><br><a href=\"https://leetcode.com/problems/matrix-block-sum/\">https://leetcode.com/problems/matrix-block-sum/</a><br><a href=\"https://leetcode.com/problems/range-sum-query-2d-immutable/\">https://leetcode.com/problems/range-sum-query-2d-immutable/</a><br><a href=\"https://leetcode.com/problems/dungeon-game/\">https://leetcode.com/problems/dungeon-game/</a><br><a href=\"https://leetcode.com/problems/triangle/\">https://leetcode.com/problems/triangle/</a><br><a href=\"https://leetcode.com/problems/maximal-square/\">https://leetcode.com/problems/maximal-square/</a><br><a href=\"https://leetcode.com/problems/minimum-falling-path-sum/\">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tvector&lt;vector&lt;int&gt;&gt; matrixBlockSum(vector&lt;vector&lt;int&gt;&gt;&amp; mat, int K) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint m = mat.size();</span><br><span class=\"line\">\t\tint n = mat[0].size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;vector&lt;int&gt;&gt;sum(m+1, vector&lt;int&gt;(n+1, 0));</span><br><span class=\"line\">\t\tfor (int i = 1; i &lt;= m; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 1; j &lt;= n; j++) &#123;</span><br><span class=\"line\">\t\t\t\tsum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;vector&lt;int&gt;&gt;res(m, vector&lt;int&gt;(n, 0));</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t\tint r1 = max(0, i-K); int c1 = max(0, j-K);</span><br><span class=\"line\">\t\t\t\tint r2 = min(m-1, i+K); int c2 = min(n-1, j+K);</span><br><span class=\"line\">\t\t\t\tr1++; r2++;</span><br><span class=\"line\">\t\t\t\tc1++; c2++;</span><br><span class=\"line\">\t\t\t\tres[i][j] = sum[r2][c2] - (sum[r2][c1-1] + sum[r1-1][c2]- sum[r1-1][c1-1]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Hash + DP:</strong><br><a href=\"https://leetcode.com/problems/target-sum/\">https://leetcode.com/problems/target-sum/</a><br><a href=\"https://leetcode.com/problems/longest-arithmetic-sequence/\">https://leetcode.com/problems/longest-arithmetic-sequence/</a><br><a href=\"https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/\">https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/</a><br><a href=\"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/\">https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint findTargetSumWays(vector&lt;int&gt;&amp; nums, int S) &#123;</span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\">\t\tunordered_map&lt;int, int&gt;hm;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thm[0] = 1;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tauto mp = hm;</span><br><span class=\"line\">\t\t\thm.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tfor (auto it = mp.begin(); it != mp.end(); it++) &#123;</span><br><span class=\"line\">\t\t\t\thm[it-&gt;first + nums[i]] += it-&gt;second;</span><br><span class=\"line\">\t\t\t\thm[it-&gt;first - nums[i]] += it-&gt;second;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn hm[S];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>State machine:</strong><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint maxProfit(vector&lt;int&gt;&amp; prices, int fee) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = prices.size();</span><br><span class=\"line\">\t\tvector&lt;int&gt;buy(n, 0);</span><br><span class=\"line\">\t\tvector&lt;int&gt;sell(n, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbuy[0] = -prices[0], sell[0] = 0;</span><br><span class=\"line\">\t\tfor (int i = 1; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tbuy[i] = max(buy[i-1], sell[i-1]-prices[i]);</span><br><span class=\"line\">\t\t\tsell[i] = max(sell[i-1], buy[i-1]+prices[i]-fee);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn sell[n-1];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Depth First Search +DP:<br><a href=\"https://leetcode.com/problems/out-of-boundary-paths/\">https://leetcode.com/problems/out-of-boundary-paths/</a><br><a href=\"https://leetcode.com/problems/knight-probability-in-chessboard/\">https://leetcode.com/problems/knight-probability-in-chessboard/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint mod = 1000000007;</span><br><span class=\"line\">\tint dfs(int m, int n, int N, int r, int c,  vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;&amp; dp) &#123;</span><br><span class=\"line\">\t\tif (r &lt; 0 || c &lt; 0 || r &gt;= m || c &gt;= n) return 1;</span><br><span class=\"line\">\t\tif (N == 0) return 0;</span><br><span class=\"line\">\t\tif (dp[N][r][c] != -1) return dp[N][r][c]%mod;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint moves = 0;</span><br><span class=\"line\">\t\tmoves =  (moves + dfs(m, n, N-1, r, c+1, dp))%mod;</span><br><span class=\"line\">\t\tmoves =  (moves + dfs(m, n, N-1, r, c-1, dp))%mod;</span><br><span class=\"line\">\t\tmoves =  (moves + dfs(m, n, N-1, r+1, c, dp))%mod;</span><br><span class=\"line\">\t\tmoves =  (moves + dfs(m, n, N-1, r-1, c, dp))%mod;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdp[N][r][c] = moves%mod;</span><br><span class=\"line\">\t\treturn dp[N][r][c];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint findPaths(int m, int n, int N, int i, int j) &#123;</span><br><span class=\"line\">\t\tvector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;dp(N+1, vector&lt;vector&lt;int&gt;&gt;(m+1, vector&lt;int&gt;(n+1, -1)));</span><br><span class=\"line\">\t\treturn dfs(m, n, N, i, j, dp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Minimax DP:</strong><br><a href=\"https://leetcode.com/problems/predict-the-winner/\">https://leetcode.com/problems/predict-the-winner/</a><br><a href=\"https://leetcode.com/problems/stone-game/\">https://leetcode.com/problems/stone-game/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tbool PredictTheWinner(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint res[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tres[i][i] = nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int l = 2; l &lt;= n; l++) &#123;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i+l-1 &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t\tint j = i+l-1;</span><br><span class=\"line\">\t\t\t\tint a = (i+1 &lt;= j-1) ? res[i+1][j-1] : 0;</span><br><span class=\"line\">\t\t\t\tint b = (i+2 &lt;= j) ? res[i+2][j] : 0;</span><br><span class=\"line\">\t\t\t\tint c = (i &lt;= j-2) ? res[i][j-2] : 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tres[i][j] = max(nums[i] + min(a,b), nums[j] + min(a, c));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint total = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\ttotal += nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn res[0][n-1] &gt;= total - res[0][n-1];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Miscellaneous:</strong><br><a href=\"https://leetcode.com/problems/greatest-sum-divisible-by-three/\">https://leetcode.com/problems/greatest-sum-divisible-by-three/</a><br><a href=\"https://leetcode.com/problems/decode-ways/\">https://leetcode.com/problems/decode-ways/</a><br><a href=\"https://leetcode.com/problems/count-numbers-with-unique-digits/\">https://leetcode.com/problems/count-numbers-with-unique-digits/</a><br><a href=\"https://leetcode.com/problems/longest-turbulent-subarray/\">https://leetcode.com/problems/longest-turbulent-subarray/</a><br><a href=\"https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/\">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "dp"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/dynamic-programming-patterns/",
            "url": "https://samirpaul.in/posts/dynamic-programming-patterns/",
            "title": "Dynamic Programming Patterns",
            "date_published": "2023-08-05T20:52:53.890Z",
            "content_html": "<p><img src=\"https://user-images.githubusercontent.com/77569653/226705479-a4d6c0a3-0191-4d45-8bf6-597ffaa5de40.png\" alt=\"Banner\"></p>\n<p>Before starting the topic let me introduce myself. I am a Mobile Developer currently working in Warsaw and spending my free time for interview preparations. I started to prepare for interviews two years ago. At that time I should say I could not solve the two sum problem. Easy problems seemed to me like hard ones so most of the time I had to look at editorials and discuss section. Currently, I have solved ~800 problems and time to time participate in contests. I usually solve 3 problems in a contest and sometimes 4 problems. Ok, lets come back to the topic.</p>\n<p>Recently I have concentrated my attention on Dynamic Programming cause its one of the hardest topics in an interview prep. After solving ~140 problems in DP I have noticed that there are few patterns that can be found in different problems. So I did a research on that and find the following topics. I will not give complete ways how to solve problems but these patterns may be helpful in solving DP.</p>\n<h1 id=\"Patterns\"><a href=\"#Patterns\" class=\"headerlink\" title=\"Patterns\"></a>Patterns</h1><hr>\n<p><a href=\"https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Minimum-(Maximum)-Path-to-Reach-a-Target\">Minimum (Maximum) Path to Reach a Target</a><br><a href=\"https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#distinct-ways\">Distinct Ways</a><br><a href=\"https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Merging-Intervals\">Merging Intervals</a><br><a href=\"https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#DP-on-Strings\">DP on Strings</a><br><a href=\"https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Decision-Making\">Decision Making</a></p>\n<h1 id=\"Minimum-Maximum-Path-to-Reach-a-Target\"><a href=\"#Minimum-Maximum-Path-to-Reach-a-Target\" class=\"headerlink\" title=\"Minimum (Maximum) Path to Reach a Target\"></a>Minimum (Maximum) Path to Reach a Target</h1><hr>\n<p>Problem list: <a href=\"https://leetcode.com/list/55ac4kuc\">https://leetcode.com/list/55ac4kuc</a></p>\n<p>Generate problem statement for this pattern</p>\n<h3 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><blockquote>\n<p>Given a target find minimum (maximum) cost &#x2F; path &#x2F; sum to reach the target.</p>\n</blockquote>\n<h3 id=\"Approach\"><a href=\"#Approach\" class=\"headerlink\" title=\"Approach\"></a>Approach</h3><blockquote>\n<p>Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes[i] = min(routes[i-1], routes[i-2], ... , routes[i-k]) + cost[i]</span><br></pre></td></tr></table></figure>\n\n<p>Generate optimal solutions for all values in the target and return the value for the target.</p>\n<h3 id=\"Top-Down\"><a href=\"#Top-Down\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int j = 0; j &lt; ways.size(); ++j) &#123;</span><br><span class=\"line\">    result = min(result, topDown(target - ways[j]) + cost/ path / sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return memo[/*state parameters*/] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up\"><a href=\"#Bottom-Up\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt;= target; ++i) &#123;</span><br><span class=\"line\">   for (int j = 0; j &lt; ways.size(); ++j) &#123;</span><br><span class=\"line\">       if (ways[j] &lt;= i) &#123;</span><br><span class=\"line\">           dp[i] = min(dp[i], dp[i - ways[j]] + cost / path / sum) ;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return dp[target]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Similar-Problems\"><a href=\"#Similar-Problems\" class=\"headerlink\" title=\"Similar Problems\"></a>Similar Problems</h3><p><a href=\"https://leetcode.com/problems/min-cost-climbing-stairs/\">746. Min Cost Climbing Stairs</a> <code>Easy</code></p>\n<h3 id=\"Top-Down-1\"><a href=\"#Top-Down-1\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int result = min(minCost(n-1, cost, memo), minCost(n-2, cost, memo)) + (n == cost.size() ? 0 : cost[n]);</span><br><span class=\"line\">return memo[n] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-1\"><a href=\"#Bottom-Up-1\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 2; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">   dp[i] = min(dp[i-1], dp[i-2]) + (i == n ? 0 : cost[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return dp[n]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/minimum-path-sum/\">64. Minimum Path Sum</a> <code>Medium</code></p>\n<h3 id=\"Top-Down-2\"><a href=\"#Top-Down-2\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int result = min(pathSum(i+1, j, grid, memo), pathSum(i, j+1, grid, memo)) + grid[i][j];</span><br><span class=\"line\">    </span><br><span class=\"line\">return memo[i][j] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-2\"><a href=\"#Bottom-Up-2\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">   for (int j = 1; j &lt; m; ++j) &#123;</span><br><span class=\"line\">       grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return grid[n-1][m-1]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/coin-change/\">322. Coin Change</a> <code>Medium</code></p>\n<h3 id=\"Top-Down-3\"><a href=\"#Top-Down-3\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 0; i &lt; coins.size(); ++i) &#123;</span><br><span class=\"line\">    if (coins[i] &lt;= target) &#123; // check validity of a sub-problem</span><br><span class=\"line\">        result = min(ans, CoinChange(target - coins[i], coins) + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return memo[target] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-3\"><a href=\"#Bottom-Up-3\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int j = 1; j &lt;= amount; ++j) &#123;</span><br><span class=\"line\">   for (int i = 0; i &lt; coins.size(); ++i) &#123;</span><br><span class=\"line\">       if (coins[i] &lt;= j) &#123;</span><br><span class=\"line\">           dp[j] = min(dp[j], dp[j - coins[i]] + 1);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/minimum-falling-path-sum/\">931. Minimum Falling Path Sum</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-cost-for-tickets/\">983. Minimum Cost For Tickets</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/2-keys-keyboard/\">650. 2 Keys Keyboard</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/perfect-squares/\">279. Perfect Squares</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/last-stone-weight-ii/\">1049. Last Stone Weight II</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/triangle/\">120. Triangle</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/ones-and-zeroes/\">474. Ones and Zeroes</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/maximal-square/\">221. Maximal Square</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/coin-change/\">322. Coin Change</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/\">1240. Tiling a Rectangle with the Fewest Squares</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/dungeon-game/\">174. Dungeon Game</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-number-of-refueling-stops/\">871. Minimum Number of Refueling Stops</a> <code>Hard</code></p>\n<h1 id=\"Distinct-Ways\"><a href=\"#Distinct-Ways\" class=\"headerlink\" title=\"Distinct Ways\"></a>Distinct Ways</h1><hr>\n<p>Problem List: <a href=\"https://leetcode.com/list/55ajm50i\">https://leetcode.com/list/55ajm50i</a></p>\n<p>Generate problem statement for this pattern</p>\n<h3 id=\"Statement-1\"><a href=\"#Statement-1\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><blockquote>\n<p>Given a target find a number of distinct ways to reach the target.</p>\n</blockquote>\n<h3 id=\"Approach-1\"><a href=\"#Approach-1\" class=\"headerlink\" title=\"Approach\"></a>Approach</h3><blockquote>\n<p>Sum all possible ways to reach the current state.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes[i] = routes[i-1] + routes[i-2], ... , + routes[i-k]</span><br></pre></td></tr></table></figure>\n\n<p>Generate sum for all values in the target and return the value for the target.</p>\n<h3 id=\"Top-Down-4\"><a href=\"#Top-Down-4\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int j = 0; j &lt; ways.size(); ++j) &#123;</span><br><span class=\"line\">    result += topDown(target - ways[j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return memo[/*state parameters*/] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-4\"><a href=\"#Bottom-Up-4\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt;= target; ++i) &#123;</span><br><span class=\"line\">   for (int j = 0; j &lt; ways.size(); ++j) &#123;</span><br><span class=\"line\">       if (ways[j] &lt;= i) &#123;</span><br><span class=\"line\">           dp[i] += dp[i - ways[j]];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return dp[target]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Similar-Problems-1\"><a href=\"#Similar-Problems-1\" class=\"headerlink\" title=\"Similar Problems\"></a>Similar Problems</h3><p><a href=\"https://leetcode.com/problems/climbing-stairs/\">70. Climbing Stairs</a> <code>Easy</code></p>\n<h3 id=\"Top-Down-5\"><a href=\"#Top-Down-5\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int result = climbStairs(n-1, memo) + climbStairs(n-2, memo); </span><br><span class=\"line\">    </span><br><span class=\"line\">return memo[n] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-5\"><a href=\"#Bottom-Up-5\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int stair = 2; stair &lt;= n; ++stair) &#123;</span><br><span class=\"line\">   for (int step = 1; step &lt;= 2; ++step) &#123;</span><br><span class=\"line\">       dp[stair] += dp[stair-step];   </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/unique-paths/\">62. Unique Paths</a> <code>Medium</code></p>\n<h3 id=\"Top-Down-6\"><a href=\"#Top-Down-6\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int result = UniquePaths(x-1, y) + UniquePaths(x, y-1);</span><br><span class=\"line\"></span><br><span class=\"line\">return memo[x][y] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-6\"><a href=\"#Bottom-Up-6\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt; m; ++i) &#123;</span><br><span class=\"line\">   for (int j = 1; j &lt; n; ++j) &#123;</span><br><span class=\"line\">       dp[i][j] = dp[i][j-1] + dp[i-1][j];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/\">1155. Number of Dice Rolls With Target Sum</a> <code>Medium</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int rep = 1; rep &lt;= d; ++rep) &#123;</span><br><span class=\"line\">   vector&lt;int&gt; new_ways(target+1);</span><br><span class=\"line\">   for (int already = 0; already &lt;= target; ++already) &#123;</span><br><span class=\"line\">       for (int pipe = 1; pipe &lt;= f; ++pipe) &#123;</span><br><span class=\"line\">           if (already - pipe &gt;= 0) &#123;</span><br><span class=\"line\">               new_ways[already] += ways[already - pipe];</span><br><span class=\"line\">               new_ways[already] %= mod;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ways = new_ways;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Note</strong></p>\n<p>Some questions point out the number of repetitions, in that case, add one more loop to simulate every repetition.</p>\n<p><a href=\"https://leetcode.com/problems/knight-probability-in-chessboard/\">688. Knight Probability in Chessboard</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/target-sum/\">494. Target Sum</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/combination-sum-iv/\">377. Combination Sum IV</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/knight-dialer/\">935. Knight Dialer</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/dice-roll-simulation/\">1223. Dice Roll Simulation</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/partition-equal-subset-sum/\">416. Partition Equal Subset Sum</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/soup-servings/\">808. Soup Servings</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/domino-and-tromino-tiling/\">790. Domino and Tromino Tiling</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/\">801. Minimum Swaps To Make Sequences Increasing</a></p>\n<p><a href=\"https://leetcode.com/problems/number-of-longest-increasing-subsequence/\">673. Number of Longest Increasing Subsequence</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/unique-paths-ii/\">63. Unique Paths II</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/out-of-boundary-paths/\">576. Out of Boundary Paths</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/\">1269. Number of Ways to Stay in the Same Place After Some Steps</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/count-vowels-permutation/\">1220. Count Vowels Permutation</a> <code>Hard</code></p>\n<h1 id=\"Merging-Intervals\"><a href=\"#Merging-Intervals\" class=\"headerlink\" title=\"Merging Intervals\"></a>Merging Intervals</h1><hr>\n<p>Problem List: <a href=\"https://leetcode.com/list/55aj8s16\">https://leetcode.com/list/55aj8s16</a></p>\n<p>Generate problem statement for this pattern</p>\n<h3 id=\"Statement-2\"><a href=\"#Statement-2\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><blockquote>\n<p>Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.</p>\n</blockquote>\n<h3 id=\"Approach-2\"><a href=\"#Approach-2\" class=\"headerlink\" title=\"Approach\"></a>Approach</h3><blockquote>\n<p>Find all optimal solutions for every interval and return the best possible answer.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// from i to j</span><br><span class=\"line\">dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]</span><br></pre></td></tr></table></figure>\n\n<p>Get the best from the left and right sides and add a solution for the current position.</p>\n<h3 id=\"Top-Down-7\"><a href=\"#Top-Down-7\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int k = i; k &lt;= j; ++k) &#123;</span><br><span class=\"line\">    result = max(result, topDown(nums, i, k-1) + result[k] + topDown(nums, k+1, j));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return memo[/*state parameters*/] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-7\"><a href=\"#Bottom-Up-7\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int l = 1; l&lt;n; l++) &#123;</span><br><span class=\"line\">   for(int i = 0; i&lt;n-l; i++) &#123;</span><br><span class=\"line\">       int j = i+l;</span><br><span class=\"line\">       for(int k = i; k&lt;j; k++) &#123;</span><br><span class=\"line\">           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return dp[0][n-1];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int l = 1; l&lt;n; l++) &#123;</span><br><span class=\"line\">   for(int i = 0; i&lt;n-l; i++) &#123;</span><br><span class=\"line\">       int j = i+l;</span><br><span class=\"line\">       for(int k = i; k&lt;j; k++) &#123;</span><br><span class=\"line\">           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return dp[0][n-1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Similar-Problems-2\"><a href=\"#Similar-Problems-2\" class=\"headerlink\" title=\"Similar Problems\"></a>Similar Problems</h3><p><a href=\"https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/\">1130. Minimum Cost Tree From Leaf Values</a> <code>Medium</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int l = 1; l &lt; n; ++l) &#123;</span><br><span class=\"line\">   for (int i = 0; i &lt; n - l; ++i) &#123;</span><br><span class=\"line\">       int j = i + l;</span><br><span class=\"line\">       dp[i][j] = INT_MAX;</span><br><span class=\"line\">       for (int k = i; k &lt; j; ++k) &#123;</span><br><span class=\"line\">           dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxs[i][k] * maxs[k+1][j]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/unique-binary-search-trees/\">96. Unique Binary Search Trees</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-score-triangulation-of-polygon/\">1039. Minimum Score Triangulation of Polygon</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/remove-boxes/\">546. Remove Boxes</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-cost-to-merge-stones/\">1000. Minimum Cost to Merge Stones</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/burst-balloons/\">312. Burst Balloons</a> <code>Hard</code></p>\n<h3 id=\"Top-Down-8\"><a href=\"#Top-Down-8\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int k = i; k &lt;= j; ++k) &#123;</span><br><span class=\"line\">    result = max(result, topDown(nums, i, k-1, memo) + (i-1 &gt;= 0 ? nums[i-1] : 1) * nums[k] * (j+1 &lt; nums.size() ? nums[j+1] : 1) + topDown(nums, k+1, j, memo));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return memo[i][j] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-8\"><a href=\"#Bottom-Up-8\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int l = 1; l &lt; n; l++) &#123;</span><br><span class=\"line\">    for(int i = 0; i &lt; n-l; i++) &#123;</span><br><span class=\"line\">        int j = i+l;</span><br><span class=\"line\">        for(int k = i; k &lt;= j; k++) &#123;</span><br><span class=\"line\">            dp[i][j] = max(dp[i][j], (((k&gt;i &amp;&amp; k&gt;0) ? dp[i][k-1] : 0) + (i&gt;0 ? nums[i-1] : 1) * nums[k] * (j&lt;n-1 ? nums[j+1] : 1) + ((k&lt;j &amp;&amp; k&lt;n-1) ? dp[k+1][j] : 0)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return dp[0][n-1];</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/guess-number-higher-or-lower-ii/\">375. Guess Number Higher or Lower II</a> <code>Medium</code></p>\n<h1 id=\"DP-on-Strings\"><a href=\"#DP-on-Strings\" class=\"headerlink\" title=\"DP on Strings\"></a>DP on Strings</h1><hr>\n<p>Problem List: <a href=\"https://leetcode.com/list/55afh7m7\">https://leetcode.com/list/55afh7m7</a></p>\n<p>General problem statement for this pattern can vary but most of the time you are given two strings where lengths of those strings are not big</p>\n<h3 id=\"Statement-3\"><a href=\"#Statement-3\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><blockquote>\n<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>some result</code>.</p>\n</blockquote>\n<h3 id=\"Approach-3\"><a href=\"#Approach-3\" class=\"headerlink\" title=\"Approach\"></a>Approach</h3><blockquote>\n<p>Most of the problems on this pattern requires a solution that can be accepted in O(n^2) complexity.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// i - indexing string s1</span><br><span class=\"line\">// j - indexing string s2</span><br><span class=\"line\">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">   for (int j = 1; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">       if (s1[i-1] == s2[j-1]) &#123;</span><br><span class=\"line\">           dp[i][j] = /*code*/;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           dp[i][j] = /*code*/;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>If you are given one string <code>s</code> the approach may little vary</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int l = 1; l &lt; n; ++l) &#123;</span><br><span class=\"line\">   for (int i = 0; i &lt; n-l; ++i) &#123;</span><br><span class=\"line\">       int j = i + l;</span><br><span class=\"line\">       if (s[i] == s[j]) &#123;</span><br><span class=\"line\">           dp[i][j] = /*code*/;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           dp[i][j] = /*code*/;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/longest-common-subsequence/\">1143. Longest Common Subsequence</a> <code>Medium</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">   for (int j = 1; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">       if (text1[i-1] == text2[j-1]) &#123;</span><br><span class=\"line\">           dp[i][j] = dp[i-1][j-1] + 1;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           dp[i][j] = max(dp[i-1][j], dp[i][j-1]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/palindromic-substrings/\">647. Palindromic Substrings</a> <code>Medium</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int l = 1; l &lt; n; ++l) &#123;</span><br><span class=\"line\">   for (int i = 0; i &lt; n-l; ++i) &#123;</span><br><span class=\"line\">       int j = i + l;</span><br><span class=\"line\">       if (s[i] == s[j] &amp;&amp; dp[i+1][j-1] == j-i-1) &#123;</span><br><span class=\"line\">           dp[i][j] = dp[i+1][j-1] + 2;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           dp[i][j] = 0;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\">516. Longest Palindromic Subsequence</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/shortest-common-supersequence/\">1092. Shortest Common Supersequence</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/edit-distance/\">72. Edit Distance</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/distinct-subsequences/\">115. Distinct Subsequences</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/\">712. Minimum ASCII Delete Sum for Two Strings</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/longest-palindromic-substring/\">5. Longest Palindromic Substring</a> <code>Medium</code></p>\n<h1 id=\"Decision-Making\"><a href=\"#Decision-Making\" class=\"headerlink\" title=\"Decision Making\"></a>Decision Making</h1><hr>\n<p>Problem List: <a href=\"https://leetcode.com/list/55af7bu7\">https://leetcode.com/list/55af7bu7</a></p>\n<p>The general problem statement for this pattern is forgiven situation decide whether to use or not to use the current state. So, the problem requires you to make a decision at a current state.</p>\n<h3 id=\"Statement-4\"><a href=\"#Statement-4\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><blockquote>\n<p>Given a set of values find an answer with an option to choose or ignore the current value.</p>\n</blockquote>\n<h3 id=\"Approach-4\"><a href=\"#Approach-4\" class=\"headerlink\" title=\"Approach\"></a>Approach</h3><blockquote>\n<p>If you decide to choose the current value use the previous result where the value was ignored; vice-versa, if you decide to ignore the current value use previous result where value was used.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// i - indexing a set of values</span><br><span class=\"line\">// j - options to ignore j values</span><br><span class=\"line\">for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">   for (int j = 1; j &lt;= k; ++j) &#123;</span><br><span class=\"line\">       dp[i][j] = max(&#123;dp[i][j], dp[i-1][j] + arr[i], dp[i-1][j-1]&#125;);</span><br><span class=\"line\">       dp[i][j-1] = max(&#123;dp[i][j-1], dp[i-1][j-1] + arr[i], arr[i]&#125;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/house-robber/\">198. House Robber</a> <code>Easy</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">   dp[i][1] = max(dp[i-1][0] + nums[i], dp[i-1][1]);</span><br><span class=\"line\">   dp[i][0] = dp[i-1][1];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">121. Best Time to Buy and Sell Stock</a> <code>Easy</code></p>\n<p><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">714. Best Time to Buy and Sell Stock with Transaction Fee</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">309. Best Time to Buy and Sell Stock with Cooldown</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\">123. Best Time to Buy and Sell Stock III</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/\">188. Best Time to Buy and Sell Stock IV</a> <code>Hard</code></p>\n<p>I hope these tips will be helpful 😊</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "Dynamic Programming",
                "Patterns"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/embed-music/",
            "url": "https://samirpaul.in/posts/embed-music/",
            "title": "Embed MusicApp",
            "date_published": "2023-08-05T20:52:53.890Z",
            "content_html": "<p>Embed <a href=\"https://samirpaul.in/music/embed\"><b>samirpaul.in&#x2F;music&#x2F;embed</b></a> music player(Lofi Study Music) to any website:</p>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo:\"></a>Demo:</h3><iframe src=\"https://samirpaul.in/music/embed/index.html\"\n  title=\"Embed MusicApp\"\n    frameborder=\"0\"\n    loading=\"lazy\"\n    marginheight=\"0\"\n    marginwidth=\"0\"\n    width=\"100%\"\n    height=\"223\"\n    scrolling=\"no\">\n</iframe>\n\n\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://samirpaul.in/music/embed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">title</span>=<span class=\"string\">&quot;Embed MusicApp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">frameborder</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">loading</span>=<span class=\"string\">&quot;lazy&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">marginheight</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">marginwidth</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">width</span>=<span class=\"string\">&quot;100%&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">height</span>=<span class=\"string\">&quot;223&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">scrolling</span>=<span class=\"string\">&quot;no&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "embed-musicapp",
                "music",
                "embeded",
                "music-player"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/url-shortening-service/",
            "url": "https://samirpaul.in/posts/url-shortening-service/",
            "title": "URL Shortening Service",
            "date_published": "2023-08-05T20:52:53.888Z",
            "content_html": "<h1 id=\"URL-Shortening-Service\"><a href=\"#URL-Shortening-Service\" class=\"headerlink\" title=\"URL Shortening Service\"></a>URL Shortening Service</h1><h2 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h2><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog/system-design/short-url-overview.png\" alt=\"overview\"><br><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog/system-design/short-url-detail.png\" alt=\"summary\"></p>\n<h2 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h2><ul>\n<li><p>Functional Requirements</p>\n<ul>\n<li>Given a URL, generate a shorter and unique alias (short link).</li>\n<li>When users access a short link, redirect to the original link.</li>\n<li>Users should optionally be able to pick a custom short link for their URL.</li>\n<li>Links will expire after a standard default timespan. Users should also be able to specify the expiration time.</li>\n</ul>\n</li>\n<li><p>Non-Functional Requirements</p>\n<ul>\n<li>The system should be highly available. This is required because, if our service is down, all the URL redirections will start failing.</li>\n<li>URL redirection should happen in real-time with minimal latency.</li>\n<li>Shortened links should not be guessable (not predictable).</li>\n</ul>\n</li>\n<li><p>Extended Requirements</p>\n<ul>\n<li>Analytics; e.g., how many times a redirection happened?</li>\n<li>Be accessible through REST APIs by other services.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Capacity-Estimation-and-Constraints\"><a href=\"#Capacity-Estimation-and-Constraints\" class=\"headerlink\" title=\"Capacity Estimation and Constraints\"></a>Capacity Estimation and Constraints</h2><ul>\n<li><p>Assumption</p>\n<ul>\n<li>Read-heavy. More redirection requests compared to new URL shortenings.</li>\n<li>Assume <strong>100:1</strong> ratio between read and write.</li>\n</ul>\n</li>\n<li><p>Traffic estimates</p>\n<ul>\n<li><strong>500M</strong> new URL shortenings per month, 100 * 500M &#x3D;&gt; 50B redirections per month.</li>\n<li>New URL shortenings per second<ul>\n<li>500 million &#x2F; (30 days * 24 hours * 3600 seconds) &#x3D; <strong>~200 URLs&#x2F;s</strong></li>\n</ul>\n</li>\n<li>URLs redirections per second<ul>\n<li>50 billion &#x2F; (30 days * 24 hours * 3600 sec) &#x3D; <strong>~19K&#x2F;s</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Storage estimates</p>\n<ul>\n<li>Assume storing every URL shortening request for 5 years, each object takes <strong>500 bytes</strong></li>\n<li>Total objects: 500 million * 5 years * 12 months &#x3D; <strong>30 billion</strong></li>\n<li>Total storage: 30 billion * 500 bytes &#x3D; <strong>15 TB</strong></li>\n</ul>\n</li>\n<li><p>Bandwidth estimates</p>\n<ul>\n<li>Write: 200 URL&#x2F;s * 500 bytes&#x2F;URL &#x3D; <strong>100 KB&#x2F;s</strong></li>\n<li>Read: 19K URL&#x2F;s * 500 bytes&#x2F;URL &#x3D; <strong>~9 MB&#x2F;s</strong></li>\n</ul>\n</li>\n<li><p>Cache memory estimates</p>\n<ul>\n<li>Follow the 80-20 rule, assuming 20% of URLs generate 80% of traffic, cache 20% hot URLs</li>\n<li>Requests per day: 19K * 3600 seconds * 24 hours &#x3D; <strong>~1.7 billion&#x2F;day</strong></li>\n<li>Cache 20%: 0.2 * 1.7 billion * 500 bytes &#x3D; <strong>~170GB</strong></li>\n</ul>\n</li>\n<li><p>Summary</p>\n<ul>\n<li>Assuming 500 million new URLs per month and 100:1 read:write ratio</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Category</th>\n<th>Calculation</th>\n<th>Estimate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>New URLs</td>\n<td>500 million &#x2F; (30 days * 24 hours * 3600 seconds)</td>\n<td>200 &#x2F;s</td>\n</tr>\n<tr>\n<td>URL redirections</td>\n<td>500 million * 100 &#x2F; (30 days * 24 hours * 3600 seconds)</td>\n<td>19 K&#x2F;s</td>\n</tr>\n<tr>\n<td>Incoming data</td>\n<td>500 bytes&#x2F;URL * 200 URL&#x2F;s</td>\n<td>100 KB&#x2F;s</td>\n</tr>\n<tr>\n<td>Outgoing data</td>\n<td>500 bytes&#x2F;URL * 19K URL&#x2F;s</td>\n<td>9 MB&#x2F;s</td>\n</tr>\n<tr>\n<td>Storage for 5 years</td>\n<td>500 bytes&#x2F;URL * 500 million * 60 months</td>\n<td>15 TB</td>\n</tr>\n<tr>\n<td>Memory for cache</td>\n<td>19K URL * 3600 seconds * 24 hours * 500 bytes * 20%</td>\n<td>170 GB</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h2 id=\"System-APIs\"><a href=\"#System-APIs\" class=\"headerlink\" title=\"System APIs\"></a>System APIs</h2><h3 id=\"createUrl\"><a href=\"#createUrl\" class=\"headerlink\" title=\"createUrl\"></a><code>createUrl</code></h3><ul>\n<li>Parameters<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Note</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>api_dev_key</code></td>\n<td><code>string</code></td>\n<td>The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota.</td>\n</tr>\n<tr>\n<td><code>original_url</code></td>\n<td><code>string</code></td>\n<td>Original URL to be shortened.</td>\n</tr>\n<tr>\n<td><code>custom_alias</code></td>\n<td><code>string</code></td>\n<td>Optional custom key for the URL.</td>\n</tr>\n<tr>\n<td><code>user_name</code></td>\n<td><code>string</code></td>\n<td>Optional user name to be used in encoding.</td>\n</tr>\n<tr>\n<td><code>expire_date</code></td>\n<td><code>string</code></td>\n<td>Optional expiration date for the shortened URL.</td>\n</tr>\n</tbody></table>\n</li>\n<li>Return<ul>\n<li><code>string</code></li>\n<li>A successful insertion returns the shortened URL; otherwise, it returns an error code.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"deleteUrl\"><a href=\"#deleteUrl\" class=\"headerlink\" title=\"deleteUrl\"></a><code>deleteUrl</code></h3><ul>\n<li>Parameters<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Type</th>\n<th>Note</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>api_dev_key</code></td>\n<td><code>string</code></td>\n<td>The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota.</td>\n</tr>\n<tr>\n<td><code>url_key</code></td>\n<td><code>string</code></td>\n<td>Short URL.</td>\n</tr>\n</tbody></table>\n</li>\n<li>Return<ul>\n<li><code>string</code></li>\n<li>A successful deletion returns ‘URL Removed’.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Database-design\"><a href=\"#Database-design\" class=\"headerlink\" title=\"Database design\"></a>Database design</h2><ul>\n<li><p>Observations</p>\n<ul>\n<li>Need to store billions of records.</li>\n<li>Each object is small (less than 1K).</li>\n<li>No relationships between records—other than storing which user created a URL.</li>\n<li>Read-heavy.</li>\n<li>A NoSQL choice would also be easier to scale.</li>\n<li>Comment: SQL with sharding should also work</li>\n</ul>\n</li>\n<li><p>Schema</p>\n<ul>\n<li>URL<table>\n<thead>\n<tr>\n<th>Column</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>hash</code></td>\n<td>varchar(16)</td>\n</tr>\n<tr>\n<td><code>original_url</code></td>\n<td>varchar(512)</td>\n</tr>\n<tr>\n<td><code>creation_date</code></td>\n<td>datetime</td>\n</tr>\n<tr>\n<td><code>expiration_date</code></td>\n<td>datetime</td>\n</tr>\n<tr>\n<td><code>user_id</code></td>\n<td>int</td>\n</tr>\n</tbody></table>\n</li>\n<li>User<table>\n<thead>\n<tr>\n<th>Column</th>\n<th>Type</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>name</code></td>\n<td>varchar(20)</td>\n</tr>\n<tr>\n<td><code>email</code></td>\n<td>varchar(32)</td>\n</tr>\n<tr>\n<td><code>creation_date</code></td>\n<td>datetime</td>\n</tr>\n<tr>\n<td><code>last_login</code></td>\n<td>datetime</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Basic-System-Design-and-Algorithm\"><a href=\"#Basic-System-Design-and-Algorithm\" class=\"headerlink\" title=\"Basic System Design and Algorithm\"></a>Basic System Design and Algorithm</h2><h3 id=\"Encoding-actual-URL\"><a href=\"#Encoding-actual-URL\" class=\"headerlink\" title=\"Encoding actual URL\"></a>Encoding actual URL</h3><ul>\n<li>Compute unique hash<ul>\n<li><code>base64</code>: A-Z, a-z, 0-9, <code>-</code>, <code>.</code></li>\n<li>6 letters: 64 ^ 6 &#x3D; ~68.7 billion</li>\n<li>8 letters: 64 ^ 8 &#x3D; ~281 trillion</li>\n<li>Use 6 letters</li>\n<li><code>MD5</code> generates 128 bit hash value</li>\n<li>Each <code>base64</code> character encodes 6 bits</li>\n<li><code>base64</code> encoding generates 22 characters</li>\n<li>Select 8 characters</li>\n</ul>\n</li>\n<li>Issues with this approach<ul>\n<li>Same URL from multiple users</li>\n<li>URL-encoded</li>\n</ul>\n</li>\n<li>Workaround<ul>\n<li>Append an increasing sequence number to each input URL, and generate a hash for it</li>\n<li>Append user id to input URL</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Generating-keys-offline\"><a href=\"#Generating-keys-offline\" class=\"headerlink\" title=\"Generating keys offline\"></a>Generating keys offline</h3><ul>\n<li><p>Standalone Key Generation Service (KGS)</p>\n<ul>\n<li>Generate random 6 letter strings and store them in a database (key DB)</li>\n<li>When a short URL is needed, take one from the key DB</li>\n</ul>\n</li>\n<li><p>Key DB size</p>\n<ul>\n<li>6 characters&#x2F;key * 68.7B unique keys &#x3D; 412 GB</li>\n</ul>\n</li>\n<li><p>Concurrency issue</p>\n<ul>\n<li>If there are multiple servers reading keys concurrently, two or more servers try to read the same key from the database.</li>\n</ul>\n</li>\n<li><p>Workaround</p>\n<ul>\n<li>Servers can use KGS to read&#x2F;mark keys in the database.</li>\n<li>KGS can use two tables to store keys: one for keys that are not used yet, and one for all the used keys.</li>\n<li>KGS can always keep some keys in memory so that it can quickly provide them whenever a server needs them.</li>\n<li>KGS needs to make sure not to give the same key to multiple servers.</li>\n<li>Comment: keys are sharded. Each KGS server only serves one application server.</li>\n</ul>\n</li>\n<li><p>Key lookup</p>\n<ul>\n<li>When a key is found, issue an “HTTP 302 Redirect” status and passing the stored URL.</li>\n<li>When a key is not found, issue an “HTTP 404 Not Found”, or redirect to homepage.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"UUID\"><a href=\"#UUID\" class=\"headerlink\" title=\"UUID\"></a>UUID</h3><p>Replace KGS with UUID.</p>\n<h2 id=\"Data-Partitioning-and-Replication\"><a href=\"#Data-Partitioning-and-Replication\" class=\"headerlink\" title=\"Data Partitioning and Replication\"></a>Data Partitioning and Replication</h2><ul>\n<li><p>Range Based Partitioning</p>\n<ul>\n<li>Store URLs in separate partitions based on the first letter of the URL or the hash key.</li>\n<li>Combine certain less frequently occurring letters into one database partition.</li>\n</ul>\n</li>\n<li><p>Problem with this approach</p>\n<ul>\n<li>Unbalanced servers.</li>\n</ul>\n</li>\n<li><p>Hash-Based Partitioning</p>\n<ul>\n<li>Take a hash of the short URL we are storing, and calculate which partition to use based upon the hash.</li>\n<li>Use consistent hashing</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h2><ul>\n<li>Eviction policy<ul>\n<li>LRU: discard the least recently used URL first</li>\n</ul>\n</li>\n<li>Cache update<ul>\n<li>Cache miss: hit backend database and pass new entry to all cache replicas</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Load-Balancer-LB\"><a href=\"#Load-Balancer-LB\" class=\"headerlink\" title=\"Load Balancer (LB)\"></a>Load Balancer (LB)</h2><ul>\n<li>LB locations<ul>\n<li>Between Clients and Application servers</li>\n<li>Between Application Servers and database servers</li>\n<li>Between Application Servers and Cache servers</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"DB-Sweeping\"><a href=\"#DB-Sweeping\" class=\"headerlink\" title=\"DB Sweeping\"></a>DB Sweeping</h2><p>A separate Cleanup service can run periodically to remove expired links from our storage and cache.</p>\n<h2 id=\"Telemetry\"><a href=\"#Telemetry\" class=\"headerlink\" title=\"Telemetry\"></a>Telemetry</h2><p>Statistics about the system: how many times a short URL has been used</p>\n<h2 id=\"Security-and-Permissions\"><a href=\"#Security-and-Permissions\" class=\"headerlink\" title=\"Security and Permissions\"></a>Security and Permissions</h2><ul>\n<li>Store permission level (public&#x2F;private) with each URL in the database</li>\n<li>Send an error (HTTP 401) for unauthorized access</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation",
                "short-url",
                "url-shortner"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/system-design-interview-for-it-companies/",
            "url": "https://samirpaul.in/posts/system-design-interview-for-it-companies/",
            "title": "System design interview for IT companies",
            "date_published": "2023-08-05T20:52:53.883Z",
            "content_html": "<p><img src=\"/assets/img/system-design/systemcycle.png\" alt=\"system development life cycle\"></p>\n<blockquote>\n<p>How to prepare system design questions for an IT company</p>\n</blockquote>\n<p>Original source and Credit: <a href=\"https://github.com/checkcheckzz/system-design-interview\">https://github.com/checkcheckzz/system-design-interview</a></p>\n<hr>\n<p>System design is a very broad topic. Even a software engineer with many years of working experience at a top IT company may not be an expert on system design. If you want to become an expert, you need to read many books, articles, and solve real large scale system design problems.</p>\n<p>This repository only teaches you how to handle the system design interview with a systematic approach in a short time. You can dive into each topic if you have time. Of course, welcome to add your thoughts!</p>\n<h2 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a><a name='toc'>Table of Contents</a></h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#tips\">System Design Interview Tips</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#intro\">Basic Knowledge about System Design</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#blog\">Company Engineering Blogs</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#system\">Products and Systems</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#qs\">Hot Questions and Reference</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#bk\">Good Books</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"#ood\">Object Oriented Design</a></li>\n</ul>\n<h3 id=\"⬆-System-Design-Interview-Tips\"><a href=\"#⬆-System-Design-Interview-Tips\" class=\"headerlink\" title=\"[⬆] System Design Interview Tips:\"></a><a href=\"#toc\">[⬆]</a> <a name='tips'>System Design Interview Tips:</a></h3><p><strong>Clarify the constraints and identify the user cases</strong></p>\n<p>Spend a few minutes questioning the interviewer and agreeing on the scope of the system.<br>Remember to make sure you know all the requirements the interviewer didn’t tell you about in the beginning.</p>\n<p>User cases indicate the main functions of the system, and constraints list the scale of the system such as requests<br>per second, requests types, data written per second, data read per second.</p>\n<p><strong>High-level architecture design</strong></p>\n<p>Sketch the important components and the connections between them, but don’t go into some details.<br>Usually, a scalable system includes webserver (load balancer), service (service partition), database (primary&#x2F;secondary database cluster plug cache).</p>\n<p><strong>Component design</strong></p>\n<p>For each component, you need to write the specific APIs for each component. You may need to finish<br>the detailed OOD design for a particular function. You may also need to design the database schema for the database.</p>\n<h3 id=\"⬆-Basic-Knowledge-about-System-Design\"><a href=\"#⬆-Basic-Knowledge-about-System-Design\" class=\"headerlink\" title=\"[⬆] Basic Knowledge about System Design:\"></a><a href=\"#toc\">[⬆]</a> <a name='intro'>Basic Knowledge about System Design:</a></h3><p>Here are some articles about system design related topics.  </p>\n<ul>\n<li><a href=\"https://blog.pramp.com/system-design-interview-process-e91aae2dbe83\">The Anatomy Of A System Design Interview</a></li>\n<li><a href=\"https://blog.pramp.com/how-to-succeed-in-a-system-design-interview-27b35de0df26\">How to Succeed in a System Design Interview</a></li>\n<li><a href=\"http://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/\">How to Rock a Systems Design Interview</a></li>\n<li><a href=\"http://www.hiredintech.com/app#system-design\">System Interview</a></li>\n<li><a href=\"http://www.lecloud.net/tagged/scalability\">Scalability for Dummies</a></li>\n<li><a href=\"http://www.aosabook.org/en/distsys.html\">Scalable Web Architecture and Distributed Systems</a></li>\n<li><a href=\"http://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/\">Numbers Everyone Should Know</a></li>\n<li><a href=\"https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf\">Fallacies of distributed systems</a></li>\n<li><a href=\"http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html\">Scalable System Design Patterns</a></li>\n<li><a href=\"http://lethain.com/introduction-to-architecting-systems-for-scale/\">Introduction to Architecting Systems for Scale</a></li>\n<li><a href=\"http://snarfed.org/transactions_across_datacenters_io.html\">Transactions Across Datacenters</a></li>\n<li><a href=\"http://ksat.me/a-plain-english-introduction-to-cap-theorem\">A Plain English Introduction to CAP Theorem</a></li>\n<li><a href=\"https://github.com/henryr/cap-faq\">The CAP FAQ</a></li>\n<li><a href=\"http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf\">Paxos Made Simple</a></li>\n<li><a href=\"http://www.tom-e-white.com/2007/11/consistent-hashing.html\">Consistent Hashing</a></li>\n<li><a href=\"http://horicky.blogspot.com/2009/11/nosql-patterns.html\">NOSQL Patterns</a></li>\n<li><a href=\"http://www.slideshare.net/jboner/scalability-availability-stability-patterns\">Scalability, Availability &amp; Stability Patterns</a></li>\n</ul>\n<p>Of course, if you want to dive into system related topics, here is a good collection of reading list about <a href=\"https://github.com/mmcgrana/services-engineering\">services-engineering</a>, and<br>a good collection of material about <a href=\"http://dancres.github.io/Pages/\">distributed systems</a>.</p>\n<h3 id=\"⬆-Company-Engineering-Blogs\"><a href=\"#⬆-Company-Engineering-Blogs\" class=\"headerlink\" title=\"[⬆] Company Engineering Blogs:\"></a><a href=\"#toc\">[⬆]</a> <a name='blog'>Company Engineering Blogs:</a></h3><p>If you are going to have an onsite with a company, you should read their engineering blog. </p>\n<ul>\n<li><a href=\"http://highscalability.com/\">High Scalability</a></li>\n<li><a href=\"https://github.com/blog/category/engineering\">The GitHub Blog</a></li>\n<li><a href=\"http://engineering.quora.com/\">Engineering at Quora</a></li>\n<li><a href=\"http://engineeringblog.yelp.com/\">Yelp Engineering Blog</a></li>\n<li><a href=\"https://engineering.twitter.com/\">Twitter Engineering</a></li>\n<li><a href=\"https://www.facebook.com/Engineering\">Facebook Engineering</a></li>\n<li><a href=\"http://eng.yammer.com/blog/\">Yammer Engineering</a></li>\n<li><a href=\"http://codeascraft.com/\">Etsy Code as Craft</a></li>\n<li><a href=\"http://engineering.foursquare.com/\">Foursquare Engineering Blog</a></li>\n<li><a href=\"https://medium.com/airbnb-engineering\">Airbnb Engineering</a></li>\n<li><a href=\"http://engineering.webengage.com/\">WebEngage Engineering Blog</a></li>\n<li><a href=\"http://engineering.linkedin.com/blog\">LinkedIn Engineering</a></li>\n<li><a href=\"http://techblog.netflix.com/\">The Netflix Tech Blog</a></li>\n<li><a href=\"https://www.simple.com/engineering/\">BankSimple Simple Blog</a></li>\n<li><a href=\"http://corner.squareup.com/\">Square The Corner</a></li>\n<li><a href=\"https://developers.soundcloud.com/blog/\">SoundCloud Backstage Blog</a></li>\n<li><a href=\"http://code.flickr.net/\">Flickr Code</a></li>\n<li><a href=\"http://instagram-engineering.tumblr.com/\">Instagram Engineering</a></li>\n<li><a href=\"https://tech.dropbox.com/\">Dropbox Tech Blog</a></li>\n<li><a href=\"http://blog.cloudera.com/\">Cloudera Developer Blog</a></li>\n<li><a href=\"http://bandcamptech.wordpress.com/\">Bandcamp Tech</a></li>\n<li><a href=\"http://tech.oyster.com/\">Oyster Tech Blog</a></li>\n<li><a href=\"http://www.redditblog.com/\">THE REDDIT BLOG</a></li>\n<li><a href=\"https://engineering.groupon.com/\">Groupon Engineering Blog</a></li>\n<li><a href=\"http://devblog.songkick.com/\">Songkick Technology Blog</a></li>\n<li><a href=\"https://ai.googleblog.com/\">Google AI Blog</a></li>\n<li><a href=\"https://developers.googleblog.com/\">Google Developers Blog</a></li>\n<li><a href=\"http://engineering.pinterest.com/\">Pinterest Engineering Blog</a></li>\n<li><a href=\"http://www.twilio.com/engineering\">Twilio Engineering Blog</a></li>\n<li><a href=\"http://word.bitly.com/\">Bitly Engineering Blog</a></li>\n<li><a href=\"https://eng.uber.com/\">Uber Engineering Blog </a></li>\n<li><a href=\"http://engineering.godaddy.com/\">Godaddy Engineering</a></li>\n<li><a href=\"http://blogs.splunk.com/\">Splunk Blog</a></li>\n<li><a href=\"https://building.coursera.org/\">Coursera Engineering Blog</a></li>\n<li><a href=\"https://www.paypal-engineering.com/\">PayPal Engineering Blog</a></li>\n<li><a href=\"https://engblog.nextdoor.com/\">Nextdoor Engineering Blog</a></li>\n<li><a href=\"https://blog.booking.com/\">Booking.com Development Blog</a></li>\n<li><a href=\"https://engineering.microsoft.com/\">Microsoft Engineering Blog</a></li>\n<li><a href=\"https://blog.scalyr.com/\">Scalyr Engineering Blog</a></li>\n<li><a href=\"https://medium.com/myntra-engineering\">Myntra Engineering Blog</a></li>\n<li><a href=\"https://www.fastly.com/blog/\">Fastly Blog</a></li>\n<li><a href=\"https://aws.amazon.com/blogs/architecture/\">AWS Architecture Blog</a></li>\n<li><a href=\"https://eng.lyft.com/\">Lyft Engineering Blog</a></li>\n<li><a href=\"https://medium.com/wish-engineering\">Wish Engineering</a></li>\n<li><a href=\"https://doordash.engineering/\">Doordash Engineering</a></li>\n<li><a href=\"https://community.snowflake.com/s/blog\">SnowFlake Blog</a> </li>\n<li><a href=\"https://medium.com/palantir/tech/home\">Palantir Blog</a></li>\n</ul>\n<h3 id=\"⬆-Products-and-Systems\"><a href=\"#⬆-Products-and-Systems\" class=\"headerlink\" title=\"[⬆] Products and Systems:\"></a><a href=\"#toc\">[⬆]</a> <a name='system'>Products and Systems:</a></h3><p>The following papers&#x2F;articles&#x2F;slides can help you to understand the general design idea of different real products and systems. </p>\n<ul>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf\">MapReduce: Simplified Data Processing on Large Clusters</a></li>\n<li><a href=\"http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf\">Bigtable: A Distributed Storage System for Structured Data</a></li>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf\">The Google File System</a></li>\n<li><a href=\"http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf\">The Chubby lock service for loosely-coupled distributed systems</a></li>\n<li><a href=\"http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf\">Dynamo: Amazon’s Highly Available Key-value Store</a></li>\n<li><a href=\"http://www.slideshare.net/oemebamo/introduction-to-memcached\">Introduction to Memcached</a></li>\n<li><a href=\"http://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666\">Cassandra Introduction Features</a></li>\n<li><a href=\"http://www.slideshare.net/alexbaranau/intro-to-hbase\">Introduction to HBase</a></li>\n<li><a href=\"http://www.slideshare.net/mdirolf/introduction-to-mongodb\">Introduction to MongoDB</a></li>\n<li><a href=\"http://www.slideshare.net/dvirsky/introduction-to-redis\">Introduction to Redis</a></li>\n<li><a href=\"http://www.slideshare.net/previa/storm-16094009\">Storm</a></li>\n<li><a href=\"http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper\">Introduction to Zookeeper</a></li>\n<li><a href=\"http://www.slideshare.net/mumrah/kafka-talk-tri-hug\">Kafka</a></li>\n<li><a href=\"http://highscalability.com/youtube-architecture\">YouTube Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html\">Scaling Pinterest</a></li>\n<li><a href=\"http://highscalability.com/google-architecture\">Google Architecture</a></li>\n<li><a href=\"http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster\">Scaling Twitter</a></li>\n<li><a href=\"http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html\">The WhatsApp Architecture</a></li>\n<li><a href=\"http://highscalability.com/flickr-architecture\">Flickr Architecture</a></li>\n<li><a href=\"http://highscalability.com/amazon-architecture\">Amazon Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html\">Stack Overflow Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html\">Pinterest Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html\">Tumblr Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html\">Instagram Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html\">TripAdvisor Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html\">Scaling Mailbox</a></li>\n<li><a href=\"http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html\">Salesforce Architecture </a></li>\n<li><a href=\"http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html\">ESPN Architecture</a></li>\n<li><a href=\"http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html\">Uber Architecture</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=PE4gwstWhmc\">DropBox Design</a></li>\n<li><a href=\"http://www.splunk.com/view/SP-CAAABF9\">Splunk Architecture</a></li>\n</ul>\n<h3 id=\"⬆-Hot-Questions-and-Reference\"><a href=\"#⬆-Hot-Questions-and-Reference\" class=\"headerlink\" title=\"[⬆] Hot Questions and Reference:\"></a><a href=\"#toc\">[⬆]</a> <a name='qs'>Hot Questions and Reference:</a></h3><p>There are some good references for each question. The references here are slides and articles. </p>\n<p><strong>Design a CDN network</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"https://kilthub.cmu.edu/articles/journal_contribution/Globally_distributed_content_delivery/6605972\">Globally Distributed Content Delivery</a></li>\n</ul>\n<p><strong>Design a Google document system</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"https://code.google.com/p/google-mobwrite/\">google-mobwrite</a></li>\n<li><a href=\"https://neil.fraser.name/writing/sync/\">Differential Synchronization</a></li>\n</ul>\n<p><strong>Design a random ID generation system</strong><br>Reference: </p>\n<ul>\n<li><a href=\"https://blog.twitter.com/2010/announcing-snowflake\">Announcing Snowflake</a> </li>\n<li><a href=\"https://github.com/twitter/snowflake/\">snowflake</a></li>\n</ul>\n<p><strong>Design a key-value database</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://www.slideshare.net/dvirsky/introduction-to-redis\">Introduction to Redis</a></li>\n</ul>\n<p><strong>Design the Facebook news feed function</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed\">What are best practices for building something like a News Feed?</a> </li>\n<li><a href=\"http://www.quora.com/Activity-Streams/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed\">What are the scaling issues to keep in mind while developing a social network feed?</a> </li>\n<li><a href=\"http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture\">Activity Feeds Architecture</a></li>\n</ul>\n<p><strong>Design the Facebook timeline function</strong><br>Reference: </p>\n<ul>\n<li><a href=\"https://www.facebook.com/note.php?note_id=10150468255628920\">Building Timeline</a> </li>\n<li><a href=\"http://highscalability.com/blog/2012/1/23/facebook-timeline-brought-to-you-by-the-power-of-denormaliza.html\">Facebook Timeline</a></li>\n</ul>\n<p><strong>Design a function to return the top k requests during past time interval</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"http://www.cse.ust.hk/~raywong/comp5331/References/EfficientComputationOfFrequentAndTop-kElementsInDataStreams.pdf\">Efficient Computation of Frequent and Top-k Elements in Data Streams</a></li>\n<li><a href=\"http://davis.wpi.edu/xmdv/docs/EDBT11-diyang.pdf\">An Optimal Strategy for Monitoring Top-k Queries in Streaming Windows</a></li>\n</ul>\n<p><strong>Design an online multiplayer card game</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"http://www.indieflashblog.com/how-to-create-an-asynchronous-multiplayer-game.html\">How to Create an Asynchronous Multiplayer Game</a>   </li>\n<li><a href=\"http://www.indieflashblog.com/how-to-create-async-part2.html\">How to Create an Asynchronous Multiplayer Game Part 2: Saving the Game State to Online Database</a>  </li>\n<li><a href=\"http://www.indieflashblog.com/how-to-create-async-part3.html\">How to Create an Asynchronous Multiplayer Game Part 3: Loading Games from the Database</a>  </li>\n<li><a href=\"http://www.indieflashblog.com/how-to-create-async-part4-html.html#comment-4447\">How to Create an Asynchronous Multiplayer Game Part 4: Matchmaking</a>  </li>\n<li><a href=\"http://buildnewgames.com/real-time-multiplayer/\">Real Time Multiplayer in HTML5</a></li>\n</ul>\n<p><strong>Design a graph search function</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"https://www.facebook.com/notes/facebook-engineering/under-the-hood-building-out-the-infrastructure-for-graph-search/10151347573598920\">Building out the infrastructure for Graph Search</a></li>\n<li><a href=\"https://www.facebook.com/notes/facebook-engineering/under-the-hood-indexing-and-ranking-in-graph-search/10151361720763920\">Indexing and ranking in Graph Search</a> </li>\n<li><a href=\"https://www.facebook.com/notes/facebook-engineering/under-the-hood-the-natural-language-interface-of-graph-search/10151432733048920\">The natural language interface of Graph Search</a> and <a href=\"http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf\">Erlang at Facebook</a></li>\n</ul>\n<p><strong>Design a picture sharing system</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://highscalability.com/flickr-architecture\">Flickr Architecture</a> </li>\n<li><a href=\"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html\">Instagram Architecture</a></li>\n</ul>\n<p><strong>Design a search engine</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"http://programmers.stackexchange.com/questions/38324/interview-question-how-would-you-implement-google-search\">How would you implement Google Search?</a>  </li>\n<li><a href=\"http://www.ardendertat.com/2012/01/11/implementing-search-engines/\">Implementing Search Engines</a></li>\n</ul>\n<p><strong>Design a recommendation system</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"http://tech.hulu.com/blog/2011/09/19/recommendation-system.html\">Hulu’s Recommendation System</a>  </li>\n<li><a href=\"http://ijcai13.org/files/tutorial_slides/td3.pdf\">Recommender Systems</a></li>\n</ul>\n<p><strong>Design a tinyurl system</strong><br>Reference: </p>\n<ul>\n<li><a href=\"http://n00tc0d3r.blogspot.com/\">System Design for Big Data-tinyurl</a> </li>\n<li><a href=\"https://developers.google.com/url-shortener/?csw=1\">URL Shortener API</a></li>\n</ul>\n<p><strong>Design a garbage collection system</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/\">Baby’s First Garbage Collector</a></li>\n</ul>\n<p><strong>Design a scalable web crawling system</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch\">How can I build a web crawler from scratch?</a></li>\n</ul>\n<p><strong>Design the Facebook chat function</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf\">Erlang at Facebook</a>  </li>\n<li><a href=\"https://www.facebook.com/note.php?note_id=14218138919&id=9445547199&index=0\">Facebook Chat</a></li>\n</ul>\n<p><strong>Design a trending topic system</strong><br>Reference:  </p>\n<ul>\n<li><a href=\"http://www.michael-noll.com/blog/2013/01/18/implementing-real-time-trending-topics-in-storm/\">Implementing Real-Time Trending Topics With a Distributed Rolling Count Algorithm in Storm</a>   </li>\n<li><a href=\"http://snikolov.wordpress.com/2012/11/14/early-detection-of-twitter-trends/\">Early detection of Twitter trends explained</a></li>\n</ul>\n<p><strong>Design a cache system</strong><br>Reference:   </p>\n<ul>\n<li><a href=\"http://www.slideshare.net/oemebamo/introduction-to-memcached\">Introduction to Memcached</a></li>\n</ul>\n<h3 id=\"⬆-Good-Books\"><a href=\"#⬆-Good-Books\" class=\"headerlink\" title=\"[⬆] Good Books:\"></a><a href=\"#toc\">[⬆]</a> <a name='bk'>Good Books:</a></h3><ul>\n<li><a href=\"http://www.amazon.com/Big-Data-Principles-practices-scalable/dp/1617290343\">Big Data: Principles and best practices of scalable realtime data systems</a></li>\n<li><a href=\"http://www.amazon.com/Real-Time-Analytics-Techniques-Visualize-Streaming/dp/1118837916\">Real-Time Analytics: Techniques to Analyze and Visualize Streaming Data</a></li>\n<li><a href=\"http://www.amazon.com/Building-Microservices-Sam-Newman/dp/1491950358\">Building Microservices: Designing Fine-Grained Systems</a></li>\n<li><a href=\"https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321\">Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</a></li>\n</ul>\n<h3 id=\"⬆-Object-Oriented-Design\"><a href=\"#⬆-Object-Oriented-Design\" class=\"headerlink\" title=\"[⬆] Object Oriented Design:\"></a><a href=\"#toc\">[⬆]</a> <a name='ood'>Object Oriented Design:</a></h3><h4 id=\"Tips-for-OOD-Interview\"><a href=\"#Tips-for-OOD-Interview\" class=\"headerlink\" title=\"Tips for OOD Interview\"></a>Tips for OOD Interview</h4><p><strong>Clarify the scenario, write out user cases</strong></p>\n<p>Use case is a description of sequences of events that, taken together, lead to a system doing something useful. Who is going to use it and how they are going to use it. The system may be very simple or very complicated.</p>\n<p>Special system requirements such as multi-threading, read or write oriented.</p>\n<p><strong>Define objects</strong></p>\n<p>Map identity to class: one scenario for one class, each core object in this scenario for one class.</p>\n<p>Consider the relationships among classes: certain class must have unique instance, one object has many other objects (composition), one object is another object (inheritance).</p>\n<p>Identify attributes for each class: change noun to variable and action to methods.</p>\n<p>Use design patterns such that it can be reused in multiple applications.</p>\n<h4 id=\"Useful-Websites\"><a href=\"#Useful-Websites\" class=\"headerlink\" title=\"Useful Websites\"></a>Useful Websites</h4><ul>\n<li><a href=\"http://sourcemaking.com/design-patterns-and-tips\">101 Design Patterns &amp; Tips for Developers</a></li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/sql-vs-nosql/",
            "url": "https://samirpaul.in/posts/sql-vs-nosql/",
            "title": "SQL vs. NoSQL",
            "date_published": "2023-08-05T20:52:53.878Z",
            "content_html": "<h1 id=\"SQL-vs-NoSQL\"><a href=\"#SQL-vs-NoSQL\" class=\"headerlink\" title=\"SQL vs. NoSQL\"></a>SQL vs. NoSQL</h1><h2 id=\"Common-types-of-NoSQL\"><a href=\"#Common-types-of-NoSQL\" class=\"headerlink\" title=\"Common types of NoSQL\"></a>Common types of NoSQL</h2><h3 id=\"Key-value-stores\"><a href=\"#Key-value-stores\" class=\"headerlink\" title=\"Key-value stores\"></a>Key-value stores</h3><ul>\n<li>Array of key-value pairs. The “key” is an attribute name.</li>\n<li>Redis, Vodemort, Dynamo.</li>\n</ul>\n<h3 id=\"Document-databases\"><a href=\"#Document-databases\" class=\"headerlink\" title=\"Document databases\"></a>Document databases</h3><ul>\n<li>Data is stored in documents.</li>\n<li>Documents are grouped in collections.</li>\n<li>Each document can have an entirely different structure.</li>\n<li>CouchDB, MongoDB.</li>\n</ul>\n<h3 id=\"Wide-column-columnar-databases\"><a href=\"#Wide-column-columnar-databases\" class=\"headerlink\" title=\"Wide-column &#x2F; columnar databases\"></a>Wide-column &#x2F; columnar databases</h3><ul>\n<li>Column families - containers for rows.</li>\n<li>No need to know all the columns up front.</li>\n<li>Each row can have different number of columns.</li>\n<li>Cassandra, HBase.</li>\n</ul>\n<h3 id=\"Graph-database\"><a href=\"#Graph-database\" class=\"headerlink\" title=\"Graph database\"></a>Graph database</h3><ul>\n<li>Data is stored in graph structures<ul>\n<li>Nodes: entities</li>\n<li>Properties: information about the entities</li>\n<li>Lines: connections between the entities</li>\n</ul>\n</li>\n<li>Neo4J, InfiniteGraph</li>\n</ul>\n<h2 id=\"Differences-between-SQL-and-NoSQL\"><a href=\"#Differences-between-SQL-and-NoSQL\" class=\"headerlink\" title=\"Differences between SQL and NoSQL\"></a>Differences between SQL and NoSQL</h2><h3 id=\"Storage\"><a href=\"#Storage\" class=\"headerlink\" title=\"Storage\"></a>Storage</h3><ul>\n<li>SQL: store data in tables.</li>\n<li>NoSQL: have different data storage models.</li>\n</ul>\n<h3 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h3><ul>\n<li>SQL<ul>\n<li>Each record conforms to a fixed schema.</li>\n<li>Schema can be altered, but it requires modifying the whole database.</li>\n</ul>\n</li>\n<li>NoSQL:<ul>\n<li>Schemas are dynamic.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Querying\"><a href=\"#Querying\" class=\"headerlink\" title=\"Querying\"></a>Querying</h3><ul>\n<li>SQL<ul>\n<li>Use SQL (structured query language) for defining and manipulating the data.</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>Queries are focused on a collection of documents.</li>\n<li>UnQL (unstructured query language).</li>\n<li>Different databases have different syntax.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Scalability\"><a href=\"#Scalability\" class=\"headerlink\" title=\"Scalability\"></a>Scalability</h3><ul>\n<li>SQL<ul>\n<li>Vertically scalable (by increasing the horsepower: memory, CPU, etc) and expensive.</li>\n<li>Horizontally scalable (across multiple servers); but it can be challenging and time-consuming.</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>Horizontablly scalable (by adding more servers) and cheap.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID\"></a>ACID</h3><ul>\n<li>Atomicity, consistency, isolation, durability</li>\n<li>SQL<ul>\n<li>ACID compliant</li>\n<li>Data reliability</li>\n<li>Gurantee of transactions</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>Most sacrifice ACID compliance for performance and scalability.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Which-one-to-use\"><a href=\"#Which-one-to-use\" class=\"headerlink\" title=\"Which one to use?\"></a>Which one to use?</h2><h3 id=\"SQL\"><a href=\"#SQL\" class=\"headerlink\" title=\"SQL\"></a>SQL</h3><ul>\n<li>Ensure ACID compliance.<ul>\n<li>Reduce anomalies.</li>\n<li>Protect database integrity.</li>\n</ul>\n</li>\n<li>Data is structured and unchanging.</li>\n</ul>\n<h3 id=\"NoSQL\"><a href=\"#NoSQL\" class=\"headerlink\" title=\"NoSQL\"></a>NoSQL</h3><ul>\n<li>Data has little or no structure.</li>\n<li>Make the most of cloud computing and storage.<ul>\n<li>Cloud-based storage requires data to be easily spread across multiple servers to scale up.</li>\n</ul>\n</li>\n<li>Rapid development.<ul>\n<li>Frequent updates to the data structure.</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "sql",
                "nosql"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/steps-how-to-approach-the-system-design-questions-in-interviews/",
            "url": "https://samirpaul.in/posts/steps-how-to-approach-the-system-design-questions-in-interviews/",
            "title": "Steps how to approach the system design questions in interviews",
            "date_published": "2023-08-05T20:52:53.878Z",
            "content_html": "<p>These are the steps to go through mentally in the interviews, followed by actual interview experiences:</p>\n<ul>\n<li>a) <strong>Be absolutely sure you understand the problem being asked</strong>, clarify on the onset rather than assuming anything </li>\n<li>b) <strong>Use-cases</strong>. This is critical, you MUST know what is the system going to be used for, what is the scale it is going to be used for. Also, constraints like requests per second, requests types, data written per second, data read per second.</li>\n<li>c) Solve the problem for a <strong>very small set</strong>, say, 100 users. This will broadly help you figure out the data structures, components, abstract design of the overall model.</li>\n<li>d) Write down the various components figured out so far and how will they interact with each other.</li>\n<li>e)  As a rule of thumb remember at least these :</li>\n<li><ol>\n<li>processing and servers</li>\n</ol>\n</li>\n<li><ol start=\"2\">\n<li>storage</li>\n</ol>\n</li>\n<li><ol start=\"3\">\n<li>caching</li>\n</ol>\n</li>\n<li><ol start=\"4\">\n<li>concurrency and communication</li>\n</ol>\n</li>\n<li><ol start=\"5\">\n<li>security</li>\n</ol>\n</li>\n<li><ol start=\"6\">\n<li>load balancing and proxy</li>\n</ol>\n</li>\n<li><ol start=\"7\">\n<li>CDN</li>\n</ol>\n</li>\n<li><ol start=\"8\">\n<li>Monetization: if relevant, how will you monetize?<br> eg. What kind of DB (Is Postgres enough, if not why?), do you need caching and how much, is security a prime concern?</li>\n</ol>\n</li>\n<li>f) <strong>Special cases</strong> for the question asked. Say designing a system for storing thumbnails, will a file system be enough? What if you have to scale for facebook or google? Will a nosql based database work?</li>\n<li>g) After I have my components in place, what I generally try to do is look for minor optimization in various places according to the use-cases, various tradeoffs that will help in better scaling in 99% cases.</li>\n<li>h) [Scaling out or up]  (<a href=\"http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html\">http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html</a>)</li>\n<li>i) Check with the interviewer is there any other special case he is looking to solve? Also, it really helps if you know about the company you are interviewing with, what its architecture is, what will the interviewer have more interest in based on the company and what he works on?</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/sharding-or-data-partitioning/",
            "url": "https://samirpaul.in/posts/sharding-or-data-partitioning/",
            "title": "Sharding or Data Partitioning",
            "date_published": "2023-08-05T20:52:53.876Z",
            "content_html": "<h1 id=\"Sharding-Data-Partitioning\"><a href=\"#Sharding-Data-Partitioning\" class=\"headerlink\" title=\"Sharding &#x2F; Data Partitioning\"></a>Sharding &#x2F; Data Partitioning</h1><h2 id=\"Partitioning-methods\"><a href=\"#Partitioning-methods\" class=\"headerlink\" title=\"Partitioning methods\"></a>Partitioning methods</h2><ul>\n<li>Horizontal partitioning<ul>\n<li>Range based sharding.</li>\n<li>Put different rows into different tables.</li>\n<li>Con<ul>\n<li>If the value whose range is used for sharding isn’t chosen carefully, the partitioning scheme will lead to unbalanced servers.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Vertical partitioning<ul>\n<li>Divide data for a specific feature to their own server.</li>\n<li>Pro<ul>\n<li>Straightforward to implement.</li>\n<li>Low impact on the application.</li>\n</ul>\n</li>\n<li>Con<ul>\n<li>To support growth of the application, a database may need further partitioning.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Directory-based partitioning<ul>\n<li>A lookup service that knows the partitioning scheme and abstracts it away from the database access code.</li>\n<li>Allow addition of db servers or change of partitioning schema without impacting application.</li>\n<li>Con<ul>\n<li>Can be a single point of failure.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Partitioning-criteria\"><a href=\"#Partitioning-criteria\" class=\"headerlink\" title=\"Partitioning criteria\"></a>Partitioning criteria</h2><ul>\n<li>Key or hash-based partitioning<ul>\n<li>Apply a hash function to some key attribute of the entry to get the partition number.</li>\n<li>Problem<ul>\n<li>Adding new servers may require changing the hash function, which would need redistribution of data and downtime for the service.</li>\n<li>Workaround: <a href=\"https://en.wikipedia.org/wiki/Consistent_hashing\">consistent hashing</a>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>List partitioning<ul>\n<li>Each partition is assigned a list of values.</li>\n</ul>\n</li>\n<li>Round-robin partitioning<ul>\n<li>With <code>n</code> partitions, the <code>i</code> tuple is assigned to partition <code>i % n</code>.</li>\n</ul>\n</li>\n<li>Composite partitioning<ul>\n<li>Combine any of above partitioning schemes to devise a new scheme.</li>\n<li>Consistent hashing is a composite of hash and list partitioning.<ul>\n<li>Key -&gt; reduced key space through hash -&gt; list -&gt; partition.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Common-problems-of-sharding\"><a href=\"#Common-problems-of-sharding\" class=\"headerlink\" title=\"Common problems of sharding\"></a>Common problems of sharding</h2><p>Most of the constraints are due to the fact that operations across multiple tables or multiple rows in the same table will no longer run on the same server.</p>\n<ul>\n<li>Joins and denormalization<ul>\n<li>Joins will not be performance efficient since data has to be compiled from multiple servers.</li>\n<li>Workaround: denormalize the database so that queries can be performed from a single table. But this can lead to data inconsistency.</li>\n</ul>\n</li>\n<li>Referential integrity<ul>\n<li>Difficult to enforce data integrity constraints (e.g. foreign keys).</li>\n<li>Workaround<ul>\n<li>Referential integrity is enforced by application code.</li>\n<li>Applications can run SQL jobs to clean up dangling references.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Rebalancing<ul>\n<li>Necessity of rebalancing<ul>\n<li>Data distribution is not uniform.</li>\n<li>A lot of load on one shard.</li>\n</ul>\n</li>\n<li>Create more db shards or rebalance existing shards changes partitioning scheme and requires data movement.</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "sql",
                "nosql",
                "sharding",
                "data-partitioning"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/pyshooter/",
            "url": "https://samirpaul.in/posts/pyshooter/",
            "title": "PyShooter Python Game",
            "date_published": "2023-08-05T20:52:53.872Z",
            "content_html": "<h1 id=\"PyShooter\"><a href=\"#PyShooter\" class=\"headerlink\" title=\"PyShooter\"></a>PyShooter</h1><p><a href=\"https://www.python.org/\"><img src=\"https://img.shields.io/badge/language-python-blue.svg?style=flat\" alt=\"Language\"></a><br><a href=\"http://www.pygame.org/news.html\"><img src=\"https://img.shields.io/badge/module-pygame-brightgreen.svg?style=flat\" alt=\"Module\"></a></p>\n<p>PyShooter is a two-dimensional shooter game in which the player runs horizontally and fires at enemies.</p>\n<h5 id=\"Repository-https-github-com-SamirPaul1-PyShooter\"><a href=\"#Repository-https-github-com-SamirPaul1-PyShooter\" class=\"headerlink\" title=\"Repository: https://github.com/SamirPaul1/PyShooter\"></a>Repository: <a href=\"https://github.com/SamirPaul1/PyShooter\">https://github.com/SamirPaul1/PyShooter</a></h5><h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo:\"></a>Demo:</h2><iframe width=\"100%\" height=\"420\" src=\"https://www.youtube.com/embed/rg-49OTHZVY\" loading=\"lazy\" title=\"PyShooter - Samir Paul - YouTube\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"true\"></iframe>\n\n\n<iframe title=\"Video Demo\" src=\"https://user-images.githubusercontent.com/77569653/214920668-ef657089-b71f-43c8-8011-a202a09f5531.mp4\" loading=\"lazy\" width=\"100%\" height = \"500\" autoplay=\"autoplay\" loop=\"loop\" frameborder=\"0\" allowfullscreen></iframe>\n\n\n<p>Vimeo: <a href=\"https://vimeo.com/809728956\">https://vimeo.com/809728956</a></p>\n<!---\n<a href=\"https://www.youtube.com/watch?v=rg-49OTHZVY\">\n<img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/pygame-youtube-video-thumbnail.jpg\" alt=\"PyShooter Demo YouTube\" width=\"700\" height=\"370\">\n</a>\n-->\n\n<h2 id=\"How-To-Play\"><a href=\"#How-To-Play\" class=\"headerlink\" title=\"How To Play\"></a>How To Play</h2><ul>\n<li>If you don’t have <a href=\"https://www.python.org/downloads/\">Python</a> or <a href=\"http://www.pygame.org/download.shtml\">Pygame</a> installed, you can simply double click the .exe file to play the game.<br><strong>Note:</strong> <em>The .exe file needs to stay in the same directory as the sounds, images, and font folders.</em></li>\n</ul>\n<p>Install Pygame <code>pip install pygame</code></p>\n<ul>\n<li>If you have the correct version of Python and Pygame installed, you can run the program in the command prompt &#x2F; terminal.</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> PyShooter</span><br><span class=\"line\">python main.py</span><br></pre></td></tr></table></figure>\n\n\n<hr>\n<p>Credits for assets used: </p>\n<ol>\n<li><a href=\"https://erayzesen.itch.io/pixel-platformer\">https://erayzesen.itch.io/pixel-platformer</a> </li>\n<li><a href=\"https://secrethideout.itch.io/team-wars-platformer-battle\">https://secrethideout.itch.io/team-wars-platformer-battle</a> </li>\n<li><a href=\"https://soundimage.org/fantasywonder\">https://soundimage.org/fantasywonder</a> </li>\n<li><a href=\"https://gushh.net/blog/free-game-sprites-explosion-3\">https://gushh.net/blog/free-game-sprites-explosion-3</a>  </li>\n<li><a href=\"https://mtk.itch.io/grenades-16x16\">https://mtk.itch.io/grenades-16x16</a></li>\n</ol>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "projects",
                "python",
                "project",
                "pygame",
                "python-game",
                "pyshooter",
                "shooter-game"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/key-characteristics-of-distributed-systems/",
            "url": "https://samirpaul.in/posts/key-characteristics-of-distributed-systems/",
            "title": "Key Characteristics of Distributed Systems",
            "date_published": "2023-08-05T20:52:53.869Z",
            "content_html": "<h1 id=\"Key-Characteristics-of-Distributed-Systems\"><a href=\"#Key-Characteristics-of-Distributed-Systems\" class=\"headerlink\" title=\"Key Characteristics of Distributed Systems\"></a>Key Characteristics of Distributed Systems</h1><h2 id=\"Scalability\"><a href=\"#Scalability\" class=\"headerlink\" title=\"Scalability\"></a>Scalability</h2><ul>\n<li>The capability of a system to grow and manage increased demand.</li>\n<li>A system that can continuously evolve to support growing amount of work is scalable.</li>\n<li>Horizontal scaling: by adding more servers into the pool of resources.</li>\n<li>Vertical scaling: by adding more resource (CPU, RAM, storage, etc) to an existing server. This approach comes with downtime and an upper limit.</li>\n</ul>\n<h2 id=\"Reliability\"><a href=\"#Reliability\" class=\"headerlink\" title=\"Reliability\"></a>Reliability</h2><ul>\n<li>Reliability is the probability that a system will fail in a given period.</li>\n<li>A distributed system is reliable if it keeps delivering its service even when one or multiple components fail.</li>\n<li>Reliability is achieved through redundancy of components and data (remove every single point of failure).</li>\n</ul>\n<h2 id=\"Availability\"><a href=\"#Availability\" class=\"headerlink\" title=\"Availability\"></a>Availability</h2><ul>\n<li>Availability is the time a system remains operational to perform its required function in a specific period.</li>\n<li>Measured by the percentage of time that a system remains operational under normal conditions.</li>\n<li>A reliable system is available.</li>\n<li>An available system is not necessarily reliable.<ul>\n<li>A system with a security hole is available when there is no security attack.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Efficiency\"><a href=\"#Efficiency\" class=\"headerlink\" title=\"Efficiency\"></a>Efficiency</h2><ul>\n<li>Latency: response time, the delay to obtain the first piece of data.</li>\n<li>Bandwidth: throughput, amount of data delivered in a given time.</li>\n</ul>\n<h2 id=\"Serviceability-Manageability\"><a href=\"#Serviceability-Manageability\" class=\"headerlink\" title=\"Serviceability &#x2F; Manageability\"></a>Serviceability &#x2F; Manageability</h2><ul>\n<li>Easiness to operate and maintain the system.</li>\n<li>Simplicity and spend with which a system can be repaired or maintained.</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "distributed-systems"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/high-level-design/",
            "url": "https://samirpaul.in/posts/high-level-design/",
            "title": "High-level design",
            "date_published": "2023-08-05T20:52:53.867Z",
            "content_html": "<h1 id=\"High-level-design-HLD\"><a href=\"#High-level-design-HLD\" class=\"headerlink\" title=\"High-level design (HLD)\"></a>High-level design (HLD)</h1><hr>\n<h1 id=\"Ticketmaster\"><a href=\"#Ticketmaster\" class=\"headerlink\" title=\"Ticketmaster\"></a>Ticketmaster</h1><p><img src=\"/assets/img/system-design/ticketmaster-overview.png\" alt=\"ticketmaster-overview\"></p>\n<hr>\n<h1 id=\"Pastebin\"><a href=\"#Pastebin\" class=\"headerlink\" title=\"Pastebin\"></a>Pastebin</h1><p><img src=\"/assets/img/system-design/pastebin-overview.png\" alt=\"pastebin-overview\"><br><img src=\"/assets/img/system-design/pastebin-detail.png\" alt=\"pastebin-detail\"></p>\n<hr>\n<h1 id=\"Instagram\"><a href=\"#Instagram\" class=\"headerlink\" title=\"Instagram\"></a>Instagram</h1><p><img src=\"/assets/img/system-design/instagram-overview.png\" alt=\"instagram-overview\"><br><img src=\"/assets/img/system-design/instagram-detail.png\" alt=\"instagram-detail\"></p>\n<hr>\n<h1 id=\"Dropbox\"><a href=\"#Dropbox\" class=\"headerlink\" title=\"Dropbox\"></a>Dropbox</h1><p><img src=\"/assets/img/system-design/dropbox-overview.png\" alt=\"dropbox-overview\"><br><img src=\"/assets/img/system-design/dropbox-detail.png\" alt=\"dropbox-detail\"></p>\n<hr>\n<h1 id=\"Twitter\"><a href=\"#Twitter\" class=\"headerlink\" title=\"Twitter\"></a>Twitter</h1><p><img src=\"/assets/img/system-design/twitter-overview.png\" alt=\"twitter-overview\"><br><img src=\"/assets/img/system-design/twitter-detail.png\" alt=\"twitter-detail\"></p>\n<hr>\n<h1 id=\"Twitter-Search\"><a href=\"#Twitter-Search\" class=\"headerlink\" title=\"Twitter Search\"></a>Twitter Search</h1><p><img src=\"/assets/img/system-design/twitter-search-overview.png\" alt=\"twitter-search-overview\"><br><img src=\"/assets/img/system-design/twitter-search-detail.png\" alt=\"twitter-search-detail\"></p>\n<hr>\n<h1 id=\"Youtube\"><a href=\"#Youtube\" class=\"headerlink\" title=\"Youtube\"></a>Youtube</h1><p><img src=\"/assets/img/system-design/youtube-overview.png\" alt=\"youtube-overview\"><br><img src=\"/assets/img/system-design/youtube-detail.png\" alt=\"youtube-detail\"></p>\n<hr>\n<h1 id=\"Web-Crawler\"><a href=\"#Web-Crawler\" class=\"headerlink\" title=\"Web Crawler\"></a>Web Crawler</h1><p><img src=\"/assets/img/system-design/web-crawler-overview.png\" alt=\"web-crawler-overview\"><br><img src=\"/assets/img/system-design/web-crawler-detail.png\" alt=\"web-crawler-detail\"></p>\n<hr>\n<h1 id=\"Facebook-Newsfeed\"><a href=\"#Facebook-Newsfeed\" class=\"headerlink\" title=\"Facebook Newsfeed\"></a>Facebook Newsfeed</h1><p><img src=\"/assets/img/system-design/facebook-newsfeed-overview.png\" alt=\"facebook-newsfeed-overview\"></p>\n<hr>\n<h1 id=\"Yelp\"><a href=\"#Yelp\" class=\"headerlink\" title=\"Yelp\"></a>Yelp</h1><p><img src=\"/assets/img/system-design/yelp-overview.png\" alt=\"yelp-overview\"></p>\n<hr>\n<h1 id=\"Uber-Backend\"><a href=\"#Uber-Backend\" class=\"headerlink\" title=\"Uber Backend\"></a>Uber Backend</h1><p><img src=\"/assets/img/system-design/uber-backend-overview.png\" alt=\"uber-backend-overview\"></p>\n<hr>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/consistent-hashing/",
            "url": "https://samirpaul.in/posts/consistent-hashing/",
            "title": "Consistent Hashing",
            "date_published": "2023-08-05T20:52:53.865Z",
            "content_html": "<h1 id=\"Consistent-Hashing\"><a href=\"#Consistent-Hashing\" class=\"headerlink\" title=\"Consistent Hashing\"></a>Consistent Hashing</h1><h2 id=\"Simple-hashing\"><a href=\"#Simple-hashing\" class=\"headerlink\" title=\"Simple hashing\"></a>Simple hashing</h2><p>Problems of simple hashing function <code>key % n</code> (<code>n</code> is the number of servers):</p>\n<ul>\n<li>It is not horizontally scalable. Whenever a new cache host is added to the system, all existing mappings are broken.</li>\n<li>It may not be load balanced, especially for non-uniformly distributed data. Some servers will become hot spots.</li>\n</ul>\n<h2 id=\"Consistent-Hashing-1\"><a href=\"#Consistent-Hashing-1\" class=\"headerlink\" title=\"Consistent Hashing\"></a>Consistent Hashing</h2><ul>\n<li>Consistent hashing maps a key to an integer.</li>\n<li>Imagine that the integers in the range are placed on a ring such that the values are wrapped around.</li>\n<li>Given a list of servers, hash them to integers in the range.</li>\n<li>To map a key to a server:<ul>\n<li>Hash it to a single integer.</li>\n<li>Move clockwise on the ring until finding the first cache it encounters.</li>\n</ul>\n</li>\n<li>When the hash table is resized (a server is added or deleted), only <code>k/n</code> keys need to be remapped (<code>k</code> is the total number of keys, and <code>n</code> is the total number of servers).</li>\n<li>To handle hot spots, add “virtual replicas” for caches.<ul>\n<li>Instead of mapping each cache to a single point on the ring, map it to multiple points on the ring (replicas). This way, each cache is associated with multiple portions of the ring.</li>\n<li>If the hash function is “mixes well,” as the number of replicas increases, the keys will be more balanced.</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/company-engineering-blog-links/",
            "url": "https://samirpaul.in/posts/company-engineering-blog-links/",
            "title": "Company engineering blog links",
            "date_published": "2023-08-05T20:52:53.862Z",
            "content_html": "<p>courtesy <a href=\"https://github.com/checkcheckzz/system-design-interview#toc\">checkcheckzz</a></p>\n<p>Depending on where you are interviewing, go through the company blog. VERY USEFUL IN INTERVIEWS! It really helps if you have an idea of the architecture, as the questions asked will generally be of that domain and your prior knowledge will help out here.</p>\n<ul>\n<li><a href=\"http://nerds.airbnb.com/\">Airbnb Engineering</a></li>\n<li><a href=\"https://developer.amazon.com/blogs\">Amazon</a></li>\n<li><a href=\"https://aws.amazon.com/blogs/\">Amazon AWS</a></li>\n<li><a href=\"http://bandcamptech.wordpress.com/\">Bandcamp Tech</a></li>\n<li><a href=\"https://www.simple.com/engineering/\">BankSimple Simple Blog</a></li>\n<li><a href=\"http://word.bitly.com/\">Bitly Engineering Blog</a></li>\n<li><a href=\"http://blog.cloudera.com/blog/\">Cloudera Developer Blog</a></li>\n<li><a href=\"https://tech.dropbox.com/\">Dropbox Tech Blog</a></li>\n<li><a href=\"http://engineering.quora.com/\">Engineering at Quora</a></li>\n<li><a href=\"http://codeascraft.com/\">Etsy Code as Craft</a></li>\n<li><a href=\"https://www.facebook.com/Engineering\">Facebook Engineering</a></li>\n<li><a href=\"http://code.flickr.net/\">Flickr Code</a></li>\n<li><a href=\"http://engineering.foursquare.com/\">Foursquare Engineering Blog</a></li>\n<li><a href=\"http://googleresearch.blogspot.com/\">Google Research Blog</a></li>\n<li><a href=\"https://engineering.groupon.com/\">Groupn Engineering Blog</a></li>\n<li><a href=\"http://highscalability.com/\">High Scalability</a></li>\n<li><a href=\"http://instagram-engineering.tumblr.com/\">Instagram Engineering</a></li>\n<li><a href=\"http://engineering.linkedin.com/blog\">LinkedIn Engineering</a></li>\n<li><a href=\"http://tech.oyster.com/\">Oyster Tech Blog</a></li>\n<li><a href=\"http://engineering.pinterest.com/\">Pinterest Engineering Blog</a></li>\n<li><a href=\"http://devblog.songkick.com/\">Songkick Technology Blog</a></li>\n<li><a href=\"https://developers.soundcloud.com/blog/\">SoundCloud Backstage Blog</a></li>\n<li><a href=\"http://corner.squareup.com/\">Square The Corner</a></li>\n<li><a href=\"http://www.redditblog.com/\">THE REDDIT BLOG</a></li>\n<li><a href=\"https://github.com/blog/category/engineering\">The GitHub Blog</a></li>\n<li><a href=\"http://techblog.netflix.com/\">The Netflix Tech Blog</a></li>\n<li><a href=\"http://www.twilio.com/engineering\">Twilio Engineering Blog</a></li>\n<li><a href=\"https://engineering.twitter.com/\">Twitter Engineering</a></li>\n<li><a href=\"https://eng.uber.com/\">Uber Engineering</a></li>\n<li><a href=\"https://medium.com/walmartlabs\">Walmart Labs Tech Blog</a></li>\n<li><a href=\"http://engineering.webengage.com/\">WebEngage Engineering Blog</a></li>\n<li><a href=\"http://eng.yammer.com/blog/\">Yammer Engineering</a></li>\n<li><a href=\"http://engineeringblog.yelp.com/\">Yelp Engineering Blog</a></li>\n<li><a href=\"https://smarketshq.com/\">Smarkets Blog</a></li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/common-design-questions/",
            "url": "https://samirpaul.in/posts/common-design-questions/",
            "title": "Common Design questions",
            "date_published": "2023-08-05T20:52:53.859Z",
            "content_html": "<p>It generally depends what you are and you will be working on. Also what your level is but these are some of the more frequent interview questions.</p>\n<ul>\n<li>Design amazon’s frequently viewed product page (eg. which shows the last 5 items you saw)</li>\n<li>Design an online poker game for multiplayer. Solve for persistence, concurrency, scale. Draw the ER diagram for this </li>\n<li>Design a [url compression system] (<a href=\"http://www.hiredintech.com/system-design/the-system-design-process/\">http://www.hiredintech.com/system-design/the-system-design-process/</a>)</li>\n<li><a href=\"http://infolab.stanford.edu/~backrub/google.html\">Search engine</a> (generally asked with people who have some domain knowledge): basic crawling, collection, hashing etc. Depends on your expertise on this topic</li>\n<li>Design dropbox’s architecture. <a href=\"https://www.youtube.com/watch?v=PE4gwstWhmc\">good talk on this</a></li>\n<li>Design a <a href=\"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html\">picture sharing website</a>. How will you store thumbnails, photos? Usage of CDNS? caching at various layers etc.</li>\n<li><ul>\n<li>Design a news feed (eg. Facebook , Twitter): <a href=\"http://www.quora.com/Software-Engineering-Best-Practices/What-are-best-practices-for-building-something-like-a-News-Feed\">news feed</a></li>\n</ul>\n</li>\n<li>Design a product based on maps, eg hotel &#x2F; ATM finder given a location. </li>\n<li>Design malloc, free and <a href=\"http://courses.cs.washington.edu/courses/csep521/07wi/prj/rick.pdf\">garbage collection system</a>. What data structures to use? decorator pattern over malloc etc.</li>\n<li>Design a site like <a href=\"http://www.junglee.com/\">junglee.com</a> i.e price comparision, availability on e-commerce websites. When and will you cache, how much to query, how to crawl efficiently over e-commerce sites, sharding of databases, basic database design</li>\n<li>A web application for instant messaging, eg <a href=\"http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html\">whatsapp</a>, facebook chat. Issues of each, scaling problems, status and availability notification etc.</li>\n<li>Design a system for collaborating over a document simultaneously (eg <a href=\"https://neil.fraser.name/writing/sync/\">google docs</a>)</li>\n<li>(very common:) top ‘n’ or most frequent items of a running stream of data</li>\n<li>Design election commission architecture :<br> Let’s say we work with the Election Commission. On Counting day, we want to collate the votes received at the lakhs of voting booths all over the country. Each booth has a voting machine, which, when connected to the network, returns an array of the form {[party_id, num_votes],[party_id_2, num_votes_2],…}. We want to collect these and get the current scores in real time. The report we need continuously is how many seats is each party leading in. Please design a system for this.</li>\n<li>Design a logging system<br> (For web applications, it is common to have a large number of servers running the same application, with a load balancer in front to distribute the incoming requests. In this scenario, we want to check and alarm in case an exception is thrown in any of the servers. We want a system that checks for the appearance of specific words, “Exception”, “Disk Full” etc. in the logs of any of the servers. How would you design this system?)</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/client-server-communication/",
            "url": "https://samirpaul.in/posts/client-server-communication/",
            "title": "Client-Server Communication",
            "date_published": "2023-08-05T20:52:53.857Z",
            "content_html": "<h1 id=\"Client-Server-Communication\"><a href=\"#Client-Server-Communication\" class=\"headerlink\" title=\"Client-Server Communication\"></a>Client-Server Communication</h1><h2 id=\"Standard-HTTP-Web-Request\"><a href=\"#Standard-HTTP-Web-Request\" class=\"headerlink\" title=\"Standard HTTP Web Request\"></a>Standard HTTP Web Request</h2><ol>\n<li>Client opens a connection and requests data from server.</li>\n<li>Server calculates the response.</li>\n<li>Server sends the response back to the client on the opened request.</li>\n</ol>\n<h2 id=\"Ajax-Polling\"><a href=\"#Ajax-Polling\" class=\"headerlink\" title=\"Ajax Polling\"></a>Ajax Polling</h2><p>The client repeatedly polls (or requests) a server for data, and waits for the server to respond with data. If no data is available, an empty response is returned.</p>\n<ol>\n<li>Client opens a connection and requests data from the server using regular HTTP.</li>\n<li>The requested webpage sends requests to the server at regular intervals (e.g., 0.5 seconds).</li>\n<li>The server calculates the response and sends it back, like regular HTTP traffic.</li>\n<li>Client repeats the above three steps periodically to get updates from the server.</li>\n</ol>\n<p>Problems</p>\n<ul>\n<li>Client has to keep asking the server for any new data.</li>\n<li>A lot of responses are empty, creating HTTP overhead.</li>\n</ul>\n<h2 id=\"HTTP-Long-Polling\"><a href=\"#HTTP-Long-Polling\" class=\"headerlink\" title=\"HTTP Long-Polling\"></a>HTTP Long-Polling</h2><p>The client requests information from the server exactly as in normal polling, but with the expectation that the server may not respond immediately.</p>\n<ol>\n<li>The client makes an initial request using regular HTTP and then waits for a response.</li>\n<li>The server delays its response until an update is available, or until a timeout has occurred.</li>\n<li>When an update is available, the server sends a full response to the client.</li>\n<li>The client typically sends a new long-poll request, either immediately upon receiving a response or after a pause to allow an acceptable latency period.</li>\n</ol>\n<p>Each Long-Poll request has a timeout. The client has to reconnect periodically after the connection is closed, due to timeouts.</p>\n<h2 id=\"WebSockets\"><a href=\"#WebSockets\" class=\"headerlink\" title=\"WebSockets\"></a>WebSockets</h2><ul>\n<li>A persistent full duplex communication channels over a single TCP connection. Both server and client can send data at any time.</li>\n<li>A connection is established through WebSocket handshake.</li>\n<li>Low communication overhead.</li>\n<li>Real-time data transfer.</li>\n</ul>\n<h2 id=\"Server-Sent-Event-SSE\"><a href=\"#Server-Sent-Event-SSE\" class=\"headerlink\" title=\"Server-Sent Event (SSE)\"></a>Server-Sent Event (SSE)</h2><ol>\n<li>Client requests data from a server using regular HTTP.</li>\n<li>The requested webpage opens a connection to the server.</li>\n<li>Server sends the data to the client whenever there’s new information available.</li>\n</ol>\n<ul>\n<li>Use case:<ul>\n<li>When real-time traffic from server to client is needed.</li>\n<li>When server generates data in a loop and sends multiple events to client.</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design",
                "design-interview",
                "preparation"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/caching/",
            "url": "https://samirpaul.in/posts/caching/",
            "title": "Caching",
            "date_published": "2023-08-05T20:52:53.855Z",
            "content_html": "<ul>\n<li>Take advantage of the locality of reference principle: recently requested data is likely to be requested again.</li>\n<li>Exist at all levels in architecture, but often found at the level nearest to the front end.</li>\n</ul>\n<h2 id=\"Application-server-cache\"><a href=\"#Application-server-cache\" class=\"headerlink\" title=\"Application server cache\"></a>Application server cache</h2><ul>\n<li>Cache placed on a request layer node.</li>\n<li>When a request layer node is expanded to many nodes<ul>\n<li>Load balancer randomly distributes requests across the nodes.</li>\n<li>The same request can go to different nodes.</li>\n<li>Increase cache misses.</li>\n<li>Solutions:<ul>\n<li>Global caches</li>\n<li>Distributed caches</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Distributed-cache\"><a href=\"#Distributed-cache\" class=\"headerlink\" title=\"Distributed cache\"></a>Distributed cache</h2><ul>\n<li>Each request layer node owns part of the cached data.</li>\n<li>Entire cache is divided up using a consistent hashing function.</li>\n<li>Pro<ul>\n<li>Cache space can be increased easily by adding more nodes to the request pool.</li>\n</ul>\n</li>\n<li>Con<ul>\n<li>A missing node leads to cache lost.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Global-cache\"><a href=\"#Global-cache\" class=\"headerlink\" title=\"Global cache\"></a>Global cache</h2><ul>\n<li>A server or file store that is faster than original store, and accessible by all request layer nodes.</li>\n<li>Two common forms<ul>\n<li>Cache server handles cache miss.<ul>\n<li>Used by most applications.</li>\n</ul>\n</li>\n<li>Request nodes handle cache miss.<ul>\n<li>Have a large percentage of the hot data set in the cache.</li>\n<li>An architecture where the files stored in the cache are static and shouldn’t be evicted.</li>\n<li>The application logic understands the eviction strategy or hot spots better than the cache</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Content-distributed-network-CDN\"><a href=\"#Content-distributed-network-CDN\" class=\"headerlink\" title=\"Content distributed network (CDN)\"></a>Content distributed network (CDN)</h2><ul>\n<li>For sites serving large amounts of static media.</li>\n<li>Process<ul>\n<li>A request first asks the CDN for a piece of static media.</li>\n<li>CDN serves that content if it has it locally available.</li>\n<li>If content isn’t available, CDN will query back-end servers for the file, cache it locally and serve it to the requesting user.</li>\n</ul>\n</li>\n<li>If the system is not large enough for CDN, it can be built like this:<ul>\n<li>Serving static media off a separate subdomain using lightweight HTTP server (e.g. Nginx).</li>\n<li>Cutover the DNS from this subdomain to a CDN later.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cache-invalidation\"><a href=\"#Cache-invalidation\" class=\"headerlink\" title=\"Cache invalidation\"></a>Cache invalidation</h2><ul>\n<li>Keep cache coherent with the source of truth. Invalidate cache when source of truth has changed.</li>\n<li>Write-through cache<ul>\n<li>Data is written into the cache and permanent storage at the same time.</li>\n<li>Pro<ul>\n<li>Fast retrieval, complete data consistency, robust to system disruptions.</li>\n</ul>\n</li>\n<li>Con<ul>\n<li>Higher latency for write operations.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Write-around cache<ul>\n<li>Data is written to permanent storage, not cache.</li>\n<li>Pro<ul>\n<li>Reduce the cache that is no used.</li>\n</ul>\n</li>\n<li>Con<ul>\n<li>Query for recently written data creates a cache miss and higher latency.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Write-back cache<ul>\n<li>Data is only written to cache.</li>\n<li>Write to the permanent storage is done later on.</li>\n<li>Pro<ul>\n<li>Low latency, high throughput for write-intensive applications.</li>\n</ul>\n</li>\n<li>Con<ul>\n<li>Risk of data loss in case of system disruptions.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Cache-eviction-policies\"><a href=\"#Cache-eviction-policies\" class=\"headerlink\" title=\"Cache eviction policies\"></a>Cache eviction policies</h2><ul>\n<li>FIFO: first in first out</li>\n<li>LIFO: last in first out</li>\n<li>LRU: least recently used</li>\n<li>MRU: most recently used</li>\n<li>LFU: least frequently used</li>\n<li>RR: random replacement</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "caching",
                "system-design",
                "design-interview"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/google-programmable-search-engine/",
            "url": "https://samirpaul.in/posts/google-programmable-search-engine/",
            "title": "Google Programmable Search Engine",
            "date_published": "2023-08-05T20:52:53.852Z",
            "content_html": "<p>Google Programmable Search Engine lets you include a search engine on your website to help your visitors find the information they’re looking for. Because Programmable Search Engine is based on Google’s core search technology, you can be confident that your users are getting high quality, relevant results. You can customize a lot of your search engine, including:</p>\n<ul>\n<li>Apply your site’s look and feel to the search box and results page</li>\n<li>Use search features such as refinements, autocomplete, and promotions to enhance your users’ search experience</li>\n<li>Understand your users’ behavior by linking your search engine with  <a href=\"https://google.com/analytics/\">Google Analytics</a></li>\n<li>Make money from your search engine with  <a href=\"https://google.com/adsense\">Google AdSense</a></li>\n</ul>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo:\"></a>Demo:</h3><script async src=\"https://cse.google.com/cse.js?cx=4269bf6b77dbf4cae\">\n</script>\n<div class=\"gcse-search\"></div>\n\n<hr>\n<h3 id=\"How-is-Programmable-Search-Engine-different-from-Google-Web-Search\"><a href=\"#How-is-Programmable-Search-Engine-different-from-Google-Web-Search\" class=\"headerlink\" title=\"How is Programmable Search Engine different from Google Web Search?\"></a>How is Programmable Search Engine different from Google Web Search?</h3><p>You have the option to set your custom search engine to search the entire web, similar to a normal search on Google.com. However, you might notice some differences. Your custom search engine:</p>\n<ul>\n<li>Emphasizes your results over anything else on the web</li>\n<li>Doesn’t include some  <a href=\"https://support.google.com/websearch#topic=3378866\">Google Web Search features</a>, such as personalized results</li>\n<li>May have a subset of results from the Google index if you include more than ten sites</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "programmable-search"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/why-is-system-design-so-important/",
            "url": "https://samirpaul.in/posts/why-is-system-design-so-important/",
            "title": "Why is System Design So Important?",
            "date_published": "2023-08-05T20:52:53.850Z",
            "content_html": "<p>System design is important for several reasons:</p>\n<ol>\n<li><p><strong>Defining system requirements:</strong> System design helps to identify the requirements and constraints of the system being designed, and to prioritize those requirements. This ensures that the final design meets the needs of the stakeholders and users.</p>\n</li>\n<li><p><strong>Improved efficiency:</strong> A well-designed system can improve efficiency by reducing the number of errors, reducing duplication of effort, and automating manual tasks.</p>\n</li>\n<li><p><strong>Improved scalability:</strong> System design helps to ensure that the system can accommodate future growth and change. A well-designed system is modular and scalable, making it easier to add new features or capabilities as needed.</p>\n</li>\n<li><p><strong>Better communication:</strong> System design helps to create a common understanding of the system among stakeholders, including developers, managers, and customers. A well-defined design makes it easier to communicate the system’s capabilities, constraints, and requirements.</p>\n</li>\n<li><p><strong>Improved maintainability:</strong> A well-designed system is easier to maintain and modify as needed. The design includes documentation and a clear understanding of the system’s components and interactions, making it easier for future developers to understand the system and make changes as needed.</p>\n</li>\n</ol>\n<p>Overall, system design is an important step in the development of any system, as it helps to ensure that the final product meets the needs of stakeholders and users, is efficient, scalable, and maintainable, and facilitates communication and collaboration among team members.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/why-does-the-osi-model-matter/",
            "url": "https://samirpaul.in/posts/why-does-the-osi-model-matter/",
            "title": "Why Does The OSI Model Matter?",
            "date_published": "2023-08-05T20:52:53.847Z",
            "content_html": "<p>The OSI (Open Systems Interconnection) model matters because it provides a standard way of describing and understanding the different functions and components involved in a network communication. The OSI model is a seven-layer abstraction of the network communication process, and it defines the tasks and responsibilities of each layer.</p>\n<ol>\n<li><p>Standardization: The OSI model provides a standard reference model that is widely used and accepted in the industry. This standardization helps to ensure that different systems and components can communicate with each other, even if they were developed by different vendors or organizations.</p>\n</li>\n<li><p>Improved troubleshooting: The OSI model provides a systematic and organized approach to understanding network communication issues. By breaking down network communication into its component parts, it becomes easier to diagnose and fix problems.</p>\n</li>\n<li><p>Design and development: The OSI model can help with the design and development of network systems by providing a common understanding of the different layers and their responsibilities. This can facilitate communication and collaboration between different teams and stakeholders.</p>\n</li>\n<li><p>Education: The OSI model is a useful tool for teaching and learning about network communication. It provides a simple and visual way to understand the complex process of network communication.</p>\n</li>\n</ol>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "networking"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/what-is-system-design/",
            "url": "https://samirpaul.in/posts/what-is-system-design/",
            "title": "What is System Design?",
            "date_published": "2023-08-05T20:52:53.844Z",
            "content_html": "<p>System design is a process of defining the architecture, modules, interfaces, data for a system to satisfy specified requirements. It can refer to the design of a complex system, such as a computer network, an aircraft, or a power plant, or it can refer to the design of a smaller system, such as a software application or a single computer program.</p>\n<p>The goal of system design is to produce a blueprint or plan that outlines how all the components of the system will work together to achieve the desired outcomes. This process typically involves analyzing the requirements of the system, defining the architecture, selecting appropriate technologies, and ensuring that the system is scalable, maintainable, and meets performance, reliability, and security requirements.</p>\n<p>In software engineering, system design is often used as a synonym for software design, which is the process of defining the architecture, modules, interfaces, and data for a software system to satisfy specified requirements.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "system-design"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/virtualization-vs-containerization/",
            "url": "https://samirpaul.in/posts/virtualization-vs-containerization/",
            "title": "Virtualization vs Containerization",
            "date_published": "2023-08-05T20:52:53.842Z",
            "content_html": "<p>Virtualization and containerization are two different approaches to creating and managing virtual environments for software applications.</p>\n<p>Virtualization involves creating a virtual machine (VM) that acts as a separate, self-contained operating system environment. Each VM runs its own operating system and applications, and has its own set of virtual hardware resources, such as CPU, memory, and storage. Virtualization allows multiple virtual machines to run on a single physical server, improving utilization and reducing costs. Examples of virtualization technology include VMware and Hyper-V.</p>\n<p>Containerization, on the other hand, is a newer approach to virtualization that is designed to be more lightweight and efficient. Containers are similar to virtual machines, in that they provide a self-contained environment for running applications. However, unlike virtual machines, containers do not include a full operating system. Instead, they share the host operating system and rely on the host for system services. This means that containers are much smaller and faster to start up than virtual machines, and can be run on a much larger scale. Examples of containerization technology include Docker and Kubernetes.</p>\n<img src=\"https://samirpaulb.github.io/assets/virtualization-vs-containerization.jpg\" alt=\"virtualization vs containerization\" style=\"width:100%\" loading=\"lazy\">\n\n<p>In summary, virtualization and containerization are both ways to create virtual environments for software applications, but they differ in the level of abstraction and the resources they provide. Virtualization provides a full operating system environment, while containerization provides a lightweight, application-focused environment that relies on the host operating system. Both approaches have their own benefits and trade-offs, and the best choice will depend on the specific requirements of the application and the infrastructure.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/tcp-vs-udp/",
            "url": "https://samirpaul.in/posts/tcp-vs-udp/",
            "title": "TCP vs UDP",
            "date_published": "2023-08-05T20:52:53.839Z",
            "content_html": "<p>TCP (Transmission Control Protocol) and UDP (User Datagram Protocol) are two of the most commonly used protocols for transmitting data over a network.</p>\n<p>TCP is a reliable and connection-oriented protocol, meaning that a virtual connection must be established between the sender and the receiver before data can be transmitted. It ensures that data is delivered to the recipient in the same order it was sent, and that it is received without errors. If a packet of data is lost or corrupted during transmission, TCP will automatically retransmit the missing data until it is successfully received. This makes TCP a great choice for applications that require reliable data transfer, such as email and file transfers.</p>\n<p>UDP, on the other hand, is a connectionless and unreliable protocol. Unlike TCP, it does not establish a virtual connection between the sender and the receiver, and it does not guarantee that the data will be delivered in the same order it was sent. It is faster than TCP because it has less overhead, but it is less reliable. UDP is often used for applications that do not require reliable data transfer and can tolerate some lost or corrupted data, such as video or audio streaming, online gaming, and voice over IP (VoIP).</p>\n<p>In summary, TCP is best for applications that require reliable data transfer, while UDP is best for applications that can tolerate some loss and do not require reliable data transfer.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/ssl-tls-mtls/",
            "url": "https://samirpaul.in/posts/ssl-tls-mtls/",
            "title": "SSL TLS mTLS",
            "date_published": "2023-08-05T20:52:53.837Z",
            "content_html": "<p>SSL (Secure Sockets Layer), TLS (Transport Layer Security), and mTLS (Mutual TLS) are all security protocols used to secure communications over the internet.</p>\n<p>SSL was the original protocol used to secure internet communications, but it has been largely replaced by TLS, which is considered to be more secure. TLS is a cryptographic protocol that provides secure communication between two endpoints, such as a web server and a client browser. It ensures that the data transmitted between the endpoints is confidential and integrity protected.</p>\n<p>mTLS, also known as Mutual TLS, is an extension of TLS that adds an extra layer of security by requiring both the client and server to present a valid certificate to each other. This provides a stronger level of identity validation and protects against man-in-the-middle attacks. mTLS is used in situations where it is important to ensure the authenticity of both parties involved in a communication, such as in financial transactions or sensitive data transfers.</p>\n<p>In summary, SSL, TLS, and mTLS are all protocols used to secure internet communications, with TLS being the most widely used and considered to be the most secure. mTLS adds an extra layer of security by requiring both the client and server to present a valid certificate to each other, providing a stronger level of identity validation and protection against man-in-the-middle attacks.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/slo-or-service-level-objective/",
            "url": "https://samirpaul.in/posts/slo-or-service-level-objective/",
            "title": "SLO or Service Level Objective",
            "date_published": "2023-08-05T20:52:53.835Z",
            "content_html": "<p>A Service Level Objective (SLO) is a target or goal that a service provider sets for a specific service or service component, in terms of performance, availability, or some other quality metric. The SLO defines what the service provider considers to be an acceptable level of service, and provides a clear and measurable way to track the performance of the service over time.</p>\n<p>An SLO is typically expressed as a specific, quantifiable target, such as “99.95% availability” or “mean response time of less than 500 milliseconds”. The SLO can be used to track the performance of the service, and to identify areas where improvements can be made.</p>\n<p>The SLO is often used in conjunction with a Service Level Agreement (SLA), which is a formal agreement between a service provider and a customer that outlines the level of service that will be delivered. The SLO forms the basis for the SLA, and provides a clear and measurable target for the service provider to meet.</p>\n<p>In summary, an SLO is a specific and measurable target that a service provider sets for a service or service component, in order to track and measure its performance over time. By setting clear and achievable SLOs, service providers can ensure that their services meet the needs and expectations of their customers.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/sla-or-service-level-agreement/",
            "url": "https://samirpaul.in/posts/sla-or-service-level-agreement/",
            "title": "SLA or Service Level Agreement",
            "date_published": "2023-08-05T20:52:53.832Z",
            "content_html": "<p>A Service Level Agreement (SLA) is a contract between a service provider and a customer that outlines the level of service that the provider will deliver. The agreement is designed to ensure that the customer is aware of what to expect from the service, and to hold the service provider accountable for meeting those expectations.</p>\n<p>SLAs typically cover a range of aspects, including:</p>\n<p>Availability: The percentage of time that the service will be available and accessible to the customer.</p>\n<p>Performance: The expected response times for the service, and any relevant performance metrics.<br>Support: The hours of availability for customer support, and the response times for support requests.</p>\n<p>Maintenance: The scheduled maintenance windows for the service, and any expected downtime during these windows.</p>\n<p>Reporting: The frequency and format of performance reports that will be provided to the customer.</p>\n<p>Escalation: The procedures for escalation of issues, and the responsibility of the service provider in addressing them.</p>\n<p>Service credits: Financial compensation provided to the customer in the event that the service provider fails to meet the agreed-upon service levels.</p>\n<p>SLAs are common in many industries, including information technology, telecommunications, and cloud computing. By clearly defining the level of service that a customer can expect, SLAs help to build trust and ensure that the service provider and customer are aligned in their expectations.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/single-sign-on-sso/",
            "url": "https://samirpaul.in/posts/single-sign-on-sso/",
            "title": "Single Sign-On SSO",
            "date_published": "2023-08-05T20:52:53.830Z",
            "content_html": "<p>Single Sign-On (SSO) is a centralized authentication mechanism that allows users to access multiple applications or services with a single set of credentials. The idea behind SSO is to simplify the process of logging in to various systems, so that users only have to remember one username and password.</p>\n<p>With SSO, when a user logs in to one application or service, they are automatically logged in to all of the other systems and applications that are part of the SSO solution. This eliminates the need for the user to enter their credentials for each individual system, reducing the risk of forgotten passwords, password fatigue, and other security-related issues.</p>\n<p>There are different SSO technologies, including SAML (Security Assertion Markup Language), Kerberos, and OAuth&#x2F;OpenID Connect. Each of these technologies has its own strengths and weaknesses, and the best choice depends on the specific requirements and constraints of the organization.</p>\n<p>In summary, SSO is a centralized authentication mechanism that allows users to access multiple applications and services with a single set of credentials, reducing the risk of forgotten passwords and improving security. SSO provides a convenient and secure way to manage access to resources, making it a popular choice for many organizations.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/saml-vs-oauth-2-dot-0-and-openid-connect/",
            "url": "https://samirpaul.in/posts/saml-vs-oauth-2-dot-0-and-openid-connect/",
            "title": "SAML vs OAuth 2.0 and OpenID Connect",
            "date_published": "2023-08-05T20:52:53.827Z",
            "content_html": "<p>SAML (Security Assertion Markup Language), OAuth 2.0, and OpenID Connect are all protocols used for authentication and authorization on the web, but they each have different purposes and use cases.</p>\n<p>SAML is an XML-based standard for exchanging authentication and authorization data between parties. It is primarily used for single sign-on (SSO) solutions, allowing users to log in to multiple applications and services with a single set of credentials. SAML is used by many organizations to provide a secure and seamless SSO experience for their users.</p>\n<p>OAuth 2.0 is an authorization framework that enables a third-party application to obtain limited access to an HTTP service on behalf of a resource owner, without requiring the resource owner to reveal its credentials. OAuth 2.0 provides a secure way for a user to grant access to their resources to a third-party application, without the need for the user to share their password with the application. OAuth 2.0 is used by many popular web applications, including Google, Facebook, and Twitter, to allow users to authenticate and authorize access to their resources.</p>\n<p>OpenID Connect is a simple identity layer built on top of OAuth 2.0. It provides a secure way to authenticate users and verify their identities, while also providing information about the user’s identity to the client. OpenID Connect enables the client to know that the user is who they claim to be, without having to manage passwords or other sensitive information. It provides a single sign-on solution, allowing users to authenticate once and then access multiple applications without having to log in again. OpenID Connect is used by many organizations to provide a secure and easy way for their users to authenticate and access resources.</p>\n<p>In summary, SAML is primarily used for SSO, allowing users to log in to multiple applications and services with a single set of credentials. OAuth 2.0 is an authorization framework used to control access to resources, while OpenID Connect is a simple identity layer built on top of OAuth 2.0 that provides a secure way to authenticate users and verify their identities. Both OAuth 2.0 and OpenID Connect are widely used and provide a secure and flexible way to control access to resources and authenticate users on the web.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-vs-r-for-data-science/",
            "url": "https://samirpaul.in/posts/python-vs-r-for-data-science/",
            "title": "Python vs R for data science",
            "date_published": "2023-08-05T20:52:53.825Z",
            "content_html": "<p>Both Python and R are popular programming languages used in data science, but each has its own strengths and weaknesses.</p>\n<p>Python is a general-purpose programming language that has become a popular choice for data science due to its simplicity, versatility, and large community of users. Python has a large number of libraries and packages specifically designed for data analysis and manipulation, such as NumPy, Pandas, and Matplotlib. It also has a rich ecosystem for machine learning, with libraries such as scikit-learn, TensorFlow, and PyTorch.</p>\n<p>On the other hand, R is a language specifically designed for data analysis and statistical computing. R has a strong focus on graphical representation of data and provides many built-in functions for statistical analysis, making it a popular choice for exploratory data analysis. R also has a vast library of packages for data analysis, machine learning, and visualization, such as ggplot2, dplyr, and caret.</p>\n<p>In conclusion, the choice between Python and R largely depends on the specific requirements of the project and personal preferences of the data scientist. Python is a good choice for a general-purpose programming language, while R is best suited for data analysis and statistical computing. Some data scientists prefer to use both languages, leveraging the strengths of each to get the job done.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-to-automate-web-scraping/",
            "url": "https://samirpaul.in/posts/python-libraries-to-automate-web-scraping/",
            "title": "Python libraries to automate web scraping",
            "date_published": "2023-08-05T20:52:53.823Z",
            "content_html": "<p>There are several libraries in Python for automating web scraping:</p>\n<p>BeautifulSoup: This is a popular library for web scraping and parsing HTML and XML documents. It provides a convenient way to extract data from HTML and XML documents by searching and navigating the document tree.</p>\n<p>Scrapy: This is a full-featured web crawling and scraping framework for Python. It provides a comprehensive toolset for extracting data from websites, including features for handling common tasks like logging in, following links, and handling errors.</p>\n<p>Selenium: This is a browser automation library that can be used for web scraping as well. It allows you to control a web browser and interact with websites programmatically, making it useful for automating tasks that would otherwise require manual intervention.</p>\n<p>requests: This is a library for sending HTTP requests and processing HTTP responses. While it’s not specifically designed for web scraping, it can be used in combination with other libraries like BeautifulSoup to automate the process of sending requests to websites and extracting data from the responses.</p>\n<p>lxml: This is a library for parsing and manipulating XML and HTML documents. It provides an alternative to BeautifulSoup and can be used to extract data from HTML and XML documents in a more efficient and streamlined way.</p>\n<p>All of these libraries can be used to automate web scraping, but the best choice for your needs will depend on the specific requirements of your project. Some libraries may be more suited for large-scale web scraping, while others may be better suited for more targeted data extraction.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-validating-data-used-for-forms-in-many-cases/",
            "url": "https://samirpaul.in/posts/python-libraries-for-validating-data-used-for-forms-in-many-cases/",
            "title": "Python libraries for validating data. Used for forms in many cases",
            "date_published": "2023-08-05T20:52:53.820Z",
            "content_html": "<p>There are several Python libraries available for validating data, including:</p>\n<p>WTForms: WTForms is a flexible and powerful form handling library for Python. It provides a simple and intuitive interface for defining and validating forms, and it includes built-in support for a wide range of form fields, including text fields, checkboxes, and select fields.</p>\n<p>Django Forms: Django Forms is a form handling library built into the Django web framework. It provides a simple and flexible interface for defining and validating forms, and it includes support for a wide range of form fields, including text fields, checkboxes, and select fields.</p>\n<p>cerberus: Cerberus is a fast and lightweight data validation library for Python. It provides a simple and flexible interface for defining and validating data, and it includes support for a wide range of validation rules, including type checking, string formatting, and range checking.</p>\n<p>marshmallow: marshmallow is a data serialization and validation library for Python. It provides a simple and flexible interface for defining and validating data, and it includes support for a wide range of data types, including strings, integers, and dates.</p>\n<p>voluptuous: voluptuous is a data validation library for Python. It provides a simple and intuitive interface for defining and validating data, and it includes support for a wide range of validation rules, including type checking, string formatting, and range checking.</p>\n<p>These are just a few examples of the many data validation libraries available for Python. The best library for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-parsing-urls/",
            "url": "https://samirpaul.in/posts/python-libraries-for-parsing-urls/",
            "title": "Python libraries for parsing URLs",
            "date_published": "2023-08-05T20:52:53.817Z",
            "content_html": "<p>There are several libraries in Python for parsing URLs:</p>\n<p>urllib: This is a standard library in Python, and it includes several modules for working with URLs and HTTP requests, including urllib.parse which provides functions for parsing URLs.</p>\n<p>urlparse: This is another standard library in Python, and it provides similar functionality as urllib.parse.</p>\n<p>furl: This is a third-party library for parsing and manipulating URLs. It provides a more user-friendly interface than the standard libraries and supports features like query string parsing and modification.</p>\n<p>requests-furl: This library is an add-on for the requests library, and it provides URL parsing and manipulation functionality similar to furl.</p>\n<p>py-url-parse: This is another third-party library for parsing URLs, and it provides a simple and lightweight interface for parsing URLs into their constituent parts.</p>\n<p>All of these libraries can be used to parse URLs into their constituent parts, such as the scheme, host, path, query string, and fragment. You can choose the one that best fits your needs based on your requirements for features, ease of use, and performance.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-manipulating-audio-and-its-metadata/",
            "url": "https://samirpaul.in/posts/python-libraries-for-manipulating-audio-and-its-metadata/",
            "title": "Python libraries for manipulating audio and its metadata",
            "date_published": "2023-08-05T20:52:53.814Z",
            "content_html": "<p>There are several Python libraries that can be used for manipulating audio and its metadata, including:</p>\n<ol>\n<li><p><strong>pydub:</strong> pydub is a high-level library for audio manipulation. It allows you to load audio from a variety of sources (including MP3, WAV, and FLAC files), perform operations on the audio (such as slicing, concatenating, and exporting), and work with the metadata associated with the audio.</p>\n</li>\n<li><p><strong>librosa:</strong> librosa is a library for audio analysis and manipulation. It provides functions for loading audio from disk, computing features like Mel spectrograms and MFCCs, and manipulating the audio signal in various ways. It also includes functions for working with audio metadata, such as extracting song titles and artist information.</p>\n</li>\n<li><p><strong>audioread:</strong> audioread is a library for decoding audio files of various formats, including MP3, FLAC, and WAV. It provides a simple, unified interface for reading audio data from a variety of file formats, and it can also extract metadata from the audio files, such as the length of the audio, the sample rate, and the number of channels.</p>\n</li>\n<li><p><strong>mutagen:</strong> mutagen is a library for reading and writing metadata in a variety of audio file formats, including MP3, FLAC, and Ogg Vorbis. It provides a simple and flexible interface for working with audio metadata, and it supports a wide range of metadata fields, including album art, lyrics, and album and track information.</p>\n</li>\n<li><p><strong>soundfile:</strong> soundfile is a library for reading and writing audio files of various formats, including WAV, AIFF, and FLAC. It provides a simple and efficient interface for reading and writing audio data, and it includes support for working with the metadata associated with the audio files, such as the sample rate and number of channels.</p>\n</li>\n</ol>\n<p>These are just a few examples of the many libraries available for working with audio and its metadata in Python. The best library for your needs will depend on the requirements of your specific project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-implementing-authentication-schemes/",
            "url": "https://samirpaul.in/posts/python-libraries-for-implementing-authentication-schemes/",
            "title": "Python libraries for implementing authentication schemes",
            "date_published": "2023-08-05T20:52:53.812Z",
            "content_html": "<p>There are several Python libraries that can be used for implementing authentication schemes, including:</p>\n<p>Flask-Login: Flask-Login is a library for handling user authentication in Flask applications. It provides a simple and flexible interface for managing user accounts, including login and logout, as well as user session management.</p>\n<p>Django-Auth-LDAP: Django-Auth-LDAP is a library for authenticating against an LDAP directory in Django applications. It provides a simple and efficient way to authenticate users against an LDAP directory, and it includes support for user account management and session management.</p>\n<p>PyJWT: PyJWT is a library for encoding and decoding JSON Web Tokens (JWT) in Python. JWT is a popular format for transmitting information between parties, and PyJWT provides a simple and efficient way to encode and decode JWTs in Python.</p>\n<p>Passlib: Passlib is a library for handling password storage and verification in Python. It provides a simple and flexible interface for storing and verifying passwords, and it includes support for a wide range of password hashing algorithms, including bcrypt, scrypt, and Argon2.</p>\n<p>OAuthLib: OAuthLib is a library for implementing OAuth in Python. OAuth is a popular standard for authorization, and OAuthLib provides a simple and flexible way to implement OAuth in your Python applications.</p>\n<p>These are just a few examples of the many libraries available for implementing authentication schemes in Python. The best library for your needs will depend on the requirements of your specific project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-caching-data/",
            "url": "https://samirpaul.in/posts/python-libraries-for-caching-data/",
            "title": "Python libraries for caching data",
            "date_published": "2023-08-05T20:52:53.809Z",
            "content_html": "<p>There are several Python libraries available for caching data, including:</p>\n<p>Redis: Redis is an open-source, in-memory data store that supports a wide range of data structures, including hashes, lists, sets, and sorted sets. Redis can be used as a caching layer for storing frequently-accessed data, and it provides fast and efficient access to cached data.</p>\n<p>Memcached: Memcached is a distributed memory caching system that is often used as a caching layer for storing frequently-accessed data. It provides fast and efficient access to cached data, and it can be easily integrated with Python applications.</p>\n<p>Flask-Cache: Flask-Cache is a caching extension for Flask applications. It provides a simple and flexible interface for caching data in Flask applications, and it supports a wide range of caching backends, including Redis and Memcached.</p>\n<p>Django Cache Framework: The Django Cache Framework is a caching system built into the Django web framework. It provides a simple and flexible interface for caching data in Django applications, and it supports a wide range of caching backends, including Redis and Memcached.</p>\n<p>pylibmc: pylibmc is a Python wrapper around the libmemcached library, which is a high-performance, distributed memory caching system. pylibmc provides a simple and efficient interface for working with Memcached in Python, and it is well-suited for use in high-performance, distributed caching systems.</p>\n<p>These are just a few examples of the many caching libraries available for Python. The best library for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-content-management-systems/",
            "url": "https://samirpaul.in/posts/python-content-management-systems/",
            "title": "Python Content Management Systems",
            "date_published": "2023-08-05T20:52:53.803Z",
            "content_html": "<p>There are several content management systems (CMS) available in Python, including:</p>\n<p>Django CMS: Django CMS is a popular open-source CMS built using the Django web framework. It provides a flexible and scalable platform for building complex and feature-rich websites, and it includes support for a wide range of content types, including text, images, and videos.</p>\n<p>Mezzanine: Mezzanine is a high-level Python CMS built on top of the Django web framework. It provides a user-friendly interface for managing content, and it includes a range of built-in features, including blog, gallery, and form builders.</p>\n<p>Plone: Plone is a powerful and flexible open-source CMS built using the Python programming language. It provides a range of features for building and managing websites, including a user-friendly interface, content versioning, and support for multiple languages.</p>\n<p>Wagtail: Wagtail is a CMS built using the Django web framework. It provides a flexible and intuitive interface for building and managing websites, and it includes a range of built-in features, including a WYSIWYG editor, document management, and support for multiple languages.</p>\n<p>Pyramid CMS: Pyramid CMS is a flexible and scalable CMS built using the Pyramid web framework. It provides a simple and efficient platform for building and managing websites, and it includes support for a wide range of content types, including text, images, and videos.</p>\n<p>These are just a few examples of the many Python CMS options available. The best CMS for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-administrative-interfaces/",
            "url": "https://samirpaul.in/posts/python-libraries-for-administrative-interfaces/",
            "title": "Python libraries for administrative interfaces",
            "date_published": "2023-08-05T20:52:53.803Z",
            "content_html": "<p>There are several Python libraries that can be used to create administrative interfaces for web applications. Some popular ones include:</p>\n<ol>\n<li><p><strong>Django Admin:</strong> Django is a high-level Python web framework that includes a built-in administrative interface. The Django Admin interface is a powerful tool for managing the data and settings of a Django-powered website. It is designed to be easy to use and provides a range of functionality, including the ability to add, edit, and delete records, manage user accounts, and run custom actions on selected records.</p>\n</li>\n<li><p><strong>Flask-Admin:</strong> Flask is a lightweight Python web framework that can be used to create administrative interfaces. Flask-Admin is a popular third-party library that provides a simple and flexible way to create administrative interfaces for Flask applications. It supports a range of data types and includes features such as pagination, form validation, and support for custom views and actions.</p>\n</li>\n<li><p><strong>Pyrogram Admin:</strong> Pyrogram is a Telegram client library for Python that can be used to create administrative interfaces for Telegram bots. Pyrogram Admin provides an easy-to-use interface for managing the data and settings of a Telegram bot, and it supports a range of data types and actions, including message sending, user management, and custom commands.</p>\n</li>\n<li><p><strong>Sanic Admin:</strong> Sanic is an asynchronous Python web framework that can be used to create high-performance web applications. Sanic Admin is a third-party library that provides a simple and flexible way to create administrative interfaces for Sanic applications. It includes features such as pagination, form validation, and support for custom views and actions.</p>\n</li>\n</ol>\n<p>These are just a few examples of the many libraries available for creating administrative interfaces in Python. The best library for your needs will depend on the requirements of your specific project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/oauth-2-dot-0-and-openid-connect/",
            "url": "https://samirpaul.in/posts/oauth-2-dot-0-and-openid-connect/",
            "title": "OAuth 2.0 and OpenID Connect",
            "date_published": "2023-08-05T20:52:53.800Z",
            "content_html": "<p>OAuth 2.0 and OpenID Connect are both open standards for authorization and authentication on the web. They are used to control access to resources, such as APIs, and to verify the identity of users.</p>\n<p>OAuth 2.0 is an authorization framework that enables a third-party application to obtain limited access to an HTTP service on behalf of a resource owner, without requiring the resource owner to reveal its credentials. OAuth 2.0 provides a secure way for a user to grant access to their resources to a third-party application, without the need for the user to share their password with the application. OAuth 2.0 is used by many popular web applications, including Google, Facebook, and Twitter, to allow users to authenticate and authorize access to their resources.</p>\n<p>OpenID Connect is a simple identity layer built on top of OAuth 2.0. It provides a secure way to authenticate users and verify their identities, while also providing information about the user’s identity to the client. OpenID Connect enables the client to know that the user is who they claim to be, without having to manage passwords or other sensitive information. It provides a single sign-on solution, allowing users to authenticate once and then access multiple applications without having to log in again. OpenID Connect is used by many organizations to provide a secure and easy way for their users to authenticate and access resources.</p>\n<p>In summary, OAuth 2.0 is an authorization framework used to control access to resources, while OpenID Connect is a simple identity layer built on top of OAuth 2.0 that provides a secure way to authenticate users and verify their identities. Both OAuth 2.0 and OpenID Connect are widely used and provide a secure and flexible way to control access to resources and authenticate users on the web.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/libraries-for-visualizing-data/",
            "url": "https://samirpaul.in/posts/libraries-for-visualizing-data/",
            "title": "Libraries for visualizing data",
            "date_published": "2023-08-05T20:52:53.797Z",
            "content_html": "<p>There are many libraries available in Python for visualizing data, including:</p>\n<p>Matplotlib: Matplotlib is a plotting library for creating static, animated, and interactive visualizations in Python. It provides a wide range of visualization options, including line charts, bar charts, scatter plots, and histograms, and it can be easily integrated with other data analysis libraries, such as NumPy and Pandas.</p>\n<p>Seaborn: Seaborn is a library for creating beautiful and informative statistical graphics in Python. It provides a high-level interface for creating a wide range of visualizations, including heat maps, violin plots, and regression plots, and it is built on top of Matplotlib.</p>\n<p>Plotly: Plotly is an open-source library for creating interactive, web-based visualizations in Python. It provides a wide range of visualization options, including bar charts, line charts, scatter plots, and 3D visualizations, and it includes support for streaming and real-time data.</p>\n<p>Bokeh: Bokeh is an interactive visualization library for Python that is optimized for large, real-time data sets. It provides a wide range of visualization options, including scatter plots, line charts, and bar charts, and it includes support for interactive tools, such as zooming and panning.</p>\n<p>ggplot: ggplot is a plotting library for Python that is inspired by the popular ggplot2 library in R. It provides a high-level interface for creating a wide range of visualizations, including scatter plots, bar charts, and histograms, and it is designed to work well with Pandas data frames.</p>\n<p>These are just a few examples of the many data visualization libraries available for Python. The best library for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/how-to-learn-object-oriented-programming-in-python/",
            "url": "https://samirpaul.in/posts/how-to-learn-object-oriented-programming-in-python/",
            "title": "how to learn object oriented programming in python",
            "date_published": "2023-08-05T20:52:53.795Z",
            "content_html": "<p>Learning object-oriented programming (OOP) in Python can be done by following these steps:</p>\n<p>Familiarize yourself with the basic syntax and features of Python: Before diving into OOP, it’s important to have a good understanding of the basic syntax and features of the language, such as variables, data types, functions, and control structures.</p>\n<p>Understand the basics of OOP: OOP is a programming paradigm that is based on the concept of “objects”. An object is a data structure that contains both data and the functions (methods) that operate on that data. OOP also involves the concepts of inheritance, encapsulation, and polymorphism.</p>\n<p>Study the class syntax in Python: In Python, a class is a blueprint for creating objects. It defines the attributes (data) and methods of an object. Classes are defined using the class keyword, and objects are created by calling the class as a function.</p>\n<p>Learn about inheritance and polymorphism: Inheritance allows you to create a new class based on an existing class, inheriting its attributes and methods. Polymorphism allows objects of different classes to be treated as objects of the same class.</p>\n<p>Practice creating classes and objects: To solidify your understanding of OOP in Python, try creating some classes and objects on your own. Start with simple classes that define basic data structures, and then move on to more complex classes that involve inheritance and polymorphism.</p>\n<p>Read and understand code written by others: One of the best ways to learn OOP is to read and understand code written by others. Look for open-source projects on GitHub that use OOP in Python and study their code.</p>\n<p>Build projects: Apply your OOP knowledge by building real-world projects. This could be anything from a simple game to a complex web application.</p>\n<p>Remember, the key to learning OOP is practice and repetition. Keep trying out new concepts and examples until you feel comfortable with the basics of OOP in Python.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/databases-implemented-in-python/",
            "url": "https://samirpaul.in/posts/databases-implemented-in-python/",
            "title": "Databases implemented in Python",
            "date_published": "2023-08-05T20:52:53.787Z",
            "content_html": "<p>There are several databases that have been implemented in Python, including:</p>\n<p>SQLite: SQLite is a lightweight, file-based database that is well-suited for small to medium-sized projects. It provides a simple and efficient SQL interface, and it is included as a standard library in many Python distributions.</p>\n<p>PostgreSQL: PostgreSQL is a powerful, open-source relational database that is well-suited for large, complex projects. It provides a rich set of features, including transactions, stored procedures, and advanced indexing, and it is widely used in a variety of applications, from web applications to scientific research.</p>\n<p>MySQL: MySQL is a widely-used, open-source relational database that is well-suited for small to medium-sized projects. It provides a simple and efficient SQL interface, and it is widely used for a variety of applications, from web applications to data warehousing.</p>\n<p>SQLAlchemy: SQLAlchemy is a SQL toolkit and Object-Relational Mapping (ORM) library for Python. It provides a high-level interface for working with databases, and it supports a wide range of databases, including SQLite, PostgreSQL, and MySQL.</p>\n<p>Django ORM: Django ORM is an Object-Relational Mapping (ORM) library that is built into the Django web framework. It provides a simple and intuitive interface for working with databases, and it supports a wide range of databases, including SQLite, PostgreSQL, and MySQL.</p>\n<p>These are just a few examples of the many databases that have been implemented in Python. The best database for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/gaming-library-in-python/",
            "url": "https://samirpaul.in/posts/gaming-library-in-python/",
            "title": "gaming library in python",
            "date_published": "2023-08-05T20:52:53.787Z",
            "content_html": "<p>There are several libraries in Python that can be used for game development, including:</p>\n<p>Pygame: This is a popular library for game development in Python. It provides a simple and easy-to-use set of tools for creating 2D games and other types of interactive applications.</p>\n<p>Arcade: This is a library for creating 2D video games and other interactive applications in Python. It provides a high-level API for creating games and other interactive applications, making it a great choice for beginners.</p>\n<p>Pyglet: This is a cross-platform library for game and multimedia development in Python. It provides a powerful and flexible set of tools for creating games and other interactive applications, including support for 2D and 3D graphics.</p>\n<p>Kivy: This is an open-source library for developing mobile and desktop games in Python. It provides a high-level API for creating games and other interactive applications, and it supports multiple platforms, including Android, iOS, and Windows.</p>\n<p>PyOpenGL: This is a library for developing 3D games and other interactive applications in Python. It provides a low-level API for creating 3D graphics and animations, and it is often used in conjunction with other game development libraries, such as Pygame or Pyglet.</p>\n<p>All of these libraries have their own strengths and weaknesses, so it’s important to evaluate each one to see which one is the best fit for your needs. Consider factors such as the ease of use, available features, and overall performance when choosing a gaming library in Python.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        }
    ]
}