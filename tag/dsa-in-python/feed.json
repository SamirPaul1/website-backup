{
    "version": "https://jsonfeed.org/version/1",
    "title": "Samir Paul ‚Ä¢ All posts by \"dsa-in-python\" tag",
    "description": "Software Engineer",
    "home_page_url": "https://samir.pages.dev",
    "items": [
        {
            "id": "https://samir.pages.dev/posts/data-structures-and-algorithms-for-coding-interview/",
            "url": "https://samir.pages.dev/posts/data-structures-and-algorithms-for-coding-interview/",
            "title": "Data Structures and Algorithms for Coding Interview",
            "date_published": "2023-08-15T04:25:52.000Z",
            "content_html": "<p><b> Repository Link: <a href=\"https://github.com/SamirPaul1/DSAlgo\">https://github.com/SamirPaul1/DSAlgo</a> </b></p>\n<blockquote>\n<p>In this repository, I have stored solutions to various problems and concepts of <strong>Data Structures and Algorithms</strong> in Python in a structured manner.</p>\n</blockquote>\n<p align=\"center\">\n<a href=\"https://github.com/SamirPaul1/DSAlgo\"> \n<img alt=\"Stars\" loading=\"lazy\" src=\"https://img.shields.io/github/stars/SamirPaul1/DSAlgo?style=for-the-badge\"> \n<img alt=\"Forks\" loading=\"lazy\" src=\"https://img.shields.io/github/forks/SamirPaul1/DSAlgo?style=for-the-badge\"> \n<img alt=\"Size\" loading=\"lazy\" src=\"https://img.shields.io/github/repo-size/SamirPaul1/DSAlgo?style=for-the-badge\"> \n<img alt=\"Lines\" loading=\"lazy\" src=\"https://img.shields.io/tokei/lines/github/SamirPaul1/DSAlgo?style=for-the-badge\"> \n</a>\n</p>\n\n\n<h3 id=\"Topics-Covered\"><a href=\"#Topics-Covered\" class=\"headerlink\" title=\"Topics Covered:\"></a><em><strong>Topics Covered</strong></em>:</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/02_Dynamic-Programming\"><strong>Dynamic Programming</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/03_Sorting-Algorithms\"><strong>Sorting Algorithms</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/04_LinkedList\"><strong>LinkedList</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/05_Object-Oriented-Programming\"><strong>Object-Oriented Programming</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/06_Binary-Trees\"><strong>Binary Trees</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/07_Graph\"><strong>Graph Algorithms</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/08_Heap\"><strong>Heap</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/09_Matrix\"><strong>Matrix</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/10_Trie\"><strong>Trie</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/11_Binary-Search\"><strong>Binary Search</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/12_Backtracking\"><strong>Backtracking</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/13_Stack\"><strong>Stack</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/14_Queue\"><strong>Queue</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/15_Greedy\"><strong>Greedy</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/16_String\"><strong>String</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/17_Bit-Manipulation\"><strong>Bit Manipulation</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/18_Array\"><strong>Array</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/19_HashMap\"><strong>HashMap</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/20_DFS-BFS\"><strong>DFS BFS</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/21_Two-Pointers\"><strong>Two Pointers</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/22_Math\"><strong>Math</strong></a> </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/23_Recursion\"><strong>Recursion</strong></a></li>\n</ul>\n<p>In various folders of the above topics, you can find questions and concepts related to that topic. </p>\n<ul>\n<li><p>In the <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/02_Dynamic-Programming\">Dynamic Programming</a> section, you can find all the questions covered and not covered in <a href=\"https://www.youtube.com/c/AdityaVermaTheProgrammingLord\">Aditya Verma‚Äôs</a> <a href=\"https://youtube.com/playlist?list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go\">dynamic programming playlist</a> folder-wise with my <a href=\"https://raw.githubusercontent.com/SamirPaul1/DSAlgo/main/02_Dynamic-Programming/Dynamic-Programming-NOTE.pdf\">handwritten notes</a>.‚úçÔ∏è</p>\n</li>\n<li><p>If you are preparing for an interview from <a href=\"https://takeuforward.org/interviews/strivers-sde-sheet-top-coding-interview-problems/\">Striver‚Äôs SDE Sheet</a> then the <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice\"><strong>30-Days-SDE-Sheet-Practice</strong></a> will be helpful to you. Here I have stored solutions to questions of each day with short notes to each solution, as short notes about the approach are very helpful during revision.üéØ</p>\n</li>\n<li><p>In the  <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/Questions-Sheet\"><strong>Questions-Sheet</strong></a> directory, you can find questions asked by top product-based companies.</p>\n</li>\n<li><p>There is a collection of books and pdfs on various important computer science fundamentals in the <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/BOOKS-and-PDFs\"><strong>BOOKS-and-PDFs</strong></a> directory.üìö</p>\n</li>\n</ul>\n<p><img src=\"/assets/img/repository-image-dsalgo-samirpaul1-leetcode-post.jpeg\" alt=\"DSAlgo repo\" title=\"DSAlgo repository\"></p>\n<hr>\n<p align=\"center\">\n<b>View this repository in online VS Code: <a href=\"https://samirpaul1.github.io/DSAlgo\">  https://samirpaul.in/DSAlgo.  <img alt=\"DSAlgo\"  loading=\"lazy\" src=\"https://github.com/SamirPaul1/DSAlgo/actions/workflows/pages/pages-build-deployment/badge.svg\">\n</a></b>\n</p>\n\n\n<p><img src=\"/assets/img/samirpaul.in-DSAlgo-demo.png\" alt=\"DSA Online VSCode\" title=\"DSA Online VSCode\"></p>\n<hr>\n<p>I am continuously trying to improve this repository by adding new questions and concepts related to the respective topic. Please feel free to contribute to this repository.üíª</p>\n<p><strong>Things you can contribute to:</strong></p>\n<ul>\n<li>Update the existing solution with a better one (better complexity).</li>\n<li>Add new questions and solutions in <code>Python3</code> to the respective directory.</li>\n<li>Add new resources to <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/BOOKS-and-PDFs\">BOOKS-and-PDFs</a> &amp; <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/Questions-Sheet\">Questions-Sheet</a>.</li>\n<li>Solve issues raised by other people or yourself.</li>\n<li>Provide well-documented source code with detailed explanations.</li>\n</ul>\n<hr>\n<h3 id=\"Stargazers-over-time\"><a href=\"#Stargazers-over-time\" class=\"headerlink\" title=\"Stargazers over time\"></a>Stargazers over time</h3><p><a href=\"https://github.com/SamirPaul1/DSAlgo\"><img alt=\"Star History\" loading=\"lazy\"  src=\"https://api.star-history.com/svg?repos=SamirPaul1/DSAlgo&type=Date\"></a></p>\n<hr>\n<h3 id=\"List-of-Important-Questions-‚ú®\"><a href=\"#List-of-Important-Questions-‚ú®\" class=\"headerlink\" title=\"List of Important Questions:‚ú®\"></a>List of Important Questions:‚ú®</h3><p>The following list of questions was recommended by <a href=\"https://www.youtube.com/c/LoveBabbar1\">Love Babbar</a> on this <a href=\"https://youtu.be/4iFALQ1ACdA\">video</a>. I have documented all those questions here.‚úåÔ∏è</p>\n<table>\n<thead>\n<tr>\n<th>Topic</th>\n<th>Important DSA Questions</th>\n<th>Link</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Topic:</td>\n<td>Problem:</td>\n<td>Related Link</td>\n</tr>\n<tr>\n<td>&lt;-&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Reverse the array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find the maximum and minimum element in an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find the ‚ÄúKth‚Äù max and min element of an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Move all the negative elements to one side of the array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find the Union and Intersection of the two sorted arrays.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Write a program to cyclically rotate an array by one.</td>\n<td><a href=\"https://leetcode.com/problems/rotate-array/\">https://leetcode.com/problems/rotate-array/</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>find Largest sum contiguous Subarray [V. IMP]</td>\n<td><a href=\"https://leetcode.com/problems/maximum-subarray/\">https://leetcode.com/problems/maximum-subarray/</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Minimise the maximum difference between heights [V.IMP]</td>\n<td><a href=\"https://leetcode.com/problems/smallest-range-ii/\">https://leetcode.com/problems/smallest-range-ii/</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Minimum no. of Jumps to reach end of an array</td>\n<td><a href=\"https://leetcode.com/problems/jump-game\">https://leetcode.com/problems/jump-game</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>find duplicate in an array of N+1 Integers</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Merge 2 sorted arrays without using Extra space.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Kadane‚Äôs Algorithm</td>\n<td><a href=\"https://leetcode.com/problems/maximum-subarray/\">https://leetcode.com/problems/maximum-subarray/</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Merge Intervals</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Next Permutation</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Count Inversion</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Best time to buy and Sell stock</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>find all pairs on integer array whose sum is equal to given number</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>find common elements In 3 sorted arrays</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Rearrange the array in alternating positive and negative items with O(1) extra space</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find if there is any subarray with sum equal to 0</td>\n<td><a href=\"https://leetcode.com/problems/subarray-sum-equals-k/\">https://leetcode.com/problems/subarray-sum-equals-k/</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find factorial of a large number</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>find maximum product subarray</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find longest coinsecutive subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Given an array of size n and a number k, fin all elements that appear more than ‚Äú n&#x2F;k ‚Äú times.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Maximum profit by buying and selling a share atmost twice</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find whether an array is a subset of another array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find the triplet that sum to a given value</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Trapping Rain water problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Chocolate Distribution problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Smallest Subarray with sum greater than a given value</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Three way partitioning of an array around a given value</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Minimum swaps required bring elements less equal K together</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Minimum no. of operations required to make an array palindrome</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Median of 2 sorted arrays of equal size</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Median of 2 sorted arrays of different size</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Subarray Sums Divisible by K</td>\n<td></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Continuous Subarray Sum</td>\n<td></td>\n</tr>\n<tr>\n<td>&lt;-&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&lt;-&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Spiral traversal on a Matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Search an element in a matriix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Find median in a row wise sorted matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Find row with maximum no. of 1‚Äôs</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Print elements in sorted order using row-column wise sorted matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Largest Rectangle in Histogram</td>\n<td></td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Maximum size rectangle</td>\n<td><a href=\"https://practice.geeksforgeeks.org/problems/max-rectangle/1\">https://practice.geeksforgeeks.org/problems/max-rectangle/1</a></td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Find a specific pair in matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Rotate matrix by 90 degrees</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Kth smallest element in a row-cpumn wise sorted matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Common elements in all rows of a given matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Reverse a String</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Check whether a String is Palindrome or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find Duplicate characters in a string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Why strings are immutable in Java?</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Write a Code to check whether one string is a rotation of another</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Write a Program to check whether a string is a valid shuffle of two strings or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Count and Say problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find Longest Recurring Subsequence in String</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Print all Subsequences of a string.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Print all the permutations of the given string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Split the Binary string into two substring with equal 0‚Äôs and 1‚Äôs</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Word Wrap Problem [VERY IMP].</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>EDIT Distance [Very Imp]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find next greater number with same set of digits. [Very Very IMP]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Balanced Parenthesis problem.[Imp]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Word break Problem[ Very Imp]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Rabin Karp Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>KMP Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Convert a Sentence into its equivalent mobile numeric keypad sequence.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Minimum number of bracket reversals needed to make an expression balanced.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Count All Palindromic Subsequence in a given String.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Count of number of given string in 2D character array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Search a Word in a 2D Grid of characters.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Boyer Moore Algorithm for Pattern Searching.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Converting Roman Numerals to Decimal</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Longest Common Prefix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Number of flips to make binary string alternate</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find the first repeated word in string.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Minimum number of swaps for bracket balancing.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find the longest common subsequence between two strings.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Program to generate all possible valid IP addresses from given  string.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Write a program tofind the smallest window that contains all characters of string itself.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Rearrange characters in a string such that no two adjacent are same</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Minimum characters to be added at front to make string palindrome</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Given a sequence of words, print all anagrams together</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find the smallest window in a string containing all characters of another string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Recursively remove all adjacent duplicates</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>String matching where one string contains wildcard characters</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Function to find Number of customers who could not get a computer</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Transform One String to Another using Minimum Number of Given Operation</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Check if two given strings are isomorphic to each other</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Recursively print all sentences that can be formed from list of word lists</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Find first and last positions of an element in a sorted array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Find a Fixed Point (Value equal to index) in a given array</td>\n<td><a href=\"https://leetcode.com/problems/find-pivot-index/\">https://leetcode.com/problems/find-pivot-index/</a></td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Search in a rotated sorted array</td>\n<td><a href=\"https://leetcode.com/problems/search-in-rotated-sorted-array/\">https://leetcode.com/problems/search-in-rotated-sorted-array/</a></td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>square root of an integer</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Maximum and minimum of an array using minimum number of comparisons</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Optimum location of point to minimize total distance</td>\n<td><a href=\"https://leetcode.com/problems/best-meeting-point/\">https://leetcode.com/problems/best-meeting-point/</a></td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Find the repeating and the missing</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>find majority element</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Searching in an array where adjacent differ by at most k</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>find a pair with a given difference</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>find four elements that sum to a given value</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>maximum sum such that no 2 elements are adjacent</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Count triplet with sum smaller than a given value</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>merge 2 sorted arrays</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>print all subarrays with 0 sum</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Product array Puzzle</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Sort array according to count of set bits</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>minimum no. of swaps required to sort the array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Bishu and Soldiers</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Rasta and Kheshtak</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Kth smallest number again</td>\n<td>Using Min Heap</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Find pivot element in a sorted array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>K-th Element of Two Sorted Arrays</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Aggressive cows</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Book Allocation Problem</td>\n<td><a href=\"https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/\">https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/</a></td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>EKOSPOJ:</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Job Scheduling Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Missing Number in AP</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Smallest number with atleastn trailing zeroes infactorial</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Painters Partition Problem:</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>ROTI-Prata SPOJ</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>DoubleHelix SPOJ</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Subset Sums</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Findthe inversion count</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Implement Merge-sort in-place</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Partitioning and Sorting Arrays with Many Repeated Entries</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Write a Program to reverse the Linked List. (Both Iterative and recursive)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Reverse a Linked List in group of Given Size. [Very Imp]</td>\n<td><a href=\"https://leetcode.com/problems/reverse-nodes-in-k-group/\">https://leetcode.com/problems/reverse-nodes-in-k-group/</a></td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Write a program to Detect loop in a linked list.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Write a program to Delete loop in a linked list.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Find the starting point of the loop.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Remove Duplicates in a sorted Linked List.</td>\n<td></td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Remove Duplicates from Sorted List II</td>\n<td></td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Remove Duplicates in a Un-sorted Linked List.</td>\n<td></td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Write a Program to Move the last element to Front in a Linked List.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Add ‚Äú1‚Äù to a number represented as a Linked List.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Add two numbers represented by linked lists.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Intersection of two Sorted Linked List.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Intersection Point of two Linked Lists.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Merge Sort For Linked lists.[Very Important]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Quicksort for Linked Lists.[Very Important]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Find the middle Element of a linked list.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Check if a linked list is a circular linked list.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Split a Circular linked list into two halves.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Write a Program to check whether the Singly Linked list is a palindrome or not.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Deletion from a Circular Linked List.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Reverse a Doubly Linked list.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Find pairs with a given sum in a DLL.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Count triplets in a sorted DLL whose sum is equal to given value ‚ÄúX‚Äù.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Sort a ‚Äúk‚Äùsorted Doubly Linked list.[Very IMP]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Rotate DoublyLinked list by N nodes.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Rotate a Doubly Linked list in group of Given Size.[Very IMP]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Can we reverse a linked list in less than O(n) ?</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Why Quicksort is preferred for. Arrays and Merge Sort for LinkedLists ?</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Flatten a Linked List</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Sort a LL of 0‚Äôs, 1‚Äôs and 2‚Äôs</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Clone a linked list with next and random pointer</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Merge K sorted Linked list</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Multiply 2 no. represented by LL</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Delete nodes which have a greater value on right side</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Segregate even and odd nodes in a Linked List</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Program for n‚Äôth node from the end of a Linked List</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Find the first non-repeating character from a stream of characters</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>level order traversal</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Reverse Level Order traversal</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Height of a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Diameter of a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Mirror of a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Inorder Traversal of a tree both using recursion and Iteration</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Preorder Traversal of a tree both using recursion and Iteration</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Postorder Traversal of a tree both using recursion and Iteration</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Left View of a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Right View of Tree</td>\n<td><a href=\"https://leetcode.com/problems/binary-tree-right-side-view/\">https://leetcode.com/problems/binary-tree-right-side-view/</a></td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Top View of a tree</td>\n<td><a href=\"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/\">https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/</a></td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Bottom View of a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Zig-Zag traversal of a binary tree</td>\n<td><a href=\"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\">https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/</a></td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if a tree is balanced or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Diagnol Traversal of a Binary tree</td>\n<td><a href=\"https://www.youtube.com/watch?v=e9ZGxH1y_PE\">https://www.youtube.com/watch?v=e9ZGxH1y_PE</a></td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Boundary traversal of a Binary tree</td>\n<td><a href=\"https://www.youtube.com/watch?v=0ca1nvR0be4\">https://www.youtube.com/watch?v=0ca1nvR0be4</a></td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Construct Binary Tree from String with Bracket Representation</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Convert Binary tree into Doubly Linked List</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Convert Binary tree into Sum tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Construct Binary tree from Inorder and preorder traversal</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Find minimum swaps required to convert a Binary tree into BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if Binary tree is Sum tree or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if all leaf nodes are at same level or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if a Binary Tree contains duplicate subtrees of size 2 or more [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if 2 trees are mirror or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Sum of Nodes on the Longest path from root to leaf node</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if given graph is tree or not.  [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Find Largest subtree sum in a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Maximum Sum of nodes in Binary tree such that no two are adjacent</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Print all ‚ÄúK‚Äù Sum paths in a Binary tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Find LCA in a Binary tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Find distance between 2 nodes in a Binary tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Kth Ancestor of node in a Binary tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Find all Duplicate subtrees in a Binary tree [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Tree Isomorphism Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Copy List with Random Pointer</td>\n<td></td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Fina a value in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Deletion of a node in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find min and max value in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find inorder successor and inorder predecessor in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Check if a tree is a BST or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Populate Inorder successor of all nodes</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find LCA  of 2 nodes in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Construct BST from preorder traversal</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Convert Binary tree into BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Convert a normal BST into a Balanced BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Merge two BST [ V.V.V&gt;IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find Kth largest element in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find Kth smallest element in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Count pairs from 2 BST whose sum is equal to given value ‚ÄúX‚Äù</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find the median of BST in O(n) time and O(1) space</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Count BST ndoes that lie in a given range</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Replace every element with the least greater element on its right</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Given ‚Äún‚Äù appointments, find the conflicting appointments</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Check preorder is valid or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Check whether BST contains Dead end</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Largest BST in a Binary Tree [ V.V.V.V.V IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Flatten BST to sorted list</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Check Completeness of a Binary Tree</td>\n<td></td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Non-overlapping Intervals</td>\n<td></td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Largest BST in Binary Tree</td>\n<td><a href=\"https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/\">https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/</a></td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Activity Selection Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Job SequencingProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Huffman Coding</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Water Connection Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Fractional Knapsack Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Greedy Algorithm to find Minimum number of Coins</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximum trains for which stoppage can be provided</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Minimum Platforms Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Buy Maximum Stocks if i stocks can be bought on i-th day</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Find the minimum and maximum amount to buy all N candies</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Minimize Cash Flow among a given set of friends who have borrowed money from each other</td>\n<td>Optimal Account Balancing</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Minimum Cost to cut a board into squares</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Number of Islands</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Find maximum meetings in one room</td>\n<td><a href=\"https://www.lintcode.com/problem/919\">https://www.lintcode.com/problem/919</a></td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximum product subset of an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximize array sum after K negations</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximize the sum of arr[i]*i</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximum sum of absolute difference of an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximize sum of consecutive differences in a circular array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Minimum sum of absolute difference of pairs of two arrays</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Program for Shortest Job First (or SJF) CPU Scheduling</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Program for Least Recently Used (LRU) Page Replacement algorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Smallest subset with sum greater than all other elements</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Chocolate Distribution Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>DEFKIN -Defense of a Kingdom</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>DIEHARD -DIE HARD</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>GERGOVIA -Wine trading in Gergovia</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Picking Up Chicks</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>CHOCOLA ‚ÄìChocolate</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>ARRANGE -Arranging Amplifiers</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>K Centers Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Minimum Cost of ropes</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Find smallest number with given number of digits and sum of digits</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Rearrange characters in a string such that no two adjacent are same</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Find maximum sum possible equal sum of three stacks</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximum Sub-String after at most K changes</td>\n<td><a href=\"https://leetcode.com/problems/maximize-the-confusion-of-an-exam/\">https://leetcode.com/problems/maximize-the-confusion-of-an-exam/</a></td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Rat in a maze Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Printing all solutions in N-Queen Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Word Break Problem using Backtracking</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Remove Invalid Parentheses</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Sudoku Solver</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>m Coloring Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Print all palindromic partitions of a string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Subset Sum Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>The Knight‚Äôs tour problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Tug of War</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Find shortest safe route in a path with landmines</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Combinational Sum</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Find Maximum number possible by doing at-most K swaps</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Print all permutations of a string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Find if there is a path of more than k length from a source</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Longest Possible Route in a Matrix with Hurdles</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Print all possible paths from top left to bottom right of a mXn matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Partition of a set intoK subsets with equal sum</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Find the K-th Permutation Sequence of first N natural numbers</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement Stack from Scratch</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement Queue from Scratch</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement 2 stack in an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>find the middle element of a stack</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement ‚ÄúN‚Äù stacks in an Array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Check the expression has valid or Balanced parenthesis or not.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Reverse a String using Stack</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Design a Stack that supports getMin() in O(1) time and O(1) extra space.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Find the next Greater element</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>The celebrity Problem</td>\n<td><a href=\"https://www.youtube.com/watch?v=CiiXBvrX-5A\">https://www.youtube.com/watch?v=CiiXBvrX-5A</a></td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Arithmetic Expression evaluation</td>\n<td><a href=\"https://leetcode.com/problems/evaluate-reverse-polish-notation/\">https://leetcode.com/problems/evaluate-reverse-polish-notation/</a></td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Evaluation of Postfix expression</td>\n<td><a href=\"https://www.youtube.com/watch?v=422Q_yx2yA8\">https://www.youtube.com/watch?v=422Q_yx2yA8</a></td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement a method to insert an element at its bottom without using any other data structure.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Reverse a stack using recursion</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Sort a Stack using recursion</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Merge Overlapping Intervals</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Largest rectangular Area in Histogram</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Length of the Longest Valid Substring</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Expression contains redundant bracket or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement Stack using Queue</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement Stack using Deque</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Stack Permutations (Check if an array is stack permutation of other)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement Queue using Stack</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement ‚Äún‚Äù queue in an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement a Circular queue</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>LRU Cache Implementationa</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Reverse a Queue using recursion</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Reverse the first ‚ÄúK‚Äù elements of a queue</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Interleave the first half of the queue with second half</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Find the first circular tour that visits all Petrol Pumps</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Minimum time required to rot all oranges</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Distance of nearest cell having 1 in a binary matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>First negative integer in every window of size ‚Äúk‚Äù</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Check if all levels of two trees are anagrams or not.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Sum of minimum and maximum elements of all subarrays of size ‚Äúk‚Äù.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Minimum sum of squares of character counts in a given string after removing ‚Äúk‚Äù characters.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Queue based approach or first non-repeating character in a stream.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Next Smaller Element</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Implement a Maxheap&#x2F;MinHeap using arrays and recursion.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Sort an Array using heap. (HeapSort)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Maximum of all subarrays of size k.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>‚Äúk‚Äù largest element in an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Kth smallest and largest element in an unsorted array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Merge ‚ÄúK‚Äù sorted arrays. [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Merge 2 Binary Max Heaps</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Kth largest sum continuous subarrays</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Leetcode- reorganize strings</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Merge ‚ÄúK‚Äù Sorted Linked Lists [V.IMP]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Smallest range in ‚ÄúK‚Äù Lists</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Median in a stream of Integers</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Check if a Binary Tree is Heap</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Connect ‚Äún‚Äù ropes with minimum cost</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Convert BST to Min Heap</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Convert min heap to max heap</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Rearrange characters in a string such that no two adjacent are same.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Minimum sum of two numbers formed from digits of an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Create a Graph, print it</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement BFS algorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement DFS Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Detect Cycle in Directed Graph using BFS&#x2F;DFS Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Detect Cycle in UnDirected Graph using BFS&#x2F;DFS Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Search in a Maze</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Minimum Step by Knight</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>flood fill algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Clone a graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Making wired Connections</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>word Ladder</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Dijkstra algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement Topological Sort</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Minimum time taken by each job to be completed given by a Directed Acyclic Graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Find whether it is possible to finish all tasks or not from given dependencies</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Find the no. of Isalnds</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Given a sorted Dictionary of an Alien Language, find order of characters</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement Kruksal‚ÄôsAlgorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement Prim‚Äôs Algorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Total no. of Spanning tree in a graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement Bellman Ford Algorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement Floyd warshallAlgorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Travelling Salesman Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Graph ColouringProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Snake and Ladders Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Find bridge in a graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Count Strongly connected Components(Kosaraju Algo)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Check whether a graph is Bipartite or Not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Detect Negative cycle in a graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Longest path in a Directed Acyclic Graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Journey to the Moon</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Cheapest Flights Within K Stops</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Oliver and the Game</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Water Jug problem using BFS</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Water Jug problem using BFS</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Find if there is a path of more thank length from a source</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>M-ColouringProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Minimum edges to reverse o make path from source to destination</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Paths to travel each nodes using each edge(Seven Bridges)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Vertex Cover Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Chinese Postman or Route Inspection</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Number of Triangles in a Directed and Undirected Graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Minimise the cashflow among a given set of friends who have borrowed money from each other</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Two Clique Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Construct a trie from scratch</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Find shortest unique prefix for every word in a given list</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Word Break Problem</td>\n<td>(Trie solution)</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Given a sequence of words, print all anagrams together</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Implement a Phone Directory</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Print unique rows in a given boolean matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Coin ChangeProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Knapsack Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Binomial CoefficientProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Permutation CoefficientProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Program for nth Catalan Number</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Matrix Chain Multiplication</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Edit Distance</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Subset Sum Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Friends Pairing Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Gold Mine Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Assembly Line SchedulingProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Painting the Fenceproblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximize The Cut Segments</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Common Subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Repeated Subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Increasing Subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Space Optimized Solution of LCS</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>LCS (Longest Common Subsequence) of three strings</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum Sum Increasing Subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Count all subsequences having product less than K</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest subsequence such that difference between adjacent is one</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum subsequence sum such that no three are consecutive</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Egg Dropping Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum Length Chain of Pairs</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum size square sub-matrix with all 1s</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum sum of pairs with specific difference</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Min Cost PathProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum difference of zeros and ones in binary string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Minimum number of jumps to reach end</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Minimum cost to fill given weight in a bag</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Minimum removals from array to make max ‚Äìmin &lt;&#x3D; K</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Common Substring</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Count number of ways to reacha given score in a game</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Count Balanced Binary Trees of Height h</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>LargestSum Contiguous Subarray [V&gt;V&gt;V&gt;V IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Smallest sum contiguous subarray</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Unbounded Knapsack (Repetition of items allowed)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Word Break Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Largest Independent Set Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Partition problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Palindromic Subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Count All Palindromic Subsequence in a given String</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Palindromic Substring</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest alternating subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Weighted Job Scheduling</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Coin game winner where every player has three choices</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Count Derangements (Permutation such that no element appears in its original position) [ IMPORTANT ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum profit by buying and selling a share at most twice [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Optimal Strategy for a Game</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Optimal Binary Search Tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Palindrome PartitioningProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Word Wrap Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Mobile Numeric Keypad Problem [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Boolean Parenthesization Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Largest rectangular sub-matrix whose sum is 0</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Largest area rectangular sub-matrix with equal number of 1‚Äôs and 0‚Äôs [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum sum rectangle in a 2D matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum profit by buying and selling a share at most k times</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Find if a string is interleaved of two other strings</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum Length of Pair Chain</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Partition Equal Subset Sum</td>\n<td><a href=\"https://leetcode.com/submissions/detail/561942165/\">https://leetcode.com/submissions/detail/561942165/</a></td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Target Sum</td>\n<td></td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Count set bits in an integer</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Find the two non-repeating elements in an array of repeating elements</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Count number of bits to be flipped to convert A to B</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Count total set bits in all numbers from 1 to n</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Program to find whether a no is power of two</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Find position of the only set bit</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Copy set bits in a range</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Divide two integers without using multiplication, division and mod operator</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Calculate square of a number without using *, &#x2F; and pow()</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Power Set</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Moore voting algorithm</td>\n<td>Majority Element</td>\n<td><a href=\"https://www.youtube.com/watch?v=n5QY3x_GNDg\">https://www.youtube.com/watch?v=n5QY3x_GNDg</a></td>\n</tr>\n<tr>\n<td>Moore voting algorithm</td>\n<td>Majority Element II</td>\n<td><a href=\"https://www.youtube.com/watch?v=yDbkQd9t2ig\">https://www.youtube.com/watch?v=yDbkQd9t2ig</a></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"30-Days-Interview-Preparation-PlanüéØ\"><a href=\"#30-Days-Interview-Preparation-PlanüéØ\" class=\"headerlink\" title=\"30 Days Interview Preparation PlanüéØ\"></a><a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice\">30 Days Interview Preparation Plan</a>üéØ</h3><p><b></b><br>Originally the below sheet was prepared by <a href=\"https://www.youtube.com/c/takeUforward\">Raj Vikramaditya</a> A.K.A <a href=\"https://www.youtube.com/channel/UCvEKHATlVq84hm1jduTYm8g\">Striver</a>. I have documented this sheet here in markdown.</p>\n<p><b> </b> </p>\n<p>Day1: (Arrays)</p>\n<ol>\n<li><p>Sort an array of 0‚Äôs 1‚Äôs 2‚Äôs without using extra space or sorting algo</p>\n</li>\n<li><p>Repeat and Missing Number</p>\n</li>\n<li><p>Merge two sorted Arrays without extra space</p>\n</li>\n<li><p>Kadane‚Äôs Algorithm</p>\n</li>\n<li><p>Merge Overlapping Subintervals</p>\n</li>\n<li><p>Find the duplicate in an array of N+1 integers.</p>\n</li>\n</ol>\n<p>Day2: (Arrays)</p>\n<ol>\n<li><p>Set Matrix Zeros</p>\n</li>\n<li><p>Pascal Triangle</p>\n</li>\n<li><p>Next Permutation</p>\n</li>\n<li><p>Inversion of Array (Using Merge Sort)</p>\n</li>\n<li><p>Stock Buy and Sell</p>\n</li>\n<li><p>Ro tate Matrix</p>\n</li>\n</ol>\n<p>Day3: (Arrays&#x2F;maths)</p>\n<ol>\n<li><p>Search in a 2D matrix</p>\n</li>\n<li><p>Pow(X,n)</p>\n</li>\n<li><p>Majority Element (&gt;N&#x2F;2 times)</p>\n</li>\n<li><p>Majority Element (&gt;N&#x2F;3 times)</p>\n</li>\n<li><p>Grid Unique Paths</p>\n</li>\n<li><p>Reverse Pairs (Leetcode)</p>\n</li>\n<li><p>Go through Puzzles from GFG** (Search on own)</p>\n</li>\n</ol>\n<p>Day4: (Hashing)</p>\n<ol>\n<li><p>2 Sum problem</p>\n</li>\n<li><p>4 Sum problem</p>\n</li>\n<li><p>Longest Consecutive Sequence</p>\n</li>\n<li><p>Largest Subarray with 0 sum</p>\n</li>\n<li><p>Count number of subarrays with given XOR (this clearsa lot of problems)</p>\n</li>\n<li><p>Longest substring without repeat</p>\n</li>\n</ol>\n<p>Day5: (LinkedList)</p>\n<ol>\n<li><p>Reverse a LinkedList</p>\n</li>\n<li><p>Find middle of LinkedList</p>\n</li>\n<li><p>Merge two sorted Linked List</p>\n</li>\n<li><p>Remove N-th node from back of LinkedList</p>\n</li>\n<li><p>Delete a given Node when a node is given. (0(1) solution)</p>\n</li>\n<li><p>Add two numbers as LinkedList</p>\n</li>\n</ol>\n<p>Day6:</p>\n<ol>\n<li><p>Find intersection point of Y LinkedList</p>\n</li>\n<li><p>Detect a cycle in Linked List</p>\n</li>\n<li><p>Reverse a LinkedList in groups of size k</p>\n</li>\n<li><p>Check if a LinkedList is palindrome or not.</p>\n</li>\n<li><p>Find the starting point of the Loop of LinkedList</p>\n</li>\n<li><p>Flattening of a LinkedList**</p>\n</li>\n<li><p>Rotate a LinkedList</p>\n</li>\n</ol>\n<p>Day7: (2-pointer)</p>\n<ol>\n<li><p>Clone a Linked List with random and next pointer</p>\n</li>\n<li><p>3 sum</p>\n</li>\n<li><p>Trapping rainwater</p>\n</li>\n<li><p>Remove Duplicate from Sorted array</p>\n</li>\n<li><p>Max consecutive ones</p>\n</li>\n</ol>\n<p>Day8: (Greedy)</p>\n<ol>\n<li><p>N meeting in one room</p>\n</li>\n<li><p>Minimum number of platforms required for a railway</p>\n</li>\n<li><p>Job sequencing Problem</p>\n</li>\n<li><p>Fractional Knapsack Problem</p>\n</li>\n<li><p>Greedy algorithm to find minimum number of coins</p>\n</li>\n<li><p>Activity Selection (it i</p>\n</li>\n<li><p>s same as N meeting in one room)</p>\n</li>\n</ol>\n<p>Day9 (Recursion):</p>\n<ol>\n<li><p>Subset Sums</p>\n</li>\n<li><p>Subset-II</p>\n</li>\n<li><p>Combination sum-</p>\n</li>\n<li><p>Combination sum</p>\n</li>\n<li><p>Palindrome Partitioning</p>\n</li>\n<li><p>K-th permutation Sequence</p>\n</li>\n</ol>\n<p>Day10: (Recursion and Backtracking)</p>\n<ol>\n<li><p>Print all Permutations of a string&#x2F;array</p>\n</li>\n<li><p>N queens Problem</p>\n</li>\n<li><p>SudokuSolver</p>\n</li>\n<li><p>M coloring Problem</p>\n</li>\n<li><p>Rat in a Maze</p>\n</li>\n</ol>\n<p>6.Word Break -&gt; print all ways</p>\n<p>Day11 : (Binary Search)</p>\n<ol>\n<li><p>N-th root of an integer (use binary search) (square root, cube root, ..)</p>\n</li>\n<li><p>Matrix Median</p>\n</li>\n<li><p>Find the element that appears once in sorted array, and rest element appears twice (Binary search)</p>\n</li>\n<li><p>Search element in a sorted and rotated array&#x2F; find pivot where it is rotated**</p>\n</li>\n<li><p>Median of 2 sorted arrays</p>\n</li>\n<li><p>K-th element of two sorted arrays</p>\n</li>\n<li><p>Allocate Minimum Number of Pages</p>\n</li>\n<li><p>Aggressive Cows</p>\n</li>\n</ol>\n<p>Day12: (Bits) (Optional, very rare topic in interviews, but if you have time left, someone might<br>ask)</p>\n<ol>\n<li>Check if a number if a power of 2 or not in O(1)</li>\n<li>Count total set bits</li>\n<li>Divide Integers without &#x2F; operator</li>\n<li>Power Set (this is very important)</li>\n<li>Find MSB in o(1)</li>\n<li>Find square of a number without using multiplication or division operators.</li>\n</ol>\n<p>Day13: (Stack and Queue)</p>\n<ol>\n<li><p>Implement Stack Using Arrays</p>\n</li>\n<li><p>Implement Queue Using Arrays</p>\n</li>\n<li><p>Implement Stack using Queue (using single queue)</p>\n</li>\n<li><p>Implement Queue using Stack (0(1) amortised method)</p>\n</li>\n<li><p>Check for balanced parentheses</p>\n</li>\n<li><p>Next Greater Element</p>\n</li>\n<li><p>Sort a Stack</p>\n</li>\n</ol>\n<p>Day14:</p>\n<ol>\n<li><p>Next Smaller Element<br> Similar to previous question next greater element, just do pop the greater elements<br> out ..</p>\n</li>\n<li><p>LRU cache (vvvv. imp)</p>\n</li>\n<li><p>LFU Cache (Hard, can be ignored)</p>\n</li>\n</ol>\n<p>4.Largest rectangle in histogram (Do the one pass solution)</p>\n<p><a href=\"https://www.youtube.com/watch?v=X0X6G-eWgQ8&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=\">Two pass</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=jC_cWLy7jSI&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=\">One pass</a></p>\n<ol start=\"5\">\n<li>Sliding Window maximum <a href=\"https://www.youtube.com/watch?v=CZQGRp93K4k&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=\">video</a></li>\n<li>Implement Min Stack</li>\n<li>Rotten Orange (Using BFS)</li>\n<li>Stock Span Problem</li>\n<li>Find maximum of minimums of every window size<br>10.The Celebrity Problem</li>\n</ol>\n<p>Day15: (String)</p>\n<ol>\n<li>Reverse Words in a String</li>\n<li>Longest Palindrome in a string</li>\n<li>Roman Number to Integer and vice versa</li>\n<li>Implement ATOI&#x2F;STRSTR</li>\n<li>Longest Common Prefix</li>\n<li>Rabin Karp</li>\n</ol>\n<p>Day16: (String)</p>\n<ol>\n<li>Prefix Function&#x2F;Z-Function</li>\n<li>KMP algo &#x2F; LPS(pi) array</li>\n<li>Minimum characters needed to be inserted in the beginning to make it palindromic.</li>\n<li>Check for Anagrams</li>\n<li>Count and Say</li>\n<li>Compare version numbers</li>\n</ol>\n<p>Day17: (Binary Tree)</p>\n<ol>\n<li>Inorder Traversal (with recursion and without recursion)</li>\n<li>Preorder Traversal (with recursion and without recursion)</li>\n<li>Postorder Traversal (with recursion and without recursion)</li>\n<li>LeftView Of Binary Tree</li>\n<li>Bottom View of Binary Tree</li>\n<li>Top View of Binary Tree**</li>\n</ol>\n<p>Day18: (Binary Tree)</p>\n<ol>\n<li>Level order Traversal &#x2F; Level order traversal in spiral form</li>\n<li>Height of a Binary Tree</li>\n<li>Diameter of Binary Tree</li>\n<li>Check if Binary tree is height balanced or not</li>\n<li>LCA in Binary Tree</li>\n<li>Check if two trees are identical or not**</li>\n</ol>\n<p>Day 19: (Binary Tree)</p>\n<ol>\n<li>Maximum path sum</li>\n<li>Construct Binary Tree from inorder and preorder</li>\n<li>Construct Binary Tree from Inorder and Postorder</li>\n<li>Symmetric Binary Tree</li>\n<li>Flatten Binary Tree to LinkedList</li>\n<li>Check if Binary Tree is mirror of itself or not</li>\n</ol>\n<p>Day 20: (Binary Search Tree)</p>\n<ol>\n<li>Populate Next Right pointers of Tree</li>\n<li>Search given Key in BST</li>\n<li>Construct BST from given keys.</li>\n<li>Check is a BT is BST or not</li>\n<li>Find LCA of two nodes in BST</li>\n<li>Find the inorder predecessor&#x2F;successor of a given Key in BST.**</li>\n</ol>\n<p>Day21: (BinarySearchTree)</p>\n<ol>\n<li>Floor and Ceil in a BST</li>\n<li>Find K-th smallest and K-th largest element in BST (2 different Questions)</li>\n<li>Find a pair with a given sum in BST</li>\n<li>BST iterator</li>\n<li>Size of the largest BST in a Binary Tree</li>\n<li>Serialize and deserialize Binary Tree</li>\n</ol>\n<p>Day22: (Mixed Questions)</p>\n<ol>\n<li>Binary Tree to Double Linked List</li>\n<li>Find median in a stream of running integers.</li>\n<li>K-th largest element in a stream.</li>\n<li>Distinct numbers in Window.</li>\n<li>K-th largest element in an unsorted array.</li>\n<li>Flood-fill Algorithm</li>\n</ol>\n<p>Day23: (Graph) <a href=\"https://www.youtube.com/watch?v=LCrovIMurxY&list=PLgUwDviBIf0rGEWe64KWas0NrynSCRWw&index=\">Theory</a></p>\n<ol>\n<li>Clone a graph (Not that easy as it looks)</li>\n<li>DFS</li>\n<li>BFS</li>\n<li>Detect A cycle in Undirected Graph&#x2F;Directed Graph</li>\n<li>Topo Sort</li>\n<li>Number of islands (Do in Grid and Graph both)</li>\n<li>Bipartite Check</li>\n</ol>\n<p>Day24: (Graph) <a href=\"https://www.youtube.com/watch?v=LCrovIMurxY&list=PLgUwDviBIf0rGEWe64KWas0NrynSCRWw&index=\">Theory</a></p>\n<ol>\n<li>SCC(using KosaRaju‚Äôs algo)</li>\n<li>Djisktra‚Äôs Algorithm</li>\n<li>Bellman Ford Algo</li>\n<li>Floyd Warshall Algorithm</li>\n<li>MST using Prim‚Äôs Algo</li>\n<li>MST using Kruskal‚Äôs Algo</li>\n</ol>\n<p>Day25: (Dynamic Programming)</p>\n<ol>\n<li>Max Product Subarray</li>\n<li>Longest Increasing Subsequence</li>\n<li>Longest Common Subsequence</li>\n<li>0-1 Knapsack</li>\n<li>Edit Distance</li>\n<li>Maximum sum increasing subsequence</li>\n<li>Matrix Chain Multiplication</li>\n</ol>\n<p>Day26: (DP)</p>\n<ol>\n<li>Maximum sum path in matrix, (count paths, and similar type do, also backtrack to find<br> the maximum path)</li>\n<li>Coin change</li>\n<li>Subset Sum</li>\n<li>Rod Cutting</li>\n<li>Egg Dropping</li>\n<li>Word Break</li>\n<li>Palindrome Partitioning (MCM Variation)</li>\n<li>Maximum profit in Job scheduling<br><a href=\"https://docs.google.com/document/d/1sQlRDw6--HwyxeFL7b4kBsOG-Tz7rXMbpWNnfvJErA4/edit\">For core revision&lt;&#x2F;&gt;</a></li>\n</ol>\n<p>Day27:</p>\n<ol>\n<li>Revise OS notes that you would have made during your sem</li>\n<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>\n</ol>\n<p>Day28:</p>\n<ol>\n<li>Revise DBMS notes that you would have made during your semesters.</li>\n<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>\n</ol>\n<p>Day29:</p>\n<ol>\n<li>Revise CN notes, that you would have made during your sem.</li>\n<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>\n</ol>\n<p>Day30:</p>\n<ol>\n<li>Make a note of how will your represent your projects, and prepare all questions<br> related to tech which you have used in your projects. Prepare a note which you can<br> say for 3-10 minutes when he asks you that say something about the project.</li>\n</ol>\n<hr>\n<h3 id=\"System-Design-‚Äì-Conceptsüìö\"><a href=\"#System-Design-‚Äì-Conceptsüìö\" class=\"headerlink\" title=\"System Design ‚Äì Conceptsüìö\"></a>System Design ‚Äì Conceptsüìö</h3><ol>\n<li><p><a href=\"https://github.com/SamirPaul1/system-design-primer\">https://github.com/SamirPaul1/system-design-primer</a></p>\n</li>\n<li><p><a href=\"https://www.freecodecamp.org/news/systems-design-for-interviews/\">https://www.freecodecamp.org/news/systems-design-for-interviews/</a></p>\n</li>\n<li><p><a href=\"https://github.com/shashank88/system_design\">https://github.com/shashank88/system_design</a></p>\n</li>\n</ol>\n",
            "tags": [
                "DSAlgo",
                "dsa-in-python",
                "data-structures-and-algorithms"
            ]
        }
    ]
}