{
    "version": "https://jsonfeed.org/version/1",
    "title": "Samir Paul • All posts by \"interviewbit\" tag",
    "description": "Software Engineer",
    "home_page_url": "https://samir.pages.dev",
    "items": [
        {
            "id": "https://samir.pages.dev/posts/longest-pallindromic-subsequence/",
            "url": "https://samir.pages.dev/posts/longest-pallindromic-subsequence/",
            "title": "longest pallindromic subsequence",
            "date_published": "2023-08-10T07:35:42.190Z",
            "content_html": "<h1 id=\"Longest-Pallindromic-Subsequence\"><a href=\"#Longest-Pallindromic-Subsequence\" class=\"headerlink\" title=\"Longest Pallindromic Subsequence\"></a>Longest Pallindromic Subsequence</h1><p><a href=\"https://www.interviewbit.com/problems/longest-palindromic-subsequence/\">https://www.interviewbit.com/problems/longest-palindromic-subsequence/</a></p>\n<p>Given a strings A. Find the common pallindromic sequence ( A sequence which does not need to be contiguous and is a pallindrome),<br>which is common in itself</p>\n<p>You need to return the length of such longest common subsequence.</p>\n<h3 id=\"NOTE\"><a href=\"#NOTE\" class=\"headerlink\" title=\"NOTE\"></a>NOTE</h3><p>Your code will be run on multiple test cases (&lt;&#x3D;10). Try to come up with an optimised solution.</p>\n<h3 id=\"CONSTRAINTS\"><a href=\"#CONSTRAINTS\" class=\"headerlink\" title=\"CONSTRAINTS\"></a>CONSTRAINTS</h3><p>1 &lt;&#x3D; Length of A, B &lt;&#x3D; 10^3 + 5</p>\n<h3 id=\"EXAMPLE-INPUT\"><a href=\"#EXAMPLE-INPUT\" class=\"headerlink\" title=\"EXAMPLE INPUT\"></a>EXAMPLE INPUT</h3><p>A : “bebeeed”</p>\n<h3 id=\"EXAMPLE-OUTPUT\"><a href=\"#EXAMPLE-OUTPUT\" class=\"headerlink\" title=\"EXAMPLE OUTPUT\"></a>EXAMPLE OUTPUT</h3><p>4</p>\n<h3 id=\"EXPLANATION\"><a href=\"#EXPLANATION\" class=\"headerlink\" title=\"EXPLANATION\"></a>EXPLANATION</h3><p>The longest common pallindromic subsequence is “eeee”, which has a length of 4</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Mine\"><a href=\"#Mine\" class=\"headerlink\" title=\"Mine\"></a>Mine</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = s.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(n+<span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n+<span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n<span class=\"number\">-1</span>; i&gt;=<span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        dp[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i+<span class=\"number\">1</span>; j&lt;n; j++)</span><br><span class=\"line\">            dp[i][j] = s[i]==s[j] ? dp[i+<span class=\"number\">1</span>][j<span class=\"number\">-1</span>]+<span class=\"number\">2</span> : <span class=\"built_in\">max</span>(dp[i+<span class=\"number\">1</span>][j], dp[i][j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/longest-substring-without-repeat/",
            "url": "https://samir.pages.dev/posts/longest-substring-without-repeat/",
            "title": "longest substring without repeat",
            "date_published": "2023-08-10T07:35:42.190Z",
            "content_html": "<h1 id=\"Longest-Substring-Without-Repeat\"><a href=\"#Longest-Substring-Without-Repeat\" class=\"headerlink\" title=\"Longest Substring Without Repeat\"></a>Longest Substring Without Repeat</h1><p><a href=\"https://www.interviewbit.com/problems/longest-substring-without-repeat\">https://www.interviewbit.com/problems/longest-substring-without-repeat</a></p>\n<p>Given a string,<br>find the length of the longest substring without repeating characters.</p>\n<p>Example:</p>\n<p>The longest substring without repeating letters for “abcabcbb” is “abc”, which the length is 3.</p>\n<p>For “bbbbb” the longest substring is “b”, with the length of 1.</p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Think in terms of two pointers.<br>If you encounter a repeating character, you won’t be able to include the new character till<br>you exclude out the previous occurrence of the character. Which means your window needs to shrink<br>till your start character is pointing to the position next to previous occurrence of the character.</p>\n<h2 id=\"Hint-2\"><a href=\"#Hint-2\" class=\"headerlink\" title=\"Hint 2\"></a>Hint 2</h2><p>All you need to do is use two pointers to keep a window with no repetitions of characters. Keep moving<br>the right pointer and if you encounter any repeating character start moving left pointer untill no character is repeated.</p>\n<p>Also, note that the size of character set is small ( 128 at max ), so tracking the count of characters<br>in the current set is fairly easy using hashing &#x2F; array buckets.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// my</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::lengthOfLongestSubstring</span><span class=\"params\">(string A)</span> </span>&#123;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt; A.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m.<span class=\"built_in\">count</span>(A[j]) &amp;&amp; m[A[j]] &gt;= i)</span><br><span class=\"line\">            i = m[A[j]] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        len = <span class=\"built_in\">max</span>(len, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        m[A[j]] = j;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// editorial</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::lengthOfLongestSubstring</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> longest = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Hash which tracks the count of each character in the current window.</span></span><br><span class=\"line\">    <span class=\"comment\">// We need to make sure that for a solution, none of the</span></span><br><span class=\"line\">    <span class=\"comment\">// character count / hash value exceeds 1.</span></span><br><span class=\"line\">    <span class=\"type\">int</span> hash[<span class=\"number\">260</span>];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(hash, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(hash));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt;= end &amp;&amp; end &lt; s.<span class=\"built_in\">length</span>()) &#123;</span><br><span class=\"line\">        hash[s[end]]++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hash[s[end]] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// pop stuff out of hash till the count becomes 1.</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start &lt;= end &amp;&amp; hash[s[end]] &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                hash[s[start]]--;</span><br><span class=\"line\">                start++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        end++;</span><br><span class=\"line\">        longest = <span class=\"built_in\">max</span>(longest, end - start);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> longest;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::lengthOfLongestSubstring</span><span class=\"params\">(string A)</span> </span>&#123;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">0</span>, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m.<span class=\"built_in\">find</span>(A[i]) != m.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">            i = m[A[i]];</span><br><span class=\"line\">            m.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, k);</span><br><span class=\"line\">            k = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            m[A[i]] = i;</span><br><span class=\"line\">            k++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(res, k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::lengthOfLongestSubstring</span><span class=\"params\">(string A)</span> </span>&#123;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> size = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; size) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m.<span class=\"built_in\">find</span>(A[i]) == m.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">            m[A[i]] = i;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            i = m[A[i]] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            m.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(count, ans);</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(count, ans);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/length-of-longest-subsequence/",
            "url": "https://samir.pages.dev/posts/length-of-longest-subsequence/",
            "title": "length of longest subsequence",
            "date_published": "2023-08-10T07:35:42.174Z",
            "content_html": "<h1 id=\"Length-Of-Longest-Subsequence\"><a href=\"#Length-Of-Longest-Subsequence\" class=\"headerlink\" title=\"Length Of Longest Subsequence\"></a>Length Of Longest Subsequence</h1><p><a href=\"https://www.interviewbit.com/problems/length-of-longest-subsequence\">https://www.interviewbit.com/problems/length-of-longest-subsequence</a></p>\n<p>Given an array of integers, find the length of longest subsequence which is first increasing then decreasing.</p>\n<p>**Example: **</p>\n<p>For the given array [1 11 2 10 4 5 2 1]</p>\n<p>Longest subsequence is [1 2 10 4 2 1]</p>\n<p>Return value 6</p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Try to come up with something which stores length of increasing sequence upto a particular index and length of decreasing sequence from that particular index.</p>\n<p>Can you think of DP for either of the task.</p>\n<p>Solution approach</p>\n<p>Construct array inc[i] where inc[i] stores Longest Increasing subsequence ending with A[i].<br>This can be done simply with O(n^2) DP.</p>\n<p>Construct array dec[i] where dec[i] stores Longest Decreasing subsequence ending with A[i].<br>This can be done simply with O(n^2) DP.</p>\n<p>Now we need to find the maximum value of (inc[i] + dec[i] - 1)</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::longestSubsequenceLength</span><span class=\"params\">(<span class=\"type\">const</span> vector &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> inc[n];</span><br><span class=\"line\">    <span class=\"type\">int</span> dec[n];</span><br><span class=\"line\">    <span class=\"type\">int</span> ct = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    inc[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        inc[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[i] &gt; A[j] &amp;&amp; inc[i] &lt; inc[j] + <span class=\"number\">1</span>)</span><br><span class=\"line\">                inc[i] = inc[j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    dec[n - <span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        dec[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[i] &gt; A[j] &amp;&amp; dec[i] &lt; dec[j] + <span class=\"number\">1</span>)</span><br><span class=\"line\">                dec[i] = dec[j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        mx = <span class=\"built_in\">max</span>(mx, inc[i] + dec[i] - <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> mx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"My\"><a href=\"#My\" class=\"headerlink\" title=\"My\"></a>My</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fn</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> curr, <span class=\"type\">int</span> last, <span class=\"type\">int</span> len, <span class=\"type\">bool</span> inc)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curr == n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> ans = len;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = curr; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inc) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[i] &gt; last) &#123;</span><br><span class=\"line\">                ans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">fn</span>(A, i + <span class=\"number\">1</span>, A[i], len + <span class=\"number\">1</span>, inc));</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A[i] &lt; last) &#123;</span><br><span class=\"line\">                ans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">fn</span>(A, i + <span class=\"number\">1</span>, A[i], len + <span class=\"number\">1</span>, <span class=\"literal\">false</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[i] &lt; last) &#123;</span><br><span class=\"line\">                ans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">fn</span>(A, i + <span class=\"number\">1</span>, A[i], len + <span class=\"number\">1</span>, inc));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::longestSubsequenceLength</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Recursive solution</span></span><br><span class=\"line\">    <span class=\"comment\">// return fn(A, 1, A[0], 1, true);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// DP solution</span></span><br><span class=\"line\">    <span class=\"type\">int</span> n = A.<span class=\"built_in\">size</span>(), sol = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">inc</span><span class=\"params\">(n, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dec</span><span class=\"params\">(n, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(n, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i - <span class=\"number\">1</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[i] &gt; A[j]) &#123;</span><br><span class=\"line\">                inc[i] = <span class=\"built_in\">max</span>(inc[i], inc[j] + <span class=\"number\">1</span>);</span><br><span class=\"line\">                ans[i] = <span class=\"built_in\">max</span>(ans[i], inc[i]);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A[i] &lt; A[j]) &#123;</span><br><span class=\"line\">                dec[i] = <span class=\"built_in\">max</span>(dec[i], dec[j] + <span class=\"number\">1</span>);</span><br><span class=\"line\">                ans[i] = <span class=\"built_in\">max</span>(ans[i], <span class=\"built_in\">max</span>(dec[i], ans[j] + <span class=\"number\">1</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sol = <span class=\"built_in\">max</span>(sol, ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sol;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/letter-phone/",
            "url": "https://samir.pages.dev/posts/letter-phone/",
            "title": "letter phone",
            "date_published": "2023-08-10T07:35:42.174Z",
            "content_html": "<h1 id=\"Letter-Phone\"><a href=\"#Letter-Phone\" class=\"headerlink\" title=\"Letter Phone\"></a>Letter Phone</h1><p><a href=\"https://www.interviewbit.com/problems/letter-phone\">https://www.interviewbit.com/problems/letter-phone</a></p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Think about possibilites at any place and move on.</p>\n<h2 id=\"Hint-2\"><a href=\"#Hint-2\" class=\"headerlink\" title=\"Hint 2\"></a>Hint 2</h2><p>For every integer, you have 1&#x2F;3&#x2F;4 options. Try appending every letter in the option to the string and move forward.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* fastest */</span></span><br><span class=\"line\"></span><br><span class=\"line\">string mapping[] = &#123; <span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;def&quot;</span>, <span class=\"string\">&quot;ghi&quot;</span>, <span class=\"string\">&quot;jkl&quot;</span>, <span class=\"string\">&quot;mno&quot;</span>, <span class=\"string\">&quot;pqrs&quot;</span>, <span class=\"string\">&quot;tuv&quot;</span>, <span class=\"string\">&quot;wxyz&quot;</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">makeCombinations</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;A, <span class=\"type\">const</span> <span class=\"type\">int</span> pos, <span class=\"type\">const</span> string &amp;current, vector&lt;string&gt; &amp;result)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pos &gt;= A.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> string &amp;letters = mapping[A[pos] - <span class=\"string\">&#x27;0&#x27;</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"type\">char</span> ch : letters) &#123;</span><br><span class=\"line\">\t\tstring next = current;</span><br><span class=\"line\">\t\tnext.<span class=\"built_in\">push_back</span>(ch);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (next.<span class=\"built_in\">size</span>() == A.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">\t\t\tresult.<span class=\"built_in\">push_back</span>(next);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">makeCombinations</span>(A, pos + <span class=\"number\">1</span>, next, result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">Solution::letterCombinations</span><span class=\"params\">(string A)</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;string&gt; result;</span><br><span class=\"line\">\t<span class=\"built_in\">makeCombinations</span>(A, <span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>, result);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* my */</span></span><br><span class=\"line\"></span><br><span class=\"line\">unordered_map&lt;<span class=\"type\">char</span>, string&gt; h = &#123; &#123; <span class=\"string\">&#x27;0&#x27;</span>, <span class=\"string\">&quot;0&quot;</span> &#125;, &#123; <span class=\"string\">&#x27;1&#x27;</span>, <span class=\"string\">&quot;1&quot;</span> &#125;, &#123; <span class=\"string\">&#x27;2&#x27;</span>, <span class=\"string\">&quot;abc&quot;</span> &#125;, &#123; <span class=\"string\">&#x27;3&#x27;</span>, <span class=\"string\">&quot;def&quot;</span> &#125;, &#123; <span class=\"string\">&#x27;4&#x27;</span>, <span class=\"string\">&quot;ghi&quot;</span> &#125;, &#123; <span class=\"string\">&#x27;5&#x27;</span>, <span class=\"string\">&quot;jkl&quot;</span> &#125;, &#123; <span class=\"string\">&#x27;6&#x27;</span>, <span class=\"string\">&quot;mno&quot;</span> &#125;, &#123; <span class=\"string\">&#x27;7&#x27;</span>, <span class=\"string\">&quot;pqrs&quot;</span> &#125;, &#123; <span class=\"string\">&#x27;8&#x27;</span>, <span class=\"string\">&quot;tuv&quot;</span> &#125;, &#123; <span class=\"string\">&#x27;9&#x27;</span>, <span class=\"string\">&quot;wxyz&quot;</span> &#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">helper</span><span class=\"params\">(vector&lt;string&gt; &amp;res, string comb, string &amp;digits, <span class=\"type\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pos == digits.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">\t\tres.<span class=\"built_in\">push_back</span>(comb);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">char</span> ch : h[digits[pos]])</span><br><span class=\"line\">\t\t<span class=\"built_in\">helper</span>(res, comb + ch, digits, pos + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">Solution::letterCombinations</span><span class=\"params\">(string A)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (A.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">\tvector&lt;string&gt; res;</span><br><span class=\"line\">\tstring comb;</span><br><span class=\"line\">\t<span class=\"built_in\">helper</span>(res, comb, A, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/level-order/",
            "url": "https://samir.pages.dev/posts/level-order/",
            "title": "level order",
            "date_published": "2023-08-10T07:35:42.174Z",
            "content_html": "<h1 id=\"Level-Order\"><a href=\"#Level-Order\" class=\"headerlink\" title=\"Level Order\"></a>Level Order</h1><p><a href=\"https://www.interviewbit.com/problems/level-order/\">https://www.interviewbit.com/problems/level-order/</a></p>\n<p>Given a binary tree, return the level order traversal of its nodes’ values. (ie, from left to right, level by level).</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>Given binary tree</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  3</span><br><span class=\"line\"> / \\</span><br><span class=\"line\">9  20</span><br><span class=\"line\">  /  \\</span><br><span class=\"line\"> 15   7</span><br></pre></td></tr></table></figure>\n<p>return its level order traversal as:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  [3],</span><br><span class=\"line\">  [9,20],</span><br><span class=\"line\">  [15,7]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<p>Also think about a version of the question where you are asked to do a level order traversal of the tree when depth of the tree is much greater than number of nodes on a level.</p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Can you maintain depth of a node while traversing the tree. How can it help you after the tree traversal?</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>There are 2 ways to solve this problem.</p>\n<p>Approach 1: Maintain a vector of size ‘depth’ of the tree. Do any kind of tree traversal keeping track of the current depth. Append the current element to vector[currentDepth]. Since we need stuff left to right, make sure left subtree is visited before the right subtree ( Any of traditional pre&#x2F;post&#x2F;inorder traversal should suffice ).</p>\n<p>Approach 2: This is important. A lot of times, you’d be asked to do a traditional level order traversal. Or to put in formal words, a traversal where the extra memory used should be proportional to the nodes on a level rather than the depth of the tree. To do that, you need to make sure you are accessing all the nodes on a level before accessing the nodes on next. This is a typical breadth first search problem. Queue FTW.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">buildVector</span><span class=\"params\">(TreeNode *root, <span class=\"type\">int</span> depth, vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &amp;ret)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ret.<span class=\"built_in\">size</span>() == depth)</span><br><span class=\"line\">        ret.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;());</span><br><span class=\"line\">    ret[depth].<span class=\"built_in\">push_back</span>(root-&gt;val);</span><br><span class=\"line\">    <span class=\"built_in\">buildVector</span>(root-&gt;left, depth + <span class=\"number\">1</span>, ret);</span><br><span class=\"line\">    <span class=\"built_in\">buildVector</span>(root-&gt;right, depth + <span class=\"number\">1</span>, ret);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; Solution::<span class=\"built_in\">levelOrder</span>(TreeNode *root) &#123;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; ret;</span><br><span class=\"line\">    <span class=\"built_in\">buildVector</span>(root, <span class=\"number\">0</span>, ret);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Lightweight\"><a href=\"#Lightweight\" class=\"headerlink\" title=\"Lightweight\"></a>Lightweight</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; Solution::<span class=\"built_in\">levelOrder</span>(TreeNode *A) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> levelSize = <span class=\"number\">1</span>, nextLevel = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; result;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; curLevel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">    queue&lt;TreeNode *&gt; q;</span><br><span class=\"line\"></span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(A);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (q.<span class=\"built_in\">empty</span>() != <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        TreeNode *node = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node-&gt;left != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(node-&gt;left);</span><br><span class=\"line\">            nextLevel++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node-&gt;right != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            q.<span class=\"built_in\">push</span>(node-&gt;right);</span><br><span class=\"line\">            nextLevel++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        levelSize--;</span><br><span class=\"line\">        curLevel.<span class=\"built_in\">push_back</span>(node-&gt;val);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (levelSize == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            result.<span class=\"built_in\">push_back</span>(curLevel);</span><br><span class=\"line\">            levelSize = nextLevel;</span><br><span class=\"line\">            nextLevel = <span class=\"number\">0</span>;</span><br><span class=\"line\">            curLevel.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">delete</span> (node);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Asked-in\"><a href=\"#Asked-in\" class=\"headerlink\" title=\"Asked in\"></a>Asked in</h2><ul>\n<li>Facebook</li>\n<li>Groupon</li>\n<li>Goldman Sachs</li>\n</ul>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/lexographically-greater-strings/",
            "url": "https://samir.pages.dev/posts/lexographically-greater-strings/",
            "title": "lexographically greater strings",
            "date_published": "2023-08-10T07:35:42.174Z",
            "content_html": "<h1 id=\"Lexographically-Greater-Strings\"><a href=\"#Lexographically-Greater-Strings\" class=\"headerlink\" title=\"Lexographically Greater Strings\"></a>Lexographically Greater Strings</h1><p><a href=\"https://www.interviewbit.com/problems/lexographically-greater-strings/\">https://www.interviewbit.com/problems/lexographically-greater-strings/</a></p>\n<p>Given a string C consisting of lowercase English alphabets of size A.<br>For each string D of length n,its beauty relative to C is defined as the<br>number of pairs of indexes i, j (1 &lt;&#x3D; i &lt;&#x3D; j &lt;&#x3D; n),<br>such that substring D[i..j] is lexicographically larger than substring C[i..j].</p>\n<p>Return the count of strings D, such that their beauty relative to C equals exactly B.</p>\n<p>Since this count can be very large you are required to return count modulo (109+7).</p>\n<p>Note: Your solution will run on multiple test cases, Make sure to clear global variables every time.</p>\n<h3 id=\"Input-Format\"><a href=\"#Input-Format\" class=\"headerlink\" title=\"Input Format\"></a>Input Format</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The First argument is an integer A.</span><br><span class=\"line\">The Second argument is an integer B.</span><br><span class=\"line\">The Third argument is String C.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Output-Format\"><a href=\"#Output-Format\" class=\"headerlink\" title=\"Output Format\"></a>Output Format</h3><p>Return the count of strings D, such that their beauty relative to C equals exactly B modulo (10^9+7).</p>\n<h3 id=\"Constraints\"><a href=\"#Constraints\" class=\"headerlink\" title=\"Constraints\"></a>Constraints</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= A &lt;= 2000</span><br><span class=\"line\">0 &lt;= B &lt;= 2000</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"For-Example\"><a href=\"#For-Example\" class=\"headerlink\" title=\"For Example\"></a>For Example</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input 1:</span><br><span class=\"line\">    A = 2 </span><br><span class=\"line\">    B = 2</span><br><span class=\"line\">    C = &quot;yz&quot;</span><br><span class=\"line\">Output 1:</span><br><span class=\"line\">    26</span><br><span class=\"line\"></span><br><span class=\"line\">Input 2:</span><br><span class=\"line\">    A = 2 </span><br><span class=\"line\">    B = 3</span><br><span class=\"line\">    C = &quot;yx&quot;</span><br><span class=\"line\">Output 2:</span><br><span class=\"line\">    3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">long</span> <span class=\"type\">long</span> MOD =<span class=\"number\">1000000007</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"type\">long</span> dp[<span class=\"number\">3</span>][<span class=\"number\">2005</span>][<span class=\"number\">2005</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">doit</span><span class=\"params\">(<span class=\"type\">int</span> n,<span class=\"type\">int</span> k,string &amp;s)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;<span class=\"number\">3</span>;++i)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;=n; ++j)</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> pp=<span class=\"number\">0</span>; pp&lt;=k; ++pp)</span><br><span class=\"line\">                    dp[i][j][pp]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    dp[<span class=\"number\">1</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;=k;j++)&#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> p_sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">3</span>;k++)</span><br><span class=\"line\">                p_sum += dp[k][i<span class=\"number\">-1</span>][j];</span><br><span class=\"line\">            p_sum %= MOD;</span><br><span class=\"line\">            dp[<span class=\"number\">0</span>][i][j]=p_sum;</span><br><span class=\"line\">            dp[<span class=\"number\">1</span>][i][j]=(s[i<span class=\"number\">-1</span>]-<span class=\"string\">&#x27;a&#x27;</span>)*p_sum%MOD;</span><br><span class=\"line\">            dp[<span class=\"number\">2</span>][i][j]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> add = n-i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> prev=i;prev&gt;<span class=\"number\">0</span>;prev--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(add&gt;j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                dp[<span class=\"number\">2</span>][i][j]+=(<span class=\"number\">26</span>-(s[i<span class=\"number\">-1</span>]-<span class=\"string\">&#x27;a&#x27;</span>+<span class=\"number\">1</span>))*(dp[<span class=\"number\">1</span>][prev<span class=\"number\">-1</span>][j-add]+dp[<span class=\"number\">2</span>][prev<span class=\"number\">-1</span>][j-add])%MOD;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(dp[<span class=\"number\">2</span>][i][j]&gt;=MOD)</span><br><span class=\"line\">                    dp[<span class=\"number\">2</span>][i][j]-=MOD;</span><br><span class=\"line\">                add += n-i+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">3</span>;i++)</span><br><span class=\"line\">        ans += dp[i][n][k];</span><br><span class=\"line\">    ans %= MOD;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(<span class=\"type\">int</span> A, <span class=\"type\">int</span> B, string C)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">doit</span>(A,B,C);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://leetcode.com/problems/minimum-cost-to-hire-k-workers/\">https://leetcode.com/problems/minimum-cost-to-hire-k-workers/</a></li>\n</ul>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/lines-in-a-given-range/",
            "url": "https://samir.pages.dev/posts/lines-in-a-given-range/",
            "title": "lines in a given range",
            "date_published": "2023-08-10T07:35:42.174Z",
            "content_html": "<h1 id=\"Lines-in-a-given-range\"><a href=\"#Lines-in-a-given-range\" class=\"headerlink\" title=\"Lines in a given range\"></a>Lines in a given range</h1><p><a href=\"https://www.interviewbit.com/problems/lines-in-a-given-range/\">https://www.interviewbit.com/problems/lines-in-a-given-range/</a></p>\n<p>Write a bash script to print all the lines of the input which are in the given range.</p>\n<p>The first line of the input contains two integers l and r separated by space.</p>\n<p>You have to print all the lines of the file input which are in the range of [l, r].</p>\n<p>Example:</p>\n<p>Assume that the input has the following content.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">10 15</span><br><span class=\"line\">Line 2</span><br><span class=\"line\">Line 3</span><br><span class=\"line\">Line 4</span><br><span class=\"line\">Line 5</span><br><span class=\"line\">Line 6</span><br><span class=\"line\">Line 7</span><br><span class=\"line\">Line 8</span><br><span class=\"line\">Line 9</span><br><span class=\"line\">Line 10</span><br><span class=\"line\">Line 11</span><br><span class=\"line\">Line 12</span><br><span class=\"line\">Line 13</span><br><span class=\"line\">Line 14</span><br><span class=\"line\">Line 15</span><br><span class=\"line\">Line 16</span><br><span class=\"line\">Line 17</span><br><span class=\"line\">Line 18</span><br><span class=\"line\">Line 19</span><br><span class=\"line\">Line 20</span><br></pre></td></tr></table></figure>\n<p>Your bash script should output the following</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Line 10</span><br><span class=\"line\">Line 11</span><br><span class=\"line\">Line 12</span><br><span class=\"line\">Line 13</span><br><span class=\"line\">Line 14</span><br><span class=\"line\">Line 15</span><br></pre></td></tr></table></figure>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>You could use:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed</span><br><span class=\"line\">head</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>First Get the l and r</p>\n<p>Use head to print r line and pipe it with tail to print last <code>r-l+1</code> lines</p>\n<h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">l=$(<span class=\"built_in\">cat</span> input | <span class=\"built_in\">head</span> -n 1 | <span class=\"built_in\">cut</span> -d<span class=\"string\">&#x27; &#x27;</span> -f1)</span><br><span class=\"line\">r=$(<span class=\"built_in\">cat</span> input | <span class=\"built_in\">head</span> -n 1 | <span class=\"built_in\">cut</span> -d<span class=\"string\">&#x27; &#x27;</span> -f2)</span><br><span class=\"line\"><span class=\"built_in\">cat</span> input | <span class=\"built_in\">head</span> -n <span class=\"variable\">$r</span> | <span class=\"built_in\">tail</span> -n $((r-l+<span class=\"number\">1</span>))</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    lines = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;input&#x27;</span>).read().splitlines()</span><br><span class=\"line\">    a, b = [<span class=\"built_in\">int</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> lines[<span class=\"number\">0</span>].split(<span class=\"string\">&#x27; &#x27;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(a, b+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(lines[i-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br></pre></td></tr></table></figure>\n<h3 id=\"Another-Python\"><a href=\"#Another-Python\" class=\"headerlink\" title=\"Another Python\"></a>Another Python</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">main</span>():</span><br><span class=\"line\">    fp = <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;input&#x27;</span>)</span><br><span class=\"line\">    line = fp.readline()</span><br><span class=\"line\">    a, b = [<span class=\"built_in\">int</span>(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> line.split(<span class=\"string\">&#x27; &#x27;</span>)]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(a-<span class=\"number\">2</span>):</span><br><span class=\"line\">        fp.readline()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(b-a+<span class=\"number\">1</span>):</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(fp.readline(), end=<span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    main()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/list-cycle/",
            "url": "https://samir.pages.dev/posts/list-cycle/",
            "title": "list cycle",
            "date_published": "2023-08-10T07:35:42.174Z",
            "content_html": "<h1 id=\"List-Cycle\"><a href=\"#List-Cycle\" class=\"headerlink\" title=\"List Cycle\"></a>List Cycle</h1><p><a href=\"https://www.interviewbit.com/problems/list-cycle\">https://www.interviewbit.com/problems/list-cycle</a></p>\n<p>Given a linked list, return the node where the cycle begins. If there is no cycle, return null.</p>\n<p>Try solving it using constant additional space.</p>\n<p>Example :</p>\n<p>Input: </p>\n<pre><code>              ______\n             |     |\n             \\/    |\n    1 -&gt; 2 -&gt; 3 -&gt; 4\n</code></pre>\n<p>Return the node corresponding to node 3. </p>\n<p>Approach</p>\n<p>Lets now look at the starting point.<br>If we were using hashing, the first repetition we get is the starting point. Simple!</p>\n<p>What happens with the 2 pointer approach ?</p>\n<p>Method 1 :</p>\n<p>If you detect a cycle, the meeting point is definitely a point within the cycle.</p>\n<p>Can you determine the size of the cycle ? ( Easy ) Let the size be k.<br>F ix one pointer on the head, and another pointer to kth node from head.<br>Now move them simulataneously one step at a time. They will meet at the starting point of the cycle.</p>\n<p>Method 2 :</p>\n<p>This might be slightly more complicated. It involves a bit of maths and is not as intuitive as method 1.<br>Suppose the first meet at step k,the distance between the start node of list and the start node of cycle<br>is s, and the distance between the start node of cycle and the first meeting node is m.<br>Then<br>2k &#x3D; (s + m + n1r)<br>2(s + m + n2r) &#x3D; (s + m + n1r)<br>s + m &#x3D; nr where n is an integer.<br>s &#x3D; nr - m<br>s &#x3D; (r - m) + (n-1)r</p>\n<p>So, if we have one pointer on the head and another pointer at the meeting point.<br>Note that since the distance between start node of cycle and the first meeting node is m,<br>therefore if the pointer moves (r - m) steps, it will reach the start of the cycle.<br>When the pointer at the head moves s steps, the second pointer moves (r-m) + (n-1)r steps<br>which both points to the start of the cycle. In other words, both pointers meet first at the start of the cycle.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// editorial</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">Solution::detectCycle</span><span class=\"params\">(ListNode *head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode *firstp = head;</span><br><span class=\"line\">    ListNode *secondp = head;</span><br><span class=\"line\">    <span class=\"type\">bool</span> isCycle = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (firstp != <span class=\"literal\">NULL</span> &amp;&amp; secondp != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        firstp = firstp-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (secondp-&gt;next == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        secondp = secondp-&gt;next-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (firstp == secondp) &#123;</span><br><span class=\"line\">            isCycle = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isCycle)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    firstp = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (firstp != secondp) &#123;</span><br><span class=\"line\">        firstp = firstp-&gt;next;</span><br><span class=\"line\">        secondp = secondp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> firstp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lightweight</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">Solution::detectCycle</span><span class=\"params\">(ListNode *A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode *slow = A;</span><br><span class=\"line\">    ListNode *fast = A-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast &amp;&amp; fast-&gt;next) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (slow == fast) &#123;</span><br><span class=\"line\">            slow = A;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// detect node</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (slow != fast-&gt;next) &#123;</span><br><span class=\"line\">                slow = slow-&gt;next;</span><br><span class=\"line\">                fast = fast-&gt;next;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fast-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">        fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rajalprogram</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">Solution::detectCycle</span><span class=\"params\">(ListNode *head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head || !head-&gt;next)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    ListNode *slow = head, *fast = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fast) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!fast-&gt;next || !fast-&gt;next-&gt;next)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">        fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (slow == fast)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (slow != fast) &#123;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">        fast = fast-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> slow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">Solution::detectCycle</span><span class=\"params\">(ListNode *head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!head || !head-&gt;next)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode *slow = head, *fast = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (slow &amp;&amp; fast) &#123;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!fast-&gt;next)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span> <span class=\"keyword\">else</span> fast = (fast-&gt;next)-&gt;next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (slow == fast)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!slow || !fast)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">                   ListNode *</span><br><span class=\"line\">                   curr = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != slow) &#123;</span><br><span class=\"line\">        curr = curr-&gt;next;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> curr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/longest-arithmetic-progression/",
            "url": "https://samir.pages.dev/posts/longest-arithmetic-progression/",
            "title": "longest arithmetic progression",
            "date_published": "2023-08-10T07:35:42.174Z",
            "content_html": "<h1 id=\"Longest-Arithmetic-Progression\"><a href=\"#Longest-Arithmetic-Progression\" class=\"headerlink\" title=\"Longest Arithmetic Progression\"></a>Longest Arithmetic Progression</h1><p><a href=\"https://www.interviewbit.com/problems/longest-arithmetic-progression/\">https://www.interviewbit.com/problems/longest-arithmetic-progression/</a></p>\n<p>Find longest Arithmetic Progression in an integer array and return its length.<br>More formally, find longest sequence of indeces,</p>\n<p>0 &lt; i1 &lt; i2 &lt; …  &lt; ik &lt; ArraySize(0-indexed) such that sequence<br>A[i1], A[i2], … , A[ik] is an Arithmetic Progression.</p>\n<p>Arithmetic Progression is a sequence in which all the differences<br>between consecutive pairs are the same, i.e sequence</p>\n<p>B[0], B[1], B[2], … , B[m - 1] of length m is an Arithmetic Progression if and only if</p>\n<p>B[1] - B[0] &#x3D;&#x3D; B[2] - B[1] &#x3D;&#x3D; B[3] - B[2] &#x3D;&#x3D; …  &#x3D;&#x3D; B[m - 1] - B[m - 2].</p>\n<h3 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) 1, 2, 3 (All differences are equal to 1)</span><br><span class=\"line\">2) 7, 7, 7 (All differences are equal to 0)</span><br><span class=\"line\">3) 8, 5, 2 (Yes, difference can be negative too)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Samples\"><a href=\"#Samples\" class=\"headerlink\" title=\"Samples\"></a>Samples</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) Input: 3, 6, 9, 12</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">2) Input: 9, 4, 7, 2, 10</span><br><span class=\"line\">Output: 3(If we choose elements in positions 1, 2 and 4(0-indexed))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>What if we have first two elements of some Arithmetic Progression? Think about bruteforce.</p>\n<h2 id=\"Hint-2\"><a href=\"#Hint-2\" class=\"headerlink\" title=\"Hint 2\"></a>Hint 2</h2><p>Bruteforce solution. Let n be the length of input array. Iterate all over pairs 0 &lt;&#x3D; i &lt; j &lt; n and build Arithmetic Progression that has first two elements A[i], A[j].</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i: [0..n - 1]</span><br><span class=\"line\">\tfor j: [i + 1..n - 1]</span><br><span class=\"line\">\t\tcur = 2</span><br><span class=\"line\">\t\tlst = A[j]</span><br><span class=\"line\">\t\tdif = A[j] - A[i]</span><br><span class=\"line\">\t\tfor k: [j + 1..n - 1]</span><br><span class=\"line\">\t\t\tif (A[k] == lst + dif)</span><br><span class=\"line\">\t\t\t\tcur++</span><br><span class=\"line\">\t\t\t\tlst = A[k]</span><br><span class=\"line\">\t\tans = max(ans, cur)</span><br></pre></td></tr></table></figure>\n<p>It’s O(n ^ 3) solution. Think about Dynamic Programming.</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>Let dp[i][j] be the length of Longest Arithmetic progression that ends in positions i and j, i.e. last element is A[j] and element before last is A[i]. How can we calculate a value for fixed i and j? We know two last elements. So we know which number should be before position i. It’s number X such that A[i] - X &#x3D;&#x3D; A[j] - A[i] -&gt; X &#x3D;&#x3D; 2 * A[i] - A[j]. I.e we can iterate all over 0 &lt;&#x3D; k &lt; i and if A[k] &#x3D;&#x3D; X then update dp[i][j] by the value of dp[k][i] + 1(it’s easy to understand we only need to find rightmost such position).</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i: [0..n - 1]</span><br><span class=\"line\">\tfor j: [i + 1..n - 1]</span><br><span class=\"line\">\t\tdp[i][j] = 2</span><br><span class=\"line\">\t\tdif = A[j] - A[i]</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\ta[i] - x == a[j] - a[i]</span><br><span class=\"line\">\t\tx == 2 * a[i] - a[j]</span><br><span class=\"line\">\t\t*/</span><br><span class=\"line\">\t\tneed = 2 * A[i] - A[j]</span><br><span class=\"line\">\t\tpos = -1</span><br><span class=\"line\">\t\tfor k: [0..i - 1]</span><br><span class=\"line\">\t\t\tif (a[k] == need) </span><br><span class=\"line\">\t\t\t\tpos = k</span><br><span class=\"line\">\t\tif (pos &lt;&gt; -1) </span><br><span class=\"line\">\t\t\tdp[i][j] = max(dp[i][j], dp[pos][i] + 1)</span><br></pre></td></tr></table></figure>\n\n<p>it’s still <strong>O(n ^ 3)</strong> solution, because for fixed pair(i, j)<br>we need <strong>O(n)</strong> time to find pos. Think how can we find this position quickier.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Tutorial\"><a href=\"#Tutorial\" class=\"headerlink\" title=\"Tutorial\"></a>Tutorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//For searching some numbers in the prefix lets use some data structure.</span></span><br><span class=\"line\"><span class=\"comment\">// Lets store associative array [number, position].</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">3</span>) <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(n, <span class=\"number\">-1</span>));</span><br><span class=\"line\">    map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; pos;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            dp[i][j] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> dif = A[j] - A[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> need = <span class=\"number\">2</span> * A[i] - A[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pos.<span class=\"built_in\">count</span>(need) == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            dp[i][j] = <span class=\"built_in\">max</span>(dp[i][j], dp[pos[need]][i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pos[A[i]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, dp[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//it&#x27;s O(n ^ 2 * log(n)) solution.</span></span><br><span class=\"line\"><span class=\"comment\">//Also we can use unordered map(hash map) here,</span></span><br><span class=\"line\"><span class=\"comment\">// but its running time is undetermined</span></span><br><span class=\"line\"><span class=\"comment\">//(it&#x27;s **O(1)** in average, but constant might be too big).</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lightweight\"><a href=\"#Lightweight\" class=\"headerlink\" title=\"Lightweight\"></a>Lightweight</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> s = A.<span class=\"built_in\">size</span>(), ans = <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> first = A[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; s; j++) &#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> last = A[j];</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"type\">long</span> cd = A[j] - A[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> len = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = j + <span class=\"number\">1</span>; k &lt; s; k++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (A[k] - last == cd) &#123;</span><br><span class=\"line\">                    last = A[k];</span><br><span class=\"line\">                    len++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, len);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mine\"><a href=\"#Mine\" class=\"headerlink\" title=\"Mine\"></a>Mine</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;v)</span> </span>&#123;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, n = v.<span class=\"built_in\">size</span>(), j;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n, <span class=\"number\">2</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt; v.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x = v[i] - v[j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (m.<span class=\"built_in\">find</span>(x) != m.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dp[i] &lt; dp[j] + <span class=\"number\">1</span>)</span><br><span class=\"line\">                    dp[i] = dp[j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">                m[x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> *<span class=\"built_in\">max_element</span>(dp.<span class=\"built_in\">begin</span>(), dp.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/largest-continuous-sequence-zero-sum/",
            "url": "https://samir.pages.dev/posts/largest-continuous-sequence-zero-sum/",
            "title": "largest continuous sequence zero sum",
            "date_published": "2023-08-10T07:35:42.158Z",
            "content_html": "<h1 id=\"Largest-Continuous-Sequence-Zero-Sum\"><a href=\"#Largest-Continuous-Sequence-Zero-Sum\" class=\"headerlink\" title=\"Largest Continuous Sequence Zero Sum\"></a>Largest Continuous Sequence Zero Sum</h1><p><a href=\"https://www.interviewbit.com/problems/largest-continuous-sequence-zero-sum\">https://www.interviewbit.com/problems/largest-continuous-sequence-zero-sum</a></p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Lets try to reduce the problem to a much simpler problem.<br>Lets say we have another array sum where</p>\n<p>  sum[i] &#x3D; Sum of all elements from A[0] to A[i]<br>Note that in this array, sum of elements from A[i] to A[j] &#x3D; Sum[j] - Sum[i-1]</p>\n<p>We need to find j and i such that sum of elements from A[i] to A[j] &#x3D; 0<br> Or Sum[j] - Sum[i-1] &#x3D; 0<br> Or Sum[j] &#x3D; Sum[i-1]<br>Now, the problem reduces to finding 2 indices i and j such that sum[i] &#x3D; sum[j]<br>How can you solve the above problem ?</p>\n<h2 id=\"Hint-2\"><a href=\"#Hint-2\" class=\"headerlink\" title=\"Hint 2\"></a>Hint 2</h2><p>There are two steps:</p>\n<ol>\n<li>Create cumulative sum array where ith index in this array represents total sum from 1 to ith index element.</li>\n<li>Iterate all elements of cumulative sum array and use hashing to find two elements where value at ith index &#x3D;&#x3D; value at jth index but i !&#x3D; j.</li>\n<li>IF element is not present in hash in fill hash table with current element.</li>\n</ol>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Solution::lszero</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> x = <span class=\"number\">0</span>, y = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>, max_dist = <span class=\"number\">-1</span>, dist = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    m[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        sum += A[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m.<span class=\"built_in\">count</span>(sum) == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            m[sum] = i;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> tmp = m[sum] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            dist = i - tmp + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dist &gt; max_dist) &#123;</span><br><span class=\"line\">                max_dist = dist;</span><br><span class=\"line\">                x = tmp;</span><br><span class=\"line\">                y = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(A.<span class=\"built_in\">begin</span>() + x, A.<span class=\"built_in\">begin</span>() + y + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Solution::lszero</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\">    vector res;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> length = INT_MIN;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        sum += A[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (m.<span class=\"built_in\">find</span>(sum) == m.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">            m[sum] = i;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((i - (m[sum] + <span class=\"number\">1</span>)) &gt; b - a) &#123;</span><br><span class=\"line\">                b = i;</span><br><span class=\"line\">                a = m[sum] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; b - a) &#123;</span><br><span class=\"line\">                b = i;</span><br><span class=\"line\">                a = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(A.<span class=\"built_in\">begin</span>() + x, A.<span class=\"built_in\">begin</span>() + y + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///// editorial</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Solution::lszero</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; mp;</span><br><span class=\"line\">    <span class=\"type\">int</span> max_length = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> start = <span class=\"number\">0</span>, end = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        sum += A[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] == <span class=\"number\">0</span> &amp;&amp; max_length == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            max_length = <span class=\"number\">1</span>;</span><br><span class=\"line\">            start = i;</span><br><span class=\"line\">            end = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum == <span class=\"number\">0</span> &amp;&amp; i + <span class=\"number\">1</span> &gt; max_length) &#123;</span><br><span class=\"line\">            max_length = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">            start = <span class=\"number\">0</span>;</span><br><span class=\"line\">            end = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mp.<span class=\"built_in\">find</span>(sum) != mp.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x = i - mp[sum];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (x &gt; max_length) &#123;</span><br><span class=\"line\">                max_length = x;</span><br><span class=\"line\">                start = mp[sum] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                end = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            mp.<span class=\"built_in\">insert</span>(<span class=\"built_in\">make_pair</span>(sum, i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (max_length == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">        ans.<span class=\"built_in\">push_back</span>(A[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/largest-coprime-divisor/",
            "url": "https://samir.pages.dev/posts/largest-coprime-divisor/",
            "title": "largest coprime divisor",
            "date_published": "2023-08-10T07:35:42.158Z",
            "content_html": "<h1 id=\"Largest-Coprime-Divisor\"><a href=\"#Largest-Coprime-Divisor\" class=\"headerlink\" title=\"Largest Coprime Divisor\"></a>Largest Coprime Divisor</h1><p><a href=\"https://www.interviewbit.com/problems/largest-coprime-divisor\">https://www.interviewbit.com/problems/largest-coprime-divisor</a></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> A, <span class=\"type\">int</span> B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A&lt;B) <span class=\"built_in\">swap</span>(A,B);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(B) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> tmp = B;</span><br><span class=\"line\">        B = A%B;</span><br><span class=\"line\">        A = tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::cpFact</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// first we will remove the common factors of x and y</span></span><br><span class=\"line\">    <span class=\"comment\">// from x by finding the greatest common divisor (gcd)</span></span><br><span class=\"line\">    <span class=\"comment\">// of x and y and dividing x with that gcd.</span></span><br><span class=\"line\">    <span class=\"comment\">// x = x / gcd(x, y)</span></span><br><span class=\"line\">    <span class=\"comment\">// we repeat till we get gcd(x, y) = 1.</span></span><br><span class=\"line\">    <span class=\"comment\">// At last, we return a = x</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"built_in\">gcd</span>(x, y) != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        x = x / <span class=\"built_in\">gcd</span>(x, y);</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/largest-distance-between-nodes-of-a-tree/",
            "url": "https://samir.pages.dev/posts/largest-distance-between-nodes-of-a-tree/",
            "title": "largest distance between nodes of a tree",
            "date_published": "2023-08-10T07:35:42.158Z",
            "content_html": "<h1 id=\"Largest-Distance-between-nodes-of-a-Tree\"><a href=\"#Largest-Distance-between-nodes-of-a-Tree\" class=\"headerlink\" title=\"Largest Distance between nodes of a Tree\"></a>Largest Distance between nodes of a Tree</h1><p><a href=\"https://www.interviewbit.com/problems/largest-distance-between-nodes-of-a-tree/\">https://www.interviewbit.com/problems/largest-distance-between-nodes-of-a-tree/</a></p>\n<h2 id=\"Find-largest-distance\"><a href=\"#Find-largest-distance\" class=\"headerlink\" title=\"Find largest distance\"></a>Find largest distance</h2><p>Given an arbitrary unweighted rooted tree which consists of N (2 &lt;&#x3D; N &lt;&#x3D; 40000) nodes.<br>The goal of the problem is to find largest distance between two nodes in a tree.<br>Distance between two nodes is a number of edges on a path between the nodes<br>(there will be a unique path between any pair of nodes since it is a tree).<br>The nodes will be numbered 0 through N - 1.</p>\n<p>The tree is given as an array P, there is an edge between nodes P[i] and i (0 &lt;&#x3D; i &lt; N).<br>Exactly one of the i’s will have P[i] equal to -1, it will be root node.</p>\n<p>Example:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">If given P is [-1, 0, 0, 0, 3], then node 0 is the root and the whole tree looks like this:</span><br><span class=\"line\"></span><br><span class=\"line\">          0</span><br><span class=\"line\">       /  |  \\</span><br><span class=\"line\">      1   2   3</span><br><span class=\"line\">               \\</span><br><span class=\"line\">                4  </span><br></pre></td></tr></table></figure>\n<p>One of the longest path is 1 -&gt; 0 -&gt; 3 -&gt; 4 and its length is 3, thus the answer is 3.<br>Note that there are other paths with maximal distance</p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>How would you solve the problem if you knew the longest path certainly goes through root? Try to generalize this approach for other nodes.</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) pick any node u</span><br><span class=\"line\">2) find the node which is farthest from u, call it x (calculate using the same approach as in Solution 1)</span><br><span class=\"line\">3) find the node which is farthest from x, call it q (calculate using the same approach as in Solution 1)</span><br><span class=\"line\">The answer will be the length of a path from x to q.</span><br><span class=\"line\"></span><br><span class=\"line\">Proof of correctness:</span><br><span class=\"line\"></span><br><span class=\"line\">The crucial step is to prove that x will be one of the endpoints of</span><br><span class=\"line\">the path with maximal length (note that there might be more than one such path).</span><br><span class=\"line\">If it is, then the longest path from x will be the longest path in the tree.</span><br><span class=\"line\"></span><br><span class=\"line\">Let d(v1, v2) be length of path between v1 and v2</span><br><span class=\"line\"></span><br><span class=\"line\">Let&#x27;s prove it by contradiction: assume there is a strictly longer path between s and t,</span><br><span class=\"line\">neither of which is x. Let h be a node which is closest to u among the nodes on a path between s and t.</span><br><span class=\"line\">Then there are two cases:</span><br><span class=\"line\"></span><br><span class=\"line\">1) h is on path between u and x</span><br><span class=\"line\"></span><br><span class=\"line\">    u</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |</span><br><span class=\"line\">    |</span><br><span class=\"line\">    h   x</span><br><span class=\"line\">   / \\ /</span><br><span class=\"line\">  /   *</span><br><span class=\"line\"> /     \\</span><br><span class=\"line\">s       t </span><br><span class=\"line\">then d(s, t) = d(s, h) + d(h, t) &lt;= d(s, h) + d(h, x) = d(s, x), which contradicts assumption.</span><br><span class=\"line\"></span><br><span class=\"line\">2) h is not on path between u and x</span><br><span class=\"line\"></span><br><span class=\"line\">    u</span><br><span class=\"line\">    |</span><br><span class=\"line\">    *---x</span><br><span class=\"line\">    |</span><br><span class=\"line\">    h</span><br><span class=\"line\">   / \\</span><br><span class=\"line\">  /   \\</span><br><span class=\"line\"> /     \\</span><br><span class=\"line\">s       t</span><br><span class=\"line\"></span><br><span class=\"line\">then</span><br><span class=\"line\"></span><br><span class=\"line\">d(u, s) &lt;= d(u, x) &lt;= d(u, h) + d(h, x)</span><br><span class=\"line\">d(u, t) &lt;= d(u, x) &lt;= d(u, h) + d(h, x)</span><br><span class=\"line\"></span><br><span class=\"line\">d(s, t) = d(s, h) + d(h, t)</span><br><span class=\"line\">= d(u, s) + d(u, t) - 2 d(u, h)</span><br><span class=\"line\">&lt;= 2 d(h, x)</span><br><span class=\"line\"></span><br><span class=\"line\">2 d(s, t) &lt;= d(s, t) + 2 d(h, x)</span><br><span class=\"line\">= d(s, h) + d(h, x) + d(x, h) + d(h, t)</span><br><span class=\"line\">= d(x, s) + d(x, t)</span><br><span class=\"line\"></span><br><span class=\"line\">This means that max(d(v, s), d(v, t)) &gt;= d(s, t), which also contradicts assumption.</span><br><span class=\"line\"></span><br><span class=\"line\">Thus, we proved that farthest node of a node will be one of the endpoints of the longest path.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> max_ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> src,vector&lt;<span class=\"type\">int</span>&gt;tree[])</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> max1=<span class=\"number\">0</span>,max2=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> size=tree[src].<span class=\"built_in\">size</span>();<span class=\"comment\">//no of childs of src</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(size==<span class=\"number\">0</span>)<span class=\"comment\">//this node will contribute 1 edge when linked with its parent</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;size;i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"built_in\">dfs</span>(tree[src][i],tree);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ans&gt;max1) &#123;</span><br><span class=\"line\">            max2=max1;</span><br><span class=\"line\">            max1=ans;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ans&gt;max2)</span><br><span class=\"line\">            max2=ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    max_ans=<span class=\"built_in\">max</span>(max_ans,max1+max2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>+<span class=\"built_in\">max</span>(max1,max2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    max_ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n&lt;<span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//nodes will be 0 to n-1</span></span><br><span class=\"line\">    <span class=\"type\">int</span> root=<span class=\"number\">-1</span>;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt;tree[n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i]==<span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            root=i;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> src=A[i],dest=i;</span><br><span class=\"line\">        tree[src].<span class=\"built_in\">push_back</span>(dest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//now start dfs with root</span></span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(root,tree);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fastest\"><a href=\"#Fastest\" class=\"headerlink\" title=\"Fastest\"></a>Fastest</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; res1;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; res2;</span><br><span class=\"line\">    res1.<span class=\"built_in\">resize</span>(A.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    res2.<span class=\"built_in\">resize</span>(A.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=A.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(res1[A[i]]&lt;<span class=\"built_in\">max</span>(res1[i],res2[i])+<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">            res2[A[i]]=<span class=\"built_in\">max</span>(res2[A[i]],res1[A[i]]);</span><br><span class=\"line\">            res1[A[i]]=<span class=\"built_in\">max</span>(res1[i],res2[i])+<span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res2[A[i]]&lt;<span class=\"built_in\">max</span>(res1[i],res2[i])+<span class=\"number\">1</span>)</span><br><span class=\"line\">            res2[A[i]]=<span class=\"built_in\">max</span>(res1[i],res2[i])+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> r=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//cout&lt;&lt;res1[i]&lt;&lt;&quot; &quot;&lt;&lt;res2[i]&lt;&lt;endl;</span></span><br><span class=\"line\">        r=<span class=\"built_in\">max</span>(r,res1[i]+res2[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mine\"><a href=\"#Mine\" class=\"headerlink\" title=\"Mine\"></a>Mine</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; <span class=\"title\">process</span><span class=\"params\">(queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &gt;&amp; q, vector&lt;<span class=\"type\">int</span>&gt;&amp; visited, unordered_map&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt; &gt;&amp; x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Typical BFS with keeping track of the longest distance and farthest element.</span></span><br><span class=\"line\">    <span class=\"type\">int</span> maxi = INT_MIN, farthest = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> node = q.<span class=\"built_in\">front</span>().first;</span><br><span class=\"line\">        <span class=\"type\">int</span> distance = q.<span class=\"built_in\">front</span>().second;</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(distance &gt; maxi)&#123;</span><br><span class=\"line\">            maxi = distance;</span><br><span class=\"line\">            farthest = node;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        visited[node] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; x[node].<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!visited[x[node][i]])&#123;</span><br><span class=\"line\">                visited[x[node][i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(&#123;x[node][i], distance+<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;maxi, farthest&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Base Case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.<span class=\"built_in\">size</span>() &lt;= <span class=\"number\">1</span>)<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Visited array to keep track of visited elements</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">visited</span><span class=\"params\">(A.size(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Map to make the graph from given array</span></span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt; &gt; x;</span><br><span class=\"line\">    x.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">        <span class=\"comment\">// If the value is -1, it doesn&#x27;t have any parent.</span></span><br><span class=\"line\">        <span class=\"comment\">// Make the pairs in the adj. list type map</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>( A[i] != <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            x[A[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">            x[i].<span class=\"built_in\">push_back</span>(A[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Start from the first element in the array and mark it visited.</span></span><br><span class=\"line\">    queue&lt;pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    visited[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Gets the farthest element from the first element</span></span><br><span class=\"line\">    <span class=\"type\">int</span> farthest = <span class=\"built_in\">process</span>(q, visited, x).second;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">vis</span><span class=\"params\">(A.size(), <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Now apply BFS on the farthest element found and return the distance</span></span><br><span class=\"line\">    <span class=\"comment\">// of the farthest element found so far.</span></span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(&#123;farthest, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">    vis[farthest] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">process</span>(q, vis, x).first;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Asked-in\"><a href=\"#Asked-in\" class=\"headerlink\" title=\"Asked in\"></a>Asked in</h2><ul>\n<li>Facebook</li>\n<li>Google</li>\n</ul>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/largest-number/",
            "url": "https://samir.pages.dev/posts/largest-number/",
            "title": "largest number",
            "date_published": "2023-08-10T07:35:42.158Z",
            "content_html": "<h1 id=\"Largest-Number\"><a href=\"#Largest-Number\" class=\"headerlink\" title=\"Largest Number\"></a>Largest Number</h1><p><a href=\"https://www.interviewbit.com/problems/largest-number/\">https://www.interviewbit.com/problems/largest-number/</a></p>\n<p>Given a list of non negative integers, arrange them such that they form the largest number.</p>\n<p>For example:</p>\n<p>Given [3, 30, 34, 5, 9], the largest formed number is 9534330.</p>\n<p>Note: The result may be very large, so you need to return a string instead of an integer.</p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Hint : Sorting</p>\n<p>Think around what kind of sorting would be needed. Obviously, we can’t simply just sort the numbers or string.</p>\n<p>Have you considered cases like 27, 271 or 12, 121 ?</p>\n<h2 id=\"Solution-approach\"><a href=\"#Solution-approach\" class=\"headerlink\" title=\"Solution approach\"></a>Solution approach</h2><p>Sorting all numbers in descending order is the simplest solution that occurs to us. But this doesn’t work.</p>\n<p>For example, 548 is greater than 60, but in the output, 60 comes before 548. As a second example, 98 is greater than 9, but 9 comes before 98 in the output.</p>\n<p>The solution is to use any comparison based sorting algorithm. Thus, instead of using the default comparison, write a comparison function myCompare() and use it to sort numbers.</p>\n<p>Given two numbers X and Y, how should myCompare() decide which number to put first - we compare two numbers XY (Y appended at the end of X) and YX (X appended at the end of Y).</p>\n<p>If XY is larger, then, in the output, X should come before Y, else Y should come before X.</p>\n<p>For example, let X and Y be 542 and 60. To compare X and Y, we compare 54260 and 60542. Since 60542 is greater than 54260, we put Y first.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">concatenate</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> pow = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(y &gt;= pow)</span><br><span class=\"line\">        pow *= <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span>)x * pow + y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">myfunction</span> <span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">concatenate</span>(i,j) &gt; <span class=\"built_in\">concatenate</span>(j,i);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">Solution::largestNumber</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; B = A; <span class=\"comment\">// get rid of const</span></span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(B.<span class=\"built_in\">begin</span>(), B.<span class=\"built_in\">end</span>(), myfunction);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(B[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> x:B)</span><br><span class=\"line\">        s += <span class=\"built_in\">to_string</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">bool myCompare(string X, string Y) &#123; </span></span><br><span class=\"line\"><span class=\"comment\">    string XY = X.append(Y); </span></span><br><span class=\"line\"><span class=\"comment\">    string YX = Y.append(X);</span></span><br><span class=\"line\"><span class=\"comment\">    return XY.compare(YX) &gt; 0 ? true: false;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; </span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">string Solution::largestNumber(const vector&lt;int&gt; &amp;A) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    vector&lt;string&gt; v;</span></span><br><span class=\"line\"><span class=\"comment\">    for (auto x:A)</span></span><br><span class=\"line\"><span class=\"comment\">        v.push_back(to_string(x));</span></span><br><span class=\"line\"><span class=\"comment\">    sort(v.begin(), v.end(), myCompare);</span></span><br><span class=\"line\"><span class=\"comment\">    string res;</span></span><br><span class=\"line\"><span class=\"comment\">    for (auto s:v)</span></span><br><span class=\"line\"><span class=\"comment\">        if (s!=&quot;0&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">            res += s;</span></span><br><span class=\"line\"><span class=\"comment\">    if (res==&quot;&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">        res = &quot;0&quot;;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    return res;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Asked-in\"><a href=\"#Asked-in\" class=\"headerlink\" title=\"Asked in\"></a>Asked in</h2><ul>\n<li>Amazon</li>\n<li>Goldman Sachs</li>\n<li>Microsoft</li>\n</ul>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/least-common-ancestor/",
            "url": "https://samir.pages.dev/posts/least-common-ancestor/",
            "title": "least common ancestor",
            "date_published": "2023-08-10T07:35:42.158Z",
            "content_html": "<h1 id=\"Least-Common-Ancestor\"><a href=\"#Least-Common-Ancestor\" class=\"headerlink\" title=\"Least Common Ancestor\"></a>Least Common Ancestor</h1><p><a href=\"https://www.interviewbit.com/problems/least-common-ancestor\">https://www.interviewbit.com/problems/least-common-ancestor</a></p>\n<p>Pick every node. For every node, search for val1, val2 in the subtree. If val1 and val2 are both found in the subtree, then the current node is definitely one of the ancestors. Also track the depth of the current node. Pick the qualifying node of highest depth.</p>\n<p>Hint for a better solution :</p>\n<ol>\n<li>If you had the path from the nodes to the root, what property would the path have ? Can the paths be used to determine LCA ? </li>\n<li>If you took bottom up approach using recursion, can you think of a simple solution ?</li>\n</ol>\n<p>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</p>\n<p>Linear solution using path calculation :</p>\n<ol>\n<li>Find path from root to n1 and store it in a vector or array.</li>\n<li>Find path from root to n2 and store it in another vector or array.</li>\n<li>Traverse both paths till the values in arrays are same. Return the common element just before the mismatch</li>\n</ol>\n<p>Linear solution using recursion :</p>\n<p>We traverse from the bottom, and once we reach a node which matches one of the two nodes,<br>we pass it up to its parent. The parent would then test its left and right subtree<br>if each contain one of the two nodes. If yes, then the parent must be the LCA and<br>we pass its parent up to the root. If not, we pass the lower node which contains either<br>one of the two nodes (if the left or right subtree contains either p or q), or NULL<br>(if both the left and right subtree does not contain either p or q) up.</p>\n<p>&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// editorial</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TreeNode *<span class=\"title\">LCA</span><span class=\"params\">(TreeNode *root, <span class=\"type\">int</span> val1, <span class=\"type\">int</span> val2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;val == val1 || root-&gt;val == val2) <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    TreeNode *L = <span class=\"built_in\">LCA</span>(root-&gt;left, val1, val2);</span><br><span class=\"line\">    TreeNode *R = <span class=\"built_in\">LCA</span>(root-&gt;right, val1, val2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L &amp;&amp; R) <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L ? L : R;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">find</span><span class=\"params\">(TreeNode *root, <span class=\"type\">int</span> val1)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;val == val1) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(root-&gt;left, val1) || <span class=\"built_in\">find</span>(root-&gt;right, val1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::lca</span><span class=\"params\">(TreeNode *root, <span class=\"type\">int</span> val1, <span class=\"type\">int</span> val2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">find</span>(root, val1) || !<span class=\"built_in\">find</span>(root, val2)) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    TreeNode *ans = <span class=\"built_in\">LCA</span>(root, val1, val2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!ans) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans-&gt;val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fastest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">find</span><span class=\"params\">(TreeNode *a, <span class=\"type\">int</span> v, vector&lt;<span class=\"type\">int</span>&gt; &amp;v1)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!a) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    v1.<span class=\"built_in\">push_back</span>(a-&gt;val);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a-&gt;val == v) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (((a-&gt;left) &amp;&amp; <span class=\"built_in\">find</span>(a-&gt;left, v, v1)) || (a-&gt;right &amp;&amp; <span class=\"built_in\">find</span>(a-&gt;right, v, v1))) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    v1.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::lca</span><span class=\"params\">(TreeNode *a, <span class=\"type\">int</span> val1, <span class=\"type\">int</span> val2)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; v1, v2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">find</span>(a, val1, v1) || !<span class=\"built_in\">find</span>(a, val2, v2)) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">int</span>(v1.<span class=\"built_in\">size</span>()) &amp;&amp; i &lt; <span class=\"built_in\">int</span>(v2.<span class=\"built_in\">size</span>()); i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v1[i] != v2[i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v1[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">find</span><span class=\"params\">(TreeNode *root, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root-&gt;val == val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((root-&gt;left &amp;&amp; <span class=\"built_in\">find</span>(root-&gt;left, val)) ||</span><br><span class=\"line\">        (root-&gt;right &amp;&amp; <span class=\"built_in\">find</span>(root-&gt;right, val)))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TreeNode *<span class=\"title\">LCA</span><span class=\"params\">(TreeNode *root, <span class=\"type\">int</span> val1, <span class=\"type\">int</span> val2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root || root-&gt;val == val1 || root-&gt;val == val2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> L = <span class=\"built_in\">LCA</span>(root-&gt;left, val1, val2);</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> R = <span class=\"built_in\">LCA</span>(root-&gt;right, val1, val2);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (L &amp;&amp; R)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> L ? L : R;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::lca</span><span class=\"params\">(TreeNode *A, <span class=\"type\">int</span> val1, <span class=\"type\">int</span> val2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">find</span>(A, val1) || !<span class=\"built_in\">find</span>(A, val2))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> ancestor = <span class=\"built_in\">LCA</span>(A, val1, val2);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ancestor)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ancestor-&gt;val;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/length-of-last-word/",
            "url": "https://samir.pages.dev/posts/length-of-last-word/",
            "title": "length of last word",
            "date_published": "2023-08-10T07:35:42.158Z",
            "content_html": "<h1 id=\"Length-Of-Last-Word\"><a href=\"#Length-Of-Last-Word\" class=\"headerlink\" title=\"Length Of Last Word\"></a>Length Of Last Word</h1><p><a href=\"https://www.interviewbit.com/problems/length-of-last-word\">https://www.interviewbit.com/problems/length-of-last-word</a></p>\n<p>hint1</p>\n<p>Not using library functions and traversing the string only once is the main twist here.</p>\n<p>Try to answer these questions while using single loop:<br>How can you detect the end of the string?<br>How can you detect where the word begins?</p>\n<p>hint2</p>\n<p>As said before, this problem does not allow using library functions.</p>\n<p>What if you maintained the length of the current word?</p>\n<p>You reset the length of the word when the next word begins (When does a new word begin?)</p>\n<p>Return the last length you have.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* editorial */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::lengthOfLastWord</span><span class=\"params\">(<span class=\"type\">const</span> string A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">char</span> * s = A.<span class=\"built_in\">c_str</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (*s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*s != <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">            len++;</span><br><span class=\"line\">            s++;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        s++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (*s &amp;&amp; *s != <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">            len = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* my solution */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::lengthOfLastWord</span><span class=\"params\">(<span class=\"type\">const</span> string A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = A.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> i = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i != <span class=\"number\">0</span> &amp;&amp; A[i] == <span class=\"string\">&#x27; &#x27;</span>)</span><br><span class=\"line\">        i--;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (A[i] != <span class=\"string\">&#x27; &#x27;</span>) &#123;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/length-of-longest-consecutive-ones/",
            "url": "https://samir.pages.dev/posts/length-of-longest-consecutive-ones/",
            "title": "length of longest consecutive ones",
            "date_published": "2023-08-10T07:35:42.158Z",
            "content_html": "<h1 id=\"Length-of-longest-consecutive-ones\"><a href=\"#Length-of-longest-consecutive-ones\" class=\"headerlink\" title=\"Length of longest consecutive ones\"></a>Length of longest consecutive ones</h1><p><a href=\"https://www.interviewbit.com/problems/length-of-longest-consecutive-ones/\">https://www.interviewbit.com/problems/length-of-longest-consecutive-ones/</a></p>\n<p>Given a binary string A. It is allowed to do at most one swap between any 0 and 1.<br>Find and return the length of the longest consecutive 1�s that can be achieved.</p>\n<h3 id=\"Input-Format\"><a href=\"#Input-Format\" class=\"headerlink\" title=\"Input Format\"></a>Input Format</h3><p>The only argument given is string A.</p>\n<h3 id=\"Output-Format\"><a href=\"#Output-Format\" class=\"headerlink\" title=\"Output Format\"></a>Output Format</h3><p>Return the length of the longest consecutive 1�s that can be achieved.</p>\n<h3 id=\"Constraints\"><a href=\"#Constraints\" class=\"headerlink\" title=\"Constraints\"></a>Constraints</h3><p>1 &lt;&#x3D; length of string &lt;&#x3D; 1000000</p>\n<p>A contains only characters 0 and 1.</p>\n<h3 id=\"For-Example\"><a href=\"#For-Example\" class=\"headerlink\" title=\"For Example\"></a>For Example</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input 1:</span><br><span class=\"line\">    A = &quot;111000&quot;</span><br><span class=\"line\">Output 1:</span><br><span class=\"line\">    3</span><br><span class=\"line\"></span><br><span class=\"line\">Input 2:</span><br><span class=\"line\">    A = &quot;111011101&quot;</span><br><span class=\"line\">Output 2:</span><br><span class=\"line\">    7</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = s.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt_one = <span class=\"number\">0</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;1&#x27;</span>) </span><br><span class=\"line\">            cnt_one++; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">   </span><br><span class=\"line\">    <span class=\"type\">int</span> left[n], right[n]; </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;1&#x27;</span>) </span><br><span class=\"line\">        left[<span class=\"number\">0</span>] = <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        left[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s[n - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;1&#x27;</span>) </span><br><span class=\"line\">        right[n - <span class=\"number\">1</span>] = <span class=\"number\">1</span>; </span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        right[n - <span class=\"number\">1</span>] = <span class=\"number\">0</span>; </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;1&#x27;</span>) </span><br><span class=\"line\">            left[i] = left[i - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            left[i] = <span class=\"number\">0</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;1&#x27;</span>) </span><br><span class=\"line\">            right[i] = right[i + <span class=\"number\">1</span>] + <span class=\"number\">1</span>; </span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            right[i] = <span class=\"number\">0</span>; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>, max_cnt = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"type\">int</span> flag =<span class=\"number\">0</span>; </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i] == <span class=\"string\">&#x27;0&#x27;</span>) &#123; </span><br><span class=\"line\">            <span class=\"type\">int</span> sum = left[i - <span class=\"number\">1</span>] + right[i + <span class=\"number\">1</span>]; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (sum &lt; cnt_one) </span><br><span class=\"line\">                cnt = sum + <span class=\"number\">1</span>; </span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                cnt = sum; </span><br><span class=\"line\">            max_cnt = <span class=\"built_in\">max</span>(max_cnt, cnt); </span><br><span class=\"line\">            cnt = <span class=\"number\">0</span>; </span><br><span class=\"line\">            flag = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flag==<span class=\"number\">0</span>)</span><br><span class=\"line\">        max_cnt = cnt_one;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_cnt;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fastest\"><a href=\"#Fastest\" class=\"headerlink\" title=\"Fastest\"></a>Fastest</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(string A)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; vec;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> count1 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;A.<span class=\"built_in\">size</span>(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A[i]==<span class=\"string\">&#x27;1&#x27;</span>)</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            vec.<span class=\"built_in\">push_back</span>(count);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(count!=<span class=\"number\">0</span>)</span><br><span class=\"line\">                count1++;</span><br><span class=\"line\">            count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count!=<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        vec.<span class=\"built_in\">push_back</span>(count);</span><br><span class=\"line\">        count1++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(vec.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count1==<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> *<span class=\"built_in\">max_element</span>(vec.<span class=\"built_in\">begin</span>(), vec.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(count1&gt;<span class=\"number\">2</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> maxim = vec[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;vec.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            maxim = <span class=\"built_in\">max</span>(maxim, vec[i]+vec[i+<span class=\"number\">1</span>]+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxim;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> maxim = vec[<span class=\"number\">0</span>]+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;vec.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(vec[i]!=<span class=\"number\">0</span> &amp;&amp; vec[i+<span class=\"number\">1</span>]!=<span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> vec[i]+vec[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">        maxim = <span class=\"built_in\">max</span>(maxim, vec[i+<span class=\"number\">1</span>]+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxim;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Lightweight\"><a href=\"#Lightweight\" class=\"headerlink\" title=\"Lightweight\"></a>Lightweight</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(string s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> res = <span class=\"number\">1</span>, n = s.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"comment\">// if (s[0]==&#x27;0&#x27;) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     int i = 1;</span></span><br><span class=\"line\">    <span class=\"comment\">//     while(i&lt;n&amp;&amp;s[i]==&#x27;1&#x27;)++i;</span></span><br><span class=\"line\">    <span class=\"comment\">//     res = i;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// int a = 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// while(a&lt;n&amp;&amp;s[a]==&#x27;1&#x27;)++a;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>, L = <span class=\"number\">0</span>, R = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)<span class=\"keyword\">if</span>(s[i]==<span class=\"string\">&#x27;1&#x27;</span>)++R;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[i]==<span class=\"string\">&#x27;0&#x27;</span>)++cnt;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> --R;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (a &lt; i &amp;&amp; cnt &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (s[a]==<span class=\"string\">&#x27;0&#x27;</span>)--cnt;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> ++L;</span><br><span class=\"line\">            ++a;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> r = i - a + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt==<span class=\"number\">0</span>||<span class=\"built_in\">max</span>(L,R)&gt;<span class=\"number\">0</span>)<span class=\"keyword\">if</span> (r &gt; res) res = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ul>\n<li><a href=\"https://www.geeksforgeeks.org/length-of-longest-consecutive-ones-by-at-most-one-swap-in-a-binary-string/\">https://www.geeksforgeeks.org/length-of-longest-consecutive-ones-by-at-most-one-swap-in-a-binary-string/</a></li>\n</ul>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/k-reverse-linked-list/",
            "url": "https://samir.pages.dev/posts/k-reverse-linked-list/",
            "title": "k reverse linked list",
            "date_published": "2023-08-10T07:35:42.143Z",
            "content_html": "<h1 id=\"K-Reverse-Linked-List\"><a href=\"#K-Reverse-Linked-List\" class=\"headerlink\" title=\"K Reverse Linked List\"></a>K Reverse Linked List</h1><p><a href=\"https://www.interviewbit.com/problems/k-reverse-linked-list\">https://www.interviewbit.com/problems/k-reverse-linked-list</a></p>\n<p>Given a singly linked list and an integer K, reverses the nodes of the</p>\n<p>list K at a time and returns modified linked list.</p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Try to split the list into buckets of K.</p>\n<p>Solution approach<br>Split the list into buckets of length K and then reverse each of them.<br>After this you have to concatenate the buckets and return the list. To split the list into buckets of length K,<br>use 2 pointers that are K elements afar. To reverse a linked list check this.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fastest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">Solution::reverseList</span><span class=\"params\">(ListNode *A, <span class=\"type\">int</span> B)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">ListNode</span> *current = A;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">ListNode</span> *next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">ListNode</span> *prev = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*reverse first k nodes of the linked list */</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (count &lt; B) &#123;</span><br><span class=\"line\">        next = current-&gt;next;</span><br><span class=\"line\">        current-&gt;next = prev;</span><br><span class=\"line\">        prev = current;</span><br><span class=\"line\">        current = next;</span><br><span class=\"line\">        count++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        A-&gt;next = <span class=\"built_in\">reverseList</span>(next, B);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// mine</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">Solution::reverseList</span><span class=\"params\">(ListNode *head, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode *next = <span class=\"number\">0</span>, *prev = <span class=\"number\">0</span>, *curr = head;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k &amp;&amp; curr; i++) &#123;</span><br><span class=\"line\">        next = curr-&gt;next;</span><br><span class=\"line\">        curr-&gt;next = prev;</span><br><span class=\"line\">        prev = curr;</span><br><span class=\"line\">        curr = next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head)</span><br><span class=\"line\">        head-&gt;next = <span class=\"built_in\">reverseList</span>(curr, k);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/knight-on-chess-board/",
            "url": "https://samir.pages.dev/posts/knight-on-chess-board/",
            "title": "knight on chess board",
            "date_published": "2023-08-10T07:35:42.143Z",
            "content_html": "<h1 id=\"Knight-On-Chess-Board\"><a href=\"#Knight-On-Chess-Board\" class=\"headerlink\" title=\"Knight On Chess Board\"></a>Knight On Chess Board</h1><p><a href=\"https://www.interviewbit.com/problems/knight-on-chess-board/\">https://www.interviewbit.com/problems/knight-on-chess-board/</a></p>\n<p>Knight movement on a chess board</p>\n<p>Given any source point and destination point on a chess board, we need to find whether Knight can move to the destination or not.</p>\n<p><img src=\"http://i.imgur.com/lmKL4AU.jpg\"></p>\n<p>Knight’s movements on a chess board</p>\n<p>The above figure details the movements for a knight ( 8 possibilities ). Note that a knight cannot go out of the board.</p>\n<p>If yes, then what would be the minimum number of steps for the knight to move to the said point.<br>If knight can not move from the source point to the destination point, then return -1</p>\n<p>Input:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N, M, x1, y1, x2, y2</span><br><span class=\"line\">where N and M are size of chess board</span><br><span class=\"line\">x1, y1  coordinates of source point</span><br><span class=\"line\">x2, y2  coordinates of destination point</span><br></pre></td></tr></table></figure>\n\n<p>Output:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return Minimum moves or -1</span><br></pre></td></tr></table></figure>\n<p>Example</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input : 8 8 1 1 8 8</span><br><span class=\"line\">Output :  6</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Assume this problem as searching in graph where each block of chess board is vertex.<br>How would you define edges in such a graph ?<br>When can you travel from vertex i to vertex j ?</p>\n<p>Once you have the graph, then it reduces to finding the shortest path in an unweighted graph.<br>How do you find the shortest path in an unweighted graph ?</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A knight can move to 8 positions from (x,y). </span><br><span class=\"line\"></span><br><span class=\"line\">(x, y) -&gt; </span><br><span class=\"line\">    (x + 2, y + 1)  </span><br><span class=\"line\">    (x + 2, y - 1)</span><br><span class=\"line\">    (x - 2, y + 1)</span><br><span class=\"line\">    (x - 2, y - 1)</span><br><span class=\"line\">    (x + 1, y + 2)</span><br><span class=\"line\">    (x + 1, y - 2)</span><br><span class=\"line\">    (x - 1, y + 2)</span><br><span class=\"line\">    (x - 1, y - 2)</span><br><span class=\"line\"></span><br><span class=\"line\">Corresponding to the knight&#x27;s move, we can define edges. </span><br><span class=\"line\">(x,y) will have an edge to the 8 neighbors defined above. </span><br><span class=\"line\"></span><br><span class=\"line\">To find the shortest path, we just run a plain BFS. </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">x</span> <span class=\"params\">(&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-2</span>, <span class=\"number\">-1</span>, <span class=\"number\">-2</span>&#125;)</span></span>;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">y</span> <span class=\"params\">(&#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">-2</span>, <span class=\"number\">-1</span>&#125;)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isSafe</span><span class=\"params\">(<span class=\"type\">int</span> i , <span class=\"type\">int</span> j ,<span class=\"type\">int</span> N, <span class=\"type\">int</span> M)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">0</span> &amp;&amp; i &lt; N &amp;&amp; j &gt;= <span class=\"number\">0</span> &amp;&amp; j &lt; M)<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">explore</span><span class=\"params\">(queue&lt;pair&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &gt; &gt;&amp; q, <span class=\"type\">int</span> A, <span class=\"type\">int</span> B, <span class=\"type\">int</span> C, <span class=\"type\">int</span> D, <span class=\"type\">int</span> E, <span class=\"type\">int</span> F, vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt;&amp; visited, <span class=\"type\">int</span> &amp;count)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!q.<span class=\"built_in\">empty</span>())&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> distance = q.<span class=\"built_in\">front</span>().first;</span><br><span class=\"line\">        <span class=\"type\">int</span> c = q.<span class=\"built_in\">front</span>().second.first;</span><br><span class=\"line\">        <span class=\"type\">int</span> d = q.<span class=\"built_in\">front</span>().second.second;</span><br><span class=\"line\">        q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( c == E &amp;&amp; d == F)<span class=\"keyword\">return</span> distance;</span><br><span class=\"line\">        visited[c][d] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; x.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> first = c + x[i];</span><br><span class=\"line\">            <span class=\"type\">int</span> second = d + y[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isSafe</span>(first, second, A, B))&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(visited[first][second] == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    visited[first][second] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                    q.<span class=\"built_in\">push</span>(&#123;distance+<span class=\"number\">1</span>, &#123;first, second&#125;&#125;);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::knight</span><span class=\"params\">(<span class=\"type\">int</span> A, <span class=\"type\">int</span> B, <span class=\"type\">int</span> C, <span class=\"type\">int</span> D, <span class=\"type\">int</span> E, <span class=\"type\">int</span> F)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; <span class=\"built_in\">visited</span> (A, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt; (B, <span class=\"number\">0</span>));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">int</span> count  = <span class=\"number\">0</span>;</span><br><span class=\"line\">    queue&lt;pair&lt;<span class=\"type\">int</span>, pair&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; &gt; &gt; q;</span><br><span class=\"line\">    q.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, &#123;C<span class=\"number\">-1</span>, D<span class=\"number\">-1</span>&#125;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">explore</span>(q, A, B, C<span class=\"number\">-1</span>, D<span class=\"number\">-1</span>, E<span class=\"number\">-1</span>, F<span class=\"number\">-1</span>, visited, count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Asked-in\"><a href=\"#Asked-in\" class=\"headerlink\" title=\"Asked in\"></a>Asked in</h2><ul>\n<li>Goldman Sachs</li>\n<li>Amazon</li>\n</ul>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/kth-manhattan-distance-neighbourhood/",
            "url": "https://samir.pages.dev/posts/kth-manhattan-distance-neighbourhood/",
            "title": "kth manhattan distance neighbourhood",
            "date_published": "2023-08-10T07:35:42.143Z",
            "content_html": "<h1 id=\"Kth-Manhattan-Distance-Neighbourhood\"><a href=\"#Kth-Manhattan-Distance-Neighbourhood\" class=\"headerlink\" title=\"Kth Manhattan Distance Neighbourhood\"></a>Kth Manhattan Distance Neighbourhood</h1><p>Given a matrix M of size nxm and an integer K, find the maximum element in the K manhattan distance neighbourhood for all elements in nxm matrix.<br>In other words, for every element M[i][j] find the maximum element M[p][q] such that abs(i-p)+abs(j-q) &lt;&#x3D; K.</p>\n<p>Note: Expected time complexity is O(N<em>N</em>K)</p>\n<p>Constraints:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= n &lt;= 300</span><br><span class=\"line\">1 &lt;= m &lt;= 300</span><br><span class=\"line\">1 &lt;= K &lt;= 300</span><br><span class=\"line\">0 &lt;= M[i][j] &lt;= 1000</span><br></pre></td></tr></table></figure>\n<p>Example:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:</span><br><span class=\"line\">M  = [[1,2,4],[4,5,8]] , K = 2</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">ans = [[5,8,8],[8,8,8]]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>If you have answer for (K-1)th manhtaan distance of all the elements, can you use those values to find the answer for Kth manhattan distance.</p>\n<p>Come on, think dynamic !</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>This problem can be solved easily using dynamic programming.</p>\n<p>DP recurrence:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[k][i][j] = ans. for kth manhattan distance for element (i,j)</span><br><span class=\"line\"></span><br><span class=\"line\">dp[k+1][i][j] = max(dp[k][i-1][j], dp[k][i+1][j], dp[k][i][j-1], dp[k][i][j+1], dp[k][i][j] )</span><br></pre></td></tr></table></figure>\n<p>Recurrence is easy to get once you draw the figure.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, <span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//Check if (i,j) are with in matrix dimensions</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">0</span> &amp;&amp; j &gt;=<span class=\"number\">0</span> &amp;&amp; i &lt; n &amp;&amp; j &lt; m) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; Solution::<span class=\"built_in\">solve</span>(<span class=\"type\">int</span> A, vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &amp;B) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// DP can be optimized to be of N*N size as we need only dp[k-1][n][n] for dp[k][n][n]</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> n = B.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t<span class=\"type\">int</span> m = B[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvector&lt;vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &gt; <span class=\"built_in\">dp</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">\tdp[<span class=\"number\">0</span>] = dp[<span class=\"number\">1</span>] = B;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> rplus[<span class=\"number\">4</span>] = &#123;<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">\t<span class=\"type\">int</span> cplus[<span class=\"number\">4</span>] = &#123;<span class=\"number\">0</span>,<span class=\"number\">-1</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>; k &lt;= A; k++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;n; i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;m; j++)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//base case</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>( k== <span class=\"number\">0</span>) dp[k][i][j] = B[i][j];</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//dp[k][i][j] = max(dp[k-1][i-1][j],dp[k-1][i+1][j],dp[k-1][i][j-1],</span></span><br><span class=\"line\">\t\t\t\t <span class=\"comment\">//                                   dp[k-1][i][j+1],dp[k-1][i][j])</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">int</span> ans = dp[(k<span class=\"number\">-1</span>)%<span class=\"number\">2</span>][i][j];</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> p = <span class=\"number\">0</span>; p &lt; <span class=\"number\">4</span>; p++)&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">int</span> temp_i = i+rplus[p];</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"type\">int</span> temp_j = j+cplus[p];</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(temp_i, temp_j, n, m)) ans = <span class=\"built_in\">max</span>(ans, dp[(k<span class=\"number\">-1</span>)%<span class=\"number\">2</span>][temp_i][temp_j]);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tdp[k%<span class=\"number\">2</span>][i][j] = ans;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dp[A%<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mine\"><a href=\"#Mine\" class=\"headerlink\" title=\"Mine\"></a>Mine</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max_of</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c, <span class=\"type\">int</span> d, <span class=\"type\">int</span> e)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(a, b), <span class=\"built_in\">max</span>(c, d)), e);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Time - O(N * K), Space - O(N)</span></span><br><span class=\"line\"><span class=\"comment\">// where N = size of 2d array, K = distance given</span></span><br><span class=\"line\">vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; Solution::<span class=\"built_in\">solve</span>(<span class=\"type\">int</span> A, vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &amp;B) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> rows = B.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> cols = B[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> max_distance = A;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; cur_distances = B;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; next_distances = cur_distances;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> dist = <span class=\"number\">0</span>; dist &lt; max_distance; dist++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> r = <span class=\"number\">0</span>; r &lt; rows; r++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> c = <span class=\"number\">0</span>; c &lt; cols; c++) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"type\">int</span> cur = cur_distances[r][c];</span><br><span class=\"line\">                <span class=\"type\">int</span> right = (c == cols - <span class=\"number\">1</span>) ? <span class=\"number\">-1</span> : cur_distances[r][c + <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"type\">int</span> up = (r == <span class=\"number\">0</span>) ? <span class=\"number\">-1</span> : cur_distances[r - <span class=\"number\">1</span>][c];</span><br><span class=\"line\">                <span class=\"type\">int</span> left = (c == <span class=\"number\">0</span>) ? <span class=\"number\">-1</span> : cur_distances[r][c - <span class=\"number\">1</span>];</span><br><span class=\"line\">                <span class=\"type\">int</span> down = (r == rows - <span class=\"number\">1</span>) ? <span class=\"number\">-1</span> : cur_distances[r + <span class=\"number\">1</span>][c];</span><br><span class=\"line\"></span><br><span class=\"line\">                next_distances[r][c] = <span class=\"built_in\">max_of</span>(cur, right, up, left, down);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        cur_distances = next_distances;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> cur_distances;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Asked-in\"><a href=\"#Asked-in\" class=\"headerlink\" title=\"Asked in\"></a>Asked in</h2><ul>\n<li>Liv.ai</li>\n</ul>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/kth-permutation-sequence/",
            "url": "https://samir.pages.dev/posts/kth-permutation-sequence/",
            "title": "kth permutation sequence",
            "date_published": "2023-08-10T07:35:42.143Z",
            "content_html": "<h1 id=\"Kth-Permutation-Sequence\"><a href=\"#Kth-Permutation-Sequence\" class=\"headerlink\" title=\"Kth Permutation Sequence\"></a>Kth Permutation Sequence</h1><p><a href=\"https://www.interviewbit.com/problems/kth-permutation-sequence\">https://www.interviewbit.com/problems/kth-permutation-sequence</a></p>\n<p>This involves a little bit of maths and recursion for simplicity.</p>\n<p>Number of permutation possible using n distinct numbers &#x3D; n!</p>\n<p>Lets first make k 0 based.<br>Let us first look at what our first number should be.<br>Number of sequences possible with 1 in first position: (n-1)!<br>Number of sequences possible with 2 in first position: (n-1)!<br>Number of sequences possible with 3 in first position: (n-1)!</p>\n<p>Hence, the number at our first position should be k &#x2F; (n-1)! + 1 th integer.</p>\n<p>Can we reduce the k and modify the set we pick our numbers from<br>( initially 1 2 3 … n ) to call the function for second position onwards ?</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* editorial */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt; <span class=\"number\">12</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// this overflows in int. So, its definitely greater than k</span></span><br><span class=\"line\">            <span class=\"comment\">// which is all we care about. So, we return INT_MAX which</span></span><br><span class=\"line\">            <span class=\"comment\">// is also greater than k.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> INT_MAX;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// Can also store these values. But this is just &lt; 12 iteration, so meh!</span></span><br><span class=\"line\">        <span class=\"type\">int</span> fact = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++)</span><br><span class=\"line\">            fact *= i;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fact;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">getPermutation</span><span class=\"params\">(<span class=\"type\">int</span> k, vector&lt;<span class=\"type\">int</span>&gt; &amp;candidateSet)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n = candidateSet.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt; <span class=\"built_in\">factorial</span>(n))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>; <span class=\"comment\">// invalid. Should never reach here.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> f = <span class=\"built_in\">factorial</span>(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"type\">int</span> pos = k / f;</span><br><span class=\"line\">        k %= f;</span><br><span class=\"line\">        string ch = <span class=\"built_in\">to_string</span>(candidateSet[pos]);</span><br><span class=\"line\">        <span class=\"comment\">// now remove the character ch from candidateSet.</span></span><br><span class=\"line\">        candidateSet.<span class=\"built_in\">erase</span>(candidateSet.<span class=\"built_in\">begin</span>() + pos);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ch + <span class=\"built_in\">getPermutation</span>(k, candidateSet);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">getPermutation</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; candidateSet;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)</span><br><span class=\"line\">            candidateSet.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">getPermutation</span>(k - <span class=\"number\">1</span>, candidateSet);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* my */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">Solution::getPermutation</span><span class=\"params\">(<span class=\"type\">int</span> A, <span class=\"type\">int</span> B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i, arr[A];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; A; i++)</span><br><span class=\"line\">        arr[i] = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; B - <span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        <span class=\"built_in\">next_permutation</span>(arr, arr + A);</span><br><span class=\"line\">    string str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; A; i++) &#123;</span><br><span class=\"line\">        str += <span class=\"built_in\">to_string</span>(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* my 2 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">Solution::getPermutation</span><span class=\"params\">(<span class=\"type\">int</span> A, <span class=\"type\">int</span> B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(A)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">iota</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; B; i++)</span><br><span class=\"line\">        <span class=\"built_in\">next_permutation</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A; i++)</span><br><span class=\"line\">        s += <span class=\"built_in\">to_string</span>(v[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* my 3 */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">Solution::getPermutation</span><span class=\"params\">(<span class=\"type\">int</span> A, <span class=\"type\">int</span> B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(A)</span></span>;</span><br><span class=\"line\">    <span class=\"built_in\">iota</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(--B) <span class=\"built_in\">next_permutation</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">accumulate</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), <span class=\"built_in\">string</span>(), [](string&amp;s, <span class=\"type\">int</span> i)&#123;<span class=\"keyword\">return</span> s+<span class=\"built_in\">to_string</span>(i);&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/kth-row-of-pascals-triangle/",
            "url": "https://samir.pages.dev/posts/kth-row-of-pascals-triangle/",
            "title": "kth row of pascals triangle",
            "date_published": "2023-08-10T07:35:42.143Z",
            "content_html": "<h1 id=\"Kth-Row-of-Pascal’s-Triangle\"><a href=\"#Kth-Row-of-Pascal’s-Triangle\" class=\"headerlink\" title=\"Kth Row of Pascal’s Triangle\"></a>Kth Row of Pascal’s Triangle</h1><p><a href=\"https://www.interviewbit.com/problems/kth-row-of-pascals-triangle/\">https://www.interviewbit.com/problems/kth-row-of-pascals-triangle/</a></p>\n<p>Given an index k, return the kth row of the Pascal’s triangle.</p>\n<p>Pascal’s triangle: To generate A[C] in row R, sum up A’[C] and A’[C-1] from previous row R - 1.</p>\n<p>Example:</p>\n<p>Input: k &#x3D; 3</p>\n<p>Return: [1,3,3,1]</p>\n<p>NOTE: k is 0 based. k &#x3D; 0, corresponds to the row [1]. </p>\n<p>Note:Could you optimize your algorithm to use only O(k) extra space?</p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>You just need to follow the formula given in statement.</p>\n<p>It’s easy to do it in time complexity of O(k^2).</p>\n<p>You can solve the problem in O(k^2) space but can you see the formula again and try to figure out which extra space you can ignore.</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>Did you account for base cases like numRows &#x3D; 0, numRows &#x3D; 1 ?</p>\n<p>Take a look at how we can approach this problem.</p>\n<p>Notice that the first and last numbers in each row ( for row &gt;&#x3D; 2 ) are 1 and 1.</p>\n<p>For all the other numbers:</p>\n<p>num at position i &#x3D; number at position i in prev row + number at position (i + 1) in previous row.</p>\n<p>Also, notice that for a row, you only need the value in the previous rows.</p>\n<p>The values in i-2 row do not matter.</p>\n<p>As such, all you need is to maintain 2 vectors and alternate between them.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Solution::getRow</span><span class=\"params\">(<span class=\"type\">int</span> A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">r</span><span class=\"params\">(A+<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    r[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=A; i++)&#123;</span><br><span class=\"line\">        a = (a*(A-i+<span class=\"number\">1</span>)/i);</span><br><span class=\"line\">        r[i] = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">vector&lt;int&gt; Solution::getRow(int A) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    A+=1;</span></span><br><span class=\"line\"><span class=\"comment\">     vector&lt;vector&lt;int&gt;&gt; r(A);</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     for (int i = 0; i &lt; A; i++) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         r[i].resize(i + 1);</span></span><br><span class=\"line\"><span class=\"comment\">         r[i][0] = r[i][i] = 1;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">         for (int j = 1; j &lt; i; j++)</span></span><br><span class=\"line\"><span class=\"comment\">             r[i][j] = r[i - 1][j - 1] + r[i - 1][j];</span></span><br><span class=\"line\"><span class=\"comment\">     &#125;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">     return r[A-1];</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/kth-smallest-element-in-the-array/",
            "url": "https://samir.pages.dev/posts/kth-smallest-element-in-the-array/",
            "title": "kth smallest element in the array",
            "date_published": "2023-08-10T07:35:42.143Z",
            "content_html": "<h1 id=\"Kth-Smallest-Element-in-the-Array\"><a href=\"#Kth-Smallest-Element-in-the-Array\" class=\"headerlink\" title=\"Kth Smallest Element in the Array\"></a>Kth Smallest Element in the Array</h1><p><a href=\"https://www.interviewbit.com/problems/kth-smallest-element-in-the-array/\">https://www.interviewbit.com/problems/kth-smallest-element-in-the-array/</a></p>\n<p>Find the kth smallest element in an unsorted array of non-negative integers.</p>\n<h3 id=\"Definition-of-kth-smallest-element\"><a href=\"#Definition-of-kth-smallest-element\" class=\"headerlink\" title=\"Definition of kth smallest element\"></a>Definition of kth smallest element</h3><p>kth smallest element is the minimum possible n such that there are at least k elements in the array &lt;&#x3D; n.</p>\n<p>In other words, if the array A was sorted, then A[k - 1] ( k is 1 based, while the arrays are 0 based ) </p>\n<h3 id=\"Note\"><a href=\"#Note\" class=\"headerlink\" title=\"Note\"></a>Note</h3><p>You are not allowed to modify the array ( The array is read only ). </p>\n<p>Try to do it using constant extra space.</p>\n<p>Example:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A : [2 1 4 3 2]</span><br><span class=\"line\">k : 3</span><br><span class=\"line\">answer : 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::kthsmallest</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k&gt;n || n==<span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> lo = A[<span class=\"number\">0</span>], hi = A[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;n; i++) &#123;</span><br><span class=\"line\">        lo = <span class=\"built_in\">min</span>(lo, A[i]);</span><br><span class=\"line\">        hi = <span class=\"built_in\">max</span>(hi, A[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lo &lt;= hi) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = lo + (hi - lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> countLess = <span class=\"number\">0</span>, countEqual = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i&lt;n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[i]&lt;mid)</span><br><span class=\"line\">                ++countLess;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A[i] == mid)</span><br><span class=\"line\">                ++countEqual;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (countLess &gt;= k)</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (countLess &lt; k &amp;&amp; countLess + countEqual &gt;= k)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (countLess &gt;= k)</span><br><span class=\"line\">            hi = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            lo = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/kth-smallest-element-in-tree/",
            "url": "https://samir.pages.dev/posts/kth-smallest-element-in-tree/",
            "title": "kth smallest element in tree",
            "date_published": "2023-08-10T07:35:42.143Z",
            "content_html": "<h1 id=\"Kth-Smallest-Element-In-Tree\"><a href=\"#Kth-Smallest-Element-In-Tree\" class=\"headerlink\" title=\"Kth Smallest Element In Tree\"></a>Kth Smallest Element In Tree</h1><p><a href=\"https://www.interviewbit.com/problems/kth-smallest-element-in-tree\">https://www.interviewbit.com/problems/kth-smallest-element-in-tree</a></p>\n<p>Given a binary search tree, write a function to find the kth smallest element in the tree.</p>\n<p>Example :</p>\n<p>Input:<br>  2<br> &#x2F; <br>1   3</p>\n<p>and k &#x3D; 2</p>\n<p>Return: 2</p>\n<p>As 2 is the second smallest element in the tree.<br> NOTE: You may assume 1 &lt;&#x3D; k &lt;&#x3D; Total number of nodes in BST </p>\n<p>Think about the property of binary search tree and how it can help you.</p>\n<p>Do you really need to visit right subtree of any node before visiting entire left subtree of it?</p>\n<p>Note the property of the binary search tree.<br>All elements smaller than root will be in the left subtree, and all elements greater than root will be in the right subtree.<br>This means we need not even explore the right subtree till we have explored everything in the left subtree.<br>Or in other words, we go to the right subtree only when the size of left subtree + 1 ( root ) &lt; k.</p>\n<p>With that in mind, we can come up with an easy recursive solution which is similar to inorder traversal :</p>\n<p>Step 1: Find the kth smallest element in left subtree decrementing k for every node visited.<br>If answer is found, return answer.<br>Step 2: Decrement k by 1. If k &#x3D;&#x3D; 0 ( this node is the kth node visited ), return node’s value<br>Step 3: Find the kth smallest element in right subtree.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// editorial</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(TreeNode *root, <span class=\"type\">int</span> &amp;k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// We do an inorder traversal here.</span></span><br><span class=\"line\">    <span class=\"type\">int</span> k1 = <span class=\"built_in\">find</span>(root-&gt;left, k);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> k1; <span class=\"comment\">// left subtree has k or more elements.</span></span><br><span class=\"line\">    k--;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> root-&gt;val; <span class=\"comment\">// root is the kth element.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(root-&gt;right, k);  <span class=\"comment\">// answer lies in the right node.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::kthsmallest</span><span class=\"params\">(TreeNode *root, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">find</span>(root, k); <span class=\"comment\">// Call another function to pass k by reference.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for binary tree</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">inorder</span><span class=\"params\">(TreeNode *root, <span class=\"type\">int</span> &amp;smallest, <span class=\"type\">int</span> k, <span class=\"type\">int</span> &amp;it)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!root)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"built_in\">inorder</span>(root-&gt;left, smallest, k, it);</span><br><span class=\"line\">    ++it;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (it == k) &#123;</span><br><span class=\"line\">        smallest = root-&gt;val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">inorder</span>(root-&gt;right, smallest, k, it);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::kthsmallest</span><span class=\"params\">(TreeNode *root, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> smallest = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> it = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">inorder</span>(root, smallest, k, it);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> smallest;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/largest-area-of-rectangle-with-permutations/",
            "url": "https://samir.pages.dev/posts/largest-area-of-rectangle-with-permutations/",
            "title": "largest area of rectangle with permutations",
            "date_published": "2023-08-10T07:35:42.143Z",
            "content_html": "<h1 id=\"Largest-Area-Of-Rectangle-With-Permutations\"><a href=\"#Largest-Area-Of-Rectangle-With-Permutations\" class=\"headerlink\" title=\"Largest Area Of Rectangle With Permutations\"></a>Largest Area Of Rectangle With Permutations</h1><p><a href=\"https://www.interviewbit.com/problems/largest-area-of-rectangle-with-permutations\">https://www.interviewbit.com/problems/largest-area-of-rectangle-with-permutations</a></p>\n<p>Given a binary grid i.e. a 2D grid only consisting of 0’s and 1’s, find the area of the largest rectangle inside the grid such that all the cells inside the chosen rectangle should have 1 in them. You are allowed to permutate the columns matrix i.e. you can arrange each of the column in any order in the final grid. Please follow the below example for more clarity.</p>\n<p>Lets say we are given a binary grid of 3 * 3 size.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0 1</span><br><span class=\"line\">0 1 0</span><br><span class=\"line\">1 0 0</span><br></pre></td></tr></table></figure>\n<p>At present we can see that max rectangle satisfying the criteria mentioned in the problem is of 1 * 1 &#x3D; 1 area i.e either of the 4 cells which contain 1 in it. Now since we are allowed to permutate the columns of the given matrix, we can take column 1 and column 3 and make them neighbours. One of the possible configuration of the grid can be:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 1 0</span><br><span class=\"line\">0 0 1</span><br><span class=\"line\">1 0 0</span><br></pre></td></tr></table></figure>\n\n<p>Now In this grid, first column is column 1, second column is column 3 and third column is column 2 from the original given grid. Now, we can see that if we calculate the max area rectangle, we get max area as 1 * 2 &#x3D; 2 which is bigger than the earlier case. Hence 2 will be the answer in this case.</p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Brute force approach would be to generate each possible permutations of the columns and then check which one generates the rectangle with the maximum area.<br>Time Complexity of this approach would be 2^m * T where m denotes the number of columns and T denotes the time required to get the maximum area for a given grid. Now as this method takes exponential time, we can’t use it as a solution to our problem because of higher constraints on the values of n and m.<br>Now you have got the basic idea. Can you improve it by thinking any polynomial time solution? </p>\n<h2 id=\"Solution-approach\"><a href=\"#Solution-approach\" class=\"headerlink\" title=\"Solution approach\"></a>Solution approach</h2><p>Let’s try to think polynomial time approach.</p>\n<p>Let’s say for each index i.e. (i, j) pair, we store a value which corresponds to the number of consecutive cells having 1 as their value which are directly above that cell starting from the given cell itself. Lets store this value in an array called count. Thus count[i][j] will denote the number of consecutive 1’s starting from the cell (i, j) and continuing upwards. </p>\n<p>For example, for a given matrix</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0 1</span><br><span class=\"line\">1 1 0</span><br><span class=\"line\">1 0 1 </span><br></pre></td></tr></table></figure>\n<p>Its count matrix will be</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 0 1</span><br><span class=\"line\">2 1 0</span><br><span class=\"line\">3 0 1 </span><br></pre></td></tr></table></figure>\n<p> At index i &#x3D; 3 &amp; j &#x3D; 1, its value is 3 because there are 3 1’s directly above it including itself. At index i &#x3D; 2 &amp; j &#x3D; 3, its value is 0 as its value itself is 0, hence no consecutive 1’s chain can be formed starting from this index.</p>\n<p>We can use simple prefix sum method to evaluate the count array. </p>\n<p>Now, once we have got this array, let’s consider a row i. Each element of this row will have some count[i][j] value where j is from 1 to m. Now as permutation is allowed, we can select any order for keeping the columns. Let’s fix that ordering for time being with lower the value of count[i][j], the earlier it is getting placed. So we will have a sorted arrangement of columns according to their count[i][j] values. We can easily see that while traversing through the above sorted arrangement, we can calculate the maximum area possible for that particular row. On repeating this algorithm for each row of the grid will give us the maximum area rectangle possible in the given grid. </p>\n<p>The above method time complexity is O(n * m * LOG(m)) where n is the number of rows and m is the number of columns. </p>\n<p>This can be further improved by using count sort in place of normal sorting algorithms like quick sort. We can use count sort as maximum number of consecutive 1’s in a column would be the size of the row i.e. n. On using count sort, We will get time complexity as O(n * m).</p>\n<p>For more reference, please see the editorial solution.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// editorial</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    n = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    m = A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> dp[n + <span class=\"number\">1</span>][m + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(dp));</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (A[j - <span class=\"number\">1</span>][i - <span class=\"number\">1</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                dp[j][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                dp[j][i] += dp[j - <span class=\"number\">1</span>][i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> arr[n + <span class=\"number\">1</span>], cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(arr, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(arr));</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">            arr[dp[i][j]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = n; j &gt;= <span class=\"number\">0</span>; --j) &#123;</span><br><span class=\"line\">            cnt += arr[j];</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, cnt * j);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///////////</span></span><br><span class=\"line\"><span class=\"comment\">// fastest</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;mat)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> R = mat.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> C = mat[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> hist[R + <span class=\"number\">1</span>][C + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 1: Fill the auxiliary array hist[][]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; C; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// First row in hist[][] is copy of first row in mat[][]</span></span><br><span class=\"line\">        hist[<span class=\"number\">0</span>][i] = mat[<span class=\"number\">0</span>][i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Fill remaining rows of hist[][]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; R; j++)</span><br><span class=\"line\">            hist[j][i] = (mat[j][i] == <span class=\"number\">0</span>) ? <span class=\"number\">0</span> : hist[j - <span class=\"number\">1</span>][i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 2: Sort rows of hist[][] in non-increasing order</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; i++) &#123;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">count</span><span class=\"params\">(R + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// counting occurrence</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; j++)</span><br><span class=\"line\">            count[hist[i][j]]++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//  Traverse the count array from right side</span></span><br><span class=\"line\">        <span class=\"type\">int</span> col_no = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = R; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count[j] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; count[j]; k++) &#123;</span><br><span class=\"line\">                    hist[i][col_no] = j;</span><br><span class=\"line\">                    col_no++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Step 3: Traverse the sorted hist[][] to find maximum area</span></span><br><span class=\"line\">    <span class=\"type\">int</span> curr_area, max_area = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; R; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; C; j++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// Since values are in decreasing order,</span></span><br><span class=\"line\">            <span class=\"comment\">// The area ending with cell (i, j) can</span></span><br><span class=\"line\">            <span class=\"comment\">// be obtained by multiplying column number</span></span><br><span class=\"line\">            <span class=\"comment\">// with value of hist[i][j]</span></span><br><span class=\"line\">            curr_area = (j + <span class=\"number\">1</span>) * hist[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr_area &gt; max_area)</span><br><span class=\"line\">                max_area = curr_area;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_area;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> hist[A.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>][A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        hist[<span class=\"number\">0</span>][i] = A[<span class=\"number\">0</span>][i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; A.<span class=\"built_in\">size</span>(); j++)</span><br><span class=\"line\">            hist[j][i] = (A[j][i] == <span class=\"number\">0</span>) ? <span class=\"number\">0</span> : hist[j - <span class=\"number\">1</span>][i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> count[A.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(count, <span class=\"number\">0</span>, (A.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span>) * <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(); j++)</span><br><span class=\"line\">            count[hist[i][j]]++;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> col_no = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = A.<span class=\"built_in\">size</span>(); j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count[j] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; count[j]; k++) &#123;</span><br><span class=\"line\">                    hist[i][col_no] = j;</span><br><span class=\"line\">                    col_no++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> curr_area, max_area = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">            curr_area = (j + <span class=\"number\">1</span>) * hist[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (curr_area &gt; max_area)</span><br><span class=\"line\">                max_area = curr_area;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_area;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/intersecting-chords-in-a-circle/",
            "url": "https://samir.pages.dev/posts/intersecting-chords-in-a-circle/",
            "title": "intersecting chords in a circle",
            "date_published": "2023-08-10T07:35:42.127Z",
            "content_html": "<h1 id=\"Intersecting-Chords-in-a-Circle\"><a href=\"#Intersecting-Chords-in-a-Circle\" class=\"headerlink\" title=\"Intersecting Chords in a Circle\"></a>Intersecting Chords in a Circle</h1><p><a href=\"https://www.interviewbit.com/problems/intersecting-chords-in-a-circle/\">https://www.interviewbit.com/problems/intersecting-chords-in-a-circle/</a></p>\n<p>Given a number N, return number of ways you can draw N chords in a circle with 2 * N points<br>such that no 2 chords intersect.</p>\n<p>Two ways are different if there exists a chord which is present in one way and not in other.</p>\n<p>For example,</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">N=2</span><br><span class=\"line\">If points are numbered 1 to 4 in clockwise direction, then different ways to draw chords are:</span><br><span class=\"line\">&#123;(1-2), (3-4)&#125; and &#123;(1-4), (2-3)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">So, we return 2.</span><br></pre></td></tr></table></figure>\n<p>Notes:</p>\n<p>1 &lt;&#x3D; N &lt;&#x3D; 1000<br>Return answer modulo 10^9 + 7.</p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Think in terms of DP.<br>Can we relate answer for N with smaller answers.</p>\n<p>If we draw a chord between any two points, can you observe current set of points getting broken into two smaller sets? Can a chord be drawn between two points where each point belong to different set?</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>Think in terms of DP.<br>Can we relate answer for N with smaller answers.</p>\n<p>If we draw a chord between any two points, can you observe current set of points getting broken<br>into two smaller sets S_1 and S_2? Can a chord be drawn between two points where each point belong<br>to different set?</p>\n<p>If we draw a chord from a point in S_1 to a point in S_2, it will surely intersect the chord we’ve just drawn.</p>\n<p>So, we can arrive at a recurrence that Ways(n) &#x3D; sum[i &#x3D; 0 to n-1] { Ways(i)*Ways(n-i-1) }.</p>\n<p>Here we iterate over i, assuming that size of one of the sets is i and size of other set automatically<br>is (n-i-1) since we’ve already used a pair of points and i pair of points in one set.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ull unsigned long long int</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mod 1000000007</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::chordCnt</span><span class=\"params\">(<span class=\"type\">int</span> A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;ull&gt; <span class=\"title\">cat</span><span class=\"params\">(A+<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    cat[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    cat[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">2</span>;i&lt;=A;i++) &#123;</span><br><span class=\"line\">        cat[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;i;j++) &#123;</span><br><span class=\"line\">            cat[i]+=(((cat[j]%mod)*(cat[i-j<span class=\"number\">-1</span>]%mod)))%mod;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)(cat[A]%mod);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mine\"><a href=\"#Mine\" class=\"headerlink\" title=\"Mine\"></a>Mine</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//The pattern gives Catalan numbers 1,1,2,5,14...</span></span><br><span class=\"line\"><span class=\"comment\">//So the solution is to find nth catalan number.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::chordCnt</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> dp[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">   <span class=\"comment\">// if(n%2!=0) return 0;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n==<span class=\"number\">0</span>||n==<span class=\"number\">1</span>)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n==<span class=\"number\">2</span>)</span><br><span class=\"line\">     <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n&gt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">1</span>]=<span class=\"number\">1</span>;</span><br><span class=\"line\">        dp[<span class=\"number\">2</span>]=<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">3</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            dp[i]=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k=<span class=\"number\">0</span>;k&lt;i;k++)&#123;</span><br><span class=\"line\">                dp[i]=(dp[i]+dp[i-k<span class=\"number\">-1</span>]*dp[k])%<span class=\"number\">1000000007</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> dp[n]%<span class=\"number\">1000000007</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/intersection-of-linked-lists/",
            "url": "https://samir.pages.dev/posts/intersection-of-linked-lists/",
            "title": "intersection of linked lists",
            "date_published": "2023-08-10T07:35:42.127Z",
            "content_html": "<h1 id=\"Intersection-of-Linked-Lists\"><a href=\"#Intersection-of-Linked-Lists\" class=\"headerlink\" title=\"Intersection of Linked Lists\"></a>Intersection of Linked Lists</h1><p><a href=\"https://www.interviewbit.com/problems/intersection-of-linked-lists/\">https://www.interviewbit.com/problems/intersection-of-linked-lists/</a></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">len</span><span class=\"params\">(ListNode *head)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        ++l;</span><br><span class=\"line\">        head = head-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">ListNode *<span class=\"title\">Solution::getIntersectionNode</span><span class=\"params\">(ListNode *A, ListNode *B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!A || !B)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> lenA = <span class=\"built_in\">len</span>(A);</span><br><span class=\"line\">    <span class=\"type\">int</span> lenB = <span class=\"built_in\">len</span>(B);</span><br><span class=\"line\">    <span class=\"type\">int</span> lenDiff = lenA - lenB;</span><br><span class=\"line\">    ListNode *pa = A;</span><br><span class=\"line\">    ListNode *pb = B;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lenDiff &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lenDiff != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            pa = pa-&gt;next;</span><br><span class=\"line\">            lenDiff--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lenDiff &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (lenDiff != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            pb = pb-&gt;next;</span><br><span class=\"line\">            lenDiff++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pa &amp;&amp; pb) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pa == pb)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> pa;</span><br><span class=\"line\">        pa = pa-&gt;next;</span><br><span class=\"line\">        pb = pb-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fastest\"><a href=\"#Fastest\" class=\"headerlink\" title=\"Fastest\"></a>Fastest</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ListNode* <span class=\"title\">Solution::getIntersectionNode</span><span class=\"params\">(ListNode* A, ListNode* B)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(A==<span class=\"literal\">NULL</span> || B==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  ListNode *s=A;</span><br><span class=\"line\">  ListNode *t=B;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(s!=t)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(s==<span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">          s=B;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        s=s-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(t==<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        t=A;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        t=t-&gt;next;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lightweight\"><a href=\"#Lightweight\" class=\"headerlink\" title=\"Lightweight\"></a>Lightweight</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">ListNode* <span class=\"title\">Solution::getIntersectionNode</span><span class=\"params\">(ListNode* A, ListNode* B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Do not write main() function.</span></span><br><span class=\"line\">    <span class=\"comment\">// Do not read input, instead use the arguments to the function.</span></span><br><span class=\"line\">    <span class=\"comment\">// Do not print the output, instead return values as specified</span></span><br><span class=\"line\">    <span class=\"comment\">// Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ListNode *ptr;</span><br><span class=\"line\">    ptr=A;</span><br><span class=\"line\">    <span class=\"type\">int</span> len1=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ptr!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ptr=ptr-&gt;next;</span><br><span class=\"line\">        len1++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ptr=B;</span><br><span class=\"line\">    <span class=\"type\">int</span> len2=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ptr!=<span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        ptr=ptr-&gt;next;</span><br><span class=\"line\">        len2++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len1&gt;len2)</span><br><span class=\"line\">    &#123; </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(len1&gt;len2)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ptr=A;</span><br><span class=\"line\">            A=A-&gt;next;</span><br><span class=\"line\">            <span class=\"built_in\">free</span>(ptr);</span><br><span class=\"line\">            len1--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(len2&gt;len1)</span><br><span class=\"line\">    &#123;   </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(len2&gt;len1)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ptr=B;</span><br><span class=\"line\">            B=B-&gt;next;</span><br><span class=\"line\">            <span class=\"built_in\">free</span>(ptr);</span><br><span class=\"line\">            len2--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ListNode *p1,*p2;</span><br><span class=\"line\">    p1=A;</span><br><span class=\"line\">    p2=B;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(p1!=p2)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        p1=p1-&gt;next;</span><br><span class=\"line\">        p2=p2-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> p1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Asked-in\"><a href=\"#Asked-in\" class=\"headerlink\" title=\"Asked in\"></a>Asked in</h2>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/intersection-of-sorted-arrays/",
            "url": "https://samir.pages.dev/posts/intersection-of-sorted-arrays/",
            "title": "intersection of sorted arrays",
            "date_published": "2023-08-10T07:35:42.127Z",
            "content_html": "<h1 id=\"Intersection-Of-Sorted-Arrays\"><a href=\"#Intersection-Of-Sorted-Arrays\" class=\"headerlink\" title=\"Intersection Of Sorted Arrays\"></a>Intersection Of Sorted Arrays</h1><p><a href=\"https://www.interviewbit.com/problems/intersection-of-sorted-arrays\">https://www.interviewbit.com/problems/intersection-of-sorted-arrays</a></p>\n<pre><code>Intersection Of Sorted Arrays\nFind the intersection of two sorted arrays.\nOR in other words,\nGiven 2 sorted arrays, find all the elements which occur in both the arrays.\n</code></pre>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Solution::intersect</span><span class=\"params\">(<span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">const</span> vector&lt;<span class=\"type\">int</span>&gt; &amp;B)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; res;</span><br><span class=\"line\">    <span class=\"type\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>,n=A.<span class=\"built_in\">size</span>(),m=B.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i&lt;n &amp;&amp; j&lt;m) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i]&gt;B[j]) &#123;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (A[i]&lt;B[j]) &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            res.<span class=\"built_in\">push_back</span>(A[i]);</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/inversions/",
            "url": "https://samir.pages.dev/posts/inversions/",
            "title": "inversions",
            "date_published": "2023-08-10T07:35:42.127Z",
            "content_html": "<h1 id=\"INVERSIONS\"><a href=\"#INVERSIONS\" class=\"headerlink\" title=\"INVERSIONS\"></a>INVERSIONS</h1><p><a href=\"https://www.interviewbit.com/problems/inversions/\">https://www.interviewbit.com/problems/inversions/</a></p>\n<p>Given an array A, count the number of inversions in the array.</p>\n<p>Formally speaking, two elements A[i] and A[j] form an inversion if A[i] &gt; A[j] and i &lt; j</p>\n<p>Example:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A : [2, 4, 1, 3, 5]</span><br><span class=\"line\">Output : 3</span><br></pre></td></tr></table></figure>\n\n<p>as the 3 inversions are (2, 1), (4, 1), (4, 3).</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// editorial</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">rec</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;v, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt;= r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> m = (l + r) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> count = <span class=\"built_in\">rec</span>(v, l, m);</span><br><span class=\"line\">    count += <span class=\"built_in\">rec</span>(v, m + <span class=\"number\">1</span>, r);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">aux</span><span class=\"params\">(v.begin() + l, v.begin() + m + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = m + <span class=\"number\">1</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k = l; k &lt;= r; k++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (j == aux.<span class=\"built_in\">size</span>() || (i &lt;= r &amp;&amp; v[i] &lt; aux[j])) &#123;</span><br><span class=\"line\">            count += (<span class=\"built_in\">int</span>(aux.<span class=\"built_in\">size</span>()) - j);</span><br><span class=\"line\">            v[k] = v[i++];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span></span><br><span class=\"line\">            v[k] = aux[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::countInversions</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">rec</span>(A, <span class=\"number\">0</span>, <span class=\"built_in\">int</span>(A.<span class=\"built_in\">size</span>()) - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lightweight</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">merge</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A, vector&lt;<span class=\"type\">int</span>&gt; &amp;temp, <span class=\"type\">int</span> left, <span class=\"type\">int</span> mid, <span class=\"type\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = left;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = mid;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = left;</span><br><span class=\"line\">    <span class=\"type\">int</span> inv_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= mid - <span class=\"number\">1</span> &amp;&amp; j &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] &lt;= A[j]) &#123;</span><br><span class=\"line\">            temp[k++] = A[i++];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp[k++] = A[j++];</span><br><span class=\"line\">            inv_count += mid - i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= mid - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        temp[k++] = A[i++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt;= right) &#123;</span><br><span class=\"line\">        temp[k++] = A[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = left; i &lt;= right; i++)</span><br><span class=\"line\">        A[i] = temp[i];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> inv_count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mergeSort</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A, vector&lt;<span class=\"type\">int</span>&gt; &amp;temp, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> inv_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &lt; right) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        inv_count = <span class=\"built_in\">mergeSort</span>(A, temp, left, mid);</span><br><span class=\"line\">        inv_count += <span class=\"built_in\">mergeSort</span>(A, temp, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">        inv_count += <span class=\"built_in\">merge</span>(A, temp, left, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> inv_count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::countInversions</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">temp</span><span class=\"params\">(A.size())</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mergeSort</span>(A, temp, <span class=\"number\">0</span>, A.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">////////////////////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Merge</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> start, <span class=\"type\">int</span> start2, <span class=\"type\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">temp</span><span class=\"params\">(end - start + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = start;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = start2;</span><br><span class=\"line\">    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= start2 - <span class=\"number\">1</span> &amp;&amp; j &lt;= end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] &lt;= A[j]) &#123;</span><br><span class=\"line\">            temp[k] = A[i];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            temp[k] = A[j];</span><br><span class=\"line\">            j++;</span><br><span class=\"line\"></span><br><span class=\"line\">            count += start2 - i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        k++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt;= start2 - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        temp[k] = A[i];</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (j &lt;= end) &#123;</span><br><span class=\"line\">        temp[k] = A[j];</span><br><span class=\"line\">        k++;</span><br><span class=\"line\">        j++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">        A[i] = temp[i - start];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countMerge</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt;= end)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> mid = (start + end) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">countMerge</span>(A, start, mid) + <span class=\"built_in\">countMerge</span>(A, mid + <span class=\"number\">1</span>, end) + <span class=\"built_in\">Merge</span>(A, start, mid + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::countInversions</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">countMerge</span>(A, <span class=\"number\">0</span>, A.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/invert-the-binary-tree/",
            "url": "https://samir.pages.dev/posts/invert-the-binary-tree/",
            "title": "invert the binary tree",
            "date_published": "2023-08-10T07:35:42.127Z",
            "content_html": "<h1 id=\"Invert-The-Binary-Tree\"><a href=\"#Invert-The-Binary-Tree\" class=\"headerlink\" title=\"Invert The Binary Tree\"></a>Invert The Binary Tree</h1><p><a href=\"https://www.interviewbit.com/problems/invert-the-binary-tree\">https://www.interviewbit.com/problems/invert-the-binary-tree</a></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">TreeNode* <span class=\"title\">Solution::invertTree</span><span class=\"params\">(TreeNode* A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!A)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    TreeNode * left = <span class=\"built_in\">invertTree</span>(A-&gt;left);</span><br><span class=\"line\">    TreeNode * right = <span class=\"built_in\">invertTree</span>(A-&gt;right);</span><br><span class=\"line\">    A-&gt;left = right;</span><br><span class=\"line\">    A-&gt;right = left;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/jump-game-array/",
            "url": "https://samir.pages.dev/posts/jump-game-array/",
            "title": "jump game array",
            "date_published": "2023-08-10T07:35:42.127Z",
            "content_html": "<h1 id=\"Jump-Game-Array\"><a href=\"#Jump-Game-Array\" class=\"headerlink\" title=\"Jump Game Array\"></a>Jump Game Array</h1><p><a href=\"https://www.interviewbit.com/problems/jump-game-array\">https://www.interviewbit.com/problems/jump-game-array</a></p>\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Greedy will work here. Think why.</p>\n<p>Incase you are not a big fan of greedy approaches, there is a DP based solution which works here as well.<br>Note that from an index i, you can choose to jump to any index in the range [i, i+A[i]]. Now if there is at least one index in the said range from where it is possible to jump to the end index, we are done. So if we start solving from end to start, and for every i, we loop j from i to i + A[i], and check if a solution is possible for j, then solution is possible for i.</p>\n<p>This approach is however not linear. Take a moment and try to think if you can reduce this to O(n) approach.</p>\n<h2 id=\"Hint-2\"><a href=\"#Hint-2\" class=\"headerlink\" title=\"Hint 2\"></a>Hint 2</h2><p>To move to linear approach, just maintain the minimum index which has solution possible till now. If its less than i+A[i]], then solution is possible for i and the minimum index gets updated to i.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// editorial</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">canJump</span><span class=\"params\">(<span class=\"type\">int</span> A[], <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> minIndexPossible = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"type\">bool</span> isPossibleFromThisIndex = <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + A[i] &gt;= minIndexPossible) &#123;</span><br><span class=\"line\">                isPossibleFromThisIndex = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                minIndexPossible = i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> isPossibleFromThisIndex;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// my solution</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::canJump</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;jumps)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (jumps.<span class=\"built_in\">size</span>() &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(jumps.size())</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> closest = jumps.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = dp.<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (jumps[i] - closest + i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            closest = i;</span><br><span class=\"line\">            dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lightweight</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::canJump</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span> || A.<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> j = A.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> i = A.<span class=\"built_in\">size</span>() - <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i + A[i] &lt; j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            j = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/justified-text/",
            "url": "https://samir.pages.dev/posts/justified-text/",
            "title": "justified text",
            "date_published": "2023-08-10T07:35:42.127Z",
            "content_html": "<h1 id=\"Justified-Text\"><a href=\"#Justified-Text\" class=\"headerlink\" title=\"Justified Text\"></a>Justified Text</h1><p><a href=\"https://www.interviewbit.com/problems/justified-text\">https://www.interviewbit.com/problems/justified-text</a></p>\n<p>This problem is more of simulation. Take care of some of corner cases like space distribution in different lines.</p>\n<p>Try to write an elegant solution.</p>\n<ol>\n<li>A line other than the last line might contain only one word. What should you do in this case?</li>\n</ol>\n<p>In this case, that line should be left-justified.</p>\n<ol start=\"2\">\n<li>Have you noticed that the last line is an exception in terms of spaces?</li>\n</ol>\n<p>This is more of a simulation problem. The more elegant your code, the less chances of it being bug prone,</p>\n<p>and more marks in the interview.</p>\n<p>Give a lot of thought to the structure of the code before you start coding.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* editorial */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;string&gt; <span class=\"title\">fullJustify</span><span class=\"params\">(vector&lt;string&gt; &amp;words, <span class=\"type\">int</span> L)</span> </span>&#123;</span><br><span class=\"line\">        vector&lt;string&gt; res;</span><br><span class=\"line\">        <span class=\"type\">int</span> k = <span class=\"number\">0</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; words.<span class=\"built_in\">size</span>(); i += k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (k = l = <span class=\"number\">0</span>; i + k &lt; words.<span class=\"built_in\">size</span>() &amp;&amp; l + words[i + k].<span class=\"built_in\">size</span>() &lt;= L - k; k++) &#123;</span><br><span class=\"line\">                l += words[i + k].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            string tmp = words[i];</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; k - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i + k &gt;= words.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">                    tmp += <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    tmp += <span class=\"built_in\">string</span>((L - l) / (k - <span class=\"number\">1</span>) + (j &lt; (L - l) % (k - <span class=\"number\">1</span>)), <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">                tmp += words[i + j + <span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            tmp += <span class=\"built_in\">string</span>(L - tmp.<span class=\"built_in\">size</span>(), <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">            res.<span class=\"built_in\">push_back</span>(tmp);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* another solution */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">Solution::fullJustify</span><span class=\"params\">(vector&lt;string&gt; &amp;A, <span class=\"type\">int</span> B)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;string&gt; result;</span><br><span class=\"line\">    <span class=\"type\">short</span> <span class=\"type\">int</span> k = <span class=\"number\">0</span>, ls = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">short</span> <span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); i += k) &#123;</span><br><span class=\"line\">        k = ls = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i + k &lt; A.<span class=\"built_in\">size</span>() &amp;&amp; ls + k + A[i + k].<span class=\"built_in\">size</span>() &lt;= B) &#123;</span><br><span class=\"line\">            ls += A[i + k].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            ++k;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        string tmp = A[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; k - <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i + k &gt;= A.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">                tmp += <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                tmp += <span class=\"built_in\">string</span>((B - ls) / (k - <span class=\"number\">1</span>) + (j &lt; (B - ls) % (k - <span class=\"number\">1</span>)), <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">            tmp += A[i + j + <span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tmp += <span class=\"built_in\">string</span>(B - tmp.<span class=\"built_in\">size</span>(), <span class=\"string\">&#x27; &#x27;</span>);</span><br><span class=\"line\">        result.<span class=\"built_in\">emplace_back</span>(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/kingdom-war/",
            "url": "https://samir.pages.dev/posts/kingdom-war/",
            "title": "kingdom war",
            "date_published": "2023-08-10T07:35:42.127Z",
            "content_html": "<h1 id=\"Kingdom-War\"><a href=\"#Kingdom-War\" class=\"headerlink\" title=\"Kingdom War\"></a>Kingdom War</h1><p><a href=\"https://www.interviewbit.com/problems/kingdom-war/\">https://www.interviewbit.com/problems/kingdom-war/</a></p>\n<p>Two kingdoms are on a war right now, kingdom X and kingdom Y. As a war specialist of kingdom X, you scouted kingdom Y area.</p>\n<p>A kingdom area is defined as a N x M grid with each cell denoting a village.<br>Each cell has a value which denotes the strength of each corresponding village.<br>The strength can also be negative, representing those warriors of your kingdom who were held hostages.</p>\n<p>There’s also another thing to be noticed.</p>\n<p>The strength of any village on row larger than one (2&lt;&#x3D;r&lt;&#x3D;N) is stronger or equal to the strength of village which is exactly above it.<br>The strength of any village on column larger than one (2&lt;&#x3D;c&lt;&#x3D;M) is stronger or equal to the strength of vilage which is exactly to its left.<br>(stronger means having higher value as defined above).<br>So your task is, find the largest sum of strength that you can erase by bombing one sub-matrix in the grid.</p>\n<h3 id=\"Input-format\"><a href=\"#Input-format\" class=\"headerlink\" title=\"Input format\"></a>Input format</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">First line consists of 2 integers N and M denoting the number of rows and columns in the grid respectively.</span><br><span class=\"line\">The next N lines, consists of M integers each denoting the strength of each cell.</span><br><span class=\"line\"></span><br><span class=\"line\">1 &lt;= N &lt;= 1500</span><br><span class=\"line\">1 &lt;= M &lt;= 1500</span><br><span class=\"line\">-200 &lt;= Cell Strength &lt;= 200</span><br><span class=\"line\">Output:</span><br><span class=\"line\"></span><br><span class=\"line\">The largest sum of strength that you can get by choosing one sub-matrix.</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:</span><br><span class=\"line\">3 3</span><br><span class=\"line\">-5 -4 -1</span><br><span class=\"line\">-3 2 4</span><br><span class=\"line\">2 5 8</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">19</span><br><span class=\"line\"></span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">Bomb the sub-matrix from (2,2) to (3,3): 2 + 4 + 5 + 8 = 19</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>A simple observation is to notice that the strength on each row is larger or equal to the row above and the strength on each column is also larger or equal to the column on its left.</p>\n<p>This means, we don’t really need to check every single sub-array.</p>\n<p>Note: Using Kadane’s 2D Max Sub-Matrix Sum O(N^3) will lead to TLE</p>\n<p>Note 2: Maximum answer might be negative.</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>Based on the observation in Hint 1, we can assume that the largest sub-array strength may start from any point, but will definitely end on bottom-right cell (N,M).</p>\n<p>Therefore, we can use dynamic programming to find the sum of sub-matrix starting from the bottom-right cell (N,M) going up and left.</p>\n<p>DP[i][j] &#x3D; DP[i+1][j] + DP[i][j+1] - DP[i+1][j+1]</p>\n<p>Find the maximum answer from DP[i][j] for each (i,j)</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    vector &lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; B = A;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.<span class=\"built_in\">size</span>()==<span class=\"number\">0</span> || A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>()==<span class=\"number\">0</span>)   <span class=\"keyword\">return</span> INT_MIN;</span><br><span class=\"line\">    <span class=\"type\">int</span> r = A.<span class=\"built_in\">size</span>(), c = A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=r<span class=\"number\">-2</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;c;j++)&#123;</span><br><span class=\"line\">            B[i][j] += B[i+<span class=\"number\">1</span>][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;r;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=c<span class=\"number\">-2</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">            B[i][j] += B[i][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> max_sum = INT_MIN;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;r;i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;c;j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(B[i][j] &gt; max_sum)   max_sum = B[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max_sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fastest\"><a href=\"#Fastest\" class=\"headerlink\" title=\"Fastest\"></a>Fastest</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> mx = INT_MIN;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> m = A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=m<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;n<span class=\"number\">-1</span>) A[i][j] += A[i+<span class=\"number\">1</span>][j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&lt;m<span class=\"number\">-1</span>) A[i][j] += A[i][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;n<span class=\"number\">-1</span> &amp;&amp; j&lt;m<span class=\"number\">-1</span>) A[i][j] -= A[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">            mx = <span class=\"built_in\">max</span>(mx, A[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mx;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lightweight\"><a href=\"#Lightweight\" class=\"headerlink\" title=\"Lightweight\"></a>Lightweight</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &amp;vec)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> row=vec.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> col=vec[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> sum=vec[row<span class=\"number\">-1</span>][col<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=row<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=col<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;row<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                vec[i][j]+=vec[i+<span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j&lt;col<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                vec[i][j]+=vec[i][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i&lt;row<span class=\"number\">-1</span> &amp;&amp; j&lt;col<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">                vec[i][j]-=vec[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            sum=<span class=\"built_in\">max</span>(vec[i][j],sum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mine\"><a href=\"#Mine\" class=\"headerlink\" title=\"Mine\"></a>Mine</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans,i,j,dn,rig,r,c,sum;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> m=A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; rsum=A;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(r=<span class=\"number\">0</span>;r&lt;n;r++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(c=m<span class=\"number\">-2</span>;c&gt;=<span class=\"number\">0</span>;c--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rsum[r][c]=A[r][c]+rsum[r][c+<span class=\"number\">1</span>];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ma=A[n<span class=\"number\">-1</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> dp[n][m];</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(dp,<span class=\"number\">0</span>,<span class=\"built_in\">sizeof</span>(dp));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(j=m<span class=\"number\">-1</span>;j&gt;=<span class=\"number\">0</span>;j--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=n<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            rig=<span class=\"number\">0</span>;</span><br><span class=\"line\">            dn=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i!=n<span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                dn=dp[i+<span class=\"number\">1</span>][j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j!=m<span class=\"number\">-1</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                rig=rsum[i][j+<span class=\"number\">1</span>];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            dp[i][j]=A[i][j]+rig+dn;</span><br><span class=\"line\">            ma=<span class=\"built_in\">max</span>(ma,dp[i][j]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(ma);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/implement-strstr/",
            "url": "https://samir.pages.dev/posts/implement-strstr/",
            "title": "implement strstr",
            "date_published": "2023-08-10T07:35:42.112Z",
            "content_html": "<h1 id=\"Implement-Strstr\"><a href=\"#Implement-Strstr\" class=\"headerlink\" title=\"Implement Strstr\"></a>Implement Strstr</h1><p><a href=\"https://www.interviewbit.com/problems/implement-strstr\">https://www.interviewbit.com/problems/implement-strstr</a></p>\n<p>Implement strStr().</p>\n<p> strstr - locate a substring ( needle ) in a string ( haystack ).<br>Try not to use standard library string functions for this question.</p>\n<p>Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.</p>\n<p>Lets say M is length of haystack and N is length of needle. Then expected complexity here is O(N*M).</p>\n<p>Let us first think about a simpler problem. How do you find out if 2 strings are equal?</p>\n<p>Implementing strstr is just plain simple simulation.</p>\n<p>Consider every index i for the answer. Find if the following 2 strings are equal:</p>\n<ol>\n<li><p>Needle string and,</p>\n</li>\n<li><p>String haystack from index i with length the same as needle’s length</p>\n</li>\n</ol>\n<p>Note that the complexity of this solution is O(M*N) where M is length of haystack and N is length of needle.</p>\n<p>If you are feeling more adventurous, try solving it in O(M).</p>\n<p><em>Hint: KMP Algorithm</em>*</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">strStr</span><span class=\"params\">(<span class=\"type\">const</span> string &amp;haystack, <span class=\"type\">const</span> string &amp;needle)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (needle[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;\\0&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; haystack[i] != <span class=\"string\">&#x27;\\0&#x27;</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">bool</span> isMatched = <span class=\"literal\">true</span>; </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; needle[j] != <span class=\"string\">&#x27;\\0&#x27;</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If remaining haystack length is less than needle&#x27;s length, </span></span><br><span class=\"line\">                <span class=\"comment\">// we know needle is not present in haystack.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (haystack[i + j] == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (haystack[i + j] != needle[j]) &#123;</span><br><span class=\"line\">                    isMatched = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isMatched) <span class=\"keyword\">return</span> i; <span class=\"comment\">// Match found</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::strStr</span><span class=\"params\">(<span class=\"type\">const</span> string A, <span class=\"type\">const</span> string B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> A.<span class=\"built_in\">find</span>(B);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/infinite-string/",
            "url": "https://samir.pages.dev/posts/infinite-string/",
            "title": "infinite string",
            "date_published": "2023-08-10T07:35:42.112Z",
            "content_html": "<h1 id=\"INFINITE-STRING\"><a href=\"#INFINITE-STRING\" class=\"headerlink\" title=\"INFINITE STRING\"></a>INFINITE STRING</h1><p><a href=\"https://www.interviewbit.com/problems/infinite-string/\">https://www.interviewbit.com/problems/infinite-string/</a></p>\n<p>Given a string of lowercase alphabets A of size N.</p>\n<p>Find and return the number of substrings in A having more than 1 distinct alphabets % 10^7.</p>\n<h3 id=\"Input-Format\"><a href=\"#Input-Format\" class=\"headerlink\" title=\"Input Format\"></a>Input Format</h3><p>The first argument given is string A.</p>\n<h3 id=\"Output-Format\"><a href=\"#Output-Format\" class=\"headerlink\" title=\"Output Format\"></a>Output Format</h3><p>Return the number of substrings in A having more than 1 distinct alphabets % 10^7.</p>\n<h3 id=\"Constraints\"><a href=\"#Constraints\" class=\"headerlink\" title=\"Constraints\"></a>Constraints</h3><p>1 &lt;&#x3D; N &lt;&#x3D; 100000</p>\n<h3 id=\"For-Example\"><a href=\"#For-Example\" class=\"headerlink\" title=\"For Example\"></a>For Example</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input 1:</span><br><span class=\"line\">    A = &quot;abcd&quot;</span><br><span class=\"line\">Output 1:</span><br><span class=\"line\">    6</span><br><span class=\"line\"></span><br><span class=\"line\">Input 2:</span><br><span class=\"line\">    A = &quot;abcde&quot;</span><br><span class=\"line\">Output 2:</span><br><span class=\"line\">    10</span><br></pre></td></tr></table></figure>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mod (ll)10000000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ll long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(string  A)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> n  = A.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">    ll ptr1 = <span class=\"number\">0</span>,ptr2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans =<span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(ptr2&lt;n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(A[ptr1]==A[ptr2])</span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         ptr2++;</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     <span class=\"keyword\">else</span></span><br><span class=\"line\">     &#123;</span><br><span class=\"line\">         ans+=n-ptr2;</span><br><span class=\"line\">         ptr1++;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans%mod;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fastest\"><a href=\"#Fastest\" class=\"headerlink\" title=\"Fastest\"></a>Fastest</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">bc</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n * (n<span class=\"number\">-1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(string A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"type\">int</span> n =  A.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> d = <span class=\"number\">0</span>, add = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] == A[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">            d += add, add++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            add = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((<span class=\"type\">long</span>)n * (n<span class=\"number\">-1</span>) / <span class=\"number\">2</span> - d) % <span class=\"number\">10000000</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/inorder-traversal-of-cartesian-tree/",
            "url": "https://samir.pages.dev/posts/inorder-traversal-of-cartesian-tree/",
            "title": "inorder traversal of cartesian tree",
            "date_published": "2023-08-10T07:35:42.112Z",
            "content_html": "<h1 id=\"Inorder-Traversal-Cartesian-Tree\"><a href=\"#Inorder-Traversal-Cartesian-Tree\" class=\"headerlink\" title=\"Inorder Traversal Cartesian Tree\"></a>Inorder Traversal Cartesian Tree</h1><p><a href=\"https://www.interviewbit.com/problems/inorder-traversal-cartesian-tree\">https://www.interviewbit.com/problems/inorder-traversal-cartesian-tree</a></p>\n<p>Given an inorder traversal of a cartesian tree, construct the tree.</p>\n<p> Cartesian tree: is a heap ordered binary tree, where the root is greater than all the elements in the subtree.<br> Note: You may assume that duplicates do not exist in the tree.<br>Example :</p>\n<p>Input: [1 2 3]</p>\n<p>Return:<br>          3<br>         &#x2F;<br>        2<br>       &#x2F;<br>      1</p>\n<p><a href=\"https://www.interviewbit.com/problems/inorder-traversal-of-cartesian-tree/\">https://www.interviewbit.com/problems/inorder-traversal-of-cartesian-tree/</a></p>\n<p>Given inorder traversal can you find the root here? What can you do once you get<br>the root element and its left and right subtree?</p>\n<p>Inorder traversal: (Left tree) root (Right tree)</p>\n<p>Note that the root is the max element in the whole array. Based on the info, can you figure out<br>the position of the root in inorder traversal ? If so, can you separate out the elements which<br>go in the left subtree and right subtree ?<br>Once you have the inorder traversal for left subtree, you can recursively solve for left subtree.<br>Same for right subtree.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for binary tree</span></span><br><span class=\"line\"><span class=\"comment\"> * struct TreeNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *left;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode *right;</span></span><br><span class=\"line\"><span class=\"comment\"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TreeNode *<span class=\"title\">build</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;inorder, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start == end) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(inorder[start]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (start &gt; end) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// find max which will be the root. </span></span><br><span class=\"line\">    <span class=\"type\">int</span> maxVal = INT_MIN, maxIndex = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (inorder[i] &gt; maxVal) &#123;</span><br><span class=\"line\">            maxVal = inorder[i];</span><br><span class=\"line\">            maxIndex = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TreeNode *root = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(maxVal);</span><br><span class=\"line\">    root-&gt;left = <span class=\"built_in\">build</span>(inorder, start, maxIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">    root-&gt;right = <span class=\"built_in\">build</span>(inorder, maxIndex + <span class=\"number\">1</span>, end);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TreeNode *<span class=\"title\">Solution::buildTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;inorder)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inorder.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">build</span>(inorder, <span class=\"number\">0</span>, inorder.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//////////////////////////</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">maxVal</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, vector&lt;<span class=\"type\">int</span>&gt;&amp; A)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxi = i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> p = i+<span class=\"number\">1</span>; p&lt;=j; ++p)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[maxi]&lt;A[p])</span><br><span class=\"line\">            maxi = p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxi;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TreeNode* <span class=\"title\">makeTree</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, vector&lt;<span class=\"type\">int</span>&gt;&amp; A)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i&gt;j)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> r = <span class=\"built_in\">maxVal</span>(i, j, A);</span><br><span class=\"line\">    TreeNode* node = <span class=\"keyword\">new</span> <span class=\"built_in\">TreeNode</span>(A[r]);</span><br><span class=\"line\">    node-&gt;left = <span class=\"built_in\">makeTree</span>(i, r<span class=\"number\">-1</span>, A);</span><br><span class=\"line\">    node-&gt;right = <span class=\"built_in\">makeTree</span>(r+<span class=\"number\">1</span>, j, A);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">TreeNode* <span class=\"title\">Solution::buildTree</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A.<span class=\"built_in\">empty</span>())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">makeTree</span>(<span class=\"number\">0</span>, A.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>, A);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/inorder-traversal/",
            "url": "https://samir.pages.dev/posts/inorder-traversal/",
            "title": "inorder traversal",
            "date_published": "2023-08-10T07:35:42.112Z",
            "content_html": "<h1 id=\"Inorder-Traversal\"><a href=\"#Inorder-Traversal\" class=\"headerlink\" title=\"Inorder Traversal\"></a>Inorder Traversal</h1><p><a href=\"https://www.interviewbit.com/problems/inorder-traversal\">https://www.interviewbit.com/problems/inorder-traversal</a></p>\n<p>You can do this problem easily but as stated in problem recursion is not allowed here.</p>\n<p>Stack can help you to avoid recursion. How?</p>\n<p>Think stack.</p>\n<p>Recursive call would look something like this :</p>\n<p>inorderprint(root-&gt;left);<br>print(root-&gt;val);<br>inorderprint(root-&gt;right);</p>\n<p>Instead of calling the functions, can you put the nodes on a stack and process them ?</p>\n<p>How would your solution work if you were allowed to change the original tree ?<br>How would it work if you were not allowed to change the tree but use additional memory ( track the number of times a node has appeared in the tree ) ?<br>How would it work if you were not even allowed the extra memory ?</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// editorial</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">inorderTraversal</span><span class=\"params\">(TreeNode *root)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; vector;</span><br><span class=\"line\">    stack&lt;TreeNode *&gt; stack;</span><br><span class=\"line\">    TreeNode *pCurrent = root;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!stack.<span class=\"built_in\">empty</span>() || pCurrent) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pCurrent) &#123;</span><br><span class=\"line\">            stack.<span class=\"built_in\">push</span>(pCurrent);</span><br><span class=\"line\">            pCurrent = pCurrent-&gt;left;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            TreeNode *pNode = stack.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            vector.<span class=\"built_in\">push_back</span>(pNode-&gt;val);</span><br><span class=\"line\">            stack.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            pCurrent = pNode-&gt;right;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> vector;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/integer-to-roman/",
            "url": "https://samir.pages.dev/posts/integer-to-roman/",
            "title": "integer to roman",
            "date_published": "2023-08-10T07:35:42.112Z",
            "content_html": "<h1 id=\"Integer-To-Roman\"><a href=\"#Integer-To-Roman\" class=\"headerlink\" title=\"Integer To Roman\"></a>Integer To Roman</h1><p><a href=\"https://www.interviewbit.com/problems/integer-to-roman\">https://www.interviewbit.com/problems/integer-to-roman</a></p>\n<p>Given an integer, convert it to a roman numeral, and return a string corresponding to its roman numeral version</p>\n<p>Input is guaranteed to be within the range from 1 to 3999.</p>\n<p>Example :</p>\n<p>Input: 5<br>Return: “V”</p>\n<p>Input: 14<br>Return: “XIV”<br> Note: This question has a lot of scope of clarification from the interviewer. Please take a moment to think of all the needed clarifications and see the expected response using “See Expected Output” For the purpose of this question, <a href=\"https://projecteuler.net/about=roman_numerals\">https://projecteuler.net/about=roman_numerals</a> has very detailed explanations. </p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* editorial */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">intToRoman</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">        string M[] = &#123; <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;MM&quot;</span>, <span class=\"string\">&quot;MMM&quot;</span> &#125;;</span><br><span class=\"line\">        string C[] = &#123; <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;CC&quot;</span>, <span class=\"string\">&quot;CCC&quot;</span>, <span class=\"string\">&quot;CD&quot;</span>, <span class=\"string\">&quot;D&quot;</span>, <span class=\"string\">&quot;DC&quot;</span>, <span class=\"string\">&quot;DCC&quot;</span>, <span class=\"string\">&quot;DCCC&quot;</span>, <span class=\"string\">&quot;CM&quot;</span> &#125;;</span><br><span class=\"line\">        string X[] = &#123; <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;X&quot;</span>, <span class=\"string\">&quot;XX&quot;</span>, <span class=\"string\">&quot;XXX&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>, <span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;LX&quot;</span>, <span class=\"string\">&quot;LXX&quot;</span>, <span class=\"string\">&quot;LXXX&quot;</span>, <span class=\"string\">&quot;XC&quot;</span> &#125;;</span><br><span class=\"line\">        string I[] = &#123; <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;I&quot;</span>, <span class=\"string\">&quot;II&quot;</span>, <span class=\"string\">&quot;III&quot;</span>, <span class=\"string\">&quot;IV&quot;</span>, <span class=\"string\">&quot;V&quot;</span>, <span class=\"string\">&quot;VI&quot;</span>, <span class=\"string\">&quot;VII&quot;</span>, <span class=\"string\">&quot;VIII&quot;</span>, <span class=\"string\">&quot;IX&quot;</span> &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> M[num / <span class=\"number\">1000</span>] + C[(num % <span class=\"number\">1000</span>) / <span class=\"number\">100</span>] + X[(num % <span class=\"number\">100</span>) / <span class=\"number\">10</span>] + I[num % <span class=\"number\">10</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* my solution */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">intToRoman</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">    string value[] = &#123; <span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;CM&quot;</span>, <span class=\"string\">&quot;D&quot;</span>, <span class=\"string\">&quot;CD&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;XC&quot;</span>, <span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>, <span class=\"string\">&quot;X&quot;</span>, <span class=\"string\">&quot;IX&quot;</span>, <span class=\"string\">&quot;V&quot;</span>, <span class=\"string\">&quot;IV&quot;</span>, <span class=\"string\">&quot;I&quot;</span> &#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> key[] = &#123; <span class=\"number\">1000</span>, <span class=\"number\">900</span>, <span class=\"number\">500</span>, <span class=\"number\">400</span>, <span class=\"number\">100</span>, <span class=\"number\">90</span>, <span class=\"number\">50</span>, <span class=\"number\">40</span>, <span class=\"number\">10</span>, <span class=\"number\">9</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\">    string ret;</span><br><span class=\"line\">    <span class=\"type\">int</span> iter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (num &gt;= key[iter]) &#123;</span><br><span class=\"line\">            ret += value[iter];</span><br><span class=\"line\">            num -= key[iter];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        iter++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/interleaving-strings/",
            "url": "https://samir.pages.dev/posts/interleaving-strings/",
            "title": "interleaving strings",
            "date_published": "2023-08-10T07:35:42.112Z",
            "content_html": "<h1 id=\"Interleaving-Strings\"><a href=\"#Interleaving-Strings\" class=\"headerlink\" title=\"Interleaving Strings\"></a>Interleaving Strings</h1><p><a href=\"https://www.interviewbit.com/problems/interleaving-strings\">https://www.interviewbit.com/problems/interleaving-strings</a></p>\n<p>Given s1, s2, s3, find whether s3 is formed by the interleaving of s1 and s2.</p>\n<p>Example,</p>\n<p>Given:</p>\n<p>s1 &#x3D; “aabcc”,</p>\n<p>s2 &#x3D; “dbbca”,</p>\n<p>When s3 &#x3D; “aadbbcbcac”, return true.</p>\n<p>When s3 &#x3D; “aadbbbaccc”, return false.</p>\n<p>Return 0 &#x2F; 1 ( 0 for false, 1 for true ) for this problem</p>\n<h1 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h1><p>Let n,m be the length of s1 and s2 respectively.<br>You need to check if using portion upto n and portion upto m if s3 can be formed or not.<br>So basically last character of s3 should be something from nth postion of s1 or mth position of s2. How can you recursively simulate this?</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>Lets again look at the bruteforce solution for this question.<br>Given the string S1, S2, S3, the first character of S3 has to match with either the first character of S1 or S2. If it matches with first character of S1, we try to see if solution is possible with remaining part of S1, all of S2, and remaining part of S3. Then we do the same thing for S2.</p>\n<p>The pseudocode might look something like this :</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isInterleave</span><span class=\"params\">(<span class=\"type\">int</span> index1, <span class=\"type\">int</span> index2, <span class=\"type\">int</span> index3)</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">// HANDLE BASE CASES HERE</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"type\">bool</span> answer = <span class=\"literal\">false</span>; </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index1 &lt; s1.<span class=\"built_in\">length</span>() &amp;&amp; s1[index1] == s3[index3]) answer |= <span class=\"built_in\">isInterleave</span>(index1 + <span class=\"number\">1</span>, index2, index3 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index2 &lt; s2.<span class=\"built_in\">length</span>() &amp;&amp; s2[index2] == s3[index3]) answer |= <span class=\"built_in\">isInterleave</span>(index1, index2 + <span class=\"number\">1</span>, index3 + <span class=\"number\">1</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> answer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Again, index1, index2, and index3 can only take S1.length(), S2.length() and S3.length() possibilities respectively. Can you think of a memoization solution using the observation ?</p>\n<p>BONUS: Can you eliminate one of the state i.e. come up with something having only two arguments.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">        string s1, s2, s3;</span><br><span class=\"line\">        <span class=\"type\">short</span> memo[<span class=\"number\">101</span>][<span class=\"number\">101</span>][<span class=\"number\">101</span>];</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isInterleave</span><span class=\"params\">(<span class=\"type\">int</span> index1, <span class=\"type\">int</span> index2, <span class=\"type\">int</span> index3)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index1 == s1.<span class=\"built_in\">length</span>() &amp;&amp; index2 == s2.<span class=\"built_in\">length</span>()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> index3 == s3.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index3 &gt;= s3.<span class=\"built_in\">length</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (memo[index1][index2][index3] != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> memo[index1][index2][index3];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">bool</span> answer = <span class=\"literal\">false</span>; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index1 &lt; s1.<span class=\"built_in\">length</span>() &amp;&amp; s1[index1] == s3[index3])</span><br><span class=\"line\">                answer |= <span class=\"built_in\">isInterleave</span>(index1 + <span class=\"number\">1</span>, index2, index3 + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (index2 &lt; s2.<span class=\"built_in\">length</span>() &amp;&amp; s2[index2] == s3[index3])</span><br><span class=\"line\">                answer |= <span class=\"built_in\">isInterleave</span>(index1, index2 + <span class=\"number\">1</span>, index3 + <span class=\"number\">1</span>);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">return</span> memo[index1][index2][index3] = answer;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isInterleave</span><span class=\"params\">(string S1, string S2, string S3)</span> </span>&#123;</span><br><span class=\"line\">            s1 = S1; </span><br><span class=\"line\">            s2 = S2;</span><br><span class=\"line\">            s3 = S3;</span><br><span class=\"line\">            <span class=\"built_in\">memset</span>(memo, <span class=\"number\">-1</span>, <span class=\"built_in\">sizeof</span>(memo));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (S3.<span class=\"built_in\">length</span>() != S1.<span class=\"built_in\">length</span>() + S2.<span class=\"built_in\">length</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">isInterleave</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fastest\"><a href=\"#Fastest\" class=\"headerlink\" title=\"Fastest\"></a>Fastest</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::isInterleave</span><span class=\"params\">(string s1, string s2, string s3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = s1.<span class=\"built_in\">size</span>(), m = s2.<span class=\"built_in\">size</span>(), k = s3.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k != n + m)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span> dp[n+<span class=\"number\">1</span>][m+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;n+<span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;m+<span class=\"number\">1</span>; j++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span> &amp;&amp; j==<span class=\"number\">0</span>)</span><br><span class=\"line\">                dp[i][j] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i == <span class=\"number\">0</span>)</span><br><span class=\"line\">                dp[i][j] = (dp[i][j<span class=\"number\">-1</span>] &amp;&amp; s2[j<span class=\"number\">-1</span>] == s3[i+j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span>)</span><br><span class=\"line\">                dp[i][j] = (dp[i<span class=\"number\">-1</span>][j] &amp;&amp; s1[i<span class=\"number\">-1</span>] == s3[i+j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                dp[i][j] = (dp[i<span class=\"number\">-1</span>][j] &amp;&amp; s1[i<span class=\"number\">-1</span>] == s3[i+j<span class=\"number\">-1</span>] ) || (dp[i][j<span class=\"number\">-1</span>] &amp;&amp; s2[j<span class=\"number\">-1</span>] == s3[i+j<span class=\"number\">-1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n][m];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mine\"><a href=\"#Mine\" class=\"headerlink\" title=\"Mine\"></a>Mine</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">iv</span><span class=\"params\">(string&amp; s1, string&amp; s2, string&amp; s3, <span class=\"type\">int</span> i1, <span class=\"type\">int</span> i2, <span class=\"type\">int</span> i3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i1 == s1.<span class=\"built_in\">size</span>() &amp;&amp; i2 == s2.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> i3 == s3.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i3 &gt;= s3.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ((i1&lt;s1.<span class=\"built_in\">size</span>() &amp;&amp; s1[i1]==s3[i3]) &amp;&amp; <span class=\"built_in\">iv</span>(s1, s2, s3, i1 + <span class=\"number\">1</span>, i2, i3 + <span class=\"number\">1</span>))</span><br><span class=\"line\">        || ((i2&lt;s2.<span class=\"built_in\">size</span>() &amp;&amp; s2[i2]==s3[i3]) &amp;&amp; <span class=\"built_in\">iv</span>(s1, s2, s3, i1, i2 + <span class=\"number\">1</span>, i3 + <span class=\"number\">1</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::isInterleave</span><span class=\"params\">(string s1, string s2, string s3)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">iv</span>(s1,s2,s3,<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Asked-in\"><a href=\"#Asked-in\" class=\"headerlink\" title=\"Asked in\"></a>Asked in</h2><ul>\n<li>Google</li>\n<li>Yahoo</li>\n</ul>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/grep/",
            "url": "https://samir.pages.dev/posts/grep/",
            "title": "grep",
            "date_published": "2023-08-10T07:35:42.096Z",
            "content_html": "<h1 id=\"Grep\"><a href=\"#Grep\" class=\"headerlink\" title=\"Grep\"></a>Grep</h1><p><a href=\"https://www.interviewbit.com/problems/grep/\">https://www.interviewbit.com/problems/grep/</a></p>\n<p>The following command prints all the lines of the file input which contains a number</p>\n<p><code>cat input | grep &#39;[0-9]*&#39;</code></p>\n<p>Example:<br>Assume that the input has the following content:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axes12</span><br><span class=\"line\">w143th</span><br><span class=\"line\">qwer</span><br></pre></td></tr></table></figure>\n<p>Then the given command prints the following ouput:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axes12</span><br><span class=\"line\">w143th</span><br></pre></td></tr></table></figure>\n\n<p>Now change the command slighly so that it prints only the number part of the lines.</p>\n<p>Example:<br>Assume that the input has the following content:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axes12</span><br><span class=\"line\">w143th</span><br><span class=\"line\">qwer</span><br></pre></td></tr></table></figure>\n<p>Then your new command should ouput the following content</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">12</span><br><span class=\"line\">143</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Read about different flags of grep.</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>How do you print only the matched pattern using grep?</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span> input | grep -o <span class=\"string\">&#x27;[0-9]*&#x27;</span></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/grid-illumination/",
            "url": "https://samir.pages.dev/posts/grid-illumination/",
            "title": "grid illumination",
            "date_published": "2023-08-10T07:35:42.096Z",
            "content_html": "<h1 id=\"Grid-Illumination\"><a href=\"#Grid-Illumination\" class=\"headerlink\" title=\"Grid Illumination\"></a>Grid Illumination</h1><p><a href=\"https://www.interviewbit.com/problems/grid-illumination/\">https://www.interviewbit.com/problems/grid-illumination/</a></p>\n<p>You are given an integer A.<br>On a A x A grid of cells, each cell (x, y) with 0 &lt;&#x3D; x &lt; A and 0 &lt;&#x3D; y &lt; A has a lamp.</p>\n<p>Initially, some number of lamps are on. B[i] tells us the location of the i-th lamp that is on. Each lamp that<br>is on illuminates every square on its x-axis, y-axis, and both diagonals (similar to a Queen in chess).</p>\n<p>For the i-th query C[i] &#x3D; (x, y), the answer to the query is 1 if the cell (x, y) is illuminated, else 0.</p>\n<p>After each query (x, y) [in the order given by queries], we turn off any lamps that are at cell (x, y) or<br>are adjacent 8-directionally (ie., share a corner or edge with cell (x, y).)</p>\n<p>Return an array of D. Each value D[i] should be equal to the answer of the i-th query C[i].</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input Format</span><br><span class=\"line\"></span><br><span class=\"line\">The first argument given is the integer A.</span><br><span class=\"line\">The second argument given is the integer matrix B.</span><br><span class=\"line\">The third argument given is the integer matrix C.</span><br><span class=\"line\">Output Format</span><br><span class=\"line\"></span><br><span class=\"line\">Return an array of integers D. Each value D[i] should be equal to the answer of the i-th query C[i]</span><br><span class=\"line\">Constraints</span><br><span class=\"line\"></span><br><span class=\"line\">1 &lt;= A &lt;= 10^9</span><br><span class=\"line\">1 &lt;= B.length , C.length &lt;= 20000</span><br><span class=\"line\">B[i].length = C[i].length = 2</span><br><span class=\"line\">For Example</span><br><span class=\"line\"></span><br><span class=\"line\">Input 1:</span><br><span class=\"line\">    A = 5</span><br><span class=\"line\">    B = [[0,4], [4,4]]</span><br><span class=\"line\">    C = [[1,1], [1,0]]</span><br><span class=\"line\">Output 1:</span><br><span class=\"line\">    D = [1, 0]</span><br><span class=\"line\"></span><br><span class=\"line\">Input 2:</span><br><span class=\"line\">    A = 6</span><br><span class=\"line\">    B = [[1,3], [2,4], [5,4]]</span><br><span class=\"line\">    C = [[2,4], [1,2]]</span><br><span class=\"line\">Output 2:</span><br><span class=\"line\">    D = [1, 0]</span><br></pre></td></tr></table></figure>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">gridIllumination</span><span class=\"params\">(<span class=\"type\">int</span> n, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;lamps, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;queries)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; retv;</span><br><span class=\"line\">    <span class=\"comment\">// like N queen question . in this part we use  four map,each map have his idea</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> N = n;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">long</span>, unordered_set&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;&gt; row, col, dia1, dia2; <span class=\"comment\">//dia1 means x-y = constant</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> lamp : lamps) &#123;</span><br><span class=\"line\">        row[lamp[<span class=\"number\">0</span>]].<span class=\"built_in\">insert</span>(N * lamp[<span class=\"number\">0</span>] + lamp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        col[lamp[<span class=\"number\">1</span>]].<span class=\"built_in\">insert</span>(N * lamp[<span class=\"number\">0</span>] + lamp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        dia1[lamp[<span class=\"number\">0</span>] - lamp[<span class=\"number\">1</span>]].<span class=\"built_in\">insert</span>(N * lamp[<span class=\"number\">0</span>] + lamp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">        dia2[lamp[<span class=\"number\">0</span>] + lamp[<span class=\"number\">1</span>]].<span class=\"built_in\">insert</span>(N * lamp[<span class=\"number\">0</span>] + lamp[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; dirs = &#123; &#123; <span class=\"number\">-1</span>, <span class=\"number\">-1</span> &#125;, &#123; <span class=\"number\">-1</span>, <span class=\"number\">0</span> &#125;, &#123; <span class=\"number\">-1</span>, <span class=\"number\">1</span> &#125;, &#123; <span class=\"number\">0</span>, <span class=\"number\">-1</span> &#125;, &#123; <span class=\"number\">0</span>, <span class=\"number\">0</span> &#125;, &#123; <span class=\"number\">0</span>, <span class=\"number\">1</span> &#125;, &#123; <span class=\"number\">1</span>, <span class=\"number\">-1</span> &#125;, &#123; <span class=\"number\">1</span>, <span class=\"number\">0</span> &#125;, &#123; <span class=\"number\">1</span>, <span class=\"number\">1</span> &#125; &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> query : queries) &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> x = query[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">long</span> y = query[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (row.<span class=\"built_in\">count</span>(x) || col.<span class=\"built_in\">count</span>(y) || dia1.<span class=\"built_in\">count</span>(x - y) || dia2.<span class=\"built_in\">count</span>(x + y)) &#123;</span><br><span class=\"line\">            retv.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            retv.<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> dir : dirs) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> dx = dir[<span class=\"number\">0</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> dy = dir[<span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> dir_x = x + dx;</span><br><span class=\"line\">            <span class=\"type\">int</span> dir_y = y + dy;</span><br><span class=\"line\">            <span class=\"comment\">//four dir</span></span><br><span class=\"line\">            <span class=\"comment\">//row</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (row.<span class=\"built_in\">count</span>(dir_x) &amp;&amp; row[dir_x].<span class=\"built_in\">count</span>(N * dir_x + dir_y)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//erase lamp</span></span><br><span class=\"line\">                row[dir_x].<span class=\"built_in\">erase</span>(N * dir_x + dir_y);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (row[dir_x].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    row.<span class=\"built_in\">erase</span>(dir_x);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (col.<span class=\"built_in\">count</span>(dir_y) &amp;&amp; col[dir_y].<span class=\"built_in\">count</span>(N * dir_x + dir_y)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//erase lamp</span></span><br><span class=\"line\">                col[dir_y].<span class=\"built_in\">erase</span>(N * dir_x + dir_y);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (col[dir_y].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    col.<span class=\"built_in\">erase</span>(dir_y);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dia1.<span class=\"built_in\">count</span>(dir_x - dir_y) &amp;&amp; dia1[dir_x - dir_y].<span class=\"built_in\">count</span>(N * dir_x + dir_y)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//erase lamp</span></span><br><span class=\"line\">                dia1[dir_x - dir_y].<span class=\"built_in\">erase</span>(N * dir_x + dir_y);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dia1[dir_x - dir_y].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dia1.<span class=\"built_in\">erase</span>(dir_x - dir_y);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (dia2.<span class=\"built_in\">count</span>(dir_x + dir_y) &amp;&amp; dia2[dir_x + dir_y].<span class=\"built_in\">count</span>(N * dir_x + dir_y)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//erase lamp</span></span><br><span class=\"line\">                dia2[dir_x + dir_y].<span class=\"built_in\">erase</span>(N * dir_x + dir_y);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (dia2[dir_x + dir_y].<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    dia2.<span class=\"built_in\">erase</span>(dir_x + dir_y);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> retv;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Solution::solve</span><span class=\"params\">(<span class=\"type\">int</span> A, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;B, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;C)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">gridIllumination</span>(A, B, C);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fastest\"><a href=\"#Fastest\" class=\"headerlink\" title=\"Fastest\"></a>Fastest</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Solution::solve</span><span class=\"params\">(<span class=\"type\">int</span> N, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;lamps, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;queries)</span> </span>&#123;</span><br><span class=\"line\">    unordered_set&lt;<span class=\"type\">long</span>&gt; s;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; lx, ly, lp, lq;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;lamp : lamps) &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> x = lamp[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> y = lamp[<span class=\"number\">1</span>];</span><br><span class=\"line\">        s.<span class=\"built_in\">insert</span>(<span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">long</span>&gt;(x) &lt;&lt; <span class=\"number\">32</span> | y);</span><br><span class=\"line\">        ++lx[x];</span><br><span class=\"line\">        ++ly[y];</span><br><span class=\"line\">        ++lp[x + y];</span><br><span class=\"line\">        ++lq[x - y];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">const</span> <span class=\"keyword\">auto</span> &amp;query : queries) &#123;</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> x = query[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">const</span> <span class=\"type\">int</span> y = query[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lx.<span class=\"built_in\">count</span>(x) || ly.<span class=\"built_in\">count</span>(y) || lp.<span class=\"built_in\">count</span>(x + y) || lq.<span class=\"built_in\">count</span>(x - y)) &#123;</span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> tx = x - <span class=\"number\">1</span>; tx &lt;= x + <span class=\"number\">1</span>; ++tx)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> ty = y - <span class=\"number\">1</span>; ty &lt;= y + <span class=\"number\">1</span>; ++ty) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (tx &lt; <span class=\"number\">0</span> || tx &gt;= N || ty &lt; <span class=\"number\">0</span> || ty &gt;= N) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    <span class=\"type\">const</span> <span class=\"type\">long</span> key = <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">long</span>&gt;(tx) &lt;&lt; <span class=\"number\">32</span> | ty;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (!s.<span class=\"built_in\">count</span>(key)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                    s.<span class=\"built_in\">erase</span>(key);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (--lx[tx] == <span class=\"number\">0</span>) lx.<span class=\"built_in\">erase</span>(tx);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (--ly[ty] == <span class=\"number\">0</span>) ly.<span class=\"built_in\">erase</span>(ty);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (--lp[tx + ty] == <span class=\"number\">0</span>) lp.<span class=\"built_in\">erase</span>(tx + ty);</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (--lq[tx - ty] == <span class=\"number\">0</span>) lq.<span class=\"built_in\">erase</span>(tx - ty);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/grid-unique-paths-ii/",
            "url": "https://samir.pages.dev/posts/grid-unique-paths-ii/",
            "title": "grid unique paths ii",
            "date_published": "2023-08-10T07:35:42.096Z",
            "content_html": "<h1 id=\"Grid-Unique-Paths-II\"><a href=\"#Grid-Unique-Paths-II\" class=\"headerlink\" title=\"Grid Unique Paths II\"></a>Grid Unique Paths II</h1><p><a href=\"https://www.interviewbit.com/problems/grid-unique-paths-ii/\">https://www.interviewbit.com/problems/grid-unique-paths-ii/</a></p>\n<p>A matrix of integers A of size N x M represents a grid consisting of 0 and 1.<br>A robot is located at the top-left corner of this grid.<br>The robot can only move either down or right at any point in time.<br>The robot is trying to reach the bottom-right corner of the grid.</p>\n<p>if A[i][j] &#x3D;&#x3D; 1 this represents a obstacle at position (i, j). You cannot walk over obstacles and<br>cannot enter a cell containing obstacle.</p>\n<p>if A[i][j] &#x3D;&#x3D; 0 this represents a empty at position (i, j). You can free freely over empty cells and enter them.</p>\n<p>Your task is to find how many unique paths are there from the top-left corner to the bottom right corner<br>if only down move or right move is allowed.<br>Since the number of paths can be very large your task is to find the number of unique paths modulo (109+7).</p>\n<h3 id=\"Input-Format\"><a href=\"#Input-Format\" class=\"headerlink\" title=\"Input Format\"></a>Input Format</h3><p>The only argument given is the matrix A.</p>\n<h3 id=\"Output-Format\"><a href=\"#Output-Format\" class=\"headerlink\" title=\"Output Format\"></a>Output Format</h3><p>Return the number of unique paths modulo (10^9+7).</p>\n<h3 id=\"Constraints\"><a href=\"#Constraints\" class=\"headerlink\" title=\"Constraints\"></a>Constraints</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 &lt;= N, M &lt;= 500</span><br><span class=\"line\">0 &lt;= A[i] &lt;= 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"For-Example\"><a href=\"#For-Example\" class=\"headerlink\" title=\"For Example\"></a>For Example</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input 1:</span><br><span class=\"line\">    A = [   [0, 0, 0]</span><br><span class=\"line\">            [0, 1, 0]</span><br><span class=\"line\">            [0, 0, 0] ]</span><br><span class=\"line\">Output 1:</span><br><span class=\"line\">    2</span><br><span class=\"line\">    Explanation 1:</span><br><span class=\"line\">        There are only two paths possible:</span><br><span class=\"line\">            1. Right -&gt; Right -&gt; Down -&gt; Down</span><br><span class=\"line\">            2. Down -&gt; Down -&gt; Right -&gt; Right</span><br><span class=\"line\"></span><br><span class=\"line\">Input 2:</span><br><span class=\"line\">    A : [   [0, 1]</span><br><span class=\"line\">            [0, 0]  ]</span><br><span class=\"line\">Output 2:</span><br><span class=\"line\">    1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hint-1\"><a href=\"#Hint-1\" class=\"headerlink\" title=\"Hint 1\"></a>Hint 1</h2><p>Number of ways to reach any cell(i,j) &#x3D; number of ways to reach any cell(i-1,j) + number of ways to reach any cell(i-1,j).<br>Find base condition and try to implement using dynamic programming.</p>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>Number of ways to reach any cell(i,j) &#x3D; number of ways to reach any cell(i-1,j) + number of ways to reach any cell(i-1,j).<br>let dp[i][j] &#x3D; number of ways to reach cell(i,j) from top left corner.</p>\n<p>Base condition</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if A[0][0] = 0</span><br><span class=\"line\">    dp[0][0] = 1</span><br><span class=\"line\">else </span><br><span class=\"line\">    dp[0][0] = 0</span><br></pre></td></tr></table></figure>\n\n<p>if the top left cell is blocked there are 0 ways to reach bottom right corner.<br>for the cells in first row, they can only be reached by cell from left in the first row.<br>Similary for the cells in first column, they can only be reached by cell from up in the first column.<br>for the rest of cells dp moves forward like this:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(A[i][j] == 0)</span><br><span class=\"line\">    dp[i][j] = dp[i-1][j]+dp[i][j-1]</span><br><span class=\"line\">else</span><br><span class=\"line\">    dp[i][j]=0</span><br></pre></td></tr></table></figure>\n\n<p>dp[N-1][M-1] contains the number of unique ways to reach bottom right corner from top left corner.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mod 1000000007</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = A.<span class=\"built_in\">size</span>(),m = A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(A[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m,<span class=\"number\">0</span>));</span><br><span class=\"line\">   dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n &amp;&amp; A[i][<span class=\"number\">0</span>] != <span class=\"number\">1</span>;i++) dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m &amp;&amp; A[<span class=\"number\">0</span>][i] != <span class=\"number\">1</span>;i++) dp[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(A[i][j] == <span class=\"number\">0</span>) dp[i][j] = (dp[i<span class=\"number\">-1</span>][j]*<span class=\"number\">1ll</span> + dp[i][j<span class=\"number\">-1</span>]*<span class=\"number\">1ll</span>)%mod;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> dp[n<span class=\"number\">-1</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Fastest\"><a href=\"#Fastest\" class=\"headerlink\" title=\"Fastest\"></a>Fastest</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> mod 1000000007</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt; &gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = A.<span class=\"built_in\">size</span>(),m = A[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   <span class=\"keyword\">if</span>(A[<span class=\"number\">0</span>][<span class=\"number\">0</span>] == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">   vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">dp</span>(n,<span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m,<span class=\"number\">0</span>));</span><br><span class=\"line\">   dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n &amp;&amp; A[i][<span class=\"number\">0</span>] != <span class=\"number\">1</span>;i++) dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;m &amp;&amp; A[<span class=\"number\">0</span>][i] != <span class=\"number\">1</span>;i++) dp[<span class=\"number\">0</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">   <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=<span class=\"number\">1</span>;j&lt;m;j++)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(A[i][j] == <span class=\"number\">0</span>) dp[i][j] = (dp[i<span class=\"number\">-1</span>][j]*<span class=\"number\">1ll</span> + dp[i][j<span class=\"number\">-1</span>]*<span class=\"number\">1ll</span>)%mod;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> dp[n<span class=\"number\">-1</span>][m<span class=\"number\">-1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lightweight-mine\"><a href=\"#Lightweight-mine\" class=\"headerlink\" title=\"Lightweight (mine)\"></a>Lightweight (mine)</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; &amp;dp)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n = dp.<span class=\"built_in\">size</span>(), m = dp[<span class=\"number\">0</span>].<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = !dp[i][<span class=\"number\">0</span>] &amp;&amp; dp[i - <span class=\"number\">1</span>][<span class=\"number\">0</span>] ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++)</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][i] = !dp[<span class=\"number\">0</span>][i] &amp;&amp; dp[<span class=\"number\">0</span>][i - <span class=\"number\">1</span>] ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; m; j++)</span><br><span class=\"line\">            dp[i][j] = (dp[i][j] ? <span class=\"number\">0</span> : dp[i - <span class=\"number\">1</span>][j] + dp[i][j - <span class=\"number\">1</span>]) % <span class=\"number\">1000000007</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n - <span class=\"number\">1</span>][m - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/grid-unique-paths/",
            "url": "https://samir.pages.dev/posts/grid-unique-paths/",
            "title": "grid unique paths",
            "date_published": "2023-08-10T07:35:42.096Z",
            "content_html": "<h1 id=\"Grid-Unique-Paths\"><a href=\"#Grid-Unique-Paths\" class=\"headerlink\" title=\"Grid Unique Paths\"></a>Grid Unique Paths</h1><p><a href=\"https://www.interviewbit.com/problems/grid-unique-paths\">https://www.interviewbit.com/problems/grid-unique-paths</a></p>\n<p>There is a mathematical approach to solving this problem.</p>\n<p>Note that you have to take m + n - 2 steps in total.<br>You have to take (m - 1) steps going down and (n-1) steps going right.</p>\n<p>Let 0 denote a down step and 1 denote a right step.<br>So we need to find out the number of strings of length m + n - 2<br>which have exactly m - 1 zeroes and n - 1 ones.</p>\n<p>Essentially we need to choose the positions of ‘1s’, and then ‘0s’ fall into the remaining positions.</p>\n<p>So, the answer becomes Choose(m+n-2, n - 1).</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* editorial */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// m+n-2 C n-1 = (m+n-2)! / (n-1)! (m-1)! (see &quot;n choose k&quot; function, n! / k!(n-k)! )</span></span><br><span class=\"line\">    <span class=\"type\">long</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = n; i &lt; (m + n - <span class=\"number\">1</span>); i++) &#123;</span><br><span class=\"line\">        ans *= i;</span><br><span class=\"line\">        ans /= (i - n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* recursive (works!) exponential O(A*B) */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// If either given row number is first or given column </span></span><br><span class=\"line\">    <span class=\"comment\">// number is first </span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (m == <span class=\"number\">1</span> || n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If diagonal movements are allowed then the last </span></span><br><span class=\"line\">    <span class=\"comment\">// addition is required.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">uniquePaths</span>(m - <span class=\"number\">1</span>, n) + <span class=\"built_in\">uniquePaths</span>(m, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// + numberOfPaths(m-1, n-1); </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* dp */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::uniquePaths</span><span class=\"params\">(<span class=\"type\">int</span> m, <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> dp[m][n];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Count of paths to reach any cell in first column is 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) </span><br><span class=\"line\">        dp[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Count of paths to reach any cell in first column is 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; n; j++) </span><br><span class=\"line\">        dp[<span class=\"number\">0</span>][j] = <span class=\"number\">1</span>; </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Calculate count of paths for other cells in</span></span><br><span class=\"line\">    <span class=\"comment\">// bottom-up manner using the recursive solution</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; m; i++) &#123; </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt; n; j++) </span><br><span class=\"line\">            <span class=\"comment\">// By uncommenting the last part the code calculatest he total </span></span><br><span class=\"line\">            <span class=\"comment\">// possible paths if the diagonal Movements are allowed </span></span><br><span class=\"line\">            dp[i][j] = dp[i - <span class=\"number\">1</span>][j] + dp[i][j - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[m - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/highest-product/",
            "url": "https://samir.pages.dev/posts/highest-product/",
            "title": "highest product",
            "date_published": "2023-08-10T07:35:42.096Z",
            "content_html": "<h1 id=\"Highest-Product\"><a href=\"#Highest-Product\" class=\"headerlink\" title=\"Highest Product\"></a>Highest Product</h1><p><a href=\"https://www.interviewbit.com/problems/highest-product\">https://www.interviewbit.com/problems/highest-product</a></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> 1 <span class=\"comment\">// O(n log n)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::maxp3</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> n = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(A.<span class=\"built_in\">begin</span>(), A.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> allPositives = A[n<span class=\"number\">-1</span>] * A[n<span class=\"number\">-2</span>] * A[n<span class=\"number\">-3</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> twoNegatives = A[n<span class=\"number\">-1</span>] * A[<span class=\"number\">0</span>] * A[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(allPositives, twoNegatives);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span> <span class=\"comment\">// O(n)</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::maxp3</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b, c, z, y;</span><br><span class=\"line\">    a = b = c = INT_MIN;</span><br><span class=\"line\">    z = y = INT_MAX;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> k : A) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &gt; a)</span><br><span class=\"line\">            c = b, b = a, a = k;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; b)</span><br><span class=\"line\">            c = b, b = k;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &gt; c)</span><br><span class=\"line\">            c = k;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k &lt; z)</span><br><span class=\"line\">            y = z, z = k;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &lt; y)</span><br><span class=\"line\">            y = k;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//cout &lt;&lt; a &lt;&lt; &quot; &quot; &lt;&lt; b &lt;&lt; &quot; &quot; &lt;&lt; c &lt;&lt; &quot; &quot; &lt;&lt; z &lt;&lt; &quot; &quot; &lt;&lt; y &lt;&lt; &quot; &quot; &lt;&lt; endl;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(a * b * c, a * z * y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/hotel-bookings-possible/",
            "url": "https://samir.pages.dev/posts/hotel-bookings-possible/",
            "title": "hotel bookings possible",
            "date_published": "2023-08-10T07:35:42.096Z",
            "content_html": "<h1 id=\"Hotel-Bookings-Possible\"><a href=\"#Hotel-Bookings-Possible\" class=\"headerlink\" title=\"Hotel Bookings Possible\"></a>Hotel Bookings Possible</h1><p><a href=\"https://www.interviewbit.com/problems/hotel-bookings-possible/\">https://www.interviewbit.com/problems/hotel-bookings-possible/</a></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">Solution::hotel</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;arrive, vector&lt;<span class=\"type\">int</span>&gt; &amp;depart, <span class=\"type\">int</span> K)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(arrive.<span class=\"built_in\">begin</span>(), arrive.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(depart.<span class=\"built_in\">begin</span>(), depart.<span class=\"built_in\">end</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>, j=<span class=\"number\">0</span>, c=<span class=\"number\">0</span>; i&lt;arrive.<span class=\"built_in\">size</span>() &amp;&amp; j&lt;depart.<span class=\"built_in\">size</span>();) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arrive[i]&lt;depart[j])</span><br><span class=\"line\">            c++, i++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            c--, j++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c&gt;K)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">// The idea is store arrival and departure times in an auxiliary array with an additional marker</span></span><br><span class=\"line\"><span class=\"comment\">// to indicate whether the time is arrival or departure. Now sort the array. Process the sorted</span></span><br><span class=\"line\"><span class=\"comment\">// array, for every arrival increment active bookings. And for every departure, decrement.</span></span><br><span class=\"line\"><span class=\"comment\">// Keep track of maximum active bookings. If the count of active bookings at any moment</span></span><br><span class=\"line\"><span class=\"comment\">// is more than k, then return false. Else return true.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">bool Solution::hotel(vector&lt;int&gt; &amp;arrive, vector&lt;int&gt; &amp;depart, int K) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    vector&lt;pair&lt;int, int&gt; &gt; ans; </span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    int n = arrive.size();</span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">    // create a common vector both arrivals </span></span><br><span class=\"line\"><span class=\"comment\">    // and departures. </span></span><br><span class=\"line\"><span class=\"comment\">    for (int i = 0; i &lt; n; i++) &#123; </span></span><br><span class=\"line\"><span class=\"comment\">        ans.push_back(make_pair(arrive[i], 1)); </span></span><br><span class=\"line\"><span class=\"comment\">        ans.push_back(make_pair(depart[i], 0)); </span></span><br><span class=\"line\"><span class=\"comment\">    &#125; </span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">    // sort the vector </span></span><br><span class=\"line\"><span class=\"comment\">    sort(ans.begin(), ans.end()); </span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">    int curr_active = 0, max_active = 0; </span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">    for (int i = 0; i &lt; ans.size(); i++) &#123; </span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">        // if new arrival, increment current </span></span><br><span class=\"line\"><span class=\"comment\">        // guests count and update max active  </span></span><br><span class=\"line\"><span class=\"comment\">        // guests so far </span></span><br><span class=\"line\"><span class=\"comment\">        if (ans[i].second == 1) &#123; </span></span><br><span class=\"line\"><span class=\"comment\">            curr_active++; </span></span><br><span class=\"line\"><span class=\"comment\">            max_active = max(max_active,  </span></span><br><span class=\"line\"><span class=\"comment\">                            curr_active); </span></span><br><span class=\"line\"><span class=\"comment\">        &#125; </span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">        // if a guest departs, decrement  </span></span><br><span class=\"line\"><span class=\"comment\">        // current guests count. </span></span><br><span class=\"line\"><span class=\"comment\">        else</span></span><br><span class=\"line\"><span class=\"comment\">            curr_active--; </span></span><br><span class=\"line\"><span class=\"comment\">    &#125; </span></span><br><span class=\"line\"><span class=\"comment\">  </span></span><br><span class=\"line\"><span class=\"comment\">    // if max active guests at any instant  </span></span><br><span class=\"line\"><span class=\"comment\">    // were more than the available rooms,  </span></span><br><span class=\"line\"><span class=\"comment\">    // return false. Else return true. </span></span><br><span class=\"line\"><span class=\"comment\">    return (K &gt;= max_active); </span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/hotel-reviews/",
            "url": "https://samir.pages.dev/posts/hotel-reviews/",
            "title": "hotel reviews",
            "date_published": "2023-08-10T07:35:42.096Z",
            "content_html": "<h1 id=\"Hotel-Reviews\"><a href=\"#Hotel-Reviews\" class=\"headerlink\" title=\"Hotel Reviews\"></a>Hotel Reviews</h1><p><a href=\"https://www.interviewbit.com/problems/hotel-reviews\">https://www.interviewbit.com/problems/hotel-reviews</a></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">TrieNode</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">bool</span> isWord;</span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">char</span>, TrieNode*&gt; children;</span><br><span class=\"line\">    <span class=\"built_in\">TrieNode</span>(<span class=\"type\">bool</span> word): <span class=\"built_in\">isWord</span>(word) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">res</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> index, score;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">tokenize</span> <span class=\"params\">(string good_string, vector&lt;string&gt; &amp;goodWords)</span> </span>&#123;</span><br><span class=\"line\">    good_string += <span class=\"string\">&quot;_&quot;</span>;</span><br><span class=\"line\">    string temp=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;good_string.<span class=\"built_in\">length</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (good_string[i]!=<span class=\"string\">&#x27;_&#x27;</span>) &#123;</span><br><span class=\"line\">            temp += good_string[i];</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (temp.<span class=\"built_in\">length</span>()) &#123;</span><br><span class=\"line\">                goodWords.<span class=\"built_in\">push_back</span>(temp);</span><br><span class=\"line\">                temp = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">sortByScore</span> <span class=\"params\">(res lhs, res rhs)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lhs.score &gt; rhs.score) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (lhs.score == rhs.score) <span class=\"keyword\">return</span> lhs.index &lt; rhs.index;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">constructTrie</span><span class=\"params\">(TrieNode* A, vector&lt;string&gt; goodWords)</span> </span>&#123;</span><br><span class=\"line\">    TrieNode* current = A;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;goodWords.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        current = A;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;goodWords[i].<span class=\"built_in\">length</span>(); j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = (current-&gt;children).<span class=\"built_in\">find</span>(goodWords[i][j]);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (it != (current-&gt;children).<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                current = it-&gt;second;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                TrieNode* B = <span class=\"keyword\">new</span> <span class=\"built_in\">TrieNode</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">                (current-&gt;children)[goodWords[i][j]] = B;</span><br><span class=\"line\">                current = B;</span><br><span class=\"line\">                </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == goodWords[i].<span class=\"built_in\">length</span>()<span class=\"number\">-1</span>) current-&gt;isWord = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sortReviews</span><span class=\"params\">(vector&lt;string&gt; reviews, TrieNode* root)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> score;</span><br><span class=\"line\">    vector&lt;res&gt; result;</span><br><span class=\"line\">    TrieNode* current;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;string&gt; temp;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;reviews.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        res t;</span><br><span class=\"line\">        temp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        score = <span class=\"number\">0</span>;</span><br><span class=\"line\">        reviews[i] +=  <span class=\"string\">&quot;_&quot;</span>;</span><br><span class=\"line\">        <span class=\"built_in\">tokenize</span>(reviews[i], temp);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j&lt;temp.<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">            current = root;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> k=<span class=\"number\">0</span>; k&lt;temp[j].<span class=\"built_in\">length</span>(); k++) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">auto</span> it = (current-&gt;children).<span class=\"built_in\">find</span>(temp[j][k]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (it == (current-&gt;children).<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                </span><br><span class=\"line\">                current = it-&gt;second;</span><br><span class=\"line\">                </span><br><span class=\"line\">                <span class=\"keyword\">if</span> (k == temp[j].<span class=\"built_in\">length</span>()<span class=\"number\">-1</span> &amp;&amp; current-&gt;isWord) score++; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t.index = i;</span><br><span class=\"line\">        t.score = score;</span><br><span class=\"line\">        result.<span class=\"built_in\">push_back</span>(t);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(result.<span class=\"built_in\">begin</span>(), result.<span class=\"built_in\">end</span>(), sortByScore);</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; ret;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;result.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        ret.<span class=\"built_in\">push_back</span>(result[i].index);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Solution::solve</span><span class=\"params\">(string A, vector&lt;string&gt; &amp;B)</span> </span>&#123;</span><br><span class=\"line\">    TrieNode* root = <span class=\"keyword\">new</span> <span class=\"built_in\">TrieNode</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    vector&lt;string&gt; good_words;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">tokenize</span>(A, good_words);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">constructTrie</span>(root, good_words);</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; result = <span class=\"built_in\">sortReviews</span>(B, root);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/identical-binary-trees/",
            "url": "https://samir.pages.dev/posts/identical-binary-trees/",
            "title": "identical binary trees",
            "date_published": "2023-08-10T07:35:42.096Z",
            "content_html": "<h1 id=\"Identical-Binary-Tree\"><a href=\"#Identical-Binary-Tree\" class=\"headerlink\" title=\"Identical Binary Tree\"></a>Identical Binary Tree</h1><p><a href=\"https://www.interviewbit.com/problems/identical-binary-tree\">https://www.interviewbit.com/problems/identical-binary-tree</a></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::isSameTree</span><span class=\"params\">(TreeNode* A, TreeNode* B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!A &amp;&amp; !B)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!A || !B)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A-&gt;val != B-&gt;val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">isSameTree</span>(A-&gt;left, B-&gt;left) &amp;&amp; <span class=\"built_in\">isSameTree</span>(A-&gt;right, B-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/implement-power-function/",
            "url": "https://samir.pages.dev/posts/implement-power-function/",
            "title": "implement power function",
            "date_published": "2023-08-10T07:35:42.096Z",
            "content_html": "<h1 id=\"Implement-Power-Function\"><a href=\"#Implement-Power-Function\" class=\"headerlink\" title=\"Implement Power Function\"></a>Implement Power Function</h1><p><a href=\"https://www.interviewbit.com/problems/implement-power-function\">https://www.interviewbit.com/problems/implement-power-function</a></p>\n<p>Implement pow(x, n) % d.<br>In other words, given x, n and d,<br>find (xn % d)<br>Note that remainders on division cannot be negative.<br>In other words, make sure the answer you return is non negative.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* editorial */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">pow</span> <span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> n, <span class=\"type\">int</span> p)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> % p;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans = <span class=\"number\">1</span>, base = x;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            ans = (ans * base) % p;</span><br><span class=\"line\">            n--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            base = (base * base) % p;</span><br><span class=\"line\">            n /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ans &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        ans = (ans + p) % p;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::pow</span> <span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> n, <span class=\"type\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> (x % d) + d;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> &amp;&amp; x == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> % d;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> temp = <span class=\"built_in\">pow</span> (x, n / <span class=\"number\">2</span>, d) % d;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> mul = (temp * temp) % d;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mul &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        mul = mul + d;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mul;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (mul * x) % d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::pow</span> <span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> n, <span class=\"type\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span> % d;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> ans = <span class=\"number\">1</span>, base = x;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            ans = (ans * base) % d;</span><br><span class=\"line\">            n--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            base = (base * base) % d;</span><br><span class=\"line\">            n /= <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ans &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        ans = (ans + d) % d;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">Solution::pow</span> <span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> n, <span class=\"type\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    map &lt; pair &lt; <span class=\"type\">int</span>, <span class=\"type\">int</span> &gt;, <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> &gt;solutionStore;</span><br><span class=\"line\"></span><br><span class=\"line\">    pair &lt; <span class=\"type\">int</span>, <span class=\"type\">int</span> &gt;curr = <span class=\"built_in\">make_pair</span> (x, n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (solutionStore.<span class=\"built_in\">find</span> (curr) != solutionStore.<span class=\"built_in\">end</span> ()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> solutionStore.<span class=\"built_in\">find</span> (curr)-&gt;second;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span> (x % d, (x % d) + d);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    ans *= <span class=\"built_in\">pow</span> (x, n / <span class=\"number\">2</span>, d);</span><br><span class=\"line\">    ans = ans % d;</span><br><span class=\"line\"></span><br><span class=\"line\">    ans *= <span class=\"built_in\">pow</span> (x, n - n / <span class=\"number\">2</span>, d);</span><br><span class=\"line\">    ans = ans % d;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ans &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        ans = ans + d;</span><br><span class=\"line\"></span><br><span class=\"line\">    solutionStore[curr] = ans;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/fraction/",
            "url": "https://samir.pages.dev/posts/fraction/",
            "title": "fraction",
            "date_published": "2023-08-10T07:35:42.080Z",
            "content_html": "<h1 id=\"Fraction\"><a href=\"#Fraction\" class=\"headerlink\" title=\"Fraction\"></a>Fraction</h1><p><a href=\"https://www.interviewbit.com/problems/fraction\">https://www.interviewbit.com/problems/fraction</a></p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">string <span class=\"title\">Solution::fractionToDecimal</span><span class=\"params\">(<span class=\"type\">int</span> numerator, <span class=\"type\">int</span> denominator)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int64_t</span> n = numerator, d = denominator;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    string res;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">0</span> ^ d &lt; <span class=\"number\">0</span>) res += <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">    n = <span class=\"built_in\">abs</span>(n), d = <span class=\"built_in\">abs</span>(d);</span><br><span class=\"line\">    res += <span class=\"built_in\">to_string</span>((n / d));</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n % d == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    res += <span class=\"string\">&#x27;.&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt; map;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int64_t</span> r = n % d; r; r %= d) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map.<span class=\"built_in\">find</span>(r) != map.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">            res.<span class=\"built_in\">insert</span>(map[r], <span class=\"number\">1</span>, <span class=\"string\">&#x27;(&#x27;</span>);</span><br><span class=\"line\">            res += <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        map[r] = res.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        r *= <span class=\"number\">10</span>;</span><br><span class=\"line\">        res.<span class=\"built_in\">push_back</span>((<span class=\"type\">char</span>)(<span class=\"string\">&#x27;0&#x27;</span> + (r / d)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/generate-all-parentheses-ii/",
            "url": "https://samir.pages.dev/posts/generate-all-parentheses-ii/",
            "title": "generate all parentheses ii",
            "date_published": "2023-08-10T07:35:42.080Z",
            "content_html": "<h1 id=\"Generate-All-Parentheses-II\"><a href=\"#Generate-All-Parentheses-II\" class=\"headerlink\" title=\"Generate All Parentheses II\"></a>Generate All Parentheses II</h1><p><a href=\"https://www.interviewbit.com/problems/generate-all-parentheses-ii\">https://www.interviewbit.com/problems/generate-all-parentheses-ii</a></p>\n<p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses of length 2*n.</p>\n<p>For example, given n &#x3D; 3, a solution set is:</p>\n<p>“((()))”, “(()())”, “(())()”, “()(())”, “()()()”<br>Make sure the returned list of strings are sorted.</p>\n<p>You can try thinking of recursion such that at every step our solution is valid.</p>\n<p>How to define this valid thing now?</p>\n<p>Again, think recursion.<br>At every step, you have 2 options: </p>\n<ol>\n<li>Add ‘(‘ to the string. </li>\n<li>Add ‘)’ to the string.<br>However, you need to make sure, that the number of closing brackets do not exceed<br>number of opening brackets at any point of time.<br>Also, make sure that the number of opening brackets never exceeds n.</li>\n</ol>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// lightweight</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">brackets</span><span class=\"params\">(vector&lt;string&gt; &amp;st, <span class=\"type\">int</span> n, <span class=\"type\">int</span> open, <span class=\"type\">int</span> closed, string s)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (closed &gt; open) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (open + closed == n &amp;&amp; open == closed)</span><br><span class=\"line\">        st.<span class=\"built_in\">push_back</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (open + closed &lt; n) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">brackets</span>(st, n, open + <span class=\"number\">1</span>, closed, s + <span class=\"string\">&#x27;(&#x27;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">brackets</span>(st, n, open, closed + <span class=\"number\">1</span>, s + <span class=\"string\">&#x27;)&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">Solution::generateParenthesis</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;string&gt; res;</span><br><span class=\"line\">    <span class=\"built_in\">brackets</span>(res, <span class=\"number\">2</span> * n, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">////////////////////////</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">backtracking</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> open, <span class=\"type\">int</span> close, string str, vector&lt;string&gt; &amp;res)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (close == n) &#123;</span><br><span class=\"line\">        res.<span class=\"built_in\">emplace_back</span>(str);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (open &lt; n) &#123;</span><br><span class=\"line\">            str += <span class=\"string\">&#x27;(&#x27;</span>;</span><br><span class=\"line\">            <span class=\"built_in\">backtracking</span>(n, open + <span class=\"number\">1</span>, close, str, res);</span><br><span class=\"line\">            str.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (open &gt; close) &#123;</span><br><span class=\"line\">            str += <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">            <span class=\"built_in\">backtracking</span>(n, open, close + <span class=\"number\">1</span>, str, res);</span><br><span class=\"line\">            str.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;string&gt; <span class=\"title\">Solution::generateParenthesis</span><span class=\"params\">(<span class=\"type\">int</span> A)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;string&gt; res;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (A &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"built_in\">backtracking</span>(A, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"string\">&quot;&quot;</span>, res);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "interviewbit"
            ]
        },
        {
            "id": "https://samir.pages.dev/posts/good-subarrays/",
            "url": "https://samir.pages.dev/posts/good-subarrays/",
            "title": "good subarrays",
            "date_published": "2023-08-10T07:35:42.080Z",
            "content_html": "<h1 id=\"Good-Subarrays\"><a href=\"#Good-Subarrays\" class=\"headerlink\" title=\"Good Subarrays\"></a>Good Subarrays</h1><p><a href=\"https://www.interviewbit.com/problems/good-subarrays/\">https://www.interviewbit.com/problems/good-subarrays/</a></p>\n<p>You are given an array A of size n. Each element of the array is a positive integer.</p>\n<p>A subarray defined by <code>(i, j)</code> is called a good-subarray if the number of distint elements in<br><code>(A[i], A[i+1], ...., A[j])</code> is not greater than B.</p>\n<p>You are asked to tell the number of good-subarrays of each length 1 to n for the given array.</p>\n<h3 id=\"Input-Format\"><a href=\"#Input-Format\" class=\"headerlink\" title=\"Input Format\"></a>Input Format</h3><ul>\n<li>The first argument is the array A</li>\n<li>The second argument denotes the value B</li>\n</ul>\n<h3 id=\"Output-Format\"><a href=\"#Output-Format\" class=\"headerlink\" title=\"Output Format\"></a>Output Format</h3><ul>\n<li>Return an array of integers where i’th integer denotes the number of good-subarrays of length (i+1)</li>\n</ul>\n<h3 id=\"Constraints\"><a href=\"#Constraints\" class=\"headerlink\" title=\"Constraints\"></a>Constraints</h3><ul>\n<li>1 &lt;&#x3D; n, A[i] &lt;&#x3D; 100000</li>\n<li>1 &lt;&#x3D; B &lt;&#x3D; n</li>\n</ul>\n<h3 id=\"For-Example\"><a href=\"#For-Example\" class=\"headerlink\" title=\"For Example\"></a>For Example</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input 1:</span><br><span class=\"line\">    A = [1, 2, 2, 3, 1]</span><br><span class=\"line\">    B = 2</span><br><span class=\"line\">    </span><br><span class=\"line\">Output 1:</span><br><span class=\"line\">    5 4 2 0 0</span><br><span class=\"line\"></span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">    For length 1: [1], [2], [2], [3], [1] =&gt; Count = 5</span><br><span class=\"line\">    For length 2: [1, 2], [2, 2], [2, 3], [3, 1] =&gt; Count = 4</span><br><span class=\"line\">    For length 3: [1, 2, 2], [2, 2, 3] =&gt; Count = 2</span><br><span class=\"line\">    For length 4: =&gt; Count = 0</span><br><span class=\"line\">    For length 5: =&gt; Count = 0</span><br></pre></td></tr></table></figure>\n<h2 id=\"Solution-Approach\"><a href=\"#Solution-Approach\" class=\"headerlink\" title=\"Solution Approach\"></a>Solution Approach</h2><p>Two pointer technique can be used to find good subarray of maximum size starting from each index.</p>\n<p>It can easily be observed that each subarray of a good subarray will also have at most B distinct elements.</p>\n<p>Hence, the count for greater length good subarrays can be added to the count of smaller length good subarrays.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><h3 id=\"Editorial\"><a href=\"#Editorial\" class=\"headerlink\" title=\"Editorial\"></a>Editorial</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> f[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> B)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    vector&lt; <span class=\"type\">int</span> &gt; res;</span><br><span class=\"line\">    <span class=\"type\">int</span> j = <span class=\"number\">0</span>, cnt = <span class=\"number\">0</span>, n = A.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(<span class=\"number\">1</span> &lt;= n);</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(n &lt;= <span class=\"number\">100000</span>);</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(<span class=\"number\">1</span> &lt;= B);</span><br><span class=\"line\">    <span class=\"built_in\">assert</span>(B &lt;= n);</span><br><span class=\"line\">    </span><br><span class=\"line\">    res.<span class=\"built_in\">resize</span>(n);</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(f, <span class=\"number\">0</span>, <span class=\"built_in\">sizeof</span>(f));</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(A[i] &gt;= <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">assert</span>(A[i] &lt;= <span class=\"number\">100000</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>( j &lt; n &amp;&amp; cnt + !f[A[j]] &lt;= B ) &#123;</span><br><span class=\"line\">            cnt += !f[A[j]];</span><br><span class=\"line\">            f[A[j]]++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        res[j-i<span class=\"number\">-1</span>]++;</span><br><span class=\"line\">        </span><br><span class=\"line\">        f[A[i]]--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( f[A[i]] == <span class=\"number\">0</span> ) cnt--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>( <span class=\"type\">int</span> i = n<span class=\"number\">-2</span>; i &gt;= <span class=\"number\">0</span>; i-- )</span><br><span class=\"line\">        res[i] += res[i+<span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Fastest\"><a href=\"#Fastest\" class=\"headerlink\" title=\"Fastest\"></a>Fastest</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// same as editorial</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Lightweight\"><a href=\"#Lightweight\" class=\"headerlink\" title=\"Lightweight\"></a>Lightweight</h3><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">Solution::solve</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;A, <span class=\"type\">int</span> B)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">f</span><span class=\"params\">(<span class=\"number\">100000</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;<span class=\"type\">int</span> j=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">res</span><span class=\"params\">(A.size(),<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;A.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(j&lt;A.<span class=\"built_in\">size</span>() &amp;&amp; cnt+!f[A[j]]&lt;=B)&#123;</span><br><span class=\"line\">            cnt += !f[A[j]];</span><br><span class=\"line\">            f[A[j]]++;</span><br><span class=\"line\">            j++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res[j-i<span class=\"number\">-1</span>]++;</span><br><span class=\"line\">        f[A[i]]--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(f[A[i]]==<span class=\"number\">0</span>) cnt--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=A.<span class=\"built_in\">size</span>()<span class=\"number\">-2</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">        res[i] += res[i+<span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n",
            "tags": [
                "interviewbit"
            ]
        }
    ]
}