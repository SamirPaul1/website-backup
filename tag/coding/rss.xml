<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Samir Paul • Posts by &#34;coding&#34; tag</title>
        <link>https://samirpaul.in</link>
        <description>Software Engineer</description>
        <language>en</language>
        <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
        <lastBuildDate>Sun, 06 Aug 2023 02:22:53 +0530</lastBuildDate>
        <category>LeetCode</category>
        <category>geeksforgeeks</category>
        <category>blog</category>
        <category>coding</category>
        <category>computer-science</category>
        <category>Binary Search</category>
        <category>caching</category>
        <category>system-design</category>
        <category>design-interview</category>
        <category>preparation</category>
        <category>study-plan</category>
        <category>computer-networks</category>
        <category>computer-networks-notes</category>
        <category>projects</category>
        <category>tutorials</category>
        <category>list-of-project-based-tutorials</category>
        <category>curated-list</category>
        <category>DSAlgo</category>
        <category>dsa-in-python</category>
        <category>data-structures-and-algorithms</category>
        <category>dp</category>
        <category>Dynamic Programming</category>
        <category>Patterns</category>
        <category>embed-musicapp</category>
        <category>music</category>
        <category>embeded</category>
        <category>music-player</category>
        <category>programmable-search</category>
        <category>Graph</category>
        <category>distributed-systems</category>
        <category>two pointers problems</category>
        <category>Greedy</category>
        <category>python</category>
        <category>python-frameworks</category>
        <category>python-libraries</category>
        <category>technical-interview</category>
        <category>interview-questions</category>
        <category>python3</category>
        <category>file-compressor</category>
        <category>flask-application</category>
        <category>python-server</category>
        <category>pdfnet</category>
        <category>pdf-compression</category>
        <category>online-pdf-compressor</category>
        <category>pdfnetpython</category>
        <category>open-external-links</category>
        <category>javascript</category>
        <category>Operating System</category>
        <category>Placements</category>
        <category>OS</category>
        <category>project</category>
        <category>pygame</category>
        <category>python-game</category>
        <category>pyshooter</category>
        <category>shooter-game</category>
        <category>Python Cheat Sheet</category>
        <category>sql</category>
        <category>nosql</category>
        <category>sharding</category>
        <category>data-partitioning</category>
        <category>certificates</category>
        <category>udemy</category>
        <category>coursera</category>
        <category>datacamp</category>
        <category>sql-joins</category>
        <category>web-development</category>
        <category>lossless-data-compression</category>
        <category>online-file-compressor</category>
        <category>txt-compressor</category>
        <category>algorithm</category>
        <category>databases</category>
        <category>short-url</category>
        <category>url-shortner</category>
        <category>networking</category>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/operating-system-notes-for-placement/</guid>
            <title>Operating System Notes For Placement</title>
            <link>https://samirpaul.in/posts/operating-system-notes-for-placement/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>Operating System</category>
            <category>Placements</category>
            <category>OS</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Operating-Systems-Overview&#34;&gt;&lt;a href=&#34;#Operating-Systems-Overview&#34; class=&#34;headerlink&#34; title=&#34;Operating Systems Overview&#34;&gt;&lt;/a&gt;Operating Systems Overview&lt;/h1&gt;&lt;hr&gt;

&lt;p&gt;&lt;strong&gt;Operating Systems&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Direct operational resources [CPU, memory, devices]&lt;/li&gt;
&lt;li&gt;Enforces working policies [Resource usage, access]&lt;/li&gt;
&lt;li&gt;Mitigates difficulty of complex tasks [abstract hardware details (using system calls)]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;What-is-an-Operating-System&#34;&gt;&lt;a href=&#34;#What-is-an-Operating-System&#34; class=&#34;headerlink&#34; title=&#34;What is an Operating System?&#34;&gt;&lt;/a&gt;What is an Operating System?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Intermediate between Hardware and Software applications&lt;/li&gt;
&lt;li&gt;Hides hardware complexity (Read&amp;#x2F;write file storage, send&amp;#x2F;receive socket network)&lt;/li&gt;
&lt;li&gt;Handles resource management (CPU scheduling, Memory management)&lt;/li&gt;
&lt;li&gt;Provide isolation and protection (allocate different parts of memory to different applications so that applications don’t overwrite other memory locations)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Operating-System-definition&#34;&gt;&lt;a href=&#34;#Operating-System-definition&#34; class=&#34;headerlink&#34; title=&#34;Operating System definition:&#34;&gt;&lt;/a&gt;Operating System definition:&lt;/h2&gt;&lt;p&gt;An &lt;strong&gt;Operating System&lt;/strong&gt; is a layer of systems software that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;directly has privileged access to the underlying hardware;&lt;/li&gt;
&lt;li&gt;hides the hardware complexity;&lt;/li&gt;
&lt;li&gt;manages hardware on behalf of one or more application according to some predifined policies.&lt;/li&gt;
&lt;li&gt;In addition, it ensures that applications are isolated and protected from one another.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Operating-System-examples&#34;&gt;&lt;a href=&#34;#Operating-System-examples&#34; class=&#34;headerlink&#34; title=&#34;Operating System examples:&#34;&gt;&lt;/a&gt;Operating System examples:&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Desktop&lt;/th&gt;
&lt;th&gt;Embedded devices&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Microsoft Windows&lt;/td&gt;
&lt;td&gt;Android OS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;MAC OS X (BSD)&lt;/td&gt;
&lt;td&gt;iOS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LINUX&lt;/td&gt;
&lt;td&gt;Symbian&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;td&gt;…&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;OS-Elements&#34;&gt;&lt;a href=&#34;#OS-Elements&#34; class=&#34;headerlink&#34; title=&#34;OS Elements&#34;&gt;&lt;/a&gt;OS Elements&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Abstractions&lt;/strong&gt; (corresponds to applications that OS executes)&lt;ul&gt;
&lt;li&gt;process, thread, file, socket,  memory page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mechanisms&lt;/strong&gt;  (on top of Abstractions)&lt;ul&gt;
&lt;li&gt;create, schedule, open, write, allocate&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Policies&lt;/strong&gt; (how mechanisms are used to manage underlying hardware)    &lt;ul&gt;
&lt;li&gt;Least Recently Used (LRU) , Earliest Deadline First (EDF), etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Example&#34;&gt;&lt;a href=&#34;#Example&#34; class=&#34;headerlink&#34; title=&#34;Example :&#34;&gt;&lt;/a&gt;Example :&lt;/h4&gt;&lt;p&gt;&lt;em&gt;Memory Management:&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Abstractions&lt;/strong&gt;: Memory page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mechanisms&lt;/strong&gt;: Allocate, map to a process&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Policies&lt;/strong&gt;: LRU&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;OS-Design-Principles&#34;&gt;&lt;a href=&#34;#OS-Design-Principles&#34; class=&#34;headerlink&#34; title=&#34;OS Design Principles&#34;&gt;&lt;/a&gt;OS Design Principles&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Seperation of mechanism and policy&lt;ul&gt;
&lt;li&gt;implement flexible mechanisms to support many policies &lt;/li&gt;
&lt;li&gt;e.g. LRU, LFU, random&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optimize for common case &lt;ul&gt;
&lt;li&gt;Where will the OS be used?&lt;/li&gt;
&lt;li&gt;What will the user want to execute on that machine?&lt;/li&gt;
&lt;li&gt;What are the workload requirements?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;User-Kernel-Protection-Boundary&#34;&gt;&lt;a href=&#34;#User-Kernel-Protection-Boundary&#34; class=&#34;headerlink&#34; title=&#34;User&amp;#x2F; Kernel Protection Boundary&#34;&gt;&lt;/a&gt;User&amp;#x2F; Kernel Protection Boundary&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;user-level &amp;#x3D;&amp;gt; applications [underprivileged mode]&lt;/li&gt;
&lt;li&gt;kernel-level &amp;#x3D;&amp;gt; OS Kernel [privileged access, hardware access]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/userkernelprotectionboundary.png&#34; alt=&#34;userkernelprotectionboundary&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User-Kernel switch is supported by hardware.&lt;ul&gt;
&lt;li&gt;using trap instructions&lt;/li&gt;
&lt;li&gt;system calls like:&lt;ul&gt;
&lt;li&gt;open (file)&lt;/li&gt;
&lt;li&gt;send (socket)&lt;/li&gt;
&lt;li&gt;malloc (memory)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;signals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;System-call-Flowcart&#34;&gt;&lt;a href=&#34;#System-call-Flowcart&#34; class=&#34;headerlink&#34; title=&#34;System call Flowcart&#34;&gt;&lt;/a&gt;System call Flowcart&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/systemcallflowchart.png&#34; alt=&#34;systemcallflowchart&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To make a system call, an application must:&lt;ul&gt;
&lt;li&gt;write arguments&lt;/li&gt;
&lt;li&gt;save relevant data ast well defined location&lt;/li&gt;
&lt;li&gt;make system calls using system call number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;In synchronous mode : wait until system call completes.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Basic-OS-services&#34;&gt;&lt;a href=&#34;#Basic-OS-services&#34; class=&#34;headerlink&#34; title=&#34;Basic OS services&#34;&gt;&lt;/a&gt;Basic OS services&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;process management&lt;/li&gt;
&lt;li&gt;file management&lt;/li&gt;
&lt;li&gt;device management&lt;/li&gt;
&lt;li&gt;memory management&lt;/li&gt;
&lt;li&gt;storage management&lt;/li&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Linux-System-Calls&#34;&gt;&lt;a href=&#34;#Linux-System-Calls&#34; class=&#34;headerlink&#34; title=&#34;Linux System Calls&#34;&gt;&lt;/a&gt;Linux System Calls&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Task&lt;/th&gt;
&lt;th&gt;Commands&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Process Control&lt;/td&gt;
&lt;td&gt;fork (); exit(); wait();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File Manipulation&lt;/td&gt;
&lt;td&gt;open(); read(); write();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Device Manipulation&lt;/td&gt;
&lt;td&gt;ioctl(); read(); write();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Information Maintenance&lt;/td&gt;
&lt;td&gt;getpid(); alarm(); sleep();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Communication&lt;/td&gt;
&lt;td&gt;pipe(); shmget(); mmap();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Protection&lt;/td&gt;
&lt;td&gt;chmod(); umask(); chown();&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;Linux-Architecture&#34;&gt;&lt;a href=&#34;#Linux-Architecture&#34; class=&#34;headerlink&#34; title=&#34;Linux Architecture&#34;&gt;&lt;/a&gt;Linux Architecture&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/linuxarch.png&#34; alt=&#34;linuxarchitecture&#34;&gt;&lt;/p&gt;
&lt;hr&gt;


&lt;h1 id=&#34;Process-and-Process-Management&#34;&gt;&lt;a href=&#34;#Process-and-Process-Management&#34; class=&#34;headerlink&#34; title=&#34;Process and Process Management&#34;&gt;&lt;/a&gt;Process and Process Management&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;: Instance of an executing program.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;State of execution&lt;ul&gt;
&lt;li&gt;program counter, stack pointer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Parts and temporary holding area&lt;ul&gt;
&lt;li&gt;data, register state, occupies state in memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;May require special hardware&lt;ul&gt;
&lt;li&gt;I&amp;#x2F;O devices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Process is a state of a program when executing and loaded in memory (active state) as opposed to application (static state).&lt;/p&gt;
&lt;h2 id=&#34;What-does-a-process-look-like&#34;&gt;&lt;a href=&#34;#What-does-a-process-look-like&#34; class=&#34;headerlink&#34; title=&#34;What does a process look like?&#34;&gt;&lt;/a&gt;What does a process look like?&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/process.png&#34; alt=&#34;Process&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Type-of-state&#34;&gt;&lt;a href=&#34;#Type-of-state&#34; class=&#34;headerlink&#34; title=&#34;Type of state&#34;&gt;&lt;/a&gt;Type of state&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Text and Data&lt;ul&gt;
&lt;li&gt;static state when process loads first&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heap &lt;ul&gt;
&lt;li&gt;dynamically created during execution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Stack&lt;ul&gt;
&lt;li&gt;grows and shrinks &lt;/li&gt;
&lt;li&gt;LIFO queue (used to store task checkpoints to resume the original process after switching from another.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;How-does-the-OS-know-what-a-process-is-doing&#34;&gt;&lt;a href=&#34;#How-does-the-OS-know-what-a-process-is-doing&#34; class=&#34;headerlink&#34; title=&#34;How does the OS know what a process is doing?&#34;&gt;&lt;/a&gt;How does the OS know what a process is doing?&lt;/h2&gt;&lt;p&gt;Using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Program counter&lt;/li&gt;
&lt;li&gt;CPU registers&lt;/li&gt;
&lt;li&gt;Stack pointer&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Process-Control-Block-PCB&#34;&gt;&lt;a href=&#34;#Process-Control-Block-PCB&#34; class=&#34;headerlink&#34; title=&#34;Process Control Block (PCB)&#34;&gt;&lt;/a&gt;Process Control Block (PCB)&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/pcb.png&#34; alt=&#34;PCB&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PCB created when process is created&lt;/li&gt;
&lt;li&gt;Certain fields are updated when process state change e.g. memory mapping&lt;/li&gt;
&lt;li&gt;or other fields that change very frequently e.g. Program Counter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;How-is-PCB-used&#34;&gt;&lt;a href=&#34;#How-is-PCB-used&#34; class=&#34;headerlink&#34; title=&#34;How is PCB used ?&#34;&gt;&lt;/a&gt;How is PCB used ?&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/howpcbisused.png&#34; alt=&#34;howpcbisused&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Context-Switch&#34;&gt;&lt;a href=&#34;#Context-Switch&#34; class=&#34;headerlink&#34; title=&#34;Context Switch&#34;&gt;&lt;/a&gt;Context Switch&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Mechanism used to switch from the context of one process to another in the CPU.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;They are expensive!&lt;ul&gt;
&lt;li&gt;direct costs: no of cycles for load and store instructions.&lt;/li&gt;
&lt;li&gt;indirect costs: &lt;strong&gt;COLD&lt;/strong&gt; cache (read more &lt;a href=&#34;http://stackoverflow.com/questions/22756092/what-does-it-mean-by-cold-cache-and-warm-cache-concept&#34;&gt;here&lt;/a&gt;)&lt;ul&gt;
&lt;li&gt;Therefore limit frequency how context switching is done.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When a cache is &lt;strong&gt;HOT&lt;/strong&gt;, most process data is in the cache so the process performance will be at its best.&lt;/p&gt;
&lt;p&gt;Sometimes there are situations where we have to Context Switch (higher priority process, timesharing, etc.)&lt;/p&gt;
&lt;h2 id=&#34;Process-Lifecycle&#34;&gt;&lt;a href=&#34;#Process-Lifecycle&#34; class=&#34;headerlink&#34; title=&#34;Process Lifecycle&#34;&gt;&lt;/a&gt;Process Lifecycle&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/processlifecycle.png&#34; alt=&#34;processlifecycle&#34;&gt;&lt;/p&gt;
&lt;p&gt;CPU is able to execute a process when the process is in Running or Ready state.&lt;/p&gt;
&lt;h2 id=&#34;Process-Creation&#34;&gt;&lt;a href=&#34;#Process-Creation&#34; class=&#34;headerlink&#34; title=&#34;Process Creation&#34;&gt;&lt;/a&gt;Process Creation&lt;/h2&gt;&lt;h4 id=&#34;Mechanisms&#34;&gt;&lt;a href=&#34;#Mechanisms&#34; class=&#34;headerlink&#34; title=&#34;Mechanisms:&#34;&gt;&lt;/a&gt;Mechanisms:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;fork :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;copies the parent PCB into new child PCB&lt;/li&gt;
&lt;li&gt;child contains execution at instruction after fork&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;exec :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;replace child image&lt;/li&gt;
&lt;li&gt;load new program and start from first instruction&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;What-is-the-role-of-CPU-scheduler&#34;&gt;&lt;a href=&#34;#What-is-the-role-of-CPU-scheduler&#34; class=&#34;headerlink&#34; title=&#34;What is the role of CPU scheduler?&#34;&gt;&lt;/a&gt;What is the role of CPU scheduler?&lt;/h2&gt;&lt;p&gt;CPU scheduler determines which one of the currently ready processes will be dispatched to the CPU to start running, and how long it should run for.&lt;/p&gt;
&lt;p&gt;OS must :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;preempt &amp;#x3D;&amp;gt; interrupt and save current context&lt;/li&gt;
&lt;li&gt;schedule &amp;#x3D;&amp;gt; run scheduler to choose next process&lt;/li&gt;
&lt;li&gt;dispatch &amp;#x3D;&amp;gt; dispatch process 2 switch into its context&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Scheduling-design-decisions&#34;&gt;&lt;a href=&#34;#Scheduling-design-decisions&#34; class=&#34;headerlink&#34; title=&#34;Scheduling design decisions&#34;&gt;&lt;/a&gt;Scheduling design decisions&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/timeslice.png&#34; alt=&#34;timeslice&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the appropriate timeslice values?&lt;/li&gt;
&lt;li&gt;Metrics to choose next process to run?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;I-O&#34;&gt;&lt;a href=&#34;#I-O&#34; class=&#34;headerlink&#34; title=&#34;I&amp;#x2F;O&#34;&gt;&lt;/a&gt;I&amp;#x2F;O&lt;/h2&gt;&lt;p&gt;A process can make way in the ready queue in a number of ways.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/io.png&#34; alt=&#34;io&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Can-process-interact&#34;&gt;&lt;a href=&#34;#Can-process-interact&#34; class=&#34;headerlink&#34; title=&#34;Can process interact?&#34;&gt;&lt;/a&gt;Can process interact?&lt;/h2&gt;&lt;h4 id=&#34;Inter-Process-communication&#34;&gt;&lt;a href=&#34;#Inter-Process-communication&#34; class=&#34;headerlink&#34; title=&#34;Inter Process communication:&#34;&gt;&lt;/a&gt;Inter Process communication:&lt;/h4&gt;&lt;p&gt;IPC mechanisms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;transfer data&amp;#x2F;info between address space&lt;/li&gt;
&lt;li&gt;maintain protection and isolation&lt;/li&gt;
&lt;li&gt;provide flexibility and performance&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Two types of IPC models:&lt;/p&gt;
&lt;h4 id=&#34;1-Message-Passing-IPC&#34;&gt;&lt;a href=&#34;#1-Message-Passing-IPC&#34; class=&#34;headerlink&#34; title=&#34;1. Message Passing IPC&#34;&gt;&lt;/a&gt;1. &lt;strong&gt;Message Passing IPC&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/messagepassing.png&#34; alt=&#34;messagepassing&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS provides communication channel line shared buffer&lt;/li&gt;
&lt;li&gt;Processes can write(send), read(receive) msg to&amp;#x2F;from channel&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: OS manages the channel&lt;br&gt;&lt;br&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: Overheads&lt;/p&gt;
&lt;h4 id=&#34;2-Shared-Memory-IPC&#34;&gt;&lt;a href=&#34;#2-Shared-Memory-IPC&#34; class=&#34;headerlink&#34; title=&#34;2. Shared Memory IPC&#34;&gt;&lt;/a&gt;2. &lt;strong&gt;Shared Memory IPC&lt;/strong&gt;&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/sharedmemory.png&#34; alt=&#34;sharedmemory&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS establishes a shared channel and maps it into each processes’ address space&lt;/li&gt;
&lt;li&gt;Processes directly write(send), read(receive) msg to&amp;#x2F;from this memory&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: OS is out of the way after establishing the shared channel&lt;br&gt;&lt;br&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: Re-implementing a lot of code that could have been done by the OS&lt;/p&gt;
&lt;p&gt;Overall, &lt;strong&gt;shared memory&lt;/strong&gt; based communication is better if mapping memory between two processes is ammortized over a large number of messages.&lt;/p&gt;
&lt;hr&gt;


&lt;h1 id=&#34;Threads-and-Concurrency&#34;&gt;&lt;a href=&#34;#Threads-and-Concurrency&#34; class=&#34;headerlink&#34; title=&#34;Threads and Concurrency&#34;&gt;&lt;/a&gt;Threads and Concurrency&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Thread&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;is an active&lt;ul&gt;
&lt;li&gt;entity executing unit of a process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;works simultaneously with others&lt;ul&gt;
&lt;li&gt;many threads execute together&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;requires coordination&lt;ul&gt;
&lt;li&gt;sharing of I&amp;#x2F;O devices, CPUs, memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Process-vs-Thread&#34;&gt;&lt;a href=&#34;#Process-vs-Thread&#34; class=&#34;headerlink&#34; title=&#34;Process vs Thread&#34;&gt;&lt;/a&gt;Process vs Thread&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/processvthread.png&#34; alt=&#34;processvthread&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Why-are-threads-useful&#34;&gt;&lt;a href=&#34;#Why-are-threads-useful&#34; class=&#34;headerlink&#34; title=&#34;Why are threads useful?&#34;&gt;&lt;/a&gt;Why are threads useful?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Parallelization &amp;#x3D;&amp;gt; Speedup&lt;/li&gt;
&lt;li&gt;Specialization &amp;#x3D;&amp;gt; Hot cache&lt;/li&gt;
&lt;li&gt;Efficiency &amp;#x3D;&amp;gt; lower memory requirement &amp;amp; cheaper IPC&lt;/li&gt;
&lt;li&gt;Time for context switch in threads is less, since memory is shared, hence mapping is not required between virtual and physical memory.&lt;ul&gt;
&lt;li&gt;Therefore multithreading can be used to hide latency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Benefits to both applicatioons and OS code &lt;ul&gt;
&lt;li&gt;Multithreaded OS kernel&lt;ul&gt;
&lt;li&gt;threads working on behalf of applications&lt;/li&gt;
&lt;li&gt;OS level services like daemons and drivers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;What-do-we-need-to-support-threads&#34;&gt;&lt;a href=&#34;#What-do-we-need-to-support-threads&#34; class=&#34;headerlink&#34; title=&#34;What do we need to support threads?&#34;&gt;&lt;/a&gt;What do we need to support threads?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Threads data structure&lt;ul&gt;
&lt;li&gt;Identify threads, keep track of resource usage..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mechanisms to create and manage threads&lt;/li&gt;
&lt;li&gt;Mechanisms to safely coordinate among threads running concurrently in the same address space&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Concurrency-control-and-Coordination&#34;&gt;&lt;a href=&#34;#Concurrency-control-and-Coordination&#34; class=&#34;headerlink&#34; title=&#34;Concurrency control and Coordination&#34;&gt;&lt;/a&gt;Concurrency control and Coordination&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Mutual exclusion &lt;ul&gt;
&lt;li&gt;Exclusive access to only one thread at a time&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mutex&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Waiting on other threads&lt;ul&gt;
&lt;li&gt;Specific condition before proceeding&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;condition variable&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Waking up other threads from wait state&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Threads-and-Threads-creation&#34;&gt;&lt;a href=&#34;#Threads-and-Threads-creation&#34; class=&#34;headerlink&#34; title=&#34;Threads and Threads creation&#34;&gt;&lt;/a&gt;Threads and Threads creation&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Thread data structure: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread type, Thread ID, PC, SP, registers, stack, attributes.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Fork&lt;/strong&gt;(proc, args)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;create a thread&lt;/li&gt;
&lt;li&gt;not UNIX fork&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;t1 = fork(proc, args)   &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Join&lt;/strong&gt;(thread)&lt;ul&gt;
&lt;li&gt;terminate a thread&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;child_result = join(t1)   &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Example-1&#34;&gt;&lt;a href=&#34;#Example-1&#34; class=&#34;headerlink&#34; title=&#34;Example:&#34;&gt;&lt;/a&gt;Example:&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Thread  t1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Shared_List list;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;t1 = fork(safe_insert, 4);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;safe_insert(6);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;join(t1); //Optional&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The list can be accessed by reading shared variable.&lt;/p&gt;
&lt;h2 id=&#34;Mutual-Exclusion&#34;&gt;&lt;a href=&#34;#Mutual-Exclusion&#34; class=&#34;headerlink&#34; title=&#34;Mutual Exclusion&#34;&gt;&lt;/a&gt;Mutual Exclusion&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Mutex data structure:&lt;ul&gt;
&lt;li&gt;locked?, owner, blocked_threads&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;lock(mutex)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	//Critical Section&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    //Only one thread can access at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unlock(mutex)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/mutex.png&#34; alt=&#34;mutex&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Producer-Consumer-problem&#34;&gt;&lt;a href=&#34;#Producer-Consumer-problem&#34; class=&#34;headerlink&#34; title=&#34;Producer Consumer problem&#34;&gt;&lt;/a&gt;Producer Consumer problem&lt;/h2&gt;&lt;p&gt;What if the processing you wish to perform with mutual exclusion needs to occur under certai conditions?&lt;/p&gt;
&lt;p&gt;For e.g. The producer appends items to a list until the list is full, and the consumer has to print out all the items of the list once the list if full and then empty the list. Thus we have to execute the Consumer thread only under a certain condition (here- when the list becomes empty, print items).&lt;/p&gt;
&lt;p&gt;Solution: Use &lt;strong&gt;Condition Variables&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Wait(mutex, condition)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;mutex is automatically released and reaquired on wait&lt;/li&gt;
&lt;li&gt;The consumer applies &lt;em&gt;Wait&lt;/em&gt; until the list is full&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Signal(condition)    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notify only one thread waiting on condition&lt;/li&gt;
&lt;li&gt;The Producer applies &lt;em&gt;Signal&lt;/em&gt; to the Consumer thread when the list is full&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Broadcast(condition)    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Notify all waiting threads&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/producerconsumer.png&#34; alt=&#34;producerconsumer&#34;&gt;    &lt;/p&gt;
&lt;h2 id=&#34;Readers-Writer-problem&#34;&gt;&lt;a href=&#34;#Readers-Writer-problem&#34; class=&#34;headerlink&#34; title=&#34;Readers &amp;#x2F; Writer problem&#34;&gt;&lt;/a&gt;Readers &amp;#x2F; Writer problem&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;0 or more readers can access a resource&lt;/li&gt;
&lt;li&gt;0 or 1 writer can write the resource concurrently at the same time&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;One solution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lock on resource&lt;ul&gt;
&lt;li&gt;good for writer&lt;/li&gt;
&lt;li&gt;too restrictive for readers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Better solution:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;if ((read_count == 0) &amp;amp; (read_count == 0))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	R okay, W okay&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if (read_count &amp;gt; 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	R okay    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if (read_count == 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	R not-okay, W not-okay    &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;State of shared resource:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;free : resource_counter &amp;#x3D; 0&lt;/li&gt;
&lt;li&gt;reading : resource_counter &amp;gt; 0&lt;/li&gt;
&lt;li&gt;writing : resource_counter &amp;#x3D; -1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thus essentially we can apply mutex on the new proxy ‘resource_counter’ variable that represents the state of the shared resource.&lt;/p&gt;
&lt;h2 id=&#34;Avoiding-common-mistakes&#34;&gt;&lt;a href=&#34;#Avoiding-common-mistakes&#34; class=&#34;headerlink&#34; title=&#34;Avoiding common mistakes&#34;&gt;&lt;/a&gt;Avoiding common mistakes&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;keep track of mutex&amp;#x2F;lock variable used with a resource&lt;ul&gt;
&lt;li&gt;e.g. mutex_type m1; &amp;#x2F;&amp;#x2F; mutex for file1&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;check that you are always and correctly using lock and unlock 	- Compilers can be used as they generate errors&amp;#x2F;warnings to correct this type of mistake  	&lt;/li&gt;
&lt;li&gt;Use a single mutex to access a single resource&lt;/li&gt;
&lt;li&gt;check that you are signalling correct condition&lt;/li&gt;
&lt;li&gt;check that you are not using signal when broadcast is needed&lt;ul&gt;
&lt;li&gt;signal : only 1 thread is will proceed, remaining threads will wait&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;check thread execution order to be controlled by signals to condition variables&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Spurious-Unnecessary-Wake-ups&#34;&gt;&lt;a href=&#34;#Spurious-Unnecessary-Wake-ups&#34; class=&#34;headerlink&#34; title=&#34;Spurious(Unnecessary) Wake ups&#34;&gt;&lt;/a&gt;Spurious(Unnecessary) Wake ups&lt;/h2&gt;&lt;p&gt;When we wake up threads knowing they may not be able to proceed.&lt;/p&gt;
&lt;h2 id=&#34;Deadlocks&#34;&gt;&lt;a href=&#34;#Deadlocks&#34; class=&#34;headerlink&#34; title=&#34;Deadlocks&#34;&gt;&lt;/a&gt;Deadlocks&lt;/h2&gt;&lt;p&gt;Two or more competing threads are said to be in a deadlock if they are waiting on each other to complete, but none of them ever do.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/deadlock.png&#34; alt=&#34;deadlock&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here T1 and T2 are in deadlock.&lt;/p&gt;
&lt;h3 id=&#34;How-to-avoid-this&#34;&gt;&lt;a href=&#34;#How-to-avoid-this&#34; class=&#34;headerlink&#34; title=&#34;How to avoid this?&#34;&gt;&lt;/a&gt;How to avoid this?&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Unlock T1 before locking T2&lt;ul&gt;
&lt;li&gt;Fine-grained locking but T1 nad T2 may both be required&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use one mega lock, get all locks upfront, then release at end&lt;ul&gt;
&lt;li&gt;For some applications this may be ok. But generally its too restrictive and limits parallelism&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Maintain lock order&lt;ul&gt;
&lt;li&gt;first m_T1&lt;/li&gt;
&lt;li&gt;then m_T2 &lt;ul&gt;
&lt;li&gt;this will prevent cycles in wait graph&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;A cycle in wait graph is necessary and sufficient for deadlock to occur.&lt;br&gt;&lt;br&gt;(thread-waiting-on-resource —edge—&amp;gt; thread-owning-resource)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Deadlock prevention &amp;#x3D;&amp;gt; Expensive&lt;br&gt;&lt;br&gt;Pre-check for cycles and then delay process or change code&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Deadlock Detection and Recovery &amp;#x3D;&amp;gt; Rollback&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Kernel-vs-User-level-Threads&#34;&gt;&lt;a href=&#34;#Kernel-vs-User-level-Threads&#34; class=&#34;headerlink&#34; title=&#34;Kernel vs User level Threads&#34;&gt;&lt;/a&gt;Kernel vs User level Threads&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/kernelvuserthread.png&#34; alt=&#34;kernelvuserthread&#34;&gt;&lt;/p&gt;
&lt;p&gt;Three types of models:&lt;/p&gt;
&lt;h4 id=&#34;1-One-to-One-model&#34;&gt;&lt;a href=&#34;#1-One-to-One-model&#34; class=&#34;headerlink&#34; title=&#34;1. One to One model:&#34;&gt;&lt;/a&gt;1. &lt;strong&gt;One to One model&lt;/strong&gt;:&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/onetoone.png&#34; alt=&#34;onetoone&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS sees threads&lt;/li&gt;
&lt;li&gt;Synchronization&lt;/li&gt;
&lt;li&gt;Blocking&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Must go to OS for all operations&lt;/li&gt;
&lt;li&gt;OS may have limits on policies, threads&lt;/li&gt;
&lt;li&gt;Portability&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-Many-to-One-model&#34;&gt;&lt;a href=&#34;#2-Many-to-One-model&#34; class=&#34;headerlink&#34; title=&#34;2. Many to One model:&#34;&gt;&lt;/a&gt;2. &lt;strong&gt;Many to One model&lt;/strong&gt;:&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/manytoone.png&#34; alt=&#34;manytoone&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Totally Portable &lt;/li&gt;
&lt;li&gt;Doesn’t depend on OS limits and policies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS may block entire process if one user-level thread blocks on I&amp;#x2F;O&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-Many-to-Many-model&#34;&gt;&lt;a href=&#34;#3-Many-to-Many-model&#34; class=&#34;headerlink&#34; title=&#34;3. Many to Many model:&#34;&gt;&lt;/a&gt;3. &lt;strong&gt;Many to Many model&lt;/strong&gt;:&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/manytomany.png&#34; alt=&#34;manytomany&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Best of both worlds&lt;/li&gt;
&lt;li&gt;Can have bound or unbound threads&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requires coordination between user and kernel level thread managers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Multithreading-patterns&#34;&gt;&lt;a href=&#34;#Multithreading-patterns&#34; class=&#34;headerlink&#34; title=&#34;Multithreading patterns&#34;&gt;&lt;/a&gt;Multithreading patterns&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. Boss-Workers pattern&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Boss- assigns work&lt;/li&gt;
&lt;li&gt;Workers- perform entire task&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Throughput of system is limited by boss thread. Hence boss thread must be kept efficient.&lt;/p&gt;
&lt;p&gt;Throughput &amp;#x3D; 1&amp;#x2F;boss-time-orders&lt;/p&gt;
&lt;p&gt;Boss assigns works by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Directly signalling specific works&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; workers don’t need to sync&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; boss must keep track of everyone&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Placing work in queue&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; boss doesn’t neeed to know details about workers&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; queue synchronization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;How many workers?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on demand&lt;/li&gt;
&lt;li&gt;pool of workers&lt;/li&gt;
&lt;li&gt;static vs dynamic (i.e dynamically increasing size according to work)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Thread pool management&lt;/li&gt;
&lt;li&gt;Locality&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1B. Boss-Workers pattern variant&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Here workers are specialized for certain tasks opposite to the previous equally created workers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better locality&lt;/li&gt;
&lt;li&gt;Quality of Service management&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load balancing&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2. Pipeline pattern&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Threads assigned one subtask in the system&lt;/li&gt;
&lt;li&gt;Entire task &amp;#x3D; Pipeline of threads&lt;/li&gt;
&lt;li&gt;Multiple tasks concurrently run in the system, in different pipeline stages&lt;/li&gt;
&lt;li&gt;Throughput depends on weakest link&lt;/li&gt;
&lt;li&gt;Shared buffer based communication between stages&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;3. Layered pattern&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Layers of threads are assigned group of related subtasks&lt;/li&gt;
&lt;li&gt;End to end task must pass up and down through all layers&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Specialization&lt;/li&gt;
&lt;li&gt;Less fine-grained than pipeline&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Not suitable for all applications&lt;/li&gt;
&lt;li&gt;Synchronization&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Example-2&#34;&gt;&lt;a href=&#34;#Example-2&#34; class=&#34;headerlink&#34; title=&#34;Example:&#34;&gt;&lt;/a&gt;Example:&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Q)&lt;/strong&gt; For 6 step toy order application we have 2 solutions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Boss-workers solution&lt;/li&gt;
&lt;li&gt;Pipeline solution&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Both have 6 threads. In the boss-workers solution, a worker produces a toy order in 120 ms. In the pipeline solution, each of 6 stages take 20 ms.&lt;/p&gt;
&lt;p&gt;How long will it take for these solutions to complete 10 toy orders and 11 toy orders?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;A)&lt;/strong&gt; 6 threads means for Boss-workers, 1 thread is for boss, 5 for workers. In pipeline 6 threads are equally used.&lt;/p&gt;
&lt;p&gt;For 10 toy orders:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Boss-workers(10) = 120 + 120 = 240 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Pipeline(10) = 120 + (9*20) = 300 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Here Boss-workers is better than Pipeline.&lt;/p&gt;
&lt;p&gt;For 11 toy orders:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Boss-workers(11) = 120 + 120 + 120 = 360 ms&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Pipeline(11) = 120 + (10*20) = 320 ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Here Pipeline is better than Boss-workers.&lt;/p&gt;
&lt;p&gt;This proves that choosing a better pattern depends on the number of threads and the work required to be done.&lt;/p&gt;
&lt;h2 id=&#34;PThreads&#34;&gt;&lt;a href=&#34;#PThreads&#34; class=&#34;headerlink&#34; title=&#34;PThreads&#34;&gt;&lt;/a&gt;PThreads&lt;/h2&gt;&lt;p&gt;PThreads &amp;#x3D;&amp;#x3D; POSIX Threads&lt;/p&gt;
&lt;p&gt;POSIX &amp;#x3D; Portable OS interface&lt;/p&gt;
&lt;h3 id=&#34;Compiling-PThreads&#34;&gt;&lt;a href=&#34;#Compiling-PThreads&#34; class=&#34;headerlink&#34; title=&#34;Compiling PThreads&#34;&gt;&lt;/a&gt;Compiling PThreads&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;#include&amp;lt;pthread.h&amp;gt; in main file&lt;/li&gt;
&lt;li&gt;Compile source with -lpthread or -pthread&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;gcc -o main main.c -lpthread&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gcc -o main main.c -pthread&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;Check return values of common examples&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;PThread-mutexes&#34;&gt;&lt;a href=&#34;#PThread-mutexes&#34; class=&#34;headerlink&#34; title=&#34;PThread mutexes&#34;&gt;&lt;/a&gt;PThread mutexes&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;to solve mutual exclusion problems among concurrent threads&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Safety-tips&#34;&gt;&lt;a href=&#34;#Safety-tips&#34; class=&#34;headerlink&#34; title=&#34;Safety tips&#34;&gt;&lt;/a&gt;Safety tips&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Shared data should always be accessed through single mutex&lt;/li&gt;
&lt;li&gt;Mutex scope must be visible to all&lt;/li&gt;
&lt;li&gt;Globally order locks&lt;ul&gt;
&lt;li&gt;for all threads, lock mutexes in order&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Always unlock a mutex (correctly)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Thread-Design-Considerations&#34;&gt;&lt;a href=&#34;#Thread-Design-Considerations&#34; class=&#34;headerlink&#34; title=&#34;Thread Design Considerations&#34;&gt;&lt;/a&gt;Thread Design Considerations&lt;/h2&gt;&lt;h3 id=&#34;Kernel-vs-User-Level-Threads&#34;&gt;&lt;a href=&#34;#Kernel-vs-User-Level-Threads&#34; class=&#34;headerlink&#34; title=&#34;Kernel vs User Level Threads&#34;&gt;&lt;/a&gt;Kernel vs User Level Threads&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/userlevelvkernellevel.png&#34; alt=&#34;userlevelvkernellevel&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Thread-related-data-structures&#34;&gt;&lt;a href=&#34;#Thread-related-data-structures&#34; class=&#34;headerlink&#34; title=&#34;Thread related data structures&#34;&gt;&lt;/a&gt;Thread related data structures&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/threadds.png&#34; alt=&#34;threadds&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Hard-vs-Light-Process-states&#34;&gt;&lt;a href=&#34;#Hard-vs-Light-Process-states&#34; class=&#34;headerlink&#34; title=&#34;Hard vs Light Process states&#34;&gt;&lt;/a&gt;Hard vs Light Process states&lt;/h3&gt;&lt;p&gt;PCB is divided into multiple data structures classified as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Light Process states&lt;ul&gt;
&lt;li&gt;Signal mask &lt;/li&gt;
&lt;li&gt;System call args&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Heavy Process states &lt;ul&gt;
&lt;li&gt;virtual address mapping&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Rationale-for-Multiple-Data-Structures&#34;&gt;&lt;a href=&#34;#Rationale-for-Multiple-Data-Structures&#34; class=&#34;headerlink&#34; title=&#34;Rationale for Multiple Data Structures:&#34;&gt;&lt;/a&gt;Rationale for Multiple Data Structures:&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Single PCB&lt;/th&gt;
&lt;th&gt;Multiple DS&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Large continuos DS&lt;/td&gt;
&lt;td&gt;Smaller DS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Private for each entity&lt;/td&gt;
&lt;td&gt;Easier to share&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Saved and restored on each context switch&lt;/td&gt;
&lt;td&gt;Save and Restore only what needs to change on context switch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update for any changes&lt;/td&gt;
&lt;td&gt;User lever library need to only update portion of the state&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Thus the following disadvantages for single PCB become advantages for Multiple DS : &lt;ul&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;li&gt;Overheads&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Flexibility&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Comparison-of-Interrupts-and-Signals&#34;&gt;&lt;a href=&#34;#Comparison-of-Interrupts-and-Signals&#34; class=&#34;headerlink&#34; title=&#34;Comparison of Interrupts and Signals&#34;&gt;&lt;/a&gt;Comparison of Interrupts and Signals&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Handled in specific ways&lt;br&gt;  - interrupt and signal handlers&lt;ul&gt;
&lt;li&gt;Can be ignored&lt;ul&gt;
&lt;li&gt;interrupt and signal mask&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Expected or unexpected    &lt;ul&gt;
&lt;li&gt;appear synchronously or asynchronously&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Difference:&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Interrupts&lt;/th&gt;
&lt;th&gt;Signals&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Events generated externally by components other than CPU (I&amp;#x2F;O devices, timers, other CPUs)&lt;/td&gt;
&lt;td&gt;Events triggered by CPU and software running on it&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Determined based on physical platform&lt;/td&gt;
&lt;td&gt;Determined based on OS&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Appear asynchronously&lt;/td&gt;
&lt;td&gt;Appear synchronously or asynchronously&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Similarities:&lt;ul&gt;
&lt;li&gt;Have a unique ID depending on h&amp;#x2F;w or OS&lt;/li&gt;
&lt;li&gt;Can be masked and disabled&amp;#x2F;suspended via corresponding mask&lt;ul&gt;
&lt;li&gt;per-CPU interrupt mask, preprocess signal mask&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;if enabled, trigger corresponding to handler   &lt;ul&gt;
&lt;li&gt;interrupt handler set for entire system by OS&lt;/li&gt;
&lt;li&gt;signal handler set on per process basis by process&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;An interrupt is like a snowstorm alarm&lt;br&gt;&lt;br&gt;A signal is like a low battery warning&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Interrupts&#34;&gt;&lt;a href=&#34;#Interrupts&#34; class=&#34;headerlink&#34; title=&#34;Interrupts&#34;&gt;&lt;/a&gt;Interrupts&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/interrupts.png&#34; alt=&#34;interrupts&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Signals&#34;&gt;&lt;a href=&#34;#Signals&#34; class=&#34;headerlink&#34; title=&#34;Signals&#34;&gt;&lt;/a&gt;Signals&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/signals.png&#34; alt=&#34;signals&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Handlers-Actions&#34;&gt;&lt;a href=&#34;#Handlers-Actions&#34; class=&#34;headerlink&#34; title=&#34;Handlers &amp;#x2F; Actions&#34;&gt;&lt;/a&gt;Handlers &amp;#x2F; Actions&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Default actions&lt;ul&gt;
&lt;li&gt;Terminate, ignore&lt;/li&gt;
&lt;li&gt;Terminate and core dump&lt;/li&gt;
&lt;li&gt;Stop or continue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Process Installs Handler&lt;ul&gt;
&lt;li&gt;signal(), sigaction()&lt;/li&gt;
&lt;li&gt;for most signals, some cannot be “caught”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Synchronous&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;SIGSEGV (access to protected memory)&lt;/li&gt;
&lt;li&gt;SIGFPE (divided by zero)&lt;/li&gt;
&lt;li&gt;SIGKILL (kill, id)&lt;ul&gt;
&lt;li&gt;can be directed to a specific thread&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;*        &lt;ul&gt;
&lt;li&gt;SIGKILL (kill)&lt;/li&gt;
&lt;li&gt;SIGALARM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Why-disable-Interrupts-or-Signals&#34;&gt;&lt;a href=&#34;#Why-disable-Interrupts-or-Signals&#34; class=&#34;headerlink&#34; title=&#34;Why disable Interrupts or Signals&#34;&gt;&lt;/a&gt;Why disable Interrupts or Signals&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/disableis.png&#34; alt=&#34;disableis&#34;&gt;&lt;/p&gt;
&lt;p&gt;Here PC: First instruction in handler&lt;br&gt;&lt;br&gt;SP : thread stack&lt;/p&gt;
&lt;p&gt;To prevent deadlock,&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Keep handler code simple&lt;ul&gt;
&lt;li&gt;avoid mutex&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; too restrictive&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Control interruptions by handler code&lt;ul&gt;
&lt;li&gt;Use interrupt&amp;#x2F;signal masks&lt;/li&gt;
&lt;li&gt;0011100110.. (0: disabled, 1: enabled)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;clear_field_in_mask(mask)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;lock(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#disabled =&amp;gt; remaining pending&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;unlock(mutex)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;reset_field_in_mask(mask)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#enabled =&amp;gt; execute handler code&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Interrupt masks are per CPU &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if mask disables interrupt, hardware interrupt rounting mechanism will not deliver interrupt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Signal are per execution context (User-level thread on top of Kernel-level thread)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;if mask disables signal, kernel sees mask and will not interrupt corresponding thread&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Types-of-Signals&#34;&gt;&lt;a href=&#34;#Types-of-Signals&#34; class=&#34;headerlink&#34; title=&#34;Types of Signals&#34;&gt;&lt;/a&gt;Types of Signals&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;One-shot Signals&lt;ul&gt;
&lt;li&gt;“n signals pending &amp;#x3D;&amp;#x3D; 1 signal pending” : atleast once &lt;/li&gt;
&lt;li&gt;must be explicitly re-enabled&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Realtime Signals &lt;ul&gt;
&lt;li&gt;“if n signals raised, then handler is called n times”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;Handling-interrupts-as-threads&#34;&gt;&lt;a href=&#34;#Handling-interrupts-as-threads&#34; class=&#34;headerlink&#34; title=&#34;Handling interrupts as threads&#34;&gt;&lt;/a&gt;Handling interrupts as threads&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/interruptsasthreads.png&#34; alt=&#34;interruptsasthreads&#34;&gt;&lt;/p&gt;
&lt;p&gt;but dynamic thread creation is expensive!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic decision&lt;ul&gt;
&lt;li&gt;if handler doesn’t lock&lt;ul&gt;
&lt;li&gt;execute on interrupted threads stack&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;if handler can block&lt;ul&gt;
&lt;li&gt;turn into real thread&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optimization        &lt;ul&gt;
&lt;li&gt;pre-create and pre-initialize thread structure for interrupt routines&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Threads-and-Signal-Handling&#34;&gt;&lt;a href=&#34;#Threads-and-Signal-Handling&#34; class=&#34;headerlink&#34; title=&#34;Threads and Signal Handling&#34;&gt;&lt;/a&gt;Threads and Signal Handling&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/tshandling.png&#34; alt=&#34;tshandling&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 1 :&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User-Level-Thread mask &amp;#x3D; 1&lt;/li&gt;
&lt;li&gt;Kernel-Level-Thread mask &amp;#x3D; 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/case1.png&#34; alt=&#34;case1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 2 :&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User-Level-Thread mask &amp;#x3D; 0&lt;/li&gt;
&lt;li&gt;Kernel-Level-Thread mask &amp;#x3D; 1&lt;/li&gt;
&lt;li&gt;another User-Level-Thread mask &amp;#x3D; 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/case2.png&#34; alt=&#34;case2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 3 :&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User-Level-Thread mask &amp;#x3D; 0&lt;/li&gt;
&lt;li&gt;Kernel-Level-Thread mask &amp;#x3D; 1&lt;/li&gt;
&lt;li&gt;another User-Level-Thread mask &amp;#x3D; 1&lt;/li&gt;
&lt;li&gt;another Kernel-Level-Thread mask &amp;#x3D; 1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/case3.png&#34; alt=&#34;case3&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Case 4 :&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User-Level-Thread mask &amp;#x3D; 0&lt;/li&gt;
&lt;li&gt;Kernel-Level-Thread mask &amp;#x3D; 1&lt;/li&gt;
&lt;li&gt;all User-Level-Thread mask &amp;#x3D; 0&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/case4.png&#34; alt=&#34;case4&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optimize common case&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;signals less frequennt than signal mask updates&lt;/li&gt;
&lt;li&gt;system calls avoided&lt;ul&gt;
&lt;li&gt;cheaper to update user-level mask&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;signal handling more expensive&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Multi-processing-vs-Multi-threading&#34;&gt;&lt;a href=&#34;#Multi-processing-vs-Multi-threading&#34; class=&#34;headerlink&#34; title=&#34;Multi-processing vs Multi-threading&#34;&gt;&lt;/a&gt;Multi-processing vs Multi-threading&lt;/h2&gt;&lt;p&gt;How to best provide concurrency?&lt;/p&gt;
&lt;h3 id=&#34;Multi-Processing-MP&#34;&gt;&lt;a href=&#34;#Multi-Processing-MP&#34; class=&#34;headerlink&#34; title=&#34;Multi-Processing (MP)&#34;&gt;&lt;/a&gt;Multi-Processing (MP)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simple programming&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High memory usage&lt;/li&gt;
&lt;li&gt;Costs context switch&lt;/li&gt;
&lt;li&gt;costly to maintain shared state (tricky port setup)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Multi-Threading-MP&#34;&gt;&lt;a href=&#34;#Multi-Threading-MP&#34; class=&#34;headerlink&#34; title=&#34;Multi-Threading (MP)&#34;&gt;&lt;/a&gt;Multi-Threading (MP)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shared address space&lt;/li&gt;
&lt;li&gt;Shared state (no sys calls to other threads)&lt;/li&gt;
&lt;li&gt;Cheap context switch&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Complex implementation&lt;/li&gt;
&lt;li&gt;Requires synchronization&lt;/li&gt;
&lt;li&gt;Requires underlying support for threads&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Event-Driven-model&#34;&gt;&lt;a href=&#34;#Event-Driven-model&#34; class=&#34;headerlink&#34; title=&#34;Event Driven model&#34;&gt;&lt;/a&gt;Event Driven model&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/eventdrivenmodel.png&#34; alt=&#34;eventdrivenmodel&#34;&gt;&lt;/p&gt;
&lt;p&gt;Features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single address space&lt;/li&gt;
&lt;li&gt;Single process&lt;/li&gt;
&lt;li&gt;Single thread of control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dispatcher : acts as a state machine and accepts any external events&lt;/p&gt;
&lt;p&gt;When call handler &amp;#x3D;&amp;gt; jump to code&lt;/p&gt;
&lt;p&gt;The handler:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Runs to completion&lt;/li&gt;
&lt;li&gt;if they need to block&lt;ul&gt;
&lt;li&gt;initiate blocking operation and pass control to dispatch loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Concurrent-execution-in-Event-driven-models&#34;&gt;&lt;a href=&#34;#Concurrent-execution-in-Event-driven-models&#34; class=&#34;headerlink&#34; title=&#34;Concurrent execution in Event-driven models&#34;&gt;&lt;/a&gt;Concurrent execution in Event-driven models&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;MP &amp;amp; MT :  1 request per execution context (process&amp;#x2F;thread)&lt;/li&gt;
&lt;li&gt;Event Driven : Many requests interleaved in an execution context&lt;/li&gt;
&lt;li&gt;Single thread switches among processing of different requests&lt;/li&gt;
&lt;li&gt;Process requests until wait is necessary&lt;ul&gt;
&lt;li&gt;then switch to another request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single address space&lt;/li&gt;
&lt;li&gt;Single flow of control&lt;/li&gt;
&lt;li&gt;Smaller memory requirement&lt;ul&gt;
&lt;li&gt;Event Driven model requires less memory than Boss-workers&amp;#x2F;Pipeline model, where the extra memory is required for helper thread for concurrent blocking I&amp;#x2F;O not for all concurrent requests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;No context switches&lt;/li&gt;
&lt;li&gt;No synchronization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt;    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A blocking request&amp;#x2F;handler will block entire process&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Asynchronous-I-O-operations&#34;&gt;&lt;a href=&#34;#Asynchronous-I-O-operations&#34; class=&#34;headerlink&#34; title=&#34;Asynchronous I&amp;#x2F;O operations&#34;&gt;&lt;/a&gt;Asynchronous I&amp;#x2F;O operations&lt;/h3&gt;&lt;p&gt;Asynchronous I&amp;#x2F;O operations fit well with Event-driven models	&lt;/p&gt;
&lt;p&gt;Since asynchronous calls are not easily avalible, helpers can be used to implement the async call functionality:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;designated for blocking I&amp;#x2F;O operations only&lt;/li&gt;
&lt;li&gt;pipe&amp;#x2F;socket based communication with event dispatcher&lt;ul&gt;
&lt;li&gt;select()&amp;#x2F; poll() still okay&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;helper blocks, but main event loop (&amp;amp; process) will not&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Asymmetric-Multi-Process-Event-Driven-model-AMPED-AMTED&#34;&gt;&lt;a href=&#34;#Asymmetric-Multi-Process-Event-Driven-model-AMPED-AMTED&#34; class=&#34;headerlink&#34; title=&#34;Asymmetric Multi-Process Event Driven model (AMPED &amp;amp; AMTED)&#34;&gt;&lt;/a&gt;Asymmetric Multi-Process Event Driven model (AMPED &amp;amp; AMTED)&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Resolve portability limitations of basic event driven model&lt;/li&gt;
&lt;li&gt;Smaller footprint than regular worker thread&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Applicability to certain classes of applications&lt;/li&gt;
&lt;li&gt;Event routing on multi CPU systems&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eg &lt;a href=&#34;https://en.wikipedia.org/wiki/Apache_HTTP_Server&#34;&gt;Apache Web Server&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/apachewebserver.png&#34; alt=&#34;apachewebserver.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core : basic server skeleton&lt;/li&gt;
&lt;li&gt;Modules : per functionality&lt;/li&gt;
&lt;li&gt;Flow of Control : Similar to Event Driven model&lt;/li&gt;
&lt;li&gt;But its an combination of MP + MT,&lt;ul&gt;
&lt;li&gt;each process &amp;#x3D; boss&amp;#x2F;worker with dynamic thread pool&lt;/li&gt;
&lt;li&gt;number of processes can also be dynamically adjusted&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;    




&lt;h1 id=&#34;Scheduling&#34;&gt;&lt;a href=&#34;#Scheduling&#34; class=&#34;headerlink&#34; title=&#34;Scheduling&#34;&gt;&lt;/a&gt;Scheduling&lt;/h1&gt;&lt;p&gt;Operating System perform scheduling in the following simple ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dispatch orders immediately&lt;ul&gt;
&lt;li&gt;scheduling is simple FIFO (First-Come-First-Serve)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dispatch simple orders first&lt;ul&gt;
&lt;li&gt;maximize number of orders processed over time&lt;/li&gt;
&lt;li&gt;maximize throughput (SJF)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dispatch complex orders first&lt;ul&gt;
&lt;li&gt;maximize utilization of CPU, devices, memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;CPU-Scheduler&#34;&gt;&lt;a href=&#34;#CPU-Scheduler&#34; class=&#34;headerlink&#34; title=&#34;CPU Scheduler&#34;&gt;&lt;/a&gt;CPU Scheduler&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Decides how and when process (and their threads) access shared CPUs&lt;/li&gt;
&lt;li&gt;Schedules tasks running at user level processes&amp;#x2F;threads as well as kernel level threads&lt;/li&gt;
&lt;li&gt;Chooses one of the ready tasks to run on CPU&lt;/li&gt;
&lt;li&gt;Runs when&lt;ul&gt;
&lt;li&gt;CPU becomes idle&lt;/li&gt;
&lt;li&gt;new task becomes ready&lt;/li&gt;
&lt;li&gt;timeslice expired timeout&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Context switch, enter user mode, set PC and go! &amp;lt;&amp;#x3D; Thread is dispatched on CPU.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Which task should be selected?&lt;ul&gt;
&lt;li&gt;Scheduling policy&amp;#x2F;algorithm&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How is this done?&lt;ul&gt;
&lt;li&gt;Depends on runqueue data structure&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;“Run-to-completion”-Scheduling&#34;&gt;&lt;a href=&#34;#“Run-to-completion”-Scheduling&#34; class=&#34;headerlink&#34; title=&#34;“Run-to-completion” Scheduling&#34;&gt;&lt;/a&gt;“Run-to-completion” Scheduling&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Initial assumptions&lt;ul&gt;
&lt;li&gt;group of tasks&amp;#x2F;jobs&lt;/li&gt;
&lt;li&gt;known execution time&lt;/li&gt;
&lt;li&gt;no preemption&lt;/li&gt;
&lt;li&gt;single CPU&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Metrics&lt;ul&gt;
&lt;li&gt;throughput&lt;/li&gt;
&lt;li&gt;average job completion time&lt;/li&gt;
&lt;li&gt;average job wait time&lt;/li&gt;
&lt;li&gt;CPU utilization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Scheduling-algorithms&#34;&gt;&lt;a href=&#34;#Scheduling-algorithms&#34; class=&#34;headerlink&#34; title=&#34;Scheduling algorithms:&#34;&gt;&lt;/a&gt;Scheduling algorithms:&lt;/h2&gt;&lt;h3 id=&#34;1-First-Come-First-Serve-FCFS&#34;&gt;&lt;a href=&#34;#1-First-Come-First-Serve-FCFS&#34; class=&#34;headerlink&#34; title=&#34;1. First Come First Serve (FCFS)&#34;&gt;&lt;/a&gt;1. First Come First Serve (FCFS)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Schedules tasks in order of arrival&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;runqueue = queue(FIFO)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If T1, T2, T3 arrive in the given order and T1 has execution time 1s, T2 10s and T3 1s then :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Throughput &amp;#x3D; 3&amp;#x2F;(1+10+1) &amp;#x3D; 3&amp;#x2F;12 &amp;#x3D; 0.25s&lt;/li&gt;
&lt;li&gt;Average completion time &amp;#x3D; (1 + 11 + 12)&amp;#x2F;3 &amp;#x3D; 8s&lt;/li&gt;
&lt;li&gt;Average wait time &amp;#x3D; (1+1+11)&amp;#x2F;3 &amp;#x3D; 4s&lt;/li&gt;
&lt;li&gt;Starvation NOT possible&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-Shortest-Job-First-SJF&#34;&gt;&lt;a href=&#34;#2-Shortest-Job-First-SJF&#34; class=&#34;headerlink&#34; title=&#34;2. Shortest Job First (SJF)&#34;&gt;&lt;/a&gt;2. Shortest Job First (SJF)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Schedules tasks in order of execution time&lt;/li&gt;
&lt;li&gt;Therefore for the above example, T1(1s) &amp;gt; T3(1s) &amp;gt; T2(10s)&lt;/li&gt;
&lt;li&gt;Starvation possible&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;runqueue = ordered(queue)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//or&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;runqueue = tree()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;For SJF,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Throughput &amp;#x3D; 3&amp;#x2F;(1+10+1) &amp;#x3D; 3&amp;#x2F;12 &amp;#x3D; 0.25s&lt;/li&gt;
&lt;li&gt;Average completion time &amp;#x3D; (1 + 2 + 12)&amp;#x2F;3 &amp;#x3D; 5s&lt;/li&gt;
&lt;li&gt;Average wait time &amp;#x3D; (0+1+2)&amp;#x2F;3 &amp;#x3D; 1s&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Preemptive-Scheduling&#34;&gt;&lt;a href=&#34;#Preemptive-Scheduling&#34; class=&#34;headerlink&#34; title=&#34;Preemptive Scheduling&#34;&gt;&lt;/a&gt;Preemptive Scheduling&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SJF + Preemption&lt;/li&gt;
&lt;li&gt;Starvation is possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;T2 arrives first.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/preemptive.png&#34; alt=&#34;preemptive&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Priority-Scheduling&#34;&gt;&lt;a href=&#34;#Priority-Scheduling&#34; class=&#34;headerlink&#34; title=&#34;Priority Scheduling&#34;&gt;&lt;/a&gt;Priority Scheduling&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Tasks have different priority levels&lt;/li&gt;
&lt;li&gt;Run highest priority task next (preemption)&lt;/li&gt;
&lt;li&gt;Starvation is possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/priority.png&#34; alt=&#34;priority&#34;&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;runqueue = per priority_queue()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;//or &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;runqueue = tree() ordered on priority&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;low priority task stuck in runqueue &amp;#x3D;&amp;gt; starvation&lt;/li&gt;
&lt;li&gt;“priority aging” &lt;ul&gt;
&lt;li&gt;priority &amp;#x3D; f(actual priority, time spent in runqueue)&lt;/li&gt;
&lt;li&gt;eventually tasks will run&lt;/li&gt;
&lt;li&gt;prevents starvation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-Round-Robin-Scheduling&#34;&gt;&lt;a href=&#34;#3-Round-Robin-Scheduling&#34; class=&#34;headerlink&#34; title=&#34;3. Round-Robin Scheduling&#34;&gt;&lt;/a&gt;3. Round-Robin Scheduling&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Pick up the first task from queue (like FCFS)&lt;/li&gt;
&lt;li&gt;Task may yield to wait on I&amp;#x2F;O (unlike FCFCS)&lt;/li&gt;
&lt;li&gt;Starvation is NOT possible&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/rr1.png&#34; alt=&#34;rr1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/rr2.png&#34; alt=&#34;rr2&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/rr3.png&#34; alt=&#34;rr3&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;4-Shortest-Remaining-Time-First-SRTF&#34;&gt;&lt;a href=&#34;#4-Shortest-Remaining-Time-First-SRTF&#34; class=&#34;headerlink&#34; title=&#34;4. Shortest Remaining Time First (SRTF)&#34;&gt;&lt;/a&gt;4. Shortest Remaining Time First (SRTF)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Chooses the process with the shortest CPU burst remaining and executes that one. If processes come in during execution that have less remaining time, the current one is preempted and the new one executed. Therefore, it can lead to starvation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Timeslicing&#34;&gt;&lt;a href=&#34;#Timeslicing&#34; class=&#34;headerlink&#34; title=&#34;Timeslicing&#34;&gt;&lt;/a&gt;Timeslicing&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Timeslice &amp;#x3D; max amount of uninterrupted time given to a task&lt;/li&gt;
&lt;li&gt;task may run less than timeslice&lt;ul&gt;
&lt;li&gt;has to wait on I&amp;#x2F;O sync&lt;ul&gt;
&lt;li&gt;will be placed on queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;higher priority task becomes runnable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;using timeslice tasks are interleaved&lt;ul&gt;
&lt;li&gt;timesharing the CPU&lt;/li&gt;
&lt;li&gt;CPU bound tasks &amp;#x3D;&amp;gt; preemption after timeslice&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/rr4.png&#34; alt=&#34;rr4&#34;&gt;    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Short tasks finish sooner&lt;/li&gt;
&lt;li&gt;More responsive&lt;/li&gt;
&lt;li&gt;Lengthy I&amp;#x2F;O operations initiated sooner&lt;ul&gt;
&lt;li&gt;best to keep timeslice &amp;gt; context-switch-time&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disdvantages&lt;/strong&gt;&lt;br&gt;    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overheads&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;How-long-should-a-timeslice-be-be&#34;&gt;&lt;a href=&#34;#How-long-should-a-timeslice-be-be&#34; class=&#34;headerlink&#34; title=&#34;How long should a timeslice be be?&#34;&gt;&lt;/a&gt;How long should a timeslice be be?&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;should balance benefits and overheads&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;For-CPU-bound-tasks&#34;&gt;&lt;a href=&#34;#For-CPU-bound-tasks&#34; class=&#34;headerlink&#34; title=&#34;For CPU bound tasks:&#34;&gt;&lt;/a&gt;For CPU bound tasks:&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/cputs.png&#34; alt=&#34;cputs&#34;&gt;    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hence, for CPU bound tasks, larger timeslice values are better&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;For-I-O-bound-tasks&#34;&gt;&lt;a href=&#34;#For-I-O-bound-tasks&#34; class=&#34;headerlink&#34; title=&#34;For I&amp;#x2F;O bound tasks:&#34;&gt;&lt;/a&gt;For I&amp;#x2F;O bound tasks:&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/iots.png&#34; alt=&#34;iots&#34;&gt;    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hence, for I&amp;#x2F;O bound tasks, smaller timeslice values are better&lt;ul&gt;
&lt;li&gt;Keeps CPU and I&amp;#x2F;P devices busy, I&amp;#x2F;O bound tasks run quickly, makes I&amp;#x2F;O requests responds to a user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Summary&#34;&gt;&lt;a href=&#34;#Summary&#34; class=&#34;headerlink&#34; title=&#34;Summary&#34;&gt;&lt;/a&gt;Summary&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;CPU bound tasks prefer longer timeslices&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;limits context switching overheads&lt;/li&gt;
&lt;li&gt;keeps CPU utilization and throughput&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I&amp;#x2F;O bound tasks prefer smaller timeslices &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;However, if all the tasks in contention are I&amp;#x2F;O bound, it may not make such a difference&lt;/li&gt;
&lt;li&gt;If a portion of them are I&amp;#x2F;O smaller timeslices keeps CPU and device utilization high&lt;/li&gt;
&lt;li&gt;Provides better user-perceived performance&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;



&lt;h1 id=&#34;Memory-Management&#34;&gt;&lt;a href=&#34;#Memory-Management&#34; class=&#34;headerlink&#34; title=&#34;Memory Management&#34;&gt;&lt;/a&gt;Memory Management&lt;/h1&gt;&lt;p&gt;Operating systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;uses intelligently size containers&lt;ul&gt;
&lt;li&gt;memory pages of segments&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Not all parts are needed at once &lt;ul&gt;
&lt;li&gt;tasks operate on subset of memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Optimized for performance&lt;ul&gt;
&lt;li&gt;reduce time to access state in memory&lt;ul&gt;
&lt;li&gt;leads to better performance!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Memory-Management-Goals&#34;&gt;&lt;a href=&#34;#Memory-Management-Goals&#34; class=&#34;headerlink&#34; title=&#34;Memory Management Goals&#34;&gt;&lt;/a&gt;Memory Management Goals&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/mmgoals.png&#34; alt=&#34;mmgoals.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Virtual-vs-Physical-memory&#34;&gt;&lt;a href=&#34;#Virtual-vs-Physical-memory&#34; class=&#34;headerlink&#34; title=&#34;Virtual vs Physical memory&#34;&gt;&lt;/a&gt;Virtual vs Physical memory&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Allocate &lt;ul&gt;
&lt;li&gt;allocation, replacement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Arbitrate&lt;ul&gt;
&lt;li&gt;address translation and validation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Page-based-Memory-Management&#34;&gt;&lt;a href=&#34;#Page-based-Memory-Management&#34; class=&#34;headerlink&#34; title=&#34;Page-based Memory Management&#34;&gt;&lt;/a&gt;Page-based Memory Management&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Allocate &amp;#x3D;&amp;gt; pages &amp;#x3D;&amp;gt; page frames&lt;/li&gt;
&lt;li&gt;Arbitrate &amp;#x3D;&amp;gt; page tables&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Segment-based-Memory-Management&#34;&gt;&lt;a href=&#34;#Segment-based-Memory-Management&#34; class=&#34;headerlink&#34; title=&#34;Segment-based Memory Management&#34;&gt;&lt;/a&gt;Segment-based Memory Management&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Allocate &amp;#x3D;&amp;gt; segments&lt;/li&gt;
&lt;li&gt;Arbitrate &amp;#x3D;&amp;gt; segment registers&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Hardware-Support&#34;&gt;&lt;a href=&#34;#Hardware-Support&#34; class=&#34;headerlink&#34; title=&#34;Hardware Support&#34;&gt;&lt;/a&gt;Hardware Support&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/hardwaresupport.png&#34; alt=&#34;hardwaresupport.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Memory-Management-Unit-MMU&#34;&gt;&lt;a href=&#34;#Memory-Management-Unit-MMU&#34; class=&#34;headerlink&#34; title=&#34;Memory Management Unit (MMU)&#34;&gt;&lt;/a&gt;Memory Management Unit (MMU)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;translate virtual to physical address &lt;/li&gt;
&lt;li&gt;reports faults (illegal access, permission, not present in memory)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Registers&#34;&gt;&lt;a href=&#34;#Registers&#34; class=&#34;headerlink&#34; title=&#34;Registers&#34;&gt;&lt;/a&gt;Registers&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;pointers to page tables&lt;/li&gt;
&lt;li&gt;base and limit size, number of segments&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Cache&#34;&gt;&lt;a href=&#34;#Cache&#34; class=&#34;headerlink&#34; title=&#34;Cache&#34;&gt;&lt;/a&gt;Cache&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Translation lookaside buffer&lt;/li&gt;
&lt;li&gt;Valid VA-PA translations using TLB&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Translation&#34;&gt;&lt;a href=&#34;#Translation&#34; class=&#34;headerlink&#34; title=&#34;Translation&#34;&gt;&lt;/a&gt;Translation&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Actual PA generation done in hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Page-Tables&#34;&gt;&lt;a href=&#34;#Page-Tables&#34; class=&#34;headerlink&#34; title=&#34;Page Tables&#34;&gt;&lt;/a&gt;Page Tables&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/pagetables.png&#34; alt=&#34;pagetables.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OS creates page table per process&lt;/li&gt;
&lt;li&gt;On context switch, switch to valid page table&lt;/li&gt;
&lt;li&gt;Updates register that points to correct page table.&lt;br&gt;  E.g CR3 on x86 architecture&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Page-Table-Entry-PTE&#34;&gt;&lt;a href=&#34;#Page-Table-Entry-PTE&#34; class=&#34;headerlink&#34; title=&#34;Page Table Entry (PTE)&#34;&gt;&lt;/a&gt;Page Table Entry (PTE)&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/pfn.png&#34; alt=&#34;pfn.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Flags&#34;&gt;&lt;a href=&#34;#Flags&#34; class=&#34;headerlink&#34; title=&#34;Flags&#34;&gt;&lt;/a&gt;Flags&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Present (valid&amp;#x2F;invalid)&lt;/li&gt;
&lt;li&gt;Dirty (written to)&lt;/li&gt;
&lt;li&gt;Accessed (for read or write)&lt;/li&gt;
&lt;li&gt;Protection bits &amp;#x3D;&amp;gt; RWX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Page-Table-Entry-on-x86&#34;&gt;&lt;a href=&#34;#Page-Table-Entry-on-x86&#34; class=&#34;headerlink&#34; title=&#34;Page Table Entry on x86&#34;&gt;&lt;/a&gt;Page Table Entry on x86&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/pfnx86.png&#34; alt=&#34;pfnx86.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Flags-1&#34;&gt;&lt;a href=&#34;#Flags-1&#34; class=&#34;headerlink&#34; title=&#34;Flags&#34;&gt;&lt;/a&gt;Flags&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Present &lt;/li&gt;
&lt;li&gt;Dirty &lt;/li&gt;
&lt;li&gt;Accessed&lt;/li&gt;
&lt;li&gt;R&amp;#x2F;W permission bit 0: R only, 1: R&amp;#x2F;W&lt;/li&gt;
&lt;li&gt;U&amp;#x2F;S permission bit 0: usermode, 1: superviser mode only&lt;/li&gt;
&lt;li&gt;others: caching related info (write through, caching disabled)&lt;/li&gt;
&lt;li&gt;unused: for future use&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Page-faults&#34;&gt;&lt;a href=&#34;#Page-faults&#34; class=&#34;headerlink&#34; title=&#34;Page faults&#34;&gt;&lt;/a&gt;Page faults&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/pagefaults.png&#34; alt=&#34;pagefaults.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Page-Table-Size&#34;&gt;&lt;a href=&#34;#Page-Table-Size&#34; class=&#34;headerlink&#34; title=&#34;Page Table Size&#34;&gt;&lt;/a&gt;Page Table Size&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/pts.png&#34; alt=&#34;pts.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;32 bit architecture&lt;ul&gt;
&lt;li&gt;Page Table Entry (PTE) &amp;#x3D; 4 Bytes, including PFN + flags&lt;/li&gt;
&lt;li&gt;Virtual Page Number (VPN) &amp;#x3D; 2^32&amp;#x2F;page_size&lt;/li&gt;
&lt;li&gt;Page size &amp;#x3D; 4KB (…8KB, 2MB, 4MB, 1GB)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore Page Table Size &amp;#x3D; (2^32 * 2^12)*4B &amp;#x3D; 4MB (per process)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 64 bit architecture&lt;ul&gt;
&lt;li&gt;Page Table Entry (PTE) &amp;#x3D; 8 Bytes&lt;/li&gt;
&lt;li&gt;Page size &amp;#x3D; 4KB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Page Table Size &amp;#x3D; (2^64 * 2^12)*8B &amp;#x3D; 32PB (per process!)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;processes don’t use entire address space&lt;/li&gt;
&lt;li&gt;even on 32 bit architecture, it will not always use all 4GB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But Page Table assumes an entry per VPN regardless, of whether corresponding virtual memory is needed or not.&lt;/p&gt;
&lt;h2 id=&#34;Hierarchical-Page-Tables&#34;&gt;&lt;a href=&#34;#Hierarchical-Page-Tables&#34; class=&#34;headerlink&#34; title=&#34;Hierarchical Page Tables&#34;&gt;&lt;/a&gt;Hierarchical Page Tables&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/hierarchicalpt.png&#34; alt=&#34;hierarchicalpt.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;On malloc, a new internal page table may be allocated.&lt;/p&gt;
&lt;h4 id=&#34;Address-split&#34;&gt;&lt;a href=&#34;#Address-split&#34; class=&#34;headerlink&#34; title=&#34;Address split:&#34;&gt;&lt;/a&gt;Address split:&lt;/h4&gt;&lt;table&gt;
  &lt;tr&gt;
    &lt;th colspan=&#34;2&#34;&gt;Page Number&lt;/th&gt;
    &lt;th&gt;offset&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;P1&lt;/td&gt;
    &lt;td&gt;P2&lt;/td&gt;
    &lt;td&gt;d&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;12&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;inner table addresses &amp;#x3D;&amp;gt; 2^10 * page_size &amp;#x3D; 2^10*2^10 &amp;#x3D; 1MB&lt;/li&gt;
&lt;li&gt;don’t need an inner table for each 1MB virtual memory gap&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additional Layers&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;page table directory pointer (3rd level)&lt;/li&gt;
&lt;li&gt;page table directory map (4th level)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Important on 64 bit architectures&lt;/li&gt;
&lt;li&gt;larger and more sparse &amp;#x3D;&amp;gt; larger gaps would save more internal page table components&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/hierarchicalpt2.png&#34; alt=&#34;hierarchicalpt2.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Tradeoffs-of-Multilevel-Page-Tables&#34;&gt;&lt;a href=&#34;#Tradeoffs-of-Multilevel-Page-Tables&#34; class=&#34;headerlink&#34; title=&#34;Tradeoffs of Multilevel Page Tables&#34;&gt;&lt;/a&gt;Tradeoffs of Multilevel Page Tables&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Smaller internal page tables&amp;#x2F;directories &lt;/li&gt;
&lt;li&gt;Granularity of coverage&lt;ul&gt;
&lt;li&gt;Potentially reduced page table size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;More memory accesses required for translation&lt;/li&gt;
&lt;li&gt;increased translation latency&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Overheads-of-Address-Translation&#34;&gt;&lt;a href=&#34;#Overheads-of-Address-Translation&#34; class=&#34;headerlink&#34; title=&#34;Overheads of Address Translation&#34;&gt;&lt;/a&gt;Overheads of Address Translation&lt;/h2&gt;&lt;p&gt;For each memory reference :&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Single level page table&lt;/th&gt;
&lt;th&gt;Four level page table&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;x1 access to PTE&lt;/td&gt;
&lt;td&gt;x4 accesses to PTE&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x1 access to mem&lt;/td&gt;
&lt;td&gt;x1 access to mem&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;which results in slowdown.&lt;/p&gt;
&lt;h2 id=&#34;Page-Table-Cache&#34;&gt;&lt;a href=&#34;#Page-Table-Cache&#34; class=&#34;headerlink&#34; title=&#34;Page Table Cache&#34;&gt;&lt;/a&gt;Page Table Cache&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/ptcache.png&#34; alt=&#34;ptcache.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Translation-Lookaside-Buffer&#34;&gt;&lt;a href=&#34;#Translation-Lookaside-Buffer&#34; class=&#34;headerlink&#34; title=&#34;Translation Lookaside Buffer&#34;&gt;&lt;/a&gt;Translation Lookaside Buffer&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;MMU level address translation cache&lt;/li&gt;
&lt;li&gt;On TLB miss &amp;#x3D;&amp;gt; page table access from memory&lt;/li&gt;
&lt;li&gt;has protection&amp;#x2F;validity bits&lt;/li&gt;
&lt;li&gt;small number of cached address &amp;#x3D;&amp;gt; high TLB hit rate&lt;ul&gt;
&lt;li&gt;temporal and spatial locality&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Example&lt;ul&gt;
&lt;li&gt;x86 Core i7&lt;ul&gt;
&lt;li&gt;per core : 64-entry data TLB &lt;br&gt; 128-entry instruction TLB &lt;/li&gt;
&lt;li&gt;512-entry shared second-level TLB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Inverted-Page-Tables&#34;&gt;&lt;a href=&#34;#Inverted-Page-Tables&#34; class=&#34;headerlink&#34; title=&#34;Inverted Page Tables&#34;&gt;&lt;/a&gt;Inverted Page Tables&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/invertedpt.png&#34; alt=&#34;invertedpt.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Hashing-Page-Tables&#34;&gt;&lt;a href=&#34;#Hashing-Page-Tables&#34; class=&#34;headerlink&#34; title=&#34;Hashing Page Tables&#34;&gt;&lt;/a&gt;Hashing Page Tables&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/hashingpt.png&#34; alt=&#34;hashingpt.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Segmentation&#34;&gt;&lt;a href=&#34;#Segmentation&#34; class=&#34;headerlink&#34; title=&#34;Segmentation&#34;&gt;&lt;/a&gt;Segmentation&lt;/h2&gt;&lt;p&gt;Segmentation is the process of mapping virtual to physical memory using segments.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Segments: arbitrary granularity (size)&lt;ul&gt;
&lt;li&gt;e.g. code, heap, data, stack..&lt;/li&gt;
&lt;li&gt;address &amp;#x3D; segment - selector + offset&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Segment&lt;ul&gt;
&lt;li&gt;contiguous physical memory&lt;/li&gt;
&lt;li&gt;segment size &amp;#x3D; segment base + limit registers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/segmentation.png&#34; alt=&#34;segmentation.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;Segmentation-Paging&#34;&gt;&lt;a href=&#34;#Segmentation-Paging&#34; class=&#34;headerlink&#34; title=&#34;Segmentation + Paging&#34;&gt;&lt;/a&gt;Segmentation + Paging&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/segmentationpaging.png&#34; alt=&#34;segmentationpaging.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Page-Size&#34;&gt;&lt;a href=&#34;#Page-Size&#34; class=&#34;headerlink&#34; title=&#34;Page Size&#34;&gt;&lt;/a&gt;Page Size&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;10 bit offset &amp;#x3D;&amp;gt; 1 KB page size [2^10]&lt;/li&gt;
&lt;li&gt;12 bit offset &amp;#x3D;&amp;gt; 4 KB page size [2^12]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In real world examples,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linux&amp;#x2F;x86 : 4 KB, 2MB, 1GB&lt;/li&gt;
&lt;li&gt;Solaris&amp;#x2F;Sparse: 8kB, 4MB, 2GB&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;||Large|Huge|&lt;br&gt;|—-|—–|&lt;br&gt;|page size|2 MB|1 GB|&lt;br&gt;|offset bits|21 bits|30 bits|&lt;br&gt;|reduction factor on page table size|x512|x1024|&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;larger pages&lt;ul&gt;
&lt;li&gt;fewer page table entries, smaller page tables, more TLB hits&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;internal fragmentation &amp;#x3D;&amp;gt; wastes memory&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Memory-Allocation&#34;&gt;&lt;a href=&#34;#Memory-Allocation&#34; class=&#34;headerlink&#34; title=&#34;Memory Allocation&#34;&gt;&lt;/a&gt;Memory Allocation&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Memory allocator&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;determines VA to PA mapping&lt;/li&gt;
&lt;li&gt;address translation, page tables&lt;br&gt;  &amp;#x3D;&amp;gt; simply determine PA from VA and check validity&amp;#x2F;permsissions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Kernel Level Allocators&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;kernel state, static process state&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;User Level Allocators&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;dynamic process state (heap), malloc&amp;#x2F;free&lt;/li&gt;
&lt;li&gt;e.g. d&amp;#x2F;malloc, jemalloc, Hoard, tcmalloc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Demand-Paging&#34;&gt;&lt;a href=&#34;#Demand-Paging&#34; class=&#34;headerlink&#34; title=&#34;Demand Paging&#34;&gt;&lt;/a&gt;Demand Paging&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Virtual Memory &amp;gt;&amp;gt; Physical Memory&lt;ul&gt;
&lt;li&gt;virtual memory page is not always in physical memory&lt;/li&gt;
&lt;li&gt;physical page frame saved and restored to&amp;#x2F;from secondary storage&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Demand-paging&#34;&gt;&lt;a href=&#34;#Demand-paging&#34; class=&#34;headerlink&#34; title=&#34;Demand paging:&#34;&gt;&lt;/a&gt;Demand paging:&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;pages swapped in&amp;#x2F;out of memory &amp;amp; a swap partition (e.g. on a disk)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/demandpaging.png&#34; alt=&#34;demandpaging.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Original PA !&amp;#x3D; PA after swapping&lt;ul&gt;
&lt;li&gt;if page is “pinned”, swapping is disabled&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;When-pages-should-be-swapped&#34;&gt;&lt;a href=&#34;#When-pages-should-be-swapped&#34; class=&#34;headerlink&#34; title=&#34;When pages should be swapped?&#34;&gt;&lt;/a&gt;When pages should be swapped?&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;page(out) daemon&lt;/li&gt;
&lt;li&gt;when memory usage is above threshold&lt;/li&gt;
&lt;li&gt;when CPU usage is below threshold&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Which-page-should-be-swapped-out&#34;&gt;&lt;a href=&#34;#Which-page-should-be-swapped-out&#34; class=&#34;headerlink&#34; title=&#34;Which page should be swapped out?&#34;&gt;&lt;/a&gt;Which page should be swapped out?&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;pages that won’t be used&lt;/li&gt;
&lt;li&gt;history based prediction&lt;ul&gt;
&lt;li&gt;Least Recently Used (LRU policy). Access bit tracks if page is referenced.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;page that don’t need to be written out&lt;ul&gt;
&lt;li&gt;Dirty bit to track if modified&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;avoid non-swappable pages&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Checkpointing&#34;&gt;&lt;a href=&#34;#Checkpointing&#34; class=&#34;headerlink&#34; title=&#34;Checkpointing&#34;&gt;&lt;/a&gt;Checkpointing&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Failure and Recovery management technique&lt;ul&gt;
&lt;li&gt;periodically save process state&lt;/li&gt;
&lt;li&gt;failure may be unavoidable but can restart from checkpoint, so recovery would be faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Simple-Approach&#34;&gt;&lt;a href=&#34;#Simple-Approach&#34; class=&#34;headerlink&#34; title=&#34;Simple Approach&#34;&gt;&lt;/a&gt;Simple Approach&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;pause and save&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Better-Approach&#34;&gt;&lt;a href=&#34;#Better-Approach&#34; class=&#34;headerlink&#34; title=&#34;Better Approach&#34;&gt;&lt;/a&gt;Better Approach&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;write-protect and copy everything at once &lt;/li&gt;
&lt;li&gt;copy diffs of dirties pages for incremental checkpoints&lt;ul&gt;
&lt;li&gt;rebuild from multiple diffs, or in background&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Checkpointing can also be used in other services:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Debugging&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rewind-Replay&lt;/li&gt;
&lt;li&gt;rewind &amp;#x3D; restart from checkpoint &lt;/li&gt;
&lt;li&gt;gradually go back to earlier checkpoints until error is found&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Migration&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;continue on another machine&lt;/li&gt;
&lt;li&gt;disaster recovery&lt;/li&gt;
&lt;li&gt;consolidation&lt;/li&gt;
&lt;li&gt;repeated checkpoints in a fast loop until pause and copy becomes acceptable (or unavoidable)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;


&lt;h1 id=&#34;Inter-Process-Communication&#34;&gt;&lt;a href=&#34;#Inter-Process-Communication&#34; class=&#34;headerlink&#34; title=&#34;Inter Process Communication&#34;&gt;&lt;/a&gt;Inter Process Communication&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Processes share memory&lt;ul&gt;
&lt;li&gt;data in shared messages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Processes exchange messages&lt;ul&gt;
&lt;li&gt;message passing via sockets&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Requires synchronization&lt;ul&gt;
&lt;li&gt;mutex, waiting&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Inter Process Communication&lt;/strong&gt;(IPC) is an OS supported mechanism for interaction among processes (coordination and communication)   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Message Passing&lt;ul&gt;
&lt;li&gt;e.g. sockets, pips, msgs, queues&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Memory based IPC &lt;ul&gt;
&lt;li&gt;shared memory, memory mapped files&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Higher level semantics&lt;ul&gt;
&lt;li&gt;files, &lt;a href=&#34;10-Remote-Procedure-Calls.md&#34;&gt;RPC&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Synchronization primitives&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Message-Passing&#34;&gt;&lt;a href=&#34;#Message-Passing&#34; class=&#34;headerlink&#34; title=&#34;Message Passing&#34;&gt;&lt;/a&gt;Message Passing&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Send&amp;#x2F;Receive messages &lt;/li&gt;
&lt;li&gt;OS creates and maintains a channel&lt;ul&gt;
&lt;li&gt;buffer, FIFO queue&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS provides interfaces to processes&lt;ul&gt;
&lt;li&gt;a port&lt;/li&gt;
&lt;li&gt;processes send&amp;#x2F;write messages to this port&lt;/li&gt;
&lt;li&gt;processes receive&amp;#x2F;read messages from this port&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/messagepassingipc.png&#34; alt=&#34;messagepassingipc.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Kernel required to &lt;ul&gt;
&lt;li&gt;establish communication&lt;/li&gt;
&lt;li&gt;perform each IPC operation&lt;/li&gt;
&lt;li&gt;send: system call + data copy&lt;/li&gt;
&lt;li&gt;receive: system call + data copy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Request-response:&lt;br&gt;  4x user&amp;#x2F; kernel crossings + &lt;br&gt;&lt;br&gt;  4x data copies&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;simplicity : kernel does channel management and synchronization&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt; &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Overheads&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Forms-of-Message-Passing-IPC&#34;&gt;&lt;a href=&#34;#Forms-of-Message-Passing-IPC&#34; class=&#34;headerlink&#34; title=&#34;Forms of Message Passing IPC&#34;&gt;&lt;/a&gt;Forms of Message Passing IPC&lt;/h3&gt;&lt;h4 id=&#34;1-Pipes&#34;&gt;&lt;a href=&#34;#1-Pipes&#34; class=&#34;headerlink&#34; title=&#34;1. Pipes&#34;&gt;&lt;/a&gt;1. Pipes&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Carry byte stream between 2 process&lt;/li&gt;
&lt;li&gt;e.g connect output from 1 process to input of another&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/pipes.png&#34; alt=&#34;pipes.png&#34;&gt;    &lt;/p&gt;
&lt;h4 id=&#34;2-Message-queues&#34;&gt;&lt;a href=&#34;#2-Message-queues&#34; class=&#34;headerlink&#34; title=&#34;2. Message queues&#34;&gt;&lt;/a&gt;2. Message queues&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Carry “messages” among processes&lt;/li&gt;
&lt;li&gt;OS management includes priorities, scheduling of message delivery &lt;/li&gt;
&lt;li&gt;APIs : Sys-V and POSIX&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/msgq.png&#34; alt=&#34;msgq.png&#34;&gt;        &lt;/p&gt;
&lt;h4 id=&#34;3-Sockets&#34;&gt;&lt;a href=&#34;#3-Sockets&#34; class=&#34;headerlink&#34; title=&#34;3. Sockets&#34;&gt;&lt;/a&gt;3. Sockets&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;send() and recv() : pass message buffers&lt;/li&gt;
&lt;li&gt;socket() : create kernel level socket buffer&lt;/li&gt;
&lt;li&gt;associated neccessary kernel processing (TCP-IP,..)&lt;/li&gt;
&lt;li&gt;If different machines, channel between processes and network devices&lt;/li&gt;
&lt;li&gt;If same machine, bypass full protocol stack&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/sockets.png&#34; alt=&#34;sockets.png&#34;&gt;        &lt;/p&gt;
&lt;h2 id=&#34;Shared-Memory-IPC&#34;&gt;&lt;a href=&#34;#Shared-Memory-IPC&#34; class=&#34;headerlink&#34; title=&#34;Shared Memory IPC&#34;&gt;&lt;/a&gt;Shared Memory IPC&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;read and write to shared memory region&lt;/li&gt;
&lt;li&gt;OS establishes shared channel between the processes&lt;ol&gt;
&lt;li&gt;physical pages mapped into virtual address space&lt;/li&gt;
&lt;li&gt;VA(P1) and VA(P2) map to same physical address&lt;/li&gt;
&lt;li&gt;VA(P1) !&amp;#x3D; VA(P2)&lt;/li&gt;
&lt;li&gt;physical mempry doesn’t need to be contiguous&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;APIs : SysV, POSIX, memory mapped files, Android ashmem&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/sharedmemoryipc.png&#34; alt=&#34;sharedmemoryipc.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System calls only for setup data copies potentially reduced (but not eliminated)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disdvantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;explicit synchronization&lt;/li&gt;
&lt;li&gt;communication protocol, shared buffer management&lt;ul&gt;
&lt;li&gt;programmer’s responsibility&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Which-is-better&#34;&gt;&lt;a href=&#34;#Which-is-better&#34; class=&#34;headerlink&#34; title=&#34;Which is better?&#34;&gt;&lt;/a&gt;Which is better?&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Overheads for&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Message Passing : must perform multiple copies&lt;/li&gt;
&lt;li&gt;Shared Memory : must establish all mappings among processes’ address space and shared memory pages&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Thus, it depends.&lt;/p&gt;
&lt;h2 id=&#34;Copy-vs-Map&#34;&gt;&lt;a href=&#34;#Copy-vs-Map&#34; class=&#34;headerlink&#34; title=&#34;Copy vs Map&#34;&gt;&lt;/a&gt;Copy vs Map&lt;/h2&gt;&lt;p&gt;Goal for both is to transfer data from one into target saddress space&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Copy (Message Passing)&lt;/th&gt;
&lt;th&gt;Map (Shared Memory)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;CPU cycles to copy data to&amp;#x2F;from port&lt;/td&gt;
&lt;td&gt;CPU cycles to map memory into address space&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CPU to copy data to channel&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;If channel setup once, use many times (good payoff)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Can perform well for 1 time use&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Large Data: t(Copy) &amp;gt;&amp;gt; t(Map)&lt;ul&gt;
&lt;li&gt;e.g. tradeoff exercised in Window “Local” Procedure Calls (LPC)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Shared-Memory-and-Synchronization&#34;&gt;&lt;a href=&#34;#Shared-Memory-and-Synchronization&#34; class=&#34;headerlink&#34; title=&#34;Shared Memory and Synchronization&#34;&gt;&lt;/a&gt;Shared Memory and Synchronization&lt;/h2&gt;&lt;p&gt;Use threads accessing shared state in a single addressing space, but for process&lt;/p&gt;
&lt;p&gt;Synchronization method:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;mechanism supported by processing threading library (pthreads)&lt;/li&gt;
&lt;li&gt;OS supported IPC for sync&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Either method must coordinate&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;no of concurrent access to shared segment&lt;/li&gt;
&lt;li&gt;when data is available and ready for consumption&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;IPC-Synchronization&#34;&gt;&lt;a href=&#34;#IPC-Synchronization&#34; class=&#34;headerlink&#34; title=&#34;IPC Synchronization&#34;&gt;&lt;/a&gt;IPC Synchronization&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Message Queues&lt;/th&gt;
&lt;th&gt;Semaphores&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Implement “mutual exclusion” via send&amp;#x2F;receive&lt;/td&gt;
&lt;td&gt;OS supported synchronization construct&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;binary construct (either allow process or not)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Like mutex, if value &amp;#x3D; 0, stop; if value &amp;#x3D; 1, decrement(lock) and proceed&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;


&lt;h1 id=&#34;Synchronization&#34;&gt;&lt;a href=&#34;#Synchronization&#34; class=&#34;headerlink&#34; title=&#34;Synchronization&#34;&gt;&lt;/a&gt;Synchronization&lt;/h1&gt;&lt;p&gt;Waiting for other processes, so that they can continue working together&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;may repeatedly check to continue&lt;ul&gt;
&lt;li&gt;sync using spinlocks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;may wait for a signal to continue&lt;ul&gt;
&lt;li&gt;sync using mutexes and condition vatiables&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;waiting hurts performance&lt;ul&gt;
&lt;li&gt;CPUs wste cycles for checking; cache effects&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Limitation-of-mutextes-and-condition-variables&#34;&gt;&lt;a href=&#34;#Limitation-of-mutextes-and-condition-variables&#34; class=&#34;headerlink&#34; title=&#34;Limitation of mutextes and condition variables&#34;&gt;&lt;/a&gt;Limitation of mutextes and condition variables&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Error prone&amp;#x2F;correctness&amp;#x2F;ease of use&lt;ul&gt;
&lt;li&gt;unlock wrong mutex, signal wrong condition variable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lack of expressive power&lt;ul&gt;
&lt;li&gt;helper variables for access or priority control&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Low-level support: hardware atmoic instructions&lt;/p&gt;
&lt;h2 id=&#34;Synchronization-constructs&#34;&gt;&lt;a href=&#34;#Synchronization-constructs&#34; class=&#34;headerlink&#34; title=&#34;Synchronization constructs&#34;&gt;&lt;/a&gt;Synchronization constructs&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Spinlocks (basic sync construct)&lt;ul&gt;
&lt;li&gt;Spinlock is like a mutex &lt;ul&gt;
&lt;li&gt;mutual exclusion&lt;/li&gt;
&lt;li&gt;lock and unlock(free)&lt;/li&gt;
&lt;li&gt;but, lock &amp;#x3D;&amp;#x3D; busy &amp;#x3D;&amp;gt; spinning&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Semaphores&lt;ul&gt;
&lt;li&gt;common sync construct in OS kernels&lt;/li&gt;
&lt;li&gt;like a traffic light: Stop and Go&lt;/li&gt;
&lt;li&gt;like mutex, but more general&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Semaphore &amp;#x3D;&amp;#x3D; integer value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;on init&lt;ul&gt;
&lt;li&gt;assigned a max value (positive int) &amp;#x3D;&amp;gt; max count&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;on try(wait)&lt;ul&gt;
&lt;li&gt;if non-zero, decrement and proceed &amp;#x3D;&amp;gt; counting semaphore&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;if initialized with 1&lt;ul&gt;
&lt;li&gt;semaphore &amp;#x3D;&amp;#x3D; mutex(binary semaphore)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;on exit(post)&lt;ul&gt;
&lt;li&gt;increment&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Syncing-different-types-of-accesses&#34;&gt;&lt;a href=&#34;#Syncing-different-types-of-accesses&#34; class=&#34;headerlink&#34; title=&#34;Syncing different types of accesses&#34;&gt;&lt;/a&gt;Syncing different types of accesses&lt;/h2&gt;&lt;h3 id=&#34;Reader-Writer-locks&#34;&gt;&lt;a href=&#34;#Reader-Writer-locks&#34; class=&#34;headerlink&#34; title=&#34;Reader&amp;#x2F;Writer locks&#34;&gt;&lt;/a&gt;Reader&amp;#x2F;Writer locks&lt;/h3&gt;&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;read (don&#39;t modify)&lt;/td&gt;
&lt;td&gt;write (always modify)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shared access&lt;/td&gt;
&lt;td&gt;exclusive access&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;RW locks&lt;ul&gt;
&lt;li&gt;specify type of access, then lock behaves accordingly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Monitors-highlevel-construct&#34;&gt;&lt;a href=&#34;#Monitors-highlevel-construct&#34; class=&#34;headerlink&#34; title=&#34;Monitors (highlevel construct)&#34;&gt;&lt;/a&gt;Monitors (highlevel construct)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;shared resource&lt;/li&gt;
&lt;li&gt;entry resource&lt;/li&gt;
&lt;li&gt;possible condition variables&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;On entry:&lt;ul&gt;
&lt;li&gt;lock, check&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;On exit:&lt;ul&gt;
&lt;li&gt;unlock, check, signal&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;More-synchroniaztion-constructs&#34;&gt;&lt;a href=&#34;#More-synchroniaztion-constructs&#34; class=&#34;headerlink&#34; title=&#34;More synchroniaztion constructs&#34;&gt;&lt;/a&gt;More synchroniaztion constructs&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;serializers&lt;/li&gt;
&lt;li&gt;path expressions&lt;/li&gt;
&lt;li&gt;barriers&lt;/li&gt;
&lt;li&gt;rendezvous points&lt;/li&gt;
&lt;li&gt;optimistic wait-free sync (RCU) [Read Copy Update]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All need hardware support.&lt;/p&gt;
&lt;h2 id=&#34;Need-for-hardware-support&#34;&gt;&lt;a href=&#34;#Need-for-hardware-support&#34; class=&#34;headerlink&#34; title=&#34;Need for hardware support&#34;&gt;&lt;/a&gt;Need for hardware support&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Problem &lt;ul&gt;
&lt;li&gt;concurrent check&amp;#x2F;update on different CPUs can overlap&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Atomic-instructions&#34;&gt;&lt;a href=&#34;#Atomic-instructions&#34; class=&#34;headerlink&#34; title=&#34;Atomic instructions&#34;&gt;&lt;/a&gt;Atomic instructions&lt;/h3&gt;&lt;p&gt; Critical section with hardware supported synchronization&lt;/p&gt;
&lt;h4 id=&#34;Hardware-specific&#34;&gt;&lt;a href=&#34;#Hardware-specific&#34; class=&#34;headerlink&#34; title=&#34;Hardware specific&#34;&gt;&lt;/a&gt;Hardware specific&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;test-and-set&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;returns(tests) original values and sets new-value!&amp;#x3D; 1 (busy) automatically&lt;/li&gt;
&lt;li&gt;first thread: test-and-set(lock) &amp;#x3D;&amp;gt; 0 : free&lt;/li&gt;
&lt;li&gt;next ones: test-and-set(lock) &amp;#x3D;&amp;gt; 1 busy&lt;ul&gt;
&lt;li&gt;reset lock to 1, but that’s okay&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; : Latency &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; : minimal (Atomic)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; : Delay potentially min&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; : Contention processors go to memory on each spin&lt;br&gt; - To reduce contention, introduce delay&lt;br&gt;   - Static(based on a fixed value) or Dynamic(backoff based, random delay)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;read-and-increment&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;compare-and-swap&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Guarantees&#34;&gt;&lt;a href=&#34;#Guarantees&#34; class=&#34;headerlink&#34; title=&#34;Guarantees&#34;&gt;&lt;/a&gt;Guarantees&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;atomicity&lt;/li&gt;
&lt;li&gt;mutual exclusion&lt;/li&gt;
&lt;li&gt;queue all concurrent instructions but one&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Shared-Memory-Multiprocessors&#34;&gt;&lt;a href=&#34;#Shared-Memory-Multiprocessors&#34; class=&#34;headerlink&#34; title=&#34;Shared Memory Multiprocessors&#34;&gt;&lt;/a&gt;Shared Memory Multiprocessors&lt;/h3&gt;&lt;p&gt;Also called symmetric multiprocessors (SMP)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/sharedmmmp.png&#34; alt=&#34;sharedmmmp&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Caches &lt;ul&gt;
&lt;li&gt;hide memory latency, “memory” further away due to contention&lt;/li&gt;
&lt;li&gt;no-write, write-through, write-back&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Cache-Coherence&#34;&gt;&lt;a href=&#34;#Cache-Coherence&#34; class=&#34;headerlink&#34; title=&#34;Cache Coherence&#34;&gt;&lt;/a&gt;Cache Coherence&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/cachecoherence.png&#34; alt=&#34;cachecoherence&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/cachecoherence2.png&#34; alt=&#34;cachecoherence2&#34;&gt;&lt;/p&gt;
&lt;hr&gt;

    
    
    
    
&lt;pre&gt;&lt;code&gt;# I/O Management
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Operating system&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Has protocols &lt;ul&gt;
&lt;li&gt;Interfaces for device I&amp;#x2F;O&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Has dedicated handlers&lt;ul&gt;
&lt;li&gt;Device drivers, interrupt handlers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Decouple I&amp;#x2F;O details from core processing&lt;ul&gt;
&lt;li&gt;abstract I&amp;#x2F;O device detail from applications&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;I-O-Device-Features&#34;&gt;&lt;a href=&#34;#I-O-Device-Features&#34; class=&#34;headerlink&#34; title=&#34;I&amp;#x2F;O Device Features&#34;&gt;&lt;/a&gt;I&amp;#x2F;O Device Features&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Control registers (accessed by CPU)&lt;ul&gt;
&lt;li&gt;Command&lt;/li&gt;
&lt;li&gt;Data Transfers&lt;/li&gt;
&lt;li&gt;Status&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Microcontroller : device’s CPU&lt;/li&gt;
&lt;li&gt;On device memory&lt;/li&gt;
&lt;li&gt;Other logic&lt;ul&gt;
&lt;li&gt;e.g. analog to digital&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Device-drivers&#34;&gt;&lt;a href=&#34;#Device-drivers&#34; class=&#34;headerlink&#34; title=&#34;Device drivers&#34;&gt;&lt;/a&gt;Device drivers&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;per each device type&lt;/li&gt;
&lt;li&gt;responsible for device access management and control&lt;/li&gt;
&lt;li&gt;provided by device manufacturers per OS &amp;#x2F;version&lt;/li&gt;
&lt;li&gt;each OS standardizes interfaces&lt;ul&gt;
&lt;li&gt;device independence&lt;/li&gt;
&lt;li&gt;device diversity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Types-of-devices&#34;&gt;&lt;a href=&#34;#Types-of-devices&#34; class=&#34;headerlink&#34; title=&#34;Types of devices&#34;&gt;&lt;/a&gt;Types of devices&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Block&lt;ul&gt;
&lt;li&gt;e.g. disk&lt;/li&gt;
&lt;li&gt;read&amp;#x2F;write blocks of data&lt;/li&gt;
&lt;li&gt;direct access to arbitrary block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Character&lt;ul&gt;
&lt;li&gt;e.g. keyboard&lt;/li&gt;
&lt;li&gt;get&amp;#x2F;put character&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Network devices&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OS representation of a device : special device file&lt;/p&gt;
&lt;p&gt;UNIX like systems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x2F;dev&lt;/li&gt;
&lt;li&gt;tmpfs&lt;/li&gt;
&lt;li&gt;devfs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Linux supports a number of pseudo “virtual” devices that provide special functionality to a system.&lt;/p&gt;
&lt;h2 id=&#34;CPU-device-interactions&#34;&gt;&lt;a href=&#34;#CPU-device-interactions&#34; class=&#34;headerlink&#34; title=&#34;CPU device interactions&#34;&gt;&lt;/a&gt;CPU device interactions&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/iointeractions.png&#34; alt=&#34;iointeractions.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;access device registers : memory load&amp;#x2F;store&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Memory mapped I&amp;#x2F;0&lt;ul&gt;
&lt;li&gt;part of ‘host’ physical memory dedicated for device interactions&lt;/li&gt;
&lt;li&gt;Base Address Registers (BAR)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I&amp;#x2F;O Port&lt;ul&gt;
&lt;li&gt;dedicated in low instructions for device access&lt;/li&gt;
&lt;li&gt;target device (I&amp;#x2F;0 port) and value in register&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Path-from-Device-to-CPU&#34;&gt;&lt;a href=&#34;#Path-from-Device-to-CPU&#34; class=&#34;headerlink&#34; title=&#34;Path from Device to CPU&#34;&gt;&lt;/a&gt;Path from Device to CPU&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Interrupt&lt;ul&gt;
&lt;li&gt;Overhead: Interrupt handling steps&lt;/li&gt;
&lt;li&gt;+: Can be generated as soon as possible&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Polling&lt;ul&gt;
&lt;li&gt;Overhead: Delay or CPU overhead&lt;/li&gt;
&lt;li&gt;when convenient for OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Device-access-Programmed-I-O-PIO&#34;&gt;&lt;a href=&#34;#Device-access-Programmed-I-O-PIO&#34; class=&#34;headerlink&#34; title=&#34;Device access : Programmed I&amp;#x2F;O (PIO)&#34;&gt;&lt;/a&gt;Device access : Programmed I&amp;#x2F;O (PIO)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;No additional hardware support&lt;/li&gt;
&lt;li&gt;CPU “programs” the device&lt;ul&gt;
&lt;li&gt;via command registers&lt;/li&gt;
&lt;li&gt;data movement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;E.g. NIC(Network Interface Card)&lt;ul&gt;
&lt;li&gt;data &amp;#x3D; network packet&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write command to request packet information&lt;/li&gt;
&lt;li&gt;Copy packet to data registers&lt;/li&gt;
&lt;li&gt;Repeat until packet sent&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E.g. 1500B packet; 8 byte registers or bus &amp;#x3D;&amp;gt; 1(for bus command) + 188(for data) &amp;#x3D; 189 CPU store instructions&lt;/p&gt;
&lt;h2 id=&#34;Direct-Memory-Access-DMA&#34;&gt;&lt;a href=&#34;#Direct-Memory-Access-DMA&#34; class=&#34;headerlink&#34; title=&#34;Direct Memory Access (DMA)&#34;&gt;&lt;/a&gt;Direct Memory Access (DMA)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Relies on DMA controller&lt;/li&gt;
&lt;li&gt;CPU “programs” the device&lt;ul&gt;
&lt;li&gt;via command registers&lt;/li&gt;
&lt;li&gt;via DMA controls&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;E.g. NIC (data &amp;#x3D; network packet)&lt;/li&gt;
&lt;li&gt;Write command to request packet information&lt;/li&gt;
&lt;li&gt;Configure DMA controller with in memory address and size of packet buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;E.g. 1500B packet; 8 byte registers or bus &amp;#x3D;&amp;gt; 1(for bus command) + 1(for DMA configuration) &amp;#x3D; total 2 CPU store instructions. Less steps, but DMA configuration is more complex.&lt;/p&gt;
&lt;p&gt;For DMAs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;data buffer must be in physical memory until transfer completes&lt;/li&gt;
&lt;li&gt;pinning regions (non-swappable)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Typical-Device-Access&#34;&gt;&lt;a href=&#34;#Typical-Device-Access&#34; class=&#34;headerlink&#34; title=&#34;Typical Device Access&#34;&gt;&lt;/a&gt;Typical Device Access&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/typicaldeviceaccess.png&#34; alt=&#34;typicaldeviceaccess.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;System call&lt;/li&gt;
&lt;li&gt;In-kernel stack&lt;/li&gt;
&lt;li&gt;Driver Invocation&lt;/li&gt;
&lt;li&gt;Device request configuration&lt;/li&gt;
&lt;li&gt;Device performs request&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;OS-bypass&#34;&gt;&lt;a href=&#34;#OS-bypass&#34; class=&#34;headerlink&#34; title=&#34;OS bypass&#34;&gt;&lt;/a&gt;OS bypass&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/osbypass.png&#34; alt=&#34;osbypass.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;device registers&amp;#x2F;data&lt;ul&gt;
&lt;li&gt;directly available&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS configures&lt;ul&gt;
&lt;li&gt;then gets out of the way&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;“user level driver”&lt;ul&gt;
&lt;li&gt;in library&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS retains coarse-grain control&lt;/li&gt;
&lt;li&gt;relies on device features&lt;ul&gt;
&lt;li&gt;sufficient registers&lt;/li&gt;
&lt;li&gt;demux capability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;What-happens-to-a-calling-thread&#34;&gt;&lt;a href=&#34;#What-happens-to-a-calling-thread&#34; class=&#34;headerlink&#34; title=&#34;What happens to a calling thread?&#34;&gt;&lt;/a&gt;What happens to a calling thread?&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/access.png&#34; alt=&#34;access.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronous I&amp;#x2F;O operations&lt;ul&gt;
&lt;li&gt;process blocks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Asynchronous I&amp;#x2F;O operations&lt;ul&gt;
&lt;li&gt;process continues&lt;/li&gt;
&lt;li&gt;Later, process checks and retrieves result&lt;/li&gt;
&lt;li&gt;OR&lt;/li&gt;
&lt;li&gt;process is notified that operation is completed and results are ready&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Block-Device-Stack&#34;&gt;&lt;a href=&#34;#Block-Device-Stack&#34; class=&#34;headerlink&#34; title=&#34;Block Device Stack&#34;&gt;&lt;/a&gt;Block Device Stack&lt;/h2&gt;&lt;p&gt;Block device typical storage for files:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/blockdevicestack.png&#34; alt=&#34;blockdevicestack.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;processes use files &amp;#x3D;&amp;gt; logical storage unit&lt;/li&gt;
&lt;li&gt;kernel file system (KFS)&lt;ul&gt;
&lt;li&gt;where how to find and access file&lt;/li&gt;
&lt;li&gt;OS specifies interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;generic block layer&lt;ul&gt;
&lt;li&gt;OS standardized block interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Device driver&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Virtual-File-System&#34;&gt;&lt;a href=&#34;#Virtual-File-System&#34; class=&#34;headerlink&#34; title=&#34;Virtual File System&#34;&gt;&lt;/a&gt;Virtual File System&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/vfs.png&#34; alt=&#34;vfs.png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;Virtual-File-System-Abstractions&#34;&gt;&lt;a href=&#34;#Virtual-File-System-Abstractions&#34; class=&#34;headerlink&#34; title=&#34;Virtual File System Abstractions&#34;&gt;&lt;/a&gt;Virtual File System Abstractions&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;File : Elements on which the VFS operates&lt;/li&gt;
&lt;li&gt;File Descriptor : OS representation of file&lt;ul&gt;
&lt;li&gt;open, read, write, send file , lock, close&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;inode : Persistent representation of file “index”&lt;ul&gt;
&lt;li&gt;list of all data blocks&lt;/li&gt;
&lt;li&gt;device, permissions, size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;dentry : Directory entry, corresponding to the single path component, &lt;ul&gt;
&lt;li&gt;dentry cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;super block : file system specific information regarding the File System layout&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;VFS-on-disk&#34;&gt;&lt;a href=&#34;#VFS-on-disk&#34; class=&#34;headerlink&#34; title=&#34;VFS on disk&#34;&gt;&lt;/a&gt;VFS on disk&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;File : data blocks on disk&lt;/li&gt;
&lt;li&gt;inode : track file blocks&lt;ul&gt;
&lt;li&gt;also resides on disk in some block&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;super block : overall map of disk blocks&lt;ul&gt;
&lt;li&gt;inode blocks&lt;/li&gt;
&lt;li&gt;data blocks&lt;/li&gt;
&lt;li&gt;free blocks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Inodes&#34;&gt;&lt;a href=&#34;#Inodes&#34; class=&#34;headerlink&#34; title=&#34;Inodes&#34;&gt;&lt;/a&gt;Inodes&lt;/h3&gt;&lt;p&gt;Index of all disk blocks corresponding to a file&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;File : identified by inode&lt;/li&gt;
&lt;li&gt;inode : list of all blocks + other metadata&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt;: Easy to perform sequential or random access&lt;br&gt;&lt;br&gt;&lt;strong&gt;-&lt;/strong&gt;: Limit on file size&lt;/p&gt;
&lt;h3 id=&#34;Inodes-with-indirect-pointers&#34;&gt;&lt;a href=&#34;#Inodes-with-indirect-pointers&#34; class=&#34;headerlink&#34; title=&#34;Inodes with indirect pointers&#34;&gt;&lt;/a&gt;Inodes with indirect pointers&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Index of all disk blocks corresponding to a file&lt;/li&gt;
&lt;li&gt;Index contain:&lt;ul&gt;
&lt;li&gt;metadata&lt;/li&gt;
&lt;li&gt;pointers to blocks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Direct pointer : Points to data block&lt;ul&gt;
&lt;li&gt;1 KB per entry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Indirect pointer : Points to block of pointers&lt;ul&gt;
&lt;li&gt;256 KB per entry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Double Indirect pointer : Points to block of block of pointers&lt;ul&gt;
&lt;li&gt;64 MB per entry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt;: Small inode &amp;#x3D;&amp;gt; large file size&lt;br&gt;&lt;br&gt;&lt;strong&gt;-&lt;/strong&gt;: File access slowdown&lt;/p&gt;
&lt;h2 id=&#34;Disk-access-optimizations&#34;&gt;&lt;a href=&#34;#Disk-access-optimizations&#34; class=&#34;headerlink&#34; title=&#34;Disk access optimizations&#34;&gt;&lt;/a&gt;Disk access optimizations&lt;/h2&gt;&lt;p&gt;Reducing file access overheads&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Caching&amp;#x2F;buffering : reducenumber of disk accesses&lt;ul&gt;
&lt;li&gt;buffer cache in main menu&lt;/li&gt;
&lt;li&gt;read&amp;#x2F;write from cache&lt;/li&gt;
&lt;li&gt;periodically flush to disk - fsync()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I&amp;#x2F;O scheduling : reduce disk head movement&lt;ul&gt;
&lt;li&gt;maximize sequential vs random access&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Prefetching : increases cache hits&lt;ul&gt;
&lt;li&gt;leverages locality&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Journaling&amp;#x2F;logging: reduce random access (ext3, ext4)&lt;ul&gt;
&lt;li&gt;“describe” write in log : block, offset, value..&lt;/li&gt;
&lt;li&gt;periodically apply updates to proper disk locations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;    
 
    
&lt;pre&gt;&lt;code&gt;# Virtualization
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Virtualization allows concurrent execution of multiple OSs and their applications on the same physical machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/virtualization.png&#34; alt=&#34;virtualization.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Virtual resources : each OS thinks that ot “owns” hardware resources&lt;/li&gt;
&lt;li&gt;Virtual machine (VM) : OS + applications + virtual resources (guest domain)&lt;/li&gt;
&lt;li&gt;Virtualization layer : management of physical hardware (virtual machine monitor, hypervisor)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Defining-Virtual-Machine&#34;&gt;&lt;a href=&#34;#Defining-Virtual-Machine&#34; class=&#34;headerlink&#34; title=&#34;Defining Virtual Machine&#34;&gt;&lt;/a&gt;Defining Virtual Machine&lt;/h2&gt;&lt;p&gt;A Virtual Machine is an efficient, isolated duplicate of the real machine.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supported by a Virtual Machine Monitor (VMM):&lt;ol&gt;
&lt;li&gt;provides environment essentially identical with the original machine&lt;/li&gt;
&lt;li&gt;programs show only minor decrease in speed at worst&lt;/li&gt;
&lt;li&gt;VMM is in complete control of the system resources&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;VMM-goals&#34;&gt;&lt;a href=&#34;#VMM-goals&#34; class=&#34;headerlink&#34; title=&#34;VMM goals&#34;&gt;&lt;/a&gt;VMM goals&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Fidelity&lt;/li&gt;
&lt;li&gt;Performance&lt;/li&gt;
&lt;li&gt;Safety and Isolation&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Virtualization-advantages&#34;&gt;&lt;a href=&#34;#Virtualization-advantages&#34; class=&#34;headerlink&#34; title=&#34;Virtualization advantages&#34;&gt;&lt;/a&gt;Virtualization advantages&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;consolidation&lt;ul&gt;
&lt;li&gt;decrease cost, improve manageability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;migration&lt;ul&gt;
&lt;li&gt;availibility, reliability&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;security, debugging, support for legacy OS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Two-main-Virtualization-Models&#34;&gt;&lt;a href=&#34;#Two-main-Virtualization-Models&#34; class=&#34;headerlink&#34; title=&#34;Two main Virtualization Models:&#34;&gt;&lt;/a&gt;Two main Virtualization Models:&lt;/h2&gt;&lt;h3 id=&#34;1-Bare-metal-or-Hypervisor-based-Type-1&#34;&gt;&lt;a href=&#34;#1-Bare-metal-or-Hypervisor-based-Type-1&#34; class=&#34;headerlink&#34; title=&#34;1. Bare-metal or Hypervisor based (Type 1)&#34;&gt;&lt;/a&gt;1. Bare-metal or Hypervisor based (Type 1)&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/hypervisor.png&#34; alt=&#34;hypervisor.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VMM (hypervisor) manages all hardware resources abd supports execution of VMs&lt;/li&gt;
&lt;li&gt;privileged, secure VM to deal with devices (and other configuration and management tasks)&lt;/li&gt;
&lt;li&gt;Adopted by Xen(Opensource or Citriol Xen Server) and ESX (VMware)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-Hosted-Type-2&#34;&gt;&lt;a href=&#34;#1-Hosted-Type-2&#34; class=&#34;headerlink&#34; title=&#34;1. Hosted (Type 2)&#34;&gt;&lt;/a&gt;1. Hosted (Type 2)&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/hosted.png&#34; alt=&#34;hosted.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Host owns all hardware&lt;/li&gt;
&lt;li&gt;Special VMM modle provides hardware interfaces to VMs and deals with VM context switching&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Virtualization-requirements&#34;&gt;&lt;a href=&#34;#Virtualization-requirements&#34; class=&#34;headerlink&#34; title=&#34;Virtualization requirements&#34;&gt;&lt;/a&gt;Virtualization requirements&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Present virtual platform interface to VMs&lt;ul&gt;
&lt;li&gt;virtualize CPU, memory, devices&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Provide isolation across VMs&lt;ul&gt;
&lt;li&gt;preemption, MMU for address translation and validation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protect guest OS from applications&lt;ul&gt;
&lt;li&gt;can’t run guest OS and applications at same protection level&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Protect VMs from guest OS&lt;ul&gt;
&lt;li&gt;can’t run guest OS and VMMs at same protection level&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Hardware-protection-levels&#34;&gt;&lt;a href=&#34;#Hardware-protection-levels&#34; class=&#34;headerlink&#34; title=&#34;Hardware protection levels&#34;&gt;&lt;/a&gt;Hardware protection levels&lt;/h2&gt;&lt;p&gt;Commodity hardware has more than two protection levels&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/hwprotectionlevels.png&#34; alt=&#34;hwprotectionlevels&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x86 has 4 protection levels (rings)&lt;ul&gt;
&lt;li&gt;ring 3 : lowest privilege (applications)&lt;/li&gt;
&lt;li&gt;ring 1 : OS&lt;/li&gt;
&lt;li&gt;ring 0 : highest privilege (hypervisor)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;and 2 protection modes&lt;ul&gt;
&lt;li&gt;non root : VMs &lt;ul&gt;
&lt;li&gt;ring 3 : apps&lt;/li&gt;
&lt;li&gt;ring 0 : OS&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;root : &lt;ul&gt;
&lt;li&gt;ring 0 : hypervisor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Process-Virtualization-Trap-and-Emulate&#34;&gt;&lt;a href=&#34;#Process-Virtualization-Trap-and-Emulate&#34; class=&#34;headerlink&#34; title=&#34;Process Virtualization (Trap-and-Emulate)&#34;&gt;&lt;/a&gt;Process Virtualization (Trap-and-Emulate)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Guest instruments&lt;ul&gt;
&lt;li&gt;executed directly by hardware&lt;/li&gt;
&lt;li&gt;for non-privileged operations : hardware speeds &amp;#x3D;&amp;gt; efficiency&lt;/li&gt;
&lt;li&gt;for privileged operations : trap to hypervisor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hypervisor determines what needs to be done:&lt;ul&gt;
&lt;li&gt;if illegal operation : terminate VM&lt;/li&gt;
&lt;li&gt;if legal operation : emulate the behaviour the guest OS was expecting from the hardware&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Problems-with-Trap-and-Emulate&#34;&gt;&lt;a href=&#34;#Problems-with-Trap-and-Emulate&#34; class=&#34;headerlink&#34; title=&#34;Problems with Trap-and-Emulate&#34;&gt;&lt;/a&gt;Problems with Trap-and-Emulate&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;17 privileged information do not trao but fail silently&lt;/li&gt;
&lt;li&gt;Hypervisor doesn’t know, so it doesn’t try to change settings&lt;/li&gt;
&lt;li&gt;OS doesn’t know, so assumes change was successful&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Binary-Translation&#34;&gt;&lt;a href=&#34;#Binary-Translation&#34; class=&#34;headerlink&#34; title=&#34;Binary Translation&#34;&gt;&lt;/a&gt;Binary Translation&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt; : Full Virtualization i.e. guest OS is not modified&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt; : Dynamic Binary Translation&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Inspect code blocks to be executed&lt;/li&gt;
&lt;li&gt;If needed, translate to alternate instruction sequence&lt;ul&gt;
&lt;li&gt;e.g. to emulate desired behaviour, possibly avoid traps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Otherwise run at hardware speeds&lt;ul&gt;
&lt;li&gt;cache translated blocks to ammortize translation costs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Paravirtualization&#34;&gt;&lt;a href=&#34;#Paravirtualization&#34; class=&#34;headerlink&#34; title=&#34;Paravirtualization&#34;&gt;&lt;/a&gt;Paravirtualization&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt; : Performance; give up on modified guest OSs&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt; : Paravirtualization : modify guest OSs so that &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;it knows it is running virtualized&lt;/li&gt;
&lt;li&gt;it makes explicit calls to hyperisor (hypercalls)&lt;/li&gt;
&lt;li&gt;hypercalls (~ system calls)&lt;ul&gt;
&lt;li&gt;package context information&lt;/li&gt;
&lt;li&gt;specify desired hypercall&lt;/li&gt;
&lt;li&gt;trap to VMM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Xen : opensource hypervisor&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Memory-virtualization&#34;&gt;&lt;a href=&#34;#Memory-virtualization&#34; class=&#34;headerlink&#34; title=&#34;Memory virtualization&#34;&gt;&lt;/a&gt;Memory virtualization&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Full virtualization&lt;ul&gt;
&lt;li&gt;all guests expect contiguous physical memory starting at 0&lt;/li&gt;
&lt;li&gt;virtual vs physical vs machine addresses and page frame numbers&lt;/li&gt;
&lt;li&gt;still leverages hardware (MMU, TLB..)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option 1&lt;ul&gt;
&lt;li&gt;guest page table : VA &amp;#x3D;&amp;gt; PA&lt;/li&gt;
&lt;li&gt;hypervisor : PA &amp;#x3D;&amp;gt; MA&lt;/li&gt;
&lt;li&gt;too expensive!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Option 2&lt;ul&gt;
&lt;li&gt;guest page tables : VA &amp;#x3D;&amp;gt; PA&lt;/li&gt;
&lt;li&gt;hypervisor shadow PT : VA &amp;#x3D;&amp;gt; MA&lt;/li&gt;
&lt;li&gt;hypervisor maintains consistence&lt;ul&gt;
&lt;li&gt;e.g. invalidate on context switch, write protect guest PT to track new mappings&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Paravirtualized &lt;ul&gt;
&lt;li&gt;guest aware of virtualization&lt;/li&gt;
&lt;li&gt;no longer strict requirement on contiguous physical memory starting at 0&lt;/li&gt;
&lt;li&gt;explicitly registers page tables with hypervisor&lt;/li&gt;
&lt;li&gt;can “batch” page tables updates to reduce VM exits&lt;/li&gt;
&lt;li&gt;other optimazations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Overheads eliminated or reduced on newer platforms&lt;/p&gt;
&lt;h2 id=&#34;Device-Virtualization&#34;&gt;&lt;a href=&#34;#Device-Virtualization&#34; class=&#34;headerlink&#34; title=&#34;Device Virtualization&#34;&gt;&lt;/a&gt;Device Virtualization&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;For CPUs and Memory&lt;ul&gt;
&lt;li&gt;less diversity, Intruction-Set-Architecture(ISA) level&lt;/li&gt;
&lt;li&gt;Standardization of interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For Devices&lt;ul&gt;
&lt;li&gt;high diversity&lt;/li&gt;
&lt;li&gt;lack of standard specification of device interface and behaviour&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;3-key-models-for-Device-Virtualization&#34;&gt;&lt;a href=&#34;#3-key-models-for-Device-Virtualization&#34; class=&#34;headerlink&#34; title=&#34;3 key models for Device Virtualization:&#34;&gt;&lt;/a&gt;3 key models for Device Virtualization:&lt;/h4&gt;&lt;h3 id=&#34;1-Pass-through-model&#34;&gt;&lt;a href=&#34;#1-Pass-through-model&#34; class=&#34;headerlink&#34; title=&#34;1. Pass through model&#34;&gt;&lt;/a&gt;1. Pass through model&lt;/h3&gt;&lt;p&gt;Approach: VMM-level-driver configures device access permissions&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/passthrough.png&#34; alt=&#34;passthrough.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VM provided with exclusive and direct (VMM bypass) access to the device&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device sharing difficult&lt;/li&gt;
&lt;li&gt;VMM must have exact type of device as what VM expects&lt;/li&gt;
&lt;li&gt;VM migration tricky&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-Hypervisor-Direct-model&#34;&gt;&lt;a href=&#34;#2-Hypervisor-Direct-model&#34; class=&#34;headerlink&#34; title=&#34;2. Hypervisor - Direct model&#34;&gt;&lt;/a&gt;2. Hypervisor - Direct model&lt;/h3&gt;&lt;p&gt;Approach: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VMM interrupts all device accesses&lt;/li&gt;
&lt;li&gt;Emulate device operations&lt;ul&gt;
&lt;li&gt;translate to generic I&amp;#x2F;O operations&lt;/li&gt;
&lt;li&gt;traverse VMM-resident I&amp;#x2F;O stack&lt;/li&gt;
&lt;li&gt;invoke VMM-resident driver&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/hypervisordirect.png&#34; alt=&#34;hypervisordirect.png&#34;&gt;    &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VM decoupled from physical device&lt;/li&gt;
&lt;li&gt;Sharing, migration, dealing with device specifics&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Latency of device operations&lt;/li&gt;
&lt;li&gt;Device driver ecosystem complexities in Hypervisor&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-Split-Device-Driver-model&#34;&gt;&lt;a href=&#34;#3-Split-Device-Driver-model&#34; class=&#34;headerlink&#34; title=&#34;3. Split Device-Driver model&#34;&gt;&lt;/a&gt;3. Split Device-Driver model&lt;/h3&gt;&lt;p&gt;Approach: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Device access control split between&lt;/li&gt;
&lt;li&gt;Emulate device operations&lt;ul&gt;
&lt;li&gt;front-end driver in guest VM (device API)&lt;/li&gt;
&lt;li&gt;back-end driver in service VM (or Host)&lt;/li&gt;
&lt;li&gt;modified guest drivers&lt;ul&gt;
&lt;li&gt;i.e. limited to paravirtualized guests&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/splitdevicedriver.png&#34; alt=&#34;splitdevicedriver.png&#34;&gt;          &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Eliminate emulation overhead&lt;/li&gt;
&lt;li&gt;Allow for better management of shared devices&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;



&lt;h1 id=&#34;Remote-Procedure-Calls&#34;&gt;&lt;a href=&#34;#Remote-Procedure-Calls&#34; class=&#34;headerlink&#34; title=&#34;Remote Procedure Calls&#34;&gt;&lt;/a&gt;Remote Procedure Calls&lt;/h1&gt;&lt;p&gt;Example : GetFile App&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client Server&lt;/li&gt;
&lt;li&gt;Create and init sockets&lt;/li&gt;
&lt;li&gt;Allocate and populate buffers&lt;/li&gt;
&lt;li&gt;Include ‘protocol’ info&lt;ul&gt;
&lt;li&gt;GetFile, size&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Copy data into buffers&lt;ul&gt;
&lt;li&gt;filename, file&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;common steps related to remote IPC&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Remote-Procedure-Calls-RPC&#34;&gt;&lt;a href=&#34;#Remote-Procedure-Calls-RPC&#34; class=&#34;headerlink&#34; title=&#34;Remote Procedure Calls (RPC)&#34;&gt;&lt;/a&gt;Remote Procedure Calls (RPC)&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Intended to simplify the development of cross address space and cross machine interactions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt; Higher-level interface for data movement and communication&lt;br&gt;&lt;br&gt;&lt;strong&gt;+&lt;/strong&gt; Error handling&lt;br&gt;&lt;br&gt;&lt;strong&gt;+&lt;/strong&gt; Hiding complexities of cross machine interactions&lt;/p&gt;
&lt;h2 id=&#34;RPC-requirements&#34;&gt;&lt;a href=&#34;#RPC-requirements&#34; class=&#34;headerlink&#34; title=&#34;RPC requirements&#34;&gt;&lt;/a&gt;RPC requirements&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/rpcrequirements.png&#34; alt=&#34;rpcrequirements&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client&amp;#x2F;Server interactions&lt;/li&gt;
&lt;li&gt;Procedure Call Interface &amp;#x3D;&amp;gt; RPC&lt;ul&gt;
&lt;li&gt;sync call semantics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Type checking &lt;ul&gt;
&lt;li&gt;error handling &lt;/li&gt;
&lt;li&gt;packet bytes interpretation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cross machine conversion&lt;ul&gt;
&lt;li&gt;e.g. big&amp;#x2F;little endian&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Higher level protocol&lt;ul&gt;
&lt;li&gt;access control, fault tolerance, different transport protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Structure-of-RPC&#34;&gt;&lt;a href=&#34;#Structure-of-RPC&#34; class=&#34;headerlink&#34; title=&#34;Structure of RPC&#34;&gt;&lt;/a&gt;Structure of RPC&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/rpcstructure.png&#34; alt=&#34;rpcstructure&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;RPC-Steps&#34;&gt;&lt;a href=&#34;#RPC-Steps&#34; class=&#34;headerlink&#34; title=&#34;RPC Steps:&#34;&gt;&lt;/a&gt;RPC Steps:&lt;/h2&gt;&lt;p&gt;(-1.) register : server registers procedure, arg types, location&lt;br&gt;&lt;br&gt;(0.) bind : client finds and binds to desired server&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;call : client make RPC call; control passed to stub, client code blocks&lt;/li&gt;
&lt;li&gt;marshal : client stub “marshals” args (serialize args into buffer)&lt;/li&gt;
&lt;li&gt;send : client sends message to server&lt;/li&gt;
&lt;li&gt;receive : server receives message; passes message to server stub; access control&lt;/li&gt;
&lt;li&gt;unmarshal : server stub “unmarshals” args (extract args from buffer)&lt;/li&gt;
&lt;li&gt;actual call : server stub calls local procedure implementation&lt;/li&gt;
&lt;li&gt;result : server performs operation and computes result of RPC operation&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(same on return &amp;lt;&amp;#x3D;)&lt;/p&gt;
&lt;h2 id=&#34;Interface-definition-Language-IDL&#34;&gt;&lt;a href=&#34;#Interface-definition-Language-IDL&#34; class=&#34;headerlink&#34; title=&#34;Interface definition Language (IDL)&#34;&gt;&lt;/a&gt;Interface definition Language (IDL)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Used to describe the interface the server expects&lt;ul&gt;
&lt;li&gt;procedure name, args, 2 result types&lt;/li&gt;
&lt;li&gt;version number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;RPC can use IDL that is &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Language agnostic&lt;ul&gt;
&lt;li&gt;XDR in SunRPC&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Language specific&lt;ul&gt;
&lt;li&gt;Java in JavaRMI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Marshalling&#34;&gt;&lt;a href=&#34;#Marshalling&#34; class=&#34;headerlink&#34; title=&#34;Marshalling&#34;&gt;&lt;/a&gt;Marshalling&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/marshalling.png&#34; alt=&#34;Marshalling&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Unmarshalling&#34;&gt;&lt;a href=&#34;#Unmarshalling&#34; class=&#34;headerlink&#34; title=&#34;Unmarshalling&#34;&gt;&lt;/a&gt;Unmarshalling&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/unmarshalling.png&#34; alt=&#34;Unmarshalling&#34;&gt;&lt;/p&gt;
&lt;p&gt;Marshalling&amp;#x2F;Unmarshalling routines are provided by RPC system compiler.&lt;/p&gt;
&lt;h2 id=&#34;Binding-and-Registry&#34;&gt;&lt;a href=&#34;#Binding-and-Registry&#34; class=&#34;headerlink&#34; title=&#34;Binding and Registry&#34;&gt;&lt;/a&gt;Binding and Registry&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Client determines&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;which&lt;/strong&gt; server to connect to?&lt;ul&gt;
&lt;li&gt;service name. version number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;how&lt;/strong&gt; to connect to that server?&lt;ul&gt;
&lt;li&gt;IP address, network protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Registry : database of available services&lt;ul&gt;
&lt;li&gt;search for service name to find server(which) and contact details(how)&lt;/li&gt;
&lt;li&gt;distributed &lt;ul&gt;
&lt;li&gt;any RPC service can register&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;machine-specific&lt;ul&gt;
&lt;li&gt;for services running on same machine&lt;/li&gt;
&lt;li&gt;clients must know machine addresses&lt;/li&gt;
&lt;li&gt;registry provides port number needed for connection&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Who can provide a service?&lt;ul&gt;
&lt;li&gt;lookup registry for image processing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;What services do they provide?&lt;ul&gt;
&lt;li&gt;compress&amp;#x2F;filter.. version number &amp;#x3D;&amp;gt; IDL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;How will they ship package?     &lt;ul&gt;
&lt;li&gt;TCP &amp;#x2F; UDP -&amp;gt; registry&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Pointers&#34;&gt;&lt;a href=&#34;#Pointers&#34; class=&#34;headerlink&#34; title=&#34;Pointers&#34;&gt;&lt;/a&gt;Pointers&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Procedure interface : foo(int,int)&lt;/li&gt;
&lt;li&gt;in Local Calls : foo(x,y) &amp;#x3D;&amp;gt; okay&lt;/li&gt;
&lt;li&gt;in Remote Calls : foo(x,y) &amp;#x3D;&amp;gt; ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;here, y points to location in caller address space &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solutions:&lt;ul&gt;
&lt;li&gt;No pointers&lt;/li&gt;
&lt;li&gt;Serialize pointers; copy referenced (“points to”) data structure to send buffer&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Handling-Partial-Failures&#34;&gt;&lt;a href=&#34;#Handling-Partial-Failures&#34; class=&#34;headerlink&#34; title=&#34;Handling Partial Failures&#34;&gt;&lt;/a&gt;Handling Partial Failures&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Special RPC error notification (signal, exception..)&lt;ul&gt;
&lt;li&gt;Catch all possible ways in which RPC can (partially) fail&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;RPC-Design-choice&#34;&gt;&lt;a href=&#34;#RPC-Design-choice&#34; class=&#34;headerlink&#34; title=&#34;RPC Design choice&#34;&gt;&lt;/a&gt;RPC Design choice&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Binding &amp;#x3D;&amp;gt; How to find the server&lt;/li&gt;
&lt;li&gt;IDL &amp;#x3D;&amp;gt; How to talk to server; how to package data&lt;/li&gt;
&lt;li&gt;Pointers as args &amp;#x3D;&amp;gt; Disallow or serialize pointer data&lt;/li&gt;
&lt;li&gt;Partial failures &amp;#x3D;&amp;gt; Special error notifications&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;



&lt;h1 id=&#34;Distributed-File-Systems&#34;&gt;&lt;a href=&#34;#Distributed-File-Systems&#34; class=&#34;headerlink&#34; title=&#34;Distributed File Systems&#34;&gt;&lt;/a&gt;Distributed File Systems&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Accessed via well defined interface&lt;ul&gt;
&lt;li&gt;access via Virtual File Systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Focus on consistent state&lt;ul&gt;
&lt;li&gt;tracking state, file update, cache coherence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Mixed distribution models possible &lt;ul&gt;
&lt;li&gt;replicates vs partitioned, peer-like systems&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;DFS-models&#34;&gt;&lt;a href=&#34;#DFS-models&#34; class=&#34;headerlink&#34; title=&#34;DFS models&#34;&gt;&lt;/a&gt;DFS models&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Client Server on different machines&lt;/li&gt;
&lt;li&gt;File server distributed on multiple machines &lt;ul&gt;
&lt;li&gt;replicated (each server : all files)&lt;/li&gt;
&lt;li&gt;partitioned (each server : parts of files)&lt;/li&gt;
&lt;li&gt;both (files partitioned, each partition replicates)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Files stored on and served from all machines (peers)&lt;ul&gt;
&lt;li&gt;blurred distinction between clients and servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Remote-File-Service-Extremes&#34;&gt;&lt;a href=&#34;#Remote-File-Service-Extremes&#34; class=&#34;headerlink&#34; title=&#34;Remote File Service : Extremes&#34;&gt;&lt;/a&gt;Remote File Service : Extremes&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/extremes.png&#34; alt=&#34;extremes&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/extremes2.png&#34; alt=&#34;extremes2&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Extreme1 : Upload&amp;#x2F;Download&lt;ul&gt;
&lt;li&gt;like FTP, SVN &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; local read&amp;#x2F;writes at client&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; entire file download&amp;#x2F;upload evn for small accesses&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; server gives up contro;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extreme2 : True Remote File Access&lt;ul&gt;
&lt;li&gt;Every access to remote file, nothing done locally&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; file access centralized, easy to reason about consistency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; every file operation pays network cost, limits server scalablity&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Remote-File-Service-A-compromise&#34;&gt;&lt;a href=&#34;#Remote-File-Service-A-compromise&#34; class=&#34;headerlink&#34; title=&#34;Remote File Service : A compromise&#34;&gt;&lt;/a&gt;Remote File Service : A compromise&lt;/h2&gt;&lt;p&gt;A more practical Remote File access (with Caching)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Allow clients to store parts of files locally (blocks)&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; low latency on file operations&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; server load reduces &amp;#x3D;&amp;gt; more scalable&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Force clients to interact with server (frequently)   &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; server has insights into what clients are doing&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; server has control into which accesses can be permitted &amp;#x3D;&amp;gt; easier to maintain consistency&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; server more complex, requires different file sharing semantics&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Stateless-vs-Stateful-File-server&#34;&gt;&lt;a href=&#34;#Stateless-vs-Stateful-File-server&#34; class=&#34;headerlink&#34; title=&#34;Stateless vs Stateful File server&#34;&gt;&lt;/a&gt;Stateless vs Stateful File server&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Stateless&lt;/th&gt;
&lt;th&gt;Stateful&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Keeps no state; Okay with extreme models, but can’t support ‘practical’ model&lt;/td&gt;
&lt;td&gt;Keeps client state needed for ‘practical’ model to track what is cached&amp;#x2F;accessed&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;-&lt;/strong&gt; Can’t support caching and consistency management&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;+&lt;/strong&gt; Can support locking, caching, incremental operations&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;-&lt;/strong&gt; Every request self-contained. &amp;#x3D;&amp;gt; more bits transferred&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;-&lt;/strong&gt; Overheads to maintain state and consistency. Depends on caching mechanism and consistency protocol.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;+&lt;/strong&gt; No resources are used on server side (CPU, MM). On failure just restart&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;-&lt;/strong&gt; On failure, need checkpoining and recovery mechanisms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;Caching-state-in-a-DFS&#34;&gt;&lt;a href=&#34;#Caching-state-in-a-DFS&#34; class=&#34;headerlink&#34; title=&#34;Caching state in a DFS&#34;&gt;&lt;/a&gt;Caching state in a DFS&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Locally clients maintain portion of state (e.g. file blocks)&lt;/li&gt;
&lt;li&gt;Locally clients perform operations on cached state (e.g. open&amp;#x2F;read&amp;#x2F;write)&lt;/li&gt;
&lt;li&gt;requires coherent mechanisms&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/cachingstate.png&#34; alt=&#34;cachingstate.png&#34;&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;System&lt;/th&gt;
&lt;th&gt;How&lt;/th&gt;
&lt;th&gt;When&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;SMP&lt;/td&gt;
&lt;td&gt;Write-update&amp;#x2F;Write-invalidate&lt;/td&gt;
&lt;td&gt;On write&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DFS&lt;/td&gt;
&lt;td&gt;Client&amp;#x2F;Server-driven&lt;/td&gt;
&lt;td&gt;On demand, periodically, on open..&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Files or File blocks can be (with 1 server and multiple clients) cached in:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;in client memory&lt;/li&gt;
&lt;li&gt;on client  storage device (HDD&amp;#x2F;SDD)&lt;/li&gt;
&lt;li&gt;in buffer cache in memory on server&lt;ul&gt;
&lt;li&gt;(usefulness will depend on client load, request interleaving)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;File Sharing Semantics in DFS&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Session semantics (between open-close &amp;#x3D;&amp;gt; Session)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;write-back on close(), update on open()&lt;/li&gt;
&lt;li&gt;easy to reason, but may be insufficient&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Periodic updates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;client writes-back periodically&lt;ul&gt;
&lt;li&gt;clients have a “lease” on cached data (not exclusively necessary)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;servers invalidates periodically &amp;#x3D;&amp;gt; provides biunds on “inconsistency”&lt;/li&gt;
&lt;li&gt;augment with flush()&amp;#x2F;sync() API&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Immutable files &amp;#x3D;&amp;gt; never modify, new files created&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Transactions &amp;#x3D;&amp;gt; all changes atomic&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Replication-vs-Partitioning&#34;&gt;&lt;a href=&#34;#Replication-vs-Partitioning&#34; class=&#34;headerlink&#34; title=&#34;Replication vs Partitioning&#34;&gt;&lt;/a&gt;Replication vs Partitioning&lt;/h1&gt;&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Replication&lt;/th&gt;
&lt;th&gt;Partitioning&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Each machine holds all files&lt;/td&gt;
&lt;td&gt;Each machine has subset of files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Advantages&lt;/td&gt;
&lt;td&gt;Load balancing, availibility, fault tolerance &lt;/td&gt;
&lt;td&gt;Availibility vs single server DFS;&lt;br&gt;Scalability with file system size;&lt;br&gt;single file writes simpler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disadvantages&lt;/td&gt;
&lt;td&gt;Write becomes more complex&lt;br&gt;- Synchronous to all&lt;br&gt;- or, write to one, then propagate to others&lt;br&gt;replicas must be reconciled e.g. Voting&lt;/td&gt;
&lt;td&gt;On failure, lose portion of data&lt;br&gt;load balancing harder, if not balanced, then hot-spots possible&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
&lt;li&gt;Can combine both techniques&lt;ul&gt;
&lt;li&gt;Replicate each partition!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;



&lt;h1 id=&#34;Distributed-Shared-Memory&#34;&gt;&lt;a href=&#34;#Distributed-Shared-Memory&#34; class=&#34;headerlink&#34; title=&#34;Distributed Shared Memory&#34;&gt;&lt;/a&gt;Distributed Shared Memory&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Must decide placement&lt;ul&gt;
&lt;li&gt;place memory (pages) close to relevant processes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Must decide migration&lt;ul&gt;
&lt;li&gt;when to copy memory (pages) from remote to local&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Must decide sharing rules&lt;ul&gt;
&lt;li&gt;ensure memory generations are properly ordered&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;“Peer”-Distribution-Applications&#34;&gt;&lt;a href=&#34;#“Peer”-Distribution-Applications&#34; class=&#34;headerlink&#34; title=&#34;“Peer” Distribution Applications&#34;&gt;&lt;/a&gt;“Peer” Distribution Applications&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Each node &lt;ul&gt;
&lt;li&gt;“owns” state&lt;/li&gt;
&lt;li&gt;provide service&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;all nodes are “peers”.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Examples: Big-data analytics, web searches, context sharing or distributed shared memory (DSM)&lt;/p&gt;
&lt;h2 id=&#34;Distributed-Shared-Memory-DSM&#34;&gt;&lt;a href=&#34;#Distributed-Shared-Memory-DSM&#34; class=&#34;headerlink&#34; title=&#34;Distributed Shared Memory (DSM)&#34;&gt;&lt;/a&gt;Distributed Shared Memory (DSM)&lt;/h2&gt;&lt;p&gt;DSM is a service that manages memory accross multiple nodes so that applications that are running on top will have an illusion that they are running on a shared memory.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Each node &lt;ul&gt;
&lt;li&gt;“owns” state &amp;#x3D;&amp;gt; memory&lt;/li&gt;
&lt;li&gt;provide service&lt;ul&gt;
&lt;li&gt;memory read&amp;#x2F;writes from any nodes&lt;/li&gt;
&lt;li&gt;consistency protocols&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;permits scaling beyond single machine memory limits&lt;ul&gt;
&lt;li&gt;more “shared” memory at lower cost &lt;/li&gt;
&lt;li&gt;slower overall memory access&lt;/li&gt;
&lt;li&gt;commodity interconnect technologies support this RDMA(Remote Direct Memory Access)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Hardware-vs-Software-DSM&#34;&gt;&lt;a href=&#34;#Hardware-vs-Software-DSM&#34; class=&#34;headerlink&#34; title=&#34;Hardware vs Software DSM&#34;&gt;&lt;/a&gt;Hardware vs Software DSM&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Hardware-supported (expensive!)&lt;ul&gt;
&lt;li&gt;relies on interconnect&lt;/li&gt;
&lt;li&gt;OS manages larger physical memory &lt;/li&gt;
&lt;li&gt;NIC(Network Interface Cards) translate remote memory accesses to messages&lt;/li&gt;
&lt;li&gt;NICs involved in all aspects of memory management; support atomics..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Software supported&lt;ul&gt;
&lt;li&gt;everything done by software&lt;/li&gt;
&lt;li&gt;OS,or language runtime&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hybrid (Software tasks in Hardware) DSM implementations&lt;ul&gt;
&lt;li&gt;prefetch pages&lt;/li&gt;
&lt;li&gt;address translation (easier done in hardware)&lt;/li&gt;
&lt;li&gt;triggering invalidations (easier done in hardware)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;DSM-Design-Sharing-Granularity&#34;&gt;&lt;a href=&#34;#DSM-Design-Sharing-Granularity&#34; class=&#34;headerlink&#34; title=&#34;DSM Design : Sharing Granularity&#34;&gt;&lt;/a&gt;DSM Design : Sharing Granularity&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;cache line granularity?&lt;ul&gt;
&lt;li&gt;overheads too high for DSM&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;variable granularity [N]&lt;/li&gt;
&lt;li&gt;page granularity [Y] (OS level)&lt;/li&gt;
&lt;li&gt;object granularity [Y] (Language runtime)&lt;ul&gt;
&lt;li&gt;beware of false sharing E.g. x and y shared on same page&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;What-types-of-applications-use-DSM&#34;&gt;&lt;a href=&#34;#What-types-of-applications-use-DSM&#34; class=&#34;headerlink&#34; title=&#34;What types of applications use DSM?&#34;&gt;&lt;/a&gt;What types of applications use DSM?&lt;/h2&gt;&lt;p&gt;Application access algorithm&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Single reader&amp;#x2F; single writer (SRSW)&lt;/li&gt;
&lt;li&gt;Multiple readers&amp;#x2F; single writer (MRSW)&lt;/li&gt;
&lt;li&gt;Multiple reader&amp;#x2F; Multiple writers (MRMW)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Performance-considerations&#34;&gt;&lt;a href=&#34;#Performance-considerations&#34; class=&#34;headerlink&#34; title=&#34;Performance considerations&#34;&gt;&lt;/a&gt;Performance considerations&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DSM performance metric &amp;#x3D;&amp;#x3D; access latency&lt;/li&gt;
&lt;li&gt;Achieving low latency through &lt;ul&gt;
&lt;li&gt;Migration&lt;ul&gt;
&lt;li&gt;makes sense for SRSW&lt;/li&gt;
&lt;li&gt;requires data movement&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Replication (caching)        &lt;ul&gt;
&lt;li&gt;more general &lt;/li&gt;
&lt;li&gt;requires consistency management&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Hence, migration is okay for SRSW but not for all. &lt;/li&gt;
&lt;li&gt;Caching and Replication        &lt;ul&gt;
&lt;li&gt;Copies of data to incerease data access&lt;/li&gt;
&lt;li&gt;for many concurrent writes, overheads too high but stil generally better than Migration&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Consistency-Management&#34;&gt;&lt;a href=&#34;#Consistency-Management&#34; class=&#34;headerlink&#34; title=&#34;Consistency Management&#34;&gt;&lt;/a&gt;Consistency Management&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;In SMP&lt;ul&gt;
&lt;li&gt;write invalidate&lt;/li&gt;
&lt;li&gt;write update&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;coherence operations triggered in each write &lt;ul&gt;
&lt;li&gt;overhead too high&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Push invalidations when data is written to &lt;ol&gt;
&lt;li&gt;Proactive&lt;/li&gt;
&lt;li&gt;Eager&lt;/li&gt;
&lt;li&gt;Pessimistic&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Pull modifications information periodically&lt;ol&gt;
&lt;li&gt;on demand (reactive)&lt;/li&gt;
&lt;li&gt;lazy&lt;/li&gt;
&lt;li&gt;optimistic&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;when these methods get triggered depends on the consistency model for the shared state&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;DSM-architecture-page-based-OS-supported&#34;&gt;&lt;a href=&#34;#DSM-architecture-page-based-OS-supported&#34; class=&#34;headerlink&#34; title=&#34;DSM architecture (page-based, OS-supported)&#34;&gt;&lt;/a&gt;DSM architecture (page-based, OS-supported)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Page-based DSM architecture&lt;ul&gt;
&lt;li&gt;distributed nodes, each with own local memory contribution&lt;/li&gt;
&lt;li&gt;pool of pages from all nodes&lt;/li&gt;
&lt;li&gt;each page has IO (“home” node), page frame number&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;if MRMW &lt;ul&gt;
&lt;li&gt;need local caches for performances (latency)&lt;/li&gt;
&lt;li&gt;“home” or “manager” node drives coherence operations&lt;/li&gt;
&lt;li&gt;all nodes responsible for part if distributed memory (state) management&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Home node    &lt;ul&gt;
&lt;li&gt;keeps state: page accessed, modifications, caching enabled&amp;#x2F;disabled, locked..&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Current owner&lt;ul&gt;
&lt;li&gt;owner may not be equal to home node&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Explicit replicas &lt;ul&gt;
&lt;li&gt;for load balancing, performance, or reliability&lt;br&gt;  home, manager node controls memory&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;DSM-metadata&#34;&gt;&lt;a href=&#34;#DSM-metadata&#34; class=&#34;headerlink&#34; title=&#34;DSM metadata&#34;&gt;&lt;/a&gt;DSM metadata&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/metadata.png&#34; alt=&#34;metadata.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Implementing-DSMs&#34;&gt;&lt;a href=&#34;#Implementing-DSMs&#34; class=&#34;headerlink&#34; title=&#34;Implementing DSMs&#34;&gt;&lt;/a&gt;Implementing DSMs&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Problem : DSM must intercept access to DSM state &lt;ul&gt;
&lt;li&gt;to send remote messages requesting access&lt;/li&gt;
&lt;li&gt;to trigger coherence messages&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;overheads should be avoided for local non-shared state (pages)&lt;/li&gt;
&lt;li&gt;dynamically engage and disengage DSM when necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Solution : Use hardware MMU support!&lt;ul&gt;
&lt;li&gt;trap in OS if mapping invalid or access denied&lt;/li&gt;
&lt;li&gt;remote address mapping -&amp;gt; trap and pass to DSM to send message&lt;/li&gt;
&lt;li&gt;cached content -&amp;gt; trap and pass to DSM to perform memory coherence operations&lt;/li&gt;
&lt;li&gt;other MMU information useful (e.g. Dirty page)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Consistency-model&#34;&gt;&lt;a href=&#34;#Consistency-model&#34; class=&#34;headerlink&#34; title=&#34;Consistency model&#34;&gt;&lt;/a&gt;Consistency model&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Agreement between memory (state) and upper software layers&lt;/li&gt;
&lt;li&gt;Memory behaves correctly if and only if software follows specific rules&lt;/li&gt;
&lt;li&gt;Memory (state) guarantees to behave correctly&lt;ul&gt;
&lt;li&gt;access ordering&lt;/li&gt;
&lt;li&gt;propagation&amp;#x2F; visibility of updates&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Our-notation&#34;&gt;&lt;a href=&#34;#Our-notation&#34; class=&#34;headerlink&#34; title=&#34;Our notation&#34;&gt;&lt;/a&gt;Our notation&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/notation.png&#34; alt=&#34;notation.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;R_m1(X) &amp;#x3D;&amp;gt; X was read from memory location m1&lt;/li&gt;
&lt;li&gt;W_m1(Y) &amp;#x3D;&amp;gt; Y was written to memory location m1&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Strict-Consistency&#34;&gt;&lt;a href=&#34;#Strict-Consistency&#34; class=&#34;headerlink&#34; title=&#34;Strict Consistency&#34;&gt;&lt;/a&gt;Strict Consistency&lt;/h3&gt;&lt;p&gt;Strict Consistency &amp;#x3D;&amp;gt; updates visible everywhere immediately&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/strict.png&#34; alt=&#34;strict.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In practice&lt;ul&gt;
&lt;li&gt;Even on single SMP no guarantees on order without extra locking and synchronization&lt;/li&gt;
&lt;li&gt;in DS, latency and message reorder make this even harder&lt;/li&gt;
&lt;li&gt;Hence almost impossible to guarantee strict consistency&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Sequential-Consistency&#34;&gt;&lt;a href=&#34;#Sequential-Consistency&#34; class=&#34;headerlink&#34; title=&#34;Sequential Consistency&#34;&gt;&lt;/a&gt;Sequential Consistency&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/seq.png&#34; alt=&#34;seq.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Sequential consistency &amp;#x3D;&amp;gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;memory updates from different  processors may be arbitrarily interleaved&lt;/li&gt;
&lt;li&gt;All processes will see the same interleaving&lt;/li&gt;
&lt;li&gt;Operations from the same process always appearin order they were issued&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Causal-Consistency&#34;&gt;&lt;a href=&#34;#Causal-Consistency&#34; class=&#34;headerlink&#34; title=&#34;Causal Consistency&#34;&gt;&lt;/a&gt;Causal Consistency&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/causal.png&#34; alt=&#34;causal.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For writes not causally related, “concurrent” writes doesnt gurantee.&lt;/li&gt;
&lt;li&gt;Don’t permit arbitrary ordering from same process writer&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Weak-Consistency&#34;&gt;&lt;a href=&#34;#Weak-Consistency&#34; class=&#34;headerlink&#34; title=&#34;Weak Consistency&#34;&gt;&lt;/a&gt;Weak Consistency&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://spcdn.pages.dev/blog/os/weak.png&#34; alt=&#34;weak.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use of synchronization&lt;ul&gt;
&lt;li&gt;Synchronization point &amp;#x3D;&amp;gt; operations that are available (R,W,Sync)&lt;/li&gt;
&lt;li&gt;all updates prior to a sync point will be visible&lt;/li&gt;
&lt;li&gt;no guarantee what happens in between&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt; limit data movement of coherence operations&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;-&lt;/strong&gt; maintain extra state for additional operations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Variations:&lt;ul&gt;
&lt;li&gt;Single sync operation (sync)&lt;/li&gt;
&lt;li&gt;Seperate sync per surface of state (page)&lt;/li&gt;
&lt;li&gt;Seperate “entry&amp;#x2F;acquire” vs “exit&amp;#x2F;release” operations&lt;hr&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/sql-joins-inner-left-right-and-full-joins/</guid>
            <title>SQL Joins - Inner, Left, Right and Full Joins</title>
            <link>https://samirpaul.in/posts/sql-joins-inner-left-right-and-full-joins/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>sql</category>
            <category>sql-joins</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;SQL Join&lt;/strong&gt; statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are as follows: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;INNER JOIN&lt;/li&gt;
&lt;li&gt;LEFT JOIN&lt;/li&gt;
&lt;li&gt;RIGHT JOIN&lt;/li&gt;
&lt;li&gt;FULL JOIN&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77569653/227738791-78897c64-4c15-4d6a-b75a-656c6a59a5d2.png&#34; alt=&#34;SQL Joins&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/python-cheat-sheet-for-leetcode/</guid>
            <title>Python Cheat Sheet for LeetCode</title>
            <link>https://samirpaul.in/posts/python-cheat-sheet-for-leetcode/</link>
            <category>LeetCode</category>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>Python Cheat Sheet</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Basics&#34;&gt;&lt;a href=&#34;#Basics&#34; class=&#34;headerlink&#34; title=&#34;Basics&#34;&gt;&lt;/a&gt;Basics&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Data Types&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;https://user-images.githubusercontent.com/47276307/172329842-38f3de07-62d9-4d7d-9a19-fc576ee396a9.jpg&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Operators and it’s precendence&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;https://user-images.githubusercontent.com/47276307/172329850-61fc0809-a4b0-416c-848b-1c502ecb4772.jpg&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Data-Structures&#34;&gt;&lt;a href=&#34;#Data-Structures&#34; class=&#34;headerlink&#34; title=&#34;Data Structures&#34;&gt;&lt;/a&gt;Data Structures&lt;/h1&gt;&lt;p&gt;&lt;em&gt;Important data structures for Leetcode&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;Lists&#34;&gt;&lt;a href=&#34;#Lists&#34; class=&#34;headerlink&#34; title=&#34;Lists&#34;&gt;&lt;/a&gt;Lists&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Lists are used to store multiple items in a single variable&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;https://user-images.githubusercontent.com/47276307/172330098-1c5f0a6e-7f80-4f4f-9be6-1d734e2c70cd.jpg&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;nums = [1,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.index(1) # returns index&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.append(1) # appends 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.insert(0,10) # inserts 10 at 0th index&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.remove(3) # removes all instances of 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.copy(1) # returns copy of the list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.count(1) # returns no.of times &amp;#x27;1&amp;#x27; is present in the list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.extend(someOtherList) # ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.pop() # pops last element [which element to pop can also be given as optional argument]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.reverse() # reverses original list (nums in this case)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums.sort() # sorts list [does NOT return sorted list]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#Python&amp;#x27;s default sort uses Tim Sort, which is a combination of both merge sort and insertion sort.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;It&amp;#x27;s pretty simple really:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[start:stop]  # items start through stop-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[start:]      # items start through the rest of the array&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[:stop]       # items from the beginning through stop-1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[:]           # a copy of the whole array&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;There is also the step value, which can be used with any of the above:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[start:stop:step] # start through not past stop, by step&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[-1]    # last item in the array&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[-2:]   # last two items in the array&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[:-2]   # everything except the last two items&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Similarly, step may be a negative number:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[::-1]    # all items in the array, reversed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[1::-1]   # the first two items, reversed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[:-3:-1]  # the last two items, reversed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[-3::-1]  # everything except the last two items, reversed&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Relation to slice() object&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The slicing operator [] is actually being used in the above code with a slice() object using the : notation (which is only valid within []), i.e.:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[start:stop:step]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;is equivalent to:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a[slice(start, stop, step)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Slice objects also behave slightly differently depending on the number of arguments, similarly to range(), i.e. both slice(stop) and slice(start, stop[, step]) are supported. To skip specifying a given argument, one might use None, so that e.g. a[start:] is equivalent to a[slice(start, None)] or a[::-1] is equivalent to a[slice(None, None, -1)].&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;While the :-based notation is very helpful for simple slicing, the explicit use of slice() objects simplifies the programmatic generation of slicing.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Dictionary&#34;&gt;&lt;a href=&#34;#Dictionary&#34; class=&#34;headerlink&#34; title=&#34;Dictionary&#34;&gt;&lt;/a&gt;Dictionary&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Dictionaries are used to store data values in key:value pairs. &lt;em&gt;Info about &lt;strong&gt;collections.Counter()&lt;/strong&gt; available below.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;https://user-images.githubusercontent.com/47276307/172330107-e68e3228-1c76-4bfb-bb38-04d18f94d5b9.jpg&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;dict = &amp;#123;&amp;#x27;a&amp;#x27;:1,&amp;#x27;b&amp;#x27;:2,&amp;#x27;c&amp;#x27;:3&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict.keys() # returns list of keys of dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict.values() # returns list of values of dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict.get(&amp;#x27;a&amp;#x27;) # returns value for any corresponding key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict.items() # returns [(&amp;#x27;a&amp;#x27;,1),(&amp;#x27;b&amp;#x27;,2),(&amp;#x27;c&amp;#x27;,3)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict.copy() # returns copy of the dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# NOTE : items() Returns view object that will be updated with any future changes to dict&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict.pop(KEY) # pops key-value pair with that key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict.popitem() # removes most recent pair added&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict.setDefault(KEY,DEFAULT_VALUE) # returns value of key, if key exists, else default value returned&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# If the key exist, this parameter(DEFAULT_VALUE) has no effect.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# If the key does not exist, DEFAULT_VALUE becomes the key&amp;#x27;s value. 2nd argument&amp;#x27;s default is None.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dict.update(&amp;#123;KEY:VALUE&amp;#125;) # inserts pair in dictionary if not present, if present, corresponding value is overriden (not key)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# defaultdict ensures that if any element is accessed that is not present in the dictionary&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# it will be created and error will not be thrown (which happens in normal dictionary)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Also, the new element created will be of argument type, for example in the below line&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# an element of type &amp;#x27;list&amp;#x27; will be made for a Key that does not exist&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;myDictionary = defaultdict(list) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Counter&#34;&gt;&lt;a href=&#34;#Counter&#34; class=&#34;headerlink&#34; title=&#34;Counter&#34;&gt;&lt;/a&gt;Counter&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Python Counter is a container that will hold the count of each of the elements present in the container. The counter is a sub-class available inside the dictionary class. Specifically used for element frequencies&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Pretty similar to dictionary, infact I use&lt;/em&gt; &lt;strong&gt;defaultdict(int)&lt;/strong&gt; &lt;em&gt;most of the time&lt;/em&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from collections import Counter #(capital &amp;#x27;C&amp;#x27;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# can also be used as &amp;#x27;collections.Counter()&amp;#x27; in code&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;list1 = [&amp;#x27;x&amp;#x27;,&amp;#x27;y&amp;#x27;,&amp;#x27;z&amp;#x27;,&amp;#x27;x&amp;#x27;,&amp;#x27;x&amp;#x27;,&amp;#x27;x&amp;#x27;,&amp;#x27;y&amp;#x27;, &amp;#x27;z&amp;#x27;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Initialization&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Counter(list1) # =&amp;gt; Counter(&amp;#123;&amp;#x27;x&amp;#x27;: 4, &amp;#x27;y&amp;#x27;: 2, &amp;#x27;z&amp;#x27;: 2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Counter(&amp;quot;Welcome to Guru99 Tutorials!&amp;quot;) # =&amp;gt; Counter(&amp;#123;&amp;#x27;o&amp;#x27;: 3, &amp;#x27; &amp;#x27;: 3, &amp;#x27;u&amp;#x27;: 3, &amp;#x27;e&amp;#x27;: 2.....&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Updating&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;counterObject = collections.Counter(list1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;counterObject.keys() = [ &amp;#x27;x&amp;#x27; , &amp;#x27;y&amp;#x27; , &amp;#x27;z&amp;#x27; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;most_common_element = counterObject.most_common(1) # [(&amp;#x27;x&amp;#x27;, 4)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;counterObject.update(&amp;quot;some string&amp;quot;) # =&amp;gt; Counter(&amp;#123;&amp;#x27;o&amp;#x27;: 3, &amp;#x27;u&amp;#x27;: 3, &amp;#x27;e&amp;#x27;: 2, &amp;#x27;s&amp;#x27;: 2&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;counterObject[&amp;#x27;s&amp;#x27;] += 1 # Increase/Decrease frequency&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Accessing&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;frequency_of_s = counterObject[&amp;#x27;s&amp;#x27;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Deleting&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;del couterObject[&amp;#x27;s&amp;#x27;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Deque&#34;&gt;&lt;a href=&#34;#Deque&#34; class=&#34;headerlink&#34; title=&#34;Deque&#34;&gt;&lt;/a&gt;Deque&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A double-ended queue, or deque, has the feature of adding and removing elements from either end.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;https://user-images.githubusercontent.com/47276307/172330115-78500420-3276-4e45-8ce3-fd668b7eb14e.jpg&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from collections import deque&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue = deque([&amp;#x27;name&amp;#x27;,&amp;#x27;age&amp;#x27;,&amp;#x27;DOB&amp;#x27;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue.append(&amp;quot;append_from_right&amp;quot;) # Append from right&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue.pop() # Pop from right&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue.appendleft(&amp;quot;fromLeft&amp;quot;) # Append from left&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue.popleft() # Pop from left&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue.index(element,begin_index,end_index) # Returns first index of element b/w the 2 indices.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue.insert(index,element)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue.remove() # removes first occurrance&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue.count() # obvious&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;queue.reverse() # reverses order of queue elements&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Heapq&#34;&gt;&lt;a href=&#34;#Heapq&#34; class=&#34;headerlink&#34; title=&#34;Heapq&#34;&gt;&lt;/a&gt;Heapq&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;As we know the Heap Data Structure is used to implement the Priority Queue ADT. In python we can directly access a Priority Queue implemented using a Heap by using the &lt;strong&gt;Heapq&lt;/strong&gt; library&amp;#x2F;module.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;https://user-images.githubusercontent.com/47276307/172330122-29cf0756-89bc-4654-a4e8-4e318156c7d1.jpg&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import heapq # (minHeap by Default)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums = [5, 7, 9, 1, 3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;heapq.heapify(nums) # converts list into heap. Can be converted back to list by list(nums).&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;heapq.heappush(nums,element) # Push an element into the heap&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;heapq.heappop(nums) # Pop an element from the heap&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#heappop(heap) :- This function is used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Other Methods Available in the Library&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Used to return the k largest elements from the iterable specified &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# The key is a function with that accepts single element from iterable,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# and the returned value from that function is then used to rank that element in the heap&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;heapq.nlargest(k, iterable, key = fun)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;heapq.nsmallest(k, iterable, key = fun)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Sets&#34;&gt;&lt;a href=&#34;#Sets&#34; class=&#34;headerlink&#34; title=&#34;Sets&#34;&gt;&lt;/a&gt;Sets&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A set is a collection which is unordered, immutable, unindexed, No Duplicates.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;  &lt;img src=&#34;https://user-images.githubusercontent.com/47276307/172330132-7a785f5f-bbc6-43b9-b82f-794190813787.jpg&#34; alt=&#34;Untitled&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;set = &amp;#123;1,2,3&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.add(item)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.remove(item)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.discard(item) | set.remove(item) # removes item | remove will throw error if item is not there, discard will not&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.pop() # removes random item (since unordered)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.isdisjoint(anotherSet) # returns true if no common elements&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.issubset(anotherSet) # returns true if all elements from anotherSet is present in original set&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.issuperset(anotherSet) # returns true if all elements from original set is present in anotherSet&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.difference(anotherSet) # returns set containing items ONLY in first set&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.difference_update(anotherSet) # removes common elements from first set [no new set is created or returned]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.intersection(anotherSet) # returns new set with common elements&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.intersection_update(anotherSet) # modifies first set keeping only common elements&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.symmetric_difference(anotherSet) # returns set containing all non-common elements of both sets&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.symmetric_difference_update(anotherSet) # same as symmetric_difference but changes are made on original set&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.union(anotherSet) # ...&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;set.update(anotherSet) # adds anotherSet without duplicate&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Tuples&#34;&gt;&lt;a href=&#34;#Tuples&#34; class=&#34;headerlink&#34; title=&#34;Tuples&#34;&gt;&lt;/a&gt;Tuples&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;A tuple is a collection which is ordered, unchangeable and can contain duplicate values&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;  Similar to list&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tuple = (1,2,3,1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tuple.count(1) # returns occurence of an item&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;tuple.index(1) # returns index of 1 in array&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Strings&#34;&gt;&lt;a href=&#34;#Strings&#34; class=&#34;headerlink&#34; title=&#34;Strings&#34;&gt;&lt;/a&gt;Strings&lt;/h2&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# ** split Function **&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#The split() method breaks up a string at the specified separator and returns a list of strings.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;text = &amp;#x27;Python is a fun programming language&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# split the text from space&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(text.split(&amp;#x27; &amp;#x27;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#convert string to list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s=&amp;quot;abcd&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s=list(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Output: [&amp;#x27;Python&amp;#x27;, &amp;#x27;is&amp;#x27;, &amp;#x27;a&amp;#x27;, &amp;#x27;fun&amp;#x27;, &amp;#x27;programming&amp;#x27;, &amp;#x27;language&amp;#x27;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# ** count Function **&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#The count() method returns the number of occurrences of a substring in the given string.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#Example&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;message = &amp;#x27;python is popular programming language&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# number of occurrence of &amp;#x27;p&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;#x27;Number of occurrence of p:&amp;#x27;, message.count(&amp;#x27;p&amp;#x27;)) # Output: Number of occurrence of p: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;s = &amp;#x27;1242323&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(s.isnumeric()) #Output: True&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# check the index of &amp;#x27;fun&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(message.find(&amp;#x27;fun&amp;#x27;)) # Output: 12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;name = &amp;quot;M3onica Gell22er &amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(name.isalnum()) # Output : False&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;name = &amp;quot;Monica&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(name.isalpha()) #output true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#other imp functions&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.strip([chars]) #The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.upper() #he upper() method converts all lowercase characters in a string into uppercase characters and returns it.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.lower() #The lower() method converts all uppercase characters in a string into lowercase characters and returns it.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.islower()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.isdigit()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;string.isupper()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;Built-in-or-Library-functions&#34;&gt;&lt;a href=&#34;#Built-in-or-Library-functions&#34; class=&#34;headerlink&#34; title=&#34;Built-in or Library functions&#34;&gt;&lt;/a&gt;Built-in or Library functions&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Functions to iterate over list &amp;#x2F; other iterable (tuple, dictionaries)&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;** map(fun, iter) **&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#fun : It is a function to which map passes each element of given iterable.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#iter : It is a iterable which is to be mapped.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;** zip(list,list) **&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for elem1,elem2 in zip(firstList,secondList):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	# will merge both lists and produce tuples with both elements&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	# Tuples will stop at shortest list (in case of both lists having different len)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#Example&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = (&amp;quot;John&amp;quot;, &amp;quot;Charles&amp;quot;, &amp;quot;Mike&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = (&amp;quot;Jenny&amp;quot;, &amp;quot;Christy&amp;quot;, &amp;quot;Monica&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = zip(a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#use the tuple() function to display a readable version of the result:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(tuple(x))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;o/p: ((&amp;#x27;John&amp;#x27;, &amp;#x27;Jenny&amp;#x27;), (&amp;#x27;Charles&amp;#x27;, &amp;#x27;Christy&amp;#x27;), (&amp;#x27;Mike&amp;#x27;, &amp;#x27;Monica&amp;#x27;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#x27;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;** any(list) ** [ OPPOSITE IS =&amp;gt; ** all() ** ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;any(someList) # returns true if ANY element in list is true [any string, all numbers except 0 also count as true]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;** enumerate(list|tuple) ** &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# [when you need to attach indexes to lists or tuples ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;enumerate(anyList) # [&amp;#x27;a&amp;#x27;,&amp;#x27;b&amp;#x27;,&amp;#x27;c&amp;#x27;] =&amp;gt; [(0, &amp;#x27;a&amp;#x27;), (1, &amp;#x27;b&amp;#x27;), (2, &amp;#x27;c&amp;#x27;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;** filter(function|list) **&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;filter(myFunction,list) # returns list with elements that returned true when passed in function&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;***************** import bisect ***********************&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;** bisect.bisect(list,number,begin,end) ** O(log(n))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# [ returns the index where the element should be inserted &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#		such that sorting order is maintained ]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = [1,2,4]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bisect.bisect(a,3,0,4) # [1,2,4] =&amp;gt; 2 coz &amp;#x27;3&amp;#x27; should be inserted in 2nd index to maintain sorting order&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Other variants of this functions are =&amp;gt; bisect.bisect_left() | bisect.bisect_right()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# they have same arguments. Suppose the element we want to insert is already present&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# in the sorting list, the bisect_left() will return index left of the existing number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# and the bisect_right() or bisect() will return index right to the existing number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# ** bisect.insort(list,number,begin,end)       ** O(n) to insert&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# ** bisect.insort_right(list,number,begin,end) ** &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# ** bisect.insort_left(list,number,begin,end)  ** &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The above 3 functions are exact same of bisect.bisect(), the only difference&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;is that they return the sorted list after inserting and not the index. The&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;left() right() logic is also same as above.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Getting ASCII value of a character&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;** ord(str) **&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# returns ascii value of the character , Example ord(&amp;quot;a&amp;quot;) = 97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;** chr(int) ** &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#return character of given ascii value , Example chr(97) = &amp;quot;a&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Clean-Code-Tips&#34;&gt;&lt;a href=&#34;#Clean-Code-Tips&#34; class=&#34;headerlink&#34; title=&#34;Clean Code Tips&#34;&gt;&lt;/a&gt;Clean Code Tips&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Doc Strings -&lt;/strong&gt; Documentation for your functions in the interview to look slic 😎&lt;/p&gt;
&lt;p&gt;  A docstring is short for documentation string.&lt;/p&gt;
&lt;p&gt;  Python docstrings (documentation strings) are the &lt;a href=&#34;https://www.programiz.com/python-programming/string&#34;&gt;string&lt;/a&gt; literals that appear right after the definition of a function, method, class, or module.&lt;/p&gt;
&lt;p&gt;  Triple quotes are used while writing docstrings. For example:&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def double(num):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;Function to double the value&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 2*num&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  Docstrings appear right after the definition of a function, class, or a module. This separates docstrings from multiline comments using triple quotes.&lt;/p&gt;
&lt;p&gt;  The docstrings are associated with the object as their &lt;code&gt;__doc__&lt;/code&gt; attribute.&lt;/p&gt;
&lt;p&gt;  So, we can access the docstrings of the above function with the following lines of code:&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def double(num):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;Function to double the value&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return 2*num&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(double.__doc__)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;  &lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Function to double the value&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use &lt;strong&gt;Assert keyword&lt;/strong&gt; in python for testing edge cases. Looks more professional.&lt;/p&gt;
&lt;h3 id=&#34;Definition-and-Usage&#34;&gt;&lt;a href=&#34;#Definition-and-Usage&#34; class=&#34;headerlink&#34; title=&#34;Definition and Usage&#34;&gt;&lt;/a&gt;Definition and Usage&lt;/h3&gt;&lt;p&gt;  The &lt;code&gt;assert&lt;/code&gt; keyword is used when debugging code.&lt;/p&gt;
&lt;p&gt;  The &lt;code&gt;assert&lt;/code&gt; keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.&lt;/p&gt;
&lt;p&gt;  You can write a message to be written if the code returns False, check the example below.&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;x = &amp;quot;hello&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#if condition returns False, AssertionError is raised:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;assert x == &amp;quot;goodbye&amp;quot;, &amp;quot;x should be &amp;#x27;hello&amp;#x27;&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;ALWAYS&lt;/strong&gt; be aware of any code snippet that is being &lt;strong&gt;REPEATED&lt;/strong&gt; in your solution. &lt;strong&gt;MODULARITY&lt;/strong&gt; #1 Priority. Refactoring is also an important part of interview.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This is usually asked as a follow up after coding the solution. &lt;em&gt;Are there any changes you want to make to this solution?&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Miscellaneous&#34;&gt;&lt;a href=&#34;#Miscellaneous&#34; class=&#34;headerlink&#34; title=&#34;Miscellaneous&#34;&gt;&lt;/a&gt;Miscellaneous&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;How to take multiple line input in python?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using split() method&lt;/li&gt;
&lt;li&gt;Using List comprehension&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  &lt;strong&gt;Syntax :&lt;/strong&gt;&lt;/p&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;input().split(separator, maxsplit)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Example&#34;&gt;&lt;a href=&#34;#Example&#34; class=&#34;headerlink&#34; title=&#34;Example&#34;&gt;&lt;/a&gt;Example&lt;/h2&gt;  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# Python program showing how to&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# multiple input using split&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# taking two inputs at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x, y = input(&amp;quot;Enter a two value: &amp;quot;).split()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;Number of boys: &amp;quot;, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;Number of girls: &amp;quot;, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# taking three inputs at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x, y, z = input(&amp;quot;Enter a three value: &amp;quot;).split()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;Total number of students: &amp;quot;, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;Number of boys is : &amp;quot;, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;Number of girls is : &amp;quot;, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# taking two inputs at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a, b = input(&amp;quot;Enter a two value: &amp;quot;).split()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;First number is &amp;#123;&amp;#125; and second number is &amp;#123;&amp;#125;&amp;quot;.format(a, b))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# taking multiple inputs at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# and type casting using list() function&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = list(map(int, input(&amp;quot;Enter a multiple value: &amp;quot;).split()))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;List of students: &amp;quot;, x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# Python program showing&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# how to take multiple input&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# using List comprehension&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# taking two input at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x, y = [int(x) for x in input(&amp;quot;Enter two value: &amp;quot;).split()]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;First Number is: &amp;quot;, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;Second Number is: &amp;quot;, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# taking three input at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x, y, z = [int(x) for x in input(&amp;quot;Enter three value: &amp;quot;).split()]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;First Number is: &amp;quot;, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;Second Number is: &amp;quot;, y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;Third Number is: &amp;quot;, z)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# taking two inputs at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x, y = [int(x) for x in input(&amp;quot;Enter two value: &amp;quot;).split()]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;First number is &amp;#123;&amp;#125; and second number is &amp;#123;&amp;#125;&amp;quot;.format(x, y))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# taking multiple inputs at a time&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = [int(x) for x in input(&amp;quot;Enter multiple value: &amp;quot;).split()]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;Number of list is: &amp;quot;, x)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# taking multiple inputs at a time separated by comma&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = [int(x) for x in input(&amp;quot;Enter multiple value: &amp;quot;).split(&amp;quot;,&amp;quot;)]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(&amp;quot;Number of list is: &amp;quot;, x)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Syntax :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;math.log(a,Base)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Parameters :a : The numeric value&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Base :  Base to which the logarithm has to be computed.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Return Value :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Returns natural log if 1 argument is passed and log with&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;specified base if 2 arguments are passed.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Exceptions :&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Raises ValueError is a negative no. is passed as argument.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import math&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Printing the log base e of 14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (&amp;quot;Natural logarithm of 14 is : &amp;quot;, end=&amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (math.log(14))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Printing the log base 5 of 14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (&amp;quot;Logarithm base 5 of 14 is : &amp;quot;, end=&amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (math.log(14,5))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Finding the ceiling and the floor value&lt;ul&gt;
&lt;li&gt;Ceil value means the smallest integral value greater than the number and the floor value means the greatest integral value smaller than the number. This can be easily calculated using the ceil() and floor() method respectively.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# Python code to demonstrate the working of&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# ceil() and floor()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# importing &amp;quot;math&amp;quot; for mathematical operations&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;import math&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = 2.3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# returning the ceil of 2.3 (i.e 3)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (&amp;quot;The ceil of 2.3 is : &amp;quot;, end=&amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (math.ceil(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# returning the floor of 2.3 (i.e 2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (&amp;quot;The floor of 2.3 is : &amp;quot;, end=&amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (math.floor(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;Other Important functions&lt;/li&gt;
&lt;/ul&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;#Constants&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Print the value of Euler e (2.718281828459045)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (math.e)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# Print the value of pi (3.141592653589793)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (math.pi)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (math.gcd(b, a))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (pow(3,4))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# print the square root of 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print(math.sqrt(4))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = math.pi/6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = 30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# returning the converted value from radians to degrees&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (&amp;quot;The converted value from radians to degrees is : &amp;quot;, end=&amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (math.degrees(a))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# returning the converted value from degrees to radians&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (&amp;quot;The converted value from degrees to radians is : &amp;quot;, end=&amp;quot;&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;print (math.radians(b))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;** bin(int) **&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bin(anyNumber) # Returns binary version of number&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;** divmod(int,int) **&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;divmod(dividend,divisor) # returns tuple like (quotient, remainder)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;How-the-custom-comparator-works&#34;&gt;&lt;a href=&#34;#How-the-custom-comparator-works&#34; class=&#34;headerlink&#34; title=&#34;How the custom comparator works&#34;&gt;&lt;/a&gt;How the custom comparator works&lt;/h2&gt;&lt;p&gt;  When providing a custom comparator, it should generally return an integer&amp;#x2F;float value that follows the following pattern (as with most other programming languages and frameworks):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;return a negative value (&lt;code&gt;&amp;lt; 0&lt;/code&gt;) when the left item should be sorted &lt;em&gt;before&lt;/em&gt; the right item&lt;/li&gt;
&lt;li&gt;return a positive value (&lt;code&gt;&amp;gt; 0&lt;/code&gt;) when the left item should be sorted &lt;em&gt;after&lt;/em&gt; the right item&lt;/li&gt;
&lt;li&gt;return &lt;code&gt;0&lt;/code&gt; when both the left and the right item have the same weight and should be ordered “equally” without precedence&lt;/li&gt;
&lt;/ul&gt;
  &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;from functools import cmp_to_key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sorted(mylist, key=cmp_to_key(compare))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;#Example&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;def compare(item1, item2):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if fitness(item1) &amp;lt; fitness(item2):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return -1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    elif fitness(item1) &amp;gt; fitness(item2):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Python integer division behaves differently with -ve numbers ex: -3&amp;#x2F;&amp;#x2F;2 will give -2 answer instead of -1 so always use int(-3&amp;#x2F;2) for integer division in problems&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Resources&#34;&gt;&lt;a href=&#34;#Resources&#34; class=&#34;headerlink&#34; title=&#34;Resources&#34;&gt;&lt;/a&gt;Resources&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://betterprogramming.pub/modulo-operation-with-negative-numbers-in-python-38cb7256bb32&#34;&gt;The Modulo Operation (%) With Negative Numbers in Python&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;Cheat-Sheet-PDF&#34;&gt;&lt;a href=&#34;#Cheat-Sheet-PDF&#34; class=&#34;headerlink&#34; title=&#34;Cheat Sheet PDF&#34;&gt;&lt;/a&gt;Cheat Sheet PDF&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://drive.google.com/file/d/1EojiCPYkyLi0f5DYW4UF3Lwp-Pwihr7q/view?usp=sharing&#34;&gt;&lt;strong&gt;Click Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/leetcode-greedy-for-beginners/</guid>
            <title>LeetCode Greedy for Beginners</title>
            <link>https://samirpaul.in/posts/leetcode-greedy-for-beginners/</link>
            <category>LeetCode</category>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>Greedy</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;Greedy for practice:&lt;/p&gt;
&lt;p&gt;Sharing good Greedy problems for practice:&lt;br&gt;List: &lt;a href=&#34;https://leetcode.com/list/xyehq5j6&#34;&gt;https://leetcode.com/list/xyehq5j6&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sort&amp;#x2F;Array&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game/&#34;&gt;https://leetcode.com/problems/jump-game/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/jump-game-ii/&#34;&gt;https://leetcode.com/problems/jump-game-ii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/gas-station/&#34;&gt;https://leetcode.com/problems/gas-station/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/candy/&#34;&gt;https://leetcode.com/problems/candy/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-k-digits/&#34;&gt;https://leetcode.com/problems/remove-k-digits/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/wiggle-subsequence/&#34;&gt;https://leetcode.com/problems/wiggle-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/assign-cookies/&#34;&gt;https://leetcode.com/problems/assign-cookies/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/boats-to-save-people/&#34;&gt;https://leetcode.com/problems/boats-to-save-people/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/bag-of-tokens/&#34;&gt;https://leetcode.com/problems/bag-of-tokens/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/&#34;&gt;https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/queue-reconstruction-by-height/&#34;&gt;https://leetcode.com/problems/queue-reconstruction-by-height/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/play-with-chips/&#34;&gt;https://leetcode.com/problems/play-with-chips/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/previous-permutation-with-one-swap/&#34;&gt;https://leetcode.com/problems/previous-permutation-with-one-swap/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/lemonade-change/&#34;&gt;https://leetcode.com/problems/lemonade-change/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/bag-of-tokens/&#34;&gt;https://leetcode.com/problems/bag-of-tokens/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hash&amp;#x2F;Multi-set:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/task-scheduler/&#34;&gt;https://leetcode.com/problems/task-scheduler/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-labels/&#34;&gt;https://leetcode.com/problems/partition-labels/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/car-pooling/&#34;&gt;https://leetcode.com/problems/car-pooling/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/&#34;&gt;https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/&#34;&gt;https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/cinema-seat-allocation/&#34;&gt;https://leetcode.com/problems/cinema-seat-allocation/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/construct-k-palindrome-strings/&#34;&gt;https://leetcode.com/problems/construct-k-palindrome-strings/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/advantage-shuffle/&#34;&gt;https://leetcode.com/problems/advantage-shuffle/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Strings:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/reorganize-string/&#34;&gt;https://leetcode.com/problems/reorganize-string/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/string-without-aaa-or-bbb/&#34;&gt;https://leetcode.com/problems/string-without-aaa-or-bbb/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/check-if-a-string-can-break-another-string/&#34;&gt;https://leetcode.com/problems/check-if-a-string-can-break-another-string/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-duplicate-letters/&#34;&gt;https://leetcode.com/problems/remove-duplicate-letters/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Heap:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/last-stone-weight/&#34;&gt;https://leetcode.com/problems/last-stone-weight/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/reduce-array-size-to-the-half/&#34;&gt;https://leetcode.com/problems/reduce-array-size-to-the-half/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Stack:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/&#34;&gt;https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sharing solutions for little tricky problems&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/&#34;&gt;https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool isPossibleDivide(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (n % k != 0) return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int ssize = n/k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		map&amp;lt;int, int&amp;gt;hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			hm[nums[i]]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (auto it = hm.begin(); it != hm.end(); it++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (hm[it-&amp;gt;first] &amp;gt; 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				for (int i = k-1; i &amp;gt;= 0; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					hm[it-&amp;gt;first+i] -= hm[it-&amp;gt;first];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					if (hm[it-&amp;gt;first+i] &amp;lt; 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/car-pooling/&#34;&gt;https://leetcode.com/problems/car-pooling/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool carPooling(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; trips, int capacity) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int trip_len = 1001;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;stops(trip_len, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; trips.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			stops[trips[i][1]] += trips[i][0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			stops[trips[i][2]] -= trips[i][0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; trip_len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (i != 0) stops[i] += stops[i-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (stops[i] &amp;gt; capacity)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/reorganize-string/&#34;&gt;https://leetcode.com/problems/reorganize-string/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	static bool compare(pair&amp;lt;char, int&amp;gt;p1, pair&amp;lt;char, int&amp;gt;p2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return p1.second &amp;gt; p2.second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	string reorganizeString(string S) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = S.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		unordered_map&amp;lt;char, int&amp;gt;m;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;pair&amp;lt;char, int&amp;gt;&amp;gt;v;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			m[S[i]]++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for(auto it = m.begin(); it != m.end(); it++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (it-&amp;gt;second &amp;gt; (n+1)/2)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return &amp;quot;&amp;quot;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			v.push_back(make_pair(it-&amp;gt;first, it-&amp;gt;second));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		sort(v.begin(), v.end(), compare);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		string str;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; v.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			while (v[i].second--)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				str += v[i].first;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		string ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int size = str.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int i = 0, j = (size-1)/2+1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		while (i &amp;lt; (size-1)/2+1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ans += str[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ans += str[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			i++; j++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/candy/&#34;&gt;https://leetcode.com/problems/candy/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int candy(vector&amp;lt;int&amp;gt;&amp;amp; ratings) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = ratings.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;left(n, 1); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 1; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (ratings[i] &amp;gt; ratings[i-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				left[i] = left[i-1]+1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int sum = left[n-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = n-2; i &amp;gt;= 0; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (ratings[i] &amp;gt; ratings[i+1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				left[i] = max(left[i], left[i+1]+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sum += left[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/graph-for-beginners/</guid>
            <title>Graph For Beginners</title>
            <link>https://samirpaul.in/posts/graph-for-beginners/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>Graph</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;Graph Problems For Practice&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sharing some topic wise good Graph problems and sample solutions to observe on how to approach.&lt;/p&gt;
&lt;p&gt;List: &lt;a href=&#34;https://leetcode.com/list/x1wy4de7&#34;&gt;https://leetcode.com/list/x1wy4de7&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Union Find:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; Identify if problems talks about finding groups or components.&lt;/p&gt;
&lt;p&gt; &lt;a href=&#34;https://leetcode.com/problems/friend-circles/&#34;&gt;https://leetcode.com/problems/friend-circles/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/redundant-connection/&#34;&gt;https://leetcode.com/problems/redundant-connection/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&#34;&gt;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&#34;&gt;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/satisfiability-of-equality-equations/&#34;&gt;https://leetcode.com/problems/satisfiability-of-equality-equations/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/accounts-merge/&#34;&gt;https://leetcode.com/problems/accounts-merge/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; All the above problems can be solved by Union Find algorithm with minor tweaks.&lt;br&gt; Below is a standard template for union find problems.&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;int&amp;gt;parent;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int find(int x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return parent[x] == x ? x : find(parent[x]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;int&amp;gt; findRedundantConnection(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; edges) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = edges.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		parent.resize(n+1, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt;= n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			parent[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;res(2, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int x = find(edges[i][0]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int y = find(edges[i][1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (x != y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				parent[y] = x;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[0] = edges[i][0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[1] = edges[i][1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Depth First Search&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Start DFS from nodes at boundary:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/surrounded-regions/&#34;&gt;https://leetcode.com/problems/surrounded-regions/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/number-of-enclaves/&#34;&gt;https://leetcode.com/problems/number-of-enclaves/&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int rows, cols;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	void dfs(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; A, int i, int j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (i &amp;lt; 0 || j &amp;lt; 0 || i &amp;gt;= rows || j &amp;gt;= cols)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (A[i][j] != 1) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		A[i][j] = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(A, i+1, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(A, i-1, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(A, i, j+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(A, i, j-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int numEnclaves(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; A) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (A.empty()) return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		rows = A.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		cols = A[0].size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; rows; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; cols; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (i == 0 || j == 0 || i == rows-1 || j == cols-1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					dfs(A, i, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int ans = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; rows; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; cols; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (A[i][j] == 1)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					ans++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Time taken to reach all nodes or share information to all graph nodes:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/time-needed-to-inform-all-employees/&#34;&gt;https://leetcode.com/problems/time-needed-to-inform-all-employees/&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	void dfs(unordered_map&amp;lt;int, vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp;hm, int i, vector&amp;lt;int&amp;gt;&amp;amp; informTime, int &amp;amp;res, int curr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		curr += informTime[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		res = max(res, curr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (auto it = hm[i].begin(); it != hm[i].end(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			dfs(hm, *it, informTime, res, curr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int numOfMinutes(int n, int headID, vector&amp;lt;int&amp;gt;&amp;amp; manager, vector&amp;lt;int&amp;gt;&amp;amp; informTime) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		unordered_map&amp;lt;int, vector&amp;lt;int&amp;gt;&amp;gt;hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (manager[i] != -1) hm[manager[i]].push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int res = 0, curr = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(hm, headID, informTime, res, curr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;DFS from each unvisited node&amp;#x2F;Island problems&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/number-of-closed-islands/&#34;&gt;https://leetcode.com/problems/number-of-closed-islands/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/number-of-islands/&#34;&gt;https://leetcode.com/problems/number-of-islands/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/keys-and-rooms/&#34;&gt;https://leetcode.com/problems/keys-and-rooms/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/max-area-of-island/&#34;&gt;https://leetcode.com/problems/max-area-of-island/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/flood-fill/&#34;&gt;https://leetcode.com/problems/flood-fill/&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	void dfs(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid, vector&amp;lt;vector&amp;lt;bool&amp;gt;&amp;gt;&amp;amp; visited, int i, int j, int m, int n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (i &amp;lt; 0 || i &amp;gt;= m || j &amp;lt; 0 || j &amp;gt;= n) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (grid[i][j] == &amp;#x27;0&amp;#x27; || visited[i][j]) return;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		visited[i][j] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(grid, visited, i+1, j, m, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(grid, visited, i, j+1, m, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(grid, visited, i-1, j, m, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dfs(grid, visited, i, j-1, m, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int numIslands(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (grid.empty()) return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int m = grid.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = grid[0].size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;bool&amp;gt;&amp;gt;visited(m, vector&amp;lt;bool&amp;gt;(n, false));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int res = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; m; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (grid[i][j] == &amp;#x27;1&amp;#x27; &amp;amp;&amp;amp; !visited[i][j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					dfs(grid, visited, i, j, m, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					res++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Cycle Find:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/find-eventual-safe-states/&#34;&gt;https://leetcode.com/problems/find-eventual-safe-states/&lt;/a&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool dfs(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; graph, int v, vector&amp;lt;int&amp;gt;&amp;amp; dp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (dp[v])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return dp[v] == 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dp[v] = -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (auto it = graph[v].begin(); it != graph[v].end(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!dfs(graph, *it, dp))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dp[v] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;int&amp;gt; eventualSafeNodes(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; graph) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int V = graph.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;dp(V, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; V; i++) &amp;#123;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (dfs(graph, i, dp))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res.push_back(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; };&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Breadth First Search&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Shortest Path:&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/01-matrix/&#34;&gt;https://leetcode.com/problems/01-matrix/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/as-far-from-land-as-possible/&#34;&gt;https://leetcode.com/problems/as-far-from-land-as-possible/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/rotting-oranges/&#34;&gt;https://leetcode.com/problems/rotting-oranges/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/shortest-path-in-binary-matrix/&#34;&gt;https://leetcode.com/problems/shortest-path-in-binary-matrix/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; Start BFS from nodes from which shortest path is asked for.&lt;br&gt; Below is the sample BFS approach to find the path.&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; updateMatrix(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (matrix.empty()) return matrix;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int rows = matrix.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int cols = matrix[0].size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;pq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; rows; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; cols; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (matrix[i][j] == 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					pq.push(&amp;#123;i-1, j&amp;#125;), pq.push(&amp;#123;i+1, j&amp;#125;), pq.push(&amp;#123;i, j-1&amp;#125;), pq.push(&amp;#123;i, j+1&amp;#125;); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;bool&amp;gt;&amp;gt;visited(rows, vector&amp;lt;bool&amp;gt;(cols, false));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int steps = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		while (!pq.empty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			steps++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int size = pq.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; size; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				auto front = pq.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int l = front.first;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int r = front.second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				pq.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (l &amp;gt;= 0 &amp;amp;&amp;amp; r &amp;gt;= 0 &amp;amp;&amp;amp; l &amp;lt; rows &amp;amp;&amp;amp; r &amp;lt; cols &amp;amp;&amp;amp; !visited[l][r] &amp;amp;&amp;amp; matrix[l][r] == 1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					visited[l][r] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					matrix[l][r] = steps;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					pq.push(&amp;#123;l-1, r&amp;#125;), pq.push(&amp;#123;l+1, r&amp;#125;), pq.push(&amp;#123;l, r-1&amp;#125;), pq.push(&amp;#123;l, r+1&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return matrix;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Graph coloring&amp;#x2F;Bipartition&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/possible-bipartition/&#34;&gt;https://leetcode.com/problems/possible-bipartition/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/is-graph-bipartite/&#34;&gt;https://leetcode.com/problems/is-graph-bipartite/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; Problems asks to check if its possible to divide the graph nodes into 2 groups&lt;br&gt; Apply BFS for same. Below is a sample graph coloring approach.&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		bool isBipartite(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; graph) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int n = graph.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			vector&amp;lt;int&amp;gt;color(n, -1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (color[i] != -1) continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				color[i] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				queue&amp;lt;int&amp;gt;q;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				q.push(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				while (!q.empty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int t = q.front();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					q.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					for (int j = 0; j &amp;lt; graph[t].size(); j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						if (color[graph[t][j]] == -1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;							color[graph[t][j]] = 1-color[t];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;							q.push(graph[t][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						&amp;#125; else if (color[graph[t][j]] == color[t]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;							return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Topological Sort:&lt;/strong&gt;&lt;br&gt; Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0&lt;/p&gt;
&lt;p&gt; &lt;a href=&#34;https://leetcode.com/problems/course-schedule/&#34;&gt;https://leetcode.com/problems/course-schedule/&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/course-schedule-ii/&#34;&gt;https://leetcode.com/problems/course-schedule-ii/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; Below is sample approach. Find if cycle is present, if not apply topological sort.&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int V;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	list&amp;lt;int&amp;gt;*adj;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool isCyclicUtil(int v, vector&amp;lt;bool&amp;gt;&amp;amp;visited, vector&amp;lt;bool&amp;gt;&amp;amp;recStack) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		visited[v] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		recStack[v] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (auto it = adj[v].begin(); it != adj[v].end(); it++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!visited[*it] &amp;amp;&amp;amp; isCyclicUtil(*it, visited, recStack))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			else if (recStack[*it])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		recStack[v] = false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool isCyclic() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;bool&amp;gt;visited(V, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;bool&amp;gt;recStack(V, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; V; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (isCyclicUtil(i, visited, recStack))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				return true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	void topologicalSortUtil(int v, vector&amp;lt;bool&amp;gt;&amp;amp;visited, vector&amp;lt;int&amp;gt;&amp;amp; res) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		visited[v] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (auto it = adj[v].begin(); it != adj[v].end(); it++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!visited[*it])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				topologicalSortUtil(*it, visited, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		res.push_back(v);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;int&amp;gt;topologicalSort(int v) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;bool&amp;gt;visited(V, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		topologicalSortUtil(v, visited, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; V; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!visited[i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				topologicalSortUtil(i, visited, res);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;int&amp;gt; findOrder(int numCourses, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; prerequisites) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		V = numCourses;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		adj = new list&amp;lt;int&amp;gt;[V];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		unordered_map&amp;lt;int, vector&amp;lt;int&amp;gt;&amp;gt;hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; prerequisites.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			adj[prerequisites[i][0]].push_back(prerequisites[i][1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			hm[prerequisites[i][1]].push_back(prerequisites[i][0]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (isCyclic()) return vector&amp;lt;int&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int i = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (i = 0; i &amp;lt; V; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (hm.find(i) == hm.end())&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				break;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return topologicalSort(i);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; };&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Find Shortest Path (Dijkstra’s&amp;#x2F;Bellman Ford)&lt;/strong&gt;&lt;br&gt; &lt;a href=&#34;https://leetcode.com/problems/network-delay-time/&#34;&gt;https://leetcode.com/problems/network-delay-time/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;strong&gt;Dijkstras and Bellman Ford:&lt;/strong&gt;&lt;/p&gt;
 &lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int networkDelayTime(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; times, int N, int K) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;, vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;, greater&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt;pq;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			vector&amp;lt;int&amp;gt;dist(N+1, INT_MAX);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			pq.push(make_pair(0, K));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			dist[K] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			unordered_map&amp;lt;int, vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt;hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; times.size(); i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				hm[times[i][0]].push_back(make_pair(times[i][1], times[i][2]));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			while (!pq.empty()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				pair&amp;lt;int, int&amp;gt;p = pq.top();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				pq.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int u = p.second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				for (auto it = hm[u].begin(); it != hm[u].end(); it++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int v = it-&amp;gt;first;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int w = it-&amp;gt;second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					if (dist[v] &amp;gt; dist[u] + w) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						dist[v] = dist[u] + w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						pq.push(make_pair(dist[v], v));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int res = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 1; i &amp;lt;= N; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res = max(res, dist[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return res == INT_MAX ? -1 : res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int networkDelayTime(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; times, int N, int K) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int n = times.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (!n) return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			vector&amp;lt;int&amp;gt;dist(N+1, INT_MAX);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			int res = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			dist[K] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; N; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int u = times[j][0];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int v = times[j][1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					int w = times[j][2];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					if (dist[u] != INT_MAX &amp;amp;&amp;amp; dist[u] + w &amp;lt; dist[v])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						dist[v] = w + dist[u];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 1; i &amp;lt;= N; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res = max(res, dist[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return res == INT_MAX ? -1 : res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Complete List: Below are mostly list of problems (mostly medium level and may 1 or 2 easy) which are better to start practice with:&lt;br&gt;(Updated on 14th June ‘20)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Union Find:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/friend-circles/&#34;&gt;https://leetcode.com/problems/friend-circles/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/redundant-connection/&#34;&gt;https://leetcode.com/problems/redundant-connection/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&#34;&gt;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&#34;&gt;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/satisfiability-of-equality-equations/&#34;&gt;https://leetcode.com/problems/satisfiability-of-equality-equations/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/accounts-merge/&#34;&gt;https://leetcode.com/problems/accounts-merge/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/connecting-cities-with-minimum-cost/&#34;&gt;https://leetcode.com/problems/connecting-cities-with-minimum-cost/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;DFS:&lt;/strong&gt;&lt;br&gt;DFS from boundary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/surrounded-regions/&#34;&gt;https://leetcode.com/problems/surrounded-regions/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-enclaves/&#34;&gt;https://leetcode.com/problems/number-of-enclaves/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Shortest time:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/time-needed-to-inform-all-employees/&#34;&gt;https://leetcode.com/problems/time-needed-to-inform-all-employees/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Islands Variants&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-closed-islands/&#34;&gt;https://leetcode.com/problems/number-of-closed-islands/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-islands/&#34;&gt;https://leetcode.com/problems/number-of-islands/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/keys-and-rooms/&#34;&gt;https://leetcode.com/problems/keys-and-rooms/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/max-area-of-island/&#34;&gt;https://leetcode.com/problems/max-area-of-island/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/flood-fill/&#34;&gt;https://leetcode.com/problems/flood-fill/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/coloring-a-border/&#34;&gt;https://leetcode.com/problems/coloring-a-border/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hash&amp;#x2F;DFS:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/employee-importance/&#34;&gt;https://leetcode.com/problems/employee-importance/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/find-the-town-judge/&#34;&gt;https://leetcode.com/problems/find-the-town-judge/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Cycle Find:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/find-eventual-safe-states/&#34;&gt;https://leetcode.com/problems/find-eventual-safe-states/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;BFS:&lt;/strong&gt;&lt;br&gt;BFS for shortest path:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/01-matrix/&#34;&gt;https://leetcode.com/problems/01-matrix/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/as-far-from-land-as-possible/&#34;&gt;https://leetcode.com/problems/as-far-from-land-as-possible/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/rotting-oranges/&#34;&gt;https://leetcode.com/problems/rotting-oranges/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/shortest-path-in-binary-matrix/&#34;&gt;https://leetcode.com/problems/shortest-path-in-binary-matrix/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Graph coloring:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/possible-bipartition/&#34;&gt;https://leetcode.com/problems/possible-bipartition/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/is-graph-bipartite/&#34;&gt;https://leetcode.com/problems/is-graph-bipartite/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Topological Sort:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/course-schedule-ii/&#34;&gt;https://leetcode.com/problems/course-schedule-ii/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Shortest Path:&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/network-delay-time/&#34;&gt;https://leetcode.com/problems/network-delay-time/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/&#34;&gt;https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/cheapest-flights-within-k-stops/&#34;&gt;https://leetcode.com/problems/cheapest-flights-within-k-stops/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/leetcode-all-two-pointers-problems/</guid>
            <title>LeetCode all two pointers problems</title>
            <link>https://samirpaul.in/posts/leetcode-all-two-pointers-problems/</link>
            <category>LeetCode</category>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>two pointers problems</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;1. Running from both ends of an array&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;The first type of problems are, having two pointers at left and right end of array, then moving them to the center while processing something with them.&lt;br&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77569653/226705317-e62636ef-7fac-4897-a7d0-4625cd71826f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;2 Sum problem&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/&#34;&gt;https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/3sum/&#34;&gt;https://leetcode.com/problems/3sum/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/4sum/&#34;&gt;https://leetcode.com/problems/4sum/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/&#34;&gt;https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/two-sum-iv-input-is-a-bst/&#34;&gt;https://leetcode.com/problems/two-sum-iv-input-is-a-bst/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/sum-of-square-numbers/&#34;&gt;https://leetcode.com/problems/sum-of-square-numbers/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/boats-to-save-people/&#34;&gt;https://leetcode.com/problems/boats-to-save-people/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/&#34;&gt;https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/3sum-with-multiplicity/&#34;&gt;https://leetcode.com/problems/3sum-with-multiplicity/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Trapping Water&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/trapping-rain-water/&#34;&gt;https://leetcode.com/problems/trapping-rain-water/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/container-with-most-water/&#34;&gt;https://leetcode.com/problems/container-with-most-water/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Next Permutation&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/next-permutation/&#34;&gt;https://leetcode.com/problems/next-permutation/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/next-greater-element-iii/&#34;&gt;https://leetcode.com/problems/next-greater-element-iii/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/&#34;&gt;https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Reversing &amp;#x2F; Swapping&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/valid-palindrome/&#34;&gt;https://leetcode.com/problems/valid-palindrome/&lt;/a&gt;&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/reverse-string/&#34;&gt;https://leetcode.com/problems/reverse-string/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/reverse-vowels-of-a-string/&#34;&gt;https://leetcode.com/problems/reverse-vowels-of-a-string/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/valid-palindrome-ii/&#34;&gt;https://leetcode.com/problems/valid-palindrome-ii/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/reverse-only-letters/&#34;&gt;https://leetcode.com/problems/reverse-only-letters/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/remove-element/&#34;&gt;https://leetcode.com/problems/remove-element/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/sort-colors/&#34;&gt;https://leetcode.com/problems/sort-colors/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/flipping-an-image/&#34;&gt;https://leetcode.com/problems/flipping-an-image/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/squares-of-a-sorted-array/&#34;&gt;https://leetcode.com/problems/squares-of-a-sorted-array/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/sort-array-by-parity/&#34;&gt;https://leetcode.com/problems/sort-array-by-parity/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/sort-array-by-parity-ii/&#34;&gt;https://leetcode.com/problems/sort-array-by-parity-ii/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/pancake-sorting/&#34;&gt;https://leetcode.com/problems/pancake-sorting/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/reverse-prefix-of-word/&#34;&gt;https://leetcode.com/problems/reverse-prefix-of-word/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/reverse-string-ii/&#34;&gt;https://leetcode.com/problems/reverse-string-ii/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/reverse-words-in-a-string/&#34;&gt;https://leetcode.com/problems/reverse-words-in-a-string/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/reverse-words-in-a-string-iii/&#34;&gt;https://leetcode.com/problems/reverse-words-in-a-string-iii/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/bag-of-tokens/&#34;&gt;https://leetcode.com/problems/bag-of-tokens/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/di-string-match/&#34;&gt;https://leetcode.com/problems/di-string-match/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/&#34;&gt;https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/sentence-similarity-iii/&#34;&gt;https://leetcode.com/problems/sentence-similarity-iii/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/find-k-closest-elements/&#34;&gt;https://leetcode.com/problems/find-k-closest-elements/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/shortest-distance-to-a-character/&#34;&gt;https://leetcode.com/problems/shortest-distance-to-a-character/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;2.Slow &amp;amp; Fast Pointers&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;Next type is using two pointers with different speed of movement. Typically they starts from the left end, then the first pointer advances fast and give some feedback to the slow pointer and do some calculation.&lt;br&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77569653/226705223-95601d5c-7c9c-416a-a561-3bc6213afd75.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Linked List Operations&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/linked-list-cycle/&#34;&gt;https://leetcode.com/problems/linked-list-cycle/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/linked-list-cycle-ii/&#34;&gt;https://leetcode.com/problems/linked-list-cycle-ii/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/remove-nth-node-from-end-of-list/&#34;&gt;https://leetcode.com/problems/remove-nth-node-from-end-of-list/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/rotate-list/&#34;&gt;https://leetcode.com/problems/rotate-list/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/reorder-list/&#34;&gt;https://leetcode.com/problems/reorder-list/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/palindrome-linked-list/&#34;&gt;https://leetcode.com/problems/palindrome-linked-list/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cyclic Detection&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/find-the-duplicate-number/&#34;&gt;https://leetcode.com/problems/find-the-duplicate-number/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/circular-array-loop/&#34;&gt;https://leetcode.com/problems/circular-array-loop/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sliding Window&amp;#x2F;Caterpillar Method&lt;br&gt;  &lt;img src=&#34;https://assets.leetcode.com/users/images/29d2e356-77fe-4caf-8921-7a39d06e56d2_1642139764.6173265.jpeg&#34; alt=&#34;image&#34;&gt;&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/&#34;&gt;https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/find-k-th-smallest-pair-distance/&#34;&gt;https://leetcode.com/problems/find-k-th-smallest-pair-distance/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/moving-stones-until-consecutive-ii/&#34;&gt;https://leetcode.com/problems/moving-stones-until-consecutive-ii/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/count-pairs-of-nodes/&#34;&gt;https://leetcode.com/problems/count-pairs-of-nodes/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/count-binary-substrings/&#34;&gt;https://leetcode.com/problems/count-binary-substrings/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/k-diff-pairs-in-an-array/&#34;&gt;https://leetcode.com/problems/k-diff-pairs-in-an-array/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rotation&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/rotating-the-box/&#34;&gt;https://leetcode.com/problems/rotating-the-box/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/rotate-array/&#34;&gt;https://leetcode.com/problems/rotate-array/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;String&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/string-compression/&#34;&gt;https://leetcode.com/problems/string-compression/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/last-substring-in-lexicographical-order/&#34;&gt;https://leetcode.com/problems/last-substring-in-lexicographical-order/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remove Duplicate&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/remove-duplicates-from-sorted-array/&#34;&gt;https://leetcode.com/problems/remove-duplicates-from-sorted-array/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/&#34;&gt;https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/&#34;&gt;https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/duplicate-zeros/&#34;&gt;https://leetcode.com/problems/duplicate-zeros/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/statistics-from-a-large-sample/&#34;&gt;https://leetcode.com/problems/statistics-from-a-large-sample/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/partition-labels/&#34;&gt;https://leetcode.com/problems/partition-labels/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/magical-string/&#34;&gt;https://leetcode.com/problems/magical-string/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/friends-of-appropriate-ages/&#34;&gt;https://leetcode.com/problems/friends-of-appropriate-ages/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/longest-mountain-in-array/&#34;&gt;https://leetcode.com/problems/longest-mountain-in-array/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/&#34;&gt;https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;3.Running from beginning of 2 arrays &amp;#x2F; Merging 2 arrays&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;In this category, you will be given 2 arrays or lists, then have to process them with individual pointers.&lt;br&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77569653/226705109-0e41c781-9c08-4796-90fd-8b2169cef242.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Sorted arrays&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/merge-sorted-array/&#34;&gt;https://leetcode.com/problems/merge-sorted-array/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/heaters/&#34;&gt;https://leetcode.com/problems/heaters/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/find-the-distance-value-between-two-arrays/&#34;&gt;https://leetcode.com/problems/find-the-distance-value-between-two-arrays/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Intersections&amp;#x2F;LCA like&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/intersection-of-two-linked-lists/&#34;&gt;https://leetcode.com/problems/intersection-of-two-linked-lists/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/intersection-of-two-arrays/&#34;&gt;https://leetcode.com/problems/intersection-of-two-arrays/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/intersection-of-two-arrays-ii/&#34;&gt;https://leetcode.com/problems/intersection-of-two-arrays-ii/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SubString&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/implement-strstr/&#34;&gt;https://leetcode.com/problems/implement-strstr/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/&#34;&gt;https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/long-pressed-name/&#34;&gt;https://leetcode.com/problems/long-pressed-name/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/longest-uncommon-subsequence-ii/&#34;&gt;https://leetcode.com/problems/longest-uncommon-subsequence-ii/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/compare-version-numbers/&#34;&gt;https://leetcode.com/problems/compare-version-numbers/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/camelcase-matching/&#34;&gt;https://leetcode.com/problems/camelcase-matching/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/expressive-words/&#34;&gt;https://leetcode.com/problems/expressive-words/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Median Finder&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/find-median-from-data-stream/&#34;&gt;https://leetcode.com/problems/find-median-from-data-stream/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Meet-in-the-middle &amp;#x2F; Binary Search&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/&#34;&gt;https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/closest-subsequence-sum/&#34;&gt;https://leetcode.com/problems/closest-subsequence-sum/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/&#34;&gt;https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/3sum-closest/&#34;&gt;https://leetcode.com/problems/3sum-closest/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/valid-triangle-number/&#34;&gt;https://leetcode.com/problems/valid-triangle-number/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Others&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/shortest-unsorted-continuous-subarray/&#34;&gt;https://leetcode.com/problems/shortest-unsorted-continuous-subarray/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/most-profit-assigning-work/&#34;&gt;https://leetcode.com/problems/most-profit-assigning-work/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/largest-merge-of-two-strings/&#34;&gt;https://leetcode.com/problems/largest-merge-of-two-strings/&lt;/a&gt;&lt;br&gt;  &lt;a href=&#34;https://leetcode.com/problems/swap-adjacent-in-lr-string/&#34;&gt;https://leetcode.com/problems/swap-adjacent-in-lr-string/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;4.Split &amp;amp; Merge of an array &amp;#x2F; Divide &amp;amp; Conquer&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;/table&gt;
&lt;p&gt;The last one is similiar to previous category but there is one thing is added. First, you need to split the given list into 2 separate lists and then do two pointers approach to merge or unify them. There aren’t many tasks here.&lt;br&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77569653/226704881-583b72b9-d759-46f6-ab8f-a81310800c30.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Partition&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/partition-list/&#34;&gt;https://leetcode.com/problems/partition-list/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Sorting&lt;br&gt;  (*) &lt;a href=&#34;https://leetcode.com/problems/sort-list/&#34;&gt;https://leetcode.com/problems/sort-list/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/binary-search-template/</guid>
            <title>Binary Search Template</title>
            <link>https://samirpaul.in/posts/binary-search-template/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>Binary Search</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;Binary Search is quite easy to understand conceptually. Basically, it splits the search space into two halves and only keep the half that probably has the search target and throw away the other half that would not possibly have the answer. In this manner, we reduce the search space to half the size at every step, until we find the target. Binary Search helps us reduce the search time from linear O(n) to logarithmic O(log n). &lt;strong&gt;But when it comes to implementation, it’s rather difficult to write a bug-free code in just a few minutes&lt;/strong&gt;. Some of the most common problems include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When to exit the loop? Should we use &lt;code&gt;left &amp;lt; right&lt;/code&gt; or &lt;code&gt;left &amp;lt;= right&lt;/code&gt; as the while loop condition?&lt;/li&gt;
&lt;li&gt;How to initialize the boundary variable &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt;?&lt;/li&gt;
&lt;li&gt;How to update the boundary? How to choose the appropriate combination from &lt;code&gt;left = mid&lt;/code&gt;, &lt;code&gt;left = mid + 1&lt;/code&gt; and &lt;code&gt;right = mid&lt;/code&gt;, &lt;code&gt;right = mid - 1&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A rather common misunderstanding of binary search is that people often think this technique could only be used in simple scenario like “Given a sorted array, find a specific value in it”. As a matter of fact, it can be applied to much more complicated situations.&lt;/p&gt;
&lt;p&gt;After a lot of practice in LeetCode, I’ve made a powerful binary search template and solved many Hard problems by just slightly twisting this template. I’ll share the template with you guys in this post. &lt;strong&gt;I don’t want to just show off the code and leave. Most importantly, I want to share the logical thinking: how to apply this general template to all sorts of problems&lt;/strong&gt;. Hopefully, after reading this post, people wouldn’t be pissed off any more when LeetCoding, “This problem could be solved with binary search! Why didn’t I think of that before!”&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Most-Generalized-Binary-Search&#34;&gt;&lt;a href=&#34;#Most-Generalized-Binary-Search&#34; class=&#34;headerlink&#34; title=&#34;&amp;gt;&amp;gt; Most Generalized Binary Search&#34;&gt;&lt;/a&gt;&amp;gt;&amp;gt; Most Generalized Binary Search&lt;/h1&gt;&lt;p&gt;Suppose we have a &lt;strong&gt;search space&lt;/strong&gt;. It could be an array, a range, etc. Usually it’s sorted in ascending order. For most tasks, we can transform the requirement into the following generalized form:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Minimize k , s.t. condition(k) is True&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following code is the most generalized binary search template:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def binary_search(array) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def condition(value) -&amp;gt; bool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        pass&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left, right = min(search_space), max(search_space) # could be [0, n], [1, n] etc. Depends on problem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if condition(mid):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return left&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;What’s really nice of this template is that, for most of the binary search problems, &lt;strong&gt;we only need to modify three parts after copy-pasting this template, and never need to worry about corner cases and bugs in code any more&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Correctly initialize the boundary variables &lt;code&gt;left&lt;/code&gt; and &lt;code&gt;right&lt;/code&gt; to specify search space. Only one rule: set up the boundary to &lt;strong&gt;include all possible elements&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Decide return value. Is it &lt;code&gt;return left&lt;/code&gt; or &lt;code&gt;return left - 1&lt;/code&gt;? Remember this: &lt;strong&gt;after exiting the while loop, &lt;code&gt;left&lt;/code&gt; is the minimal k​ satisfying the &lt;code&gt;condition&lt;/code&gt; function&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;Design the &lt;code&gt;condition&lt;/code&gt; function. This is the most difficult and most beautiful part. Needs lots of practice.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below I’ll show you guys how to apply this powerful template to many LeetCode problems.&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Basic-Application&#34;&gt;&lt;a href=&#34;#Basic-Application&#34; class=&#34;headerlink&#34; title=&#34;&amp;gt;&amp;gt; Basic Application&#34;&gt;&lt;/a&gt;&amp;gt;&amp;gt; Basic Application&lt;/h1&gt;&lt;h2 id=&#34;278-First-Bad-Version-Easy&#34;&gt;&lt;a href=&#34;#278-First-Bad-Version-Easy&#34; class=&#34;headerlink&#34; title=&#34;278. First Bad Version [Easy]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/first-bad-version/&#34;&gt;278. First Bad Version [Easy]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You are a product manager and currently leading a team to develop a new product. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have &lt;code&gt;n&lt;/code&gt; versions &lt;code&gt;[1, 2, ..., n]&lt;/code&gt; and you want to find out the first bad one, which causes all the following ones to be bad. You are given an API &lt;code&gt;bool isBadVersion(version)&lt;/code&gt; which will return whether &lt;code&gt;version&lt;/code&gt; is bad.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Given n = 5, and version = 4 is the first bad version.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;call isBadVersion(3) -&amp;gt; false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;call isBadVersion(5) -&amp;gt; true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;call isBadVersion(4) -&amp;gt; true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Then 4 is the first bad version. &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;First, we initialize &lt;code&gt;left = 1&lt;/code&gt; and &lt;code&gt;right = n&lt;/code&gt; to include all possible values. Then we notice that we don’t even need to design the &lt;code&gt;condition&lt;/code&gt; function. It’s already given by the &lt;code&gt;isBadVersion&lt;/code&gt; API. Finding the first bad version is equivalent to finding the minimal k satisfying &lt;code&gt;isBadVersion(k) is True&lt;/code&gt;. Our template can fit in very nicely:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def firstBadVersion(self, n) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        left, right = 1, n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if isBadVersion(mid):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return left&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;69-Sqrt-x-Easy&#34;&gt;&lt;a href=&#34;#69-Sqrt-x-Easy&#34; class=&#34;headerlink&#34; title=&#34;69. Sqrt(x) [Easy]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/sqrtx/&#34;&gt;69. Sqrt(x) [Easy]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Implement &lt;code&gt;int sqrt(int x)&lt;/code&gt;. Compute and return the square root of &lt;em&gt;x&lt;/em&gt;, where &lt;em&gt;x&lt;/em&gt; is guaranteed to be a non-negative integer. Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Easy one. First we need to search for minimal k satisfying condition &lt;code&gt;k^2 &amp;gt; x&lt;/code&gt;, then &lt;code&gt;k - 1&lt;/code&gt; is the answer to the question. We can easily come up with the solution. Notice that I set &lt;code&gt;right = x + 1&lt;/code&gt; instead of &lt;code&gt;right = x&lt;/code&gt; to deal with special input cases like &lt;code&gt;x = 0&lt;/code&gt; and &lt;code&gt;x = 1&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def mySqrt(x: int) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left, right = 0, x + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if mid * mid &amp;gt; x:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return left - 1  # `left` is the minimum k value, `k - 1` is the answer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;35-Search-Insert-Position-Easy&#34;&gt;&lt;a href=&#34;#35-Search-Insert-Position-Easy&#34; class=&#34;headerlink&#34; title=&#34;35. Search Insert Position [Easy]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/search-insert-position/&#34;&gt;35. Search Insert Position [Easy]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You may assume no duplicates in the array.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: [1,3,5,6], 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: [1,3,5,6], 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Very classic application of binary search. We are looking for the minimal k value satisfying &lt;code&gt;nums[k] &amp;gt;= target&lt;/code&gt;, and we can just copy-paste our template. Notice that our solution is correct regardless of whether the input array &lt;code&gt;nums&lt;/code&gt; has duplicates. Also notice that the input &lt;code&gt;target&lt;/code&gt; might be larger than all elements in &lt;code&gt;nums&lt;/code&gt; and therefore needs to placed at the end of the array. That’s why we should initialize &lt;code&gt;right = len(nums)&lt;/code&gt; instead of &lt;code&gt;right = len(nums) - 1&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def searchInsert(self, nums: List[int], target: int) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        left, right = 0, len(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if nums[mid] &amp;gt;= target:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return left&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h1 id=&#34;Advanced-Application&#34;&gt;&lt;a href=&#34;#Advanced-Application&#34; class=&#34;headerlink&#34; title=&#34;&amp;gt;&amp;gt; Advanced Application&#34;&gt;&lt;/a&gt;&amp;gt;&amp;gt; Advanced Application&lt;/h1&gt;&lt;p&gt;The above problems are quite easy to solve, because they already give us the array to be searched. We’d know that we should use binary search to solve them at first glance. However, &lt;strong&gt;more often are the situations where the search space and search target are not so readily available&lt;/strong&gt;. Sometimes we won’t even realize that the problem should be solved with binary search – we might just turn to dynamic programming or DFS and get stuck for a very long time.&lt;/p&gt;
&lt;p&gt;As for the question “When can we use binary search?”, my answer is that, &lt;strong&gt;If we can discover some kind of monotonicity, for example, if &lt;code&gt;condition(k) is True&lt;/code&gt; then &lt;code&gt;condition(k + 1) is True&lt;/code&gt;, then we can consider binary search&lt;/strong&gt;.&lt;/p&gt;
&lt;h2 id=&#34;1011-Capacity-To-Ship-Packages-Within-D-Days-Medium&#34;&gt;&lt;a href=&#34;#1011-Capacity-To-Ship-Packages-Within-D-Days-Medium&#34; class=&#34;headerlink&#34; title=&#34;1011. Capacity To Ship Packages Within D Days [Medium]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/&#34;&gt;1011. Capacity To Ship Packages Within D Days [Medium]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A conveyor belt has packages that must be shipped from one port to another within &lt;code&gt;D&lt;/code&gt; days. The &lt;code&gt;i&lt;/code&gt;-th package on the conveyor belt has a weight of &lt;code&gt;weights[i]&lt;/code&gt;. Each day, we load the ship with packages on the conveyor belt (in the order given by &lt;code&gt;weights&lt;/code&gt;). We may not load more weight than the maximum weight capacity of the ship.&lt;/p&gt;
&lt;p&gt;Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within &lt;code&gt;D&lt;/code&gt; days.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1st day: 1, 2, 3, 4, 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2nd day: 6, 7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3rd day: 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4th day: 9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5th day: 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Binary search probably would not come to our mind when we first meet this problem. We might automatically treat &lt;code&gt;weights&lt;/code&gt; as search space and then realize we’ve entered a dead end after wasting lots of time. In fact, we are looking for the minimal one among all feasible capacities. We dig out the monotonicity of this problem: if we can successfully ship all packages within &lt;code&gt;D&lt;/code&gt; days with capacity &lt;code&gt;m&lt;/code&gt;, then we can definitely ship them all with any capacity larger than &lt;code&gt;m&lt;/code&gt;. Now we can design a &lt;code&gt;condition&lt;/code&gt; function, let’s call it &lt;code&gt;feasible&lt;/code&gt;, given an input &lt;code&gt;capacity&lt;/code&gt;, it returns whether it’s possible to ship all packages within &lt;code&gt;D&lt;/code&gt; days. This can run in a greedy way: if there’s still room for the current package, we put this package onto the conveyor belt, otherwise we wait for the next day to place this package. If the total days needed exceeds &lt;code&gt;D&lt;/code&gt;, we return &lt;code&gt;False&lt;/code&gt;, otherwise we return &lt;code&gt;True&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we need to initialize our boundary correctly. Obviously &lt;code&gt;capacity&lt;/code&gt; should be at least &lt;code&gt;max(weights)&lt;/code&gt;, otherwise the conveyor belt couldn’t ship the heaviest package. On the other hand, &lt;code&gt;capacity&lt;/code&gt; need not be more than&lt;code&gt;sum(weights)&lt;/code&gt;, because then we can ship all packages in just one day.&lt;/p&gt;
&lt;p&gt;Now we’ve got all we need to apply our binary search template:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def shipWithinDays(weights: List[int], D: int) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def feasible(capacity) -&amp;gt; bool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        days = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        total = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for weight in weights:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            total += weight&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if total &amp;gt; capacity:  # too heavy, wait for the next day&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                total = weight&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                days += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if days &amp;gt; D:  # cannot ship within D days&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return False&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return True&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left, right = max(weights), sum(weights)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if feasible(mid):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return left&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;410-Split-Array-Largest-Sum-Hard&#34;&gt;&lt;a href=&#34;#410-Split-Array-Largest-Sum-Hard&#34; class=&#34;headerlink&#34; title=&#34;410. Split Array Largest Sum [Hard]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/split-array-largest-sum/&#34;&gt;410. Split Array Largest Sum [Hard]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given an array which consists of non-negative integers and an integer &lt;em&gt;m&lt;/em&gt;, you can split the array into &lt;em&gt;m&lt;/em&gt; non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these &lt;em&gt;m&lt;/em&gt; subarrays.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums = [7,2,5,10,8]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;m = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;If you take a close look, you would probably see how similar this problem is with LC 1011 above. Similarly, we can design a &lt;code&gt;feasible&lt;/code&gt; function: given an input &lt;code&gt;threshold&lt;/code&gt;, then decide if we can split the array into several subarrays such that every subarray-sum is less than or equal to &lt;code&gt;threshold&lt;/code&gt;. In this way, we discover the monotonicity of the problem: if &lt;code&gt;feasible(m)&lt;/code&gt; is &lt;code&gt;True&lt;/code&gt;, then all inputs larger than &lt;code&gt;m&lt;/code&gt; can satisfy &lt;code&gt;feasible&lt;/code&gt; function. You can see that the solution code is exactly the same as LC 1011.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def splitArray(nums: List[int], m: int) -&amp;gt; int:        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def feasible(threshold) -&amp;gt; bool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        count = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        total = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for num in nums:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            total += num&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if total &amp;gt; threshold:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                total = num&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                count += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                if count &amp;gt; m:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                    return False&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return True&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left, right = max(nums), sum(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if feasible(mid):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = mid     &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return left&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;But we probably would have doubts: It’s true that &lt;code&gt;left&lt;/code&gt; returned by our solution is the minimal value satisfying &lt;code&gt;feasible&lt;/code&gt;, but how can we know that we can split the original array to &lt;strong&gt;actually get this subarray-sum&lt;/strong&gt;? For example, let’s say &lt;code&gt;nums = [7,2,5,10,8]&lt;/code&gt; and &lt;code&gt;m = 2&lt;/code&gt;. We have 4 different ways to split the array to get 4 different largest subarray-sum correspondingly: &lt;code&gt;25:[[7], [2,5,10,8]]&lt;/code&gt;, &lt;code&gt;23:[[7,2], [5,10,8]]&lt;/code&gt;, &lt;code&gt;18:[[7,2,5], [10,8]]&lt;/code&gt;, &lt;code&gt;24:[[7,2,5,10], [8]]&lt;/code&gt;. Only 4 values. But our search space &lt;code&gt;[max(nums), sum(nums)] = [10, 32]&lt;/code&gt; has much more that just 4 values. That is, no matter how we split the input array, we cannot get most of the values in our search space.&lt;/p&gt;
&lt;p&gt;Let’s say &lt;code&gt;k&lt;/code&gt; is the minimal value satisfying &lt;code&gt;feasible&lt;/code&gt; function. We can prove the correctness of our solution with &lt;strong&gt;proof by contradiction&lt;/strong&gt;. Assume that no subarray’s sum is equal to &lt;code&gt;k&lt;/code&gt;, that is, every subarray sum is less than &lt;code&gt;k&lt;/code&gt;. The variable &lt;code&gt;total&lt;/code&gt; inside &lt;code&gt;feasible&lt;/code&gt; function keeps track of the total weights of current load. If our assumption is correct, then &lt;code&gt;total&lt;/code&gt; would always be less than &lt;code&gt;k&lt;/code&gt;. As a result, &lt;code&gt;feasible(k - 1)&lt;/code&gt; must be &lt;code&gt;True&lt;/code&gt;, because &lt;code&gt;total&lt;/code&gt; would at most be equal to &lt;code&gt;k - 1&lt;/code&gt; and would never trigger the if-clause &lt;code&gt;if total &amp;gt; threshold&lt;/code&gt;, &lt;strong&gt;therefore &lt;code&gt;feasible(k - 1)&lt;/code&gt; must have the same output as &lt;code&gt;feasible(k)&lt;/code&gt;, which is &lt;code&gt;True&lt;/code&gt;&lt;/strong&gt;. But we already know that &lt;code&gt;k&lt;/code&gt; is the minimal value satisfying &lt;code&gt;feasible&lt;/code&gt; function, &lt;strong&gt;so &lt;code&gt;feasible(k - 1)&lt;/code&gt; has to be &lt;code&gt;False&lt;/code&gt;, which is a contradiction&lt;/strong&gt;. So our assumption is incorrect. Now we’ve proved that our algorithm is correct.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;875-Koko-Eating-Bananas-Medium&#34;&gt;&lt;a href=&#34;#875-Koko-Eating-Bananas-Medium&#34; class=&#34;headerlink&#34; title=&#34;875. Koko Eating Bananas [Medium]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/koko-eating-bananas/&#34;&gt;875. Koko Eating Bananas [Medium]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Koko loves to eat bananas. There are &lt;code&gt;N&lt;/code&gt; piles of bananas, the &lt;code&gt;i&lt;/code&gt;-th pile has &lt;code&gt;piles[i]&lt;/code&gt; bananas. The guards have gone and will come back in &lt;code&gt;H&lt;/code&gt; hours. Koko can decide her bananas-per-hour eating speed of &lt;code&gt;K&lt;/code&gt;. Each hour, she chooses some pile of bananas, and eats K bananas from that pile. If the pile has less than &lt;code&gt;K&lt;/code&gt; bananas, she eats all of them instead, and won’t eat any more bananas during this hour.&lt;/p&gt;
&lt;p&gt;Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back. &lt;strong&gt;Return the minimum integer &lt;code&gt;K&lt;/code&gt; such that she can eat all the bananas within &lt;code&gt;H&lt;/code&gt; hours&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: piles = [3,6,7,11], H = 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: piles = [30,11,23,4,20], H = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: piles = [30,11,23,4,20], H = 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Very similar to LC 1011 and LC 410 mentioned above. Let’s design a &lt;code&gt;feasible&lt;/code&gt; function, given an input &lt;code&gt;speed&lt;/code&gt;, determine whether Koko can finish all bananas within &lt;code&gt;H&lt;/code&gt; hours with hourly eating speed &lt;code&gt;speed&lt;/code&gt;. Obviously, the lower bound of the search space is 1, and upper bound is &lt;code&gt;max(piles)&lt;/code&gt;, because Koko can only choose one pile of bananas to eat every hour.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def minEatingSpeed(piles: List[int], H: int) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def feasible(speed) -&amp;gt; bool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        # return sum(math.ceil(pile / speed) for pile in piles) &amp;lt;= H  # slower        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return sum((pile - 1) // speed + 1 for pile in piles) &amp;lt;= H  # faster&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left, right = 1, max(piles)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mid = left  + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if feasible(mid):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return left&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;1482-Minimum-Number-of-Days-to-Make-m-Bouquets-Medium&#34;&gt;&lt;a href=&#34;#1482-Minimum-Number-of-Days-to-Make-m-Bouquets-Medium&#34; class=&#34;headerlink&#34; title=&#34;1482. Minimum Number of Days to Make m Bouquets [Medium]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/&#34;&gt;1482. Minimum Number of Days to Make m Bouquets [Medium]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given an integer array &lt;code&gt;bloomDay&lt;/code&gt;, an integer &lt;code&gt;m&lt;/code&gt; and an integer &lt;code&gt;k&lt;/code&gt;. We need to make &lt;code&gt;m&lt;/code&gt; bouquets. To make a bouquet, you need to use &lt;code&gt;k&lt;/code&gt; &lt;strong&gt;adjacent flowers&lt;/strong&gt; from the garden. The garden consists of &lt;code&gt;n&lt;/code&gt; flowers, the &lt;code&gt;ith&lt;/code&gt; flower will bloom in the &lt;code&gt;bloomDay[i]&lt;/code&gt; and then can be used in &lt;strong&gt;exactly one&lt;/strong&gt; bouquet. Return &lt;em&gt;the minimum number of days&lt;/em&gt; you need to wait to be able to make &lt;code&gt;m&lt;/code&gt; bouquets from the garden. If it is impossible to make &lt;code&gt;m&lt;/code&gt; bouquets return &lt;strong&gt;-1&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: bloomDay = [1,10,3,10,2], m = 3, k = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Explanation: Let&amp;#x27;s see what happened in the first three days. x means flower bloomed and _ means flower didn&amp;#x27;t bloom in the garden.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;We need 3 bouquets each should contain 1 flower.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;After day 1: [x, _, _, _, _]   // we can only make one bouquet.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;After day 2: [x, _, _, _, x]   // we can only make two bouquets.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: bloomDay = [1,10,3,10,2], m = 3, k = 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: -1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Now that we’ve solved three advanced problems above, this one should be pretty easy to do. The monotonicity of this problem is very clear: if we can make &lt;code&gt;m&lt;/code&gt; bouquets after waiting for &lt;code&gt;d&lt;/code&gt; days, then we can definitely finish that as well if we wait for more than &lt;code&gt;d&lt;/code&gt; days.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def minDays(bloomDay: List[int], m: int, k: int) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def feasible(days) -&amp;gt; bool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bonquets, flowers = 0, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for bloom in bloomDay:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if bloom &amp;gt; days:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                flowers = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                bonquets += (flowers + 1) // k&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                flowers = (flowers + 1) % k&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return bonquets &amp;gt;= m&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if len(bloomDay) &amp;lt; m * k:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return -1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left, right = 1, max(bloomDay)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if feasible(mid):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return left&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;668-Kth-Smallest-Number-in-Multiplication-Table-Hard&#34;&gt;&lt;a href=&#34;#668-Kth-Smallest-Number-in-Multiplication-Table-Hard&#34; class=&#34;headerlink&#34; title=&#34;668. Kth Smallest Number in Multiplication Table [Hard]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/description/&#34;&gt;668. Kth Smallest Number in Multiplication Table [Hard]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Nearly every one have used the &lt;a href=&#34;https://en.wikipedia.org/wiki/Multiplication_table&#34;&gt;Multiplication Table&lt;/a&gt;. But could you find out the &lt;code&gt;k-th&lt;/code&gt; smallest number quickly from the multiplication table? Given the height &lt;code&gt;m&lt;/code&gt; and the length &lt;code&gt;n&lt;/code&gt; of a &lt;code&gt;m * n&lt;/code&gt; Multiplication Table, and a positive integer &lt;code&gt;k&lt;/code&gt;, you need to return the &lt;code&gt;k-th&lt;/code&gt; smallest number in this table.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: m = 3, n = 3, k = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Explanation: &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The Multiplication Table:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;1	2	3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2	4	6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3	6	9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;The 5-th smallest number is 3 (1, 2, 2, 3, 3).&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;For Kth-Smallest problems like this, what comes to our mind first is Heap. Usually we can maintain a Min-Heap and just pop the top of the Heap for k times. However, that doesn’t work out in this problem. We don’t have every single number in the entire Multiplication Table, instead, we only have the height and the length of the table. If we are to apply Heap method, we need to explicitly calculate these &lt;code&gt;m * n&lt;/code&gt; values and save them to a heap. The time complexity and space complexity of this process are both O(mn), which is quite inefficient. This is when binary search comes in. Remember we say that designing &lt;code&gt;condition&lt;/code&gt; function is the most difficult part? In order to find the k-th smallest value in the table, we can design an &lt;code&gt;enough&lt;/code&gt; function, given an input &lt;code&gt;num&lt;/code&gt;, determine whether there’re at least k values less than or equal to &lt;code&gt;num&lt;/code&gt;. &lt;strong&gt;The minimal &lt;code&gt;num&lt;/code&gt; satisfying &lt;code&gt;enough&lt;/code&gt; function is the answer we’re looking for&lt;/strong&gt;. Recall that the key to binary search is discovering monotonicity. In this problem, if &lt;code&gt;num&lt;/code&gt; satisfies &lt;code&gt;enough&lt;/code&gt;, then of course any value larger than &lt;code&gt;num&lt;/code&gt; can satisfy. This monotonicity is the fundament of our binary search algorithm.&lt;/p&gt;
&lt;p&gt;Let’s consider search space. Obviously the lower bound should be 1, and the upper bound should be the largest value in the Multiplication Table, which is &lt;code&gt;m * n&lt;/code&gt;, then we have search space &lt;code&gt;[1, m * n]&lt;/code&gt;. The overwhelming advantage of binary search solution to heap solution is that it doesn’t need to explicitly calculate all numbers in that table, all it needs is just picking up one value out of the search space and apply &lt;code&gt;enough&lt;/code&gt; function to this value, to determine should we keep the left half or the right half of the search space. In this way, binary search solution only requires constant space complexity, much better than heap solution.&lt;/p&gt;
&lt;p&gt;Next let’s consider how to implement &lt;code&gt;enough&lt;/code&gt; function. It can be observed that every row in the Multiplication Table is just multiples of its index. For example, all numbers in 3rd row &lt;code&gt;[3,6,9,12,15...]&lt;/code&gt; are multiples of 3. Therefore, we can just go row by row to count the total number of entries less than or equal to input &lt;code&gt;num&lt;/code&gt;. Following is the complete solution.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def findKthNumber(m: int, n: int, k: int) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def enough(num) -&amp;gt; bool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        count = 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for val in range(1, m + 1):  # count row by row&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            add = min(num // val, n)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            if add == 0:  # early exit&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                break&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            count += add&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return count &amp;gt;= k                &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left, right = 1, n * m&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if enough(mid):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return left &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;In LC 410 above, we have doubt “Is the result from binary search actually a subarray sum?”. Here we have a similar doubt: “&lt;strong&gt;Is the result from binary search actually in the Multiplication Table?&lt;/strong&gt;“. The answer is yes, and we also can apply proof by contradiction. Denote &lt;code&gt;num&lt;/code&gt; as the minimal input that satisfies &lt;code&gt;enough&lt;/code&gt; function. Let’s assume that &lt;code&gt;num&lt;/code&gt; is not in the table, which means that &lt;code&gt;num&lt;/code&gt; is not divisible by any &lt;code&gt;val&lt;/code&gt; in &lt;code&gt;[1, m]&lt;/code&gt;, that is, &lt;code&gt;num % val &amp;gt; 0&lt;/code&gt;. Therefore, changing the input from &lt;code&gt;num&lt;/code&gt; to &lt;code&gt;num - 1&lt;/code&gt; doesn’t have any effect on the expression &lt;code&gt;add = min(num // val, n)&lt;/code&gt;. So &lt;code&gt;enough(num - 1)&lt;/code&gt; would also return &lt;code&gt;True&lt;/code&gt;, same as &lt;code&gt;enough(num)&lt;/code&gt;. But we already know &lt;code&gt;num&lt;/code&gt; is the minimal input satisfying &lt;code&gt;enough&lt;/code&gt; function, so &lt;code&gt;enough(num - 1)&lt;/code&gt; has to be &lt;code&gt;False&lt;/code&gt;. Contradiction! The opposite of our original assumption is true: &lt;code&gt;num&lt;/code&gt; is actually in the table.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;719-Find-K-th-Smallest-Pair-Distance-Hard&#34;&gt;&lt;a href=&#34;#719-Find-K-th-Smallest-Pair-Distance-Hard&#34; class=&#34;headerlink&#34; title=&#34;719. Find K-th Smallest Pair Distance [Hard]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/find-k-th-smallest-pair-distance/&#34;&gt;719. Find K-th Smallest Pair Distance [Hard]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given an integer array, return the k-th smallest &lt;strong&gt;distance&lt;/strong&gt; among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;nums = [1,3,1]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;k = 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 0 &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Explanation:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Following are all the pairs. The 1st smallest distance pair is (1,1), and its distance is 0.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(1,3) -&amp;gt; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(1,1) -&amp;gt; 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(3,1) -&amp;gt; 2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Very similar to LC 668 above, both are about finding Kth-Smallest. Just like LC 668, We can design an &lt;code&gt;enough&lt;/code&gt; function, given an input &lt;code&gt;distance&lt;/code&gt;, determine whether there’re at least k pairs whose distances are less than or equal to &lt;code&gt;distance&lt;/code&gt;. We can sort the input array and use two pointers (fast pointer and slow pointer, pointed at a pair) to scan it. Both pointers go from leftmost end. If the current pair pointed at has a distance less than or equal to &lt;code&gt;distance&lt;/code&gt;, all pairs between these pointers are valid (since the array is already sorted), we move forward the fast pointer. Otherwise, we move forward the slow pointer. By the time both pointers reach the rightmost end, we finish our scan and see if total counts exceed k. Here is the implementation:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def enough(distance) -&amp;gt; bool:  # two pointers&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    count, i, j = 0, 0, 0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while i &amp;lt; n or j &amp;lt; n:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        while j &amp;lt; n and nums[j] - nums[i] &amp;lt;= distance:  # move fast pointer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            j += 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        count += j - i - 1  # count pairs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        i += 1  # move slow pointer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return count &amp;gt;= k&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Obviously, our search space should be &lt;code&gt;[0, max(nums) - min(nums)]&lt;/code&gt;. Now we are ready to copy-paste our template:&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def smallestDistancePair(nums: List[int], k: int) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    nums.sort()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    n = len(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left, right = 0, nums[-1] - nums[0]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if enough(mid):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return left&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;1201-Ugly-Number-III-Medium&#34;&gt;&lt;a href=&#34;#1201-Ugly-Number-III-Medium&#34; class=&#34;headerlink&#34; title=&#34;1201. Ugly Number III [Medium]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/ugly-number-iii/&#34;&gt;1201. Ugly Number III [Medium]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Write a program to find the &lt;code&gt;n&lt;/code&gt;-th ugly number. Ugly numbers are &lt;strong&gt;positive integers&lt;/strong&gt; which are divisible by &lt;code&gt;a&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;code&gt;b&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;code&gt;c&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: n = 3, a = 2, b = 3, c = 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: n = 4, a = 2, b = 3, c = 4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Nothing special. Still finding the Kth-Smallest. We need to design an &lt;code&gt;enough&lt;/code&gt; function, given an input &lt;code&gt;num&lt;/code&gt;, determine whether there are at least n ugly numbers less than or equal to &lt;code&gt;num&lt;/code&gt;. Since &lt;code&gt;a&lt;/code&gt; might be a multiple of &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;c&lt;/code&gt;, or the other way round, we need the help of greatest common divisor to avoid counting duplicate numbers.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def nthUglyNumber(n: int, a: int, b: int, c: int) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def enough(num) -&amp;gt; bool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        total = num//a + num//b + num//c - num//ab - num//ac - num//bc + num//abc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return total &amp;gt;= n&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ab = a * b // math.gcd(a, b)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ac = a * c // math.gcd(a, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    bc = b * c // math.gcd(b, c)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    abc = a * bc // math.gcd(a, bc)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left, right = 1, 10 ** 10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if enough(mid):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return left&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h2 id=&#34;1283-Find-the-Smallest-Divisor-Given-a-Threshold-Medium&#34;&gt;&lt;a href=&#34;#1283-Find-the-Smallest-Divisor-Given-a-Threshold-Medium&#34; class=&#34;headerlink&#34; title=&#34;1283. Find the Smallest Divisor Given a Threshold [Medium]&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/&#34;&gt;1283. Find the Smallest Divisor Given a Threshold [Medium]&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;threshold&lt;/code&gt;, we will choose a positive integer divisor and divide all the array by it and sum the result of the division. Find the &lt;strong&gt;smallest&lt;/strong&gt; divisor such that the result mentioned above is less than or equal to &lt;code&gt;threshold&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Each result of division is rounded to the nearest integer greater than or equal to that element. (For example: 7&amp;#x2F;3 &amp;#x3D; 3 and 10&amp;#x2F;2 &amp;#x3D; 5). It is guaranteed that there will be an answer.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;Input: nums = [1,2,5,9], threshold = 6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Output: 5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;If the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;After so many problems introduced above, this one should be a piece of cake. We don’t even need to bother to design a &lt;code&gt;condition&lt;/code&gt; function, because the problem has already told us explicitly what condition we need to satisfy.&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;def smallestDivisor(nums: List[int], threshold: int) -&amp;gt; int:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    def condition(divisor) -&amp;gt; bool:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return sum((num - 1) // divisor + 1 for num in nums) &amp;lt;= threshold&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    left, right = 1, max(nums)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    while left &amp;lt; right:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mid = left + (right - left) // 2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        if condition(mid):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            right = mid&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        else:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            left = mid + 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    return left&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;hr&gt;
&lt;h1 id=&#34;End&#34;&gt;&lt;a href=&#34;#End&#34; class=&#34;headerlink&#34; title=&#34;End&#34;&gt;&lt;/a&gt;End&lt;/h1&gt;&lt;p&gt;Wow, thank you so much for making it to the end! Really appreciate that. As you can see from the python codes above, they all look very similar to each other. That’s because I copy-pasted my own template all the time. No exception. This is the strong proof of my template’s powerfulness and adaptability. I believe everyone can acquire this binary search template to solve many problems. All we need is just more practice to build up our ability to discover the monotonicity of the problem and to design a beautiful &lt;code&gt;condition&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;Hope this helps.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/split-array-largest-sum/discuss/89819/C%2B%2B-Fast-Very-clear-explanation-Clean-Code-Solution-with-Greedy-Algorithm-and-Binary-Search&#34;&gt;[C++ &amp;#x2F; Fast &amp;#x2F; Very clear explanation &amp;#x2F; Clean Code] Solution with Greedy Algorithm and Binary Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/find-k-th-smallest-pair-distance/discuss/109082/Approach-the-problem-using-the-%22trial-and-error%22-algorithm&#34;&gt;Approach the problem using the “trial and error” algorithm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/binary-search/discuss/423162/Binary-Search-101-The-Ultimate-Binary-Search-Handbook&#34;&gt;Binary Search 101 The-Ultimate-Binary-Search-Handbook - LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leetcode.com/problems/ugly-number-iii/discuss/387539/cpp-Binary-Search-with-picture-and-Binary-Search-Template&#34;&gt;ugly-number-iii Binary Search with picture &amp;amp; Binary Search Template - LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/dp-for-beginners/</guid>
            <title>DP for Beginners</title>
            <link>https://samirpaul.in/posts/dp-for-beginners/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>dp</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;strong&gt;Longest Increasing Subsequence variants:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-increasing-subsequence/&#34;&gt;https://leetcode.com/problems/longest-increasing-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/largest-divisible-subset/&#34;&gt;https://leetcode.com/problems/largest-divisible-subset/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/russian-doll-envelopes/&#34;&gt;https://leetcode.com/problems/russian-doll-envelopes/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-length-of-pair-chain/&#34;&gt;https://leetcode.com/problems/maximum-length-of-pair-chain/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&#34;&gt;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/delete-and-earn/&#34;&gt;https://leetcode.com/problems/delete-and-earn/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-string-chain/&#34;&gt;https://leetcode.com/problems/longest-string-chain/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Partition Subset:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-equal-subset-sum/&#34;&gt;https://leetcode.com/problems/partition-equal-subset-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/last-stone-weight-ii/&#34;&gt;https://leetcode.com/problems/last-stone-weight-ii/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BitMasking:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&#34;&gt;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Longest Common Subsequence Variant:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-common-subsequence/&#34;&gt;https://leetcode.com/problems/longest-common-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/edit-distance/&#34;&gt;https://leetcode.com/problems/edit-distance/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/distinct-subsequences/&#34;&gt;https://leetcode.com/problems/distinct-subsequences/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&#34;&gt;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Palindrome:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/palindrome-partitioning-ii/&#34;&gt;https://leetcode.com/problems/palindrome-partitioning-ii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/palindromic-substrings/&#34;&gt;https://leetcode.com/problems/palindromic-substrings/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Coin Change variant:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change/&#34;&gt;https://leetcode.com/problems/coin-change/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change-2/&#34;&gt;https://leetcode.com/problems/coin-change-2/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/combination-sum-iv/&#34;&gt;https://leetcode.com/problems/combination-sum-iv/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/perfect-squares/&#34;&gt;https://leetcode.com/problems/perfect-squares/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-for-tickets/&#34;&gt;https://leetcode.com/problems/minimum-cost-for-tickets/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Matrix multiplication variant:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&#34;&gt;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&#34;&gt;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/burst-balloons/&#34;&gt;https://leetcode.com/problems/burst-balloons/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Matrix&amp;#x2F;2D Array:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/matrix-block-sum/&#34;&gt;https://leetcode.com/problems/matrix-block-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/range-sum-query-2d-immutable/&#34;&gt;https://leetcode.com/problems/range-sum-query-2d-immutable/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/dungeon-game/&#34;&gt;https://leetcode.com/problems/dungeon-game/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/triangle/&#34;&gt;https://leetcode.com/problems/triangle/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximal-square/&#34;&gt;https://leetcode.com/problems/maximal-square/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-falling-path-sum/&#34;&gt;https://leetcode.com/problems/minimum-falling-path-sum/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Hash + DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/target-sum/&#34;&gt;https://leetcode.com/problems/target-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-arithmetic-sequence/&#34;&gt;https://leetcode.com/problems/longest-arithmetic-sequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&#34;&gt;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&#34;&gt;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;State machine:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Depth First Search + DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/out-of-boundary-paths/&#34;&gt;https://leetcode.com/problems/out-of-boundary-paths/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/knight-probability-in-chessboard/&#34;&gt;https://leetcode.com/problems/knight-probability-in-chessboard/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Minimax DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/predict-the-winner/&#34;&gt;https://leetcode.com/problems/predict-the-winner/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/stone-game/&#34;&gt;https://leetcode.com/problems/stone-game/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Misc:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/greatest-sum-divisible-by-three/&#34;&gt;https://leetcode.com/problems/greatest-sum-divisible-by-three/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/decode-ways/&#34;&gt;https://leetcode.com/problems/decode-ways/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/perfect-squares/&#34;&gt;https://leetcode.com/problems/perfect-squares/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/count-numbers-with-unique-digits/&#34;&gt;https://leetcode.com/problems/count-numbers-with-unique-digits/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-turbulent-subarray/&#34;&gt;https://leetcode.com/problems/longest-turbulent-subarray/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&#34;&gt;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Sample-solutions-for-each-of-above-problem-type&#34;&gt;&lt;a href=&#34;#Sample-solutions-for-each-of-above-problem-type&#34; class=&#34;headerlink&#34; title=&#34;Sample solutions for each of above problem type:&#34;&gt;&lt;/a&gt;Sample solutions for each of above problem type:&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Longest Increasing Subsequence&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-increasing-subsequence/&#34;&gt;https://leetcode.com/problems/longest-increasing-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/largest-divisible-subset/&#34;&gt;https://leetcode.com/problems/largest-divisible-subset/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/russian-doll-envelopes/&#34;&gt;https://leetcode.com/problems/russian-doll-envelopes/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-length-of-pair-chain/&#34;&gt;https://leetcode.com/problems/maximum-length-of-pair-chain/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&#34;&gt;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/delete-and-earn/&#34;&gt;https://leetcode.com/problems/delete-and-earn/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-string-chain/&#34;&gt;https://leetcode.com/problems/longest-string-chain/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int lengthOfLIS(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;LIS(n+1, 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; i; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (nums[i] &amp;gt; nums[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					LIS[i] = max(LIS[i], 1 + LIS[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int ans = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			ans = max(ans, LIS[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return ans;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Partition Subset Sum:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-equal-subset-sum/&#34;&gt;https://leetcode.com/problems/partition-equal-subset-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/last-stone-weight-ii/&#34;&gt;https://leetcode.com/problems/last-stone-weight-ii/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool canPartition(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int sum = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sum += nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (sum % 2 != 0) return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int target = sum/2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;bool&amp;gt;dp(target+1, false);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dp[0] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = target; j &amp;gt;= nums[i]; j--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				dp[j] = dp[j] | dp[j - nums[i]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return dp[target];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;BitMasking in DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&#34;&gt;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int dp[(1&amp;lt;&amp;lt;16) + 2];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool canPartitionKSubsets(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		fill(dp, dp+(1&amp;lt;&amp;lt;16)+2, -1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int sum = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sum += nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (sum % k != 0) return false;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int target = sum/k;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dp[0] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int mask = 0; mask &amp;lt; (1&amp;lt;&amp;lt;n); mask++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (dp[mask] == -1) continue;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (!(mask &amp;amp; (1 &amp;lt;&amp;lt; i)) &amp;amp;&amp;amp; dp[mask] + nums[i] &amp;lt;= target)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					dp[mask | (1 &amp;lt;&amp;lt; i)] = (dp[mask] + nums[i]) % target;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return dp[(1&amp;lt;&amp;lt;n)-1] == 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Longest Common Subsequence&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-common-subsequence/&#34;&gt;https://leetcode.com/problems/longest-common-subsequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/edit-distance/&#34;&gt;https://leetcode.com/problems/edit-distance/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/distinct-subsequences/&#34;&gt;https://leetcode.com/problems/distinct-subsequences/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&#34;&gt;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int longestCommonSubsequenceUtil(string text1, string text2, int n, int m) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (n == 0 || m == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;L(n+1, vector&amp;lt;int&amp;gt;(m+1, 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt;= n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt;= m; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (i == 0 || j == 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					L[i][j] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				else if (text1[i-1] == text2[j-1])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					L[i][j] = 1 + L[i-1][j-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				else&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					L[i][j] = max(L[i][j-1], L[i-1][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return L[n][m];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int longestCommonSubsequence(string text1, string text2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = text1.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int m = text2.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return longestCommonSubsequenceUtil(text1, text2, n, m);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Palindrome:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/palindrome-partitioning-ii/&#34;&gt;https://leetcode.com/problems/palindrome-partitioning-ii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/palindromic-substrings/&#34;&gt;https://leetcode.com/problems/palindromic-substrings/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int minCut(string s) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = s.length();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int res[n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		bool P[n][n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			P[i][i] = true;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int L = 2; L &amp;lt;= n; L++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i &amp;lt; n-L+1; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int j = i+L-1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (L == 2) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					P[i][j] = (s[i] == s[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					P[i][j] = (s[i] == s[j]) &amp;amp;&amp;amp; P[i+1][j-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			if (P[0][i])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[i] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[i] = INT_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				for (int j = 0; j &amp;lt; i; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					if (P[j+1][i] &amp;amp;&amp;amp; res[i] &amp;gt; 1 + res[j])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;						res[i] = 1+res[j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res[n-1] == INT_MAX ? 1 : res[n-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Coin Change:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change/&#34;&gt;https://leetcode.com/problems/coin-change/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change-2/&#34;&gt;https://leetcode.com/problems/coin-change-2/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/combination-sum-iv/&#34;&gt;https://leetcode.com/problems/combination-sum-iv/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/perfect-squares/&#34;&gt;https://leetcode.com/problems/perfect-squares/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-for-tickets/&#34;&gt;https://leetcode.com/problems/minimum-cost-for-tickets/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int coinChange(vector&amp;lt;int&amp;gt;&amp;amp; coins, int amount) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = coins.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (n == 0) return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;res(amount+1, INT_MAX);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		res[0] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j =  coins[i]; j &amp;lt;= amount; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				if (res[j-coins[i]] != INT_MAX)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					res[j] = min(res[j], 1+res[j-coins[i]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res[amount] != INT_MAX ? res[amount] : -1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Matrix multiplication:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&#34;&gt;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&#34;&gt;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/burst-balloons/&#34;&gt;https://leetcode.com/problems/burst-balloons/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int minScoreTriangulation(vector&amp;lt;int&amp;gt;&amp;amp; A) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = A.size();        &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;dp(n, vector&amp;lt;int&amp;gt;(n, 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int L = 2; L &amp;lt;= n; L++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i+L &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int j = i+L;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				dp[i][j] = INT_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				for (int k = i+1; k &amp;lt; j; k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;					dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i]*A[k]*A[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return dp[0][n-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Matrix&amp;#x2F;2D Array:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/matrix-block-sum/&#34;&gt;https://leetcode.com/problems/matrix-block-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/range-sum-query-2d-immutable/&#34;&gt;https://leetcode.com/problems/range-sum-query-2d-immutable/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/dungeon-game/&#34;&gt;https://leetcode.com/problems/dungeon-game/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/triangle/&#34;&gt;https://leetcode.com/problems/triangle/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximal-square/&#34;&gt;https://leetcode.com/problems/maximal-square/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-falling-path-sum/&#34;&gt;https://leetcode.com/problems/minimum-falling-path-sum/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; matrixBlockSum(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; mat, int K) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int m = mat.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = mat[0].size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;sum(m+1, vector&amp;lt;int&amp;gt;(n+1, 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 1; i &amp;lt;= m; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 1; j &amp;lt;= n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;res(m, vector&amp;lt;int&amp;gt;(n, 0));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; m; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int j = 0; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int r1 = max(0, i-K); int c1 = max(0, j-K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int r2 = min(m-1, i+K); int c2 = min(n-1, j+K);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				r1++; r2++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				c1++; c2++;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[i][j] = sum[r2][c2] - (sum[r2][c1-1] + sum[r1-1][c2]- sum[r1-1][c1-1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Hash + DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/target-sum/&#34;&gt;https://leetcode.com/problems/target-sum/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-arithmetic-sequence/&#34;&gt;https://leetcode.com/problems/longest-arithmetic-sequence/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&#34;&gt;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&#34;&gt;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int findTargetSumWays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int S) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		unordered_map&amp;lt;int, int&amp;gt;hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		hm[0] = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			auto mp = hm;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			hm.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (auto it = mp.begin(); it != mp.end(); it++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				hm[it-&amp;gt;first + nums[i]] += it-&amp;gt;second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				hm[it-&amp;gt;first - nums[i]] += it-&amp;gt;second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return hm[S];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;State machine:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&#34;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int maxProfit(vector&amp;lt;int&amp;gt;&amp;amp; prices, int fee) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = prices.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;buy(n, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;int&amp;gt;sell(n, 0);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		buy[0] = -prices[0], sell[0] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 1; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			buy[i] = max(buy[i-1], sell[i-1]-prices[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			sell[i] = max(sell[i-1], buy[i-1]+prices[i]-fee);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return sell[n-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Depth First Search +DP:&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/out-of-boundary-paths/&#34;&gt;https://leetcode.com/problems/out-of-boundary-paths/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/knight-probability-in-chessboard/&#34;&gt;https://leetcode.com/problems/knight-probability-in-chessboard/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int mod = 1000000007;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int dfs(int m, int n, int N, int r, int c,  vector&amp;lt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;&amp;amp; dp) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (r &amp;lt; 0 || c &amp;lt; 0 || r &amp;gt;= m || c &amp;gt;= n) return 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (N == 0) return 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		if (dp[N][r][c] != -1) return dp[N][r][c]%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int moves = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		moves =  (moves + dfs(m, n, N-1, r, c+1, dp))%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		moves =  (moves + dfs(m, n, N-1, r, c-1, dp))%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		moves =  (moves + dfs(m, n, N-1, r+1, c, dp))%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		moves =  (moves + dfs(m, n, N-1, r-1, c, dp))%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		dp[N][r][c] = moves%mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return dp[N][r][c];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	int findPaths(int m, int n, int N, int i, int j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		vector&amp;lt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;dp(N+1, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;(m+1, vector&amp;lt;int&amp;gt;(n+1, -1)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return dfs(m, n, N, i, j, dp);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Minimax DP:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/predict-the-winner/&#34;&gt;https://leetcode.com/problems/predict-the-winner/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/stone-game/&#34;&gt;https://leetcode.com/problems/stone-game/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;class Solution &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;public:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	bool PredictTheWinner(vector&amp;lt;int&amp;gt;&amp;amp; nums) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int n = nums.size();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int res[n][n];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			res[i][i] = nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int l = 2; l &amp;lt;= n; l++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			for (int i = 0; i+l-1 &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int j = i+l-1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int a = (i+1 &amp;lt;= j-1) ? res[i+1][j-1] : 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int b = (i+2 &amp;lt;= j) ? res[i+2][j] : 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				int c = (i &amp;lt;= j-2) ? res[i][j-2] : 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;				res[i][j] = max(nums[i] + min(a,b), nums[j] + min(a, c));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		int total = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		for (int i = 0; i &amp;lt; n; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;			total += nums[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		return res[0][n-1] &amp;gt;= total - res[0][n-1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Miscellaneous:&lt;/strong&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/greatest-sum-divisible-by-three/&#34;&gt;https://leetcode.com/problems/greatest-sum-divisible-by-three/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/decode-ways/&#34;&gt;https://leetcode.com/problems/decode-ways/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/count-numbers-with-unique-digits/&#34;&gt;https://leetcode.com/problems/count-numbers-with-unique-digits/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-turbulent-subarray/&#34;&gt;https://leetcode.com/problems/longest-turbulent-subarray/&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&#34;&gt;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&lt;/a&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/dynamic-programming-patterns/</guid>
            <title>Dynamic Programming Patterns</title>
            <link>https://samirpaul.in/posts/dynamic-programming-patterns/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>Dynamic Programming</category>
            <category>Patterns</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/77569653/226705479-a4d6c0a3-0191-4d45-8bf6-597ffaa5de40.png&#34; alt=&#34;Banner&#34;&gt;&lt;/p&gt;
&lt;p&gt;Before starting the topic let me introduce myself. I am a Mobile Developer currently working in Warsaw and spending my free time for interview preparations. I started to prepare for interviews two years ago. At that time I should say I could not solve the two sum problem. Easy problems seemed to me like hard ones so most of the time I had to look at editorials and discuss section. Currently, I have solved ~800 problems and time to time participate in contests. I usually solve 3 problems in a contest and sometimes 4 problems. Ok, lets come back to the topic.&lt;/p&gt;
&lt;p&gt;Recently I have concentrated my attention on Dynamic Programming cause its one of the hardest topics in an interview prep. After solving ~140 problems in DP I have noticed that there are few patterns that can be found in different problems. So I did a research on that and find the following topics. I will not give complete ways how to solve problems but these patterns may be helpful in solving DP.&lt;/p&gt;
&lt;h1 id=&#34;Patterns&#34;&gt;&lt;a href=&#34;#Patterns&#34; class=&#34;headerlink&#34; title=&#34;Patterns&#34;&gt;&lt;/a&gt;Patterns&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Minimum-(Maximum)-Path-to-Reach-a-Target&#34;&gt;Minimum (Maximum) Path to Reach a Target&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#distinct-ways&#34;&gt;Distinct Ways&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Merging-Intervals&#34;&gt;Merging Intervals&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#DP-on-Strings&#34;&gt;DP on Strings&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Decision-Making&#34;&gt;Decision Making&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;Minimum-Maximum-Path-to-Reach-a-Target&#34;&gt;&lt;a href=&#34;#Minimum-Maximum-Path-to-Reach-a-Target&#34; class=&#34;headerlink&#34; title=&#34;Minimum (Maximum) Path to Reach a Target&#34;&gt;&lt;/a&gt;Minimum (Maximum) Path to Reach a Target&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Problem list: &lt;a href=&#34;https://leetcode.com/list/55ac4kuc&#34;&gt;https://leetcode.com/list/55ac4kuc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generate problem statement for this pattern&lt;/p&gt;
&lt;h3 id=&#34;Statement&#34;&gt;&lt;a href=&#34;#Statement&#34; class=&#34;headerlink&#34; title=&#34;Statement&#34;&gt;&lt;/a&gt;Statement&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a target find minimum (maximum) cost &amp;#x2F; path &amp;#x2F; sum to reach the target.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Approach&#34;&gt;&lt;a href=&#34;#Approach&#34; class=&#34;headerlink&#34; title=&#34;Approach&#34;&gt;&lt;/a&gt;Approach&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;routes[i] = min(routes[i-1], routes[i-2], ... , routes[i-k]) + cost[i]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Generate optimal solutions for all values in the target and return the value for the target.&lt;/p&gt;
&lt;h3 id=&#34;Top-Down&#34;&gt;&lt;a href=&#34;#Top-Down&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int j = 0; j &amp;lt; ways.size(); ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = min(result, topDown(target - ways[j]) + cost/ path / sum);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[/*state parameters*/] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up&#34;&gt;&lt;a href=&#34;#Bottom-Up&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= target; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 0; j &amp;lt; ways.size(); ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (ways[j] &amp;lt;= i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i] = min(dp[i], dp[i - ways[j]] + cost / path / sum) ;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[target]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Similar-Problems&#34;&gt;&lt;a href=&#34;#Similar-Problems&#34; class=&#34;headerlink&#34; title=&#34;Similar Problems&#34;&gt;&lt;/a&gt;Similar Problems&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/min-cost-climbing-stairs/&#34;&gt;746. Min Cost Climbing Stairs&lt;/a&gt; &lt;code&gt;Easy&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-1&#34;&gt;&lt;a href=&#34;#Top-Down-1&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int result = min(minCost(n-1, cost, memo), minCost(n-2, cost, memo)) + (n == cost.size() ? 0 : cost[n]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[n] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-1&#34;&gt;&lt;a href=&#34;#Bottom-Up-1&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 2; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   dp[i] = min(dp[i-1], dp[i-2]) + (i == n ? 0 : cost[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[n]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-path-sum/&#34;&gt;64. Minimum Path Sum&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-2&#34;&gt;&lt;a href=&#34;#Top-Down-2&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int result = min(pathSum(i+1, j, grid, memo), pathSum(i, j+1, grid, memo)) + grid[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[i][j] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-2&#34;&gt;&lt;a href=&#34;#Bottom-Up-2&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt; n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 1; j &amp;lt; m; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return grid[n-1][m-1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change/&#34;&gt;322. Coin Change&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-3&#34;&gt;&lt;a href=&#34;#Top-Down-3&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 0; i &amp;lt; coins.size(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    if (coins[i] &amp;lt;= target) &amp;#123; // check validity of a sub-problem&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result = min(ans, CoinChange(target - coins[i], coins) + 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[target] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-3&#34;&gt;&lt;a href=&#34;#Bottom-Up-3&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int j = 1; j &amp;lt;= amount; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int i = 0; i &amp;lt; coins.size(); ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (coins[i] &amp;lt;= j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[j] = min(dp[j], dp[j - coins[i]] + 1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-falling-path-sum/&#34;&gt;931. Minimum Falling Path Sum&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-for-tickets/&#34;&gt;983. Minimum Cost For Tickets&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/2-keys-keyboard/&#34;&gt;650. 2 Keys Keyboard&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/perfect-squares/&#34;&gt;279. Perfect Squares&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/last-stone-weight-ii/&#34;&gt;1049. Last Stone Weight II&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/triangle/&#34;&gt;120. Triangle&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/ones-and-zeroes/&#34;&gt;474. Ones and Zeroes&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/maximal-square/&#34;&gt;221. Maximal Square&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/coin-change/&#34;&gt;322. Coin Change&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/&#34;&gt;1240. Tiling a Rectangle with the Fewest Squares&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/dungeon-game/&#34;&gt;174. Dungeon Game&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-number-of-refueling-stops/&#34;&gt;871. Minimum Number of Refueling Stops&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;Distinct-Ways&#34;&gt;&lt;a href=&#34;#Distinct-Ways&#34; class=&#34;headerlink&#34; title=&#34;Distinct Ways&#34;&gt;&lt;/a&gt;Distinct Ways&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Problem List: &lt;a href=&#34;https://leetcode.com/list/55ajm50i&#34;&gt;https://leetcode.com/list/55ajm50i&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generate problem statement for this pattern&lt;/p&gt;
&lt;h3 id=&#34;Statement-1&#34;&gt;&lt;a href=&#34;#Statement-1&#34; class=&#34;headerlink&#34; title=&#34;Statement&#34;&gt;&lt;/a&gt;Statement&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a target find a number of distinct ways to reach the target.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Approach-1&#34;&gt;&lt;a href=&#34;#Approach-1&#34; class=&#34;headerlink&#34; title=&#34;Approach&#34;&gt;&lt;/a&gt;Approach&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Sum all possible ways to reach the current state.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;routes[i] = routes[i-1] + routes[i-2], ... , + routes[i-k]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Generate sum for all values in the target and return the value for the target.&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-4&#34;&gt;&lt;a href=&#34;#Top-Down-4&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int j = 0; j &amp;lt; ways.size(); ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result += topDown(target - ways[j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[/*state parameters*/] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-4&#34;&gt;&lt;a href=&#34;#Bottom-Up-4&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= target; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 0; j &amp;lt; ways.size(); ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (ways[j] &amp;lt;= i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i] += dp[i - ways[j]];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[target]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Similar-Problems-1&#34;&gt;&lt;a href=&#34;#Similar-Problems-1&#34; class=&#34;headerlink&#34; title=&#34;Similar Problems&#34;&gt;&lt;/a&gt;Similar Problems&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/climbing-stairs/&#34;&gt;70. Climbing Stairs&lt;/a&gt; &lt;code&gt;Easy&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-5&#34;&gt;&lt;a href=&#34;#Top-Down-5&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int result = climbStairs(n-1, memo) + climbStairs(n-2, memo); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[n] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-5&#34;&gt;&lt;a href=&#34;#Bottom-Up-5&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int stair = 2; stair &amp;lt;= n; ++stair) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int step = 1; step &amp;lt;= 2; ++step) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       dp[stair] += dp[stair-step];   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/unique-paths/&#34;&gt;62. Unique Paths&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-6&#34;&gt;&lt;a href=&#34;#Top-Down-6&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;int result = UniquePaths(x-1, y) + UniquePaths(x, y-1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[x][y] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-6&#34;&gt;&lt;a href=&#34;#Bottom-Up-6&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt; m; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 1; j &amp;lt; n; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       dp[i][j] = dp[i][j-1] + dp[i-1][j];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&#34;&gt;1155. Number of Dice Rolls With Target Sum&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int rep = 1; rep &amp;lt;= d; ++rep) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   vector&amp;lt;int&amp;gt; new_ways(target+1);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int already = 0; already &amp;lt;= target; ++already) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       for (int pipe = 1; pipe &amp;lt;= f; ++pipe) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           if (already - pipe &amp;gt;= 0) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               new_ways[already] += ways[already - pipe];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               new_ways[already] %= mod;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   ways = new_ways;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Some questions point out the number of repetitions, in that case, add one more loop to simulate every repetition.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/knight-probability-in-chessboard/&#34;&gt;688. Knight Probability in Chessboard&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/target-sum/&#34;&gt;494. Target Sum&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/combination-sum-iv/&#34;&gt;377. Combination Sum IV&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/knight-dialer/&#34;&gt;935. Knight Dialer&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/dice-roll-simulation/&#34;&gt;1223. Dice Roll Simulation&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/partition-equal-subset-sum/&#34;&gt;416. Partition Equal Subset Sum&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/soup-servings/&#34;&gt;808. Soup Servings&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/domino-and-tromino-tiling/&#34;&gt;790. Domino and Tromino Tiling&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/&#34;&gt;801. Minimum Swaps To Make Sequences Increasing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&#34;&gt;673. Number of Longest Increasing Subsequence&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/unique-paths-ii/&#34;&gt;63. Unique Paths II&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/out-of-boundary-paths/&#34;&gt;576. Out of Boundary Paths&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/&#34;&gt;1269. Number of Ways to Stay in the Same Place After Some Steps&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/count-vowels-permutation/&#34;&gt;1220. Count Vowels Permutation&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;Merging-Intervals&#34;&gt;&lt;a href=&#34;#Merging-Intervals&#34; class=&#34;headerlink&#34; title=&#34;Merging Intervals&#34;&gt;&lt;/a&gt;Merging Intervals&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Problem List: &lt;a href=&#34;https://leetcode.com/list/55aj8s16&#34;&gt;https://leetcode.com/list/55aj8s16&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Generate problem statement for this pattern&lt;/p&gt;
&lt;h3 id=&#34;Statement-2&#34;&gt;&lt;a href=&#34;#Statement-2&#34; class=&#34;headerlink&#34; title=&#34;Statement&#34;&gt;&lt;/a&gt;Statement&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Approach-2&#34;&gt;&lt;a href=&#34;#Approach-2&#34; class=&#34;headerlink&#34; title=&#34;Approach&#34;&gt;&lt;/a&gt;Approach&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Find all optimal solutions for every interval and return the best possible answer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// from i to j&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Get the best from the left and right sides and add a solution for the current position.&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-7&#34;&gt;&lt;a href=&#34;#Top-Down-7&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int k = i; k &amp;lt;= j; ++k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = max(result, topDown(nums, i, k-1) + result[k] + topDown(nums, k+1, j));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[/*state parameters*/] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-7&#34;&gt;&lt;a href=&#34;#Bottom-Up-7&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for(int l = 1; l&amp;lt;n; l++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for(int i = 0; i&amp;lt;n-l; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       int j = i+l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       for(int k = i; k&amp;lt;j; k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[0][n-1];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for(int l = 1; l&amp;lt;n; l++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for(int i = 0; i&amp;lt;n-l; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       int j = i+l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       for(int k = i; k&amp;lt;j; k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[0][n-1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Similar-Problems-2&#34;&gt;&lt;a href=&#34;#Similar-Problems-2&#34; class=&#34;headerlink&#34; title=&#34;Similar Problems&#34;&gt;&lt;/a&gt;Similar Problems&lt;/h3&gt;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&#34;&gt;1130. Minimum Cost Tree From Leaf Values&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int l = 1; l &amp;lt; n; ++l) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int i = 0; i &amp;lt; n - l; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       int j = i + l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       dp[i][j] = INT_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       for (int k = i; k &amp;lt; j; ++k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxs[i][k] * maxs[k+1][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/unique-binary-search-trees/&#34;&gt;96. Unique Binary Search Trees&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&#34;&gt;1039. Minimum Score Triangulation of Polygon&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-boxes/&#34;&gt;546. Remove Boxes&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-cost-to-merge-stones/&#34;&gt;1000. Minimum Cost to Merge Stones&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/burst-balloons/&#34;&gt;312. Burst Balloons&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;Top-Down-8&#34;&gt;&lt;a href=&#34;#Top-Down-8&#34; class=&#34;headerlink&#34; title=&#34;Top-Down&#34;&gt;&lt;/a&gt;Top-Down&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int k = i; k &amp;lt;= j; ++k) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    result = max(result, topDown(nums, i, k-1, memo) + (i-1 &amp;gt;= 0 ? nums[i-1] : 1) * nums[k] * (j+1 &amp;lt; nums.size() ? nums[j+1] : 1) + topDown(nums, k+1, j, memo));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return memo[i][j] = result;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Bottom-Up-8&#34;&gt;&lt;a href=&#34;#Bottom-Up-8&#34; class=&#34;headerlink&#34; title=&#34;Bottom-Up&#34;&gt;&lt;/a&gt;Bottom-Up&lt;/h3&gt;&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for(int l = 1; l &amp;lt; n; l++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    for(int i = 0; i &amp;lt; n-l; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        int j = i+l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        for(int k = i; k &amp;lt;= j; k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            dp[i][j] = max(dp[i][j], (((k&amp;gt;i &amp;amp;&amp;amp; k&amp;gt;0) ? dp[i][k-1] : 0) + (i&amp;gt;0 ? nums[i-1] : 1) * nums[k] * (j&amp;lt;n-1 ? nums[j+1] : 1) + ((k&amp;lt;j &amp;amp;&amp;amp; k&amp;lt;n-1) ? dp[k+1][j] : 0)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;return dp[0][n-1];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/guess-number-higher-or-lower-ii/&#34;&gt;375. Guess Number Higher or Lower II&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;DP-on-Strings&#34;&gt;&lt;a href=&#34;#DP-on-Strings&#34; class=&#34;headerlink&#34; title=&#34;DP on Strings&#34;&gt;&lt;/a&gt;DP on Strings&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Problem List: &lt;a href=&#34;https://leetcode.com/list/55afh7m7&#34;&gt;https://leetcode.com/list/55afh7m7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;General problem statement for this pattern can vary but most of the time you are given two strings where lengths of those strings are not big&lt;/p&gt;
&lt;h3 id=&#34;Statement-3&#34;&gt;&lt;a href=&#34;#Statement-3&#34; class=&#34;headerlink&#34; title=&#34;Statement&#34;&gt;&lt;/a&gt;Statement&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given two strings &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;, return &lt;code&gt;some result&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Approach-3&#34;&gt;&lt;a href=&#34;#Approach-3&#34; class=&#34;headerlink&#34; title=&#34;Approach&#34;&gt;&lt;/a&gt;Approach&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Most of the problems on this pattern requires a solution that can be accepted in O(n^2) complexity.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// i - indexing string s1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// j - indexing string s2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (s1[i-1] == s2[j-1]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = /*code*/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = /*code*/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are given one string &lt;code&gt;s&lt;/code&gt; the approach may little vary&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int l = 1; l &amp;lt; n; ++l) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int i = 0; i &amp;lt; n-l; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       int j = i + l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (s[i] == s[j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = /*code*/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = /*code*/;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-common-subsequence/&#34;&gt;1143. Longest Common Subsequence&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt;= n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 1; j &amp;lt;= m; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (text1[i-1] == text2[j-1]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = dp[i-1][j-1] + 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = max(dp[i-1][j], dp[i][j-1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/palindromic-substrings/&#34;&gt;647. Palindromic Substrings&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int l = 1; l &amp;lt; n; ++l) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int i = 0; i &amp;lt; n-l; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       int j = i + l;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       if (s[i] == s[j] &amp;amp;&amp;amp; dp[i+1][j-1] == j-i-1) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = dp[i+1][j-1] + 2;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125; else &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;           dp[i][j] = 0;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-palindromic-subsequence/&#34;&gt;516. Longest Palindromic Subsequence&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/shortest-common-supersequence/&#34;&gt;1092. Shortest Common Supersequence&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/edit-distance/&#34;&gt;72. Edit Distance&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/distinct-subsequences/&#34;&gt;115. Distinct Subsequences&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&#34;&gt;712. Minimum ASCII Delete Sum for Two Strings&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-palindromic-substring/&#34;&gt;5. Longest Palindromic Substring&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;Decision-Making&#34;&gt;&lt;a href=&#34;#Decision-Making&#34; class=&#34;headerlink&#34; title=&#34;Decision Making&#34;&gt;&lt;/a&gt;Decision Making&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;Problem List: &lt;a href=&#34;https://leetcode.com/list/55af7bu7&#34;&gt;https://leetcode.com/list/55af7bu7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The general problem statement for this pattern is forgiven situation decide whether to use or not to use the current state. So, the problem requires you to make a decision at a current state.&lt;/p&gt;
&lt;h3 id=&#34;Statement-4&#34;&gt;&lt;a href=&#34;#Statement-4&#34; class=&#34;headerlink&#34; title=&#34;Statement&#34;&gt;&lt;/a&gt;Statement&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Given a set of values find an answer with an option to choose or ignore the current value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;Approach-4&#34;&gt;&lt;a href=&#34;#Approach-4&#34; class=&#34;headerlink&#34; title=&#34;Approach&#34;&gt;&lt;/a&gt;Approach&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;If you decide to choose the current value use the previous result where the value was ignored; vice-versa, if you decide to ignore the current value use previous result where value was used.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;// i - indexing a set of values&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;// j - options to ignore j values&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt; n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   for (int j = 1; j &amp;lt;= k; ++j) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       dp[i][j] = max(&amp;#123;dp[i][j], dp[i-1][j] + arr[i], dp[i-1][j-1]&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       dp[i][j-1] = max(&amp;#123;dp[i][j-1], dp[i-1][j-1] + arr[i], arr[i]&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/house-robber/&#34;&gt;198. House Robber&lt;/a&gt; &lt;code&gt;Easy&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;for (int i = 1; i &amp;lt; n; ++i) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   dp[i][1] = max(dp[i-1][0] + nums[i], dp[i-1][1]);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;   dp[i][0] = dp[i-1][1];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&#34;&gt;121. Best Time to Buy and Sell Stock&lt;/a&gt; &lt;code&gt;Easy&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&#34;&gt;714. Best Time to Buy and Sell Stock with Transaction Fee&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&#34;&gt;309. Best Time to Buy and Sell Stock with Cooldown&lt;/a&gt; &lt;code&gt;Medium&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&#34;&gt;123. Best Time to Buy and Sell Stock III&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&#34;&gt;188. Best Time to Buy and Sell Stock IV&lt;/a&gt; &lt;code&gt;Hard&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I hope these tips will be helpful 😊&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/embed-music/</guid>
            <title>Embed MusicApp</title>
            <link>https://samirpaul.in/posts/embed-music/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>embed-musicapp</category>
            <category>music</category>
            <category>embeded</category>
            <category>music-player</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;Embed &lt;a href=&#34;https://samirpaul.in/music/embed&#34;&gt;&lt;b&gt;samirpaul.in&amp;#x2F;music&amp;#x2F;embed&lt;/b&gt;&lt;/a&gt; music player(Lofi Study Music) to any website:&lt;/p&gt;
&lt;h3 id=&#34;Demo&#34;&gt;&lt;a href=&#34;#Demo&#34; class=&#34;headerlink&#34; title=&#34;Demo:&#34;&gt;&lt;/a&gt;Demo:&lt;/h3&gt;&lt;iframe src=&#34;https://samirpaul.in/music/embed/index.html&#34;
  title=&#34;Embed MusicApp&#34;
    frameborder=&#34;0&#34;
    loading=&#34;lazy&#34;
    marginheight=&#34;0&#34;
    marginwidth=&#34;0&#34;
    width=&#34;100%&#34;
    height=&#34;223&#34;
    scrolling=&#34;no&#34;&gt;
&lt;/iframe&gt;


&lt;h3 id=&#34;Code&#34;&gt;&lt;a href=&#34;#Code&#34; class=&#34;headerlink&#34; title=&#34;Code:&#34;&gt;&lt;/a&gt;Code:&lt;/h3&gt;&lt;figure class=&#34;highlight html&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;&lt;span class=&#34;name&#34;&gt;iframe&lt;/span&gt; &lt;span class=&#34;attr&#34;&gt;src&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;https://samirpaul.in/music/embed&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;  &lt;span class=&#34;attr&#34;&gt;title&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;Embed MusicApp&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;	&lt;span class=&#34;attr&#34;&gt;frameborder&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;	&lt;span class=&#34;attr&#34;&gt;loading&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;lazy&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;	&lt;span class=&#34;attr&#34;&gt;marginheight&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;	&lt;span class=&#34;attr&#34;&gt;marginwidth&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;	&lt;span class=&#34;attr&#34;&gt;width&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;100%&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;	&lt;span class=&#34;attr&#34;&gt;height&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;223&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;	&lt;span class=&#34;attr&#34;&gt;scrolling&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;no&amp;quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;tag&#34;&gt;&amp;lt;/&lt;span class=&#34;name&#34;&gt;iframe&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/url-shortening-service/</guid>
            <title>URL Shortening Service</title>
            <link>https://samirpaul.in/posts/url-shortening-service/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>preparation</category>
            <category>short-url</category>
            <category>url-shortner</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;URL-Shortening-Service&#34;&gt;&lt;a href=&#34;#URL-Shortening-Service&#34; class=&#34;headerlink&#34; title=&#34;URL Shortening Service&#34;&gt;&lt;/a&gt;URL Shortening Service&lt;/h1&gt;&lt;h2 id=&#34;Summary&#34;&gt;&lt;a href=&#34;#Summary&#34; class=&#34;headerlink&#34; title=&#34;Summary&#34;&gt;&lt;/a&gt;Summary&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SamirPaulb/assets/main/blog/system-design/short-url-overview.png&#34; alt=&#34;overview&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://raw.githubusercontent.com/SamirPaulb/assets/main/blog/system-design/short-url-detail.png&#34; alt=&#34;summary&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Requirements&#34;&gt;&lt;a href=&#34;#Requirements&#34; class=&#34;headerlink&#34; title=&#34;Requirements&#34;&gt;&lt;/a&gt;Requirements&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Functional Requirements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Given a URL, generate a shorter and unique alias (short link).&lt;/li&gt;
&lt;li&gt;When users access a short link, redirect to the original link.&lt;/li&gt;
&lt;li&gt;Users should optionally be able to pick a custom short link for their URL.&lt;/li&gt;
&lt;li&gt;Links will expire after a standard default timespan. Users should also be able to specify the expiration time.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Non-Functional Requirements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The system should be highly available. This is required because, if our service is down, all the URL redirections will start failing.&lt;/li&gt;
&lt;li&gt;URL redirection should happen in real-time with minimal latency.&lt;/li&gt;
&lt;li&gt;Shortened links should not be guessable (not predictable).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Extended Requirements&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Analytics; e.g., how many times a redirection happened?&lt;/li&gt;
&lt;li&gt;Be accessible through REST APIs by other services.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Capacity-Estimation-and-Constraints&#34;&gt;&lt;a href=&#34;#Capacity-Estimation-and-Constraints&#34; class=&#34;headerlink&#34; title=&#34;Capacity Estimation and Constraints&#34;&gt;&lt;/a&gt;Capacity Estimation and Constraints&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Assumption&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Read-heavy. More redirection requests compared to new URL shortenings.&lt;/li&gt;
&lt;li&gt;Assume &lt;strong&gt;100:1&lt;/strong&gt; ratio between read and write.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Traffic estimates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;500M&lt;/strong&gt; new URL shortenings per month, 100 * 500M &amp;#x3D;&amp;gt; 50B redirections per month.&lt;/li&gt;
&lt;li&gt;New URL shortenings per second&lt;ul&gt;
&lt;li&gt;500 million &amp;#x2F; (30 days * 24 hours * 3600 seconds) &amp;#x3D; &lt;strong&gt;~200 URLs&amp;#x2F;s&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;URLs redirections per second&lt;ul&gt;
&lt;li&gt;50 billion &amp;#x2F; (30 days * 24 hours * 3600 sec) &amp;#x3D; &lt;strong&gt;~19K&amp;#x2F;s&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Storage estimates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assume storing every URL shortening request for 5 years, each object takes &lt;strong&gt;500 bytes&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Total objects: 500 million * 5 years * 12 months &amp;#x3D; &lt;strong&gt;30 billion&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Total storage: 30 billion * 500 bytes &amp;#x3D; &lt;strong&gt;15 TB&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Bandwidth estimates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Write: 200 URL&amp;#x2F;s * 500 bytes&amp;#x2F;URL &amp;#x3D; &lt;strong&gt;100 KB&amp;#x2F;s&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Read: 19K URL&amp;#x2F;s * 500 bytes&amp;#x2F;URL &amp;#x3D; &lt;strong&gt;~9 MB&amp;#x2F;s&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Cache memory estimates&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the 80-20 rule, assuming 20% of URLs generate 80% of traffic, cache 20% hot URLs&lt;/li&gt;
&lt;li&gt;Requests per day: 19K * 3600 seconds * 24 hours &amp;#x3D; &lt;strong&gt;~1.7 billion&amp;#x2F;day&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Cache 20%: 0.2 * 1.7 billion * 500 bytes &amp;#x3D; &lt;strong&gt;~170GB&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Summary&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assuming 500 million new URLs per month and 100:1 read:write ratio&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Category&lt;/th&gt;
&lt;th&gt;Calculation&lt;/th&gt;
&lt;th&gt;Estimate&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;New URLs&lt;/td&gt;
&lt;td&gt;500 million &amp;#x2F; (30 days * 24 hours * 3600 seconds)&lt;/td&gt;
&lt;td&gt;200 &amp;#x2F;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;URL redirections&lt;/td&gt;
&lt;td&gt;500 million * 100 &amp;#x2F; (30 days * 24 hours * 3600 seconds)&lt;/td&gt;
&lt;td&gt;19 K&amp;#x2F;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Incoming data&lt;/td&gt;
&lt;td&gt;500 bytes&amp;#x2F;URL * 200 URL&amp;#x2F;s&lt;/td&gt;
&lt;td&gt;100 KB&amp;#x2F;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Outgoing data&lt;/td&gt;
&lt;td&gt;500 bytes&amp;#x2F;URL * 19K URL&amp;#x2F;s&lt;/td&gt;
&lt;td&gt;9 MB&amp;#x2F;s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Storage for 5 years&lt;/td&gt;
&lt;td&gt;500 bytes&amp;#x2F;URL * 500 million * 60 months&lt;/td&gt;
&lt;td&gt;15 TB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Memory for cache&lt;/td&gt;
&lt;td&gt;19K URL * 3600 seconds * 24 hours * 500 bytes * 20%&lt;/td&gt;
&lt;td&gt;170 GB&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;System-APIs&#34;&gt;&lt;a href=&#34;#System-APIs&#34; class=&#34;headerlink&#34; title=&#34;System APIs&#34;&gt;&lt;/a&gt;System APIs&lt;/h2&gt;&lt;h3 id=&#34;createUrl&#34;&gt;&lt;a href=&#34;#createUrl&#34; class=&#34;headerlink&#34; title=&#34;createUrl&#34;&gt;&lt;/a&gt;&lt;code&gt;createUrl&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Parameters&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;api_dev_key&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;original_url&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Original URL to be shortened.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;custom_alias&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Optional custom key for the URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;user_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Optional user name to be used in encoding.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;expire_date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Optional expiration date for the shortened URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;Return&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A successful insertion returns the shortened URL; otherwise, it returns an error code.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;deleteUrl&#34;&gt;&lt;a href=&#34;#deleteUrl&#34; class=&#34;headerlink&#34; title=&#34;deleteUrl&#34;&gt;&lt;/a&gt;&lt;code&gt;deleteUrl&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Parameters&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Note&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;api_dev_key&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The API developer key of a registered account. This will be used to, among other things, throttle users based on their allocated quota.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;url_key&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Short URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;Return&lt;ul&gt;
&lt;li&gt;&lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A successful deletion returns ‘URL Removed’.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Database-design&#34;&gt;&lt;a href=&#34;#Database-design&#34; class=&#34;headerlink&#34; title=&#34;Database design&#34;&gt;&lt;/a&gt;Database design&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Observations&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Need to store billions of records.&lt;/li&gt;
&lt;li&gt;Each object is small (less than 1K).&lt;/li&gt;
&lt;li&gt;No relationships between records—other than storing which user created a URL.&lt;/li&gt;
&lt;li&gt;Read-heavy.&lt;/li&gt;
&lt;li&gt;A NoSQL choice would also be easier to scale.&lt;/li&gt;
&lt;li&gt;Comment: SQL with sharding should also work&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Schema&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URL&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;varchar(16)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;original_url&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;varchar(512)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;creation_date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;datetime&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;expiration_date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;datetime&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;user_id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;User&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Column&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;varchar(20)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;email&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;varchar(32)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;creation_date&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;datetime&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;last_login&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;datetime&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Basic-System-Design-and-Algorithm&#34;&gt;&lt;a href=&#34;#Basic-System-Design-and-Algorithm&#34; class=&#34;headerlink&#34; title=&#34;Basic System Design and Algorithm&#34;&gt;&lt;/a&gt;Basic System Design and Algorithm&lt;/h2&gt;&lt;h3 id=&#34;Encoding-actual-URL&#34;&gt;&lt;a href=&#34;#Encoding-actual-URL&#34; class=&#34;headerlink&#34; title=&#34;Encoding actual URL&#34;&gt;&lt;/a&gt;Encoding actual URL&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Compute unique hash&lt;ul&gt;
&lt;li&gt;&lt;code&gt;base64&lt;/code&gt;: A-Z, a-z, 0-9, &lt;code&gt;-&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;6 letters: 64 ^ 6 &amp;#x3D; ~68.7 billion&lt;/li&gt;
&lt;li&gt;8 letters: 64 ^ 8 &amp;#x3D; ~281 trillion&lt;/li&gt;
&lt;li&gt;Use 6 letters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MD5&lt;/code&gt; generates 128 bit hash value&lt;/li&gt;
&lt;li&gt;Each &lt;code&gt;base64&lt;/code&gt; character encodes 6 bits&lt;/li&gt;
&lt;li&gt;&lt;code&gt;base64&lt;/code&gt; encoding generates 22 characters&lt;/li&gt;
&lt;li&gt;Select 8 characters&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Issues with this approach&lt;ul&gt;
&lt;li&gt;Same URL from multiple users&lt;/li&gt;
&lt;li&gt;URL-encoded&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Workaround&lt;ul&gt;
&lt;li&gt;Append an increasing sequence number to each input URL, and generate a hash for it&lt;/li&gt;
&lt;li&gt;Append user id to input URL&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Generating-keys-offline&#34;&gt;&lt;a href=&#34;#Generating-keys-offline&#34; class=&#34;headerlink&#34; title=&#34;Generating keys offline&#34;&gt;&lt;/a&gt;Generating keys offline&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Standalone Key Generation Service (KGS)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generate random 6 letter strings and store them in a database (key DB)&lt;/li&gt;
&lt;li&gt;When a short URL is needed, take one from the key DB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Key DB size&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;6 characters&amp;#x2F;key * 68.7B unique keys &amp;#x3D; 412 GB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Concurrency issue&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If there are multiple servers reading keys concurrently, two or more servers try to read the same key from the database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Workaround&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Servers can use KGS to read&amp;#x2F;mark keys in the database.&lt;/li&gt;
&lt;li&gt;KGS can use two tables to store keys: one for keys that are not used yet, and one for all the used keys.&lt;/li&gt;
&lt;li&gt;KGS can always keep some keys in memory so that it can quickly provide them whenever a server needs them.&lt;/li&gt;
&lt;li&gt;KGS needs to make sure not to give the same key to multiple servers.&lt;/li&gt;
&lt;li&gt;Comment: keys are sharded. Each KGS server only serves one application server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Key lookup&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When a key is found, issue an “HTTP 302 Redirect” status and passing the stored URL.&lt;/li&gt;
&lt;li&gt;When a key is not found, issue an “HTTP 404 Not Found”, or redirect to homepage.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;UUID&#34;&gt;&lt;a href=&#34;#UUID&#34; class=&#34;headerlink&#34; title=&#34;UUID&#34;&gt;&lt;/a&gt;UUID&lt;/h3&gt;&lt;p&gt;Replace KGS with UUID.&lt;/p&gt;
&lt;h2 id=&#34;Data-Partitioning-and-Replication&#34;&gt;&lt;a href=&#34;#Data-Partitioning-and-Replication&#34; class=&#34;headerlink&#34; title=&#34;Data Partitioning and Replication&#34;&gt;&lt;/a&gt;Data Partitioning and Replication&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Range Based Partitioning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Store URLs in separate partitions based on the first letter of the URL or the hash key.&lt;/li&gt;
&lt;li&gt;Combine certain less frequently occurring letters into one database partition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Problem with this approach&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unbalanced servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Hash-Based Partitioning&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take a hash of the short URL we are storing, and calculate which partition to use based upon the hash.&lt;/li&gt;
&lt;li&gt;Use consistent hashing&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Cache&#34;&gt;&lt;a href=&#34;#Cache&#34; class=&#34;headerlink&#34; title=&#34;Cache&#34;&gt;&lt;/a&gt;Cache&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Eviction policy&lt;ul&gt;
&lt;li&gt;LRU: discard the least recently used URL first&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache update&lt;ul&gt;
&lt;li&gt;Cache miss: hit backend database and pass new entry to all cache replicas&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Load-Balancer-LB&#34;&gt;&lt;a href=&#34;#Load-Balancer-LB&#34; class=&#34;headerlink&#34; title=&#34;Load Balancer (LB)&#34;&gt;&lt;/a&gt;Load Balancer (LB)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;LB locations&lt;ul&gt;
&lt;li&gt;Between Clients and Application servers&lt;/li&gt;
&lt;li&gt;Between Application Servers and database servers&lt;/li&gt;
&lt;li&gt;Between Application Servers and Cache servers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;DB-Sweeping&#34;&gt;&lt;a href=&#34;#DB-Sweeping&#34; class=&#34;headerlink&#34; title=&#34;DB Sweeping&#34;&gt;&lt;/a&gt;DB Sweeping&lt;/h2&gt;&lt;p&gt;A separate Cleanup service can run periodically to remove expired links from our storage and cache.&lt;/p&gt;
&lt;h2 id=&#34;Telemetry&#34;&gt;&lt;a href=&#34;#Telemetry&#34; class=&#34;headerlink&#34; title=&#34;Telemetry&#34;&gt;&lt;/a&gt;Telemetry&lt;/h2&gt;&lt;p&gt;Statistics about the system: how many times a short URL has been used&lt;/p&gt;
&lt;h2 id=&#34;Security-and-Permissions&#34;&gt;&lt;a href=&#34;#Security-and-Permissions&#34; class=&#34;headerlink&#34; title=&#34;Security and Permissions&#34;&gt;&lt;/a&gt;Security and Permissions&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Store permission level (public&amp;#x2F;private) with each URL in the database&lt;/li&gt;
&lt;li&gt;Send an error (HTTP 401) for unauthorized access&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/system-design-interview-for-it-companies/</guid>
            <title>System design interview for IT companies</title>
            <link>https://samirpaul.in/posts/system-design-interview-for-it-companies/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>preparation</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;&lt;img src=&#34;/assets/img/system-design/systemcycle.png&#34; alt=&#34;system development life cycle&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How to prepare system design questions for an IT company&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Original source and Credit: &lt;a href=&#34;https://github.com/checkcheckzz/system-design-interview&#34;&gt;https://github.com/checkcheckzz/system-design-interview&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;System design is a very broad topic. Even a software engineer with many years of working experience at a top IT company may not be an expert on system design. If you want to become an expert, you need to read many books, articles, and solve real large scale system design problems.&lt;/p&gt;
&lt;p&gt;This repository only teaches you how to handle the system design interview with a systematic approach in a short time. You can dive into each topic if you have time. Of course, welcome to add your thoughts!&lt;/p&gt;
&lt;h2 id=&#34;Table-of-Contents&#34;&gt;&lt;a href=&#34;#Table-of-Contents&#34; class=&#34;headerlink&#34; title=&#34;Table of Contents&#34;&gt;&lt;/a&gt;&lt;a name=&#39;toc&#39;&gt;Table of Contents&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;#tips&#34;&gt;System Design Interview Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;#intro&#34;&gt;Basic Knowledge about System Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;#blog&#34;&gt;Company Engineering Blogs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;#system&#34;&gt;Products and Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;#qs&#34;&gt;Hot Questions and Reference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;#bk&#34;&gt;Good Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; &lt;a href=&#34;#ood&#34;&gt;Object Oriented Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;⬆-System-Design-Interview-Tips&#34;&gt;&lt;a href=&#34;#⬆-System-Design-Interview-Tips&#34; class=&#34;headerlink&#34; title=&#34;[⬆] System Design Interview Tips:&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#toc&#34;&gt;[⬆]&lt;/a&gt; &lt;a name=&#39;tips&#39;&gt;System Design Interview Tips:&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Clarify the constraints and identify the user cases&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Spend a few minutes questioning the interviewer and agreeing on the scope of the system.&lt;br&gt;Remember to make sure you know all the requirements the interviewer didn’t tell you about in the beginning.&lt;/p&gt;
&lt;p&gt;User cases indicate the main functions of the system, and constraints list the scale of the system such as requests&lt;br&gt;per second, requests types, data written per second, data read per second.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;High-level architecture design&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sketch the important components and the connections between them, but don’t go into some details.&lt;br&gt;Usually, a scalable system includes webserver (load balancer), service (service partition), database (primary&amp;#x2F;secondary database cluster plug cache).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Component design&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For each component, you need to write the specific APIs for each component. You may need to finish&lt;br&gt;the detailed OOD design for a particular function. You may also need to design the database schema for the database.&lt;/p&gt;
&lt;h3 id=&#34;⬆-Basic-Knowledge-about-System-Design&#34;&gt;&lt;a href=&#34;#⬆-Basic-Knowledge-about-System-Design&#34; class=&#34;headerlink&#34; title=&#34;[⬆] Basic Knowledge about System Design:&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#toc&#34;&gt;[⬆]&lt;/a&gt; &lt;a name=&#39;intro&#39;&gt;Basic Knowledge about System Design:&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Here are some articles about system design related topics.  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.pramp.com/system-design-interview-process-e91aae2dbe83&#34;&gt;The Anatomy Of A System Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.pramp.com/how-to-succeed-in-a-system-design-interview-27b35de0df26&#34;&gt;How to Succeed in a System Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/&#34;&gt;How to Rock a Systems Design Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.hiredintech.com/app#system-design&#34;&gt;System Interview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.lecloud.net/tagged/scalability&#34;&gt;Scalability for Dummies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.aosabook.org/en/distsys.html&#34;&gt;Scalable Web Architecture and Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/&#34;&gt;Numbers Everyone Should Know&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf&#34;&gt;Fallacies of distributed systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html&#34;&gt;Scalable System Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://lethain.com/introduction-to-architecting-systems-for-scale/&#34;&gt;Introduction to Architecting Systems for Scale&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://snarfed.org/transactions_across_datacenters_io.html&#34;&gt;Transactions Across Datacenters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ksat.me/a-plain-english-introduction-to-cap-theorem&#34;&gt;A Plain English Introduction to CAP Theorem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/henryr/cap-faq&#34;&gt;The CAP FAQ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://research.microsoft.com/en-us/um/people/lamport/pubs/paxos-simple.pdf&#34;&gt;Paxos Made Simple&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tom-e-white.com/2007/11/consistent-hashing.html&#34;&gt;Consistent Hashing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://horicky.blogspot.com/2009/11/nosql-patterns.html&#34;&gt;NOSQL Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/jboner/scalability-availability-stability-patterns&#34;&gt;Scalability, Availability &amp;amp; Stability Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Of course, if you want to dive into system related topics, here is a good collection of reading list about &lt;a href=&#34;https://github.com/mmcgrana/services-engineering&#34;&gt;services-engineering&lt;/a&gt;, and&lt;br&gt;a good collection of material about &lt;a href=&#34;http://dancres.github.io/Pages/&#34;&gt;distributed systems&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;⬆-Company-Engineering-Blogs&#34;&gt;&lt;a href=&#34;#⬆-Company-Engineering-Blogs&#34; class=&#34;headerlink&#34; title=&#34;[⬆] Company Engineering Blogs:&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#toc&#34;&gt;[⬆]&lt;/a&gt; &lt;a name=&#39;blog&#39;&gt;Company Engineering Blogs:&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you are going to have an onsite with a company, you should read their engineering blog. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/&#34;&gt;High Scalability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/category/engineering&#34;&gt;The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.quora.com/&#34;&gt;Engineering at Quora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineeringblog.yelp.com/&#34;&gt;Yelp Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.twitter.com/&#34;&gt;Twitter Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/Engineering&#34;&gt;Facebook Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eng.yammer.com/blog/&#34;&gt;Yammer Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codeascraft.com/&#34;&gt;Etsy Code as Craft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.foursquare.com/&#34;&gt;Foursquare Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/airbnb-engineering&#34;&gt;Airbnb Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.webengage.com/&#34;&gt;WebEngage Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.linkedin.com/blog&#34;&gt;LinkedIn Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techblog.netflix.com/&#34;&gt;The Netflix Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.simple.com/engineering/&#34;&gt;BankSimple Simple Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://corner.squareup.com/&#34;&gt;Square The Corner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.soundcloud.com/blog/&#34;&gt;SoundCloud Backstage Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.flickr.net/&#34;&gt;Flickr Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://instagram-engineering.tumblr.com/&#34;&gt;Instagram Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.dropbox.com/&#34;&gt;Dropbox Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cloudera.com/&#34;&gt;Cloudera Developer Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bandcamptech.wordpress.com/&#34;&gt;Bandcamp Tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.oyster.com/&#34;&gt;Oyster Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.redditblog.com/&#34;&gt;THE REDDIT BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.groupon.com/&#34;&gt;Groupon Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devblog.songkick.com/&#34;&gt;Songkick Technology Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ai.googleblog.com/&#34;&gt;Google AI Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.googleblog.com/&#34;&gt;Google Developers Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.pinterest.com/&#34;&gt;Pinterest Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.twilio.com/engineering&#34;&gt;Twilio Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://word.bitly.com/&#34;&gt;Bitly Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eng.uber.com/&#34;&gt;Uber Engineering Blog &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.godaddy.com/&#34;&gt;Godaddy Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blogs.splunk.com/&#34;&gt;Splunk Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://building.coursera.org/&#34;&gt;Coursera Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.paypal-engineering.com/&#34;&gt;PayPal Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engblog.nextdoor.com/&#34;&gt;Nextdoor Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.booking.com/&#34;&gt;Booking.com Development Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.microsoft.com/&#34;&gt;Microsoft Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.scalyr.com/&#34;&gt;Scalyr Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/myntra-engineering&#34;&gt;Myntra Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fastly.com/blog/&#34;&gt;Fastly Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/architecture/&#34;&gt;AWS Architecture Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eng.lyft.com/&#34;&gt;Lyft Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/wish-engineering&#34;&gt;Wish Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://doordash.engineering/&#34;&gt;Doordash Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://community.snowflake.com/s/blog&#34;&gt;SnowFlake Blog&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/palantir/tech/home&#34;&gt;Palantir Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;⬆-Products-and-Systems&#34;&gt;&lt;a href=&#34;#⬆-Products-and-Systems&#34; class=&#34;headerlink&#34; title=&#34;[⬆] Products and Systems:&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#toc&#34;&gt;[⬆]&lt;/a&gt; &lt;a name=&#39;system&#39;&gt;Products and Systems:&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The following papers&amp;#x2F;articles&amp;#x2F;slides can help you to understand the general design idea of different real products and systems. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/mapreduce-osdi04.pdf&#34;&gt;MapReduce: Simplified Data Processing on Large Clusters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/chang06bigtable.pdf&#34;&gt;Bigtable: A Distributed Storage System for Structured Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/media/research.google.com/zh-CN/us/archive/gfs-sosp2003.pdf&#34;&gt;The Google File System&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://static.googleusercontent.com/external_content/untrusted_dlcp/research.google.com/en/us/archive/chubby-osdi06.pdf&#34;&gt;The Chubby lock service for loosely-coupled distributed systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.read.seas.harvard.edu/~kohler/class/cs239-w08/decandia07dynamo.pdf&#34;&gt;Dynamo: Amazon’s Highly Available Key-value Store&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/oemebamo/introduction-to-memcached&#34;&gt;Introduction to Memcached&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/planetcassandra/cassandra-introduction-features-30103666&#34;&gt;Cassandra Introduction Features&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/alexbaranau/intro-to-hbase&#34;&gt;Introduction to HBase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/mdirolf/introduction-to-mongodb&#34;&gt;Introduction to MongoDB&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/dvirsky/introduction-to-redis&#34;&gt;Introduction to Redis&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/previa/storm-16094009&#34;&gt;Storm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/sauravhaloi/introduction-to-apache-zookeeper&#34;&gt;Introduction to Zookeeper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/mumrah/kafka-talk-tri-hug&#34;&gt;Kafka&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/youtube-architecture&#34;&gt;YouTube Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2013/4/15/scaling-pinterest-from-0-to-10s-of-billions-of-page-views-a.html&#34;&gt;Scaling Pinterest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/google-architecture&#34;&gt;Google Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/scaling-twitter-making-twitter-10000-percent-faster&#34;&gt;Scaling Twitter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html&#34;&gt;The WhatsApp Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/flickr-architecture&#34;&gt;Flickr Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/amazon-architecture&#34;&gt;Amazon Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html&#34;&gt;Stack Overflow Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2012/5/21/pinterest-architecture-update-18-million-visitors-10x-growth.html&#34;&gt;Pinterest Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html&#34;&gt;Tumblr Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html&#34;&gt;Instagram Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2011/6/27/tripadvisor-architecture-40m-visitors-200m-dynamic-page-view.html&#34;&gt;TripAdvisor Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2013/6/18/scaling-mailbox-from-0-to-one-million-users-in-6-weeks-and-1.html&#34;&gt;Scaling Mailbox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html&#34;&gt;Salesforce Architecture &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html&#34;&gt;ESPN Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2015/9/14/how-uber-scales-their-real-time-market-platform.html&#34;&gt;Uber Architecture&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=PE4gwstWhmc&#34;&gt;DropBox Design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.splunk.com/view/SP-CAAABF9&#34;&gt;Splunk Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;⬆-Hot-Questions-and-Reference&#34;&gt;&lt;a href=&#34;#⬆-Hot-Questions-and-Reference&#34; class=&#34;headerlink&#34; title=&#34;[⬆] Hot Questions and Reference:&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#toc&#34;&gt;[⬆]&lt;/a&gt; &lt;a name=&#39;qs&#39;&gt;Hot Questions and Reference:&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;There are some good references for each question. The references here are slides and articles. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Design a CDN network&lt;/strong&gt;&lt;br&gt;Reference:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kilthub.cmu.edu/articles/journal_contribution/Globally_distributed_content_delivery/6605972&#34;&gt;Globally Distributed Content Delivery&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a Google document system&lt;/strong&gt;&lt;br&gt;Reference:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://code.google.com/p/google-mobwrite/&#34;&gt;google-mobwrite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://neil.fraser.name/writing/sync/&#34;&gt;Differential Synchronization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a random ID generation system&lt;/strong&gt;&lt;br&gt;Reference: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.twitter.com/2010/announcing-snowflake&#34;&gt;Announcing Snowflake&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/twitter/snowflake/&#34;&gt;snowflake&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a key-value database&lt;/strong&gt;&lt;br&gt;Reference:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/dvirsky/introduction-to-redis&#34;&gt;Introduction to Redis&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design the Facebook news feed function&lt;/strong&gt;&lt;br&gt;Reference:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.quora.com/What-are-best-practices-for-building-something-like-a-News-Feed&#34;&gt;What are best practices for building something like a News Feed?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.quora.com/Activity-Streams/What-are-the-scaling-issues-to-keep-in-mind-while-developing-a-social-network-feed&#34;&gt;What are the scaling issues to keep in mind while developing a social network feed?&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/danmckinley/etsy-activity-feeds-architecture&#34;&gt;Activity Feeds Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design the Facebook timeline function&lt;/strong&gt;&lt;br&gt;Reference: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/note.php?note_id=10150468255628920&#34;&gt;Building Timeline&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2012/1/23/facebook-timeline-brought-to-you-by-the-power-of-denormaliza.html&#34;&gt;Facebook Timeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a function to return the top k requests during past time interval&lt;/strong&gt;&lt;br&gt;Reference:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cse.ust.hk/~raywong/comp5331/References/EfficientComputationOfFrequentAndTop-kElementsInDataStreams.pdf&#34;&gt;Efficient Computation of Frequent and Top-k Elements in Data Streams&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://davis.wpi.edu/xmdv/docs/EDBT11-diyang.pdf&#34;&gt;An Optimal Strategy for Monitoring Top-k Queries in Streaming Windows&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design an online multiplayer card game&lt;/strong&gt;&lt;br&gt;Reference:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.indieflashblog.com/how-to-create-an-asynchronous-multiplayer-game.html&#34;&gt;How to Create an Asynchronous Multiplayer Game&lt;/a&gt;   &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.indieflashblog.com/how-to-create-async-part2.html&#34;&gt;How to Create an Asynchronous Multiplayer Game Part 2: Saving the Game State to Online Database&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.indieflashblog.com/how-to-create-async-part3.html&#34;&gt;How to Create an Asynchronous Multiplayer Game Part 3: Loading Games from the Database&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.indieflashblog.com/how-to-create-async-part4-html.html#comment-4447&#34;&gt;How to Create an Asynchronous Multiplayer Game Part 4: Matchmaking&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://buildnewgames.com/real-time-multiplayer/&#34;&gt;Real Time Multiplayer in HTML5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a graph search function&lt;/strong&gt;&lt;br&gt;Reference:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/notes/facebook-engineering/under-the-hood-building-out-the-infrastructure-for-graph-search/10151347573598920&#34;&gt;Building out the infrastructure for Graph Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/notes/facebook-engineering/under-the-hood-indexing-and-ranking-in-graph-search/10151361720763920&#34;&gt;Indexing and ranking in Graph Search&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/notes/facebook-engineering/under-the-hood-the-natural-language-interface-of-graph-search/10151432733048920&#34;&gt;The natural language interface of Graph Search&lt;/a&gt; and &lt;a href=&#34;http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf&#34;&gt;Erlang at Facebook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a picture sharing system&lt;/strong&gt;&lt;br&gt;Reference:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/flickr-architecture&#34;&gt;Flickr Architecture&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html&#34;&gt;Instagram Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a search engine&lt;/strong&gt;&lt;br&gt;Reference:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://programmers.stackexchange.com/questions/38324/interview-question-how-would-you-implement-google-search&#34;&gt;How would you implement Google Search?&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ardendertat.com/2012/01/11/implementing-search-engines/&#34;&gt;Implementing Search Engines&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a recommendation system&lt;/strong&gt;&lt;br&gt;Reference:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.hulu.com/blog/2011/09/19/recommendation-system.html&#34;&gt;Hulu’s Recommendation System&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ijcai13.org/files/tutorial_slides/td3.pdf&#34;&gt;Recommender Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a tinyurl system&lt;/strong&gt;&lt;br&gt;Reference: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://n00tc0d3r.blogspot.com/&#34;&gt;System Design for Big Data-tinyurl&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/url-shortener/?csw=1&#34;&gt;URL Shortener API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a garbage collection system&lt;/strong&gt;&lt;br&gt;Reference:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://journal.stuffwithstuff.com/2013/12/08/babys-first-garbage-collector/&#34;&gt;Baby’s First Garbage Collector&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a scalable web crawling system&lt;/strong&gt;&lt;br&gt;Reference:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/How-can-I-build-a-web-crawler-from-scratch&#34;&gt;How can I build a web crawler from scratch?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design the Facebook chat function&lt;/strong&gt;&lt;br&gt;Reference:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.erlang-factory.com/upload/presentations/31/EugeneLetuchy-ErlangatFacebook.pdf&#34;&gt;Erlang at Facebook&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/note.php?note_id=14218138919&amp;id=9445547199&amp;index=0&#34;&gt;Facebook Chat&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a trending topic system&lt;/strong&gt;&lt;br&gt;Reference:  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.michael-noll.com/blog/2013/01/18/implementing-real-time-trending-topics-in-storm/&#34;&gt;Implementing Real-Time Trending Topics With a Distributed Rolling Count Algorithm in Storm&lt;/a&gt;   &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://snikolov.wordpress.com/2012/11/14/early-detection-of-twitter-trends/&#34;&gt;Early detection of Twitter trends explained&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Design a cache system&lt;/strong&gt;&lt;br&gt;Reference:   &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/oemebamo/introduction-to-memcached&#34;&gt;Introduction to Memcached&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;⬆-Good-Books&#34;&gt;&lt;a href=&#34;#⬆-Good-Books&#34; class=&#34;headerlink&#34; title=&#34;[⬆] Good Books:&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#toc&#34;&gt;[⬆]&lt;/a&gt; &lt;a name=&#39;bk&#39;&gt;Good Books:&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Big-Data-Principles-practices-scalable/dp/1617290343&#34;&gt;Big Data: Principles and best practices of scalable realtime data systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Real-Time-Analytics-Techniques-Visualize-Streaming/dp/1118837916&#34;&gt;Real-Time Analytics: Techniques to Analyze and Visualize Streaming Data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.amazon.com/Building-Microservices-Sam-Newman/dp/1491950358&#34;&gt;Building Microservices: Designing Fine-Grained Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Designing-Data-Intensive-Applications-Reliable-Maintainable/dp/1449373321&#34;&gt;Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;⬆-Object-Oriented-Design&#34;&gt;&lt;a href=&#34;#⬆-Object-Oriented-Design&#34; class=&#34;headerlink&#34; title=&#34;[⬆] Object Oriented Design:&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#toc&#34;&gt;[⬆]&lt;/a&gt; &lt;a name=&#39;ood&#39;&gt;Object Oriented Design:&lt;/a&gt;&lt;/h3&gt;&lt;h4 id=&#34;Tips-for-OOD-Interview&#34;&gt;&lt;a href=&#34;#Tips-for-OOD-Interview&#34; class=&#34;headerlink&#34; title=&#34;Tips for OOD Interview&#34;&gt;&lt;/a&gt;Tips for OOD Interview&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;Clarify the scenario, write out user cases&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Use case is a description of sequences of events that, taken together, lead to a system doing something useful. Who is going to use it and how they are going to use it. The system may be very simple or very complicated.&lt;/p&gt;
&lt;p&gt;Special system requirements such as multi-threading, read or write oriented.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Define objects&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Map identity to class: one scenario for one class, each core object in this scenario for one class.&lt;/p&gt;
&lt;p&gt;Consider the relationships among classes: certain class must have unique instance, one object has many other objects (composition), one object is another object (inheritance).&lt;/p&gt;
&lt;p&gt;Identify attributes for each class: change noun to variable and action to methods.&lt;/p&gt;
&lt;p&gt;Use design patterns such that it can be reused in multiple applications.&lt;/p&gt;
&lt;h4 id=&#34;Useful-Websites&#34;&gt;&lt;a href=&#34;#Useful-Websites&#34; class=&#34;headerlink&#34; title=&#34;Useful Websites&#34;&gt;&lt;/a&gt;Useful Websites&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://sourcemaking.com/design-patterns-and-tips&#34;&gt;101 Design Patterns &amp;amp; Tips for Developers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/sql-vs-nosql/</guid>
            <title>SQL vs. NoSQL</title>
            <link>https://samirpaul.in/posts/sql-vs-nosql/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>sql</category>
            <category>nosql</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;SQL-vs-NoSQL&#34;&gt;&lt;a href=&#34;#SQL-vs-NoSQL&#34; class=&#34;headerlink&#34; title=&#34;SQL vs. NoSQL&#34;&gt;&lt;/a&gt;SQL vs. NoSQL&lt;/h1&gt;&lt;h2 id=&#34;Common-types-of-NoSQL&#34;&gt;&lt;a href=&#34;#Common-types-of-NoSQL&#34; class=&#34;headerlink&#34; title=&#34;Common types of NoSQL&#34;&gt;&lt;/a&gt;Common types of NoSQL&lt;/h2&gt;&lt;h3 id=&#34;Key-value-stores&#34;&gt;&lt;a href=&#34;#Key-value-stores&#34; class=&#34;headerlink&#34; title=&#34;Key-value stores&#34;&gt;&lt;/a&gt;Key-value stores&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Array of key-value pairs. The “key” is an attribute name.&lt;/li&gt;
&lt;li&gt;Redis, Vodemort, Dynamo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Document-databases&#34;&gt;&lt;a href=&#34;#Document-databases&#34; class=&#34;headerlink&#34; title=&#34;Document databases&#34;&gt;&lt;/a&gt;Document databases&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data is stored in documents.&lt;/li&gt;
&lt;li&gt;Documents are grouped in collections.&lt;/li&gt;
&lt;li&gt;Each document can have an entirely different structure.&lt;/li&gt;
&lt;li&gt;CouchDB, MongoDB.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Wide-column-columnar-databases&#34;&gt;&lt;a href=&#34;#Wide-column-columnar-databases&#34; class=&#34;headerlink&#34; title=&#34;Wide-column &amp;#x2F; columnar databases&#34;&gt;&lt;/a&gt;Wide-column &amp;#x2F; columnar databases&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Column families - containers for rows.&lt;/li&gt;
&lt;li&gt;No need to know all the columns up front.&lt;/li&gt;
&lt;li&gt;Each row can have different number of columns.&lt;/li&gt;
&lt;li&gt;Cassandra, HBase.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Graph-database&#34;&gt;&lt;a href=&#34;#Graph-database&#34; class=&#34;headerlink&#34; title=&#34;Graph database&#34;&gt;&lt;/a&gt;Graph database&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data is stored in graph structures&lt;ul&gt;
&lt;li&gt;Nodes: entities&lt;/li&gt;
&lt;li&gt;Properties: information about the entities&lt;/li&gt;
&lt;li&gt;Lines: connections between the entities&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Neo4J, InfiniteGraph&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Differences-between-SQL-and-NoSQL&#34;&gt;&lt;a href=&#34;#Differences-between-SQL-and-NoSQL&#34; class=&#34;headerlink&#34; title=&#34;Differences between SQL and NoSQL&#34;&gt;&lt;/a&gt;Differences between SQL and NoSQL&lt;/h2&gt;&lt;h3 id=&#34;Storage&#34;&gt;&lt;a href=&#34;#Storage&#34; class=&#34;headerlink&#34; title=&#34;Storage&#34;&gt;&lt;/a&gt;Storage&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL: store data in tables.&lt;/li&gt;
&lt;li&gt;NoSQL: have different data storage models.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Schema&#34;&gt;&lt;a href=&#34;#Schema&#34; class=&#34;headerlink&#34; title=&#34;Schema&#34;&gt;&lt;/a&gt;Schema&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL&lt;ul&gt;
&lt;li&gt;Each record conforms to a fixed schema.&lt;/li&gt;
&lt;li&gt;Schema can be altered, but it requires modifying the whole database.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL:&lt;ul&gt;
&lt;li&gt;Schemas are dynamic.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Querying&#34;&gt;&lt;a href=&#34;#Querying&#34; class=&#34;headerlink&#34; title=&#34;Querying&#34;&gt;&lt;/a&gt;Querying&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL&lt;ul&gt;
&lt;li&gt;Use SQL (structured query language) for defining and manipulating the data.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL&lt;ul&gt;
&lt;li&gt;Queries are focused on a collection of documents.&lt;/li&gt;
&lt;li&gt;UnQL (unstructured query language).&lt;/li&gt;
&lt;li&gt;Different databases have different syntax.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Scalability&#34;&gt;&lt;a href=&#34;#Scalability&#34; class=&#34;headerlink&#34; title=&#34;Scalability&#34;&gt;&lt;/a&gt;Scalability&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;SQL&lt;ul&gt;
&lt;li&gt;Vertically scalable (by increasing the horsepower: memory, CPU, etc) and expensive.&lt;/li&gt;
&lt;li&gt;Horizontally scalable (across multiple servers); but it can be challenging and time-consuming.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL&lt;ul&gt;
&lt;li&gt;Horizontablly scalable (by adding more servers) and cheap.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;ACID&#34;&gt;&lt;a href=&#34;#ACID&#34; class=&#34;headerlink&#34; title=&#34;ACID&#34;&gt;&lt;/a&gt;ACID&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Atomicity, consistency, isolation, durability&lt;/li&gt;
&lt;li&gt;SQL&lt;ul&gt;
&lt;li&gt;ACID compliant&lt;/li&gt;
&lt;li&gt;Data reliability&lt;/li&gt;
&lt;li&gt;Gurantee of transactions&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NoSQL&lt;ul&gt;
&lt;li&gt;Most sacrifice ACID compliance for performance and scalability.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Which-one-to-use&#34;&gt;&lt;a href=&#34;#Which-one-to-use&#34; class=&#34;headerlink&#34; title=&#34;Which one to use?&#34;&gt;&lt;/a&gt;Which one to use?&lt;/h2&gt;&lt;h3 id=&#34;SQL&#34;&gt;&lt;a href=&#34;#SQL&#34; class=&#34;headerlink&#34; title=&#34;SQL&#34;&gt;&lt;/a&gt;SQL&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Ensure ACID compliance.&lt;ul&gt;
&lt;li&gt;Reduce anomalies.&lt;/li&gt;
&lt;li&gt;Protect database integrity.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Data is structured and unchanging.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;NoSQL&#34;&gt;&lt;a href=&#34;#NoSQL&#34; class=&#34;headerlink&#34; title=&#34;NoSQL&#34;&gt;&lt;/a&gt;NoSQL&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Data has little or no structure.&lt;/li&gt;
&lt;li&gt;Make the most of cloud computing and storage.&lt;ul&gt;
&lt;li&gt;Cloud-based storage requires data to be easily spread across multiple servers to scale up.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rapid development.&lt;ul&gt;
&lt;li&gt;Frequent updates to the data structure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/steps-how-to-approach-the-system-design-questions-in-interviews/</guid>
            <title>Steps how to approach the system design questions in interviews</title>
            <link>https://samirpaul.in/posts/steps-how-to-approach-the-system-design-questions-in-interviews/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>preparation</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;These are the steps to go through mentally in the interviews, followed by actual interview experiences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a) &lt;strong&gt;Be absolutely sure you understand the problem being asked&lt;/strong&gt;, clarify on the onset rather than assuming anything &lt;/li&gt;
&lt;li&gt;b) &lt;strong&gt;Use-cases&lt;/strong&gt;. This is critical, you MUST know what is the system going to be used for, what is the scale it is going to be used for. Also, constraints like requests per second, requests types, data written per second, data read per second.&lt;/li&gt;
&lt;li&gt;c) Solve the problem for a &lt;strong&gt;very small set&lt;/strong&gt;, say, 100 users. This will broadly help you figure out the data structures, components, abstract design of the overall model.&lt;/li&gt;
&lt;li&gt;d) Write down the various components figured out so far and how will they interact with each other.&lt;/li&gt;
&lt;li&gt;e)  As a rule of thumb remember at least these :&lt;/li&gt;
&lt;li&gt;&lt;ol&gt;
&lt;li&gt;processing and servers&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;storage&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;caching&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;concurrency and communication&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;security&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;load balancing and proxy&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;7&#34;&gt;
&lt;li&gt;CDN&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ol start=&#34;8&#34;&gt;
&lt;li&gt;Monetization: if relevant, how will you monetize?&lt;br&gt; eg. What kind of DB (Is Postgres enough, if not why?), do you need caching and how much, is security a prime concern?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;f) &lt;strong&gt;Special cases&lt;/strong&gt; for the question asked. Say designing a system for storing thumbnails, will a file system be enough? What if you have to scale for facebook or google? Will a nosql based database work?&lt;/li&gt;
&lt;li&gt;g) After I have my components in place, what I generally try to do is look for minor optimization in various places according to the use-cases, various tradeoffs that will help in better scaling in 99% cases.&lt;/li&gt;
&lt;li&gt;h) [Scaling out or up]  (&lt;a href=&#34;http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html&#34;&gt;http://highscalability.com/blog/2014/5/12/4-architecture-issues-when-scaling-web-applications-bottlene.html&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;i) Check with the interviewer is there any other special case he is looking to solve? Also, it really helps if you know about the company you are interviewing with, what its architecture is, what will the interviewer have more interest in based on the company and what he works on?&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/sharding-or-data-partitioning/</guid>
            <title>Sharding or Data Partitioning</title>
            <link>https://samirpaul.in/posts/sharding-or-data-partitioning/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>sql</category>
            <category>nosql</category>
            <category>sharding</category>
            <category>data-partitioning</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Sharding-Data-Partitioning&#34;&gt;&lt;a href=&#34;#Sharding-Data-Partitioning&#34; class=&#34;headerlink&#34; title=&#34;Sharding &amp;#x2F; Data Partitioning&#34;&gt;&lt;/a&gt;Sharding &amp;#x2F; Data Partitioning&lt;/h1&gt;&lt;h2 id=&#34;Partitioning-methods&#34;&gt;&lt;a href=&#34;#Partitioning-methods&#34; class=&#34;headerlink&#34; title=&#34;Partitioning methods&#34;&gt;&lt;/a&gt;Partitioning methods&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Horizontal partitioning&lt;ul&gt;
&lt;li&gt;Range based sharding.&lt;/li&gt;
&lt;li&gt;Put different rows into different tables.&lt;/li&gt;
&lt;li&gt;Con&lt;ul&gt;
&lt;li&gt;If the value whose range is used for sharding isn’t chosen carefully, the partitioning scheme will lead to unbalanced servers.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Vertical partitioning&lt;ul&gt;
&lt;li&gt;Divide data for a specific feature to their own server.&lt;/li&gt;
&lt;li&gt;Pro&lt;ul&gt;
&lt;li&gt;Straightforward to implement.&lt;/li&gt;
&lt;li&gt;Low impact on the application.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Con&lt;ul&gt;
&lt;li&gt;To support growth of the application, a database may need further partitioning.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Directory-based partitioning&lt;ul&gt;
&lt;li&gt;A lookup service that knows the partitioning scheme and abstracts it away from the database access code.&lt;/li&gt;
&lt;li&gt;Allow addition of db servers or change of partitioning schema without impacting application.&lt;/li&gt;
&lt;li&gt;Con&lt;ul&gt;
&lt;li&gt;Can be a single point of failure.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Partitioning-criteria&#34;&gt;&lt;a href=&#34;#Partitioning-criteria&#34; class=&#34;headerlink&#34; title=&#34;Partitioning criteria&#34;&gt;&lt;/a&gt;Partitioning criteria&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Key or hash-based partitioning&lt;ul&gt;
&lt;li&gt;Apply a hash function to some key attribute of the entry to get the partition number.&lt;/li&gt;
&lt;li&gt;Problem&lt;ul&gt;
&lt;li&gt;Adding new servers may require changing the hash function, which would need redistribution of data and downtime for the service.&lt;/li&gt;
&lt;li&gt;Workaround: &lt;a href=&#34;https://en.wikipedia.org/wiki/Consistent_hashing&#34;&gt;consistent hashing&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;List partitioning&lt;ul&gt;
&lt;li&gt;Each partition is assigned a list of values.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Round-robin partitioning&lt;ul&gt;
&lt;li&gt;With &lt;code&gt;n&lt;/code&gt; partitions, the &lt;code&gt;i&lt;/code&gt; tuple is assigned to partition &lt;code&gt;i % n&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Composite partitioning&lt;ul&gt;
&lt;li&gt;Combine any of above partitioning schemes to devise a new scheme.&lt;/li&gt;
&lt;li&gt;Consistent hashing is a composite of hash and list partitioning.&lt;ul&gt;
&lt;li&gt;Key -&amp;gt; reduced key space through hash -&amp;gt; list -&amp;gt; partition.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Common-problems-of-sharding&#34;&gt;&lt;a href=&#34;#Common-problems-of-sharding&#34; class=&#34;headerlink&#34; title=&#34;Common problems of sharding&#34;&gt;&lt;/a&gt;Common problems of sharding&lt;/h2&gt;&lt;p&gt;Most of the constraints are due to the fact that operations across multiple tables or multiple rows in the same table will no longer run on the same server.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Joins and denormalization&lt;ul&gt;
&lt;li&gt;Joins will not be performance efficient since data has to be compiled from multiple servers.&lt;/li&gt;
&lt;li&gt;Workaround: denormalize the database so that queries can be performed from a single table. But this can lead to data inconsistency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Referential integrity&lt;ul&gt;
&lt;li&gt;Difficult to enforce data integrity constraints (e.g. foreign keys).&lt;/li&gt;
&lt;li&gt;Workaround&lt;ul&gt;
&lt;li&gt;Referential integrity is enforced by application code.&lt;/li&gt;
&lt;li&gt;Applications can run SQL jobs to clean up dangling references.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Rebalancing&lt;ul&gt;
&lt;li&gt;Necessity of rebalancing&lt;ul&gt;
&lt;li&gt;Data distribution is not uniform.&lt;/li&gt;
&lt;li&gt;A lot of load on one shard.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create more db shards or rebalance existing shards changes partitioning scheme and requires data movement.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/pyshooter/</guid>
            <title>PyShooter Python Game</title>
            <link>https://samirpaul.in/posts/pyshooter/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>projects</category>
            <category>python</category>
            <category>project</category>
            <category>pygame</category>
            <category>python-game</category>
            <category>pyshooter</category>
            <category>shooter-game</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;PyShooter&#34;&gt;&lt;a href=&#34;#PyShooter&#34; class=&#34;headerlink&#34; title=&#34;PyShooter&#34;&gt;&lt;/a&gt;PyShooter&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://www.python.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-python-blue.svg?style=flat&#34; alt=&#34;Language&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;http://www.pygame.org/news.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/module-pygame-brightgreen.svg?style=flat&#34; alt=&#34;Module&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;PyShooter is a two-dimensional shooter game in which the player runs horizontally and fires at enemies.&lt;/p&gt;
&lt;h5 id=&#34;Repository-https-github-com-SamirPaul1-PyShooter&#34;&gt;&lt;a href=&#34;#Repository-https-github-com-SamirPaul1-PyShooter&#34; class=&#34;headerlink&#34; title=&#34;Repository: https://github.com/SamirPaul1/PyShooter&#34;&gt;&lt;/a&gt;Repository: &lt;a href=&#34;https://github.com/SamirPaul1/PyShooter&#34;&gt;https://github.com/SamirPaul1/PyShooter&lt;/a&gt;&lt;/h5&gt;&lt;h2 id=&#34;Demo&#34;&gt;&lt;a href=&#34;#Demo&#34; class=&#34;headerlink&#34; title=&#34;Demo:&#34;&gt;&lt;/a&gt;Demo:&lt;/h2&gt;&lt;iframe width=&#34;100%&#34; height=&#34;420&#34; src=&#34;https://www.youtube.com/embed/rg-49OTHZVY&#34; loading=&#34;lazy&#34; title=&#34;PyShooter - Samir Paul - YouTube&#34; frameborder=&#34;0&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;


&lt;iframe title=&#34;Video Demo&#34; src=&#34;https://user-images.githubusercontent.com/77569653/214920668-ef657089-b71f-43c8-8011-a202a09f5531.mp4&#34; loading=&#34;lazy&#34; width=&#34;100%&#34; height = &#34;500&#34; autoplay=&#34;autoplay&#34; loop=&#34;loop&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;


&lt;p&gt;Vimeo: &lt;a href=&#34;https://vimeo.com/809728956&#34;&gt;https://vimeo.com/809728956&lt;/a&gt;&lt;/p&gt;
&lt;!---
&lt;a href=&#34;https://www.youtube.com/watch?v=rg-49OTHZVY&#34;&gt;
&lt;img src=&#34;https://raw.githubusercontent.com/SamirPaulb/assets/main/pygame-youtube-video-thumbnail.jpg&#34; alt=&#34;PyShooter Demo YouTube&#34; width=&#34;700&#34; height=&#34;370&#34;&gt;
&lt;/a&gt;
--&gt;

&lt;h2 id=&#34;How-To-Play&#34;&gt;&lt;a href=&#34;#How-To-Play&#34; class=&#34;headerlink&#34; title=&#34;How To Play&#34;&gt;&lt;/a&gt;How To Play&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;If you don’t have &lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python&lt;/a&gt; or &lt;a href=&#34;http://www.pygame.org/download.shtml&#34;&gt;Pygame&lt;/a&gt; installed, you can simply double click the .exe file to play the game.&lt;br&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;em&gt;The .exe file needs to stay in the same directory as the sounds, images, and font folders.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Install Pygame &lt;code&gt;pip install pygame&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you have the correct version of Python and Pygame installed, you can run the program in the command prompt &amp;#x2F; terminal.&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; PyShooter&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;python main.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;


&lt;hr&gt;
&lt;p&gt;Credits for assets used: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://erayzesen.itch.io/pixel-platformer&#34;&gt;https://erayzesen.itch.io/pixel-platformer&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://secrethideout.itch.io/team-wars-platformer-battle&#34;&gt;https://secrethideout.itch.io/team-wars-platformer-battle&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://soundimage.org/fantasywonder&#34;&gt;https://soundimage.org/fantasywonder&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://gushh.net/blog/free-game-sprites-explosion-3&#34;&gt;https://gushh.net/blog/free-game-sprites-explosion-3&lt;/a&gt;  &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mtk.itch.io/grenades-16x16&#34;&gt;https://mtk.itch.io/grenades-16x16&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/key-characteristics-of-distributed-systems/</guid>
            <title>Key Characteristics of Distributed Systems</title>
            <link>https://samirpaul.in/posts/key-characteristics-of-distributed-systems/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>distributed-systems</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Key-Characteristics-of-Distributed-Systems&#34;&gt;&lt;a href=&#34;#Key-Characteristics-of-Distributed-Systems&#34; class=&#34;headerlink&#34; title=&#34;Key Characteristics of Distributed Systems&#34;&gt;&lt;/a&gt;Key Characteristics of Distributed Systems&lt;/h1&gt;&lt;h2 id=&#34;Scalability&#34;&gt;&lt;a href=&#34;#Scalability&#34; class=&#34;headerlink&#34; title=&#34;Scalability&#34;&gt;&lt;/a&gt;Scalability&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;The capability of a system to grow and manage increased demand.&lt;/li&gt;
&lt;li&gt;A system that can continuously evolve to support growing amount of work is scalable.&lt;/li&gt;
&lt;li&gt;Horizontal scaling: by adding more servers into the pool of resources.&lt;/li&gt;
&lt;li&gt;Vertical scaling: by adding more resource (CPU, RAM, storage, etc) to an existing server. This approach comes with downtime and an upper limit.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Reliability&#34;&gt;&lt;a href=&#34;#Reliability&#34; class=&#34;headerlink&#34; title=&#34;Reliability&#34;&gt;&lt;/a&gt;Reliability&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Reliability is the probability that a system will fail in a given period.&lt;/li&gt;
&lt;li&gt;A distributed system is reliable if it keeps delivering its service even when one or multiple components fail.&lt;/li&gt;
&lt;li&gt;Reliability is achieved through redundancy of components and data (remove every single point of failure).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Availability&#34;&gt;&lt;a href=&#34;#Availability&#34; class=&#34;headerlink&#34; title=&#34;Availability&#34;&gt;&lt;/a&gt;Availability&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Availability is the time a system remains operational to perform its required function in a specific period.&lt;/li&gt;
&lt;li&gt;Measured by the percentage of time that a system remains operational under normal conditions.&lt;/li&gt;
&lt;li&gt;A reliable system is available.&lt;/li&gt;
&lt;li&gt;An available system is not necessarily reliable.&lt;ul&gt;
&lt;li&gt;A system with a security hole is available when there is no security attack.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Efficiency&#34;&gt;&lt;a href=&#34;#Efficiency&#34; class=&#34;headerlink&#34; title=&#34;Efficiency&#34;&gt;&lt;/a&gt;Efficiency&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Latency: response time, the delay to obtain the first piece of data.&lt;/li&gt;
&lt;li&gt;Bandwidth: throughput, amount of data delivered in a given time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Serviceability-Manageability&#34;&gt;&lt;a href=&#34;#Serviceability-Manageability&#34; class=&#34;headerlink&#34; title=&#34;Serviceability &amp;#x2F; Manageability&#34;&gt;&lt;/a&gt;Serviceability &amp;#x2F; Manageability&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Easiness to operate and maintain the system.&lt;/li&gt;
&lt;li&gt;Simplicity and spend with which a system can be repaired or maintained.&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/high-level-design/</guid>
            <title>High-level design</title>
            <link>https://samirpaul.in/posts/high-level-design/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>preparation</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;High-level-design-HLD&#34;&gt;&lt;a href=&#34;#High-level-design-HLD&#34; class=&#34;headerlink&#34; title=&#34;High-level design (HLD)&#34;&gt;&lt;/a&gt;High-level design (HLD)&lt;/h1&gt;&lt;hr&gt;
&lt;h1 id=&#34;Ticketmaster&#34;&gt;&lt;a href=&#34;#Ticketmaster&#34; class=&#34;headerlink&#34; title=&#34;Ticketmaster&#34;&gt;&lt;/a&gt;Ticketmaster&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/ticketmaster-overview.png&#34; alt=&#34;ticketmaster-overview&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Pastebin&#34;&gt;&lt;a href=&#34;#Pastebin&#34; class=&#34;headerlink&#34; title=&#34;Pastebin&#34;&gt;&lt;/a&gt;Pastebin&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/pastebin-overview.png&#34; alt=&#34;pastebin-overview&#34;&gt;&lt;br&gt;&lt;img src=&#34;/assets/img/system-design/pastebin-detail.png&#34; alt=&#34;pastebin-detail&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Instagram&#34;&gt;&lt;a href=&#34;#Instagram&#34; class=&#34;headerlink&#34; title=&#34;Instagram&#34;&gt;&lt;/a&gt;Instagram&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/instagram-overview.png&#34; alt=&#34;instagram-overview&#34;&gt;&lt;br&gt;&lt;img src=&#34;/assets/img/system-design/instagram-detail.png&#34; alt=&#34;instagram-detail&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Dropbox&#34;&gt;&lt;a href=&#34;#Dropbox&#34; class=&#34;headerlink&#34; title=&#34;Dropbox&#34;&gt;&lt;/a&gt;Dropbox&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/dropbox-overview.png&#34; alt=&#34;dropbox-overview&#34;&gt;&lt;br&gt;&lt;img src=&#34;/assets/img/system-design/dropbox-detail.png&#34; alt=&#34;dropbox-detail&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Twitter&#34;&gt;&lt;a href=&#34;#Twitter&#34; class=&#34;headerlink&#34; title=&#34;Twitter&#34;&gt;&lt;/a&gt;Twitter&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/twitter-overview.png&#34; alt=&#34;twitter-overview&#34;&gt;&lt;br&gt;&lt;img src=&#34;/assets/img/system-design/twitter-detail.png&#34; alt=&#34;twitter-detail&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Twitter-Search&#34;&gt;&lt;a href=&#34;#Twitter-Search&#34; class=&#34;headerlink&#34; title=&#34;Twitter Search&#34;&gt;&lt;/a&gt;Twitter Search&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/twitter-search-overview.png&#34; alt=&#34;twitter-search-overview&#34;&gt;&lt;br&gt;&lt;img src=&#34;/assets/img/system-design/twitter-search-detail.png&#34; alt=&#34;twitter-search-detail&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Youtube&#34;&gt;&lt;a href=&#34;#Youtube&#34; class=&#34;headerlink&#34; title=&#34;Youtube&#34;&gt;&lt;/a&gt;Youtube&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/youtube-overview.png&#34; alt=&#34;youtube-overview&#34;&gt;&lt;br&gt;&lt;img src=&#34;/assets/img/system-design/youtube-detail.png&#34; alt=&#34;youtube-detail&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Web-Crawler&#34;&gt;&lt;a href=&#34;#Web-Crawler&#34; class=&#34;headerlink&#34; title=&#34;Web Crawler&#34;&gt;&lt;/a&gt;Web Crawler&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/web-crawler-overview.png&#34; alt=&#34;web-crawler-overview&#34;&gt;&lt;br&gt;&lt;img src=&#34;/assets/img/system-design/web-crawler-detail.png&#34; alt=&#34;web-crawler-detail&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Facebook-Newsfeed&#34;&gt;&lt;a href=&#34;#Facebook-Newsfeed&#34; class=&#34;headerlink&#34; title=&#34;Facebook Newsfeed&#34;&gt;&lt;/a&gt;Facebook Newsfeed&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/facebook-newsfeed-overview.png&#34; alt=&#34;facebook-newsfeed-overview&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Yelp&#34;&gt;&lt;a href=&#34;#Yelp&#34; class=&#34;headerlink&#34; title=&#34;Yelp&#34;&gt;&lt;/a&gt;Yelp&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/yelp-overview.png&#34; alt=&#34;yelp-overview&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&#34;Uber-Backend&#34;&gt;&lt;a href=&#34;#Uber-Backend&#34; class=&#34;headerlink&#34; title=&#34;Uber Backend&#34;&gt;&lt;/a&gt;Uber Backend&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;/assets/img/system-design/uber-backend-overview.png&#34; alt=&#34;uber-backend-overview&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/consistent-hashing/</guid>
            <title>Consistent Hashing</title>
            <link>https://samirpaul.in/posts/consistent-hashing/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>preparation</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Consistent-Hashing&#34;&gt;&lt;a href=&#34;#Consistent-Hashing&#34; class=&#34;headerlink&#34; title=&#34;Consistent Hashing&#34;&gt;&lt;/a&gt;Consistent Hashing&lt;/h1&gt;&lt;h2 id=&#34;Simple-hashing&#34;&gt;&lt;a href=&#34;#Simple-hashing&#34; class=&#34;headerlink&#34; title=&#34;Simple hashing&#34;&gt;&lt;/a&gt;Simple hashing&lt;/h2&gt;&lt;p&gt;Problems of simple hashing function &lt;code&gt;key % n&lt;/code&gt; (&lt;code&gt;n&lt;/code&gt; is the number of servers):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It is not horizontally scalable. Whenever a new cache host is added to the system, all existing mappings are broken.&lt;/li&gt;
&lt;li&gt;It may not be load balanced, especially for non-uniformly distributed data. Some servers will become hot spots.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Consistent-Hashing-1&#34;&gt;&lt;a href=&#34;#Consistent-Hashing-1&#34; class=&#34;headerlink&#34; title=&#34;Consistent Hashing&#34;&gt;&lt;/a&gt;Consistent Hashing&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Consistent hashing maps a key to an integer.&lt;/li&gt;
&lt;li&gt;Imagine that the integers in the range are placed on a ring such that the values are wrapped around.&lt;/li&gt;
&lt;li&gt;Given a list of servers, hash them to integers in the range.&lt;/li&gt;
&lt;li&gt;To map a key to a server:&lt;ul&gt;
&lt;li&gt;Hash it to a single integer.&lt;/li&gt;
&lt;li&gt;Move clockwise on the ring until finding the first cache it encounters.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;When the hash table is resized (a server is added or deleted), only &lt;code&gt;k/n&lt;/code&gt; keys need to be remapped (&lt;code&gt;k&lt;/code&gt; is the total number of keys, and &lt;code&gt;n&lt;/code&gt; is the total number of servers).&lt;/li&gt;
&lt;li&gt;To handle hot spots, add “virtual replicas” for caches.&lt;ul&gt;
&lt;li&gt;Instead of mapping each cache to a single point on the ring, map it to multiple points on the ring (replicas). This way, each cache is associated with multiple portions of the ring.&lt;/li&gt;
&lt;li&gt;If the hash function is “mixes well,” as the number of replicas increases, the keys will be more balanced.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/company-engineering-blog-links/</guid>
            <title>Company engineering blog links</title>
            <link>https://samirpaul.in/posts/company-engineering-blog-links/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>preparation</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;courtesy &lt;a href=&#34;https://github.com/checkcheckzz/system-design-interview#toc&#34;&gt;checkcheckzz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Depending on where you are interviewing, go through the company blog. VERY USEFUL IN INTERVIEWS! It really helps if you have an idea of the architecture, as the questions asked will generally be of that domain and your prior knowledge will help out here.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nerds.airbnb.com/&#34;&gt;Airbnb Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.amazon.com/blogs&#34;&gt;Amazon&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/&#34;&gt;Amazon AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://bandcamptech.wordpress.com/&#34;&gt;Bandcamp Tech&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.simple.com/engineering/&#34;&gt;BankSimple Simple Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://word.bitly.com/&#34;&gt;Bitly Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.cloudera.com/blog/&#34;&gt;Cloudera Developer Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://tech.dropbox.com/&#34;&gt;Dropbox Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.quora.com/&#34;&gt;Engineering at Quora&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://codeascraft.com/&#34;&gt;Etsy Code as Craft&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.facebook.com/Engineering&#34;&gt;Facebook Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://code.flickr.net/&#34;&gt;Flickr Code&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.foursquare.com/&#34;&gt;Foursquare Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://googleresearch.blogspot.com/&#34;&gt;Google Research Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.groupon.com/&#34;&gt;Groupn Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://highscalability.com/&#34;&gt;High Scalability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://instagram-engineering.tumblr.com/&#34;&gt;Instagram Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.linkedin.com/blog&#34;&gt;LinkedIn Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://tech.oyster.com/&#34;&gt;Oyster Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.pinterest.com/&#34;&gt;Pinterest Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://devblog.songkick.com/&#34;&gt;Songkick Technology Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.soundcloud.com/blog/&#34;&gt;SoundCloud Backstage Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://corner.squareup.com/&#34;&gt;Square The Corner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.redditblog.com/&#34;&gt;THE REDDIT BLOG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/category/engineering&#34;&gt;The GitHub Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://techblog.netflix.com/&#34;&gt;The Netflix Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.twilio.com/engineering&#34;&gt;Twilio Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.twitter.com/&#34;&gt;Twitter Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eng.uber.com/&#34;&gt;Uber Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/walmartlabs&#34;&gt;Walmart Labs Tech Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineering.webengage.com/&#34;&gt;WebEngage Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://eng.yammer.com/blog/&#34;&gt;Yammer Engineering&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://engineeringblog.yelp.com/&#34;&gt;Yelp Engineering Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://smarketshq.com/&#34;&gt;Smarkets Blog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/common-design-questions/</guid>
            <title>Common Design questions</title>
            <link>https://samirpaul.in/posts/common-design-questions/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>preparation</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;It generally depends what you are and you will be working on. Also what your level is but these are some of the more frequent interview questions.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Design amazon’s frequently viewed product page (eg. which shows the last 5 items you saw)&lt;/li&gt;
&lt;li&gt;Design an online poker game for multiplayer. Solve for persistence, concurrency, scale. Draw the ER diagram for this &lt;/li&gt;
&lt;li&gt;Design a [url compression system] (&lt;a href=&#34;http://www.hiredintech.com/system-design/the-system-design-process/&#34;&gt;http://www.hiredintech.com/system-design/the-system-design-process/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://infolab.stanford.edu/~backrub/google.html&#34;&gt;Search engine&lt;/a&gt; (generally asked with people who have some domain knowledge): basic crawling, collection, hashing etc. Depends on your expertise on this topic&lt;/li&gt;
&lt;li&gt;Design dropbox’s architecture. &lt;a href=&#34;https://www.youtube.com/watch?v=PE4gwstWhmc&#34;&gt;good talk on this&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Design a &lt;a href=&#34;http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html&#34;&gt;picture sharing website&lt;/a&gt;. How will you store thumbnails, photos? Usage of CDNS? caching at various layers etc.&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;Design a news feed (eg. Facebook , Twitter): &lt;a href=&#34;http://www.quora.com/Software-Engineering-Best-Practices/What-are-best-practices-for-building-something-like-a-News-Feed&#34;&gt;news feed&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Design a product based on maps, eg hotel &amp;#x2F; ATM finder given a location. &lt;/li&gt;
&lt;li&gt;Design malloc, free and &lt;a href=&#34;http://courses.cs.washington.edu/courses/csep521/07wi/prj/rick.pdf&#34;&gt;garbage collection system&lt;/a&gt;. What data structures to use? decorator pattern over malloc etc.&lt;/li&gt;
&lt;li&gt;Design a site like &lt;a href=&#34;http://www.junglee.com/&#34;&gt;junglee.com&lt;/a&gt; i.e price comparision, availability on e-commerce websites. When and will you cache, how much to query, how to crawl efficiently over e-commerce sites, sharding of databases, basic database design&lt;/li&gt;
&lt;li&gt;A web application for instant messaging, eg &lt;a href=&#34;http://highscalability.com/blog/2014/2/26/the-whatsapp-architecture-facebook-bought-for-19-billion.html&#34;&gt;whatsapp&lt;/a&gt;, facebook chat. Issues of each, scaling problems, status and availability notification etc.&lt;/li&gt;
&lt;li&gt;Design a system for collaborating over a document simultaneously (eg &lt;a href=&#34;https://neil.fraser.name/writing/sync/&#34;&gt;google docs&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;(very common:) top ‘n’ or most frequent items of a running stream of data&lt;/li&gt;
&lt;li&gt;Design election commission architecture :&lt;br&gt; Let’s say we work with the Election Commission. On Counting day, we want to collate the votes received at the lakhs of voting booths all over the country. Each booth has a voting machine, which, when connected to the network, returns an array of the form {[party_id, num_votes],[party_id_2, num_votes_2],…}. We want to collect these and get the current scores in real time. The report we need continuously is how many seats is each party leading in. Please design a system for this.&lt;/li&gt;
&lt;li&gt;Design a logging system&lt;br&gt; (For web applications, it is common to have a large number of servers running the same application, with a load balancer in front to distribute the incoming requests. In this scenario, we want to check and alarm in case an exception is thrown in any of the servers. We want a system that checks for the appearance of specific words, “Exception”, “Disk Full” etc. in the logs of any of the servers. How would you design this system?)&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/client-server-communication/</guid>
            <title>Client-Server Communication</title>
            <link>https://samirpaul.in/posts/client-server-communication/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <category>design-interview</category>
            <category>preparation</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;Client-Server-Communication&#34;&gt;&lt;a href=&#34;#Client-Server-Communication&#34; class=&#34;headerlink&#34; title=&#34;Client-Server Communication&#34;&gt;&lt;/a&gt;Client-Server Communication&lt;/h1&gt;&lt;h2 id=&#34;Standard-HTTP-Web-Request&#34;&gt;&lt;a href=&#34;#Standard-HTTP-Web-Request&#34; class=&#34;headerlink&#34; title=&#34;Standard HTTP Web Request&#34;&gt;&lt;/a&gt;Standard HTTP Web Request&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Client opens a connection and requests data from server.&lt;/li&gt;
&lt;li&gt;Server calculates the response.&lt;/li&gt;
&lt;li&gt;Server sends the response back to the client on the opened request.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Ajax-Polling&#34;&gt;&lt;a href=&#34;#Ajax-Polling&#34; class=&#34;headerlink&#34; title=&#34;Ajax Polling&#34;&gt;&lt;/a&gt;Ajax Polling&lt;/h2&gt;&lt;p&gt;The client repeatedly polls (or requests) a server for data, and waits for the server to respond with data. If no data is available, an empty response is returned.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Client opens a connection and requests data from the server using regular HTTP.&lt;/li&gt;
&lt;li&gt;The requested webpage sends requests to the server at regular intervals (e.g., 0.5 seconds).&lt;/li&gt;
&lt;li&gt;The server calculates the response and sends it back, like regular HTTP traffic.&lt;/li&gt;
&lt;li&gt;Client repeats the above three steps periodically to get updates from the server.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Problems&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client has to keep asking the server for any new data.&lt;/li&gt;
&lt;li&gt;A lot of responses are empty, creating HTTP overhead.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;HTTP-Long-Polling&#34;&gt;&lt;a href=&#34;#HTTP-Long-Polling&#34; class=&#34;headerlink&#34; title=&#34;HTTP Long-Polling&#34;&gt;&lt;/a&gt;HTTP Long-Polling&lt;/h2&gt;&lt;p&gt;The client requests information from the server exactly as in normal polling, but with the expectation that the server may not respond immediately.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The client makes an initial request using regular HTTP and then waits for a response.&lt;/li&gt;
&lt;li&gt;The server delays its response until an update is available, or until a timeout has occurred.&lt;/li&gt;
&lt;li&gt;When an update is available, the server sends a full response to the client.&lt;/li&gt;
&lt;li&gt;The client typically sends a new long-poll request, either immediately upon receiving a response or after a pause to allow an acceptable latency period.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each Long-Poll request has a timeout. The client has to reconnect periodically after the connection is closed, due to timeouts.&lt;/p&gt;
&lt;h2 id=&#34;WebSockets&#34;&gt;&lt;a href=&#34;#WebSockets&#34; class=&#34;headerlink&#34; title=&#34;WebSockets&#34;&gt;&lt;/a&gt;WebSockets&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A persistent full duplex communication channels over a single TCP connection. Both server and client can send data at any time.&lt;/li&gt;
&lt;li&gt;A connection is established through WebSocket handshake.&lt;/li&gt;
&lt;li&gt;Low communication overhead.&lt;/li&gt;
&lt;li&gt;Real-time data transfer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Server-Sent-Event-SSE&#34;&gt;&lt;a href=&#34;#Server-Sent-Event-SSE&#34; class=&#34;headerlink&#34; title=&#34;Server-Sent Event (SSE)&#34;&gt;&lt;/a&gt;Server-Sent Event (SSE)&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Client requests data from a server using regular HTTP.&lt;/li&gt;
&lt;li&gt;The requested webpage opens a connection to the server.&lt;/li&gt;
&lt;li&gt;Server sends the data to the client whenever there’s new information available.&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Use case:&lt;ul&gt;
&lt;li&gt;When real-time traffic from server to client is needed.&lt;/li&gt;
&lt;li&gt;When server generates data in a loop and sends multiple events to client.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/caching/</guid>
            <title>Caching</title>
            <link>https://samirpaul.in/posts/caching/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>caching</category>
            <category>system-design</category>
            <category>design-interview</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;ul&gt;
&lt;li&gt;Take advantage of the locality of reference principle: recently requested data is likely to be requested again.&lt;/li&gt;
&lt;li&gt;Exist at all levels in architecture, but often found at the level nearest to the front end.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Application-server-cache&#34;&gt;&lt;a href=&#34;#Application-server-cache&#34; class=&#34;headerlink&#34; title=&#34;Application server cache&#34;&gt;&lt;/a&gt;Application server cache&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Cache placed on a request layer node.&lt;/li&gt;
&lt;li&gt;When a request layer node is expanded to many nodes&lt;ul&gt;
&lt;li&gt;Load balancer randomly distributes requests across the nodes.&lt;/li&gt;
&lt;li&gt;The same request can go to different nodes.&lt;/li&gt;
&lt;li&gt;Increase cache misses.&lt;/li&gt;
&lt;li&gt;Solutions:&lt;ul&gt;
&lt;li&gt;Global caches&lt;/li&gt;
&lt;li&gt;Distributed caches&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Distributed-cache&#34;&gt;&lt;a href=&#34;#Distributed-cache&#34; class=&#34;headerlink&#34; title=&#34;Distributed cache&#34;&gt;&lt;/a&gt;Distributed cache&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Each request layer node owns part of the cached data.&lt;/li&gt;
&lt;li&gt;Entire cache is divided up using a consistent hashing function.&lt;/li&gt;
&lt;li&gt;Pro&lt;ul&gt;
&lt;li&gt;Cache space can be increased easily by adding more nodes to the request pool.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Con&lt;ul&gt;
&lt;li&gt;A missing node leads to cache lost.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Global-cache&#34;&gt;&lt;a href=&#34;#Global-cache&#34; class=&#34;headerlink&#34; title=&#34;Global cache&#34;&gt;&lt;/a&gt;Global cache&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;A server or file store that is faster than original store, and accessible by all request layer nodes.&lt;/li&gt;
&lt;li&gt;Two common forms&lt;ul&gt;
&lt;li&gt;Cache server handles cache miss.&lt;ul&gt;
&lt;li&gt;Used by most applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Request nodes handle cache miss.&lt;ul&gt;
&lt;li&gt;Have a large percentage of the hot data set in the cache.&lt;/li&gt;
&lt;li&gt;An architecture where the files stored in the cache are static and shouldn’t be evicted.&lt;/li&gt;
&lt;li&gt;The application logic understands the eviction strategy or hot spots better than the cache&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Content-distributed-network-CDN&#34;&gt;&lt;a href=&#34;#Content-distributed-network-CDN&#34; class=&#34;headerlink&#34; title=&#34;Content distributed network (CDN)&#34;&gt;&lt;/a&gt;Content distributed network (CDN)&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;For sites serving large amounts of static media.&lt;/li&gt;
&lt;li&gt;Process&lt;ul&gt;
&lt;li&gt;A request first asks the CDN for a piece of static media.&lt;/li&gt;
&lt;li&gt;CDN serves that content if it has it locally available.&lt;/li&gt;
&lt;li&gt;If content isn’t available, CDN will query back-end servers for the file, cache it locally and serve it to the requesting user.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If the system is not large enough for CDN, it can be built like this:&lt;ul&gt;
&lt;li&gt;Serving static media off a separate subdomain using lightweight HTTP server (e.g. Nginx).&lt;/li&gt;
&lt;li&gt;Cutover the DNS from this subdomain to a CDN later.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Cache-invalidation&#34;&gt;&lt;a href=&#34;#Cache-invalidation&#34; class=&#34;headerlink&#34; title=&#34;Cache invalidation&#34;&gt;&lt;/a&gt;Cache invalidation&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Keep cache coherent with the source of truth. Invalidate cache when source of truth has changed.&lt;/li&gt;
&lt;li&gt;Write-through cache&lt;ul&gt;
&lt;li&gt;Data is written into the cache and permanent storage at the same time.&lt;/li&gt;
&lt;li&gt;Pro&lt;ul&gt;
&lt;li&gt;Fast retrieval, complete data consistency, robust to system disruptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Con&lt;ul&gt;
&lt;li&gt;Higher latency for write operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write-around cache&lt;ul&gt;
&lt;li&gt;Data is written to permanent storage, not cache.&lt;/li&gt;
&lt;li&gt;Pro&lt;ul&gt;
&lt;li&gt;Reduce the cache that is no used.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Con&lt;ul&gt;
&lt;li&gt;Query for recently written data creates a cache miss and higher latency.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Write-back cache&lt;ul&gt;
&lt;li&gt;Data is only written to cache.&lt;/li&gt;
&lt;li&gt;Write to the permanent storage is done later on.&lt;/li&gt;
&lt;li&gt;Pro&lt;ul&gt;
&lt;li&gt;Low latency, high throughput for write-intensive applications.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Con&lt;ul&gt;
&lt;li&gt;Risk of data loss in case of system disruptions.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;Cache-eviction-policies&#34;&gt;&lt;a href=&#34;#Cache-eviction-policies&#34; class=&#34;headerlink&#34; title=&#34;Cache eviction policies&#34;&gt;&lt;/a&gt;Cache eviction policies&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;FIFO: first in first out&lt;/li&gt;
&lt;li&gt;LIFO: last in first out&lt;/li&gt;
&lt;li&gt;LRU: least recently used&lt;/li&gt;
&lt;li&gt;MRU: most recently used&lt;/li&gt;
&lt;li&gt;LFU: least frequently used&lt;/li&gt;
&lt;li&gt;RR: random replacement&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/google-programmable-search-engine/</guid>
            <title>Google Programmable Search Engine</title>
            <link>https://samirpaul.in/posts/google-programmable-search-engine/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>programmable-search</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;Google Programmable Search Engine lets you include a search engine on your website to help your visitors find the information they’re looking for. Because Programmable Search Engine is based on Google’s core search technology, you can be confident that your users are getting high quality, relevant results. You can customize a lot of your search engine, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apply your site’s look and feel to the search box and results page&lt;/li&gt;
&lt;li&gt;Use search features such as refinements, autocomplete, and promotions to enhance your users’ search experience&lt;/li&gt;
&lt;li&gt;Understand your users’ behavior by linking your search engine with  &lt;a href=&#34;https://google.com/analytics/&#34;&gt;Google Analytics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Make money from your search engine with  &lt;a href=&#34;https://google.com/adsense&#34;&gt;Google AdSense&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Demo&#34;&gt;&lt;a href=&#34;#Demo&#34; class=&#34;headerlink&#34; title=&#34;Demo:&#34;&gt;&lt;/a&gt;Demo:&lt;/h3&gt;&lt;script async src=&#34;https://cse.google.com/cse.js?cx=4269bf6b77dbf4cae&#34;&gt;
&lt;/script&gt;
&lt;div class=&#34;gcse-search&#34;&gt;&lt;/div&gt;

&lt;hr&gt;
&lt;h3 id=&#34;How-is-Programmable-Search-Engine-different-from-Google-Web-Search&#34;&gt;&lt;a href=&#34;#How-is-Programmable-Search-Engine-different-from-Google-Web-Search&#34; class=&#34;headerlink&#34; title=&#34;How is Programmable Search Engine different from Google Web Search?&#34;&gt;&lt;/a&gt;How is Programmable Search Engine different from Google Web Search?&lt;/h3&gt;&lt;p&gt;You have the option to set your custom search engine to search the entire web, similar to a normal search on Google.com. However, you might notice some differences. Your custom search engine:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Emphasizes your results over anything else on the web&lt;/li&gt;
&lt;li&gt;Doesn’t include some  &lt;a href=&#34;https://support.google.com/websearch#topic=3378866&#34;&gt;Google Web Search features&lt;/a&gt;, such as personalized results&lt;/li&gt;
&lt;li&gt;May have a subset of results from the Google index if you include more than ten sites&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/why-is-system-design-so-important/</guid>
            <title>Why is System Design So Important?</title>
            <link>https://samirpaul.in/posts/why-is-system-design-so-important/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;System design is important for several reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Defining system requirements:&lt;/strong&gt; System design helps to identify the requirements and constraints of the system being designed, and to prioritize those requirements. This ensures that the final design meets the needs of the stakeholders and users.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Improved efficiency:&lt;/strong&gt; A well-designed system can improve efficiency by reducing the number of errors, reducing duplication of effort, and automating manual tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Improved scalability:&lt;/strong&gt; System design helps to ensure that the system can accommodate future growth and change. A well-designed system is modular and scalable, making it easier to add new features or capabilities as needed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Better communication:&lt;/strong&gt; System design helps to create a common understanding of the system among stakeholders, including developers, managers, and customers. A well-defined design makes it easier to communicate the system’s capabilities, constraints, and requirements.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Improved maintainability:&lt;/strong&gt; A well-designed system is easier to maintain and modify as needed. The design includes documentation and a clear understanding of the system’s components and interactions, making it easier for future developers to understand the system and make changes as needed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Overall, system design is an important step in the development of any system, as it helps to ensure that the final product meets the needs of stakeholders and users, is efficient, scalable, and maintainable, and facilitates communication and collaboration among team members.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/why-does-the-osi-model-matter/</guid>
            <title>Why Does The OSI Model Matter?</title>
            <link>https://samirpaul.in/posts/why-does-the-osi-model-matter/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>networking</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;The OSI (Open Systems Interconnection) model matters because it provides a standard way of describing and understanding the different functions and components involved in a network communication. The OSI model is a seven-layer abstraction of the network communication process, and it defines the tasks and responsibilities of each layer.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Standardization: The OSI model provides a standard reference model that is widely used and accepted in the industry. This standardization helps to ensure that different systems and components can communicate with each other, even if they were developed by different vendors or organizations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Improved troubleshooting: The OSI model provides a systematic and organized approach to understanding network communication issues. By breaking down network communication into its component parts, it becomes easier to diagnose and fix problems.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Design and development: The OSI model can help with the design and development of network systems by providing a common understanding of the different layers and their responsibilities. This can facilitate communication and collaboration between different teams and stakeholders.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Education: The OSI model is a useful tool for teaching and learning about network communication. It provides a simple and visual way to understand the complex process of network communication.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/what-is-system-design/</guid>
            <title>What is System Design?</title>
            <link>https://samirpaul.in/posts/what-is-system-design/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <category>system-design</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;System design is a process of defining the architecture, modules, interfaces, data for a system to satisfy specified requirements. It can refer to the design of a complex system, such as a computer network, an aircraft, or a power plant, or it can refer to the design of a smaller system, such as a software application or a single computer program.&lt;/p&gt;
&lt;p&gt;The goal of system design is to produce a blueprint or plan that outlines how all the components of the system will work together to achieve the desired outcomes. This process typically involves analyzing the requirements of the system, defining the architecture, selecting appropriate technologies, and ensuring that the system is scalable, maintainable, and meets performance, reliability, and security requirements.&lt;/p&gt;
&lt;p&gt;In software engineering, system design is often used as a synonym for software design, which is the process of defining the architecture, modules, interfaces, and data for a software system to satisfy specified requirements.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/virtualization-vs-containerization/</guid>
            <title>Virtualization vs Containerization</title>
            <link>https://samirpaul.in/posts/virtualization-vs-containerization/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;Virtualization and containerization are two different approaches to creating and managing virtual environments for software applications.&lt;/p&gt;
&lt;p&gt;Virtualization involves creating a virtual machine (VM) that acts as a separate, self-contained operating system environment. Each VM runs its own operating system and applications, and has its own set of virtual hardware resources, such as CPU, memory, and storage. Virtualization allows multiple virtual machines to run on a single physical server, improving utilization and reducing costs. Examples of virtualization technology include VMware and Hyper-V.&lt;/p&gt;
&lt;p&gt;Containerization, on the other hand, is a newer approach to virtualization that is designed to be more lightweight and efficient. Containers are similar to virtual machines, in that they provide a self-contained environment for running applications. However, unlike virtual machines, containers do not include a full operating system. Instead, they share the host operating system and rely on the host for system services. This means that containers are much smaller and faster to start up than virtual machines, and can be run on a much larger scale. Examples of containerization technology include Docker and Kubernetes.&lt;/p&gt;
&lt;img src=&#34;https://samirpaulb.github.io/assets/virtualization-vs-containerization.jpg&#34; alt=&#34;virtualization vs containerization&#34; style=&#34;width:100%&#34; loading=&#34;lazy&#34;&gt;

&lt;p&gt;In summary, virtualization and containerization are both ways to create virtual environments for software applications, but they differ in the level of abstraction and the resources they provide. Virtualization provides a full operating system environment, while containerization provides a lightweight, application-focused environment that relies on the host operating system. Both approaches have their own benefits and trade-offs, and the best choice will depend on the specific requirements of the application and the infrastructure.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/tcp-vs-udp/</guid>
            <title>TCP vs UDP</title>
            <link>https://samirpaul.in/posts/tcp-vs-udp/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;TCP (Transmission Control Protocol) and UDP (User Datagram Protocol) are two of the most commonly used protocols for transmitting data over a network.&lt;/p&gt;
&lt;p&gt;TCP is a reliable and connection-oriented protocol, meaning that a virtual connection must be established between the sender and the receiver before data can be transmitted. It ensures that data is delivered to the recipient in the same order it was sent, and that it is received without errors. If a packet of data is lost or corrupted during transmission, TCP will automatically retransmit the missing data until it is successfully received. This makes TCP a great choice for applications that require reliable data transfer, such as email and file transfers.&lt;/p&gt;
&lt;p&gt;UDP, on the other hand, is a connectionless and unreliable protocol. Unlike TCP, it does not establish a virtual connection between the sender and the receiver, and it does not guarantee that the data will be delivered in the same order it was sent. It is faster than TCP because it has less overhead, but it is less reliable. UDP is often used for applications that do not require reliable data transfer and can tolerate some lost or corrupted data, such as video or audio streaming, online gaming, and voice over IP (VoIP).&lt;/p&gt;
&lt;p&gt;In summary, TCP is best for applications that require reliable data transfer, while UDP is best for applications that can tolerate some loss and do not require reliable data transfer.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/ssl-tls-mtls/</guid>
            <title>SSL TLS mTLS</title>
            <link>https://samirpaul.in/posts/ssl-tls-mtls/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;SSL (Secure Sockets Layer), TLS (Transport Layer Security), and mTLS (Mutual TLS) are all security protocols used to secure communications over the internet.&lt;/p&gt;
&lt;p&gt;SSL was the original protocol used to secure internet communications, but it has been largely replaced by TLS, which is considered to be more secure. TLS is a cryptographic protocol that provides secure communication between two endpoints, such as a web server and a client browser. It ensures that the data transmitted between the endpoints is confidential and integrity protected.&lt;/p&gt;
&lt;p&gt;mTLS, also known as Mutual TLS, is an extension of TLS that adds an extra layer of security by requiring both the client and server to present a valid certificate to each other. This provides a stronger level of identity validation and protects against man-in-the-middle attacks. mTLS is used in situations where it is important to ensure the authenticity of both parties involved in a communication, such as in financial transactions or sensitive data transfers.&lt;/p&gt;
&lt;p&gt;In summary, SSL, TLS, and mTLS are all protocols used to secure internet communications, with TLS being the most widely used and considered to be the most secure. mTLS adds an extra layer of security by requiring both the client and server to present a valid certificate to each other, providing a stronger level of identity validation and protection against man-in-the-middle attacks.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/slo-or-service-level-objective/</guid>
            <title>SLO or Service Level Objective</title>
            <link>https://samirpaul.in/posts/slo-or-service-level-objective/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;A Service Level Objective (SLO) is a target or goal that a service provider sets for a specific service or service component, in terms of performance, availability, or some other quality metric. The SLO defines what the service provider considers to be an acceptable level of service, and provides a clear and measurable way to track the performance of the service over time.&lt;/p&gt;
&lt;p&gt;An SLO is typically expressed as a specific, quantifiable target, such as “99.95% availability” or “mean response time of less than 500 milliseconds”. The SLO can be used to track the performance of the service, and to identify areas where improvements can be made.&lt;/p&gt;
&lt;p&gt;The SLO is often used in conjunction with a Service Level Agreement (SLA), which is a formal agreement between a service provider and a customer that outlines the level of service that will be delivered. The SLO forms the basis for the SLA, and provides a clear and measurable target for the service provider to meet.&lt;/p&gt;
&lt;p&gt;In summary, an SLO is a specific and measurable target that a service provider sets for a service or service component, in order to track and measure its performance over time. By setting clear and achievable SLOs, service providers can ensure that their services meet the needs and expectations of their customers.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/sla-or-service-level-agreement/</guid>
            <title>SLA or Service Level Agreement</title>
            <link>https://samirpaul.in/posts/sla-or-service-level-agreement/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;A Service Level Agreement (SLA) is a contract between a service provider and a customer that outlines the level of service that the provider will deliver. The agreement is designed to ensure that the customer is aware of what to expect from the service, and to hold the service provider accountable for meeting those expectations.&lt;/p&gt;
&lt;p&gt;SLAs typically cover a range of aspects, including:&lt;/p&gt;
&lt;p&gt;Availability: The percentage of time that the service will be available and accessible to the customer.&lt;/p&gt;
&lt;p&gt;Performance: The expected response times for the service, and any relevant performance metrics.&lt;br&gt;Support: The hours of availability for customer support, and the response times for support requests.&lt;/p&gt;
&lt;p&gt;Maintenance: The scheduled maintenance windows for the service, and any expected downtime during these windows.&lt;/p&gt;
&lt;p&gt;Reporting: The frequency and format of performance reports that will be provided to the customer.&lt;/p&gt;
&lt;p&gt;Escalation: The procedures for escalation of issues, and the responsibility of the service provider in addressing them.&lt;/p&gt;
&lt;p&gt;Service credits: Financial compensation provided to the customer in the event that the service provider fails to meet the agreed-upon service levels.&lt;/p&gt;
&lt;p&gt;SLAs are common in many industries, including information technology, telecommunications, and cloud computing. By clearly defining the level of service that a customer can expect, SLAs help to build trust and ensure that the service provider and customer are aligned in their expectations.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/single-sign-on-sso/</guid>
            <title>Single Sign-On SSO</title>
            <link>https://samirpaul.in/posts/single-sign-on-sso/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;Single Sign-On (SSO) is a centralized authentication mechanism that allows users to access multiple applications or services with a single set of credentials. The idea behind SSO is to simplify the process of logging in to various systems, so that users only have to remember one username and password.&lt;/p&gt;
&lt;p&gt;With SSO, when a user logs in to one application or service, they are automatically logged in to all of the other systems and applications that are part of the SSO solution. This eliminates the need for the user to enter their credentials for each individual system, reducing the risk of forgotten passwords, password fatigue, and other security-related issues.&lt;/p&gt;
&lt;p&gt;There are different SSO technologies, including SAML (Security Assertion Markup Language), Kerberos, and OAuth&amp;#x2F;OpenID Connect. Each of these technologies has its own strengths and weaknesses, and the best choice depends on the specific requirements and constraints of the organization.&lt;/p&gt;
&lt;p&gt;In summary, SSO is a centralized authentication mechanism that allows users to access multiple applications and services with a single set of credentials, reducing the risk of forgotten passwords and improving security. SSO provides a convenient and secure way to manage access to resources, making it a popular choice for many organizations.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/saml-vs-oauth-2-dot-0-and-openid-connect/</guid>
            <title>SAML vs OAuth 2.0 and OpenID Connect</title>
            <link>https://samirpaul.in/posts/saml-vs-oauth-2-dot-0-and-openid-connect/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;SAML (Security Assertion Markup Language), OAuth 2.0, and OpenID Connect are all protocols used for authentication and authorization on the web, but they each have different purposes and use cases.&lt;/p&gt;
&lt;p&gt;SAML is an XML-based standard for exchanging authentication and authorization data between parties. It is primarily used for single sign-on (SSO) solutions, allowing users to log in to multiple applications and services with a single set of credentials. SAML is used by many organizations to provide a secure and seamless SSO experience for their users.&lt;/p&gt;
&lt;p&gt;OAuth 2.0 is an authorization framework that enables a third-party application to obtain limited access to an HTTP service on behalf of a resource owner, without requiring the resource owner to reveal its credentials. OAuth 2.0 provides a secure way for a user to grant access to their resources to a third-party application, without the need for the user to share their password with the application. OAuth 2.0 is used by many popular web applications, including Google, Facebook, and Twitter, to allow users to authenticate and authorize access to their resources.&lt;/p&gt;
&lt;p&gt;OpenID Connect is a simple identity layer built on top of OAuth 2.0. It provides a secure way to authenticate users and verify their identities, while also providing information about the user’s identity to the client. OpenID Connect enables the client to know that the user is who they claim to be, without having to manage passwords or other sensitive information. It provides a single sign-on solution, allowing users to authenticate once and then access multiple applications without having to log in again. OpenID Connect is used by many organizations to provide a secure and easy way for their users to authenticate and access resources.&lt;/p&gt;
&lt;p&gt;In summary, SAML is primarily used for SSO, allowing users to log in to multiple applications and services with a single set of credentials. OAuth 2.0 is an authorization framework used to control access to resources, while OpenID Connect is a simple identity layer built on top of OAuth 2.0 that provides a secure way to authenticate users and verify their identities. Both OAuth 2.0 and OpenID Connect are widely used and provide a secure and flexible way to control access to resources and authenticate users on the web.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/python-vs-r-for-data-science/</guid>
            <title>Python vs R for data science</title>
            <link>https://samirpaul.in/posts/python-vs-r-for-data-science/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;Both Python and R are popular programming languages used in data science, but each has its own strengths and weaknesses.&lt;/p&gt;
&lt;p&gt;Python is a general-purpose programming language that has become a popular choice for data science due to its simplicity, versatility, and large community of users. Python has a large number of libraries and packages specifically designed for data analysis and manipulation, such as NumPy, Pandas, and Matplotlib. It also has a rich ecosystem for machine learning, with libraries such as scikit-learn, TensorFlow, and PyTorch.&lt;/p&gt;
&lt;p&gt;On the other hand, R is a language specifically designed for data analysis and statistical computing. R has a strong focus on graphical representation of data and provides many built-in functions for statistical analysis, making it a popular choice for exploratory data analysis. R also has a vast library of packages for data analysis, machine learning, and visualization, such as ggplot2, dplyr, and caret.&lt;/p&gt;
&lt;p&gt;In conclusion, the choice between Python and R largely depends on the specific requirements of the project and personal preferences of the data scientist. Python is a good choice for a general-purpose programming language, while R is best suited for data analysis and statistical computing. Some data scientists prefer to use both languages, leveraging the strengths of each to get the job done.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/python-libraries-to-automate-web-scraping/</guid>
            <title>Python libraries to automate web scraping</title>
            <link>https://samirpaul.in/posts/python-libraries-to-automate-web-scraping/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are several libraries in Python for automating web scraping:&lt;/p&gt;
&lt;p&gt;BeautifulSoup: This is a popular library for web scraping and parsing HTML and XML documents. It provides a convenient way to extract data from HTML and XML documents by searching and navigating the document tree.&lt;/p&gt;
&lt;p&gt;Scrapy: This is a full-featured web crawling and scraping framework for Python. It provides a comprehensive toolset for extracting data from websites, including features for handling common tasks like logging in, following links, and handling errors.&lt;/p&gt;
&lt;p&gt;Selenium: This is a browser automation library that can be used for web scraping as well. It allows you to control a web browser and interact with websites programmatically, making it useful for automating tasks that would otherwise require manual intervention.&lt;/p&gt;
&lt;p&gt;requests: This is a library for sending HTTP requests and processing HTTP responses. While it’s not specifically designed for web scraping, it can be used in combination with other libraries like BeautifulSoup to automate the process of sending requests to websites and extracting data from the responses.&lt;/p&gt;
&lt;p&gt;lxml: This is a library for parsing and manipulating XML and HTML documents. It provides an alternative to BeautifulSoup and can be used to extract data from HTML and XML documents in a more efficient and streamlined way.&lt;/p&gt;
&lt;p&gt;All of these libraries can be used to automate web scraping, but the best choice for your needs will depend on the specific requirements of your project. Some libraries may be more suited for large-scale web scraping, while others may be better suited for more targeted data extraction.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/python-libraries-for-validating-data-used-for-forms-in-many-cases/</guid>
            <title>Python libraries for validating data. Used for forms in many cases</title>
            <link>https://samirpaul.in/posts/python-libraries-for-validating-data-used-for-forms-in-many-cases/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are several Python libraries available for validating data, including:&lt;/p&gt;
&lt;p&gt;WTForms: WTForms is a flexible and powerful form handling library for Python. It provides a simple and intuitive interface for defining and validating forms, and it includes built-in support for a wide range of form fields, including text fields, checkboxes, and select fields.&lt;/p&gt;
&lt;p&gt;Django Forms: Django Forms is a form handling library built into the Django web framework. It provides a simple and flexible interface for defining and validating forms, and it includes support for a wide range of form fields, including text fields, checkboxes, and select fields.&lt;/p&gt;
&lt;p&gt;cerberus: Cerberus is a fast and lightweight data validation library for Python. It provides a simple and flexible interface for defining and validating data, and it includes support for a wide range of validation rules, including type checking, string formatting, and range checking.&lt;/p&gt;
&lt;p&gt;marshmallow: marshmallow is a data serialization and validation library for Python. It provides a simple and flexible interface for defining and validating data, and it includes support for a wide range of data types, including strings, integers, and dates.&lt;/p&gt;
&lt;p&gt;voluptuous: voluptuous is a data validation library for Python. It provides a simple and intuitive interface for defining and validating data, and it includes support for a wide range of validation rules, including type checking, string formatting, and range checking.&lt;/p&gt;
&lt;p&gt;These are just a few examples of the many data validation libraries available for Python. The best library for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/python-libraries-for-parsing-urls/</guid>
            <title>Python libraries for parsing URLs</title>
            <link>https://samirpaul.in/posts/python-libraries-for-parsing-urls/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are several libraries in Python for parsing URLs:&lt;/p&gt;
&lt;p&gt;urllib: This is a standard library in Python, and it includes several modules for working with URLs and HTTP requests, including urllib.parse which provides functions for parsing URLs.&lt;/p&gt;
&lt;p&gt;urlparse: This is another standard library in Python, and it provides similar functionality as urllib.parse.&lt;/p&gt;
&lt;p&gt;furl: This is a third-party library for parsing and manipulating URLs. It provides a more user-friendly interface than the standard libraries and supports features like query string parsing and modification.&lt;/p&gt;
&lt;p&gt;requests-furl: This library is an add-on for the requests library, and it provides URL parsing and manipulation functionality similar to furl.&lt;/p&gt;
&lt;p&gt;py-url-parse: This is another third-party library for parsing URLs, and it provides a simple and lightweight interface for parsing URLs into their constituent parts.&lt;/p&gt;
&lt;p&gt;All of these libraries can be used to parse URLs into their constituent parts, such as the scheme, host, path, query string, and fragment. You can choose the one that best fits your needs based on your requirements for features, ease of use, and performance.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/python-libraries-for-manipulating-audio-and-its-metadata/</guid>
            <title>Python libraries for manipulating audio and its metadata</title>
            <link>https://samirpaul.in/posts/python-libraries-for-manipulating-audio-and-its-metadata/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are several Python libraries that can be used for manipulating audio and its metadata, including:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;pydub:&lt;/strong&gt; pydub is a high-level library for audio manipulation. It allows you to load audio from a variety of sources (including MP3, WAV, and FLAC files), perform operations on the audio (such as slicing, concatenating, and exporting), and work with the metadata associated with the audio.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;librosa:&lt;/strong&gt; librosa is a library for audio analysis and manipulation. It provides functions for loading audio from disk, computing features like Mel spectrograms and MFCCs, and manipulating the audio signal in various ways. It also includes functions for working with audio metadata, such as extracting song titles and artist information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;audioread:&lt;/strong&gt; audioread is a library for decoding audio files of various formats, including MP3, FLAC, and WAV. It provides a simple, unified interface for reading audio data from a variety of file formats, and it can also extract metadata from the audio files, such as the length of the audio, the sample rate, and the number of channels.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;mutagen:&lt;/strong&gt; mutagen is a library for reading and writing metadata in a variety of audio file formats, including MP3, FLAC, and Ogg Vorbis. It provides a simple and flexible interface for working with audio metadata, and it supports a wide range of metadata fields, including album art, lyrics, and album and track information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;soundfile:&lt;/strong&gt; soundfile is a library for reading and writing audio files of various formats, including WAV, AIFF, and FLAC. It provides a simple and efficient interface for reading and writing audio data, and it includes support for working with the metadata associated with the audio files, such as the sample rate and number of channels.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are just a few examples of the many libraries available for working with audio and its metadata in Python. The best library for your needs will depend on the requirements of your specific project, as well as your personal preferences and experience.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/python-libraries-for-implementing-authentication-schemes/</guid>
            <title>Python libraries for implementing authentication schemes</title>
            <link>https://samirpaul.in/posts/python-libraries-for-implementing-authentication-schemes/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are several Python libraries that can be used for implementing authentication schemes, including:&lt;/p&gt;
&lt;p&gt;Flask-Login: Flask-Login is a library for handling user authentication in Flask applications. It provides a simple and flexible interface for managing user accounts, including login and logout, as well as user session management.&lt;/p&gt;
&lt;p&gt;Django-Auth-LDAP: Django-Auth-LDAP is a library for authenticating against an LDAP directory in Django applications. It provides a simple and efficient way to authenticate users against an LDAP directory, and it includes support for user account management and session management.&lt;/p&gt;
&lt;p&gt;PyJWT: PyJWT is a library for encoding and decoding JSON Web Tokens (JWT) in Python. JWT is a popular format for transmitting information between parties, and PyJWT provides a simple and efficient way to encode and decode JWTs in Python.&lt;/p&gt;
&lt;p&gt;Passlib: Passlib is a library for handling password storage and verification in Python. It provides a simple and flexible interface for storing and verifying passwords, and it includes support for a wide range of password hashing algorithms, including bcrypt, scrypt, and Argon2.&lt;/p&gt;
&lt;p&gt;OAuthLib: OAuthLib is a library for implementing OAuth in Python. OAuth is a popular standard for authorization, and OAuthLib provides a simple and flexible way to implement OAuth in your Python applications.&lt;/p&gt;
&lt;p&gt;These are just a few examples of the many libraries available for implementing authentication schemes in Python. The best library for your needs will depend on the requirements of your specific project, as well as your personal preferences and experience.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/python-libraries-for-caching-data/</guid>
            <title>Python libraries for caching data</title>
            <link>https://samirpaul.in/posts/python-libraries-for-caching-data/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are several Python libraries available for caching data, including:&lt;/p&gt;
&lt;p&gt;Redis: Redis is an open-source, in-memory data store that supports a wide range of data structures, including hashes, lists, sets, and sorted sets. Redis can be used as a caching layer for storing frequently-accessed data, and it provides fast and efficient access to cached data.&lt;/p&gt;
&lt;p&gt;Memcached: Memcached is a distributed memory caching system that is often used as a caching layer for storing frequently-accessed data. It provides fast and efficient access to cached data, and it can be easily integrated with Python applications.&lt;/p&gt;
&lt;p&gt;Flask-Cache: Flask-Cache is a caching extension for Flask applications. It provides a simple and flexible interface for caching data in Flask applications, and it supports a wide range of caching backends, including Redis and Memcached.&lt;/p&gt;
&lt;p&gt;Django Cache Framework: The Django Cache Framework is a caching system built into the Django web framework. It provides a simple and flexible interface for caching data in Django applications, and it supports a wide range of caching backends, including Redis and Memcached.&lt;/p&gt;
&lt;p&gt;pylibmc: pylibmc is a Python wrapper around the libmemcached library, which is a high-performance, distributed memory caching system. pylibmc provides a simple and efficient interface for working with Memcached in Python, and it is well-suited for use in high-performance, distributed caching systems.&lt;/p&gt;
&lt;p&gt;These are just a few examples of the many caching libraries available for Python. The best library for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/python-content-management-systems/</guid>
            <title>Python Content Management Systems</title>
            <link>https://samirpaul.in/posts/python-content-management-systems/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are several content management systems (CMS) available in Python, including:&lt;/p&gt;
&lt;p&gt;Django CMS: Django CMS is a popular open-source CMS built using the Django web framework. It provides a flexible and scalable platform for building complex and feature-rich websites, and it includes support for a wide range of content types, including text, images, and videos.&lt;/p&gt;
&lt;p&gt;Mezzanine: Mezzanine is a high-level Python CMS built on top of the Django web framework. It provides a user-friendly interface for managing content, and it includes a range of built-in features, including blog, gallery, and form builders.&lt;/p&gt;
&lt;p&gt;Plone: Plone is a powerful and flexible open-source CMS built using the Python programming language. It provides a range of features for building and managing websites, including a user-friendly interface, content versioning, and support for multiple languages.&lt;/p&gt;
&lt;p&gt;Wagtail: Wagtail is a CMS built using the Django web framework. It provides a flexible and intuitive interface for building and managing websites, and it includes a range of built-in features, including a WYSIWYG editor, document management, and support for multiple languages.&lt;/p&gt;
&lt;p&gt;Pyramid CMS: Pyramid CMS is a flexible and scalable CMS built using the Pyramid web framework. It provides a simple and efficient platform for building and managing websites, and it includes support for a wide range of content types, including text, images, and videos.&lt;/p&gt;
&lt;p&gt;These are just a few examples of the many Python CMS options available. The best CMS for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/python-libraries-for-administrative-interfaces/</guid>
            <title>Python libraries for administrative interfaces</title>
            <link>https://samirpaul.in/posts/python-libraries-for-administrative-interfaces/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are several Python libraries that can be used to create administrative interfaces for web applications. Some popular ones include:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Django Admin:&lt;/strong&gt; Django is a high-level Python web framework that includes a built-in administrative interface. The Django Admin interface is a powerful tool for managing the data and settings of a Django-powered website. It is designed to be easy to use and provides a range of functionality, including the ability to add, edit, and delete records, manage user accounts, and run custom actions on selected records.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Flask-Admin:&lt;/strong&gt; Flask is a lightweight Python web framework that can be used to create administrative interfaces. Flask-Admin is a popular third-party library that provides a simple and flexible way to create administrative interfaces for Flask applications. It supports a range of data types and includes features such as pagination, form validation, and support for custom views and actions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Pyrogram Admin:&lt;/strong&gt; Pyrogram is a Telegram client library for Python that can be used to create administrative interfaces for Telegram bots. Pyrogram Admin provides an easy-to-use interface for managing the data and settings of a Telegram bot, and it supports a range of data types and actions, including message sending, user management, and custom commands.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Sanic Admin:&lt;/strong&gt; Sanic is an asynchronous Python web framework that can be used to create high-performance web applications. Sanic Admin is a third-party library that provides a simple and flexible way to create administrative interfaces for Sanic applications. It includes features such as pagination, form validation, and support for custom views and actions.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These are just a few examples of the many libraries available for creating administrative interfaces in Python. The best library for your needs will depend on the requirements of your specific project, as well as your personal preferences and experience.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/oauth-2-dot-0-and-openid-connect/</guid>
            <title>OAuth 2.0 and OpenID Connect</title>
            <link>https://samirpaul.in/posts/oauth-2-dot-0-and-openid-connect/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;OAuth 2.0 and OpenID Connect are both open standards for authorization and authentication on the web. They are used to control access to resources, such as APIs, and to verify the identity of users.&lt;/p&gt;
&lt;p&gt;OAuth 2.0 is an authorization framework that enables a third-party application to obtain limited access to an HTTP service on behalf of a resource owner, without requiring the resource owner to reveal its credentials. OAuth 2.0 provides a secure way for a user to grant access to their resources to a third-party application, without the need for the user to share their password with the application. OAuth 2.0 is used by many popular web applications, including Google, Facebook, and Twitter, to allow users to authenticate and authorize access to their resources.&lt;/p&gt;
&lt;p&gt;OpenID Connect is a simple identity layer built on top of OAuth 2.0. It provides a secure way to authenticate users and verify their identities, while also providing information about the user’s identity to the client. OpenID Connect enables the client to know that the user is who they claim to be, without having to manage passwords or other sensitive information. It provides a single sign-on solution, allowing users to authenticate once and then access multiple applications without having to log in again. OpenID Connect is used by many organizations to provide a secure and easy way for their users to authenticate and access resources.&lt;/p&gt;
&lt;p&gt;In summary, OAuth 2.0 is an authorization framework used to control access to resources, while OpenID Connect is a simple identity layer built on top of OAuth 2.0 that provides a secure way to authenticate users and verify their identities. Both OAuth 2.0 and OpenID Connect are widely used and provide a secure and flexible way to control access to resources and authenticate users on the web.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/libraries-for-visualizing-data/</guid>
            <title>Libraries for visualizing data</title>
            <link>https://samirpaul.in/posts/libraries-for-visualizing-data/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are many libraries available in Python for visualizing data, including:&lt;/p&gt;
&lt;p&gt;Matplotlib: Matplotlib is a plotting library for creating static, animated, and interactive visualizations in Python. It provides a wide range of visualization options, including line charts, bar charts, scatter plots, and histograms, and it can be easily integrated with other data analysis libraries, such as NumPy and Pandas.&lt;/p&gt;
&lt;p&gt;Seaborn: Seaborn is a library for creating beautiful and informative statistical graphics in Python. It provides a high-level interface for creating a wide range of visualizations, including heat maps, violin plots, and regression plots, and it is built on top of Matplotlib.&lt;/p&gt;
&lt;p&gt;Plotly: Plotly is an open-source library for creating interactive, web-based visualizations in Python. It provides a wide range of visualization options, including bar charts, line charts, scatter plots, and 3D visualizations, and it includes support for streaming and real-time data.&lt;/p&gt;
&lt;p&gt;Bokeh: Bokeh is an interactive visualization library for Python that is optimized for large, real-time data sets. It provides a wide range of visualization options, including scatter plots, line charts, and bar charts, and it includes support for interactive tools, such as zooming and panning.&lt;/p&gt;
&lt;p&gt;ggplot: ggplot is a plotting library for Python that is inspired by the popular ggplot2 library in R. It provides a high-level interface for creating a wide range of visualizations, including scatter plots, bar charts, and histograms, and it is designed to work well with Pandas data frames.&lt;/p&gt;
&lt;p&gt;These are just a few examples of the many data visualization libraries available for Python. The best library for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/how-to-learn-object-oriented-programming-in-python/</guid>
            <title>how to learn object oriented programming in python</title>
            <link>https://samirpaul.in/posts/how-to-learn-object-oriented-programming-in-python/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;Learning object-oriented programming (OOP) in Python can be done by following these steps:&lt;/p&gt;
&lt;p&gt;Familiarize yourself with the basic syntax and features of Python: Before diving into OOP, it’s important to have a good understanding of the basic syntax and features of the language, such as variables, data types, functions, and control structures.&lt;/p&gt;
&lt;p&gt;Understand the basics of OOP: OOP is a programming paradigm that is based on the concept of “objects”. An object is a data structure that contains both data and the functions (methods) that operate on that data. OOP also involves the concepts of inheritance, encapsulation, and polymorphism.&lt;/p&gt;
&lt;p&gt;Study the class syntax in Python: In Python, a class is a blueprint for creating objects. It defines the attributes (data) and methods of an object. Classes are defined using the class keyword, and objects are created by calling the class as a function.&lt;/p&gt;
&lt;p&gt;Learn about inheritance and polymorphism: Inheritance allows you to create a new class based on an existing class, inheriting its attributes and methods. Polymorphism allows objects of different classes to be treated as objects of the same class.&lt;/p&gt;
&lt;p&gt;Practice creating classes and objects: To solidify your understanding of OOP in Python, try creating some classes and objects on your own. Start with simple classes that define basic data structures, and then move on to more complex classes that involve inheritance and polymorphism.&lt;/p&gt;
&lt;p&gt;Read and understand code written by others: One of the best ways to learn OOP is to read and understand code written by others. Look for open-source projects on GitHub that use OOP in Python and study their code.&lt;/p&gt;
&lt;p&gt;Build projects: Apply your OOP knowledge by building real-world projects. This could be anything from a simple game to a complex web application.&lt;/p&gt;
&lt;p&gt;Remember, the key to learning OOP is practice and repetition. Keep trying out new concepts and examples until you feel comfortable with the basics of OOP in Python.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/databases-implemented-in-python/</guid>
            <title>Databases implemented in Python</title>
            <link>https://samirpaul.in/posts/databases-implemented-in-python/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are several databases that have been implemented in Python, including:&lt;/p&gt;
&lt;p&gt;SQLite: SQLite is a lightweight, file-based database that is well-suited for small to medium-sized projects. It provides a simple and efficient SQL interface, and it is included as a standard library in many Python distributions.&lt;/p&gt;
&lt;p&gt;PostgreSQL: PostgreSQL is a powerful, open-source relational database that is well-suited for large, complex projects. It provides a rich set of features, including transactions, stored procedures, and advanced indexing, and it is widely used in a variety of applications, from web applications to scientific research.&lt;/p&gt;
&lt;p&gt;MySQL: MySQL is a widely-used, open-source relational database that is well-suited for small to medium-sized projects. It provides a simple and efficient SQL interface, and it is widely used for a variety of applications, from web applications to data warehousing.&lt;/p&gt;
&lt;p&gt;SQLAlchemy: SQLAlchemy is a SQL toolkit and Object-Relational Mapping (ORM) library for Python. It provides a high-level interface for working with databases, and it supports a wide range of databases, including SQLite, PostgreSQL, and MySQL.&lt;/p&gt;
&lt;p&gt;Django ORM: Django ORM is an Object-Relational Mapping (ORM) library that is built into the Django web framework. It provides a simple and intuitive interface for working with databases, and it supports a wide range of databases, including SQLite, PostgreSQL, and MySQL.&lt;/p&gt;
&lt;p&gt;These are just a few examples of the many databases that have been implemented in Python. The best database for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/gaming-library-in-python/</guid>
            <title>gaming library in python</title>
            <link>https://samirpaul.in/posts/gaming-library-in-python/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;There are several libraries in Python that can be used for game development, including:&lt;/p&gt;
&lt;p&gt;Pygame: This is a popular library for game development in Python. It provides a simple and easy-to-use set of tools for creating 2D games and other types of interactive applications.&lt;/p&gt;
&lt;p&gt;Arcade: This is a library for creating 2D video games and other interactive applications in Python. It provides a high-level API for creating games and other interactive applications, making it a great choice for beginners.&lt;/p&gt;
&lt;p&gt;Pyglet: This is a cross-platform library for game and multimedia development in Python. It provides a powerful and flexible set of tools for creating games and other interactive applications, including support for 2D and 3D graphics.&lt;/p&gt;
&lt;p&gt;Kivy: This is an open-source library for developing mobile and desktop games in Python. It provides a high-level API for creating games and other interactive applications, and it supports multiple platforms, including Android, iOS, and Windows.&lt;/p&gt;
&lt;p&gt;PyOpenGL: This is a library for developing 3D games and other interactive applications in Python. It provides a low-level API for creating 3D graphics and animations, and it is often used in conjunction with other game development libraries, such as Pygame or Pyglet.&lt;/p&gt;
&lt;p&gt;All of these libraries have their own strengths and weaknesses, so it’s important to evaluate each one to see which one is the best fit for your needs. Consider factors such as the ease of use, available features, and overall performance when choosing a gaming library in Python.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/how-does-sso-work/</guid>
            <title>How does SSO work?</title>
            <link>https://samirpaul.in/posts/how-does-sso-work/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;Single Sign-On (SSO) works by creating a central authentication service that is responsible for verifying the identity of a user. When a user attempts to access an application or service that is part of the SSO solution, they are redirected to the SSO service, which authenticates the user. If the user’s identity is verified, the SSO service generates a token that represents the user’s identity and includes information about the user’s session and the resources they are authorized to access.&lt;/p&gt;
&lt;p&gt;The token is then sent back to the application or service the user was trying to access, and the application uses the information in the token to determine whether the user is authorized to access the requested resources. If the user is authorized, the application grants access to the resources, and the user can perform the tasks they need to do.&lt;/p&gt;
&lt;p&gt;One of the key benefits of SSO is that once a user has logged in to the SSO service, they are automatically logged in to all of the other applications and services that are part of the SSO solution. This eliminates the need for the user to enter their credentials for each individual system, making it easier and more convenient for the user to access the resources they need.&lt;/p&gt;
&lt;p&gt;In summary, SSO works by creating a central authentication service that verifies the identity of a user and generates a token representing the user’s identity. The token is used by the applications and services to determine whether the user is authorized to access the requested resources, and the user is automatically logged in to all systems that are part of the SSO solution. This eliminates the need for the user to enter their credentials for each individual system, making it more convenient and secure for the user to access the resources they need.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://samirpaul.in/posts/best-static-site-generator-for-blog/</guid>
            <title>best static site generator for blog</title>
            <link>https://samirpaul.in/posts/best-static-site-generator-for-blog/</link>
            <category>blog</category>
            <category>coding</category>
            <category>computer-science</category>
            <pubDate>Sun, 06 Aug 2023 02:22:53 +0530</pubDate>
            <description><![CDATA[ &lt;p&gt;The best static site generator for a blog will depend on your specific needs and preferences. However, some of the most popular and well-regarded static site generators for blogs include:&lt;/p&gt;
&lt;p&gt;Jekyll: This is one of the most widely used static site generators and is well-suited for blogs and personal websites. Jekyll is built in Ruby and provides a simple and flexible way to create and manage a blog.&lt;/p&gt;
&lt;p&gt;Hugo: This is a fast and flexible static site generator that is well-suited for blogs and other types of websites. It is built in Go and provides a large number of features and customization options.&lt;/p&gt;
&lt;p&gt;Gatsby: This is a modern static site generator that is well-suited for creating fast and dynamic websites, including blogs. It is built with React and provides a powerful set of tools for creating and managing content.&lt;/p&gt;
&lt;p&gt;Hexo: This is a fast and simple static site generator that is well-suited for blogs and other types of websites. It is built in Node.js and provides a large number of plugins and themes for customizing your blog.&lt;/p&gt;
&lt;p&gt;Pelican: This is a static site generator that is well-suited for creating and managing blogs and other types of websites. It is built in Python and provides a simple and flexible way to create and manage content.&lt;/p&gt;
&lt;p&gt;All of these static site generators have their own strengths and weaknesses, so it’s important to evaluate each one to see which one is the best fit for your needs. Consider factors such as the ease of use, available themes and plugins, and overall performance when choosing a static site generator for your blog.&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
