{
    "version": "https://jsonfeed.org/version/1",
    "title": "Samir Paul",
    "description": "Software Engineer",
    "home_page_url": "https://samirpaul.in",
    "items": [
        {
            "id": "https://samirpaul.in/posts/data-structures-and-algorithms-for-coding-interview/",
            "url": "https://samirpaul.in/posts/data-structures-and-algorithms-for-coding-interview/",
            "title": "Data Structures and Algorithms for Coding Interview",
            "date_published": "2023-08-15T04:25:52.000Z",
            "content_html": "<p><b> Repository Link: <a href=\"https://github.com/SamirPaul1/DSAlgo\">https://github.com/SamirPaul1/DSAlgo</a> </b></p>\n<blockquote>\n<p>In this repository, I have stored solutions to various problems and concepts of <strong>Data Structures and Algorithms</strong> in Python in a structured manner.</p>\n</blockquote>\n<p align=\"center\"><a href=\"#\"><img alt=\"Stars\" src=\"https://img.shields.io/github/stars/SamirPaul1/DSAlgo\"><img alt=\"Forks\" src=\"https://img.shields.io/github/forks/SamirPaul1/DSAlgo\"><img alt=\"Size\" src=\"https://img.shields.io/github/repo-size/SamirPaul1/DSAlgo\"><img alt=\"Hits\" src=\"https://hitsofcode.com/github/SamirPaul1/DSAlgo?branch=main\"><img alt=\"language\" src=\"https://user-images.githubusercontent.com/77569653/227633223-43014974-ac8f-4cf9-8605-93d08cb2d5fd.svg\"></a></p>  \n\n\n<h3 id=\"Topics-Covered\"><a href=\"#Topics-Covered\" class=\"headerlink\" title=\"Topics Covered:\"></a><em><strong>Topics Covered</strong></em>:</h3><ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/02_Dynamic-Programming\"><strong>Dynamic Programming</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/03_Sorting-Algorithms\"><strong>Sorting Algorithms</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/04_LinkedList\"><strong>LinkedList</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/05_Object-Oriented-Programming\"><strong>Object-Oriented Programming</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/06_Binary-Trees\"><strong>Binary Trees</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/07_Graph\"><strong>Graph Algorithms</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/08_Heap\"><strong>Heap</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/09_Matrix\"><strong>Matrix</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/10_Trie\"><strong>Trie</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/11_Binary-Search\"><strong>Binary Search</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/12_Backtracking\"><strong>Backtracking</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/13_Stack\"><strong>Stack</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/14_Queue\"><strong>Queue</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/15_Greedy\"><strong>Greedy</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/16_String\"><strong>String</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/17_Bit-Manipulation\"><strong>Bit Manipulation</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/18_Array\"><strong>Array</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/19_HashMap\"><strong>HashMap</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/20_DFS-BFS\"><strong>DFS BFS</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/21_Two-Pointers\"><strong>Two Pointers</strong></a></li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/22_Math\"><strong>Math</strong></a> </li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/23_Recursion\"><strong>Recursion</strong></a></li>\n</ul>\n<p>In various folders of the above topics, you can find questions and concepts related to that topic. </p>\n<ul>\n<li><p>In the <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/02_Dynamic-Programming\">Dynamic Programming</a> section, you can find all the questions covered and not covered in <a href=\"https://www.youtube.com/c/AdityaVermaTheProgrammingLord\">Aditya Verma‚Äôs</a> <a href=\"https://youtube.com/playlist?list=PL_z_8CaSLPWekqhdCPmFohncHwz8TY2Go\">dynamic programming playlist</a> folder-wise with my <a href=\"https://raw.githubusercontent.com/SamirPaul1/DSAlgo/main/02_Dynamic-Programming/Dynamic-Programming-NOTE.pdf\">handwritten notes</a>.‚úçÔ∏è</p>\n</li>\n<li><p>If you are preparing for an interview from <a href=\"https://takeuforward.org/interviews/strivers-sde-sheet-top-coding-interview-problems/\">Striver‚Äôs SDE Sheet</a> then the <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice\"><strong>30-Days-SDE-Sheet-Practice</strong></a> will be helpful to you. Here I have stored solutions to questions of each day with short notes to each solution, as short notes about the approach are very helpful during revision.üéØ</p>\n</li>\n<li><p>In the  <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/Questions-Sheet\"><strong>Questions-Sheet</strong></a> directory, you can find questions asked by top product-based companies.</p>\n</li>\n<li><p>There is a collection of books and pdfs on various important computer science fundamentals in the <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/BOOKS-and-PDFs\"><strong>BOOKS-and-PDFs</strong></a> directory.üìö</p>\n</li>\n</ul>\n<p><img src=\"/assets/img/repository-image-dsalgo-samirpaul1-leetcode-post.jpeg\" alt=\"DSAlgo repo\" title=\"DSAlgo repository\"></p>\n<hr>\n<p align=\"center\">\n<b>View this repository in online VS Code: <a href=\"https://samirpaul.in/dsalgo\" target=\"_blank\">  https://samirpaul.in/dsalgo.  <img alt=\"DSAlgo\"  loading=\"lazy\" src=\"https://github.com/SamirPaul1/DSAlgo/actions/workflows/pages/pages-build-deployment/badge.svg\">\n</a></b>\n</p>\n\n\n<p><img src=\"/assets/img/samirpaul.in-DSAlgo-demo.png\" alt=\"DSA Online VSCode\" title=\"DSA Online VSCode\"></p>\n<hr>\n<p>I am continuously trying to improve this repository by adding new questions and concepts related to the respective topic. Please feel free to contribute to this repository.üíª</p>\n<p><strong>Things you can contribute to:</strong></p>\n<ul>\n<li>Update the existing solution with a better one (better complexity).</li>\n<li>Add new questions and solutions in <code>Python3</code> to the respective directory.</li>\n<li>Add new resources to <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/BOOKS-and-PDFs\">BOOKS-and-PDFs</a> &amp; <a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/Questions-Sheet\">Questions-Sheet</a>.</li>\n<li>Solve issues raised by other people or yourself.</li>\n<li>Provide well-documented source code with detailed explanations.</li>\n</ul>\n<hr>\n<h3 id=\"Stargazers-over-time\"><a href=\"#Stargazers-over-time\" class=\"headerlink\" title=\"Stargazers over time\"></a>Stargazers over time</h3><p><a href=\"https://github.com/SamirPaul1/DSAlgo\"><img alt=\"Star History\" loading=\"lazy\"  src=\"https://api.star-history.com/svg?repos=SamirPaul1/DSAlgo&type=Date\"></a></p>\n<hr>\n<h3 id=\"List-of-Important-Questions-‚ú®\"><a href=\"#List-of-Important-Questions-‚ú®\" class=\"headerlink\" title=\"List of Important Questions:‚ú®\"></a>List of Important Questions:‚ú®</h3><p>The following list of questions was recommended by <a href=\"https://www.youtube.com/c/LoveBabbar1\">Love Babbar</a> on this <a href=\"https://youtu.be/4iFALQ1ACdA\">video</a>. I have documented all those questions here.‚úåÔ∏è</p>\n<table>\n<thead>\n<tr>\n<th>Topic</th>\n<th>Important DSA Questions</th>\n<th>Link</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Topic:</td>\n<td>Problem:</td>\n<td>Related Link</td>\n</tr>\n<tr>\n<td>&lt;-&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Reverse the array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find the maximum and minimum element in an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find the ‚ÄúKth‚Äù max and min element of an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Given an array which consists of only 0, 1 and 2. Sort the array without using any sorting algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Move all the negative elements to one side of the array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find the Union and Intersection of the two sorted arrays.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Write a program to cyclically rotate an array by one.</td>\n<td><a href=\"https://leetcode.com/problems/rotate-array/\">https://leetcode.com/problems/rotate-array/</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>find Largest sum contiguous Subarray [V. IMP]</td>\n<td><a href=\"https://leetcode.com/problems/maximum-subarray/\">https://leetcode.com/problems/maximum-subarray/</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Minimise the maximum difference between heights [V.IMP]</td>\n<td><a href=\"https://leetcode.com/problems/smallest-range-ii/\">https://leetcode.com/problems/smallest-range-ii/</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Minimum no. of Jumps to reach end of an array</td>\n<td><a href=\"https://leetcode.com/problems/jump-game\">https://leetcode.com/problems/jump-game</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>find duplicate in an array of N+1 Integers</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Merge 2 sorted arrays without using Extra space.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Kadane‚Äôs Algorithm</td>\n<td><a href=\"https://leetcode.com/problems/maximum-subarray/\">https://leetcode.com/problems/maximum-subarray/</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Merge Intervals</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Next Permutation</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Count Inversion</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Best time to buy and Sell stock</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>find all pairs on integer array whose sum is equal to given number</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>find common elements In 3 sorted arrays</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Rearrange the array in alternating positive and negative items with O(1) extra space</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find if there is any subarray with sum equal to 0</td>\n<td><a href=\"https://leetcode.com/problems/subarray-sum-equals-k/\">https://leetcode.com/problems/subarray-sum-equals-k/</a></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find factorial of a large number</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>find maximum product subarray</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find longest coinsecutive subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Given an array of size n and a number k, fin all elements that appear more than ‚Äú n&#x2F;k ‚Äú times.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Maximum profit by buying and selling a share atmost twice</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find whether an array is a subset of another array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Find the triplet that sum to a given value</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Trapping Rain water problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Chocolate Distribution problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Smallest Subarray with sum greater than a given value</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Three way partitioning of an array around a given value</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Minimum swaps required bring elements less equal K together</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Minimum no. of operations required to make an array palindrome</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Median of 2 sorted arrays of equal size</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Median of 2 sorted arrays of different size</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Subarray Sums Divisible by K</td>\n<td></td>\n</tr>\n<tr>\n<td>Array</td>\n<td>Continuous Subarray Sum</td>\n<td></td>\n</tr>\n<tr>\n<td>&lt;-&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>&lt;-&gt;</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Spiral traversal on a Matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Search an element in a matriix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Find median in a row wise sorted matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Find row with maximum no. of 1‚Äôs</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Print elements in sorted order using row-column wise sorted matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Largest Rectangle in Histogram</td>\n<td></td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Maximum size rectangle</td>\n<td><a href=\"https://practice.geeksforgeeks.org/problems/max-rectangle/1\">https://practice.geeksforgeeks.org/problems/max-rectangle/1</a></td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Find a specific pair in matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Rotate matrix by 90 degrees</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Kth smallest element in a row-cpumn wise sorted matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Matrix</td>\n<td>Common elements in all rows of a given matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Reverse a String</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Check whether a String is Palindrome or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find Duplicate characters in a string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Why strings are immutable in Java?</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Write a Code to check whether one string is a rotation of another</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Write a Program to check whether a string is a valid shuffle of two strings or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Count and Say problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Write a program to find the longest Palindrome in a string.[ Longest palindromic Substring]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find Longest Recurring Subsequence in String</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Print all Subsequences of a string.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Print all the permutations of the given string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Split the Binary string into two substring with equal 0‚Äôs and 1‚Äôs</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Word Wrap Problem [VERY IMP].</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>EDIT Distance [Very Imp]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find next greater number with same set of digits. [Very Very IMP]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Balanced Parenthesis problem.[Imp]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Word break Problem[ Very Imp]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Rabin Karp Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>KMP Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Convert a Sentence into its equivalent mobile numeric keypad sequence.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Minimum number of bracket reversals needed to make an expression balanced.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Count All Palindromic Subsequence in a given String.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Count of number of given string in 2D character array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Search a Word in a 2D Grid of characters.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Boyer Moore Algorithm for Pattern Searching.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Converting Roman Numerals to Decimal</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Longest Common Prefix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Number of flips to make binary string alternate</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find the first repeated word in string.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Minimum number of swaps for bracket balancing.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find the longest common subsequence between two strings.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Program to generate all possible valid IP addresses from given  string.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Write a program tofind the smallest window that contains all characters of string itself.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Rearrange characters in a string such that no two adjacent are same</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Minimum characters to be added at front to make string palindrome</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Given a sequence of words, print all anagrams together</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Find the smallest window in a string containing all characters of another string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Recursively remove all adjacent duplicates</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>String matching where one string contains wildcard characters</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Function to find Number of customers who could not get a computer</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Transform One String to Another using Minimum Number of Given Operation</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Check if two given strings are isomorphic to each other</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>String</td>\n<td>Recursively print all sentences that can be formed from list of word lists</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Find first and last positions of an element in a sorted array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Find a Fixed Point (Value equal to index) in a given array</td>\n<td><a href=\"https://leetcode.com/problems/find-pivot-index/\">https://leetcode.com/problems/find-pivot-index/</a></td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Search in a rotated sorted array</td>\n<td><a href=\"https://leetcode.com/problems/search-in-rotated-sorted-array/\">https://leetcode.com/problems/search-in-rotated-sorted-array/</a></td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>square root of an integer</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Maximum and minimum of an array using minimum number of comparisons</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Optimum location of point to minimize total distance</td>\n<td><a href=\"https://leetcode.com/problems/best-meeting-point/\">https://leetcode.com/problems/best-meeting-point/</a></td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Find the repeating and the missing</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>find majority element</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Searching in an array where adjacent differ by at most k</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>find a pair with a given difference</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>find four elements that sum to a given value</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>maximum sum such that no 2 elements are adjacent</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Count triplet with sum smaller than a given value</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>merge 2 sorted arrays</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>print all subarrays with 0 sum</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Product array Puzzle</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Sort array according to count of set bits</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>minimum no. of swaps required to sort the array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Bishu and Soldiers</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Rasta and Kheshtak</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Kth smallest number again</td>\n<td>Using Min Heap</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Find pivot element in a sorted array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>K-th Element of Two Sorted Arrays</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Aggressive cows</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Book Allocation Problem</td>\n<td><a href=\"https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/\">https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/</a></td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>EKOSPOJ:</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Job Scheduling Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Missing Number in AP</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Smallest number with atleastn trailing zeroes infactorial</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Painters Partition Problem:</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>ROTI-Prata SPOJ</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>DoubleHelix SPOJ</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Subset Sums</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Findthe inversion count</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Implement Merge-sort in-place</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Searching &amp; Sorting</td>\n<td>Partitioning and Sorting Arrays with Many Repeated Entries</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Write a Program to reverse the Linked List. (Both Iterative and recursive)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Reverse a Linked List in group of Given Size. [Very Imp]</td>\n<td><a href=\"https://leetcode.com/problems/reverse-nodes-in-k-group/\">https://leetcode.com/problems/reverse-nodes-in-k-group/</a></td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Write a program to Detect loop in a linked list.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Write a program to Delete loop in a linked list.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Find the starting point of the loop.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Remove Duplicates in a sorted Linked List.</td>\n<td></td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Remove Duplicates from Sorted List II</td>\n<td></td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Remove Duplicates in a Un-sorted Linked List.</td>\n<td></td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Write a Program to Move the last element to Front in a Linked List.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Add ‚Äú1‚Äù to a number represented as a Linked List.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Add two numbers represented by linked lists.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Intersection of two Sorted Linked List.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Intersection Point of two Linked Lists.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Merge Sort For Linked lists.[Very Important]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Quicksort for Linked Lists.[Very Important]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Find the middle Element of a linked list.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Check if a linked list is a circular linked list.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Split a Circular linked list into two halves.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Write a Program to check whether the Singly Linked list is a palindrome or not.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Deletion from a Circular Linked List.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Reverse a Doubly Linked list.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Find pairs with a given sum in a DLL.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Count triplets in a sorted DLL whose sum is equal to given value ‚ÄúX‚Äù.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Sort a ‚Äúk‚Äùsorted Doubly Linked list.[Very IMP]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Rotate DoublyLinked list by N nodes.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Rotate a Doubly Linked list in group of Given Size.[Very IMP]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Can we reverse a linked list in less than O(n) ?</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Why Quicksort is preferred for. Arrays and Merge Sort for LinkedLists ?</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Flatten a Linked List</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Sort a LL of 0‚Äôs, 1‚Äôs and 2‚Äôs</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Clone a linked list with next and random pointer</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Merge K sorted Linked list</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Multiply 2 no. represented by LL</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Delete nodes which have a greater value on right side</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Segregate even and odd nodes in a Linked List</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Program for n‚Äôth node from the end of a Linked List</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>Find the first non-repeating character from a stream of characters</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>level order traversal</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Reverse Level Order traversal</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Height of a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Diameter of a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Mirror of a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Inorder Traversal of a tree both using recursion and Iteration</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Preorder Traversal of a tree both using recursion and Iteration</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Postorder Traversal of a tree both using recursion and Iteration</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Left View of a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Right View of Tree</td>\n<td><a href=\"https://leetcode.com/problems/binary-tree-right-side-view/\">https://leetcode.com/problems/binary-tree-right-side-view/</a></td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Top View of a tree</td>\n<td><a href=\"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/\">https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/</a></td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Bottom View of a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Zig-Zag traversal of a binary tree</td>\n<td><a href=\"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\">https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/</a></td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if a tree is balanced or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Diagnol Traversal of a Binary tree</td>\n<td><a href=\"https://www.youtube.com/watch?v=e9ZGxH1y_PE\">https://www.youtube.com/watch?v=e9ZGxH1y_PE</a></td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Boundary traversal of a Binary tree</td>\n<td><a href=\"https://www.youtube.com/watch?v=0ca1nvR0be4\">https://www.youtube.com/watch?v=0ca1nvR0be4</a></td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Construct Binary Tree from String with Bracket Representation</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Convert Binary tree into Doubly Linked List</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Convert Binary tree into Sum tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Construct Binary tree from Inorder and preorder traversal</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Find minimum swaps required to convert a Binary tree into BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if Binary tree is Sum tree or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if all leaf nodes are at same level or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if a Binary Tree contains duplicate subtrees of size 2 or more [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if 2 trees are mirror or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Sum of Nodes on the Longest path from root to leaf node</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Check if given graph is tree or not.  [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Find Largest subtree sum in a tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Maximum Sum of nodes in Binary tree such that no two are adjacent</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Print all ‚ÄúK‚Äù Sum paths in a Binary tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Find LCA in a Binary tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Find distance between 2 nodes in a Binary tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Kth Ancestor of node in a Binary tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Find all Duplicate subtrees in a Binary tree [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Tree Isomorphism Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Trees</td>\n<td>Copy List with Random Pointer</td>\n<td></td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Fina a value in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Deletion of a node in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find min and max value in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find inorder successor and inorder predecessor in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Check if a tree is a BST or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Populate Inorder successor of all nodes</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find LCA  of 2 nodes in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Construct BST from preorder traversal</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Convert Binary tree into BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Convert a normal BST into a Balanced BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Merge two BST [ V.V.V&gt;IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find Kth largest element in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find Kth smallest element in a BST</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Count pairs from 2 BST whose sum is equal to given value ‚ÄúX‚Äù</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Find the median of BST in O(n) time and O(1) space</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Count BST ndoes that lie in a given range</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Replace every element with the least greater element on its right</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Given ‚Äún‚Äù appointments, find the conflicting appointments</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Check preorder is valid or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Check whether BST contains Dead end</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Largest BST in a Binary Tree [ V.V.V.V.V IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Flatten BST to sorted list</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Check Completeness of a Binary Tree</td>\n<td></td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Non-overlapping Intervals</td>\n<td></td>\n</tr>\n<tr>\n<td>Binary Search Trees</td>\n<td>Largest BST in Binary Tree</td>\n<td><a href=\"https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/\">https://leetcode.com/problems/maximum-sum-bst-in-binary-tree/</a></td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Activity Selection Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Job SequencingProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Huffman Coding</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Water Connection Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Fractional Knapsack Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Greedy Algorithm to find Minimum number of Coins</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximum trains for which stoppage can be provided</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Minimum Platforms Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Buy Maximum Stocks if i stocks can be bought on i-th day</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Find the minimum and maximum amount to buy all N candies</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Minimize Cash Flow among a given set of friends who have borrowed money from each other</td>\n<td>Optimal Account Balancing</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Minimum Cost to cut a board into squares</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Number of Islands</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Find maximum meetings in one room</td>\n<td><a href=\"https://www.lintcode.com/problem/919\">https://www.lintcode.com/problem/919</a></td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximum product subset of an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximize array sum after K negations</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximize the sum of arr[i]*i</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximum sum of absolute difference of an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximize sum of consecutive differences in a circular array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Minimum sum of absolute difference of pairs of two arrays</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Program for Shortest Job First (or SJF) CPU Scheduling</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Program for Least Recently Used (LRU) Page Replacement algorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Smallest subset with sum greater than all other elements</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Chocolate Distribution Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>DEFKIN -Defense of a Kingdom</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>DIEHARD -DIE HARD</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>GERGOVIA -Wine trading in Gergovia</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Picking Up Chicks</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>CHOCOLA ‚ÄìChocolate</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>ARRANGE -Arranging Amplifiers</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>K Centers Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Minimum Cost of ropes</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Find smallest number with given number of digits and sum of digits</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Rearrange characters in a string such that no two adjacent are same</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Find maximum sum possible equal sum of three stacks</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Greedy</td>\n<td>Maximum Sub-String after at most K changes</td>\n<td><a href=\"https://leetcode.com/problems/maximize-the-confusion-of-an-exam/\">https://leetcode.com/problems/maximize-the-confusion-of-an-exam/</a></td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Rat in a maze Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Printing all solutions in N-Queen Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Word Break Problem using Backtracking</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Remove Invalid Parentheses</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Sudoku Solver</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>m Coloring Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Print all palindromic partitions of a string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Subset Sum Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>The Knight‚Äôs tour problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Tug of War</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Find shortest safe route in a path with landmines</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Combinational Sum</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Find Maximum number possible by doing at-most K swaps</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Print all permutations of a string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Find if there is a path of more than k length from a source</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Longest Possible Route in a Matrix with Hurdles</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Print all possible paths from top left to bottom right of a mXn matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Partition of a set intoK subsets with equal sum</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>BackTracking</td>\n<td>Find the K-th Permutation Sequence of first N natural numbers</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement Stack from Scratch</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement Queue from Scratch</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement 2 stack in an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>find the middle element of a stack</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement ‚ÄúN‚Äù stacks in an Array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Check the expression has valid or Balanced parenthesis or not.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Reverse a String using Stack</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Design a Stack that supports getMin() in O(1) time and O(1) extra space.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Find the next Greater element</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>The celebrity Problem</td>\n<td><a href=\"https://www.youtube.com/watch?v=CiiXBvrX-5A\">https://www.youtube.com/watch?v=CiiXBvrX-5A</a></td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Arithmetic Expression evaluation</td>\n<td><a href=\"https://leetcode.com/problems/evaluate-reverse-polish-notation/\">https://leetcode.com/problems/evaluate-reverse-polish-notation/</a></td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Evaluation of Postfix expression</td>\n<td><a href=\"https://www.youtube.com/watch?v=422Q_yx2yA8\">https://www.youtube.com/watch?v=422Q_yx2yA8</a></td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement a method to insert an element at its bottom without using any other data structure.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Reverse a stack using recursion</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Sort a Stack using recursion</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Merge Overlapping Intervals</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Largest rectangular Area in Histogram</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Length of the Longest Valid Substring</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Expression contains redundant bracket or not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement Stack using Queue</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement Stack using Deque</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Stack Permutations (Check if an array is stack permutation of other)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement Queue using Stack</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement ‚Äún‚Äù queue in an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Implement a Circular queue</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>LRU Cache Implementationa</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Reverse a Queue using recursion</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Reverse the first ‚ÄúK‚Äù elements of a queue</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Interleave the first half of the queue with second half</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Find the first circular tour that visits all Petrol Pumps</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Minimum time required to rot all oranges</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Distance of nearest cell having 1 in a binary matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>First negative integer in every window of size ‚Äúk‚Äù</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Check if all levels of two trees are anagrams or not.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Sum of minimum and maximum elements of all subarrays of size ‚Äúk‚Äù.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Minimum sum of squares of character counts in a given string after removing ‚Äúk‚Äù characters.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Queue based approach or first non-repeating character in a stream.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Stacks &amp; Queues</td>\n<td>Next Smaller Element</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Implement a Maxheap&#x2F;MinHeap using arrays and recursion.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Sort an Array using heap. (HeapSort)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Maximum of all subarrays of size k.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>‚Äúk‚Äù largest element in an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Kth smallest and largest element in an unsorted array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Merge ‚ÄúK‚Äù sorted arrays. [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Merge 2 Binary Max Heaps</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Kth largest sum continuous subarrays</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Leetcode- reorganize strings</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Merge ‚ÄúK‚Äù Sorted Linked Lists [V.IMP]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Smallest range in ‚ÄúK‚Äù Lists</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Median in a stream of Integers</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Check if a Binary Tree is Heap</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Connect ‚Äún‚Äù ropes with minimum cost</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Convert BST to Min Heap</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Convert min heap to max heap</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Rearrange characters in a string such that no two adjacent are same.</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Heap</td>\n<td>Minimum sum of two numbers formed from digits of an array</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Create a Graph, print it</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement BFS algorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement DFS Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Detect Cycle in Directed Graph using BFS&#x2F;DFS Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Detect Cycle in UnDirected Graph using BFS&#x2F;DFS Algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Search in a Maze</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Minimum Step by Knight</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>flood fill algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Clone a graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Making wired Connections</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>word Ladder</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Dijkstra algo</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement Topological Sort</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Minimum time taken by each job to be completed given by a Directed Acyclic Graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Find whether it is possible to finish all tasks or not from given dependencies</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Find the no. of Isalnds</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Given a sorted Dictionary of an Alien Language, find order of characters</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement Kruksal‚ÄôsAlgorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement Prim‚Äôs Algorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Total no. of Spanning tree in a graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement Bellman Ford Algorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Implement Floyd warshallAlgorithm</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Travelling Salesman Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Graph ColouringProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Snake and Ladders Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Find bridge in a graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Count Strongly connected Components(Kosaraju Algo)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Check whether a graph is Bipartite or Not</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Detect Negative cycle in a graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Longest path in a Directed Acyclic Graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Journey to the Moon</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Cheapest Flights Within K Stops</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Oliver and the Game</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Water Jug problem using BFS</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Water Jug problem using BFS</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Find if there is a path of more thank length from a source</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>M-ColouringProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Minimum edges to reverse o make path from source to destination</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Paths to travel each nodes using each edge(Seven Bridges)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Vertex Cover Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Chinese Postman or Route Inspection</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Number of Triangles in a Directed and Undirected Graph</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Minimise the cashflow among a given set of friends who have borrowed money from each other</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Graph</td>\n<td>Two Clique Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Construct a trie from scratch</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Find shortest unique prefix for every word in a given list</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Word Break Problem</td>\n<td>(Trie solution)</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Given a sequence of words, print all anagrams together</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Implement a Phone Directory</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Trie</td>\n<td>Print unique rows in a given boolean matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Coin ChangeProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Knapsack Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Binomial CoefficientProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Permutation CoefficientProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Program for nth Catalan Number</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Matrix Chain Multiplication</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Edit Distance</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Subset Sum Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Friends Pairing Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Gold Mine Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Assembly Line SchedulingProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Painting the Fenceproblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximize The Cut Segments</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Common Subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Repeated Subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Increasing Subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Space Optimized Solution of LCS</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>LCS (Longest Common Subsequence) of three strings</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum Sum Increasing Subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Count all subsequences having product less than K</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest subsequence such that difference between adjacent is one</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum subsequence sum such that no three are consecutive</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Egg Dropping Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum Length Chain of Pairs</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum size square sub-matrix with all 1s</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum sum of pairs with specific difference</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Min Cost PathProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum difference of zeros and ones in binary string</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Minimum number of jumps to reach end</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Minimum cost to fill given weight in a bag</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Minimum removals from array to make max ‚Äìmin &lt;&#x3D; K</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Common Substring</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Count number of ways to reacha given score in a game</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Count Balanced Binary Trees of Height h</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>LargestSum Contiguous Subarray [V&gt;V&gt;V&gt;V IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Smallest sum contiguous subarray</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Unbounded Knapsack (Repetition of items allowed)</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Word Break Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Largest Independent Set Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Partition problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Palindromic Subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Count All Palindromic Subsequence in a given String</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest Palindromic Substring</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Longest alternating subsequence</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Weighted Job Scheduling</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Coin game winner where every player has three choices</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Count Derangements (Permutation such that no element appears in its original position) [ IMPORTANT ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum profit by buying and selling a share at most twice [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Optimal Strategy for a Game</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Optimal Binary Search Tree</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Palindrome PartitioningProblem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Word Wrap Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Mobile Numeric Keypad Problem [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Boolean Parenthesization Problem</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Largest rectangular sub-matrix whose sum is 0</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Largest area rectangular sub-matrix with equal number of 1‚Äôs and 0‚Äôs [ IMP ]</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum sum rectangle in a 2D matrix</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum profit by buying and selling a share at most k times</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Find if a string is interleaved of two other strings</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Maximum Length of Pair Chain</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Partition Equal Subset Sum</td>\n<td><a href=\"https://leetcode.com/submissions/detail/561942165/\">https://leetcode.com/submissions/detail/561942165/</a></td>\n</tr>\n<tr>\n<td>Dynamic Programming</td>\n<td>Target Sum</td>\n<td></td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Count set bits in an integer</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Find the two non-repeating elements in an array of repeating elements</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Count number of bits to be flipped to convert A to B</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Count total set bits in all numbers from 1 to n</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Program to find whether a no is power of two</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Find position of the only set bit</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Copy set bits in a range</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Divide two integers without using multiplication, division and mod operator</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Calculate square of a number without using *, &#x2F; and pow()</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Bit Manipulation</td>\n<td>Power Set</td>\n<td>&lt;-&gt;</td>\n</tr>\n<tr>\n<td>Moore voting algorithm</td>\n<td>Majority Element</td>\n<td><a href=\"https://www.youtube.com/watch?v=n5QY3x_GNDg\">https://www.youtube.com/watch?v=n5QY3x_GNDg</a></td>\n</tr>\n<tr>\n<td>Moore voting algorithm</td>\n<td>Majority Element II</td>\n<td><a href=\"https://www.youtube.com/watch?v=yDbkQd9t2ig\">https://www.youtube.com/watch?v=yDbkQd9t2ig</a></td>\n</tr>\n</tbody></table>\n<hr>\n<h3 id=\"30-Days-Interview-Preparation-PlanüéØ\"><a href=\"#30-Days-Interview-Preparation-PlanüéØ\" class=\"headerlink\" title=\"30 Days Interview Preparation PlanüéØ\"></a><a href=\"https://github.com/SamirPaul1/DSAlgo/tree/main/30-Days-SDE-Sheet-Practice\">30 Days Interview Preparation Plan</a>üéØ</h3><p><b></b><br>Originally the below sheet was prepared by <a href=\"https://www.youtube.com/c/takeUforward\">Raj Vikramaditya</a> A.K.A <a href=\"https://www.youtube.com/channel/UCvEKHATlVq84hm1jduTYm8g\">Striver</a>. I have documented this sheet here in markdown.</p>\n<p><b> </b> </p>\n<p>Day1: (Arrays)</p>\n<ol>\n<li><p>Sort an array of 0‚Äôs 1‚Äôs 2‚Äôs without using extra space or sorting algo</p>\n</li>\n<li><p>Repeat and Missing Number</p>\n</li>\n<li><p>Merge two sorted Arrays without extra space</p>\n</li>\n<li><p>Kadane‚Äôs Algorithm</p>\n</li>\n<li><p>Merge Overlapping Subintervals</p>\n</li>\n<li><p>Find the duplicate in an array of N+1 integers.</p>\n</li>\n</ol>\n<p>Day2: (Arrays)</p>\n<ol>\n<li><p>Set Matrix Zeros</p>\n</li>\n<li><p>Pascal Triangle</p>\n</li>\n<li><p>Next Permutation</p>\n</li>\n<li><p>Inversion of Array (Using Merge Sort)</p>\n</li>\n<li><p>Stock Buy and Sell</p>\n</li>\n<li><p>Ro tate Matrix</p>\n</li>\n</ol>\n<p>Day3: (Arrays&#x2F;maths)</p>\n<ol>\n<li><p>Search in a 2D matrix</p>\n</li>\n<li><p>Pow(X,n)</p>\n</li>\n<li><p>Majority Element (&gt;N&#x2F;2 times)</p>\n</li>\n<li><p>Majority Element (&gt;N&#x2F;3 times)</p>\n</li>\n<li><p>Grid Unique Paths</p>\n</li>\n<li><p>Reverse Pairs (Leetcode)</p>\n</li>\n<li><p>Go through Puzzles from GFG** (Search on own)</p>\n</li>\n</ol>\n<p>Day4: (Hashing)</p>\n<ol>\n<li><p>2 Sum problem</p>\n</li>\n<li><p>4 Sum problem</p>\n</li>\n<li><p>Longest Consecutive Sequence</p>\n</li>\n<li><p>Largest Subarray with 0 sum</p>\n</li>\n<li><p>Count number of subarrays with given XOR (this clearsa lot of problems)</p>\n</li>\n<li><p>Longest substring without repeat</p>\n</li>\n</ol>\n<p>Day5: (LinkedList)</p>\n<ol>\n<li><p>Reverse a LinkedList</p>\n</li>\n<li><p>Find middle of LinkedList</p>\n</li>\n<li><p>Merge two sorted Linked List</p>\n</li>\n<li><p>Remove N-th node from back of LinkedList</p>\n</li>\n<li><p>Delete a given Node when a node is given. (0(1) solution)</p>\n</li>\n<li><p>Add two numbers as LinkedList</p>\n</li>\n</ol>\n<p>Day6:</p>\n<ol>\n<li><p>Find intersection point of Y LinkedList</p>\n</li>\n<li><p>Detect a cycle in Linked List</p>\n</li>\n<li><p>Reverse a LinkedList in groups of size k</p>\n</li>\n<li><p>Check if a LinkedList is palindrome or not.</p>\n</li>\n<li><p>Find the starting point of the Loop of LinkedList</p>\n</li>\n<li><p>Flattening of a LinkedList**</p>\n</li>\n<li><p>Rotate a LinkedList</p>\n</li>\n</ol>\n<p>Day7: (2-pointer)</p>\n<ol>\n<li><p>Clone a Linked List with random and next pointer</p>\n</li>\n<li><p>3 sum</p>\n</li>\n<li><p>Trapping rainwater</p>\n</li>\n<li><p>Remove Duplicate from Sorted array</p>\n</li>\n<li><p>Max consecutive ones</p>\n</li>\n</ol>\n<p>Day8: (Greedy)</p>\n<ol>\n<li><p>N meeting in one room</p>\n</li>\n<li><p>Minimum number of platforms required for a railway</p>\n</li>\n<li><p>Job sequencing Problem</p>\n</li>\n<li><p>Fractional Knapsack Problem</p>\n</li>\n<li><p>Greedy algorithm to find minimum number of coins</p>\n</li>\n<li><p>Activity Selection (it i</p>\n</li>\n<li><p>s same as N meeting in one room)</p>\n</li>\n</ol>\n<p>Day9 (Recursion):</p>\n<ol>\n<li><p>Subset Sums</p>\n</li>\n<li><p>Subset-II</p>\n</li>\n<li><p>Combination sum-</p>\n</li>\n<li><p>Combination sum</p>\n</li>\n<li><p>Palindrome Partitioning</p>\n</li>\n<li><p>K-th permutation Sequence</p>\n</li>\n</ol>\n<p>Day10: (Recursion and Backtracking)</p>\n<ol>\n<li><p>Print all Permutations of a string&#x2F;array</p>\n</li>\n<li><p>N queens Problem</p>\n</li>\n<li><p>SudokuSolver</p>\n</li>\n<li><p>M coloring Problem</p>\n</li>\n<li><p>Rat in a Maze</p>\n</li>\n</ol>\n<p>6.Word Break -&gt; print all ways</p>\n<p>Day11 : (Binary Search)</p>\n<ol>\n<li><p>N-th root of an integer (use binary search) (square root, cube root, ..)</p>\n</li>\n<li><p>Matrix Median</p>\n</li>\n<li><p>Find the element that appears once in sorted array, and rest element appears twice (Binary search)</p>\n</li>\n<li><p>Search element in a sorted and rotated array&#x2F; find pivot where it is rotated**</p>\n</li>\n<li><p>Median of 2 sorted arrays</p>\n</li>\n<li><p>K-th element of two sorted arrays</p>\n</li>\n<li><p>Allocate Minimum Number of Pages</p>\n</li>\n<li><p>Aggressive Cows</p>\n</li>\n</ol>\n<p>Day12: (Bits) (Optional, very rare topic in interviews, but if you have time left, someone might<br>ask)</p>\n<ol>\n<li>Check if a number if a power of 2 or not in O(1)</li>\n<li>Count total set bits</li>\n<li>Divide Integers without &#x2F; operator</li>\n<li>Power Set (this is very important)</li>\n<li>Find MSB in o(1)</li>\n<li>Find square of a number without using multiplication or division operators.</li>\n</ol>\n<p>Day13: (Stack and Queue)</p>\n<ol>\n<li><p>Implement Stack Using Arrays</p>\n</li>\n<li><p>Implement Queue Using Arrays</p>\n</li>\n<li><p>Implement Stack using Queue (using single queue)</p>\n</li>\n<li><p>Implement Queue using Stack (0(1) amortised method)</p>\n</li>\n<li><p>Check for balanced parentheses</p>\n</li>\n<li><p>Next Greater Element</p>\n</li>\n<li><p>Sort a Stack</p>\n</li>\n</ol>\n<p>Day14:</p>\n<ol>\n<li><p>Next Smaller Element<br> Similar to previous question next greater element, just do pop the greater elements<br> out ..</p>\n</li>\n<li><p>LRU cache (vvvv. imp)</p>\n</li>\n<li><p>LFU Cache (Hard, can be ignored)</p>\n</li>\n</ol>\n<p>4.Largest rectangle in histogram (Do the one pass solution)</p>\n<p><a href=\"https://www.youtube.com/watch?v=X0X6G-eWgQ8&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=\">Two pass</a></p>\n<p><a href=\"https://www.youtube.com/watch?v=jC_cWLy7jSI&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=\">One pass</a></p>\n<ol start=\"5\">\n<li>Sliding Window maximum <a href=\"https://www.youtube.com/watch?v=CZQGRp93K4k&list=PLgUwDviBIf0p4ozDR_kJJkONnb1wdx2Ma&index=\">video</a></li>\n<li>Implement Min Stack</li>\n<li>Rotten Orange (Using BFS)</li>\n<li>Stock Span Problem</li>\n<li>Find maximum of minimums of every window size<br>10.The Celebrity Problem</li>\n</ol>\n<p>Day15: (String)</p>\n<ol>\n<li>Reverse Words in a String</li>\n<li>Longest Palindrome in a string</li>\n<li>Roman Number to Integer and vice versa</li>\n<li>Implement ATOI&#x2F;STRSTR</li>\n<li>Longest Common Prefix</li>\n<li>Rabin Karp</li>\n</ol>\n<p>Day16: (String)</p>\n<ol>\n<li>Prefix Function&#x2F;Z-Function</li>\n<li>KMP algo &#x2F; LPS(pi) array</li>\n<li>Minimum characters needed to be inserted in the beginning to make it palindromic.</li>\n<li>Check for Anagrams</li>\n<li>Count and Say</li>\n<li>Compare version numbers</li>\n</ol>\n<p>Day17: (Binary Tree)</p>\n<ol>\n<li>Inorder Traversal (with recursion and without recursion)</li>\n<li>Preorder Traversal (with recursion and without recursion)</li>\n<li>Postorder Traversal (with recursion and without recursion)</li>\n<li>LeftView Of Binary Tree</li>\n<li>Bottom View of Binary Tree</li>\n<li>Top View of Binary Tree**</li>\n</ol>\n<p>Day18: (Binary Tree)</p>\n<ol>\n<li>Level order Traversal &#x2F; Level order traversal in spiral form</li>\n<li>Height of a Binary Tree</li>\n<li>Diameter of Binary Tree</li>\n<li>Check if Binary tree is height balanced or not</li>\n<li>LCA in Binary Tree</li>\n<li>Check if two trees are identical or not**</li>\n</ol>\n<p>Day 19: (Binary Tree)</p>\n<ol>\n<li>Maximum path sum</li>\n<li>Construct Binary Tree from inorder and preorder</li>\n<li>Construct Binary Tree from Inorder and Postorder</li>\n<li>Symmetric Binary Tree</li>\n<li>Flatten Binary Tree to LinkedList</li>\n<li>Check if Binary Tree is mirror of itself or not</li>\n</ol>\n<p>Day 20: (Binary Search Tree)</p>\n<ol>\n<li>Populate Next Right pointers of Tree</li>\n<li>Search given Key in BST</li>\n<li>Construct BST from given keys.</li>\n<li>Check is a BT is BST or not</li>\n<li>Find LCA of two nodes in BST</li>\n<li>Find the inorder predecessor&#x2F;successor of a given Key in BST.**</li>\n</ol>\n<p>Day21: (BinarySearchTree)</p>\n<ol>\n<li>Floor and Ceil in a BST</li>\n<li>Find K-th smallest and K-th largest element in BST (2 different Questions)</li>\n<li>Find a pair with a given sum in BST</li>\n<li>BST iterator</li>\n<li>Size of the largest BST in a Binary Tree</li>\n<li>Serialize and deserialize Binary Tree</li>\n</ol>\n<p>Day22: (Mixed Questions)</p>\n<ol>\n<li>Binary Tree to Double Linked List</li>\n<li>Find median in a stream of running integers.</li>\n<li>K-th largest element in a stream.</li>\n<li>Distinct numbers in Window.</li>\n<li>K-th largest element in an unsorted array.</li>\n<li>Flood-fill Algorithm</li>\n</ol>\n<p>Day23: (Graph) <a href=\"https://www.youtube.com/watch?v=LCrovIMurxY&list=PLgUwDviBIf0rGEWe64KWas0NrynSCRWw&index=\">Theory</a></p>\n<ol>\n<li>Clone a graph (Not that easy as it looks)</li>\n<li>DFS</li>\n<li>BFS</li>\n<li>Detect A cycle in Undirected Graph&#x2F;Directed Graph</li>\n<li>Topo Sort</li>\n<li>Number of islands (Do in Grid and Graph both)</li>\n<li>Bipartite Check</li>\n</ol>\n<p>Day24: (Graph) <a href=\"https://www.youtube.com/watch?v=LCrovIMurxY&list=PLgUwDviBIf0rGEWe64KWas0NrynSCRWw&index=\">Theory</a></p>\n<ol>\n<li>SCC(using KosaRaju‚Äôs algo)</li>\n<li>Djisktra‚Äôs Algorithm</li>\n<li>Bellman Ford Algo</li>\n<li>Floyd Warshall Algorithm</li>\n<li>MST using Prim‚Äôs Algo</li>\n<li>MST using Kruskal‚Äôs Algo</li>\n</ol>\n<p>Day25: (Dynamic Programming)</p>\n<ol>\n<li>Max Product Subarray</li>\n<li>Longest Increasing Subsequence</li>\n<li>Longest Common Subsequence</li>\n<li>0-1 Knapsack</li>\n<li>Edit Distance</li>\n<li>Maximum sum increasing subsequence</li>\n<li>Matrix Chain Multiplication</li>\n</ol>\n<p>Day26: (DP)</p>\n<ol>\n<li>Maximum sum path in matrix, (count paths, and similar type do, also backtrack to find<br> the maximum path)</li>\n<li>Coin change</li>\n<li>Subset Sum</li>\n<li>Rod Cutting</li>\n<li>Egg Dropping</li>\n<li>Word Break</li>\n<li>Palindrome Partitioning (MCM Variation)</li>\n<li>Maximum profit in Job scheduling<br><a href=\"https://docs.google.com/document/d/1sQlRDw6--HwyxeFL7b4kBsOG-Tz7rXMbpWNnfvJErA4/edit\">For core revision&lt;&#x2F;&gt;</a></li>\n</ol>\n<p>Day27:</p>\n<ol>\n<li>Revise OS notes that you would have made during your sem</li>\n<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>\n</ol>\n<p>Day28:</p>\n<ol>\n<li>Revise DBMS notes that you would have made during your semesters.</li>\n<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>\n</ol>\n<p>Day29:</p>\n<ol>\n<li>Revise CN notes, that you would have made during your sem.</li>\n<li>If not made notes, spend 2 or 3 days and make notes from Knowledge Gate.</li>\n</ol>\n<p>Day30:</p>\n<ol>\n<li>Make a note of how will your represent your projects, and prepare all questions<br> related to tech which you have used in your projects. Prepare a note which you can<br> say for 3-10 minutes when he asks you that say something about the project.</li>\n</ol>\n<hr>\n<h3 id=\"System-Design-‚Äì-Conceptsüìö\"><a href=\"#System-Design-‚Äì-Conceptsüìö\" class=\"headerlink\" title=\"System Design ‚Äì Conceptsüìö\"></a>System Design ‚Äì Conceptsüìö</h3><ol>\n<li><p><a href=\"https://github.com/SamirPaul1/system-design-primer\">https://github.com/SamirPaul1/system-design-primer</a></p>\n</li>\n<li><p><a href=\"https://www.freecodecamp.org/news/systems-design-for-interviews/\">https://www.freecodecamp.org/news/systems-design-for-interviews/</a></p>\n</li>\n<li><p><a href=\"https://github.com/shashank88/system_design\">https://github.com/shashank88/system_design</a></p>\n</li>\n</ol>\n",
            "tags": [
                "DSAlgo",
                "dsa-in-python",
                "data-structures-and-algorithms"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/system-design-course/",
            "url": "https://samirpaul.in/posts/system-design-course/",
            "title": "System Design Course",
            "date_published": "2023-08-15T04:24:59.000Z",
            "content_html": "<blockquote>\n<p>Learn how to design systems at scale and prepare for system design interviews.</p>\n</blockquote>\n<p align=\"center\">\n<a class=\"btn-lang\" href=\"/assets/doc/system-design.pdf\" target = \"_blank\">Download PDF</a>\n</p>\n\n<details>\n  <summary><b>Table of contents</b></summary>\n\n<ul>\n<li><p><strong>Getting Started</strong></p>\n<ul>\n<li><a href=\"#what-is-system-design\">What is system design?</a></li>\n</ul>\n</li>\n<li><p><strong>Chapter I</strong></p>\n<ul>\n<li><a href=\"#ip\">IP</a></li>\n<li><a href=\"#osi-model\">OSI Model</a></li>\n<li><a href=\"#tcp-and-udp\">TCP and UDP</a></li>\n<li><a href=\"#domain-name-system-dns\">Domain Name System (DNS)</a></li>\n<li><a href=\"#load-balancing\">Load Balancing</a></li>\n<li><a href=\"#clustering\">Clustering</a></li>\n<li><a href=\"#caching\">Caching</a></li>\n<li><a href=\"#content-delivery-network-cdn\">Content Delivery Network (CDN)</a></li>\n<li><a href=\"#proxy\">Proxy</a></li>\n<li><a href=\"#availability\">Availability</a></li>\n<li><a href=\"#scalability\">Scalability</a></li>\n<li><a href=\"#storage\">Storage</a></li>\n</ul>\n</li>\n<li><p><strong>Chapter II</strong></p>\n<ul>\n<li><a href=\"#databases-and-dbms\">Databases and DBMS</a></li>\n<li><a href=\"#sql-databases\">SQL databases</a></li>\n<li><a href=\"#nosql-databases\">NoSQL databases</a></li>\n<li><a href=\"#sql-vs-nosql-databases\">SQL vs NoSQL databases</a></li>\n<li><a href=\"#database-replication\">Database Replication</a></li>\n<li><a href=\"#indexes\">Indexes</a></li>\n<li><a href=\"#normalization-and-denormalization\">Normalization and Denormalization</a></li>\n<li><a href=\"#acid-and-base-consistency-models\">ACID and BASE consistency models</a></li>\n<li><a href=\"#cap-theorem\">CAP theorem</a></li>\n<li><a href=\"#pacelc-theorem\">PACELC Theorem</a></li>\n<li><a href=\"#transactions\">Transactions</a></li>\n<li><a href=\"#distributed-transactions\">Distributed Transactions</a></li>\n<li><a href=\"#sharding\">Sharding</a></li>\n<li><a href=\"#consistent-hashing\">Consistent Hashing</a></li>\n<li><a href=\"#database-federation\">Database Federation</a></li>\n</ul>\n</li>\n<li><p><strong>Chapter III</strong></p>\n<ul>\n<li><a href=\"#n-tier-architecture\">N-tier architecture</a></li>\n<li><a href=\"#message-brokers\">Message Brokers</a></li>\n<li><a href=\"#message-queues\">Message Queues</a></li>\n<li><a href=\"#publish-subscribe\">Publish-Subscribe</a></li>\n<li><a href=\"#enterprise-service-bus-esb\">Enterprise Service Bus (ESB)</a></li>\n<li><a href=\"#monoliths-and-microservices\">Monoliths and Microservices</a></li>\n<li><a href=\"#event-driven-architecture-eda\">Event-Driven Architecture (EDA)</a></li>\n<li><a href=\"#event-sourcing\">Event Sourcing</a></li>\n<li><a href=\"#command-and-query-responsibility-segregation-cqrs\">Command and Query Responsibility Segregation (CQRS)</a></li>\n<li><a href=\"#api-gateway\">API Gateway</a></li>\n<li><a href=\"#rest-graphql-grpc\">REST, GraphQL, gRPC</a></li>\n<li><a href=\"#long-polling-websockets-server-sent-events-sse\">Long polling, WebSockets, Server-Sent Events (SSE)</a></li>\n</ul>\n</li>\n<li><p><strong>Chapter IV</strong></p>\n<ul>\n<li><a href=\"#geohashing-and-quadtrees\">Geohashing and Quadtrees</a></li>\n<li><a href=\"#circuit-breaker\">Circuit breaker</a></li>\n<li><a href=\"#rate-limiting\">Rate Limiting</a></li>\n<li><a href=\"#service-discovery\">Service Discovery</a></li>\n<li><a href=\"#sla-slo-sli\">SLA, SLO, SLI</a></li>\n<li><a href=\"#disaster-recovery\">Disaster recovery</a></li>\n<li><a href=\"#virtual-machines-vms-and-containers\">Virtual Machines (VMs) and Containers</a></li>\n<li><a href=\"#oauth-20-and-openid-connect-oidc\">OAuth 2.0 and OpenID Connect (OIDC)</a></li>\n<li><a href=\"#single-sign-on-sso\">Single Sign-On (SSO)</a></li>\n<li><a href=\"#ssl-tls-mtls\">SSL, TLS, mTLS</a></li>\n</ul>\n</li>\n<li><p><strong>Chapter V</strong></p>\n<ul>\n<li><a href=\"#system-design-interviews\">System Design Interviews</a></li>\n<li><a href=\"#url-shortener\">URL Shortener</a></li>\n<li><a href=\"#whatsapp\">Whatsapp</a></li>\n<li><a href=\"#twitter\">Twitter</a></li>\n<li><a href=\"#netflix\">Netflix</a></li>\n<li><a href=\"#uber\">Uber</a></li>\n</ul>\n</li>\n<li><p><strong>Appendix</strong></p>\n<ul>\n<li><a href=\"#next-steps\">Next Steps</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n</li>\n</ul>\n</details>\n\n<h1 id=\"What-is-system-design\"><a href=\"#What-is-system-design\" class=\"headerlink\" title=\"What is system design?\"></a>What is system design?</h1><p>Before we start this course, let‚Äôs talk about what even is system design.</p>\n<p>System design is the process of defining the architecture, interfaces, and data<br>for a system that satisfies specific requirements. System design meets the needs<br>of your business or organization through coherent and efficient systems. It requires<br>a systematic approach to building and engineering systems. A good system design requires<br>us to think about everything, from infrastructure all the way down to the data and how it‚Äôs stored.</p>\n<h2 id=\"Why-is-System-Design-so-important\"><a href=\"#Why-is-System-Design-so-important\" class=\"headerlink\" title=\"Why is System Design so important?\"></a>Why is System Design so important?</h2><p>System design helps us define a solution that meets the business requirements. It is<br>one of the earliest decisions we can make when building a system. Often it is essential<br>to think from a high level as these decisions are very difficult to correct later. It<br>also makes it easier to reason about and manage architectural changes as the system evolves.</p>\n<h1 id=\"IP\"><a href=\"#IP\" class=\"headerlink\" title=\"IP\"></a>IP</h1><p>An IP address is a unique address that identifies a device on the internet or a local network. IP stands for <em>‚ÄúInternet Protocol‚Äù</em>, which is the set of rules governing the format of data sent via the internet or local network.</p>\n<p>In essence, IP addresses are the identifier that allows information to be sent between devices on a network. They contain location information and make devices accessible for communication. The internet needs a way to differentiate between different computers, routers, and websites. IP addresses provide a way of doing so and form an essential part of how the internet works.</p>\n<h2 id=\"Versions\"><a href=\"#Versions\" class=\"headerlink\" title=\"Versions\"></a>Versions</h2><p>Now, let‚Äôs learn about the different versions of IP addresses:</p>\n<h3 id=\"IPv4\"><a href=\"#IPv4\" class=\"headerlink\" title=\"IPv4\"></a>IPv4</h3><p>The original Internet Protocol is IPv4 which uses a 32-bit numeric dot-decimal notation that only allows for around 4 billion IP addresses. Initially, it was more than enough but as internet adoption grew we needed something better.</p>\n<p><em>Example: <code>102.22.192.181</code></em></p>\n<h3 id=\"IPv6\"><a href=\"#IPv6\" class=\"headerlink\" title=\"IPv6\"></a>IPv6</h3><p>IPv6 is a new protocol that was introduced in 1998. Deployment commenced in the mid-2000s and since the internet users have grown exponentially, it is still ongoing.</p>\n<p>This new protocol uses 128-bit alphanumeric hexadecimal notation. This means that IPv6 can provide about ~340e+36 IP addresses. That‚Äôs more than enough to meet the growing demand for years to come.</p>\n<p><em>Example: <code>2001:0db8:85a3:0000:0000:8a2e:0370:7334</code></em></p>\n<h2 id=\"Types\"><a href=\"#Types\" class=\"headerlink\" title=\"Types\"></a>Types</h2><p>Let‚Äôs discuss types of IP addresses:</p>\n<h3 id=\"Public\"><a href=\"#Public\" class=\"headerlink\" title=\"Public\"></a>Public</h3><p>A public IP address is an address where one primary address is associated with your whole network. In this type of IP address, each of the connected devices has the same IP address.</p>\n<p><em>Example: IP address provided to your router by the ISP.</em></p>\n<h3 id=\"Private\"><a href=\"#Private\" class=\"headerlink\" title=\"Private\"></a>Private</h3><p>A private IP address is a unique IP number assigned to every device that connects to your internet network, which includes devices like computers, tablets, and smartphones, which are used in your household.</p>\n<p><em>Example: IP addresses generated by your home router for your devices.</em></p>\n<h3 id=\"Static\"><a href=\"#Static\" class=\"headerlink\" title=\"Static\"></a>Static</h3><p>A static IP address does not change and is one that was manually created, as opposed to having been assigned. These addresses are usually more expensive but are more reliable.</p>\n<p><em>Example: They are usually used for important things like reliable geo-location services, remote access, server hosting, etc.</em></p>\n<h3 id=\"Dynamic\"><a href=\"#Dynamic\" class=\"headerlink\" title=\"Dynamic\"></a>Dynamic</h3><p>A dynamic IP address changes from time to time and is not always the same. It has been assigned by a <a href=\"https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol\">Dynamic Host Configuration Protocol (DHCP)</a> server. Dynamic IP addresses are the most common type of internet protocol addresses. They are cheaper to deploy and allow us to reuse IP addresses within a network as needed.</p>\n<p><em>Example: They are more commonly used for consumer equipment and personal use.</em></p>\n<h1 id=\"OSI-Model\"><a href=\"#OSI-Model\" class=\"headerlink\" title=\"OSI Model\"></a>OSI Model</h1><p>The OSI Model is a logical and conceptual model that defines network communication used by systems open to interconnection and communication with other systems. The Open System Interconnection (OSI Model) also defines a logical network and effectively describes computer packet transfer by using various layers of protocols.</p>\n<p>The OSI Model can be seen as a universal language for computer networking. It‚Äôs based on the concept of splitting up a communication system into seven abstract layers, each one stacked upon the last.</p>\n<p><img src=\"/assets/img/system-design/osi-model.jpg\" alt=\"osi-model\"></p>\n<h2 id=\"Why-does-the-OSI-model-matter\"><a href=\"#Why-does-the-OSI-model-matter\" class=\"headerlink\" title=\"Why does the OSI model matter?\"></a>Why does the OSI model matter?</h2><p>The Open System Interconnection (OSI) model has defined the common terminology used in networking discussions and documentation. This allows us to take a very complex communications process apart and evaluate its components.</p>\n<p>While this model is not directly implemented in the TCP&#x2F;IP networks that are most common today, it can still help us do so much more, such as:</p>\n<ul>\n<li>Make troubleshooting easier and help identify threats across the entire stack.</li>\n<li>Encourage hardware manufacturers to create networking products that can communicate with each other over the network.</li>\n<li>Essential for developing a security-first mindset.</li>\n<li>Separate a complex function into simpler components.</li>\n</ul>\n<h2 id=\"Layers\"><a href=\"#Layers\" class=\"headerlink\" title=\"Layers\"></a>Layers</h2><p>The seven abstraction layers of the OSI model can be defined as follows, from top to bottom:</p>\n<h3 id=\"Application\"><a href=\"#Application\" class=\"headerlink\" title=\"Application\"></a>Application</h3><p>This is the only layer that directly interacts with data from the user. Software applications like web browsers and email clients rely on the application layer to initiate communication. But it should be made clear that client software applications are not part of the application layer, rather the application layer is responsible for the protocols and data manipulation that the software relies on to present meaningful data to the user. Application layer protocols include HTTP as well as SMTP.</p>\n<h3 id=\"Presentation\"><a href=\"#Presentation\" class=\"headerlink\" title=\"Presentation\"></a>Presentation</h3><p>The presentation layer is also called the Translation layer. The data from the application layer is extracted here and manipulated as per the required format to transmit over the network. The functions of the presentation layer are translation, encryption&#x2F;decryption, and compression.</p>\n<h3 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h3><p>This is the layer responsible for opening and closing communication between the two devices. The time between when the communication is opened and closed is known as the session. The session layer ensures that the session stays open long enough to transfer all the data being exchanged, and then promptly closes the session in order to avoid wasting resources. The session layer also synchronizes data transfer with checkpoints.</p>\n<h3 id=\"Transport\"><a href=\"#Transport\" class=\"headerlink\" title=\"Transport\"></a>Transport</h3><p>The transport layer (also known as layer 4) is responsible for end-to-end communication between the two devices. This includes taking data from the session layer and breaking it up into chunks called segments before sending it to the Network layer (layer 3). It is also responsible for reassembling the segments on the receiving device into data the session layer can consume.</p>\n<h3 id=\"Network\"><a href=\"#Network\" class=\"headerlink\" title=\"Network\"></a>Network</h3><p>The network layer is responsible for facilitating data transfer between two different networks. The network layer breaks up segments from the transport layer into smaller units, called packets, on the sender‚Äôs device, and reassembles these packets on the receiving device. The network layer also finds the best physical path for the data to reach its destination this is known as routing. <strong>If the two devices communicating are on the same network, then the network layer is unnecessary.</strong></p>\n<h3 id=\"Data-Link\"><a href=\"#Data-Link\" class=\"headerlink\" title=\"Data Link\"></a>Data Link</h3><p>The data link layer is very similar to the network layer, except the <strong>data link layer facilitates data transfer between two devices on the same network.</strong> The data link layer takes packets from the network layer and breaks them into smaller pieces called frames.</p>\n<h3 id=\"Physical\"><a href=\"#Physical\" class=\"headerlink\" title=\"Physical\"></a>Physical</h3><p>This layer includes the physical equipment involved in the data transfer, such as the cables and switches. This is also the layer where the data gets converted into a bit stream, which is a string of 1s and 0s. The physical layer of both devices must also agree on a signal convention so that the 1s can be distinguished from the 0s on both devices.</p>\n<h1 id=\"TCP-and-UDP\"><a href=\"#TCP-and-UDP\" class=\"headerlink\" title=\"TCP and UDP\"></a>TCP and UDP</h1><h2 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h2><p>Transmission Control Protocol (TCP) is connection-oriented, meaning once a connection has been established, data can be transmitted in both directions. TCP has built-in systems to check for errors and to guarantee data will be delivered in the order it was sent, making it the perfect protocol for transferring information like still images, data files, and web pages.</p>\n<p><img src=\"/assets/img/system-design/tcp.jpg\" alt=\"tcp\"></p>\n<p>But while TCP is instinctively reliable, its feedback mechanisms also result in a larger overhead, translating to greater use of the available bandwidth on the network.</p>\n<h2 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h2><p>User Datagram Protocol (UDP) is a simpler, connectionless internet protocol in which error-checking and recovery services are not required. With UDP, there is no overhead for opening a connection, maintaining a connection, or terminating a connection. Data is continuously sent to the recipient, whether or not they receive it.</p>\n<p><img src=\"/assets/img/system-design/udp.jpg\" alt=\"udp\"></p>\n<p>It is largely preferred for real-time communications like broadcast or multicast network transmission. We should use UDP over TCP when we need the lowest latency and late data is worse than the loss of data.</p>\n<h2 id=\"TCP-vs-UDP\"><a href=\"#TCP-vs-UDP\" class=\"headerlink\" title=\"TCP vs UDP\"></a>TCP vs UDP</h2><p>TCP is a connection-oriented protocol, whereas UDP is a connectionless protocol. A key difference between TCP and UDP is speed, as TCP is comparatively slower than UDP. Overall, UDP is a much faster, simpler, and more efficient protocol, however, retransmission of lost data packets is only possible with TCP.</p>\n<p>TCP provides ordered delivery of data from user to server (and vice versa), whereas UDP is not dedicated to end-to-end communications, nor does it check the readiness of the receiver.</p>\n<table>\n<thead>\n<tr>\n<th>Feature</th>\n<th>TCP</th>\n<th>UDP</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Connection</td>\n<td>Requires an established connection</td>\n<td>Connectionless protocol</td>\n</tr>\n<tr>\n<td>Guaranteed delivery</td>\n<td>Can guarantee delivery of data</td>\n<td>Cannot guarantee delivery of data</td>\n</tr>\n<tr>\n<td>Re-transmission</td>\n<td>Re-transmission of lost packets is possible</td>\n<td>No re-transmission of lost packets</td>\n</tr>\n<tr>\n<td>Speed</td>\n<td>Slower than UDP</td>\n<td>Faster than TCP</td>\n</tr>\n<tr>\n<td>Broadcasting</td>\n<td>Does not support broadcasting</td>\n<td>Supports broadcasting</td>\n</tr>\n<tr>\n<td>Use cases</td>\n<td>HTTPS, HTTP, SMTP, POP, FTP, etc</td>\n<td>Video streaming, DNS, VoIP, etc</td>\n</tr>\n</tbody></table>\n<h1 id=\"Domain-Name-System-DNS\"><a href=\"#Domain-Name-System-DNS\" class=\"headerlink\" title=\"Domain Name System (DNS)\"></a>Domain Name System (DNS)</h1><p>Earlier we learned about IP addresses that enable every machine to connect with other machines. But as we know humans are more comfortable with names than numbers. It‚Äôs easier to remember a name like <code>google.com</code> than something like <code>122.250.192.232</code>.</p>\n<p>This brings us to Domain Name System (DNS) which is a hierarchical and decentralized naming system used for translating human-readable domain names to IP addresses.</p>\n<h2 id=\"How-DNS-works\"><a href=\"#How-DNS-works\" class=\"headerlink\" title=\"How DNS works\"></a><a href=\"https://youtu.be/vhfRArT11jc\">How DNS works</a></h2><p>Video: <strong><a href=\"https://youtu.be/vhfRArT11jc\">https://youtu.be/vhfRArT11jc</a></strong></p>\n<p><img src=\"/assets/img/system-design/how-dns-works.jpg\" alt=\"how-dns-works\"></p>\n<p>DNS lookup involves the following eight steps:</p>\n<ol>\n<li>A client types <a href=\"http://example.com/\">example.com</a> into a web browser, the query travels to the internet and is received by a DNS resolver.</li>\n<li>The resolver then recursively queries a DNS root nameserver.</li>\n<li>The root server responds to the resolver with the address of a Top Level Domain (TLD).</li>\n<li>The resolver then makes a request to the <code>.com</code> TLD.</li>\n<li>The TLD server then responds with the IP address of the domain‚Äôs nameserver, <a href=\"http://example.com/\">example.com</a>.</li>\n<li>Lastly, the recursive resolver sends a query to the domain‚Äôs nameserver.</li>\n<li>The IP address for <a href=\"http://example.com/\">example.com</a> is then returned to the resolver from the nameserver.</li>\n<li>The DNS resolver then responds to the web browser with the IP address of the domain requested initially.</li>\n</ol>\n<p>Once the IP address has been resolved, the client should be able to request content from the resolved IP address. For example, the resolved IP may return a webpage to be rendered in the browser</p>\n<h2 id=\"Server-types\"><a href=\"#Server-types\" class=\"headerlink\" title=\"Server types\"></a>Server types</h2><p>Now, let‚Äôs look at the four key groups of servers that make up the DNS infrastructure.</p>\n<h3 id=\"DNS-Resolver\"><a href=\"#DNS-Resolver\" class=\"headerlink\" title=\"DNS Resolver\"></a>DNS Resolver</h3><p>A DNS resolver (also known as a DNS recursive resolver) is the first stop in a DNS query. The recursive resolver acts as a middleman between a client and a DNS nameserver. After receiving a DNS query from a web client, a recursive resolver will either respond with cached data, or send a request to a root nameserver, followed by another request to a TLD nameserver, and then one last request to an authoritative nameserver. After receiving a response from the authoritative nameserver containing the requested IP address, the recursive resolver then sends a response to the client.</p>\n<h3 id=\"DNS-root-server\"><a href=\"#DNS-root-server\" class=\"headerlink\" title=\"DNS root server\"></a>DNS root server</h3><p>A root server accepts a recursive resolver‚Äôs query which includes a domain name, and the root nameserver responds by directing the recursive resolver to a TLD nameserver, based on the extension of that domain (<code>.com</code>, <code>.net</code>, <code>.org</code>, etc.). The root nameservers are overseen by a nonprofit called the <a href=\"https://www.icann.org/\">Internet Corporation for Assigned Names and Numbers (ICANN)</a>.</p>\n<p>There are 13 DNS root nameservers known to every recursive resolver. Note that while there are 13 root nameservers, that doesn‚Äôt mean that there are only 13 machines in the root nameserver system. There are 13 types of root nameservers, but there are multiple copies of each one all over the world, which use <a href=\"https://en.wikipedia.org/wiki/Anycast\">Anycast routing</a> to provide speedy responses.</p>\n<h3 id=\"TLD-nameserver\"><a href=\"#TLD-nameserver\" class=\"headerlink\" title=\"TLD nameserver\"></a>TLD nameserver</h3><p>A TLD nameserver maintains information for all the domain names that share a common domain extension, such as <code>.com</code>, <code>.net</code>, or whatever comes after the last dot in a URL.</p>\n<p>Management of TLD nameservers is handled by the <a href=\"https://www.iana.org/\">Internet Assigned Numbers Authority (IANA)</a>, which is a branch of <a href=\"https://www.icann.org/\">ICANN</a>. The IANA breaks up the TLD servers into two main groups:</p>\n<ul>\n<li><strong>Generic top-level domains</strong>: These are domains like <code>.com</code>, <code>.org</code>, <code>.net</code>, <code>.edu</code>, and <code>.gov</code>.</li>\n<li><strong>Country code top-level domains</strong>: These include any domains that are specific to a country or state. Examples include <code>.uk</code>, <code>.us</code>, <code>.ru</code>, and <code>.jp</code>.</li>\n</ul>\n<h3 id=\"Authoritative-DNS-server\"><a href=\"#Authoritative-DNS-server\" class=\"headerlink\" title=\"Authoritative DNS server\"></a>Authoritative DNS server</h3><p>The authoritative nameserver is usually the resolver‚Äôs last step in the journey for an IP address. The authoritative nameserver contains information specific to the domain name it serves (e.g. <a href=\"http://google.com/\">google.com</a>) and it can provide a recursive resolver with the IP address of that server found in the DNS A record, or if the domain has a CNAME record (alias) it will provide the recursive resolver with an alias domain, at which point the recursive resolver will have to perform a whole new DNS lookup to procure a record from an authoritative nameserver (often an A record containing an IP address). If it cannot find the domain, returns the NXDOMAIN message.</p>\n<h2 id=\"Query-Types\"><a href=\"#Query-Types\" class=\"headerlink\" title=\"Query Types\"></a><a href=\"https://youtu.be/BZISxpdl4lQ\">Query Types</a></h2><p><strong>Video:</strong>  <a href=\"https://youtu.be/BZISxpdl4lQ\">https://youtu.be/BZISxpdl4lQ</a> </p>\n<p>There are three types of queries in a DNS system:</p>\n<p><img src=\"/assets/img/system-design/Iterative-and-recursive-dns-query-diagram.jpg\" alt=\"dns-query-types\"></p>\n<h3 id=\"Recursive\"><a href=\"#Recursive\" class=\"headerlink\" title=\"Recursive\"></a>Recursive</h3><p>In a recursive query, a DNS client requires that a DNS server (typically a DNS recursive resolver) will respond to the client with either the requested resource record or an error message if the resolver can‚Äôt find the record.</p>\n<h3 id=\"Iterative\"><a href=\"#Iterative\" class=\"headerlink\" title=\"Iterative\"></a>Iterative</h3><p>In an iterative query, a DNS client provides a hostname, and the DNS Resolver returns the best answer it can. If the DNS resolver has the relevant DNS records in its cache, it returns them. If not, it refers the DNS client to the Root Server or another Authoritative Name Server that is nearest to the required DNS zone. The DNS client must then repeat the query directly against the DNS server it was referred.</p>\n<h3 id=\"Non-recursive\"><a href=\"#Non-recursive\" class=\"headerlink\" title=\"Non-recursive\"></a>Non-recursive</h3><p>A non-recursive query is a query in which the DNS Resolver already knows the answer. It either immediately returns a DNS record because it already stores it in a local cache, or queries a DNS Name Server which is authoritative for the record, meaning it definitely holds the correct IP for that hostname. In both cases, there is no need for additional rounds of queries (like in recursive or iterative queries). Rather, a response is immediately returned to the client.</p>\n<h2 id=\"Records-Types\"><a href=\"#Records-Types\" class=\"headerlink\" title=\"Records Types\"></a>Records Types</h2><p>DNS records (aka zone files) are instructions that live in authoritative DNS servers and provide information about a domain including what IP address is associated with that domain and how to handle requests for that domain.</p>\n<p>These records consist of a series of text files written in what is known as <em>DNS syntax</em>. DNS syntax is just a string of characters used as commands that tell the DNS server what to do. All DNS records also have a <em>‚ÄúTTL‚Äù</em>, which stands for time-to-live, and indicates how often a DNS server will refresh that record.</p>\n<p>There are more record types but for now, let‚Äôs look at some of the most commonly used ones:</p>\n<ul>\n<li><strong>A (Address record)</strong>: This is the record that holds the IP address of a domain.</li>\n<li><strong>AAAA (IP Version 6 Address record)</strong>: The record that contains the IPv6 address for a domain (as opposed to A records, which stores the IPv4 address).</li>\n<li><strong>CNAME (Canonical Name record)</strong>: Forwards one domain or subdomain to another domain, does NOT provide an IP address.</li>\n<li><strong>MX (Mail exchanger record)</strong>: Directs mail to an email server.</li>\n<li><strong>TXT (Text Record)</strong>: This record lets an admin store text notes in the record. These records are often used for email security.</li>\n<li><strong>NS (Name Server records)</strong>: Stores the name server for a DNS entry.</li>\n<li><strong>SOA (Start of Authority)</strong>: Stores admin information about a domain.</li>\n<li><strong>SRV (Service Location record)</strong>: Specifies a port for specific services.</li>\n<li><strong>PTR (Reverse-lookup Pointer records)</strong>: Provides a domain name in reverse lookups.</li>\n<li><strong>CERT (Certificate record)</strong>: Stores public key certificates.</li>\n</ul>\n<h2 id=\"Subdomains\"><a href=\"#Subdomains\" class=\"headerlink\" title=\"Subdomains\"></a>Subdomains</h2><p>A subdomain is an additional part of our main domain name. It is commonly used to logically separate a website into sections. We can create multiple subdomains or child domains on the main domain.</p>\n<p>For example, <code>blog.example.com</code> where <code>blog</code> is the subdomain, <code>example</code> is the primary domain and <code>.com</code> is the top-level domain (TLD). Similar examples can be <code>support.example.com</code> or <code>careers.example.com</code>.</p>\n<h2 id=\"DNS-Zones\"><a href=\"#DNS-Zones\" class=\"headerlink\" title=\"DNS Zones\"></a>DNS Zones</h2><p>A DNS zone is a distinct part of the domain namespace which is delegated to a legal entity like a person, organization, or company, who is responsible for maintaining the DNS zone. A DNS zone is also an administrative function, allowing for granular control of DNS components, such as authoritative name servers.</p>\n<h2 id=\"DNS-Caching\"><a href=\"#DNS-Caching\" class=\"headerlink\" title=\"DNS Caching\"></a>DNS Caching</h2><p>A DNS cache (sometimes called a DNS resolver cache) is a temporary database, maintained by a computer‚Äôs operating system, that contains records of all the recent visits and attempted visits to websites and other internet domains. In other words, a DNS cache is just a memory of recent DNS lookups that our computer can quickly refer to when it‚Äôs trying to figure out how to load a website.</p>\n<p>The Domain Name System implements a time-to-live (TTL) on every DNS record. TTL specifies the number of seconds the record can be cached by a DNS client or server. When the record is stored in a cache, whatever TTL value came with it gets stored as well. The server continues to update the TTL of the record stored in the cache, counting down every second. When it hits zero, the record is deleted or purged from the cache. At that point, if a query for that record is received, the DNS server has to start the resolution process.</p>\n<h2 id=\"Reverse-DNS\"><a href=\"#Reverse-DNS\" class=\"headerlink\" title=\"Reverse DNS\"></a>Reverse DNS</h2><p>A reverse DNS lookup is a DNS query for the domain name associated with a given IP address. This accomplishes the opposite of the more commonly used forward DNS lookup, in which the DNS system is queried to return an IP address. The process of reverse resolving an IP address uses PTR records. If the server does not have a PTR record, it cannot resolve a reverse lookup.</p>\n<p>Reverse lookups are commonly used by email servers. Email servers check and see if an email message came from a valid server before bringing it onto their network. Many email servers will reject messages from any server that does not support reverse lookups or from a server that is highly unlikely to be legitimate.</p>\n<p><em>Note: Reverse DNS lookups are not universally adopted as they are not critical to the normal function of the internet.</em></p>\n<h2 id=\"Examples\"><a href=\"#Examples\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>These are some widely used managed DNS solutions:</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/route53\">Route53</a></li>\n<li><a href=\"https://www.cloudflare.com/dns\">Cloudflare DNS</a></li>\n<li><a href=\"https://cloud.google.com/dns\">Google Cloud DNS</a></li>\n<li><a href=\"https://azure.microsoft.com/en-in/services/dns\">Azure DNS</a></li>\n<li><a href=\"https://ns1.com/products/managed-dns\">NS1</a></li>\n</ul>\n<h1 id=\"Load-Balancing\"><a href=\"#Load-Balancing\" class=\"headerlink\" title=\"Load Balancing\"></a>Load Balancing</h1><p>Load balancing lets us distribute incoming network traffic across multiple resources ensuring high availability and reliability by sending requests only to resources that are online. This provides the flexibility to add or subtract resources as demand dictates.</p>\n<p><img src=\"/assets/img/system-design/load-balancer.jpg\" alt=\"load-balancing\"></p>\n<p>For additional scalability and redundancy, we can try to load balance at each layer of our system:</p>\n<p><img src=\"/assets/img/system-design/load-balancer-layers.jpg\" alt=\"load-balancing-layers\"></p>\n<h2 id=\"But-why\"><a href=\"#But-why\" class=\"headerlink\" title=\"But why?\"></a>But why?</h2><p>Modern high-traffic websites must serve hundreds of thousands, if not millions, of concurrent requests from users or clients. To cost-effectively scale to meet these high volumes, modern computing best practice generally requires adding more servers.</p>\n<p>A load balancer can sit in front of the servers and route client requests across all servers capable of fulfilling those requests in a manner that maximizes speed and capacity utilization. This ensures that no single server is overworked, which could degrade performance. If a single server goes down, the load balancer redirects traffic to the remaining online servers. When a new server is added to the server group, the load balancer automatically starts sending requests to it.</p>\n<h2 id=\"Workload-distribution\"><a href=\"#Workload-distribution\" class=\"headerlink\" title=\"Workload distribution\"></a>Workload distribution</h2><p>This is the core functionality provided by a load balancer and has several common variations:</p>\n<ul>\n<li><strong>Host-based</strong>: Distributes requests based on the requested hostname.</li>\n<li><strong>Path-based</strong>: Using the entire URL to distribute requests as opposed to just the hostname.</li>\n<li><strong>Content-based</strong>: Inspects the message content of a request. This allows distribution based on content such as the value of a parameter.</li>\n</ul>\n<h2 id=\"Layers-1\"><a href=\"#Layers-1\" class=\"headerlink\" title=\"Layers\"></a>Layers</h2><p>Generally speaking, load balancers operate at one of the two levels:</p>\n<h3 id=\"Network-layer\"><a href=\"#Network-layer\" class=\"headerlink\" title=\"Network layer\"></a>Network layer</h3><p>This is the load balancer that works at the network‚Äôs transport layer, also known as layer 4. This performs routing based on networking information such as IP addresses and is not able to perform content-based routing. These are often dedicated hardware devices that can operate at high speed.</p>\n<h3 id=\"Application-layer\"><a href=\"#Application-layer\" class=\"headerlink\" title=\"Application layer\"></a>Application layer</h3><p>This is the load balancer that operates at the application layer, also known as layer 7. Load balancers can read requests in their entirety and perform content-based routing. This allows the management of load based on a full understanding of traffic.</p>\n<h2 id=\"Types-1\"><a href=\"#Types-1\" class=\"headerlink\" title=\"Types\"></a>Types</h2><p>Let‚Äôs look at different types of load balancers:</p>\n<h3 id=\"Software\"><a href=\"#Software\" class=\"headerlink\" title=\"Software\"></a>Software</h3><p>Software load balancers usually are easier to deploy than hardware versions. They also tend to be more cost-effective and flexible, and they are used in conjunction with software development environments. The software approach gives us the flexibility of configuring the load balancer to our environment‚Äôs specific needs. The boost in flexibility may come at the cost of having to do more work to set up the load balancer. Compared to hardware versions, which offer more of a closed-box approach, software balancers give us more freedom to make changes and upgrades.</p>\n<p>Software load balancers are widely used and are available either as installable solutions that require configuration and management or as a managed cloud service.</p>\n<h3 id=\"Hardware\"><a href=\"#Hardware\" class=\"headerlink\" title=\"Hardware\"></a>Hardware</h3><p>As the name implies, a hardware load balancer relies on physical, on-premises hardware to distribute application and network traffic. These devices can handle a large volume of traffic but often carry a hefty price tag and are fairly limited in terms of flexibility.</p>\n<p>Hardware load balancers include proprietary firmware that requires maintenance and updates as new versions and security patches are released.</p>\n<h3 id=\"DNS\"><a href=\"#DNS\" class=\"headerlink\" title=\"DNS\"></a>DNS</h3><p>DNS load balancing is the practice of configuring a domain in the Domain Name System (DNS) such that client requests to the domain are distributed across a group of server machines.</p>\n<p>Unfortunately, DNS load balancing has inherent problems limiting its reliability and efficiency. Most significantly, DNS does not check for server and network outages, or errors. It always returns the same set of IP addresses for a domain even if servers are down or inaccessible.</p>\n<h2 id=\"Routing-Algorithms\"><a href=\"#Routing-Algorithms\" class=\"headerlink\" title=\"Routing Algorithms\"></a>Routing Algorithms</h2><p>Now, let‚Äôs discuss commonly used routing algorithms:</p>\n<ul>\n<li><strong>Round-robin</strong>: Requests are distributed to application servers in rotation.</li>\n<li><strong>Weighted Round-robin</strong>: Builds on the simple Round-robin technique to account for differing server characteristics such as compute and traffic handling capacity using weights that can be assigned via DNS records by the administrator.</li>\n<li><strong>Least Connections</strong>: A new request is sent to the server with the fewest current connections to clients. The relative computing capacity of each server is factored into determining which one has the least connections.</li>\n<li><strong>Least Response Time</strong>: Sends requests to the server selected by a formula that combines the fastest response time and fewest active connections.</li>\n<li><strong>Least Bandwidth</strong>: This method measures traffic in megabits per second (Mbps), sending client requests to the server with the least Mbps of traffic.</li>\n<li><strong>Hashing</strong>: Distributes requests based on a key we define, such as the client IP address or the request URL.</li>\n</ul>\n<h2 id=\"Advantages\"><a href=\"#Advantages\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Load balancing also plays a key role in preventing downtime, other advantages of load balancing include the following:</p>\n<ul>\n<li>Scalability</li>\n<li>Redundancy</li>\n<li>Flexibility</li>\n<li>Efficiency</li>\n</ul>\n<h2 id=\"Redundant-load-balancers\"><a href=\"#Redundant-load-balancers\" class=\"headerlink\" title=\"Redundant load balancers\"></a>Redundant load balancers</h2><p>As you must‚Äôve already guessed, the load balancer itself can be a single point of failure. To overcome this, a second or <code>N</code> number of load balancers can be used in a cluster mode.</p>\n<p>And, if there‚Äôs a failure detection and the <em>active</em> load balancer fails, another <em>passive</em> load balancer can take over which will make our system more fault-tolerant.</p>\n<p><img src=\"/assets/img/system-design/redundant-load-balancer.jpg\" alt=\"redundant-load-balancing\"></p>\n<h2 id=\"Features\"><a href=\"#Features\" class=\"headerlink\" title=\"Features\"></a>Features</h2><p>Here are some commonly desired features of load balancers:</p>\n<ul>\n<li><strong>Autoscaling</strong>: Starting up and shutting down resources in response to demand conditions.</li>\n<li><strong>Sticky sessions</strong>: The ability to assign the same user or device to the same resource in order to maintain the session state on the resource.</li>\n<li><strong>Healthchecks</strong>: The ability to determine if a resource is down or performing poorly in order to remove the resource from the load balancing pool.</li>\n<li><strong>Persistence connections</strong>: Allowing a server to open a persistent connection with a client such as a WebSocket.</li>\n<li><strong>Encryption</strong>: Handling encrypted connections such as TLS and SSL.</li>\n<li><strong>Certificates</strong>: Presenting certificates to a client and authentication of client certificates.</li>\n<li><strong>Compression</strong>: Compression of responses.</li>\n<li><strong>Caching</strong>: An application-layer load balancer may offer the ability to cache responses.</li>\n<li><strong>Logging</strong>: Logging of request and response metadata can serve as an important audit trail or source for analytics data.</li>\n<li><strong>Request tracing</strong>: Assigning each request a unique id for the purposes of logging, monitoring, and troubleshooting.</li>\n<li><strong>Redirects</strong>: The ability to redirect an incoming request based on factors such as the requested path.</li>\n<li><strong>Fixed response</strong>: Returning a static response for a request such as an error message.</li>\n</ul>\n<h2 id=\"Examples-1\"><a href=\"#Examples-1\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Following are some of the load balancing solutions commonly used in the industry:</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/elasticloadbalancing\">Amazon Elastic Load Balancing</a></li>\n<li><a href=\"https://azure.microsoft.com/en-in/services/load-balancer\">Azure Load Balancing</a></li>\n<li><a href=\"https://cloud.google.com/load-balancing\">GCP Load Balancing</a></li>\n<li><a href=\"https://www.digitalocean.com/products/load-balancer\">DigitalOcean Load Balancer</a></li>\n<li><a href=\"https://www.nginx.com/\">Nginx</a></li>\n<li><a href=\"http://www.haproxy.org/\">HAProxy</a></li>\n</ul>\n<h1 id=\"Clustering\"><a href=\"#Clustering\" class=\"headerlink\" title=\"Clustering\"></a>Clustering</h1><p>At a high level, a computer cluster is a group of two or more computers, or nodes, that run in parallel to achieve a common goal. This allows workloads consisting of a high number of individual, parallelizable tasks to be distributed among the nodes in the cluster. As a result, these tasks can leverage the combined memory and processing power of each computer to increase overall performance.</p>\n<p>To build a computer cluster, the individual nodes should be connected to a network to enable internode communication. The software can then be used to join the nodes together and form a cluster. It may have a shared storage device and&#x2F;or local storage on each node.</p>\n<p><img src=\"/assets/img/system-design/cluster.jpg\" alt=\"cluster\"></p>\n<p>Typically, at least one node is designated as the leader node and acts as the entry point to the cluster. The leader node may be responsible for delegating incoming work to the other nodes and, if necessary, aggregating the results and returning a response to the user.</p>\n<p>Ideally, a cluster functions as if it were a single system. A user accessing the cluster should not need to know whether the system is a cluster or an individual machine. Furthermore, a cluster should be designed to minimize latency and prevent bottlenecks in node-to-node communication.</p>\n<h2 id=\"Types-2\"><a href=\"#Types-2\" class=\"headerlink\" title=\"Types\"></a>Types</h2><p>Computer clusters can generally be categorized into three types:</p>\n<ul>\n<li>Highly available or fail-over</li>\n<li>Load balancing</li>\n<li>High-performance computing</li>\n</ul>\n<h2 id=\"Configurations\"><a href=\"#Configurations\" class=\"headerlink\" title=\"Configurations\"></a>Configurations</h2><p>The two most commonly used high availability (HA) clustering configurations are active-active and active-passive.</p>\n<h3 id=\"Active-Active\"><a href=\"#Active-Active\" class=\"headerlink\" title=\"Active-Active\"></a>Active-Active</h3><p><img src=\"/assets/img/system-design/active-active.jpg\" alt=\"active-active\"></p>\n<p>An active-active cluster is typically made up of at least two nodes, both actively running the same kind of service simultaneously. The main purpose of an active-active cluster is to achieve load balancing. A load balancer distributes workloads across all nodes to prevent any single node from getting overloaded. Because there are more nodes available to serve, there will also be an improvement in throughput and response times.</p>\n<h3 id=\"Active-Passive\"><a href=\"#Active-Passive\" class=\"headerlink\" title=\"Active-Passive\"></a>Active-Passive</h3><p><img src=\"/assets/img/system-design/active-passive.jpg\" alt=\"active-passive\"></p>\n<p>Like the active-active cluster configuration, an active-passive cluster also consists of at least two nodes. However, as the name <em>active-passive</em> implies, not all nodes are going to be active. For example, in the case of two nodes, if the first node is already active, then the second node must be passive or on standby.</p>\n<h2 id=\"Advantages-1\"><a href=\"#Advantages-1\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Four key advantages of cluster computing are as follows:</p>\n<ul>\n<li>High availability</li>\n<li>Scalability</li>\n<li>Performance</li>\n<li>Cost-effective</li>\n</ul>\n<h2 id=\"Load-balancing-vs-Clustering\"><a href=\"#Load-balancing-vs-Clustering\" class=\"headerlink\" title=\"Load balancing vs Clustering\"></a>Load balancing vs Clustering</h2><p>Load balancing shares some common traits with clustering, but they are different processes. Clustering provides redundancy and boosts capacity and availability. Servers in a cluster are aware of each other and work together toward a common purpose. But with load balancing, servers are not aware of each other. Instead, they react to the requests they receive from the load balancer.</p>\n<p>We can employ load balancing in conjunction with clustering but it also is applicable in cases involving independent servers that share a common purpose such as to run a website, business application, web service, or some other IT resource.</p>\n<h2 id=\"Challenges\"><a href=\"#Challenges\" class=\"headerlink\" title=\"Challenges\"></a>Challenges</h2><p>The most obvious challenge clustering presents is the increased complexity of installation and maintenance. An operating system, the application, and its dependencies must each be installed and updated on every node.</p>\n<p>This becomes even more complicated if the nodes in the cluster are not homogeneous. Resource utilization for each node must also be closely monitored, and logs should be aggregated to ensure that the software is behaving correctly.</p>\n<p>Additionally, storage becomes more difficult to manage, a shared storage device must prevent nodes from overwriting one another and distributed data stores have to be kept in sync.</p>\n<h2 id=\"Examples-2\"><a href=\"#Examples-2\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Clustering is commonly used in the industry, and often many technologies offer some sort of clustering mode. For example:</p>\n<ul>\n<li>Containers (eg. <a href=\"https://kubernetes.io/\">Kubernetes</a>, <a href=\"https://aws.amazon.com/ecs\">Amazon ECS</a>)</li>\n<li>Databases (eg. <a href=\"https://cassandra.apache.org/_/index.html\">Cassandra</a>, <a href=\"https://www.mongodb.com/\">MongoDB</a>)</li>\n<li>Cache (eg. <a href=\"https://redis.io/docs/manual/scaling\">Redis</a>)</li>\n</ul>\n<h1 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"Caching\"></a>Caching</h1><p><em>‚ÄúThere are only two hard things in Computer Science: cache invalidation and naming things.‚Äù - Phil Karlton</em></p>\n<p><img src=\"/assets/img/system-design/caching.jpg\" alt=\"caching\"></p>\n<p>A cache‚Äôs primary purpose is to increase data retrieval performance by reducing the need to access the underlying slower storage layer. Trading off capacity for speed, a cache typically stores a subset of data transiently, in contrast to databases whose data is usually complete and durable.</p>\n<p>Caches take advantage of the locality of reference principle <em>‚Äúrecently requested data is likely to be requested again‚Äù.</em></p>\n<h2 id=\"Caching-and-Memory\"><a href=\"#Caching-and-Memory\" class=\"headerlink\" title=\"Caching and Memory\"></a>Caching and Memory</h2><p>Similar to a computer‚Äôs memory, a cache is a compact, fast-performing memory that stores data in a hierarchy of levels, starting at level one, and progressing from there sequentially. They are labeled as L1, L2, L3, and so on. A cache also gets written if requested, such as when there has been an update and new content needs to be saved to the cache, replacing the older content that was saved.</p>\n<p>No matter whether the cache is read or written, it‚Äôs done one block at a time. Each block also has a tag that includes the location where the data was stored in the cache. When data is requested from the cache, a search occurs through the tags to find the specific content that‚Äôs needed in level one (L1) of the memory. If the correct data isn‚Äôt found, more searches are conducted in L2.</p>\n<p>If the data isn‚Äôt found there, searches are continued in L3, then L4, and so on until it has been found, then, it‚Äôs read and loaded. If the data isn‚Äôt found in the cache at all, then it‚Äôs written into it for quick retrieval the next time.</p>\n<h2 id=\"Cache-hit-and-Cache-miss\"><a href=\"#Cache-hit-and-Cache-miss\" class=\"headerlink\" title=\"Cache hit and Cache miss\"></a>Cache hit and Cache miss</h2><h3 id=\"Cache-hit\"><a href=\"#Cache-hit\" class=\"headerlink\" title=\"Cache hit\"></a>Cache hit</h3><p>A cache hit describes the situation where content is successfully served from the cache. The tags are searched in the memory rapidly, and when the data is found and read, it‚Äôs considered a cache hit.</p>\n<p><strong>Cold, Warm, and Hot Caches</strong></p>\n<p>A cache hit can also be described as cold, warm, or hot. In each of these, the speed at which the data is read is described.</p>\n<p>A hot cache is an instance where data was read from the memory at the <em>fastest</em> possible rate. This happens when the data is retrieved from L1.</p>\n<p>A cold cache is the <em>slowest</em> possible rate for data to be read, though, it‚Äôs still successful so it‚Äôs still considered a cache hit. The data is just found lower in the memory hierarchy such as in L3, or lower.</p>\n<p>A warm cache is used to describe data that‚Äôs found in L2 or L3. It‚Äôs not as fast as a hot cache, but it‚Äôs still faster than a cold cache. Generally, calling a cache warm is used to express that it‚Äôs slower and closer to a cold cache than a hot one.</p>\n<h3 id=\"Cache-miss\"><a href=\"#Cache-miss\" class=\"headerlink\" title=\"Cache miss\"></a>Cache miss</h3><p>A cache miss refers to the instance when the memory is searched and the data isn‚Äôt found. When this happens, the content is transferred and written into the cache.</p>\n<h2 id=\"Cache-Invalidation\"><a href=\"#Cache-Invalidation\" class=\"headerlink\" title=\"Cache Invalidation\"></a>Cache Invalidation</h2><p>Cache invalidation is a process where the computer system declares the cache entries as invalid and removes or replaces them. If the data is modified, it should be invalidated in the cache, if not, this can cause inconsistent application behavior. There are three kinds of caching systems:</p>\n<h3 id=\"Write-through-cache\"><a href=\"#Write-through-cache\" class=\"headerlink\" title=\"Write-through cache\"></a>Write-through cache</h3><p><img src=\"/assets/img/system-design/write-through-cache.jpg\" alt=\"write-through-cache\"></p>\n<p>Data is written into the cache and the corresponding database simultaneously.</p>\n<p><strong>Pro</strong>: Fast retrieval, complete data consistency between cache and storage.</p>\n<p><strong>Con</strong>: Higher latency for write operations.</p>\n<h3 id=\"Write-around-cache\"><a href=\"#Write-around-cache\" class=\"headerlink\" title=\"Write-around cache\"></a>Write-around cache</h3><p><img src=\"/assets/img/system-design/write-around-cache.jpg\" alt=\"write-around-cache\"></p>\n<p>Where write directly goes to the database or permanent storage, bypassing the cache.</p>\n<p><strong>Pro</strong>: This may reduce latency.</p>\n<p><strong>Con</strong>: It increases cache misses because the cache system has to read the information from the database in case of a cache miss. As a result, this can lead to higher read latency in the case of applications that write and re-read the information quickly. Read happen from slower back-end storage and experiences higher latency.</p>\n<h3 id=\"Write-back-cache\"><a href=\"#Write-back-cache\" class=\"headerlink\" title=\"Write-back cache\"></a>Write-back cache</h3><p><img src=\"/assets/img/system-design/write-back-cache.jpg\" alt=\"write-back-cache\"></p>\n<p>Where the write is only done to the caching layer and the write is confirmed as soon as the write to the cache completes. The cache then asynchronously syncs this write to the database.</p>\n<p><strong>Pro</strong>: This would lead to reduced latency and high throughput for write-intensive applications.</p>\n<p><strong>Con</strong>: There is a risk of data loss in case the caching layer crashes. We can improve this by having more than one replica acknowledging the write in the cache.</p>\n<h2 id=\"Eviction-policies\"><a href=\"#Eviction-policies\" class=\"headerlink\" title=\"Eviction policies\"></a>Eviction policies</h2><p>Following are some of the most common cache eviction policies:</p>\n<ul>\n<li><strong>First In First Out (FIFO)</strong>: The cache evicts the first block accessed first without any regard to how often or how many times it was accessed before.</li>\n<li><strong>Last In First Out (LIFO)</strong>: The cache evicts the block accessed most recently first without any regard to how often or how many times it was accessed before.</li>\n<li><strong>Least Recently Used (LRU)</strong>: Discards the least recently used items first.</li>\n<li><strong>Most Recently Used (MRU)</strong>: Discards, in contrast to LRU, the most recently used items first.</li>\n<li><strong>Least Frequently Used (LFU)</strong>: Counts how often an item is needed. Those that are used least often are discarded first.</li>\n<li><strong>Random Replacement (RR)</strong>: Randomly selects a candidate item and discards it to make space when necessary.</li>\n</ul>\n<h2 id=\"Distributed-Cache\"><a href=\"#Distributed-Cache\" class=\"headerlink\" title=\"Distributed Cache\"></a>Distributed Cache</h2><p><img src=\"/assets/img/system-design/distributed-cache.jpg\" alt=\"distributed-cache\"></p>\n<p>A distributed cache is a system that pools together the random-access memory (RAM) of multiple networked computers into a single in-memory data store used as a data cache to provide fast access to data. While most caches are traditionally in one physical server or hardware component, a distributed cache can grow beyond the memory limits of a single computer by linking together multiple computers.</p>\n<h2 id=\"Global-Cache\"><a href=\"#Global-Cache\" class=\"headerlink\" title=\"Global Cache\"></a>Global Cache</h2><p><img src=\"/assets/img/system-design/global-cache.jpg\" alt=\"global-cache\"></p>\n<p>As the name suggests, we will have a single shared cache that all the application nodes will use. When the requested data is not found in the global cache, it‚Äôs the responsibility of the cache to find out the missing piece of data from the underlying data store.</p>\n<h2 id=\"Use-cases\"><a href=\"#Use-cases\" class=\"headerlink\" title=\"Use cases\"></a>Use cases</h2><p>Caching can have many real-world use cases such as:</p>\n<ul>\n<li>Database Caching</li>\n<li>Content Delivery Network (CDN)</li>\n<li>Domain Name System (DNS) Caching</li>\n<li>API Caching</li>\n</ul>\n<p><strong>When not to use caching?</strong></p>\n<p>Let‚Äôs also look at some scenarios where we should not use cache:</p>\n<ul>\n<li>Caching isn‚Äôt helpful when it takes just as long to access the cache as it does to access the primary data store.</li>\n<li>Caching doesn‚Äôt work as well when requests have low repetition (higher randomness), because caching performance comes from repeated memory access patterns.</li>\n<li>Caching isn‚Äôt helpful when the data changes frequently, as the cached version gets out of sync, and the primary data store must be accessed every time.</li>\n</ul>\n<p><em>It‚Äôs important to note that a cache should not be used as permanent data storage. They are almost always implemented in volatile memory because it is faster, and thus should be considered transient.</em></p>\n<h2 id=\"Advantages-2\"><a href=\"#Advantages-2\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Below are some advantages of caching:</p>\n<ul>\n<li>Improves performance</li>\n<li>Reduce latency</li>\n<li>Reduce load on the database</li>\n<li>Reduce network cost</li>\n<li>Increase Read Throughput</li>\n</ul>\n<h2 id=\"Examples-3\"><a href=\"#Examples-3\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Here are some commonly used technologies for caching:</p>\n<ul>\n<li><a href=\"https://redis.io/\">Redis</a></li>\n<li><a href=\"https://memcached.org/\">Memcached</a></li>\n<li><a href=\"https://aws.amazon.com/elasticache\">Amazon Elasticache</a></li>\n<li><a href=\"https://aerospike.com/\">Aerospike</a></li>\n</ul>\n<h1 id=\"Content-Delivery-Network-CDN\"><a href=\"#Content-Delivery-Network-CDN\" class=\"headerlink\" title=\"Content Delivery Network (CDN)\"></a>Content Delivery Network (CDN)</h1><p>A content delivery network (CDN) is a geographically distributed group of servers that work together to provide fast delivery of internet content. Generally, static files such as HTML&#x2F;CSS&#x2F;JS, photos, and videos are served from CDN.</p>\n<p><img src=\"/assets/img/system-design/cdn-map.jpg\" alt=\"cdn-map\"></p>\n<h2 id=\"Why-use-a-CDN\"><a href=\"#Why-use-a-CDN\" class=\"headerlink\" title=\"Why use a CDN?\"></a>Why use a CDN?</h2><p>Content Delivery Network (CDN) increases content availability and redundancy while reducing bandwidth costs and improving security. Serving content from CDNs can significantly improve performance as users receive content from data centers close to them and our servers do not have to serve requests that the CDN fulfills.</p>\n<h2 id=\"How-does-a-CDN-work\"><a href=\"#How-does-a-CDN-work\" class=\"headerlink\" title=\"How does a CDN work?\"></a>How does a CDN work?</h2><p><img src=\"/assets/img/system-design/cdn.jpg\" alt=\"cdn\"></p>\n<p>In a CDN, the origin server contains the original versions of the content while the edge servers are numerous and distributed across various locations around the world.</p>\n<p>To minimize the distance between the visitors and the website‚Äôs server, a CDN stores a cached version of its content in multiple geographical locations known as edge locations. Each edge location contains a number of caching servers responsible for content delivery to visitors within its proximity.</p>\n<p>Once the static assets are cached on all the CDN servers for a particular location, all subsequent website visitor requests for static assets will be delivered from these edge servers instead of the origin, thus reducing origin load and improving scalability.</p>\n<p>For example, when someone in the UK requests our website which might be hosted in the USA, they will be served from the closest edge location such as the London edge location. This is much quicker than having the visitor make a complete request to the origin server which will increase the latency.</p>\n<h2 id=\"Types-3\"><a href=\"#Types-3\" class=\"headerlink\" title=\"Types\"></a>Types</h2><p>CDNs are generally divided into two types:</p>\n<h3 id=\"Push-CDNs\"><a href=\"#Push-CDNs\" class=\"headerlink\" title=\"Push CDNs\"></a>Push CDNs</h3><p>Push CDNs receive new content whenever changes occur on the server. We take full responsibility for providing content, uploading directly to the CDN, and rewriting URLs to point to the CDN. We can configure when content expires and when it is updated. Content is uploaded only when it is new or changed, minimizing traffic, but maximizing storage.</p>\n<p>Sites with a small amount of traffic or sites with content that isn‚Äôt often updated work well with push CDNs. Content is placed on the CDNs once, instead of being re-pulled at regular intervals.</p>\n<h3 id=\"Pull-CDNs\"><a href=\"#Pull-CDNs\" class=\"headerlink\" title=\"Pull CDNs\"></a>Pull CDNs</h3><p>In a Pull CDN situation, the cache is updated based on request. When the client sends a request that requires static assets to be fetched from the CDN if the CDN doesn‚Äôt have it, then it will fetch the newly updated assets from the origin server and populate its cache with this new asset, and then send this new cached asset to the user.</p>\n<p>Contrary to the Push CDN, this requires less maintenance because cache updates on CDN nodes are performed based on requests from the client to the origin server. Sites with heavy traffic work well with pull CDNs, as traffic is spread out more evenly with only recently-requested content remaining on the CDN.</p>\n<h2 id=\"Disadvantages\"><a href=\"#Disadvantages\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><p>As we all know good things come with extra costs, so let‚Äôs discuss some disadvantages of CDNs:</p>\n<ul>\n<li><strong>Extra charges</strong>: It can be expensive to use a CDN, especially for high-traffic services.</li>\n<li><strong>Restrictions</strong>: Some organizations and countries have blocked the domains or IP addresses of popular CDNs.</li>\n<li><strong>Location</strong>: If most of our audience is located in a country where the CDN has no servers, the data on our website may have to travel further than without using any CDN.</li>\n</ul>\n<h2 id=\"Examples-4\"><a href=\"#Examples-4\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Here are some widely used CDNs:</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/cloudfront\">Amazon CloudFront</a></li>\n<li><a href=\"https://cloud.google.com/cdn\">Google Cloud CDN</a></li>\n<li><a href=\"https://www.cloudflare.com/cdn\">Cloudflare CDN</a></li>\n<li><a href=\"https://www.fastly.com/products/cdn\">Fastly</a></li>\n</ul>\n<h1 id=\"Proxy\"><a href=\"#Proxy\" class=\"headerlink\" title=\"Proxy\"></a>Proxy</h1><p>A proxy server is an intermediary piece of hardware&#x2F;software sitting between the client and the backend server. It receives requests from clients and relays them to the origin servers. Typically, proxies are used to filter requests, log requests, or sometimes transform requests (by adding&#x2F;removing headers, encrypting&#x2F;decrypting, or compression).</p>\n<h2 id=\"Types-4\"><a href=\"#Types-4\" class=\"headerlink\" title=\"Types\"></a>Types</h2><p>There are two types of proxies:</p>\n<h3 id=\"Forward-Proxy\"><a href=\"#Forward-Proxy\" class=\"headerlink\" title=\"Forward Proxy\"></a>Forward Proxy</h3><p>A forward proxy, often called a proxy, proxy server, or web proxy is a server that sits in front of a group of client machines. When those computers make requests to sites and services on the internet, the proxy server intercepts those requests and then communicates with web servers on behalf of those clients, like a middleman.</p>\n<p><img src=\"/assets/img/system-design/forward-proxy.jpg\" alt=\"forward-proxy\"></p>\n<p><strong>Advantages</strong></p>\n<p>Here are some advantages of a forward proxy:</p>\n<ul>\n<li>Block access to certain content</li>\n<li>Allows access to <a href=\"https://en.wikipedia.org/wiki/Geo-blocking\">geo-restricted</a> content</li>\n<li>Provides anonymity</li>\n<li>Avoid other browsing restrictions</li>\n</ul>\n<p>Although proxies provide the benefits of anonymity, they can still track our personal information. Setup and maintenance of a proxy server can be costly and requires configurations.</p>\n<h3 id=\"Reverse-Proxy\"><a href=\"#Reverse-Proxy\" class=\"headerlink\" title=\"Reverse Proxy\"></a>Reverse Proxy</h3><p>A reverse proxy is a server that sits in front of one or more web servers, intercepting requests from clients. When clients send requests to the origin server of a website, those requests are intercepted by the reverse proxy server.</p>\n<p>The difference between a forward and reverse proxy is subtle but important. A simplified way to sum it up would be to say that a forward proxy sits in front of a client and ensures that no origin server ever communicates directly with that specific client. On the other hand, a reverse proxy sits in front of an origin server and ensures that no client ever communicates directly with that origin server.</p>\n<p><img src=\"/assets/img/system-design/reverse-proxy.jpg\" alt=\"reverse-proxy\"></p>\n<p>Introducing reverse proxy results in increased complexity. A single reverse proxy is a single point of failure, configuring multiple reverse proxies (i.e. a failover) further increases complexity.</p>\n<p><strong>Advantages</strong></p>\n<p>Here are some advantages of using a reverse proxy:</p>\n<ul>\n<li>Improved security</li>\n<li>Caching</li>\n<li>SSL encryption</li>\n<li>Load balancing</li>\n<li>Scalability and flexibility</li>\n</ul>\n<h2 id=\"Load-balancer-vs-Reverse-Proxy\"><a href=\"#Load-balancer-vs-Reverse-Proxy\" class=\"headerlink\" title=\"Load balancer vs Reverse Proxy\"></a>Load balancer vs Reverse Proxy</h2><p>Wait, isn‚Äôt reverse proxy similar to a load balancer? Well, no as a load balancer is useful when we have multiple servers. Often, load balancers route traffic to a set of servers serving the same function, while, reverse proxies can be useful even with just one web server or application server. A reverse proxy can also act as a load balancer but not the other way around.</p>\n<h2 id=\"Examples-5\"><a href=\"#Examples-5\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Below are some commonly used proxy technologies:</p>\n<ul>\n<li><a href=\"https://www.nginx.com/\">Nginx</a></li>\n<li><a href=\"http://www.haproxy.org/\">HAProxy</a></li>\n<li><a href=\"https://doc.traefik.io/traefik\">Traefik</a></li>\n<li><a href=\"https://www.envoyproxy.io/\">Envoy</a></li>\n</ul>\n<h1 id=\"Availability\"><a href=\"#Availability\" class=\"headerlink\" title=\"Availability\"></a>Availability</h1><p>Availability is the time a system remains operational to perform its required function in a specific period. It is a simple measure of the percentage of time that a system, service, or machine remains operational under normal conditions.</p>\n<h2 id=\"The-Nine‚Äôs-of-availability\"><a href=\"#The-Nine‚Äôs-of-availability\" class=\"headerlink\" title=\"The Nine‚Äôs of availability\"></a>The Nine‚Äôs of availability</h2><p>Availability is often quantified by uptime (or downtime) as a percentage of time the service is available. It is generally measured in the number of 9s.</p>\n<p>$$<br>Availability &#x3D; \\frac{Uptime}{(Uptime + Downtime)}<br>$$</p>\n<p>If availability is 99.00% available, it is said to have ‚Äú2 nines‚Äù of availability, and if it is 99.9%, it is called ‚Äú3 nines‚Äù, and so on.</p>\n<table>\n<thead>\n<tr>\n<th>Availability (Percent)</th>\n<th>Downtime (Year)</th>\n<th>Downtime (Month)</th>\n<th>Downtime (Week)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>90% (one nine)</td>\n<td>36.53 days</td>\n<td>72 hours</td>\n<td>16.8 hours</td>\n</tr>\n<tr>\n<td>99% (two nines)</td>\n<td>3.65 days</td>\n<td>7.20 hours</td>\n<td>1.68 hours</td>\n</tr>\n<tr>\n<td>99.9% (three nines)</td>\n<td>8.77 hours</td>\n<td>43.8 minutes</td>\n<td>10.1 minutes</td>\n</tr>\n<tr>\n<td>99.99% (four nines)</td>\n<td>52.6 minutes</td>\n<td>4.32 minutes</td>\n<td>1.01 minutes</td>\n</tr>\n<tr>\n<td>99.999% (five nines)</td>\n<td>5.25 minutes</td>\n<td>25.9 seconds</td>\n<td>6.05 seconds</td>\n</tr>\n<tr>\n<td>99.9999% (six nines)</td>\n<td>31.56 seconds</td>\n<td>2.59 seconds</td>\n<td>604.8 milliseconds</td>\n</tr>\n<tr>\n<td>99.99999% (seven nines)</td>\n<td>3.15 seconds</td>\n<td>263 milliseconds</td>\n<td>60.5 milliseconds</td>\n</tr>\n<tr>\n<td>99.999999% (eight nines)</td>\n<td>315.6 milliseconds</td>\n<td>26.3 milliseconds</td>\n<td>6 milliseconds</td>\n</tr>\n<tr>\n<td>99.9999999% (nine nines)</td>\n<td>31.6 milliseconds</td>\n<td>2.6 milliseconds</td>\n<td>0.6 milliseconds</td>\n</tr>\n</tbody></table>\n<h2 id=\"Availability-in-Sequence-vs-Parallel\"><a href=\"#Availability-in-Sequence-vs-Parallel\" class=\"headerlink\" title=\"Availability in Sequence vs Parallel\"></a>Availability in Sequence vs Parallel</h2><p>If a service consists of multiple components prone to failure, the service‚Äôs overall availability depends on whether the components are in sequence or in parallel.</p>\n<h3 id=\"Sequence\"><a href=\"#Sequence\" class=\"headerlink\" title=\"Sequence\"></a>Sequence</h3><p>Overall availability decreases when two components are in sequence.</p>\n<p>$$<br>Availability \\space (Total) &#x3D; Availability \\space (Foo) * Availability \\space (Bar)<br>$$</p>\n<p>For example, if both <code>Foo</code> and <code>Bar</code> each had 99.9% availability, their total availability in sequence would be 99.8%.</p>\n<h3 id=\"Parallel\"><a href=\"#Parallel\" class=\"headerlink\" title=\"Parallel\"></a>Parallel</h3><p>Overall availability increases when two components are in parallel.</p>\n<p>$$<br>Availability \\space (Total) &#x3D; 1 - (1 - Availability \\space (Foo)) * (1 - Availability \\space (Bar))<br>$$</p>\n<p>For example, if both <code>Foo</code> and <code>Bar</code> each had 99.9% availability, their total availability in parallel would be 99.9999%.</p>\n<h2 id=\"Availability-vs-Reliability\"><a href=\"#Availability-vs-Reliability\" class=\"headerlink\" title=\"Availability vs Reliability\"></a>Availability vs Reliability</h2><p>If a system is reliable, it is available. However, if it is available, it is not necessarily reliable. In other words, high reliability contributes to high availability, but it is possible to achieve high availability even with an unreliable system.</p>\n<h2 id=\"High-availability-vs-Fault-Tolerance\"><a href=\"#High-availability-vs-Fault-Tolerance\" class=\"headerlink\" title=\"High availability vs Fault Tolerance\"></a>High availability vs Fault Tolerance</h2><p>Both high availability and fault tolerance apply to methods for providing high uptime levels. However, they accomplish the objective differently.</p>\n<p>A fault-tolerant system has no service interruption but a significantly higher cost, while a highly available system has minimal service interruption. Fault-tolerance requires full hardware redundancy as if the main system fails, with no loss in uptime, another system should take over.</p>\n<h1 id=\"Scalability\"><a href=\"#Scalability\" class=\"headerlink\" title=\"Scalability\"></a>Scalability</h1><p>Scalability is the measure of how well a system responds to changes by adding or removing resources to meet demands.</p>\n<p><img src=\"/assets/img/system-design/scalability.jpg\" alt=\"scalability\"></p>\n<p>Let‚Äôs discuss different types of scaling:</p>\n<h2 id=\"Vertical-scaling\"><a href=\"#Vertical-scaling\" class=\"headerlink\" title=\"Vertical scaling\"></a>Vertical scaling</h2><p>Vertical scaling (also known as scaling up) expands a system‚Äôs scalability by adding more power to an existing machine. In other words, vertical scaling refers to improving an application‚Äôs capability via increasing hardware capacity.</p>\n<h3 id=\"Advantages-3\"><a href=\"#Advantages-3\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><ul>\n<li>Simple to implement</li>\n<li>Easier to manage</li>\n<li>Data consistent</li>\n</ul>\n<h3 id=\"Disadvantages-1\"><a href=\"#Disadvantages-1\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><ul>\n<li>Risk of high downtime</li>\n<li>Harder to upgrade</li>\n<li>Can be a single point of failure</li>\n</ul>\n<h2 id=\"Horizontal-scaling\"><a href=\"#Horizontal-scaling\" class=\"headerlink\" title=\"Horizontal scaling\"></a>Horizontal scaling</h2><p>Horizontal scaling (also known as scaling out) expands a system‚Äôs scale by adding more machines. It improves the performance of the server by adding more instances to the existing pool of servers, allowing the load to be distributed more evenly.</p>\n<h3 id=\"Advantages-4\"><a href=\"#Advantages-4\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><ul>\n<li>Increased redundancy</li>\n<li>Better fault tolerance</li>\n<li>Flexible and efficient</li>\n<li>Easier to upgrade</li>\n</ul>\n<h3 id=\"Disadvantages-2\"><a href=\"#Disadvantages-2\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><ul>\n<li>Increased complexity</li>\n<li>Data inconsistency</li>\n<li>Increased load on downstream services</li>\n</ul>\n<h1 id=\"Storage\"><a href=\"#Storage\" class=\"headerlink\" title=\"Storage\"></a>Storage</h1><p>Storage is a mechanism that enables a system to retain data, either temporarily or permanently. This topic is mostly skipped over in the context of system design, however, it is important to have a basic understanding of some common types of storage techniques that can help us fine-tune our storage components. Let‚Äôs discuss some important storage concepts:</p>\n<h2 id=\"RAID\"><a href=\"#RAID\" class=\"headerlink\" title=\"RAID\"></a>RAID</h2><p>RAID (Redundant Array of Independent Disks) is a way of storing the same data on multiple hard disks or solid-state drives (SSDs) to protect data in the case of a drive failure.</p>\n<p>There are different RAID levels, however, and not all have the goal of providing redundancy. Let‚Äôs discuss some commonly used RAID levels:</p>\n<ul>\n<li><strong>RAID 0</strong>: Also known as striping, data is split evenly across all the drives in the array.</li>\n<li><strong>RAID 1</strong>: Also known as mirroring, at least two drives contains the exact copy of a set of data. If a drive fails, others will still work.</li>\n<li><strong>RAID 5</strong>: Striping with parity. Requires the use of at least 3 drives, striping the data across multiple drives like RAID 0, but also has a parity distributed across the drives.</li>\n<li><strong>RAID 6</strong>: Striping with double parity. RAID 6 is like RAID 5, but the parity data are written to two drives.</li>\n<li><strong>RAID 10</strong>: Combines striping plus mirroring from RAID 0 and RAID 1. It provides security by mirroring all data on secondary drives while using striping across each set of drives to speed up data transfers.</li>\n</ul>\n<h3 id=\"Comparison\"><a href=\"#Comparison\" class=\"headerlink\" title=\"Comparison\"></a>Comparison</h3><p>Let‚Äôs compare all the features of different RAID levels:</p>\n<table>\n<thead>\n<tr>\n<th>Features</th>\n<th>RAID 0</th>\n<th>RAID 1</th>\n<th>RAID 5</th>\n<th>RAID 6</th>\n<th>RAID 10</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Description</td>\n<td>Striping</td>\n<td>Mirroring</td>\n<td>Striping with Parity</td>\n<td>Striping with double parity</td>\n<td>Striping and Mirroring</td>\n</tr>\n<tr>\n<td>Minimum Disks</td>\n<td>2</td>\n<td>2</td>\n<td>3</td>\n<td>4</td>\n<td>4</td>\n</tr>\n<tr>\n<td>Read Performance</td>\n<td>High</td>\n<td>High</td>\n<td>High</td>\n<td>High</td>\n<td>High</td>\n</tr>\n<tr>\n<td>Write Performance</td>\n<td>High</td>\n<td>Medium</td>\n<td>High</td>\n<td>High</td>\n<td>Medium</td>\n</tr>\n<tr>\n<td>Cost</td>\n<td>Low</td>\n<td>High</td>\n<td>Low</td>\n<td>Low</td>\n<td>High</td>\n</tr>\n<tr>\n<td>Fault Tolerance</td>\n<td>None</td>\n<td>Single-drive failure</td>\n<td>Single-drive failure</td>\n<td>Two-drive failure</td>\n<td>Up to one disk failure in each sub-array</td>\n</tr>\n<tr>\n<td>Capacity Utilization</td>\n<td>100%</td>\n<td>50%</td>\n<td>67%-94%</td>\n<td>50%-80%</td>\n<td>50%</td>\n</tr>\n</tbody></table>\n<h2 id=\"Volumes\"><a href=\"#Volumes\" class=\"headerlink\" title=\"Volumes\"></a>Volumes</h2><p>Volume is a fixed amount of storage on a disk or tape. The term volume is often used as a synonym for the storage itself, but it is possible for a single disk to contain more than one volume or a volume to span more than one disk.</p>\n<h2 id=\"File-storage\"><a href=\"#File-storage\" class=\"headerlink\" title=\"File storage\"></a>File storage</h2><p>File storage is a solution to store data as files and present it to its final users as a hierarchical directories structure. The main advantage is to provide a user-friendly solution to store and retrieve files. To locate a file in file storage, the complete path of the file is required. It is economical and easily structured and is usually found on hard drives, which means that they appear exactly the same for the user and on the hard drive.</p>\n<p><strong>Example</strong>: <a href=\"https://aws.amazon.com/efs\">Amazon EFS</a>, <a href=\"https://azure.microsoft.com/en-in/services/storage/files\">Azure files</a>, <a href=\"https://cloud.google.com/filestore\">Google Cloud Filestore</a>, etc.</p>\n<h2 id=\"Block-storage\"><a href=\"#Block-storage\" class=\"headerlink\" title=\"Block storage\"></a>Block storage</h2><p>Block storage divides data into blocks (chunks) and stores them as separate pieces. Each block of data is given a unique identifier, which allows a storage system to place the smaller pieces of data wherever it is most convenient.</p>\n<p>Block storage also decouples data from user environments, allowing that data to be spread across multiple environments. This creates multiple paths to the data and allows the user to retrieve it quickly. When a user or application requests data from a block storage system, the underlying storage system reassembles the data blocks and presents the data to the user or application</p>\n<p><strong>Example</strong>: <a href=\"https://aws.amazon.com/ebs\">Amazon EBS</a>.</p>\n<h2 id=\"Object-Storage\"><a href=\"#Object-Storage\" class=\"headerlink\" title=\"Object Storage\"></a>Object Storage</h2><p>Object storage, which is also known as object-based storage, breaks data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems.</p>\n<p><strong>Example</strong>: <a href=\"https://aws.amazon.com/s3\">Amazon S3</a>, <a href=\"https://azure.microsoft.com/en-in/services/storage/blobs\">Azure Blob Storage</a>, <a href=\"https://cloud.google.com/storage\">Google Cloud Storage</a>, etc.</p>\n<h2 id=\"NAS\"><a href=\"#NAS\" class=\"headerlink\" title=\"NAS\"></a>NAS</h2><p>A NAS (Network Attached Storage) is a storage device connected to a network that allows storage and retrieval of data from a central location for authorized network users. NAS devices are flexible, meaning that as we need additional storage, we can add to what we have. It‚Äôs faster, less expensive, and provides all the benefits of a public cloud on-site, giving us complete control.</p>\n<h2 id=\"HDFS\"><a href=\"#HDFS\" class=\"headerlink\" title=\"HDFS\"></a>HDFS</h2><p>The Hadoop Distributed File System (HDFS) is a distributed file system designed to run on commodity hardware. HDFS is highly fault-tolerant and is designed to be deployed on low-cost hardware. HDFS provides high throughput access to application data and is suitable for applications that have large data sets. It has many similarities with existing distributed file systems.</p>\n<p>HDFS is designed to reliably store very large files across machines in a large cluster. It stores each file as a sequence of blocks, all blocks in a file except the last block are the same size. The blocks of a file are replicated for fault tolerance.</p>\n<h1 id=\"Databases-and-DBMS\"><a href=\"#Databases-and-DBMS\" class=\"headerlink\" title=\"Databases and DBMS\"></a>Databases and DBMS</h1><h2 id=\"What-is-a-Database\"><a href=\"#What-is-a-Database\" class=\"headerlink\" title=\"What is a Database?\"></a>What is a Database?</h2><p>A database is an organized collection of structured information, or data, typically stored electronically in a computer system. A database is usually controlled by a Database Management System (DBMS). Together, the data and the DBMS, along with the applications that are associated with them, are referred to as a database system, often shortened to just database.</p>\n<h2 id=\"What-is-DBMS\"><a href=\"#What-is-DBMS\" class=\"headerlink\" title=\"What is DBMS?\"></a>What is DBMS?</h2><p>A database typically requires a comprehensive database software program known as a Database Management System (DBMS). A DBMS serves as an interface between the database and its end-users or programs, allowing users to retrieve, update, and manage how the information is organized and optimized. A DBMS also facilitates oversight and control of databases, enabling a variety of administrative operations such as performance monitoring, tuning, and backup and recovery.</p>\n<h2 id=\"Components\"><a href=\"#Components\" class=\"headerlink\" title=\"Components\"></a>Components</h2><p>Here are some common components found across different databases:</p>\n<h3 id=\"Schema\"><a href=\"#Schema\" class=\"headerlink\" title=\"Schema\"></a>Schema</h3><p>The role of a schema is to define the shape of a data structure, and specify what kinds of data can go where. Schemas can be strictly enforced across the entire database, loosely enforced on part of the database, or they might not exist at all.</p>\n<h3 id=\"Table\"><a href=\"#Table\" class=\"headerlink\" title=\"Table\"></a>Table</h3><p>Each table contains various columns just like in a spreadsheet. A table can have as meager as two columns and upwards of a hundred or more columns, depending upon the kind of information being put in the table.</p>\n<h3 id=\"Column\"><a href=\"#Column\" class=\"headerlink\" title=\"Column\"></a>Column</h3><p>A column contains a set of data values of a particular type, one value for each row of the database. A column may contain text values, numbers, enums, timestamps, etc.</p>\n<h3 id=\"Row\"><a href=\"#Row\" class=\"headerlink\" title=\"Row\"></a>Row</h3><p>Data in a table is recorded in rows. There can be thousands or millions of rows in a table having any particular information.</p>\n<h2 id=\"Types-5\"><a href=\"#Types-5\" class=\"headerlink\" title=\"Types\"></a>Types</h2><p><img src=\"/assets/img/system-design/database-types.jpg\" alt=\"database-types\"></p>\n<p>Below are different types of databases:</p>\n<ul>\n<li><strong><a href=\"https://karanpratapsingh.com/courses/system-design/sql-databases\">SQL</a></strong></li>\n<li><strong><a href=\"https://karanpratapsingh.com/courses/system-design/nosql-databases\">NoSQL</a></strong><ul>\n<li>Document</li>\n<li>Key-value</li>\n<li>Graph</li>\n<li>Timeseries</li>\n<li>Wide column</li>\n<li>Multi-model</li>\n</ul>\n</li>\n</ul>\n<p>SQL and NoSQL databases are broad topics and will be discussed separately in <a href=\"https://karanpratapsingh.com/courses/system-design/sql-databases\">SQL databases</a> and <a href=\"https://karanpratapsingh.com/courses/system-design/nosql-databases\">NoSQL databases</a>. Learn how they compare to each other in <a href=\"https://karanpratapsingh.com/courses/system-design/sql-vs-nosql-databases\">SQL vs NoSQL databases</a>.</p>\n<h2 id=\"Challenges-1\"><a href=\"#Challenges-1\" class=\"headerlink\" title=\"Challenges\"></a>Challenges</h2><p>Some common challenges faced while running databases at scale:</p>\n<ul>\n<li><strong>Absorbing significant increases in data volume</strong>: The explosion of data coming in from sensors, connected machines, and dozens of other sources.</li>\n<li><strong>Ensuring data security</strong>: Data breaches are happening everywhere these days, it‚Äôs more important than ever to ensure that data is secure but also easily accessible to users.</li>\n<li><strong>Keeping up with demand</strong>: Companies need real-time access to their data to support timely decision-making and to take advantage of new opportunities.</li>\n<li><strong>Managing and maintaining the database and infrastructure</strong>: As databases become more complex and data volumes grow, companies are faced with the expense of hiring additional talent to manage their databases.</li>\n<li><strong>Removing limits on scalability</strong>: A business needs to grow if it‚Äôs going to survive, and its data management must grow along with it. But it‚Äôs very difficult to predict how much capacity the company will need, particularly with on-premises databases.</li>\n<li><strong>Ensuring data residency, data sovereignty, or latency requirements</strong>: Some organizations have use cases that are better suited to run on-premises. In those cases, engineered systems that are pre-configured and pre-optimized for running the database are ideal.</li>\n</ul>\n<h1 id=\"SQL-databases\"><a href=\"#SQL-databases\" class=\"headerlink\" title=\"SQL databases\"></a>SQL databases</h1><p>A SQL (or relational) database is a collection of data items with pre-defined relationships between them. These items are organized as a set of tables with columns and rows. Tables are used to hold information about the objects to be represented in the database. Each column in a table holds a certain kind of data and a field stores the actual value of an attribute. The rows in the table represent a collection of related values of one object or entity.</p>\n<p>Each row in a table could be marked with a unique identifier called a primary key, and rows among multiple tables can be made related using foreign keys. This data can be accessed in many different ways without re-organizing the database tables themselves. SQL databases usually follow the <a href=\"https://karanpratapsingh.com/courses/system-design/acid-and-base-consistency-models#acid\">ACID consistency model</a>.</p>\n<h2 id=\"Materialized-views\"><a href=\"#Materialized-views\" class=\"headerlink\" title=\"Materialized views\"></a>Materialized views</h2><p>A materialized view is a pre-computed data set derived from a query specification and stored for later use. Because the data is pre-computed, querying a materialized view is faster than executing a query against the base table of the view. This performance difference can be significant when a query is run frequently or is sufficiently complex.</p>\n<p>It also enables data subsetting and improves the performance of complex queries that run on large data sets which reduces network loads. There are other uses of materialized views, but they are mostly used for performance and replication.</p>\n<h2 id=\"N-1-query-problem\"><a href=\"#N-1-query-problem\" class=\"headerlink\" title=\"N+1 query problem\"></a>N+1 query problem</h2><p>The N+1 query problem happens when the data access layer executes N additional SQL statements to fetch the same data that could have been retrieved when executing the primary SQL query. The larger the value of N, the more queries will be executed, the larger the performance impact.</p>\n<p>This is commonly seen in GraphQL and ORM (Object-Relational Mapping) tools and can be addressed by optimizing the SQL query or using a dataloader that batches consecutive requests and makes a single data request under the hood.</p>\n<h2 id=\"Advantages-5\"><a href=\"#Advantages-5\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Let‚Äôs look at some advantages of using relational databases:</p>\n<ul>\n<li>Simple and accurate</li>\n<li>Accessibility</li>\n<li>Data consistency</li>\n<li>Flexibility</li>\n</ul>\n<h2 id=\"Disadvantages-3\"><a href=\"#Disadvantages-3\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><p>Below are the disadvantages of relational databases:</p>\n<ul>\n<li>Expensive to maintain</li>\n<li>Difficult schema evolution</li>\n<li>Performance hits (join, denormalization, etc.)</li>\n<li>Difficult to scale due to poor horizontal scalability</li>\n</ul>\n<h2 id=\"Examples-6\"><a href=\"#Examples-6\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Here are some commonly used relational databases:</p>\n<ul>\n<li><a href=\"https://www.postgresql.org/\">PostgreSQL</a></li>\n<li><a href=\"https://www.mysql.com/\">MySQL</a></li>\n<li><a href=\"https://mariadb.org/\">MariaDB</a></li>\n<li><a href=\"https://aws.amazon.com/rds/aurora\">Amazon Aurora</a></li>\n</ul>\n<h1 id=\"NoSQL-databases\"><a href=\"#NoSQL-databases\" class=\"headerlink\" title=\"NoSQL databases\"></a>NoSQL databases</h1><p>NoSQL is a broad category that includes any database that doesn‚Äôt use SQL as its primary data access language. These types of databases are also sometimes referred to as non-relational databases. Unlike in relational databases, data in a NoSQL database doesn‚Äôt have to conform to a pre-defined schema. NoSQL databases follow <a href=\"https://karanpratapsingh.com/courses/system-design/acid-and-base-consistency-models#base\">BASE consistency model</a>.</p>\n<p>Below are different types of NoSQL databases:</p>\n<h3 id=\"Document\"><a href=\"#Document\" class=\"headerlink\" title=\"Document\"></a>Document</h3><p>A document database (also known as a document-oriented database or a document store) is a database that stores information in documents. They are general-purpose databases that serve a variety of use cases for both transactional and analytical applications.</p>\n<p><strong>Advantages</strong></p>\n<ul>\n<li>Intuitive and flexible</li>\n<li>Easy horizontal scaling</li>\n<li>Schemaless</li>\n</ul>\n<p><strong>Disadvantages</strong></p>\n<ul>\n<li>Schemaless</li>\n<li>Non-relational</li>\n</ul>\n<p><strong>Examples</strong></p>\n<ul>\n<li><a href=\"https://www.mongodb.com/\">MongoDB</a></li>\n<li><a href=\"https://aws.amazon.com/documentdb\">Amazon DocumentDB</a></li>\n<li><a href=\"https://couchdb.apache.org/\">CouchDB</a></li>\n</ul>\n<h3 id=\"Key-value\"><a href=\"#Key-value\" class=\"headerlink\" title=\"Key-value\"></a>Key-value</h3><p>One of the simplest types of NoSQL databases, key-value databases save data as a group of key-value pairs made up of two data items each. They‚Äôre also sometimes referred to as a key-value store.</p>\n<p><strong>Advantages</strong></p>\n<ul>\n<li>Simple and performant</li>\n<li>Highly scalable for high volumes of traffic</li>\n<li>Session management</li>\n<li>Optimized lookups</li>\n</ul>\n<p><strong>Disadvantages</strong></p>\n<ul>\n<li>Basic CRUD</li>\n<li>Values can‚Äôt be filtered</li>\n<li>Lacks indexing and scanning capabilities</li>\n<li>Not optimized for complex queries</li>\n</ul>\n<p><strong>Examples</strong></p>\n<ul>\n<li><a href=\"https://redis.io/\">Redis</a></li>\n<li><a href=\"https://memcached.org/\">Memcached</a></li>\n<li><a href=\"https://aws.amazon.com/dynamodb\">Amazon DynamoDB</a></li>\n<li><a href=\"https://aerospike.com/\">Aerospike</a></li>\n</ul>\n<h3 id=\"Graph\"><a href=\"#Graph\" class=\"headerlink\" title=\"Graph\"></a>Graph</h3><p>A graph database is a NoSQL database that uses graph structures for semantic queries with nodes, edges, and properties to represent and store data instead of tables or documents.</p>\n<p>The graph relates the data items in the store to a collection of nodes and edges, the edges representing the relationships between the nodes. The relationships allow data in the store to be linked together directly and, in many cases, retrieved with one operation.</p>\n<p><strong>Advantages</strong></p>\n<ul>\n<li>Query speed</li>\n<li>Agile and flexible</li>\n<li>Explicit data representation</li>\n</ul>\n<p><strong>Disadvantages</strong></p>\n<ul>\n<li>Complex</li>\n<li>No standardized query language</li>\n</ul>\n<p><strong>Use cases</strong></p>\n<ul>\n<li>Fraud detection</li>\n<li>Recommendation engines</li>\n<li>Social networks</li>\n<li>Network mapping</li>\n</ul>\n<p><strong>Examples</strong></p>\n<ul>\n<li><a href=\"https://neo4j.com/\">Neo4j</a></li>\n<li><a href=\"https://www.arangodb.com/\">ArangoDB</a></li>\n<li><a href=\"https://aws.amazon.com/neptune\">Amazon Neptune</a></li>\n<li><a href=\"https://janusgraph.org/\">JanusGraph</a></li>\n</ul>\n<h3 id=\"Time-series\"><a href=\"#Time-series\" class=\"headerlink\" title=\"Time series\"></a>Time series</h3><p>A time-series database is a database optimized for time-stamped, or time series, data.</p>\n<p><strong>Advantages</strong></p>\n<ul>\n<li>Fast insertion and retrieval</li>\n<li>Efficient data storage</li>\n</ul>\n<p><strong>Use cases</strong></p>\n<ul>\n<li>IoT data</li>\n<li>Metrics analysis</li>\n<li>Application monitoring</li>\n<li>Understand financial trends</li>\n</ul>\n<p><strong>Examples</strong></p>\n<ul>\n<li><a href=\"https://www.influxdata.com/\">InfluxDB</a></li>\n<li><a href=\"https://druid.apache.org/\">Apache Druid</a></li>\n</ul>\n<h3 id=\"Wide-column\"><a href=\"#Wide-column\" class=\"headerlink\" title=\"Wide column\"></a>Wide column</h3><p>Wide column databases, also known as wide column stores, are schema-agnostic. Data is stored in column families, rather than in rows and columns.</p>\n<p><strong>Advantages</strong></p>\n<ul>\n<li>Highly scalable, can handle petabytes of data</li>\n<li>Ideal for real-time big data applications</li>\n</ul>\n<p><strong>Disadvantages</strong></p>\n<ul>\n<li>Expensive</li>\n<li>Increased write time</li>\n</ul>\n<p><strong>Use cases</strong></p>\n<ul>\n<li>Business analytics</li>\n<li>Attribute-based data storage</li>\n</ul>\n<p><strong>Examples</strong></p>\n<ul>\n<li><a href=\"https://cloud.google.com/bigtable\">BigTable</a></li>\n<li><a href=\"https://cassandra.apache.org/\">Apache Cassandra</a></li>\n<li><a href=\"https://www.scylladb.com/\">ScyllaDB</a></li>\n</ul>\n<h3 id=\"Multi-model\"><a href=\"#Multi-model\" class=\"headerlink\" title=\"Multi-model\"></a>Multi-model</h3><p>Multi-model databases combine different database models (i.e. relational, graph, key-value, document, etc.) into a single, integrated backend. This means they can accommodate various data types, indexes, queries, and store data in more than one model.</p>\n<p><strong>Advantages</strong></p>\n<ul>\n<li>Flexibility</li>\n<li>Suitable for complex projects</li>\n<li>Data consistent</li>\n</ul>\n<p><strong>Disadvantages</strong></p>\n<ul>\n<li>Complex</li>\n<li>Less mature</li>\n</ul>\n<p><strong>Examples</strong></p>\n<ul>\n<li><a href=\"https://www.arangodb.com/\">ArangoDB</a></li>\n<li><a href=\"https://azure.microsoft.com/en-in/services/cosmos-db\">Azure Cosmos DB</a></li>\n<li><a href=\"https://www.couchbase.com/\">Couchbase</a></li>\n</ul>\n<h1 id=\"SQL-vs-NoSQL-databases\"><a href=\"#SQL-vs-NoSQL-databases\" class=\"headerlink\" title=\"SQL vs NoSQL databases\"></a>SQL vs NoSQL databases</h1><p>In the world of databases, there are two main types of solutions, SQL (relational) and NoSQL (non-relational) databases. Both of them differ in the way they were built, the kind of information they store, and how they store it. Relational databases are structured and have predefined schemas while non-relational databases are unstructured, distributed, and have a dynamic schema.</p>\n<h2 id=\"High-level-differences\"><a href=\"#High-level-differences\" class=\"headerlink\" title=\"High-level differences\"></a>High-level differences</h2><p>Here are some high-level differences between SQL and NoSQL:</p>\n<h3 id=\"Storage-1\"><a href=\"#Storage-1\" class=\"headerlink\" title=\"Storage\"></a>Storage</h3><p>SQL stores data in tables, where each row represents an entity and each column represents a data point about that entity.</p>\n<p>NoSQL databases have different data storage models such as key-value, graph, document, etc.</p>\n<h3 id=\"Schema-1\"><a href=\"#Schema-1\" class=\"headerlink\" title=\"Schema\"></a>Schema</h3><p>In SQL, each record conforms to a fixed schema, meaning the columns must be decided and chosen before data entry and each row must have data for each column. The schema can be altered later, but it involves modifying the database using migrations.</p>\n<p>Whereas in NoSQL, schemas are dynamic. Fields can be added on the fly, and each <em>record</em> (or equivalent) doesn‚Äôt have to contain data for each <em>field</em>.</p>\n<h3 id=\"Querying\"><a href=\"#Querying\" class=\"headerlink\" title=\"Querying\"></a>Querying</h3><p>SQL databases use SQL (structured query language) for defining and manipulating the data, which is very powerful.</p>\n<p>In a NoSQL database, queries are focused on a collection of documents. Different databases have different syntax for querying.</p>\n<h3 id=\"Scalability-1\"><a href=\"#Scalability-1\" class=\"headerlink\" title=\"Scalability\"></a>Scalability</h3><p>In most common situations, SQL databases are vertically scalable, which can get very expensive. It is possible to scale a relational database across multiple servers, but this is a challenging and time-consuming process.</p>\n<p>On the other hand, NoSQL databases are horizontally scalable, meaning we can add more servers easily to our NoSQL database infrastructure to handle large traffic. Any cheap commodity hardware or cloud instances can host NoSQL databases, thus making it a lot more cost-effective than vertical scaling. A lot of NoSQL technologies also distribute data across servers automatically.</p>\n<h3 id=\"Reliability\"><a href=\"#Reliability\" class=\"headerlink\" title=\"Reliability\"></a>Reliability</h3><p>The vast majority of relational databases are ACID compliant. So, when it comes to data reliability and a safe guarantee of performing transactions, SQL databases are still the better bet.</p>\n<p>Most of the NoSQL solutions sacrifice ACID compliance for performance and scalability.</p>\n<h2 id=\"Reasons\"><a href=\"#Reasons\" class=\"headerlink\" title=\"Reasons\"></a>Reasons</h2><p>As always we should always pick the technology that fits the requirements better. So, let‚Äôs look at some reasons for picking SQL or NoSQL based database:</p>\n<p><strong>For SQL</strong></p>\n<ul>\n<li>Structured data with strict schema</li>\n<li>Relational data</li>\n<li>Need for complex joins</li>\n<li>Transactions</li>\n<li>Lookups by index are very fast</li>\n</ul>\n<p><strong>For NoSQL</strong></p>\n<ul>\n<li>Dynamic or flexible schema</li>\n<li>Non-relational data</li>\n<li>No need for complex joins</li>\n<li>Very data-intensive workload</li>\n<li>Very high throughput for IOPS</li>\n</ul>\n<h1 id=\"Database-Replication\"><a href=\"#Database-Replication\" class=\"headerlink\" title=\"Database Replication\"></a>Database Replication</h1><p>Replication is a process that involves sharing information to ensure consistency between redundant resources such as multiple databases, to improve reliability, fault-tolerance, or accessibility.</p>\n<h2 id=\"Master-Slave-Replication\"><a href=\"#Master-Slave-Replication\" class=\"headerlink\" title=\"Master-Slave Replication\"></a>Master-Slave Replication</h2><p>The master serves reads and writes, replicating writes to one or more slaves, which serve only reads. Slaves can also replicate additional slaves in a tree-like fashion. If the master goes offline, the system can continue to operate in read-only mode until a slave is promoted to a master or a new master is provisioned.</p>\n<p><img src=\"/assets/img/system-design/master-slave-replication.jpg\" alt=\"master-slave-replication\"></p>\n<h3 id=\"Advantages-6\"><a href=\"#Advantages-6\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><ul>\n<li>Backups of the entire database of relatively no impact on the master.</li>\n<li>Applications can read from the slave(s) without impacting the master.</li>\n<li>Slaves can be taken offline and synced back to the master without any downtime.</li>\n</ul>\n<h3 id=\"Disadvantages-4\"><a href=\"#Disadvantages-4\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><ul>\n<li>Replication adds more hardware and additional complexity.</li>\n<li>Downtime and possibly loss of data when a master fails.</li>\n<li>All writes also have to be made to the master in a master-slave architecture.</li>\n<li>The more read slaves, the more we have to replicate, which will increase replication lag.</li>\n</ul>\n<h2 id=\"Master-Master-Replication\"><a href=\"#Master-Master-Replication\" class=\"headerlink\" title=\"Master-Master Replication\"></a>Master-Master Replication</h2><p>Both masters serve reads&#x2F;writes and coordinate with each other. If either master goes down, the system can continue to operate with both reads and writes.</p>\n<p><img src=\"/assets/img/system-design/master-master-replication.jpg\" alt=\"master-master-replication\"></p>\n<h3 id=\"Advantages-7\"><a href=\"#Advantages-7\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><ul>\n<li>Applications can read from both masters.</li>\n<li>Distributes write load across both master nodes.</li>\n<li>Simple, automatic, and quick failover.</li>\n</ul>\n<h3 id=\"Disadvantages-5\"><a href=\"#Disadvantages-5\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><ul>\n<li>Not as simple as master-slave to configure and deploy.</li>\n<li>Either loosely consistent or have increased write latency due to synchronization.</li>\n<li>Conflict resolution comes into play as more write nodes are added and as latency increases.</li>\n</ul>\n<h2 id=\"Synchronous-vs-Asynchronous-replication\"><a href=\"#Synchronous-vs-Asynchronous-replication\" class=\"headerlink\" title=\"Synchronous vs Asynchronous replication\"></a>Synchronous vs Asynchronous replication</h2><p>The primary difference between synchronous and asynchronous replication is how the data is written to the replica. In synchronous replication, data is written to primary storage and the replica simultaneously. As such, the primary copy and the replica should always remain synchronized.</p>\n<p>In contrast, asynchronous replication copies the data to the replica after the data is already written to the primary storage. Although the replication process may occur in near-real-time, it is more common for replication to occur on a scheduled basis and it is more cost-effective.</p>\n<h1 id=\"Indexes\"><a href=\"#Indexes\" class=\"headerlink\" title=\"Indexes\"></a>Indexes</h1><p>Indexes are well known when it comes to databases, they are used to improve the speed of data retrieval operations on the data store. An index makes the trade-offs of increased storage overhead, and slower writes (since we not only have to write the data but also have to update the index) for the benefit of faster reads. Indexes are used to quickly locate data without having to examine every row in a database table. Indexes can be created using one or more columns of a database table, providing the basis for both rapid random lookups and efficient access to ordered records.</p>\n<p><img src=\"/assets/img/system-design/indexes.jpg\" alt=\"indexes\"></p>\n<p>An index is a data structure that can be perceived as a table of contents that points us to the location where actual data lives. So when we create an index on a column of a table, we store that column and a pointer to the whole row in the index. Indexes are also used to create different views of the same data. For large data sets, this is an excellent way to specify different filters or sorting schemes without resorting to creating multiple additional copies of the data.</p>\n<p>One quality that database indexes can have is that they can be <strong>dense</strong> or <strong>sparse</strong>. Each of these index qualities comes with its own trade-offs. Let‚Äôs look at how each index type would work:</p>\n<h2 id=\"Dense-Index\"><a href=\"#Dense-Index\" class=\"headerlink\" title=\"Dense Index\"></a>Dense Index</h2><p>In a dense index, an index record is created for every row of the table. Records can be located directly as each record of the index holds the search key value and the pointer to the actual record.</p>\n<p><img src=\"/assets/img/system-design/dense-index.jpg\" alt=\"dense-index\"></p>\n<p>Dense indexes require more maintenance than sparse indexes at write-time. Since every row must have an entry, the database must maintain the index on inserts, updates, and deletes. Having an entry for every row also means that dense indexes will require more memory. The benefit of a dense index is that values can be quickly found with just a binary search. Dense indexes also do not impose any ordering requirements on the data.</p>\n<h2 id=\"Sparse-Index\"><a href=\"#Sparse-Index\" class=\"headerlink\" title=\"Sparse Index\"></a>Sparse Index</h2><p>In a sparse index, records are created only for some of the records.</p>\n<p><img src=\"/assets/img/system-design/sparse-index.jpg\" alt=\"sparse-index\"></p>\n<p>Sparse indexes require less maintenance than dense indexes at write-time since they only contain a subset of the values. This lighter maintenance burden means that inserts, updates, and deletes will be faster. Having fewer entries also means that the index will use less memory. Finding data is slower since a scan across the page typically follows the binary search. Sparse indexes are also optional when working with ordered data.</p>\n<h1 id=\"Normalization-and-Denormalization\"><a href=\"#Normalization-and-Denormalization\" class=\"headerlink\" title=\"Normalization and Denormalization\"></a>Normalization and Denormalization</h1><h2 id=\"Terms\"><a href=\"#Terms\" class=\"headerlink\" title=\"Terms\"></a>Terms</h2><p>Before we go any further, let‚Äôs look at some commonly used terms in normalization and denormalization.</p>\n<h3 id=\"Keys\"><a href=\"#Keys\" class=\"headerlink\" title=\"Keys\"></a>Keys</h3><p><strong>Primary key</strong>: Column or group of columns that can be used to uniquely identify every row of the table.</p>\n<p><strong>Composite key</strong>: A primary key made up of multiple columns.</p>\n<p><strong>Super key</strong>: Set of all keys that can uniquely identify all the rows present in a table.</p>\n<p><strong>Candidate key</strong>: Attributes that identify rows uniquely in a table.</p>\n<p><strong>Foreign key</strong>: It is a reference to a primary key of another table.</p>\n<p><strong>Alternate key</strong>: Keys that are not primary keys are known as alternate keys.</p>\n<p><strong>Surrogate key</strong>: A system-generated value that uniquely identifies each entry in a table when no other column was able to hold properties of a primary key.</p>\n<h3 id=\"Dependencies\"><a href=\"#Dependencies\" class=\"headerlink\" title=\"Dependencies\"></a>Dependencies</h3><p><strong>Partial dependency</strong>: Occurs when the primary key determines some other attributes.</p>\n<p><strong>Functional dependency</strong>: It is a relationship that exists between two attributes, typically between the primary key and non-key attribute within a table.</p>\n<p><strong>Transitive functional dependency</strong>: Occurs when some non-key attribute determines some other attribute.</p>\n<h3 id=\"Anomalies\"><a href=\"#Anomalies\" class=\"headerlink\" title=\"Anomalies\"></a>Anomalies</h3><p>Database anomaly happens when there is a flaw in the database due to incorrect planning or storing everything in a flat database. This is generally addressed by the process of normalization.</p>\n<p>There are three types of database anomalies:</p>\n<p><strong>Insertion anomaly</strong>: Occurs when we are not able to insert certain attributes in the database without the presence of other attributes.</p>\n<p><strong>Update anomaly</strong>: Occurs in case of data redundancy and partial update. In other words, a correct update of the database needs other actions such as addition, deletion, or both.</p>\n<p><strong>Deletion anomaly</strong>: Occurs where deletion of some data requires deletion of other data.</p>\n<p><strong>Example</strong></p>\n<p>Let‚Äôs consider the following table which is not normalized:</p>\n<table>\n<thead>\n<tr>\n<th>ID</th>\n<th>Name</th>\n<th>Role</th>\n<th>Team</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>Peter</td>\n<td>Software Engineer</td>\n<td>A</td>\n</tr>\n<tr>\n<td>2</td>\n<td>Brian</td>\n<td>DevOps Engineer</td>\n<td>B</td>\n</tr>\n<tr>\n<td>3</td>\n<td>Hailey</td>\n<td>Product Manager</td>\n<td>C</td>\n</tr>\n<tr>\n<td>4</td>\n<td>Hailey</td>\n<td>Product Manager</td>\n<td>C</td>\n</tr>\n<tr>\n<td>5</td>\n<td>Steve</td>\n<td>Frontend Engineer</td>\n<td>D</td>\n</tr>\n</tbody></table>\n<p>Let‚Äôs imagine, we hired a new person ‚ÄúJohn‚Äù but they might not be assigned a team immediately. This will cause an <em>insertion anomaly</em> as the team attribute is not yet present.</p>\n<p>Next, let‚Äôs say Hailey from Team C got promoted, to reflect that change in the database, we will need to update 2 rows to maintain consistency which can cause an <em>update anomaly</em>.</p>\n<p>Finally, we would like to remove Team B but to do that we will also need to remove additional information such as name and role, this is an example of a <em>deletion anomaly</em>.</p>\n<h2 id=\"Normalization\"><a href=\"#Normalization\" class=\"headerlink\" title=\"Normalization\"></a>Normalization</h2><p>Normalization is the process of organizing data in a database. This includes creating tables and establishing relationships between those tables according to rules designed both to protect the data and to make the database more flexible by eliminating redundancy and inconsistent dependency.</p>\n<h3 id=\"Why-do-we-need-normalization\"><a href=\"#Why-do-we-need-normalization\" class=\"headerlink\" title=\"Why do we need normalization?\"></a>Why do we need normalization?</h3><p>The goal of normalization is to eliminate redundant data and ensure data is consistent. A fully normalized database allows its structure to be extended to accommodate new types of data without changing the existing structure too much. As a result, applications interacting with the database are minimally affected.</p>\n<h3 id=\"Normal-forms\"><a href=\"#Normal-forms\" class=\"headerlink\" title=\"Normal forms\"></a>Normal forms</h3><p>Normal forms are a series of guidelines to ensure that the database is normalized. Let‚Äôs discuss some essential normal forms:</p>\n<p><strong>1NF</strong></p>\n<p>For a table to be in the first normal form (1NF), it should follow the following rules:</p>\n<ul>\n<li>Repeating groups are not permitted.</li>\n<li>Identify each set of related data with a primary key.</li>\n<li>Set of related data should have a separate table.</li>\n<li>Mixing data types in the same column is not permitted.</li>\n</ul>\n<p><strong>2NF</strong></p>\n<p>For a table to be in the second normal form (2NF), it should follow the following rules:</p>\n<ul>\n<li>Satisfies the first normal form (1NF).</li>\n<li>Should not have any partial dependency.</li>\n</ul>\n<p><strong>3NF</strong></p>\n<p>For a table to be in the third normal form (3NF), it should follow the following rules:</p>\n<ul>\n<li>Satisfies the second normal form (2NF).</li>\n<li>Transitive functional dependencies are not permitted.</li>\n</ul>\n<p><strong>BCNF</strong></p>\n<p>Boyce-Codd normal form (or BCNF) is a slightly stronger version of the third normal form (3NF) used to address certain types of anomalies not dealt with by 3NF as originally defined. Sometimes it is also known as the 3.5 normal form (3.5NF).</p>\n<p>For a table to be in the Boyce-Codd normal form (BCNF), it should follow the following rules:</p>\n<ul>\n<li>Satisfied the third normal form (3NF).</li>\n<li>For every functional dependency X ‚Üí Y, X should be the super key.</li>\n</ul>\n<p><em>There are more normal forms such as 4NF, 5NF, and 6NF but we won‚Äôt discuss them here. Check out this <a href=\"https://www.youtube.com/watch?v=GFQaEYEc8_8\">amazing video</a> that goes into detail.</em></p>\n<p>In a relational database, a relation is often described as <em>‚Äúnormalized‚Äù</em> if it meets the third normal form. Most 3NF relations are free of insertion, update, and deletion anomalies.</p>\n<p>As with many formal rules and specifications, real-world scenarios do not always allow for perfect compliance. If you decide to violate one of the first three rules of normalization, make sure that your application anticipates any problems that could occur, such as redundant data and inconsistent dependencies.</p>\n<h3 id=\"Advantages-8\"><a href=\"#Advantages-8\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><p>Here are some advantages of normalization:</p>\n<ul>\n<li>Reduces data redundancy.</li>\n<li>Better data design.</li>\n<li>Increases data consistency.</li>\n<li>Enforces referential integrity.</li>\n</ul>\n<h3 id=\"Disadvantages-6\"><a href=\"#Disadvantages-6\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><p>Let‚Äôs look at some disadvantages of normalization:</p>\n<ul>\n<li>Data design is complex.</li>\n<li>Slower performance.</li>\n<li>Maintenance overhead.</li>\n<li>Require more joins.</li>\n</ul>\n<h2 id=\"Denormalization\"><a href=\"#Denormalization\" class=\"headerlink\" title=\"Denormalization\"></a>Denormalization</h2><p>Denormalization is a database optimization technique in which we add redundant data to one or more tables. This can help us avoid costly joins in a relational database. It attempts to improve read performance at the expense of some write performance. Redundant copies of the data are written in multiple tables to avoid expensive joins.</p>\n<p>Once data becomes distributed with techniques such as federation and sharding, managing joins across the network further increases complexity. Denormalization might circumvent the need for such complex joins.</p>\n<p><em>Note: Denormalization does not mean reversing normalization.</em></p>\n<h3 id=\"Advantages-9\"><a href=\"#Advantages-9\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><p>Let‚Äôs look at some advantages of denormalization:</p>\n<ul>\n<li>Retrieving data is faster.</li>\n<li>Writing queries is easier.</li>\n<li>Reduction in number of tables.</li>\n<li>Convenient to manage.</li>\n</ul>\n<h3 id=\"Disadvantages-7\"><a href=\"#Disadvantages-7\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><p>Below are some disadvantages of denormalization:</p>\n<ul>\n<li>Expensive inserts and updates.</li>\n<li>Increases complexity of database design.</li>\n<li>Increases data redundancy.</li>\n<li>More chances of data inconsistency.</li>\n</ul>\n<h1 id=\"ACID-and-BASE-consistency-models\"><a href=\"#ACID-and-BASE-consistency-models\" class=\"headerlink\" title=\"ACID and BASE consistency models\"></a>ACID and BASE consistency models</h1><p>Let‚Äôs discuss the ACID and BASE consistency models.</p>\n<h2 id=\"ACID\"><a href=\"#ACID\" class=\"headerlink\" title=\"ACID\"></a>ACID</h2><p>The term ACID stands for Atomicity, Consistency, Isolation, and Durability. ACID properties are used for maintaining data integrity during transaction processing.</p>\n<p>In order to maintain consistency before and after a transaction relational databases follow ACID properties. Let us understand these terms:</p>\n<h3 id=\"Atomic\"><a href=\"#Atomic\" class=\"headerlink\" title=\"Atomic\"></a>Atomic</h3><p>All operations in a transaction succeed or every operation is rolled back.</p>\n<h3 id=\"Consistent\"><a href=\"#Consistent\" class=\"headerlink\" title=\"Consistent\"></a>Consistent</h3><p>On the completion of a transaction, the database is structurally sound.</p>\n<h3 id=\"Isolated\"><a href=\"#Isolated\" class=\"headerlink\" title=\"Isolated\"></a>Isolated</h3><p>Transactions do not contend with one another. Contentious access to data is moderated by the database so that transactions appear to run sequentially.</p>\n<h3 id=\"Durable\"><a href=\"#Durable\" class=\"headerlink\" title=\"Durable\"></a>Durable</h3><p>Once the transaction has been completed and the writes and updates have been written to the disk, it will remain in the system even if a system failure occurs.</p>\n<h2 id=\"BASE\"><a href=\"#BASE\" class=\"headerlink\" title=\"BASE\"></a>BASE</h2><p>With the increasing amount of data and high availability requirements, the approach to database design has also changed dramatically. To increase the ability to scale and at the same time be highly available, we move the logic from the database to separate servers. In this way, the database becomes more independent and focused on the actual process of storing data.</p>\n<p>In the NoSQL database world, ACID transactions are less common as some databases have loosened the requirements for immediate consistency, data freshness, and accuracy in order to gain other benefits, like scale and resilience.</p>\n<p>BASE properties are much looser than ACID guarantees, but there isn‚Äôt a direct one-for-one mapping between the two consistency models. Let us understand these terms:</p>\n<h3 id=\"Basic-Availability\"><a href=\"#Basic-Availability\" class=\"headerlink\" title=\"Basic Availability\"></a>Basic Availability</h3><p>The database appears to work most of the time.</p>\n<h3 id=\"Soft-state\"><a href=\"#Soft-state\" class=\"headerlink\" title=\"Soft-state\"></a>Soft-state</h3><p>Stores don‚Äôt have to be write-consistent, nor do different replicas have to be mutually consistent all the time.</p>\n<h3 id=\"Eventual-consistency\"><a href=\"#Eventual-consistency\" class=\"headerlink\" title=\"Eventual consistency\"></a>Eventual consistency</h3><p>The data might not be consistent immediately but eventually, it becomes consistent. Reads in the system are still possible even though they may not give the correct response due to inconsistency.</p>\n<h2 id=\"ACID-vs-BASE-Trade-offs\"><a href=\"#ACID-vs-BASE-Trade-offs\" class=\"headerlink\" title=\"ACID vs BASE Trade-offs\"></a>ACID vs BASE Trade-offs</h2><p>There‚Äôs no right answer to whether our application needs an ACID or a BASE consistency model. Both the models have been designed to satisfy different requirements. While choosing a database we need to keep the properties of both the models and the requirements of our application in mind.</p>\n<p>Given BASE‚Äôs loose consistency, developers need to be more knowledgeable and rigorous about consistent data if they choose a BASE store for their application. It‚Äôs essential to be familiar with the BASE behavior of the chosen database and work within those constraints.</p>\n<p>On the other hand, planning around BASE limitations can sometimes be a major disadvantage when compared to the simplicity of ACID transactions. A fully ACID database is the perfect fit for use cases where data reliability and consistency are essential.</p>\n<h1 id=\"CAP-Theorem\"><a href=\"#CAP-Theorem\" class=\"headerlink\" title=\"CAP Theorem\"></a>CAP Theorem</h1><p><em>Video</em>: <a href=\"https://youtu.be/8UryASGBiR4\">https://youtu.be/8UryASGBiR4</a></p>\n<p>CAP theorem states that a distributed system can deliver only two of the three desired characteristics Consistency, Availability, and Partition tolerance (CAP).<br> <p align=\"center\"><br>    <img src=\"/assets/img/system-design/cap-theorem-key-65.jpg\" alt=\"CPA\"><br> </p></p>\n<h3 id=\"Consistency\"><a href=\"#Consistency\" class=\"headerlink\" title=\"Consistency\"></a>Consistency</h3><p>In a consistent system, <strong>all nodes see the same data</strong> simultaneously. If we perform a read operation on a consistent system, it should return the value of the most recent write operation. The read should cause all nodes to return the same data. All users see the same data at the same time, regardless of the node they connect to. When data is written to a single node, it is then replicated across the other nodes in the system. For this to happen, whenever data is written to one node, it must be instantly forwarded or replicated across all the nodes in the system before the write is deemed ‚Äúsuccessful‚Äù.</p>\n<p>Financial data is a good example. When a user logs in to their banking institution, they do not want to see an error that no data is returned, or that the value is higher or lower than it actually is. Banking apps should return the exact value of a user‚Äôs account information. In this case, banks would rely on consistent databases.</p>\n<p>Examples of a consistent database include:</p>\n<ul>\n<li>Bank account balances</li>\n<li>Text messages</li>\n</ul>\n<p>Database options for consistency:</p>\n<ul>\n<li>MongoDB</li>\n<li>Redis</li>\n<li>HBase</li>\n</ul>\n<h3 id=\"Availability-1\"><a href=\"#Availability-1\" class=\"headerlink\" title=\"Availability\"></a>Availability</h3><p>When availability is present in a distributed system, it means that the <strong>system remains operational all of the time</strong>. Every request will get a response regardless of the individual state of the nodes. This means that the system will operate even if there are multiple nodes down. Unlike a consistent system, there‚Äôs <strong>no guarantee that the response will be the most recent write operation</strong>.</p>\n<p>Example of a highly available database: </p>\n<ul>\n<li>On <strong>YouTube</strong> and <strong>social media</strong> like Facebook and Instagram, we can ignore consistency in views or likes count but the <strong>availability of videos and posts is essential</strong>. </li>\n<li>In <strong>e-commerce businesses</strong>. Online stores want to make their store and the functions of the shopping cart available 24&#x2F;7 so shoppers can make purchases exactly when they need.</li>\n</ul>\n<p>Database options for availability:</p>\n<ul>\n<li>Cassandra</li>\n<li>DynamoDB</li>\n<li>Cosmos DB</li>\n</ul>\n<h3 id=\"Partition-tolerance\"><a href=\"#Partition-tolerance\" class=\"headerlink\" title=\"Partition tolerance\"></a>Partition tolerance</h3><p>When a distributed system encounters a partition, it means that there‚Äôs a <strong>break in communication between nodes</strong>. If a system is partition-tolerant, the system does not fail, regardless of whether messages are dropped or delayed between nodes within the system. To have partition tolerance, the system must replicate records across combinations of nodes and networks.</p>\n<h3 id=\"CAP-theorem-NoSQL-databases\"><a href=\"#CAP-theorem-NoSQL-databases\" class=\"headerlink\" title=\"CAP theorem NoSQL databases\"></a>CAP theorem NoSQL databases</h3><p>NoSQL databases can be classified based on whether they support high availability or high consistency.<br>NoSQL databases are great for distributed networks. They allow for <strong>horizontal scaling</strong>, and they can quickly scale across multiple nodes. When deciding which NoSQL database to use, it‚Äôs important to keep the CAP theorem in mind. NoSQL databases can be classified based on the two CAP features they support.</p>\n <p align=\"center\">\n    <img src=\"/assets/img/system-design/cap_theorem-system-design-samirpaul1.jpg\" alt=\"cap-theorem\">\n </p>\n\n\n\n<h2 id=\"Consistency-Availability-Tradeoff\"><a href=\"#Consistency-Availability-Tradeoff\" class=\"headerlink\" title=\"Consistency-Availability Tradeoff\"></a>Consistency-Availability Tradeoff</h2><p>We live in a physical world and can‚Äôt guarantee the stability of a network, so distributed databases must choose Partition Tolerance (P). This implies a tradeoff between Consistency (C) and Availability (A).</p>\n<h3 id=\"CA-database\"><a href=\"#CA-database\" class=\"headerlink\" title=\"CA database\"></a>CA database</h3><p><strong>Relational databases</strong>, such as PostgreSQL, allow for consistency and availability if the systems are <strong>vertically scale</strong> on a <strong>single machine</strong>, we can avoid fault tolerance.<br>A CA database delivers consistency and availability across all nodes. It can‚Äôt do this if there is a partition between any two nodes in the system, and therefore can‚Äôt deliver fault tolerance.</p>\n<p><strong>Example</strong>: <a href=\"https://www.postgresql.org/\">PostgreSQL</a>, <a href=\"https://mariadb.org/\">MariaDB</a>.</p>\n<h3 id=\"CP-database\"><a href=\"#CP-database\" class=\"headerlink\" title=\"CP database\"></a>CP database</h3><p>CP databases enable consistency and partition tolerance, but not availability. When a partition occurs, the system has to <strong>turn off inconsistent nodes until the partition can be fixed</strong>. That‚Äôs why they are not 100% available.<br>MongoDB is an example of a CP database. It‚Äôs a NoSQL database management system (DBMS) that uses documents for data storage. It‚Äôs considered schema-less, which means that it doesn‚Äôt require a defined database schema. It‚Äôs commonly used in big data and applications running in different locations. The CP system is structured so that there‚Äôs only one primary node that receives all of the write requests in a given replica set. Secondary nodes replicate the data in the primary nodes, so if the primary node fails, a secondary node can stand-in.<br><strong>Example</strong>: <a href=\"https://www.mongodb.com/\">MongoDB</a>, <a href=\"https://hbase.apache.org/\">Apache HBase</a>.</p>\n<h3 id=\"AP-database\"><a href=\"#AP-database\" class=\"headerlink\" title=\"AP database\"></a>AP database</h3><p>AP databases enable availability and partition tolerance, but not consistency. In the event of a partition, all nodes are available, but they‚Äôre not all updated. For example, if a user tries to access data from a bad node, they <strong>won‚Äôt receive the most up-to-date version of the data</strong>. When the partition is eventually resolved, most AP databases will sync the nodes to ensure consistency across them. Apache Cassandra is an example of an AP database. It‚Äôs a NoSQL database with no primary node, meaning that all of the nodes remain available. Cassandra allows for eventual consistency because users can resync their data right after a partition is resolved.</p>\n<p><strong>Example</strong>: <a href=\"https://cassandra.apache.org/\">Apache Cassandra</a>, <a href=\"https://couchdb.apache.org/\">CouchDB</a>.</p>\n<h3 id=\"CAP-theorem-and-microservices\"><a href=\"#CAP-theorem-and-microservices\" class=\"headerlink\" title=\"CAP theorem and microservices\"></a>CAP theorem and microservices</h3><p>Microservices are defined as loosely coupled services that can be independently developed, deployed, and maintained. They include their own stack, database, and database model, and communicate with each other through a network. Microservices have become especially popular in <strong>hybrid cloud and <a href=\"https://www.educative.io/blog/what-is-multi-cloud\">multi-cloud</a> environments</strong>, and they are also widely used in on-premises data centers. If you want to create a microservices application, you can use the CAP theorem to help you determine a database that will best fit your needs.</p>\n<h1 id=\"PACELC-Theorem\"><a href=\"#PACELC-Theorem\" class=\"headerlink\" title=\"PACELC Theorem\"></a>PACELC Theorem</h1><p>The PACELC theorem is an extension of the CAP theorem. The CAP theorem states that in the case of network partitioning (P) in a distributed system, one has to choose between Availability (A) and Consistency (C).</p>\n<p>PACELC extends the CAP theorem by introducing latency (L) as an additional attribute of a distributed system. The theorem states that else (E), even when the system is running normally in the absence of partitions, one has to choose between latency (L) and consistency (C).</p>\n<p><em>The PACELC theorem was first described by <a href=\"https://scholar.google.com/citations?user=zxeEF2gAAAAJ\">Daniel J. Abadi</a>.</em></p>\n<p><img src=\"/assets/img/system-design/pacelc-theorem.jpg\" alt=\"pacelc-theorem\"></p>\n<p>PACELC theorem was developed to address a key limitation of the CAP theorem as it makes no provision for performance or latency.</p>\n<p>For example, according to the CAP theorem, a database can be considered Available if a query returns a response after 30 days. Obviously, such latency would be unacceptable for any real-world application.</p>\n<h1 id=\"Transactions\"><a href=\"#Transactions\" class=\"headerlink\" title=\"Transactions\"></a>Transactions</h1><p>A transaction is a series of database operations that are considered to be a <em>‚Äúsingle unit of work‚Äù</em>. The operations in a transaction either all succeed, or they all fail. In this way, the notion of a transaction supports data integrity when part of a system fails. Not all databases choose to support ACID transactions, usually because they are prioritizing other optimizations that are hard or theoretically impossible to implement together.</p>\n<p><em>Usually, relational databases support ACID transactions, and non-relational databases don‚Äôt (there are exceptions).</em></p>\n<h2 id=\"States\"><a href=\"#States\" class=\"headerlink\" title=\"States\"></a>States</h2><p>A transaction in a database can be in one of the following states:</p>\n<p><img src=\"/assets/img/system-design/transaction-states.jpg\" alt=\"transaction-states\"></p>\n<h3 id=\"Active\"><a href=\"#Active\" class=\"headerlink\" title=\"Active\"></a>Active</h3><p>In this state, the transaction is being executed. This is the initial state of every transaction.</p>\n<h3 id=\"Partially-Committed\"><a href=\"#Partially-Committed\" class=\"headerlink\" title=\"Partially Committed\"></a>Partially Committed</h3><p>When a transaction executes its final operation, it is said to be in a partially committed state.</p>\n<h3 id=\"Committed\"><a href=\"#Committed\" class=\"headerlink\" title=\"Committed\"></a>Committed</h3><p>If a transaction executes all its operations successfully, it is said to be committed. All its effects are now permanently established on the database system.</p>\n<h3 id=\"Failed\"><a href=\"#Failed\" class=\"headerlink\" title=\"Failed\"></a>Failed</h3><p>The transaction is said to be in a failed state if any of the checks made by the database recovery system fails. A failed transaction can no longer proceed further.</p>\n<h3 id=\"Aborted\"><a href=\"#Aborted\" class=\"headerlink\" title=\"Aborted\"></a>Aborted</h3><p>If any of the checks fail and the transaction has reached a failed state, then the recovery manager rolls back all its write operations on the database to bring the database back to its original state where it was prior to the execution of the transaction. Transactions in this state are aborted.</p>\n<p>The database recovery module can select one of the two operations after a transaction aborts:</p>\n<ul>\n<li>Restart the transaction</li>\n<li>Kill the transaction</li>\n</ul>\n<h3 id=\"Terminated\"><a href=\"#Terminated\" class=\"headerlink\" title=\"Terminated\"></a>Terminated</h3><p>If there isn‚Äôt any roll-back or the transaction comes from the <em>committed state</em>, then the system is consistent and ready for a new transaction and the old transaction is terminated.</p>\n<h1 id=\"Distributed-Transactions\"><a href=\"#Distributed-Transactions\" class=\"headerlink\" title=\"Distributed Transactions\"></a>Distributed Transactions</h1><p>A distributed transaction is a set of operations on data that is performed across two or more databases. It is typically coordinated across separate nodes connected by a network, but may also span multiple databases on a single server.</p>\n<h2 id=\"Why-do-we-need-distributed-transactions\"><a href=\"#Why-do-we-need-distributed-transactions\" class=\"headerlink\" title=\"Why do we need distributed transactions?\"></a>Why do we need distributed transactions?</h2><p>Unlike an ACID transaction on a single database, a distributed transaction involves altering data on multiple databases. Consequently, distributed transaction processing is more complicated, because the database must coordinate the committing or rollback of the changes in a transaction as a self-contained unit.</p>\n<p>In other words, all the nodes must commit, or all must abort and the entire transaction rolls back. This is why we need distributed transactions.</p>\n<p>Now, let‚Äôs look at some popular solutions for distributed transactions:</p>\n<h2 id=\"Two-Phase-commit\"><a href=\"#Two-Phase-commit\" class=\"headerlink\" title=\"Two-Phase commit\"></a>Two-Phase commit</h2><p><img src=\"/assets/img/system-design/two-phase-commit.jpg\" alt=\"two-phase-commit\"></p>\n<p>The two-phase commit (2PC) protocol is a distributed algorithm that coordinates all the processes that participate in a distributed transaction on whether to commit or abort (roll back) the transaction.</p>\n<p>This protocol achieves its goal even in many cases of temporary system failure and is thus widely used. However, it is not resilient to all possible failure configurations, and in rare cases, manual intervention is needed to remedy an outcome.</p>\n<p>This protocol requires a coordinator node, which basically coordinates and oversees the transaction across different nodes. The coordinator tries to establish the consensus among a set of processes in two phases, hence the name.</p>\n<h3 id=\"Phases\"><a href=\"#Phases\" class=\"headerlink\" title=\"Phases\"></a>Phases</h3><p>Two-phase commit consists of the following phases:</p>\n<p><strong>Prepare phase</strong></p>\n<p>The prepare phase involves the coordinator node collecting consensus from each of the participant nodes. The transaction will be aborted unless each of the nodes responds that they‚Äôre <em>prepared</em>.</p>\n<p><strong>Commit phase</strong></p>\n<p>If all participants respond to the coordinator that they are <em>prepared</em>, then the coordinator asks all the nodes to commit the transaction. If a failure occurs, the transaction will be rolled back.</p>\n<h3 id=\"Problems\"><a href=\"#Problems\" class=\"headerlink\" title=\"Problems\"></a>Problems</h3><p>Following problems may arise in the two-phase commit protocol:</p>\n<ul>\n<li>What if one of the nodes crashes?</li>\n<li>What if the coordinator itself crashes?</li>\n<li>It is a blocking protocol.</li>\n</ul>\n<h2 id=\"Three-phase-commit\"><a href=\"#Three-phase-commit\" class=\"headerlink\" title=\"Three-phase commit\"></a>Three-phase commit</h2><p><img src=\"/assets/img/system-design/three-phase-commit.jpg\" alt=\"three-phase-commit\"></p>\n<p>Three-phase commit (3PC) is an extension of the two-phase commit where the commit phase is split into two phases. This helps with the blocking problem that occurs in the two-phase commit protocol.</p>\n<h3 id=\"Phases-1\"><a href=\"#Phases-1\" class=\"headerlink\" title=\"Phases\"></a>Phases</h3><p>Three-phase commit consists of the following phases:</p>\n<p><strong>Prepare phase</strong></p>\n<p>This phase is the same as the two-phase commit.</p>\n<p><strong>Pre-commit phase</strong></p>\n<p>Coordinator issues the pre-commit message and all the participating nodes must acknowledge it. If a participant fails to receive this message in time, then the transaction is aborted.</p>\n<p><strong>Commit phase</strong></p>\n<p>This step is also similar to the two-phase commit protocol.</p>\n<h3 id=\"Why-is-the-Pre-commit-phase-helpful\"><a href=\"#Why-is-the-Pre-commit-phase-helpful\" class=\"headerlink\" title=\"Why is the Pre-commit phase helpful?\"></a>Why is the Pre-commit phase helpful?</h3><p>The pre-commit phase accomplishes the following:</p>\n<ul>\n<li>If the participant nodes are found in this phase, that means that <em>every</em> participant has completed the first phase. The completion of prepare phase is guaranteed.</li>\n<li>Every phase can now time out and avoid indefinite waits.</li>\n</ul>\n<h2 id=\"Sagas\"><a href=\"#Sagas\" class=\"headerlink\" title=\"Sagas\"></a>Sagas</h2><p><img src=\"/assets/img/system-design/sagas.jpg\" alt=\"sagas\"></p>\n<p>A saga is a sequence of local transactions. Each local transaction updates the database and publishes a message or event to trigger the next local transaction in the saga. If a local transaction fails because it violates a business rule then the saga executes a series of compensating transactions that undo the changes that were made by the preceding local transactions.</p>\n<h3 id=\"Coordination\"><a href=\"#Coordination\" class=\"headerlink\" title=\"Coordination\"></a>Coordination</h3><p>There are two common implementation approaches:</p>\n<ul>\n<li><strong>Choreography</strong>: Each local transaction publishes domain events that trigger local transactions in other services.</li>\n<li><strong>Orchestration</strong>: An orchestrator tells the participants what local transactions to execute.</li>\n</ul>\n<h3 id=\"Problems-1\"><a href=\"#Problems-1\" class=\"headerlink\" title=\"Problems\"></a>Problems</h3><ul>\n<li>The Saga pattern is particularly hard to debug.</li>\n<li>There‚Äôs a risk of cyclic dependency between saga participants.</li>\n<li>Lack of participant data isolation imposes durability challenges.</li>\n<li>Testing is difficult because all services must be running to simulate a transaction.</li>\n</ul>\n<h1 id=\"Sharding\"><a href=\"#Sharding\" class=\"headerlink\" title=\"Sharding\"></a>Sharding</h1><p>Before we discuss sharding, let‚Äôs talk about data partitioning:</p>\n<h2 id=\"Data-Partitioning\"><a href=\"#Data-Partitioning\" class=\"headerlink\" title=\"Data Partitioning\"></a>Data Partitioning</h2><p>Data partitioning is a technique to break up a database into many smaller parts. It is the process of splitting up a database or a table across multiple machines to improve the manageability, performance, and availability of a database.</p>\n<h3 id=\"Methods\"><a href=\"#Methods\" class=\"headerlink\" title=\"Methods\"></a>Methods</h3><p>There are many different ways one could use to decide how to break up an application database into multiple smaller DBs. Below are three of the most popular methods used by various large-scale applications:</p>\n<p><strong>Horizontal Partitioning (or Sharding)</strong></p>\n<p>In this strategy, we split the table data horizontally based on the range of values defined by the <em>partition key</em>. It is also referred to as <strong><em>database sharding</em></strong>.</p>\n<p><strong>Vertical Partitioning</strong></p>\n<p>In vertical partitioning, we partition the data vertically based on columns. We divide tables into relatively smaller tables with few elements, and each part is present in a separate partition.</p>\n<p>In this tutorial, we will specifically focus on sharding.</p>\n<h2 id=\"What-is-sharding\"><a href=\"#What-is-sharding\" class=\"headerlink\" title=\"What is sharding?\"></a>What is sharding?</h2><p>Sharding is a database architecture pattern related to <em>horizontal partitioning</em>, which is the practice of separating one table‚Äôs rows into multiple different tables, known as <em>partitions</em> or <em>shards</em>. Each partition has the same schema and columns, but also a subset of the shared data. Likewise, the data held in each is unique and independent of the data held in other partitions.</p>\n<p><img src=\"/assets/img/system-design/sharding.jpg\" alt=\"sharding\"></p>\n<p>The justification for data sharding is that, after a certain point, it is cheaper and more feasible to scale horizontally by adding more machines than to scale it vertically by adding powerful servers. Sharding can be implemented at both application or the database level.</p>\n<h2 id=\"Partitioning-criteria\"><a href=\"#Partitioning-criteria\" class=\"headerlink\" title=\"Partitioning criteria\"></a>Partitioning criteria</h2><p>There are a large number of criteria available for data partitioning. Some most commonly used criteria are:</p>\n<h3 id=\"Hash-Based\"><a href=\"#Hash-Based\" class=\"headerlink\" title=\"Hash-Based\"></a>Hash-Based</h3><p>This strategy divides the rows into different partitions based on a hashing algorithm rather than grouping database rows based on continuous indexes.</p>\n<p>The disadvantage of this method is that dynamically adding&#x2F;removing database servers becomes expensive.</p>\n<h3 id=\"List-Based\"><a href=\"#List-Based\" class=\"headerlink\" title=\"List-Based\"></a>List-Based</h3><p>In list-based partitioning, each partition is defined and selected based on the list of values on a column rather than a set of contiguous ranges of values.</p>\n<h3 id=\"Range-Based\"><a href=\"#Range-Based\" class=\"headerlink\" title=\"Range Based\"></a>Range Based</h3><p>Range partitioning maps data to various partitions based on ranges of values of the partitioning key. In other words, we partition the table in such a way that each partition contains rows within a given range defined by the partition key.</p>\n<p>Ranges should be contiguous but not overlapping, where each range specifies a non-inclusive lower and upper bound for a partition. Any partitioning key values equal to or higher than the upper bound of the range are added to the next partition.</p>\n<h3 id=\"Composite\"><a href=\"#Composite\" class=\"headerlink\" title=\"Composite\"></a>Composite</h3><p>As the name suggests, composite partitioning partitions the data based on two or more partitioning techniques. Here we first partition the data using one technique, and then each partition is further subdivided into sub-partitions using the same or some other method.</p>\n<h2 id=\"Advantages-10\"><a href=\"#Advantages-10\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>But why do we need sharding? Here are some advantages:</p>\n<ul>\n<li><strong>Availability</strong>: Provides logical independence to the partitioned database, ensuring the high availability of our application. Here individual partitions can be managed independently.</li>\n<li><strong>Scalability</strong>: Proves to increase scalability by distributing the data across multiple partitions.</li>\n<li><strong>Security</strong>: Helps improve the system‚Äôs security by storing sensitive and non-sensitive data in different partitions. This could provide better manageability and security to sensitive data.</li>\n<li><strong>Query Performance</strong>: Improves the performance of the system. Instead of querying the whole database, now the system has to query only a smaller partition.</li>\n<li><strong>Data Manageability</strong>: Divides tables and indexes into smaller and more manageable units.</li>\n</ul>\n<h2 id=\"Disadvantages-8\"><a href=\"#Disadvantages-8\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><ul>\n<li><strong>Complexity</strong>: Sharding increases the complexity of the system in general.</li>\n<li><strong>Joins across shards</strong>: Once a database is partitioned and spread across multiple machines it is often not feasible to perform joins that span multiple database shards. Such joins will not be performance efficient since data has to be retrieved from multiple servers.</li>\n<li><strong>Rebalancing</strong>: If the data distribution is not uniform or there is a lot of load on a single shard, in such cases we have to rebalance our shards so that the requests are as equally distributed among the shards as possible.</li>\n</ul>\n<h2 id=\"When-to-use-sharding\"><a href=\"#When-to-use-sharding\" class=\"headerlink\" title=\"When to use sharding?\"></a>When to use sharding?</h2><p>Here are some reasons where sharding might be the right choice:</p>\n<ul>\n<li>Leveraging existing hardware instead of high-end machines.</li>\n<li>Maintain data in distinct geographic regions.</li>\n<li>Quickly scale by adding more shards.</li>\n<li>Better performance as each machine is under less load.</li>\n<li>When more concurrent connections are required.</li>\n</ul>\n<h1 id=\"Consistent-Hashing\"><a href=\"#Consistent-Hashing\" class=\"headerlink\" title=\"Consistent Hashing\"></a>Consistent Hashing</h1><p>Let‚Äôs first understand the problem we‚Äôre trying to solve.</p>\n<h2 id=\"Why-do-we-need-this\"><a href=\"#Why-do-we-need-this\" class=\"headerlink\" title=\"Why do we need this?\"></a>Why do we need this?</h2><p>In traditional hashing-based distribution methods, we use a hash function to hash our partition keys (i.e. request ID or IP). Then if we use the modulo against the total number of nodes (server or databases). This will give us the node where we want to route our request.</p>\n<p><img src=\"/assets/img/system-design/simple-hashing.jpg\" alt=\"simple-hashing\"></p>\n<p>$$<br>\\begin{align*}<br>&amp; Hash(key_1) \\to H_1 \\bmod N &#x3D; Node_0 \\<br>&amp; Hash(key_2) \\to H_2 \\bmod N &#x3D; Node_1 \\<br>&amp; Hash(key_3) \\to H_3 \\bmod N &#x3D; Node_2 \\<br>&amp; ‚Ä¶ \\<br>&amp; Hash(key_n) \\to H_n \\bmod N &#x3D; Node_{n-1}<br>\\end{align*}<br>$$</p>\n<p>Where,</p>\n<p><code>key</code>: Request ID or IP.</p>\n<p><code>H</code>: Hash function result.</p>\n<p><code>N</code>: Total number of nodes.</p>\n<p><code>Node</code>: The node where the request will be routed.</p>\n<p>The problem with this is if we add or remove a node, it will cause <code>N</code> to change, meaning our mapping strategy will break as the same requests will now map to a different server. As a consequence, the majority of requests will need to be redistributed which is very inefficient.</p>\n<p>We want to uniformly distribute requests among different nodes such that we should be able to add or remove nodes with minimal effort. Hence, we need a distribution scheme that does not depend directly on the number of nodes (or servers), so that, when adding or removing nodes, the number of keys that need to be relocated is minimized.</p>\n<p>Consistent hashing solves this horizontal scalability problem by ensuring that every time we scale up or down, we do not have to re-arrange all the keys or touch all the servers.</p>\n<p>Now that we understand the problem, let‚Äôs discuss consistent hashing in detail.</p>\n<h2 id=\"How-does-it-work\"><a href=\"#How-does-it-work\" class=\"headerlink\" title=\"How does it work\"></a>How does it work</h2><p>Consistent Hashing is a distributed hashing scheme that operates independently of the number of nodes in a distributed hash table by assigning them a position on an abstract circle, or hash ring. This allows servers and objects to scale without affecting the overall system.</p>\n<p><img src=\"/assets/img/system-design/consistent-hashing.jpg\" alt=\"consistent-hashing\"></p>\n<p>Using consistent hashing, only <code>K/N</code> data would require re-distributing.</p>\n<p>$$<br>R &#x3D; K&#x2F;N<br>$$</p>\n<p>Where,</p>\n<p><code>R</code>: Data that would require re-distribution.</p>\n<p><code>K</code>: Number of partition keys.</p>\n<p><code>N</code>: Number of nodes.</p>\n<p>The output of the hash function is a range let‚Äôs say <code>0...m-1</code> which we can represent on our hash ring. We hash the requests and distribute them on the ring depending on what the output was. Similarly, we also hash the node and distribute them on the same ring as well.</p>\n<p>$$<br>\\begin{align*}<br>&amp; Hash(key_1) &#x3D; P_1 \\<br>&amp; Hash(key_2) &#x3D; P_2 \\<br>&amp; Hash(key_3) &#x3D; P_3 \\<br>&amp; ‚Ä¶ \\<br>&amp; Hash(key_n) &#x3D; P_{m-1}<br>\\end{align*}<br>$$</p>\n<p>Where,</p>\n<p><code>key</code>: Request&#x2F;Node ID or IP.</p>\n<p><code>P</code>: Position on the hash ring.</p>\n<p><code>m</code>: Total range of the hash ring.</p>\n<p>Now, when the request comes in we can simply route it to the closest node in a clockwise (can be counterclockwise as well) manner. This means that if a new node is added or removed, we can use the nearest node and only a <em>fraction</em> of the requests need to be re-routed.</p>\n<p>In theory, consistent hashing should distribute the load evenly however it doesn‚Äôt happen in practice. Usually, the load distribution is uneven and one server may end up handling the majority of the request becoming a <em>hotspot</em>, essentially a bottleneck for the system. We can fix this by adding extra nodes but that can be expensive.</p>\n<p>Let‚Äôs see how we can address these issues.</p>\n<h2 id=\"Virtual-Nodes\"><a href=\"#Virtual-Nodes\" class=\"headerlink\" title=\"Virtual Nodes\"></a>Virtual Nodes</h2><p>In order to ensure a more evenly distributed load, we can introduce the idea of a virtual node, sometimes also referred to as a VNode.</p>\n<p>Instead of assigning a single position to a node, the hash range is divided into multiple smaller ranges, and each physical node is assigned several of these smaller ranges. Each of these subranges is considered a VNode. Hence, virtual nodes are basically existing physical nodes mapped multiple times across the hash ring to minimize changes to a node‚Äôs assigned range.</p>\n<p><img src=\"/assets/img/system-design/virtual-nodes.jpg\" alt=\"virtual-nodes\"></p>\n<p>For this, we can use <code>k</code> number of hash functions.</p>\n<p>$$<br>\\begin{align*}<br>&amp; Hash_1(key_1) &#x3D; P_1 \\<br>&amp; Hash_2(key_2) &#x3D; P_2 \\<br>&amp; Hash_3(key_3) &#x3D; P_3 \\<br>&amp; . . . \\<br>&amp; Hash_k(key_n) &#x3D; P_{m-1}<br>\\end{align*}<br>$$</p>\n<p>Where,</p>\n<p><code>key</code>: Request&#x2F;Node ID or IP.</p>\n<p><code>k</code>: Number of hash functions.</p>\n<p><code>P</code>: Position on the hash ring.</p>\n<p><code>m</code>: Total range of the hash ring.</p>\n<p>As VNodes help spread the load more evenly across the physical nodes on the cluster by diving the hash ranges into smaller subranges, this speeds up the re-balancing process after adding or removing nodes. This also helps us reduce the probability of hotspots.</p>\n<h2 id=\"Data-replication\"><a href=\"#Data-replication\" class=\"headerlink\" title=\"Data replication\"></a>Data replication</h2><p>To ensure high availability and durability, consistent hashing replicates each data item on multiple <code>N</code> nodes in the system where the value <code>N</code> is equivalent to the <em>replication factor</em>.</p>\n<p>The replication factor is the number of nodes that will receive the copy of the same data. In eventually consistent systems, this is done asynchronously.</p>\n<h2 id=\"Advantages-11\"><a href=\"#Advantages-11\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Let‚Äôs look at some advantages of consistent hashing:</p>\n<ul>\n<li>Makes rapid scaling up and down more predictable.</li>\n<li>Facilitates partitioning and replication across nodes.</li>\n<li>Enables scalability and availability.</li>\n<li>Reduces hotspots.</li>\n</ul>\n<h2 id=\"Disadvantages-9\"><a href=\"#Disadvantages-9\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><p>Below are some disadvantages of consistent hashing:</p>\n<ul>\n<li>Increases complexity.</li>\n<li>Cascading failures.</li>\n<li>Load distribution can still be uneven.</li>\n<li>Key management can be expensive when nodes transiently fail.</li>\n</ul>\n<h2 id=\"Examples-7\"><a href=\"#Examples-7\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Let‚Äôs look at some examples where consistent hashing is used:</p>\n<ul>\n<li>Data partitioning in <a href=\"https://cassandra.apache.org/\">Apache Cassandra</a>.</li>\n<li>Load distribution across multiple storage hosts in <a href=\"https://aws.amazon.com/dynamodb\">Amazon DynamoDB</a>.</li>\n</ul>\n<h1 id=\"Database-Federation\"><a href=\"#Database-Federation\" class=\"headerlink\" title=\"Database Federation\"></a>Database Federation</h1><p>Federation (or functional partitioning) splits up databases by function. The federation architecture makes several distinct physical databases appear as one logical database to end-users.</p>\n<p>All of the components in a federation are tied together by one or more federal schemas that express the commonality of data throughout the federation. These federated schemas are used to specify the information that can be shared by the federation components and to provide a common basis for communication among them.</p>\n<p><img src=\"/assets/img/system-design/database-federation.jpg\" alt=\"database-federation\"></p>\n<p>Federation also provides a cohesive, unified view of data derived from multiple sources. The data sources for federated systems can include databases and various other forms of structured and unstructured data.</p>\n<h2 id=\"Characteristics\"><a href=\"#Characteristics\" class=\"headerlink\" title=\"Characteristics\"></a>Characteristics</h2><p>Let‚Äôs look at some key characteristics of a federated database:</p>\n<ul>\n<li><strong>Transparency</strong>: Federated database masks user differences and implementations of underlying data sources. Therefore, the users do not need to be aware of where the data is stored.</li>\n<li><strong>Heterogeneity</strong>: Data sources can differ in many ways. A federated database system can handle different hardware, network protocols, data models, etc.</li>\n<li><strong>Extensibility</strong>: New sources may be needed to meet the changing needs of the business. A good federated database system needs to make it easy to add new sources.</li>\n<li><strong>Autonomy</strong>: A Federated database does not change existing data sources, interfaces should remain the same.</li>\n<li><strong>Data integration</strong>: A federated database can integrate data from different protocols, database management systems, etc.</li>\n</ul>\n<h2 id=\"Advantages-12\"><a href=\"#Advantages-12\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Here are some advantages of federated databases:</p>\n<ul>\n<li>Flexible data sharing.</li>\n<li>Autonomy among the database components.</li>\n<li>Access heterogeneous data in a unified way.</li>\n<li>No tight coupling of applications with legacy databases.</li>\n</ul>\n<h2 id=\"Disadvantages-10\"><a href=\"#Disadvantages-10\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><p>Below are some disadvantages of federated databases:</p>\n<ul>\n<li>Adds more hardware and additional complexity.</li>\n<li>Joining data from two databases is complex.</li>\n<li>Dependence on autonomous data sources.</li>\n<li>Query performance and scalability.</li>\n</ul>\n<h1 id=\"N-tier-architecture\"><a href=\"#N-tier-architecture\" class=\"headerlink\" title=\"N-tier architecture\"></a>N-tier architecture</h1><p>N-tier architecture divides an application into logical layers and physical tiers. Layers are a way to separate responsibilities and manage dependencies. Each layer has a specific responsibility. A higher layer can use services in a lower layer, but not the other way around.</p>\n<p><img src=\"/assets/img/system-design/n-tier-architecture.jpg\" alt=\"n-tier-architecture\"></p>\n<p>Tiers are physically separated, running on separate machines. A tier can call to another tier directly, or use asynchronous messaging. Although each layer might be hosted in its own tier, that‚Äôs not required. Several layers might be hosted on the same tier. Physically separating the tiers improves scalability and resiliency and adds latency from the additional network communication.</p>\n<p>An N-tier architecture can be of two types:</p>\n<ul>\n<li>In a closed layer architecture, a layer can only call the next layer immediately down.</li>\n<li>In an open layer architecture, a layer can call any of the layers below it.</li>\n</ul>\n<p>A closed-layer architecture limits the dependencies between layers. However, it might create unnecessary network traffic, if one layer simply passes requests along to the next layer.</p>\n<h2 id=\"Types-of-N-Tier-architectures\"><a href=\"#Types-of-N-Tier-architectures\" class=\"headerlink\" title=\"Types of N-Tier architectures\"></a>Types of N-Tier architectures</h2><p>Let‚Äôs look at some examples of N-Tier architecture:</p>\n<h3 id=\"3-Tier-architecture\"><a href=\"#3-Tier-architecture\" class=\"headerlink\" title=\"3-Tier architecture\"></a>3-Tier architecture</h3><p>3-Tier is widely used and consists of the following different layers:</p>\n<ul>\n<li><strong>Presentation layer</strong>: Handles user interactions with the application.</li>\n<li><strong>Business Logic layer</strong>: Accepts the data from the application layer, validates it as per business logic and passes it to the data layer.</li>\n<li><strong>Data Access layer</strong>: Receives the data from the business layer and performs the necessary operation on the database.</li>\n</ul>\n<h3 id=\"2-Tier-architecture\"><a href=\"#2-Tier-architecture\" class=\"headerlink\" title=\"2-Tier architecture\"></a>2-Tier architecture</h3><p>In this architecture, the presentation layer runs on the client and communicates with a data store. There is no business logic layer or immediate layer between client and server.</p>\n<h3 id=\"Single-Tier-or-1-Tier-architecture\"><a href=\"#Single-Tier-or-1-Tier-architecture\" class=\"headerlink\" title=\"Single Tier or 1-Tier architecture\"></a>Single Tier or 1-Tier architecture</h3><p>It is the simplest one as it is equivalent to running the application on a personal computer. All of the required components for an application to run are on a single application or server.</p>\n<h2 id=\"Advantages-13\"><a href=\"#Advantages-13\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Here are some advantages of using N-tier architecture:</p>\n<ul>\n<li>Can improve availability.</li>\n<li>Better security as layers can behave like a firewall.</li>\n<li>Separate tiers allow us to scale them as needed.</li>\n<li>Improve maintenance as different people can manage different tiers.</li>\n</ul>\n<h2 id=\"Disadvantages-11\"><a href=\"#Disadvantages-11\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><p>Below are some disadvantages of N-tier architecture:</p>\n<ul>\n<li>Increased complexity of the system as a whole.</li>\n<li>Increased network latency as the number of tiers increases.</li>\n<li>Expensive as every tier will have its own hardware cost.</li>\n<li>Difficult to manage network security.</li>\n</ul>\n<h1 id=\"Message-Brokers\"><a href=\"#Message-Brokers\" class=\"headerlink\" title=\"Message Brokers\"></a>Message Brokers</h1><p>A message broker is a software that enables applications, systems, and services to communicate with each other and exchange information. The message broker does this by translating messages between formal messaging protocols. This allows interdependent services to <em>‚Äútalk‚Äù</em> with one another directly, even if they were written in different languages or implemented on different platforms.</p>\n<p><img src=\"/assets/img/system-design/message-broker.jpg\" alt=\"message-broker\"></p>\n<p>Message brokers can validate, store, route, and deliver messages to the appropriate destinations. They serve as intermediaries between other applications, allowing senders to issue messages without knowing where the receivers are, whether or not they are active, or how many of them there are. This facilitates the decoupling of processes and services within systems.</p>\n<h2 id=\"Models\"><a href=\"#Models\" class=\"headerlink\" title=\"Models\"></a>Models</h2><p>Message brokers offer two basic message distribution patterns or messaging styles:</p>\n<ul>\n<li><strong><a href=\"https://karanpratapsingh.com/courses/system-design/message-queues\">Point-to-Point messaging</a></strong>: This is the distribution pattern utilized in message queues with a one-to-one relationship between the message‚Äôs sender and receiver.</li>\n<li><strong><a href=\"https://karanpratapsingh.com/courses/system-design/publish-subscribe\">Publish-subscribe messaging</a></strong>: In this message distribution pattern, often referred to as <em>‚Äúpub&#x2F;sub‚Äù</em>, the producer of each message publishes it to a topic, and multiple message consumers subscribe to topics from which they want to receive messages.</li>\n</ul>\n<p><em>We will discuss these messaging patterns in detail in the later tutorials.</em></p>\n<h2 id=\"Message-brokers-vs-Event-streaming\"><a href=\"#Message-brokers-vs-Event-streaming\" class=\"headerlink\" title=\"Message brokers vs Event streaming\"></a>Message brokers vs Event streaming</h2><p>Message brokers can support two or more messaging patterns, including message queues and pub&#x2F;sub, while event streaming platforms only offer pub&#x2F;sub-style distribution patterns. Designed for use with high volumes of messages, event streaming platforms are readily scalable. They‚Äôre capable of ordering streams of records into categories called <em>topics</em> and storing them for a predetermined amount of time. Unlike message brokers, however, event streaming platforms cannot guarantee message delivery or track which consumers have received the messages.</p>\n<p>Event streaming platforms offer more scalability than message brokers but fewer features that ensure fault tolerance like message resending, as well as more limited message routing and queueing capabilities.</p>\n<h2 id=\"Message-brokers-vs-Enterprise-Service-Bus-ESB\"><a href=\"#Message-brokers-vs-Enterprise-Service-Bus-ESB\" class=\"headerlink\" title=\"Message brokers vs Enterprise Service Bus (ESB)\"></a>Message brokers vs Enterprise Service Bus (ESB)</h2><p><a href=\"https://karanpratapsingh.com/courses/system-design/enterprise-service-bus\">Enterprise Service Bus (ESB)</a> infrastructure is complex and can be challenging to integrate and expensive to maintain. It‚Äôs difficult to troubleshoot them when problems occur in production environments, they‚Äôre not easy to scale, and updating is tedious.</p>\n<p>Whereas message brokers are a <em>‚Äúlightweight‚Äù</em> alternative to ESBs that provide similar functionality, a mechanism for inter-service communication, at a lower cost. They‚Äôre well-suited for use in the <a href=\"https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices\">microservices architectures</a> that have become more prevalent as ESBs have fallen out of favor.</p>\n<h2 id=\"Examples-8\"><a href=\"#Examples-8\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Here are some commonly used message brokers:</p>\n<ul>\n<li><a href=\"https://nats.io/\">NATS</a></li>\n<li><a href=\"https://kafka.apache.org/\">Apache Kafka</a></li>\n<li><a href=\"https://www.rabbitmq.com/\">RabbitMQ</a></li>\n<li><a href=\"https://activemq.apache.org/\">ActiveMQ</a></li>\n</ul>\n<h1 id=\"Message-Queues\"><a href=\"#Message-Queues\" class=\"headerlink\" title=\"Message Queues\"></a>Message Queues</h1><p>A message queue is a form of service-to-service communication that facilitates asynchronous communication. It asynchronously receives messages from producers and sends them to consumers.</p>\n<p>Queues are used to effectively manage requests in large-scale distributed systems. In small systems with minimal processing loads and small databases, writes can be predictably fast. However, in more complex and large systems writes can take an almost non-deterministic amount of time.</p>\n<p><img src=\"/assets/img/system-design/message-queue.jpg\" alt=\"message-queue\"></p>\n<h2 id=\"Working\"><a href=\"#Working\" class=\"headerlink\" title=\"Working\"></a>Working</h2><p>Messages are stored in the queue until they are processed and deleted. Each message is processed only once by a single consumer. Here‚Äôs how it works:</p>\n<ul>\n<li>A producer publishes a job to the queue, then notifies the user of the job status.</li>\n<li>A consumer picks up the job from the queue, processes it, then signals that the job is complete.</li>\n</ul>\n<h2 id=\"Advantages-14\"><a href=\"#Advantages-14\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Let‚Äôs discuss some advantages of using a message queue:</p>\n<ul>\n<li><strong>Scalability</strong>: Message queues make it possible to scale precisely where we need to. When workloads peak, multiple instances of our application can all add requests to the queue without the risk of collision</li>\n<li><strong>Decoupling</strong>: Message queues remove dependencies between components and significantly simplify the implementation of decoupled applications.</li>\n<li><strong>Performance</strong>: Message queues enable asynchronous communication, which means that the endpoints that are producing and consuming messages interact with the queue, not each other. Producers can add requests to the queue without waiting for them to be processed.</li>\n<li><strong>Reliability</strong>: Queues make our data persistent, and reduce the errors that happen when different parts of our system go offline.</li>\n</ul>\n<h2 id=\"Features-1\"><a href=\"#Features-1\" class=\"headerlink\" title=\"Features\"></a>Features</h2><p>Now, let‚Äôs discuss some desired features of message queues:</p>\n<h3 id=\"Push-or-Pull-Delivery\"><a href=\"#Push-or-Pull-Delivery\" class=\"headerlink\" title=\"Push or Pull Delivery\"></a>Push or Pull Delivery</h3><p>Most message queues provide both push and pull options for retrieving messages. Pull means continuously querying the queue for new messages. Push means that a consumer is notified when a message is available. We can also use long-polling to allow pulls to wait a specified amount of time for new messages to arrive.</p>\n<h3 id=\"FIFO-First-In-First-Out-Queues\"><a href=\"#FIFO-First-In-First-Out-Queues\" class=\"headerlink\" title=\"FIFO (First-In-First-Out) Queues\"></a>FIFO (First-In-First-Out) Queues</h3><p>In these queues, the oldest (or first) entry, sometimes called the <em>‚Äúhead‚Äù</em> of the queue, is processed first.</p>\n<h3 id=\"Schedule-or-Delay-Delivery\"><a href=\"#Schedule-or-Delay-Delivery\" class=\"headerlink\" title=\"Schedule or Delay Delivery\"></a>Schedule or Delay Delivery</h3><p>Many message queues support setting a specific delivery time for a message. If we need to have a common delay for all messages, we can set up a delay queue.</p>\n<h3 id=\"At-Least-Once-Delivery\"><a href=\"#At-Least-Once-Delivery\" class=\"headerlink\" title=\"At-Least-Once Delivery\"></a>At-Least-Once Delivery</h3><p>Message queues may store multiple copies of messages for redundancy and high availability, and resend messages in the event of communication failures or errors to ensure they are delivered at least once.</p>\n<h3 id=\"Exactly-Once-Delivery\"><a href=\"#Exactly-Once-Delivery\" class=\"headerlink\" title=\"Exactly-Once Delivery\"></a>Exactly-Once Delivery</h3><p>When duplicates can‚Äôt be tolerated, FIFO (first-in-first-out) message queues will make sure that each message is delivered exactly once (and only once) by filtering out duplicates automatically.</p>\n<h3 id=\"Dead-letter-Queues\"><a href=\"#Dead-letter-Queues\" class=\"headerlink\" title=\"Dead-letter Queues\"></a>Dead-letter Queues</h3><p>A dead-letter queue is a queue to which other queues can send messages that can‚Äôt be processed successfully. This makes it easy to set them aside for further inspection without blocking the queue processing or spending CPU cycles on a message that might never be consumed successfully.</p>\n<h3 id=\"Ordering\"><a href=\"#Ordering\" class=\"headerlink\" title=\"Ordering\"></a>Ordering</h3><p>Most message queues provide best-effort ordering which ensures that messages are generally delivered in the same order as they‚Äôre sent and that a message is delivered at least once.</p>\n<h3 id=\"Poison-pill-Messages\"><a href=\"#Poison-pill-Messages\" class=\"headerlink\" title=\"Poison-pill Messages\"></a>Poison-pill Messages</h3><p>Poison pills are special messages that can be received, but not processed. They are a mechanism used in order to signal a consumer to end its work so it is no longer waiting for new inputs, and are similar to closing a socket in a client&#x2F;server model.</p>\n<h3 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h3><p>Message queues will authenticate applications that try to access the queue, this allows us to encrypt messages over the network as well as in the queue itself.</p>\n<h3 id=\"Task-Queues\"><a href=\"#Task-Queues\" class=\"headerlink\" title=\"Task Queues\"></a>Task Queues</h3><p>Tasks queues receive tasks and their related data, run them, then deliver their results. They can support scheduling and can be used to run computationally-intensive jobs in the background.</p>\n<h2 id=\"Backpressure\"><a href=\"#Backpressure\" class=\"headerlink\" title=\"Backpressure\"></a>Backpressure</h2><p>If queues start to grow significantly, the queue size can become larger than memory, resulting in cache misses, disk reads, and even slower performance. Backpressure can help by limiting the queue size, thereby maintaining a high throughput rate and good response times for jobs already in the queue. Once the queue fills up, clients get a server busy or HTTP 503 status code to try again later. Clients can retry the request at a later time, perhaps with <a href=\"https://en.wikipedia.org/wiki/Exponential_backoff\">exponential backoff</a> strategy.</p>\n<h2 id=\"Examples-9\"><a href=\"#Examples-9\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Following are some widely used message queues:</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/sqs\">Amazon SQS</a></li>\n<li><a href=\"https://www.rabbitmq.com/\">RabbitMQ</a></li>\n<li><a href=\"https://activemq.apache.org/\">ActiveMQ</a></li>\n<li><a href=\"https://zeromq.org/\">ZeroMQ</a></li>\n</ul>\n<h1 id=\"Publish-Subscribe\"><a href=\"#Publish-Subscribe\" class=\"headerlink\" title=\"Publish-Subscribe\"></a>Publish-Subscribe</h1><p>Similar to a message queue, publish-subscribe is also a form of service-to-service communication that facilitates asynchronous communication. In a pub&#x2F;sub model, any message published to a topic is pushed immediately to all the subscribers of the topic.</p>\n<p><img src=\"/assets/img/system-design/publish-subscribe.jpg\" alt=\"publish-subscribe\"></p>\n<p>The subscribers to the message topic often perform different functions, and can each do something different with the message in parallel. The publisher doesn‚Äôt need to know who is using the information that it is broadcasting, and the subscribers don‚Äôt need to know where the message comes from. This style of messaging is a bit different than message queues, where the component that sends the message often knows the destination it is sending to.</p>\n<h2 id=\"Working-1\"><a href=\"#Working-1\" class=\"headerlink\" title=\"Working\"></a>Working</h2><p>Unlike message queues, which batch messages until they are retrieved, message topics transfer messages with little or no queuing and push them out immediately to all subscribers. Here‚Äôs how it works:</p>\n<ul>\n<li>A message topic provides a lightweight mechanism to broadcast asynchronous event notifications and endpoints that allow software components to connect to the topic in order to send and receive those messages.</li>\n<li>To broadcast a message, a component called a <em>publisher</em> simply pushes a message to the topic.</li>\n<li>All components that subscribe to the topic (known as <em>subscribers</em>) will receive every message that was broadcasted.</li>\n</ul>\n<h2 id=\"Advantages-15\"><a href=\"#Advantages-15\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Let‚Äôs discuss some advantages of using publish-subscribe:</p>\n<ul>\n<li><strong>Eliminate Polling</strong>: Message topics allow instantaneous, push-based delivery, eliminating the need for message consumers to periodically check or <em>‚Äúpoll‚Äù</em> for new information and updates. This promotes faster response time and reduces the delivery latency which can be particularly problematic in systems where delays cannot be tolerated.</li>\n<li><strong>Dynamic Targeting</strong>: Pub&#x2F;Sub makes the discovery of services easier, more natural, and less error-prone. Instead of maintaining a roster of peers where an application can send messages, a publisher will simply post messages to a topic. Then, any interested party will subscribe its endpoint to the topic, and start receiving these messages. Subscribers can change, upgrade, multiply or disappear and the system dynamically adjusts.</li>\n<li><strong>Decoupled and Independent Scaling</strong>: Publishers and subscribers are decoupled and work independently from each other, which allows us to develop and scale them independently.</li>\n<li><strong>Simplify Communication</strong>: The Publish-Subscribe model reduces complexity by removing all the point-to-point connections with a single connection to a message topic, which will manage subscriptions and decide what messages should be delivered to which endpoints.</li>\n</ul>\n<h2 id=\"Features-2\"><a href=\"#Features-2\" class=\"headerlink\" title=\"Features\"></a>Features</h2><p>Now, let‚Äôs discuss some desired features of publish-subscribe:</p>\n<h3 id=\"Push-Delivery\"><a href=\"#Push-Delivery\" class=\"headerlink\" title=\"Push Delivery\"></a>Push Delivery</h3><p>Pub&#x2F;Sub messaging instantly pushes asynchronous event notifications when messages are published to the message topic. Subscribers are notified when a message is available.</p>\n<h3 id=\"Multiple-Delivery-Protocols\"><a href=\"#Multiple-Delivery-Protocols\" class=\"headerlink\" title=\"Multiple Delivery Protocols\"></a>Multiple Delivery Protocols</h3><p>In the Publish-Subscribe model, topics can typically connect to multiple types of endpoints, such as message queues, serverless functions, HTTP servers, etc.</p>\n<h3 id=\"Fanout\"><a href=\"#Fanout\" class=\"headerlink\" title=\"Fanout\"></a>Fanout</h3><p>This scenario happens when a message is sent to a topic and then replicated and pushed to multiple endpoints. Fanout provides asynchronous event notifications which in turn allows for parallel processing.</p>\n<h3 id=\"Filtering\"><a href=\"#Filtering\" class=\"headerlink\" title=\"Filtering\"></a>Filtering</h3><p>This feature empowers the subscriber to create a message filtering policy so that it will only get the notifications it is interested in, as opposed to receiving every single message posted to the topic.</p>\n<h3 id=\"Durability\"><a href=\"#Durability\" class=\"headerlink\" title=\"Durability\"></a>Durability</h3><p>Pub&#x2F;Sub messaging services often provide very high durability, and at least once delivery, by storing copies of the same message on multiple servers.</p>\n<h3 id=\"Security-1\"><a href=\"#Security-1\" class=\"headerlink\" title=\"Security\"></a>Security</h3><p>Message topics authenticate applications that try to publish content, this allows us to use encrypted endpoints and encrypt messages in transit over the network.</p>\n<h2 id=\"Examples-10\"><a href=\"#Examples-10\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Here are some technologies commonly used for publish-subscribe:</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/sns\">Amazon SNS</a></li>\n<li><a href=\"https://cloud.google.com/pubsub\">Google Pub&#x2F;Sub</a></li>\n</ul>\n<h1 id=\"Enterprise-Service-Bus-ESB\"><a href=\"#Enterprise-Service-Bus-ESB\" class=\"headerlink\" title=\"Enterprise Service Bus (ESB)\"></a>Enterprise Service Bus (ESB)</h1><p>An Enterprise Service Bus (ESB) is an architectural pattern whereby a centralized software component performs integrations between applications. It performs transformations of data models, handles connectivity, performs message routing, converts communication protocols, and potentially manages the composition of multiple requests. The ESB can make these integrations and transformations available as a service interface for reuse by new applications.</p>\n<p><img src=\"/assets/img/system-design/enterprise-service-bus.jpg\" alt=\"enterprise-service-bus\"></p>\n<h2 id=\"Advantages-16\"><a href=\"#Advantages-16\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>In theory, a centralized ESB offers the potential to standardize and dramatically simplify communication, messaging, and integration between services across the enterprise. Here are some advantages of using an ESB:</p>\n<ul>\n<li><strong>Improved developer productivity</strong>: Enables developers to incorporate new technologies into one part of an application without touching the rest of the application.</li>\n<li><strong>Simpler, more cost-effective scalability</strong>: Components can be scaled independently of others.</li>\n<li><strong>Greater resilience</strong>: Failure of one component does not impact the others, and each microservice can adhere to its own availability requirements without risking the availability of other components in the system.</li>\n</ul>\n<h2 id=\"Disadvantages-12\"><a href=\"#Disadvantages-12\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><p>While ESBs were deployed successfully in many organizations, in many other organizations the ESB came to be seen as a bottleneck. Here are some disadvantages of using an ESB:</p>\n<ul>\n<li>Making changes or enhancements to one integration could destabilize others who use that same integration.</li>\n<li>A single point of failure can bring down all communications.</li>\n<li>Updates to the ESB often impact existing integrations, so there is significant testing required to perform any update.</li>\n<li>ESB is centrally managed which makes cross-team collaboration challenging.</li>\n<li>High configuration and maintenance complexity.</li>\n</ul>\n<h2 id=\"Examples-11\"><a href=\"#Examples-11\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Below are some widely used Enterprise Service Bus (ESB) technologies:</p>\n<ul>\n<li><a href=\"https://azure.microsoft.com/en-in/services/service-bus\">Azure Service Bus</a></li>\n<li><a href=\"https://www.ibm.com/in-en/cloud/app-connect\">IBM App Connect</a></li>\n<li><a href=\"https://camel.apache.org/\">Apache Camel</a></li>\n<li><a href=\"https://www.redhat.com/en/technologies/jboss-middleware/fuse\">Fuse ESB</a></li>\n</ul>\n<h1 id=\"Monoliths-and-Microservices\"><a href=\"#Monoliths-and-Microservices\" class=\"headerlink\" title=\"Monoliths and Microservices\"></a>Monoliths and Microservices</h1><h2 id=\"Monoliths\"><a href=\"#Monoliths\" class=\"headerlink\" title=\"Monoliths\"></a>Monoliths</h2><p>A monolith is a self-contained and independent application. It is built as a single unit and is responsible for not just a particular task, but can perform every step needed to satisfy a business need.</p>\n<p><img src=\"/assets/img/system-design/monolith.jpg\" alt=\"monolith\"></p>\n<h3 id=\"Advantages-17\"><a href=\"#Advantages-17\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><p>Following are some advantages of monoliths:</p>\n<ul>\n<li>Simple to develop or debug.</li>\n<li>Fast and reliable communication.</li>\n<li>Easy monitoring and testing.</li>\n<li>Supports ACID transactions.</li>\n</ul>\n<h3 id=\"Disadvantages-13\"><a href=\"#Disadvantages-13\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><p>Some common disadvantages of monoliths are:</p>\n<ul>\n<li>Maintenance becomes hard as the codebase grows.</li>\n<li>Tightly coupled application, hard to extend.</li>\n<li>Requires commitment to a particular technology stack.</li>\n<li>On each update, the entire application is redeployed.</li>\n<li>Reduced reliability as a single bug can bring down the entire system.</li>\n<li>Difficult to scale or adopt technologies new technologies.</li>\n</ul>\n<h2 id=\"Modular-monoliths\"><a href=\"#Modular-monoliths\" class=\"headerlink\" title=\"Modular monoliths\"></a>Modular monoliths</h2><p>A Modular Monolith is an approach where we build and deploy a single application (that‚Äôs the <em>Monolith</em> part), but we build it in a way that breaks up the code into independent modules for each of the features needed in our application.</p>\n<p>This approach reduces the dependencies of a module in such as way that we can enhance or change a module without affecting other modules. When done right, this can be really beneficial in the long term as it reduces the complexity that comes with maintaining a monolith as the system grows.</p>\n<h2 id=\"Microservices\"><a href=\"#Microservices\" class=\"headerlink\" title=\"Microservices\"></a>Microservices</h2><p>A microservices architecture consists of a collection of small, autonomous services where each service is self-contained and should implement a single business capability within a bounded context. A bounded context is a natural division of business logic that provides an explicit boundary within which a domain model exists.</p>\n<p><img src=\"/assets/img/system-design/microservices.jpg\" alt=\"microservices\"></p>\n<p>Each service has a separate codebase, which can be managed by a small development team. Services can be deployed independently and a team can update an existing service without rebuilding and redeploying the entire application.</p>\n<p>Services are responsible for persisting their own data or external state (database per service). This differs from the traditional model, where a separate data layer handles data persistence.</p>\n<h3 id=\"Characteristics-1\"><a href=\"#Characteristics-1\" class=\"headerlink\" title=\"Characteristics\"></a>Characteristics</h3><p>The microservices architecture style has the following characteristics:</p>\n<ul>\n<li><strong>Loosely coupled</strong>: Services should be loosely coupled so that they can be independently deployed and scaled. This will lead to the decentralization of development teams and thus, enabling them to develop and deploy faster with minimal constraints and operational dependencies.</li>\n<li><strong>Small but focused</strong>: It‚Äôs about scope and responsibilities and not size, a service should be focused on a specific problem. Basically, <em>‚ÄúIt does one thing and does it well‚Äù</em>. Ideally, they can be independent of the underlying architecture.</li>\n<li><strong>Built for businesses</strong>: The microservices architecture is usually organized around business capabilities and priorities.</li>\n<li><strong>Resilience &amp; Fault tolerance</strong>: Services should be designed in such a way that they still function in case of failure or errors. In environments with independently deployable services, failure tolerance is of the highest importance.</li>\n<li><strong>Highly maintainable</strong>: Service should be easy to maintainable and test because services that cannot be maintained will be re-written.</li>\n</ul>\n<h3 id=\"Advantages-18\"><a href=\"#Advantages-18\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><p>Here are some advantages of microservices architecture:</p>\n<ul>\n<li>Loosely coupled services.</li>\n<li>Services can be deployed independently.</li>\n<li>Highly agile for multiple development teams.</li>\n<li>Improves fault tolerance and data isolation.</li>\n<li>Better scalability as each service can be scaled independently.</li>\n<li>Eliminates any long-term commitment to a particular technology stack.</li>\n</ul>\n<h3 id=\"Disadvantages-14\"><a href=\"#Disadvantages-14\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><p>Microservices architecture brings its own set of challenges:</p>\n<ul>\n<li>Complexity of a distributed system.</li>\n<li>Testing is more difficult.</li>\n<li>Expensive to maintain (individual servers, databases, etc.).</li>\n<li>Inter-service communication has its own challenges.</li>\n<li>Data integrity and consistency.</li>\n<li>Network congestion and latency.</li>\n</ul>\n<h3 id=\"Best-practices\"><a href=\"#Best-practices\" class=\"headerlink\" title=\"Best practices\"></a>Best practices</h3><p>Let‚Äôs discuss some microservices best practices:</p>\n<ul>\n<li>Model services around the business domain.</li>\n<li>Services should have loose coupling and high functional cohesion.</li>\n<li>Isolate failures and use resiliency strategies to prevent failures within a service from cascading.</li>\n<li>Services should only communicate through well-designed APIs. Avoid leaking implementation details.</li>\n<li>Data storage should be private to the service that owns the data</li>\n<li>Avoid coupling between services. Causes of coupling include shared database schemas and rigid communication protocols.</li>\n<li>Decentralize everything. Individual teams are responsible for designing and building services. Avoid sharing code or data schemas.</li>\n<li>Fail fast by using a <a href=\"https://karanpratapsingh.com/courses/system-design/circuit-breaker\">circuit breaker</a> to achieve fault tolerance.</li>\n<li>Ensure that the API changes are backward compatible.</li>\n</ul>\n<h3 id=\"Pitfalls\"><a href=\"#Pitfalls\" class=\"headerlink\" title=\"Pitfalls\"></a>Pitfalls</h3><p>Below are some common pitfalls of microservices architecture:</p>\n<ul>\n<li>Service boundaries are not based on the business domain.</li>\n<li>Underestimating how hard is to build a distributed system.</li>\n<li>Shared database or common dependencies between services.</li>\n<li>Lack of Business Alignment.</li>\n<li>Lack of clear ownership.</li>\n<li>Lack of idempotency.</li>\n<li>Trying to do everything <a href=\"https://karanpratapsingh.com/courses/system-design/acid-and-base-consistency-models\">ACID instead of BASE</a>.</li>\n<li>Lack of design for fault tolerance may result in cascading failures.</li>\n</ul>\n<h2 id=\"Beware-of-the-distributed-monolith\"><a href=\"#Beware-of-the-distributed-monolith\" class=\"headerlink\" title=\"Beware of the distributed monolith\"></a>Beware of the distributed monolith</h2><p>Distributed Monolith is a system that resembles the microservices architecture but is tightly coupled within itself like a monolithic application. Adopting microservices architecture comes with a lot of advantages. But while making one, there are good chances that we might end up with a distributed monolith.</p>\n<p>Our microservices are just a distributed monolith if any of these apply to it:</p>\n<ul>\n<li>Requires low latency communication.</li>\n<li>Services don‚Äôt scale easily.</li>\n<li>Dependency between services.</li>\n<li>Sharing the same resources such as databases.</li>\n<li>Tightly coupled systems.</li>\n</ul>\n<p>One of the primary reasons to build an application using microservices architecture is to have scalability. Therefore, microservices should have loosely coupled services which enable every service to be independent. The distributed monolith architecture takes this away and causes most components to depend on one another, increasing design complexity.</p>\n<h2 id=\"Microservices-vs-Service-oriented-architecture-SOA\"><a href=\"#Microservices-vs-Service-oriented-architecture-SOA\" class=\"headerlink\" title=\"Microservices vs Service-oriented architecture (SOA)\"></a>Microservices vs Service-oriented architecture (SOA)</h2><p>You might have seen <em>Service-oriented architecture (SOA)</em> mentioned around the internet, sometimes even interchangeably with microservices, but they are different from each other and the main distinction between the two approaches comes down to <em>scope</em>.</p>\n<p>Service-oriented architecture (SOA) defines a way to make software components reusable via service interfaces. These interfaces utilize common communication standards and focus on maximizing application service reusability whereas microservices are built as a collection of various smallest independent service units focused on team autonomy and decoupling.</p>\n<h2 id=\"Why-you-don‚Äôt-need-microservices\"><a href=\"#Why-you-don‚Äôt-need-microservices\" class=\"headerlink\" title=\"Why you don‚Äôt need microservices\"></a>Why you don‚Äôt need microservices</h2><p><img src=\"/assets/img/system-design/architecture-range.jpg\" alt=\"architecture-range\"></p>\n<p>So, you might be wondering, monoliths seem like a bad idea to begin with, why would anyone use that?</p>\n<p>Well, it depends. While each approach has its own advantages and disadvantages, it is advised to start with a monolith when building a new system. It is important to understand, that microservices are not a silver bullet instead they solve an organizational problem. Microservices architecture is about your organizational priorities and team as much as it‚Äôs about technology.</p>\n<p>Before making the decision to move to microservices architecture, you need to ask yourself questions like:</p>\n<ul>\n<li><em>‚ÄúIs the team too large to work effectively on a shared codebase?‚Äù</em></li>\n<li><em>‚ÄúAre teams blocked on other teams?‚Äù</em></li>\n<li><em>‚ÄúDoes microservices deliver clear business value for us?‚Äù</em></li>\n<li><em>‚ÄúIs my business mature enough to use microservices?‚Äù</em></li>\n<li><em>‚ÄúIs our current architecture limiting us with communication overhead?‚Äù</em></li>\n</ul>\n<p>If your application does not require to be broken down into microservices, you don‚Äôt need this. There is no absolute necessity that all applications should be broken down into microservices.</p>\n<p>We frequently draw inspiration from companies such as Netflix and their use of microservices, but we overlook the fact that we are not Netflix. They went through a lot of iterations and models before they had a market-ready solution, and this architecture became acceptable for them when they identified and solved the problem they were trying to tackle.</p>\n<p>That‚Äôs why it‚Äôs essential to understand in-depth if your business <em>actually</em> needs microservices. What I‚Äôm trying to say is microservices are solutions to complex concerns and if your business doesn‚Äôt have complex issues, you don‚Äôt need them.</p>\n<h1 id=\"Event-Driven-Architecture-EDA\"><a href=\"#Event-Driven-Architecture-EDA\" class=\"headerlink\" title=\"Event-Driven Architecture (EDA)\"></a>Event-Driven Architecture (EDA)</h1><p>Event-Driven Architecture (EDA) is about using events as a way to communicate within a system. Generally, leveraging a message broker to publish and consume events asynchronously. The publisher is unaware of who is consuming an event and the consumers are unaware of each other. Event-Driven Architecture is simply a way of achieving loose coupling between services within a system.</p>\n<h2 id=\"What-is-an-event\"><a href=\"#What-is-an-event\" class=\"headerlink\" title=\"What is an event?\"></a>What is an event?</h2><p>An event is a data point that represents state changes in a system. It doesn‚Äôt specify what should happen and how the change should modify the system, it only notifies the system of a particular state change. When a user makes an action, they trigger an event.</p>\n<h2 id=\"Components-1\"><a href=\"#Components-1\" class=\"headerlink\" title=\"Components\"></a>Components</h2><p>Event-driven architectures have three key components:</p>\n<ul>\n<li><strong>Event producers</strong>: Publishes an event to the router.</li>\n<li><strong>Event routers</strong>: Filters and pushes the events to consumers.</li>\n<li><strong>Event consumers</strong>: Uses events to reflect changes in the system.</li>\n</ul>\n<p><img src=\"/assets/img/system-design/event-driven-architecture.jpg\" alt=\"event-driven-architecture\"></p>\n<p><em>Note: Dots in the diagram represents different events in the system.</em></p>\n<h2 id=\"Patterns\"><a href=\"#Patterns\" class=\"headerlink\" title=\"Patterns\"></a>Patterns</h2><p>There are several ways to implement the event-driven architecture, and which method we use depends on the use case but here are some common examples:</p>\n<ul>\n<li><a href=\"https://karanpratapsingh.com/courses/system-design/distributed-transactions#sagas\">Sagas</a></li>\n<li><a href=\"https://karanpratapsingh.com/courses/system-design/publish-subscribe\">Publish-Subscribe</a></li>\n<li><a href=\"https://karanpratapsingh.com/courses/system-design/event-sourcing\">Event Sourcing</a></li>\n<li><a href=\"https://karanpratapsingh.com/courses/system-design/command-and-query-responsibility-segregation\">Command and Query Responsibility Segregation (CQRS)</a></li>\n</ul>\n<p><em>Note: Each of these methods is discussed separately.</em></p>\n<h2 id=\"Advantages-19\"><a href=\"#Advantages-19\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Let‚Äôs discuss some advantages:</p>\n<ul>\n<li>Decoupled producers and consumers.</li>\n<li>Highly scalable and distributed.</li>\n<li>Easy to add new consumers.</li>\n<li>Improves agility.</li>\n</ul>\n<h2 id=\"Challenges-2\"><a href=\"#Challenges-2\" class=\"headerlink\" title=\"Challenges\"></a>Challenges</h2><p>Here are some challenges of event-drive architecture:</p>\n<ul>\n<li>Guaranteed delivery.</li>\n<li>Error handling is difficult.</li>\n<li>Event-driven systems are complex in general.</li>\n<li>Exactly once, in-order processing of events.</li>\n</ul>\n<h2 id=\"Use-cases-1\"><a href=\"#Use-cases-1\" class=\"headerlink\" title=\"Use cases\"></a>Use cases</h2><p>Below are some common use cases where event-driven architectures are beneficial:</p>\n<ul>\n<li>Metadata and metrics.</li>\n<li>Server and security logs.</li>\n<li>Integrating heterogeneous systems.</li>\n<li>Fanout and parallel processing.</li>\n</ul>\n<h2 id=\"Examples-12\"><a href=\"#Examples-12\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Here are some widely used technologies for implementing event-driven architectures:</p>\n<ul>\n<li><a href=\"https://nats.io/\">NATS</a></li>\n<li><a href=\"https://kafka.apache.org/\">Apache Kafka</a></li>\n<li><a href=\"https://aws.amazon.com/eventbridge\">Amazon EventBridge</a></li>\n<li><a href=\"https://aws.amazon.com/sns\">Amazon SNS</a></li>\n<li><a href=\"https://cloud.google.com/pubsub\">Google PubSub</a></li>\n</ul>\n<h1 id=\"Event-Sourcing\"><a href=\"#Event-Sourcing\" class=\"headerlink\" title=\"Event Sourcing\"></a>Event Sourcing</h1><p>Instead of storing just the current state of the data in a domain, use an append-only store to record the full series of actions taken on that data. The store acts as the system of record and can be used to materialize the domain objects.</p>\n<p><img src=\"/assets/img/system-design/event-sourcing.jpg\" alt=\"event-sourcing\"></p>\n<p>This can simplify tasks in complex domains, by avoiding the need to synchronize the data model and the business domain, while improving performance, scalability, and responsiveness. It can also provide consistency for transactional data, and maintain full audit trails and history that can enable compensating actions.</p>\n<h2 id=\"Event-sourcing-vs-Event-Driven-Architecture-EDA\"><a href=\"#Event-sourcing-vs-Event-Driven-Architecture-EDA\" class=\"headerlink\" title=\"Event sourcing vs Event-Driven Architecture (EDA)\"></a>Event sourcing vs Event-Driven Architecture (EDA)</h2><p>Event sourcing is seemingly constantly being confused with <a href=\"https://karanpratapsingh.com/courses/system-design/event-driven-architecture\">Event-driven Architecture (EDA)</a>. Event-driven architecture is about using events to communicate between service boundaries. Generally, leveraging a message broker to publish and consume events asynchronously within other boundaries.</p>\n<p>Whereas, event sourcing is about using events as a state, which is a different approach to storing data. Rather than storing the current state, we‚Äôre instead going to be storing events. Also, event sourcing is one of the several patterns to implement an event-driven architecture.</p>\n<h2 id=\"Advantages-20\"><a href=\"#Advantages-20\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Let‚Äôs discuss some advantages of using event sourcing:</p>\n<ul>\n<li>Excellent for real-time data reporting.</li>\n<li>Great for fail-safety, data can be reconstituted from the event store.</li>\n<li>Extremely flexible, any type of message can be stored.</li>\n<li>Preferred way of achieving audit logs functionality for high compliance systems.</li>\n</ul>\n<h2 id=\"Disadvantages-15\"><a href=\"#Disadvantages-15\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><p>Following are the disadvantages of event sourcing:</p>\n<ul>\n<li>Requires an extremely efficient network infrastructure.</li>\n<li>Requires a reliable way to control message formats, such as a schema registry.</li>\n<li>Different events will contain different payloads.</li>\n</ul>\n<h1 id=\"Command-and-Query-Responsibility-Segregation-CQRS\"><a href=\"#Command-and-Query-Responsibility-Segregation-CQRS\" class=\"headerlink\" title=\"Command and Query Responsibility Segregation (CQRS)\"></a>Command and Query Responsibility Segregation (CQRS)</h1><p>Command Query Responsibility Segregation (CQRS) is an architectural pattern that divides a system‚Äôs actions into commands and queries. It was first described by <a href=\"https://twitter.com/gregyoung\">Greg Young</a>.</p>\n<p>In CQRS, a <em>command</em> is an instruction, a directive to perform a specific task. It is an intention to change something and doesn‚Äôt return a value, only an indication of success or failure. And, a <em>query</em> is a request for information that doesn‚Äôt change the system‚Äôs state or cause any side effects.</p>\n<p><img src=\"/assets/img/system-design/command-and-query-responsibility-segregation.jpg\" alt=\"command-and-query-responsibility-segregation\"></p>\n<p>The core principle of CQRS is the separation of commands and queries. They perform fundamentally different roles within a system, and separating them means that each can be optimized as needed, which distributed systems can really benefit from.</p>\n<h2 id=\"CQRS-with-Event-Sourcing\"><a href=\"#CQRS-with-Event-Sourcing\" class=\"headerlink\" title=\"CQRS with Event Sourcing\"></a>CQRS with Event Sourcing</h2><p>The CQRS pattern is often used along with the Event Sourcing pattern. CQRS-based systems use separate read and write data models, each tailored to relevant tasks and often located in physically separate stores.</p>\n<p>When used with the Event Sourcing pattern, the store of events is the write model and is the official source of information. The read model of a CQRS-based system provides materialized views of the data, typically as highly denormalized views.</p>\n<h2 id=\"Advantages-21\"><a href=\"#Advantages-21\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Let‚Äôs discuss some advantages of CQRS:</p>\n<ul>\n<li>Allows independent scaling of read and write workloads.</li>\n<li>Easier scaling, optimizations, and architectural changes.</li>\n<li>Closer to business logic with loose coupling.</li>\n<li>The application can avoid complex joins when querying.</li>\n<li>Clear boundaries between the system behavior.</li>\n</ul>\n<h2 id=\"Disadvantages-16\"><a href=\"#Disadvantages-16\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><p>Below are some disadvantages of CQRS:</p>\n<ul>\n<li>More complex application design.</li>\n<li>Message failures or duplicate messages can occur.</li>\n<li>Dealing with eventual consistency is a challenge.</li>\n<li>Increased system maintenance efforts.</li>\n</ul>\n<h2 id=\"Use-cases-2\"><a href=\"#Use-cases-2\" class=\"headerlink\" title=\"Use cases\"></a>Use cases</h2><p>Here are some scenarios where CQRS will be helpful:</p>\n<ul>\n<li>The performance of data reads must be fine-tuned separately from the performance of data writes.</li>\n<li>The system is expected to evolve over time and might contain multiple versions of the model, or where business rules change regularly.</li>\n<li>Integration with other systems, especially in combination with event sourcing, where the temporal failure of one subsystem shouldn‚Äôt affect the availability of the others.</li>\n<li>Better security to ensure that only the right domain entities are performing writes on the data.</li>\n</ul>\n<h1 id=\"API-Gateway\"><a href=\"#API-Gateway\" class=\"headerlink\" title=\"API Gateway\"></a>API Gateway</h1><p>The API Gateway is an API management tool that sits between a client and a collection of backend services. It is a single entry point into a system that encapsulates the internal system architecture and provides an API that is tailored to each client. It also has other responsibilities such as authentication, monitoring, load balancing, caching, throttling, logging, etc.</p>\n<p><img src=\"/assets/img/system-design/api-gateway.jpg\" alt=\"api-gateway\"></p>\n<h2 id=\"Why-do-we-need-an-API-Gateway\"><a href=\"#Why-do-we-need-an-API-Gateway\" class=\"headerlink\" title=\"Why do we need an API Gateway?\"></a>Why do we need an API Gateway?</h2><p>The granularity of APIs provided by microservices is often different than what a client needs. Microservices typically provide fine-grained APIs, which means that clients need to interact with multiple services. Hence, an API gateway can provide a single entry point for all clients with some additional features and better management.</p>\n<h2 id=\"Features-3\"><a href=\"#Features-3\" class=\"headerlink\" title=\"Features\"></a>Features</h2><p>Below are some desired features of an API Gateway:</p>\n<ul>\n<li>Authentication and Authorization</li>\n<li><a href=\"https://karanpratapsingh.com/courses/system-design/service-discovery\">Service discovery</a></li>\n<li><a href=\"https://karanpratapsingh.com/courses/system-design/proxy#reverse-proxy\">Reverse Proxy</a></li>\n<li><a href=\"https://karanpratapsingh.com/courses/system-design/caching\">Caching</a></li>\n<li>Security</li>\n<li>Retry and <a href=\"https://karanpratapsingh.com/courses/system-design/circuit-breaker\">Circuit breaking</a></li>\n<li><a href=\"https://karanpratapsingh.com/courses/system-design/load-balancing\">Load balancing</a></li>\n<li>Logging, Tracing</li>\n<li>API composition</li>\n<li><a href=\"https://karanpratapsingh.com/courses/system-design/rate-limiting\">Rate limiting</a> and throttling</li>\n<li>Versioning</li>\n<li>Routing</li>\n<li>IP whitelisting or blacklisting</li>\n</ul>\n<h2 id=\"Advantages-22\"><a href=\"#Advantages-22\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Let‚Äôs look at some advantages of using an API Gateway:</p>\n<ul>\n<li>Encapsulates the internal structure of an API.</li>\n<li>Provides a centralized view of the API.</li>\n<li>Simplifies the client code.</li>\n<li>Monitoring, analytics, tracing, and other such features.</li>\n</ul>\n<h2 id=\"Disadvantages-17\"><a href=\"#Disadvantages-17\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><p>Here are some possible disadvantages of an API Gateway:</p>\n<ul>\n<li>Possible single point of failure.</li>\n<li>Might impact performance.</li>\n<li>Can become a bottleneck if not scaled properly.</li>\n<li>Configuration can be challenging.</li>\n</ul>\n<h2 id=\"Backend-For-Frontend-BFF-pattern\"><a href=\"#Backend-For-Frontend-BFF-pattern\" class=\"headerlink\" title=\"Backend For Frontend (BFF) pattern\"></a>Backend For Frontend (BFF) pattern</h2><p>In the Backend For Frontend (BFF) pattern, we create separate backend services to be consumed by specific frontend applications or interfaces. This pattern is useful when we want to avoid customizing a single backend for multiple interfaces. This pattern was first described by <a href=\"https://samnewman.io/\">Sam Newman</a>.</p>\n<p>Also, sometimes the output of data returned by the microservices to the front end is not in the exact format or filtered as needed by the front end. To solve this issue, the frontend should have some logic to reformat the data, and therefore, we can use BFF to shift some of this logic to the intermediate layer.</p>\n<p><img src=\"/assets/img/system-design/backend-for-frontend.jpg\" alt=\"backend-for-frontend\"></p>\n<p>The primary function of the backend for the frontend pattern is to get the required data from the appropriate service, format the data, and sent it to the frontend.</p>\n<p><em><a href=\"https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#graphql\">GraphQL</a> performs really well as a backend for frontend (BFF).</em></p>\n<h3 id=\"When-to-use-this-pattern\"><a href=\"#When-to-use-this-pattern\" class=\"headerlink\" title=\"When to use this pattern?\"></a>When to use this pattern?</h3><p>We should consider using a Backend For Frontend (BFF) pattern when:</p>\n<ul>\n<li>A shared or general purpose backend service must be maintained with significant development overhead.</li>\n<li>We want to optimize the backend for the requirements of a specific client.</li>\n<li>Customizations are made to a general-purpose backend to accommodate multiple interfaces.</li>\n</ul>\n<h2 id=\"Examples-13\"><a href=\"#Examples-13\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Following are some widely used gateways technologies:</p>\n<ul>\n<li><a href=\"https://aws.amazon.com/api-gateway\">Amazon API Gateway</a></li>\n<li><a href=\"https://cloud.google.com/apigee\">Apigee API Gateway</a></li>\n<li><a href=\"https://azure.microsoft.com/en-in/services/api-management\">Azure API Gateway</a></li>\n<li><a href=\"https://konghq.com/kong\">Kong API Gateway</a></li>\n</ul>\n<h1 id=\"REST-GraphQL-gRPC\"><a href=\"#REST-GraphQL-gRPC\" class=\"headerlink\" title=\"REST, GraphQL, gRPC\"></a>REST, GraphQL, gRPC</h1><p>A good API design is always a crucial part of any system. But it is also important to pick the right API technology. So, in this tutorial, we will briefly discuss different API technologies such as REST, GraphQL, and gRPC.</p>\n<h2 id=\"What‚Äôs-an-API\"><a href=\"#What‚Äôs-an-API\" class=\"headerlink\" title=\"What‚Äôs an API?\"></a>What‚Äôs an API?</h2><p>Before we even get into API technologies, let‚Äôs first understand what is an API.</p>\n<p>An API is a set of definitions and protocols for building and integrating application software. It‚Äôs sometimes referred to as a contract between an information provider and an information user establishing the content required from the producer and the content required by the consumer.</p>\n<p>In other words, if you want to interact with a computer or system to retrieve information or perform a function, an API helps you communicate what you want to that system so it can understand and complete the request.</p>\n<h2 id=\"REST\"><a href=\"#REST\" class=\"headerlink\" title=\"REST\"></a>REST</h2><p>A <a href=\"https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm\">REST API</a> (also known as RESTful API) is an application programming interface that conforms to the constraints of REST architectural style and allows for interaction with RESTful web services. REST stands for Representational State Transfer and it was first introduced by <a href=\"https://roy.gbiv.com/\">Roy Fielding</a> in the year 2000.</p>\n<p><em>In REST API, the fundamental unit is a resource.</em></p>\n<h3 id=\"Concepts\"><a href=\"#Concepts\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><p>Let‚Äôs discuss some concepts of a RESTful API.</p>\n<p><strong>Constraints</strong></p>\n<p>In order for an API to be considered <em>RESTful</em>, it has to conform to these architectural constraints:</p>\n<ul>\n<li><strong>Uniform Interface</strong>: There should be a uniform way of interacting with a given server.</li>\n<li><strong>Client-Server</strong>: A client-server architecture managed through HTTP.</li>\n<li><strong>Stateless</strong>: No client context shall be stored on the server between requests.</li>\n<li><strong>Cacheable</strong>: Every response should include whether the response is cacheable or not and for how much duration responses can be cached at the client-side.</li>\n<li><strong>Layered system</strong>: An application architecture needs to be composed of multiple layers.</li>\n<li><strong>Code on demand</strong>: Return executable code to support a part of your application. <em>(optional)</em></li>\n</ul>\n<p><strong>HTTP Verbs</strong></p>\n<p>HTTP defines a set of request methods to indicate the desired action to be performed for a given resource. Although they can also be nouns, these request methods are sometimes referred to as <em>HTTP verbs</em>. Each of them implements a different semantic, but some common features are shared by a group of them.</p>\n<p>Below are some commonly used HTTP verbs:</p>\n<ul>\n<li><strong>GET</strong>: Request a representation of the specified resource.</li>\n<li><strong>HEAD</strong>: Response is identical to a <code>GET</code> request, but without the response body.</li>\n<li><strong>POST</strong>: Submits an entity to the specified resource, often causing a change in state or side effects on the server.</li>\n<li><strong>PUT</strong>: Replaces all current representations of the target resource with the request payload.</li>\n<li><strong>DELETE</strong>: Deletes the specified resource.</li>\n<li><strong>PATCH</strong>: Applies partial modifications to a resource.</li>\n</ul>\n<p><strong>HTTP response codes</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/List_of_HTTP_status_codes\">HTTP response status codes</a> indicate whether a specific HTTP request has been successfully completed.</p>\n<p>There are five classes defined by the standard:</p>\n<ul>\n<li>1xx - Informational responses.</li>\n<li>2xx - Successful responses.</li>\n<li>3xx - Redirection responses.</li>\n<li>4xx - Client error responses.</li>\n<li>5xx - Server error responses.</li>\n</ul>\n<p>For example, HTTP 200 means that the request was successful.</p>\n<h3 id=\"Advantages-23\"><a href=\"#Advantages-23\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><p>Let‚Äôs discuss some advantages of REST API:</p>\n<ul>\n<li>Simple and easy to understand.</li>\n<li>Flexible and portable.</li>\n<li>Good caching support.</li>\n<li>Client and server are decoupled.</li>\n</ul>\n<h3 id=\"Disadvantages-18\"><a href=\"#Disadvantages-18\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><p>Let‚Äôs discuss some disadvantages of REST API:</p>\n<ul>\n<li>Over-fetching of data.</li>\n<li>Sometimes multiple round trips to the server are required.</li>\n</ul>\n<h3 id=\"Use-cases-3\"><a href=\"#Use-cases-3\" class=\"headerlink\" title=\"Use cases\"></a>Use cases</h3><p>REST APIs are pretty much used universally and are the default standard for designing APIs. Overall REST APIs are quite flexible and can fit almost all scenarios.</p>\n<h3 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>Here‚Äôs an example usage of a REST API that operates on a <strong>users</strong> resource.</p>\n<table>\n<thead>\n<tr>\n<th>URI</th>\n<th>HTTP verb</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&#x2F;users</td>\n<td>GET</td>\n<td>Get all users</td>\n</tr>\n<tr>\n<td>&#x2F;users&#x2F;{id}</td>\n<td>GET</td>\n<td>Get a user by id</td>\n</tr>\n<tr>\n<td>&#x2F;users</td>\n<td>POST</td>\n<td>Add a new user</td>\n</tr>\n<tr>\n<td>&#x2F;users&#x2F;{id}</td>\n<td>PATCH</td>\n<td>Update a user by id</td>\n</tr>\n<tr>\n<td>&#x2F;users&#x2F;{id}</td>\n<td>DELETE</td>\n<td>Delete a user by id</td>\n</tr>\n</tbody></table>\n<p><em>There is so much more to learn when it comes to REST APIs, I will highly recommend looking into <a href=\"https://en.wikipedia.org/wiki/HATEOAS\">Hypermedia as the Engine of Application State (HATEOAS)</a>.</em></p>\n<h2 id=\"GraphQL\"><a href=\"#GraphQL\" class=\"headerlink\" title=\"GraphQL\"></a>GraphQL</h2><p><a href=\"https://graphql.org/\">GraphQL</a> is a query language and server-side runtime for APIs that prioritizes giving clients exactly the data they request and no more. It was developed by <a href=\"https://engineering.fb.com/\">Facebook</a> and later open-sourced in 2015.</p>\n<p>GraphQL is designed to make APIs fast, flexible, and developer-friendly. Additionally, GraphQL gives API maintainers the flexibility to add or deprecate fields without impacting existing queries. Developers can build APIs with whatever methods they prefer, and the GraphQL specification will ensure they function in predictable ways to clients.</p>\n<p><em>In GraphQL, the fundamental unit is a query.</em></p>\n<h3 id=\"Concepts-1\"><a href=\"#Concepts-1\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><p>Let‚Äôs briefly discuss some key concepts in GraphQL:</p>\n<p><strong>Schema</strong></p>\n<p>A GraphQL schema describes the functionality clients can utilize once they connect to the GraphQL server.</p>\n<p><strong>Queries</strong></p>\n<p>A query is a request made by the client. It can consist of fields and arguments for the query. The operation type of a query can also be a <a href=\"https://graphql.org/learn/queries/#mutations\">mutation</a> which provides a way to modify server-side data.</p>\n<p><strong>Resolvers</strong></p>\n<p>Resolver is a collection of functions that generate responses for a GraphQL query. In simple terms, a resolver acts as a GraphQL query handler.</p>\n<h3 id=\"Advantages-24\"><a href=\"#Advantages-24\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><p>Let‚Äôs discuss some advantages of GraphQL:</p>\n<ul>\n<li>Eliminates over-fetching of data.</li>\n<li>Strongly defined schema.</li>\n<li>Code generation support.</li>\n<li>Payload optimization.</li>\n</ul>\n<h3 id=\"Disadvantages-19\"><a href=\"#Disadvantages-19\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><p>Let‚Äôs discuss some disadvantages of GraphQL:</p>\n<ul>\n<li>Shifts complexity to server-side.</li>\n<li>Caching becomes hard.</li>\n<li>Versioning is ambiguous.</li>\n<li>N+1 problem.</li>\n</ul>\n<h3 id=\"Use-cases-4\"><a href=\"#Use-cases-4\" class=\"headerlink\" title=\"Use cases\"></a>Use cases</h3><p>GraphQL proves to be essential in the following scenarios:</p>\n<ul>\n<li>Reducing app bandwidth usage as we can query multiple resources in a single query.</li>\n<li>Rapid prototyping for complex systems.</li>\n<li>When we are working with a graph-like data model.</li>\n</ul>\n<h3 id=\"Example-1\"><a href=\"#Example-1\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>Here‚Äôs a GraphQL schema that defines a <code>User</code> type and a <code>Query</code> type.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Query &#123;</span><br><span class=\"line\">  getUser: User</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">type User &#123;</span><br><span class=\"line\">  id: ID</span><br><span class=\"line\">  name: String</span><br><span class=\"line\">  city: String</span><br><span class=\"line\">  state: String</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Using the above schema, the client can request the required fields easily without having to fetch the entire resource or guess what the API might return.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  getUser &#123;</span><br><span class=\"line\">    id</span><br><span class=\"line\">    name</span><br><span class=\"line\">    city</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This will give the following response to the client.</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;getUser&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;id&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">123</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Karan&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;city&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;San Francisco&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><em>Learn more about GraphQL at <a href=\"https://graphql.org/\">graphql.org</a>.</em></p>\n<h2 id=\"gRPC\"><a href=\"#gRPC\" class=\"headerlink\" title=\"gRPC\"></a>gRPC</h2><p><a href=\"https://grpc.io/\">gRPC</a> is a modern open-source high-performance <a href=\"https://en.wikipedia.org/wiki/Remote_procedure_call\">Remote Procedure Call (RPC)</a> framework that can run in any environment. It can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking, authentication and much more.</p>\n<h3 id=\"Concepts-2\"><a href=\"#Concepts-2\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><p>Let‚Äôs discuss some key concepts of gRPC.</p>\n<p><strong>Protocol buffers</strong></p>\n<p>Protocol buffers provide a language and platform-neutral extensible mechanism for serializing structured data in a forward and backward-compatible way. It‚Äôs like JSON, except it‚Äôs smaller and faster, and it generates native language bindings.</p>\n<p><strong>Service definition</strong></p>\n<p>Like many RPC systems, gRPC is based on the idea of defining a service and specifying the methods that can be called remotely with their parameters and return types. gRPC uses protocol buffers as the <a href=\"https://en.wikipedia.org/wiki/Interface_description_language\">Interface Definition Language (IDL)</a> for describing both the service interface and the structure of the payload messages.</p>\n<h3 id=\"Advantages-25\"><a href=\"#Advantages-25\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><p>Let‚Äôs discuss some advantages of gRPC:</p>\n<ul>\n<li>Lightweight and efficient.</li>\n<li>High performance.</li>\n<li>Built-in code generation support.</li>\n<li>Bi-directional streaming.</li>\n</ul>\n<h3 id=\"Disadvantages-20\"><a href=\"#Disadvantages-20\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><p>Let‚Äôs discuss some disadvantages of gRPC:</p>\n<ul>\n<li>Relatively new compared to REST and GraphQL.</li>\n<li>Limited browser support.</li>\n<li>Steeper learning curve.</li>\n<li>Not human readable.</li>\n</ul>\n<h3 id=\"Use-cases-5\"><a href=\"#Use-cases-5\" class=\"headerlink\" title=\"Use cases\"></a>Use cases</h3><p>Below are some good use cases for gRPC:</p>\n<ul>\n<li>Real-time communication via bi-directional streaming.</li>\n<li>Efficient inter-service communication in microservices.</li>\n<li>Low latency and high throughput communication.</li>\n<li>Polyglot environments.</li>\n</ul>\n<h3 id=\"Example-2\"><a href=\"#Example-2\" class=\"headerlink\" title=\"Example\"></a>Example</h3><p>Here‚Äôs a basic example of a gRPC service defined in a <code>*.proto</code> file. Using this definition, we can easily code generate the <code>HelloService</code> service in the programming language of our choice.</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">service </span><span class=\"title class_\">HelloService</span> &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">rpc</span> SayHello (HelloRequest) <span class=\"keyword\">returns</span> (HelloResponse)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloRequest</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> greeting = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">message </span><span class=\"title class_\">HelloResponse</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> reply = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"REST-vs-GraphQL-vs-gRPC\"><a href=\"#REST-vs-GraphQL-vs-gRPC\" class=\"headerlink\" title=\"REST vs GraphQL vs gRPC\"></a>REST vs GraphQL vs gRPC</h2><p>Now that we know how these API designing techniques work, let‚Äôs compare them based on the following parameters:</p>\n<ul>\n<li>Will it cause tight coupling?</li>\n<li>How <em>chatty</em> (distinct API calls to get needed information) are the APIs?</li>\n<li>What‚Äôs the performance like?</li>\n<li>How complex is it to integrate?</li>\n<li>How well does the caching work?</li>\n<li>Built-in tooling and code generation?</li>\n<li>What‚Äôs API discoverability like?</li>\n<li>How easy is it to version APIs?</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Coupling</th>\n<th>Chattiness</th>\n<th>Performance</th>\n<th>Complexity</th>\n<th>Caching</th>\n<th>Codegen</th>\n<th>Discoverability</th>\n<th>Versioning</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>REST</td>\n<td>Low</td>\n<td>High</td>\n<td>Good</td>\n<td>Medium</td>\n<td>Great</td>\n<td>Bad</td>\n<td>Good</td>\n<td>Easy</td>\n</tr>\n<tr>\n<td>GraphQL</td>\n<td>Medium</td>\n<td>Low</td>\n<td>Good</td>\n<td>High</td>\n<td>Custom</td>\n<td>Good</td>\n<td>Good</td>\n<td>Custom</td>\n</tr>\n<tr>\n<td>gRPC</td>\n<td>High</td>\n<td>Medium</td>\n<td>Great</td>\n<td>Low</td>\n<td>Custom</td>\n<td>Great</td>\n<td>Bad</td>\n<td>Hard</td>\n</tr>\n</tbody></table>\n<h3 id=\"Which-API-technology-is-better\"><a href=\"#Which-API-technology-is-better\" class=\"headerlink\" title=\"Which API technology is better?\"></a>Which API technology is better?</h3><p>Well, the answer is none of them. There is no silver bullet as each of these technologies has its own advantages and disadvantages. Users only care about using our APIs in a consistent way, so make sure to focus on your domain and requirements when designing your API.</p>\n<h1 id=\"Long-polling-WebSockets-Server-Sent-Events-SSE\"><a href=\"#Long-polling-WebSockets-Server-Sent-Events-SSE\" class=\"headerlink\" title=\"Long polling, WebSockets, Server-Sent Events (SSE)\"></a>Long polling, WebSockets, Server-Sent Events (SSE)</h1><p>Web applications were initially developed around a client-server model, where the web client is always the initiator of transactions like requesting data from the server. Thus, there was no mechanism for the server to independently send, or push, data to the client without the client first making a request. Let‚Äôs discuss some approaches to overcome this problem.</p>\n<h2 id=\"Long-polling\"><a href=\"#Long-polling\" class=\"headerlink\" title=\"Long polling\"></a>Long polling</h2><p>HTTP Long polling is a technique used to push information to a client as soon as possible from the server. As a result, the server does not have to wait for the client to send a request.</p>\n<p>In Long polling, the server does not close the connection once it receives a request from the client. Instead, the server responds only if any new message is available or a timeout threshold is reached.</p>\n<p><img src=\"/assets/img/system-design/long-polling.jpg\" alt=\"long-polling\"></p>\n<p>Once the client receives a response, it immediately sends a new request to the server to have a new pending connection to send data to the client, and the operation is repeated. With this approach, the server emulates a real-time server push feature.</p>\n<h3 id=\"Working-2\"><a href=\"#Working-2\" class=\"headerlink\" title=\"Working\"></a>Working</h3><p>Let‚Äôs understand how long polling works:</p>\n<ol>\n<li>The client makes an initial request and waits for a response.</li>\n<li>The server receives the request and delays sending anything until an update is available.</li>\n<li>Once an update is available, the response is sent to the client.</li>\n<li>The client receives the response and makes a new request immediately or after some defined interval to establish a connection again.</li>\n</ol>\n<h3 id=\"Advantages-26\"><a href=\"#Advantages-26\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><p>Here are some advantages of long polling:</p>\n<ul>\n<li>Easy to implement, good for small-scale projects.</li>\n<li>Nearly universally supported.</li>\n</ul>\n<h3 id=\"Disadvantages-21\"><a href=\"#Disadvantages-21\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><p>A major downside of long polling is that it is usually not scalable. Below are some of the other reasons:</p>\n<ul>\n<li>Creates a new connection each time, which can be intensive on the server.</li>\n<li>Reliable message ordering can be an issue for multiple requests.</li>\n<li>Increased latency as the server needs to wait for a new request.</li>\n</ul>\n<h2 id=\"WebSockets\"><a href=\"#WebSockets\" class=\"headerlink\" title=\"WebSockets\"></a>WebSockets</h2><p>WebSocket provides full-duplex communication channels over a single TCP connection. It is a persistent connection between a client and a server that both parties can use to start sending data at any time.</p>\n<p>The client establishes a WebSocket connection through a process known as the WebSocket handshake. If the process succeeds, then the server and client can exchange data in both directions at any time. The WebSocket protocol enables the communication between a client and a server with lower overheads, facilitating real-time data transfer from and to the server.</p>\n<p><img src=\"/assets/img/system-design/websockets.jpg\" alt=\"websockets\"></p>\n<p>This is made possible by providing a standardized way for the server to send content to the client without being asked and allowing for messages to be passed back and forth while keeping the connection open.</p>\n<h3 id=\"Working-3\"><a href=\"#Working-3\" class=\"headerlink\" title=\"Working\"></a>Working</h3><p>Let‚Äôs understand how WebSockets work:</p>\n<ol>\n<li>The client initiates a WebSocket handshake process by sending a request.</li>\n<li>The request also contains an <a href=\"https://en.wikipedia.org/wiki/HTTP/1.1_Upgrade_header\">HTTP Upgrade</a> header that allows the request to switch to the WebSocket protocol (<code>ws://</code>).</li>\n<li>The server sends a response to the client, acknowledging the WebSocket handshake request.</li>\n<li>A WebSocket connection will be opened once the client receives a successful handshake response.</li>\n<li>Now the client and server can start sending data in both directions allowing real-time communication.</li>\n<li>The connection is closed once the server or the client decides to close the connection.</li>\n</ol>\n<h3 id=\"Advantages-27\"><a href=\"#Advantages-27\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><p>Below are some advantages of WebSockets:</p>\n<ul>\n<li>Full-duplex asynchronous messaging.</li>\n<li>Better origin-based security model.</li>\n<li>Lightweight for both client and server.</li>\n</ul>\n<h3 id=\"Disadvantages-22\"><a href=\"#Disadvantages-22\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><p>Let‚Äôs discuss some disadvantages of WebSockets:</p>\n<ul>\n<li>Terminated connections aren‚Äôt automatically recovered.</li>\n<li>Older browsers don‚Äôt support WebSockets (becoming less relevant).</li>\n</ul>\n<h2 id=\"Server-Sent-Events-SSE\"><a href=\"#Server-Sent-Events-SSE\" class=\"headerlink\" title=\"Server-Sent Events (SSE)\"></a>Server-Sent Events (SSE)</h2><p>Server-Sent Events (SSE) is a way of establishing long-term communication between client and server that enables the server to proactively push data to the client.</p>\n<p><img src=\"/assets/img/system-design/server-sent-events.jpg\" alt=\"server-sent-events\"></p>\n<p>It is unidirectional, meaning once the client sends the request it can only receive the responses without the ability to send new requests over the same connection.</p>\n<h3 id=\"Working-4\"><a href=\"#Working-4\" class=\"headerlink\" title=\"Working\"></a>Working</h3><p>Let‚Äôs understand how server-sent events work:</p>\n<ol>\n<li>The client makes a request to the server.</li>\n<li>The connection between client and server is established and it remains open.</li>\n<li>The server sends responses or events to the client when new data is available.</li>\n</ol>\n<h3 id=\"Advantages-28\"><a href=\"#Advantages-28\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h3><ul>\n<li>Simple to implement and use for both client and server.</li>\n<li>Supported by most browsers.</li>\n<li>No trouble with firewalls.</li>\n</ul>\n<h3 id=\"Disadvantages-23\"><a href=\"#Disadvantages-23\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><ul>\n<li>Unidirectional nature can be limiting.</li>\n<li>Limitation for the maximum number of open connections.</li>\n<li>Does not support binary data.</li>\n</ul>\n<h1 id=\"Geohashing-and-Quadtrees\"><a href=\"#Geohashing-and-Quadtrees\" class=\"headerlink\" title=\"Geohashing and Quadtrees\"></a>Geohashing and Quadtrees</h1><h2 id=\"Geohashing\"><a href=\"#Geohashing\" class=\"headerlink\" title=\"Geohashing\"></a>Geohashing</h2><p>Geohashing is a <a href=\"https://en.wikipedia.org/wiki/Address_geocoding\">geocoding</a> method used to encode geographic coordinates such as latitude and longitude into short alphanumeric strings. It was created by <a href=\"https://twitter.com/gniemeyer\">Gustavo Niemeyer</a> in 2008.</p>\n<p>For example, San Francisco with coordinates <code>37.7564, -122.4016</code> can be represented in geohash as <code>9q8yy9mf</code>.</p>\n<h3 id=\"How-does-Geohashing-work\"><a href=\"#How-does-Geohashing-work\" class=\"headerlink\" title=\"How does Geohashing work?\"></a>How does Geohashing work?</h3><p>Geohash is a hierarchical spatial index that uses Base-32 alphabet encoding, the first character in a geohash identifies the initial location as one of the 32 cells. This cell will also contain 32 cells. This means that to represent a point, the world is recursively divided into smaller and smaller cells with each additional bit until the desired precision is attained. The precision factor also determines the size of the cell.</p>\n<p><img src=\"/assets/img/system-design/geohashing.jpg\" alt=\"geohashing\"></p>\n<p>Geohashing guarantees that points are spatially closer if their Geohashes share a longer prefix which means the more characters in the string, the more precise the location. For example, geohashes <code>9q8yy9mf</code> and <code>9q8yy9vx</code> are spatially closer as they share the prefix <code>9q8yy9</code>.</p>\n<p>Geohashing can also be used to provide a degree of anonymity as we don‚Äôt need to expose the exact location of the user because depending on the length of the geohash we just know they are somewhere within an area.</p>\n<p>The cell sizes of the geohashes of different lengths are as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Geohash length</th>\n<th>Cell width</th>\n<th>Cell height</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>5000 km</td>\n<td>5000 km</td>\n</tr>\n<tr>\n<td>2</td>\n<td>1250 km</td>\n<td>1250 km</td>\n</tr>\n<tr>\n<td>3</td>\n<td>156 km</td>\n<td>156 km</td>\n</tr>\n<tr>\n<td>4</td>\n<td>39.1 km</td>\n<td>19.5 km</td>\n</tr>\n<tr>\n<td>5</td>\n<td>4.89 km</td>\n<td>4.89 km</td>\n</tr>\n<tr>\n<td>6</td>\n<td>1.22 km</td>\n<td>0.61 km</td>\n</tr>\n<tr>\n<td>7</td>\n<td>153 m</td>\n<td>153 m</td>\n</tr>\n<tr>\n<td>8</td>\n<td>38.2 m</td>\n<td>19.1 m</td>\n</tr>\n<tr>\n<td>9</td>\n<td>4.77 m</td>\n<td>4.77 m</td>\n</tr>\n<tr>\n<td>10</td>\n<td>1.19 m</td>\n<td>0.596 m</td>\n</tr>\n<tr>\n<td>11</td>\n<td>149 mm</td>\n<td>149 mm</td>\n</tr>\n<tr>\n<td>12</td>\n<td>37.2 mm</td>\n<td>18.6 mm</td>\n</tr>\n</tbody></table>\n<h3 id=\"Use-cases-6\"><a href=\"#Use-cases-6\" class=\"headerlink\" title=\"Use cases\"></a>Use cases</h3><p>Here are some common use cases for Geohashing:</p>\n<ul>\n<li>It is a simple way to represent and store a location in a database.</li>\n<li>It can also be shared on social media as URLs since it is easier to share, and remember than latitudes and longitudes.</li>\n<li>We can efficiently find the nearest neighbors of a point through very simple string comparisons and efficient searching of indexes.</li>\n</ul>\n<h3 id=\"Examples-14\"><a href=\"#Examples-14\" class=\"headerlink\" title=\"Examples\"></a>Examples</h3><p>Geohashing is widely used and it is supported by popular databases.</p>\n<ul>\n<li><a href=\"https://www.mysql.com/\">MySQL</a></li>\n<li><a href=\"http://redis.io/\">Redis</a></li>\n<li><a href=\"https://aws.amazon.com/dynamodb\">Amazon DynamoDB</a></li>\n<li><a href=\"https://cloud.google.com/firestore\">Google Cloud Firestore</a></li>\n</ul>\n<h2 id=\"Quadtrees\"><a href=\"#Quadtrees\" class=\"headerlink\" title=\"Quadtrees\"></a>Quadtrees</h2><p>A quadtree is a tree data structure in which each internal node has exactly four children. They are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions. Each child or leaf node stores spatial information. Quadtrees are the two-dimensional analog of <a href=\"https://en.wikipedia.org/wiki/Octree\">Octrees</a> which are used to partition three-dimensional space.</p>\n<p><img src=\"/assets/img/system-design/quadtree.jpg\" alt=\"quadtree\"></p>\n<h3 id=\"Types-of-Quadtrees\"><a href=\"#Types-of-Quadtrees\" class=\"headerlink\" title=\"Types of Quadtrees\"></a>Types of Quadtrees</h3><p>Quadtrees may be classified according to the type of data they represent, including areas, points, lines, and curves. The following are common types of quadtrees:</p>\n<ul>\n<li>Point quadtrees</li>\n<li>Point-region (PR) quadtrees</li>\n<li>Polygonal map (PM) quadtrees</li>\n<li>Compressed quadtrees</li>\n<li>Edge quadtrees</li>\n</ul>\n<h3 id=\"Why-do-we-need-Quadtrees\"><a href=\"#Why-do-we-need-Quadtrees\" class=\"headerlink\" title=\"Why do we need Quadtrees?\"></a>Why do we need Quadtrees?</h3><p>Aren‚Äôt latitude and longitude enough? Why do we need quadtrees? While in theory using latitude and longitude we can determine things such as how close points are to each other using <a href=\"https://en.wikipedia.org/wiki/Euclidean_distance\">euclidean distance</a>, for practical use cases it is simply not scalable because of its CPU-intensive nature with large data sets.</p>\n<p><img src=\"/assets/img/system-design/quadtree-subdivision.jpg\" alt=\"quadtree-subdivision\"></p>\n<p>Quadtrees enable us to search points within a two-dimensional range efficiently, where those points are defined as latitude&#x2F;longitude coordinates or as cartesian (x, y) coordinates. Additionally, we can save further computation by only subdividing a node after a certain threshold. And with the application of mapping algorithms such as the <a href=\"https://en.wikipedia.org/wiki/Hilbert_curve\">Hilbert curve</a>, we can easily improve range query performance.</p>\n<h3 id=\"Use-cases-7\"><a href=\"#Use-cases-7\" class=\"headerlink\" title=\"Use cases\"></a>Use cases</h3><p>Below are some common uses of quadtrees:</p>\n<ul>\n<li>Image representation, processing, and compression.</li>\n<li>Spacial indexing and range queries.</li>\n<li>Location-based services like Google Maps, Uber, etc.</li>\n<li>Mesh generation and computer graphics.</li>\n<li>Sparse data storage.</li>\n</ul>\n<h1 id=\"Circuit-breaker\"><a href=\"#Circuit-breaker\" class=\"headerlink\" title=\"Circuit breaker\"></a>Circuit breaker</h1><p>The circuit breaker is a design pattern used to detect failures and encapsulates the logic of preventing a failure from constantly recurring during maintenance, temporary external system failure, or unexpected system difficulties.</p>\n<p><img src=\"/assets/img/system-design/circuit-breaker.jpg\" alt=\"circuit-breaker\"></p>\n<p>The basic idea behind the circuit breaker is very simple. We wrap a protected function call in a circuit breaker object, which monitors for failures. Once the failures reach a certain threshold, the circuit breaker trips, and all further calls to the circuit breaker return with an error, without the protected call being made at all. Usually, we‚Äôll also want some kind of monitor alert if the circuit breaker trips.</p>\n<h2 id=\"Why-do-we-need-circuit-breaking\"><a href=\"#Why-do-we-need-circuit-breaking\" class=\"headerlink\" title=\"Why do we need circuit breaking?\"></a>Why do we need circuit breaking?</h2><p>It‚Äôs common for software systems to make remote calls to software running in different processes, probably on different machines across a network. One of the big differences between in-memory calls and remote calls is that remote calls can fail, or hang without a response until some timeout limit is reached. What‚Äôs worse if we have many callers on an unresponsive supplier, then we can run out of critical resources leading to cascading failures across multiple systems.</p>\n<h2 id=\"States-1\"><a href=\"#States-1\" class=\"headerlink\" title=\"States\"></a>States</h2><p>Let‚Äôs discuss circuit breaker states:</p>\n<h3 id=\"Closed\"><a href=\"#Closed\" class=\"headerlink\" title=\"Closed\"></a>Closed</h3><p>When everything is normal, the circuit breakers remain closed, and all the request passes through to the services as normal. If the number of failures increases beyond the threshold, the circuit breaker trips and goes into an open state.</p>\n<h3 id=\"Open\"><a href=\"#Open\" class=\"headerlink\" title=\"Open\"></a>Open</h3><p>In this state circuit breaker returns an error immediately without even invoking the services. The Circuit breakers move into the half-open state after a certain timeout period elapses. Usually, it will have a monitoring system where the timeout will be specified.</p>\n<h3 id=\"Half-open\"><a href=\"#Half-open\" class=\"headerlink\" title=\"Half-open\"></a>Half-open</h3><p>In this state, the circuit breaker allows a limited number of requests from the service to pass through and invoke the operation. If the requests are successful, then the circuit breaker will go to the closed state. However, if the requests continue to fail, then it goes back to the open state.</p>\n<h1 id=\"Rate-Limiting\"><a href=\"#Rate-Limiting\" class=\"headerlink\" title=\"Rate Limiting\"></a>Rate Limiting</h1><p>Rate limiting refers to preventing the frequency of an operation from exceeding a defined limit. In large-scale systems, rate limiting is commonly used to protect underlying services and resources. Rate limiting is generally used as a defensive mechanism in distributed systems, so that shared resources can maintain availability. It also protects our APIs from unintended or malicious overuse by limiting the number of requests that can reach our API in a given period of time.</p>\n<p><img src=\"/assets/img/system-design/rate-limiting.jpg\" alt=\"rate-limiting\"></p>\n<h2 id=\"Why-do-we-need-Rate-Limiting\"><a href=\"#Why-do-we-need-Rate-Limiting\" class=\"headerlink\" title=\"Why do we need Rate Limiting?\"></a>Why do we need Rate Limiting?</h2><p>Rate limiting is a very important part of any large-scale system and it can be used to accomplish the following:</p>\n<ul>\n<li>Avoid resource starvation as a result of Denial of Service (DoS) attacks.</li>\n<li>Rate Limiting helps in controlling operational costs by putting a virtual cap on the auto-scaling of resources which if not monitored might lead to exponential bills.</li>\n<li>Rate limiting can be used as defense or mitigation against some common attacks.</li>\n<li>For APIs that process massive amounts of data, rate limiting can be used to control the flow of that data.</li>\n</ul>\n<h2 id=\"Algorithms\"><a href=\"#Algorithms\" class=\"headerlink\" title=\"Algorithms\"></a>Algorithms</h2><p>There are various algorithms for API rate limiting, each with its advantages and disadvantages. Let‚Äôs briefly discuss some of these algorithms:</p>\n<h3 id=\"Leaky-Bucket\"><a href=\"#Leaky-Bucket\" class=\"headerlink\" title=\"Leaky Bucket\"></a>Leaky Bucket</h3><p>Leaky Bucket is an algorithm that provides a simple, intuitive approach to rate limiting via a queue. When registering a request, the system appends it to the end of the queue. Processing for the first item on the queue occurs at a regular interval or first-in, first-out (FIFO). If the queue is full, then additional requests are discarded (or leaked).</p>\n<h3 id=\"Token-Bucket\"><a href=\"#Token-Bucket\" class=\"headerlink\" title=\"Token Bucket\"></a>Token Bucket</h3><p>Here we use a concept of a <em>bucket</em>. When a request comes in, a token from the bucket must be taken and processed. The request will be refused if no token is available in the bucket, and the requester will have to try again later. As a result, the token bucket gets refreshed after a certain time period.</p>\n<h3 id=\"Fixed-Window\"><a href=\"#Fixed-Window\" class=\"headerlink\" title=\"Fixed Window\"></a>Fixed Window</h3><p>The system uses a window size of <code>n</code> seconds to track the fixed window algorithm rate. Each incoming request increments the counter for the window. It discards the request if the counter exceeds a threshold.</p>\n<h3 id=\"Sliding-Log\"><a href=\"#Sliding-Log\" class=\"headerlink\" title=\"Sliding Log\"></a>Sliding Log</h3><p>Sliding Log rate-limiting involves tracking a time-stamped log for each request. The system stores these logs in a time-sorted hash set or table. It also discards logs with timestamps beyond a threshold. When a new request comes in, we calculate the sum of logs to determine the request rate. If the request would exceed the threshold rate, then it is held.</p>\n<h3 id=\"Sliding-Window\"><a href=\"#Sliding-Window\" class=\"headerlink\" title=\"Sliding Window\"></a>Sliding Window</h3><p>Sliding Window is a hybrid approach that combines the fixed window algorithm‚Äôs low processing cost and the sliding log‚Äôs improved boundary conditions. Like the fixed window algorithm, we track a counter for each fixed window. Next, we account for a weighted value of the previous window‚Äôs request rate based on the current timestamp to smooth out bursts of traffic.</p>\n<h2 id=\"Rate-Limiting-in-Distributed-Systems\"><a href=\"#Rate-Limiting-in-Distributed-Systems\" class=\"headerlink\" title=\"Rate Limiting in Distributed Systems\"></a>Rate Limiting in Distributed Systems</h2><p>Rate Limiting becomes complicated when distributed systems are involved. The two broad problems that come with rate limiting in distributed systems are:</p>\n<h3 id=\"Inconsistencies\"><a href=\"#Inconsistencies\" class=\"headerlink\" title=\"Inconsistencies\"></a>Inconsistencies</h3><p>When using a cluster of multiple nodes, we might need to enforce a global rate limit policy. Because if each node were to track its rate limit, a consumer could exceed a global rate limit when sending requests to different nodes. The greater the number of nodes, the more likely the user will exceed the global limit.</p>\n<p>The simplest way to solve this problem is to use sticky sessions in our load balancers so that each consumer gets sent to exactly one node but this causes a lack of fault tolerance and scaling problems. Another approach might be to use a centralized data store like <a href=\"https://redis.io/\">Redis</a> but this will increase latency and cause race conditions.</p>\n<h3 id=\"Race-Conditions\"><a href=\"#Race-Conditions\" class=\"headerlink\" title=\"Race Conditions\"></a>Race Conditions</h3><p>This issue happens when we use a naive <em>‚Äúget-then-set‚Äù</em> approach, in which we retrieve the current rate limit counter, increment it, and then push it back to the datastore. This model‚Äôs problem is that additional requests can come through in the time it takes to perform a full cycle of read-increment-store, each attempting to store the increment counter with an invalid (lower) counter value. This allows a consumer to send a very large number of requests to bypass the rate limiting controls.</p>\n<p>One way to avoid this problem is to use some sort of distributed locking mechanism around the key, preventing any other processes from accessing or writing to the counter. Though the lock will become a significant bottleneck and will not scale well. A better approach might be to use a <em>‚Äúset-then-get‚Äù</em> approach, allowing us to quickly increment and check counter values without letting the atomic operations get in the way.</p>\n<h1 id=\"Service-Discovery\"><a href=\"#Service-Discovery\" class=\"headerlink\" title=\"Service Discovery\"></a>Service Discovery</h1><p>Service discovery is the detection of services within a computer network. Service Discovery Protocol (SDP) is a networking standard that accomplishes the detection of networks by identifying resources.</p>\n<h2 id=\"Why-do-we-need-Service-Discovery\"><a href=\"#Why-do-we-need-Service-Discovery\" class=\"headerlink\" title=\"Why do we need Service Discovery?\"></a>Why do we need Service Discovery?</h2><p>In a monolithic application, services invoke one another through language-level methods or procedure calls. However, modern microservices-based applications typically run in virtualized or containerized environments where the number of instances of a service and their locations change dynamically. Consequently, we need a mechanism that enables the clients of service to make requests to a dynamically changing set of ephemeral service instances.</p>\n<h2 id=\"Implementations\"><a href=\"#Implementations\" class=\"headerlink\" title=\"Implementations\"></a>Implementations</h2><p>There are two main service discovery patterns:</p>\n<h3 id=\"Client-side-discovery\"><a href=\"#Client-side-discovery\" class=\"headerlink\" title=\"Client-side discovery\"></a>Client-side discovery</h3><p><img src=\"/assets/img/system-design/client-side-service-discovery.jpg\" alt=\"client-side-service-discovery\"></p>\n<p>In this approach, the client obtains the location of another service by querying a service registry which is responsible for managing and storing the network locations of all the services.</p>\n<h3 id=\"Server-side-discovery\"><a href=\"#Server-side-discovery\" class=\"headerlink\" title=\"Server-side discovery\"></a>Server-side discovery</h3><p><img src=\"/assets/img/system-design/server-side-service-discovery.jpg\" alt=\"server-side-service-discovery\"></p>\n<p>In this approach, we use an intermediate component such as a load balancer. The client makes a request to the service via a load balancer which then forwards the request to an available service instance.</p>\n<h2 id=\"Service-Registry\"><a href=\"#Service-Registry\" class=\"headerlink\" title=\"Service Registry\"></a>Service Registry</h2><p>A service registry is basically a database containing the network locations of service instances to which the clients can reach out. A Service Registry must be highly available and up-to-date.</p>\n<h2 id=\"Service-Registration\"><a href=\"#Service-Registration\" class=\"headerlink\" title=\"Service Registration\"></a>Service Registration</h2><p>We also need a way to obtain service information, often known as service registration. Let‚Äôs look at two possible service registration approaches:</p>\n<h3 id=\"Self-Registration\"><a href=\"#Self-Registration\" class=\"headerlink\" title=\"Self-Registration\"></a>Self-Registration</h3><p>When using the self-registration model, a service instance is responsible for registering and de-registering itself in the Service Registry. In addition, if necessary, a service instance sends heartbeat requests to keep its registration alive.</p>\n<h3 id=\"Third-party-Registration\"><a href=\"#Third-party-Registration\" class=\"headerlink\" title=\"Third-party Registration\"></a>Third-party Registration</h3><p>The registry keeps track of changes to running instances by polling the deployment environment or subscribing to events. When it detects a newly available service instance, it records it in its database. The Service Registry also de-registers terminated service instances.</p>\n<h2 id=\"Service-mesh\"><a href=\"#Service-mesh\" class=\"headerlink\" title=\"Service mesh\"></a>Service mesh</h2><p>Service-to-service communication is essential in a distributed application but routing this communication, both within and across application clusters, becomes increasingly complex as the number of services grows. Service mesh enables managed, observable, and secure communication between individual services. It works with a service discovery protocol to detect services. <a href=\"https://istio.io/latest/about/service-mesh\">Istio</a> and <a href=\"https://www.envoyproxy.io/\">envoy</a> are some of the most commonly used service mesh technologies.</p>\n<h2 id=\"Examples-15\"><a href=\"#Examples-15\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>Here are some commonly used service discovery infrastructure tools:</p>\n<ul>\n<li><a href=\"https://etcd.io/\">etcd</a></li>\n<li><a href=\"https://www.consul.io/\">Consul</a></li>\n<li><a href=\"https://thrift.apache.org/\">Apache Thrift</a></li>\n<li><a href=\"https://zookeeper.apache.org/\">Apache Zookeeper</a></li>\n</ul>\n<h1 id=\"SLA-SLO-SLI\"><a href=\"#SLA-SLO-SLI\" class=\"headerlink\" title=\"SLA, SLO, SLI\"></a>SLA, SLO, SLI</h1><p>Let‚Äôs briefly discuss SLA, SLO, and SLI. These are mostly related to the business and site reliability side of things but good to know nonetheless.</p>\n<h2 id=\"Why-are-they-important\"><a href=\"#Why-are-they-important\" class=\"headerlink\" title=\"Why are they important?\"></a>Why are they important?</h2><p>SLAs, SLOs, and SLIs allow companies to define, track and monitor the promises made for a service to its users. Together, SLAs, SLOs, and SLIs should help teams generate more user trust in their services with an added emphasis on continuous improvement to incident management and response processes.</p>\n<h2 id=\"SLA\"><a href=\"#SLA\" class=\"headerlink\" title=\"SLA\"></a>SLA</h2><p>An SLA, or Service Level Agreement, is an agreement made between a company and its users of a given service. The SLA defines the different promises that the company makes to users regarding specific metrics, such as service availability.</p>\n<p><em>SLAs are often written by a company‚Äôs business or legal team.</em></p>\n<h2 id=\"SLO\"><a href=\"#SLO\" class=\"headerlink\" title=\"SLO\"></a>SLO</h2><p>An SLO, or Service Level Objective, is the promise that a company makes to users regarding a specific metric such as incident response or uptime. SLOs exist within an SLA as individual promises contained within the full user agreement. The SLO is the specific goal that the service must meet in order to comply with the SLA. SLOs should always be simple, clearly defined, and easily measured to determine whether or not the objective is being fulfilled.</p>\n<h2 id=\"SLI\"><a href=\"#SLI\" class=\"headerlink\" title=\"SLI\"></a>SLI</h2><p>An SLI, or Service Level Indicator, is a key metric used to determine whether or not the SLO is being met. It is the measured value of the metric described within the SLO. In order to remain in compliance with the SLA, the SLI‚Äôs value must always meet or exceed the value determined by the SLO.</p>\n<h1 id=\"Disaster-recovery\"><a href=\"#Disaster-recovery\" class=\"headerlink\" title=\"Disaster recovery\"></a>Disaster recovery</h1><p>Disaster recovery (DR) is a process of regaining access and functionality of the infrastructure after events like a natural disaster, cyber attack, or even business disruptions.</p>\n<p>Disaster recovery relies upon the replication of data and computer processing in an off-premises location not affected by the disaster. When servers go down because of a disaster, a business needs to recover lost data from a second location where the data is backed up. Ideally, an organization can transfer its computer processing to that remote location as well in order to continue operations.</p>\n<p><em>Disaster Recovery is often not actively discussed during system design interviews but it‚Äôs important to have some basic understanding of this topic. You can learn more about disaster recovery from <a href=\"https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/plan-for-disaster-recovery-dr.html\">AWS Well-Architected Framework</a>.</em></p>\n<h2 id=\"Why-is-disaster-recovery-important\"><a href=\"#Why-is-disaster-recovery-important\" class=\"headerlink\" title=\"Why is disaster recovery important?\"></a>Why is disaster recovery important?</h2><p>Disaster recovery can have the following benefits:</p>\n<ul>\n<li>Minimize interruption and downtime</li>\n<li>Limit damages</li>\n<li>Fast restoration</li>\n<li>Better customer retention</li>\n</ul>\n<h2 id=\"Terms-1\"><a href=\"#Terms-1\" class=\"headerlink\" title=\"Terms\"></a>Terms</h2><p>Let‚Äôs discuss some important terms relevantly for disaster recovery:</p>\n<p><img src=\"/assets/img/system-design/disaster-recovery.jpg\" alt=\"disaster-recovery\"></p>\n<h3 id=\"RTO\"><a href=\"#RTO\" class=\"headerlink\" title=\"RTO\"></a>RTO</h3><p>Recovery Time Objective (RTO) is the maximum acceptable delay between the interruption of service and restoration of service. This determines what is considered an acceptable time window when service is unavailable.</p>\n<h3 id=\"RPO\"><a href=\"#RPO\" class=\"headerlink\" title=\"RPO\"></a>RPO</h3><p>Recovery Point Objective (RPO) is the maximum acceptable amount of time since the last data recovery point. This determines what is considered an acceptable loss of data between the last recovery point and the interruption of service.</p>\n<h2 id=\"Strategies\"><a href=\"#Strategies\" class=\"headerlink\" title=\"Strategies\"></a>Strategies</h2><p>A variety of disaster recovery (DR) strategies can be part of a disaster recovery plan.</p>\n<h3 id=\"Back-up\"><a href=\"#Back-up\" class=\"headerlink\" title=\"Back-up\"></a>Back-up</h3><p>This is the simplest type of disaster recovery and involves storing data off-site or on a removable drive.</p>\n<h3 id=\"Cold-Site\"><a href=\"#Cold-Site\" class=\"headerlink\" title=\"Cold Site\"></a>Cold Site</h3><p>In this type of disaster recovery, an organization sets up basic infrastructure in a second site.</p>\n<h3 id=\"Hot-site\"><a href=\"#Hot-site\" class=\"headerlink\" title=\"Hot site\"></a>Hot site</h3><p>A hot site maintains up-to-date copies of data at all times. Hot sites are time-consuming to set up and more expensive than cold sites, but they dramatically reduce downtime.</p>\n<h1 id=\"Virtual-Machines-VMs-and-Containers\"><a href=\"#Virtual-Machines-VMs-and-Containers\" class=\"headerlink\" title=\"Virtual Machines (VMs) and Containers\"></a>Virtual Machines (VMs) and Containers</h1><p>Before we discuss virtualization vs containerization, let‚Äôs learn what are virtual machines (VMs) and Containers.</p>\n<h2 id=\"Virtual-Machines-VM\"><a href=\"#Virtual-Machines-VM\" class=\"headerlink\" title=\"Virtual Machines (VM)\"></a>Virtual Machines (VM)</h2><p>A Virtual Machine (VM) is a virtual environment that functions as a virtual computer system with its own CPU, memory, network interface, and storage, created on a physical hardware system. A software called a hypervisor separates the machine‚Äôs resources from the hardware and provisions them appropriately so they can be used by the VM.</p>\n<p>VMs are isolated from the rest of the system, and multiple VMs can exist on a single piece of hardware, like a server. They can be moved between host servers depending on the demand or to use resources more efficiently.</p>\n<h3 id=\"What-is-a-Hypervisor\"><a href=\"#What-is-a-Hypervisor\" class=\"headerlink\" title=\"What is a Hypervisor?\"></a>What is a Hypervisor?</h3><p>A Hypervisor sometimes called a Virtual Machine Monitor (VMM), isolates the operating system and resources from the virtual machines and enables the creation and management of those VMs. The hypervisor treats resources like CPU, memory, and storage as a pool of resources that can be easily reallocated between existing guests or new virtual machines.</p>\n<h3 id=\"Why-use-a-Virtual-Machine\"><a href=\"#Why-use-a-Virtual-Machine\" class=\"headerlink\" title=\"Why use a Virtual Machine?\"></a>Why use a Virtual Machine?</h3><p>Server consolidation is a top reason to use VMs. Most operating system and application deployments only use a small amount of the physical resources available. By virtualizing our servers, we can place many virtual servers onto each physical server to improve hardware utilization. This keeps us from needing to purchase additional physical resources.</p>\n<p>A VM provides an environment that is isolated from the rest of a system, so whatever is running inside a VM won‚Äôt interfere with anything else running on the host hardware. Because VMs are isolated, they are a good option for testing new applications or setting up a production environment. We can also run a single-purpose VM to support a specific use case.</p>\n<h2 id=\"Containers\"><a href=\"#Containers\" class=\"headerlink\" title=\"Containers\"></a>Containers</h2><p>A container is a standard unit of software that packages up code and all its dependencies such as specific versions of runtimes and libraries so that the application runs quickly and reliably from one computing environment to another. Containers offer a logical packaging mechanism in which applications can be abstracted from the environment in which they actually run. This decoupling allows container-based applications to be deployed easily and consistently, regardless of the target environment.</p>\n<h3 id=\"Why-do-we-need-containers\"><a href=\"#Why-do-we-need-containers\" class=\"headerlink\" title=\"Why do we need containers?\"></a>Why do we need containers?</h3><p>Let‚Äôs discuss some advantages of using containers:</p>\n<p><strong>Separation of responsibility</strong></p>\n<p>Containerization provides a clear separation of responsibility, as developers focus on application logic and dependencies, while operations teams can focus on deployment and management.</p>\n<p><strong>Workload portability</strong></p>\n<p>Containers can run virtually anywhere, greatly easing development and deployment.</p>\n<p><strong>Application isolation</strong></p>\n<p>Containers virtualize CPU, memory, storage, and network resources at the operating system level, providing developers with a view of the OS logically isolated from other applications.</p>\n<p><strong>Agile development</strong></p>\n<p>Containers allow developers to move much more quickly by avoiding concerns about dependencies and environments.</p>\n<p><strong>Efficient operations</strong></p>\n<p>Containers are lightweight and allow us to use just the computing resources we need.</p>\n<h2 id=\"Virtualization-vs-Containerization\"><a href=\"#Virtualization-vs-Containerization\" class=\"headerlink\" title=\"Virtualization vs Containerization\"></a>Virtualization vs Containerization</h2><p><img src=\"/assets/img/system-design/virtualization-vs-containerization.jpg\" alt=\"virtualization-vs-containerization\"></p>\n<p>In traditional virtualization, a hypervisor virtualizes physical hardware. The result is that each virtual machine contains a guest OS, a virtual copy of the hardware that the OS requires to run, and an application and its associated libraries and dependencies.</p>\n<p>Instead of virtualizing the underlying hardware, containers virtualize the operating system so each container contains only the application and its dependencies making them much more lightweight than VMs. Containers also share the OS kernel and use a fraction of the memory VMs require.</p>\n<h1 id=\"OAuth-2-0-and-OpenID-Connect-OIDC\"><a href=\"#OAuth-2-0-and-OpenID-Connect-OIDC\" class=\"headerlink\" title=\"OAuth 2.0 and OpenID Connect (OIDC)\"></a>OAuth 2.0 and OpenID Connect (OIDC)</h1><h2 id=\"OAuth-2-0\"><a href=\"#OAuth-2-0\" class=\"headerlink\" title=\"OAuth 2.0\"></a>OAuth 2.0</h2><p>OAuth 2.0, which stands for Open Authorization, is a standard designed to provide consented access to resources on behalf of the user, without ever sharing the user‚Äôs credentials. OAuth 2.0 is an authorization protocol and not an authentication protocol, it is designed primarily as a means of granting access to a set of resources, for example, remote APIs or user‚Äôs data.</p>\n<h3 id=\"Concepts-3\"><a href=\"#Concepts-3\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><p>The OAuth 2.0 protocol defines the following entities:</p>\n<ul>\n<li><strong>Resource Owner</strong>: The user or system that owns the protected resources and can grant access to them.</li>\n<li><strong>Client</strong>: The client is the system that requires access to the protected resources.</li>\n<li><strong>Authorization Server</strong>: This server receives requests from the Client for Access Tokens and issues them upon successful authentication and consent by the Resource Owner.</li>\n<li><strong>Resource Server</strong>: A server that protects the user‚Äôs resources and receives access requests from the Client. It accepts and validates an Access Token from the Client and returns the appropriate resources.</li>\n<li><strong>Scopes</strong>: They are used to specify exactly the reason for which access to resources may be granted. Acceptable scope values, and which resources they relate to, are dependent on the Resource Server.</li>\n<li><strong>Access Token</strong>: A piece of data that represents the authorization to access resources on behalf of the end-user.</li>\n</ul>\n<h3 id=\"How-does-OAuth-2-0-work\"><a href=\"#How-does-OAuth-2-0-work\" class=\"headerlink\" title=\"How does OAuth 2.0 work?\"></a>How does OAuth 2.0 work?</h3><p>Let‚Äôs learn how OAuth 2.0 works:</p>\n<p><img src=\"/assets/img/system-design/oauth2.jpg\" alt=\"oauth2\"></p>\n<ol>\n<li>The client requests authorization from the Authorization Server, supplying the client id and secret as identification. It also provides the scopes and an endpoint URI to send the Access Token or the Authorization Code.</li>\n<li>The Authorization Server authenticates the client and verifies that the requested scopes are permitted.</li>\n<li>The resource owner interacts with the authorization server to grant access.</li>\n<li>The Authorization Server redirects back to the client with either an Authorization Code or Access Token, depending on the grant type. A Refresh Token may also be returned.</li>\n<li>With the Access Token, the client can request access to the resource from the Resource Server.</li>\n</ol>\n<h3 id=\"Disadvantages-24\"><a href=\"#Disadvantages-24\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h3><p>Here are the most common disadvantages of OAuth 2.0:</p>\n<ul>\n<li>Lacks built-in security features.</li>\n<li>No standard implementation.</li>\n<li>No common set of scopes.</li>\n</ul>\n<h2 id=\"OpenID-Connect\"><a href=\"#OpenID-Connect\" class=\"headerlink\" title=\"OpenID Connect\"></a>OpenID Connect</h2><p>OAuth 2.0 is designed only for <em>authorization</em>, for granting access to data and features from one application to another. OpenID Connect (OIDC) is a thin layer that sits on top of OAuth 2.0 that adds login and profile information about the person who is logged in.</p>\n<p>When an Authorization Server supports OIDC, it is sometimes called an identity provider (IdP), since it provides information about the Resource Owner back to the Client. OpenID Connect is relatively new, resulting in lower adoption and industry implementation of best practices compared to OAuth.</p>\n<h3 id=\"Concepts-4\"><a href=\"#Concepts-4\" class=\"headerlink\" title=\"Concepts\"></a>Concepts</h3><p>The OpenID Connect (OIDC) protocol defines the following entities:</p>\n<ul>\n<li><strong>Relying Party</strong>: The current application.</li>\n<li><strong>OpenID Provider</strong>: This is essentially an intermediate service that provides a one-time code to the Relying Party.</li>\n<li><strong>Token Endpoint</strong>: A web server that accepts the One-Time Code (OTC) and provides an access code that‚Äôs valid for an hour. The main difference between OIDC and OAuth 2.0 is that the token is provided using JSON Web Token (JWT).</li>\n<li><strong>UserInfo Endpoint</strong>: The Relying Party communicates with this endpoint, providing a secure token and receiving information about the end-user</li>\n</ul>\n<p>Both OAuth 2.0 and OIDC are easy to implement and are JSON based, which is supported by most web and mobile applications. However, the OpenID Connect (OIDC) specification is more strict than that of basic OAuth.</p>\n<h1 id=\"Single-Sign-On-SSO\"><a href=\"#Single-Sign-On-SSO\" class=\"headerlink\" title=\"Single Sign-On (SSO)\"></a>Single Sign-On (SSO)</h1><p>Single Sign-On (SSO) is an authentication process in which a user is provided access to multiple applications or websites by using only a single set of login credentials. This prevents the need for the user to log separately into the different applications.</p>\n<p>The user credentials and other identifying information are stored and managed by a centralized system called Identity Provider (IdP). The Identity Provider is a trusted system that provides access to other websites and applications.</p>\n<p>Single Sign-On (SSO) based authentication systems are commonly used in enterprise environments where employees require access to multiple applications of their organizations.</p>\n<h2 id=\"Components-2\"><a href=\"#Components-2\" class=\"headerlink\" title=\"Components\"></a>Components</h2><p>Let‚Äôs discuss some key components of Single Sign-On (SSO).</p>\n<h3 id=\"Identity-Provider-IdP\"><a href=\"#Identity-Provider-IdP\" class=\"headerlink\" title=\"Identity Provider (IdP)\"></a>Identity Provider (IdP)</h3><p>User Identity information is stored and managed by a centralized system called Identity Provider (IdP). The Identity Provider authenticates the user and provides access to the service provider.</p>\n<p>The identity provider can directly authenticate the user by validating a username and password or by validating an assertion about the user‚Äôs identity as presented by a separate identity provider. The identity provider handles the management of user identities in order to free the service provider from this responsibility.</p>\n<h3 id=\"Service-Provider\"><a href=\"#Service-Provider\" class=\"headerlink\" title=\"Service Provider\"></a>Service Provider</h3><p>A service provider provides services to the end-user. They rely on identity providers to assert the identity of a user, and typically certain attributes about the user are managed by the identity provider. Service providers may also maintain a local account for the user along with attributes that are unique to their service.</p>\n<h3 id=\"Identity-Broker\"><a href=\"#Identity-Broker\" class=\"headerlink\" title=\"Identity Broker\"></a>Identity Broker</h3><p>An identity broker acts as an intermediary that connects multiple service providers with various different identity providers. Using Identity Broker, we can perform single sign-on over any application without the hassle of the protocol it follows.</p>\n<h2 id=\"SAML\"><a href=\"#SAML\" class=\"headerlink\" title=\"SAML\"></a>SAML</h2><p>Security Assertion Markup Language is an open standard that allows clients to share security information about identity, authentication, and permission across different systems. SAML is implemented with the Extensible Markup Language (XML) standard for sharing data.</p>\n<p>SAML specifically enables identity federation, making it possible for identity providers (IdPs) to seamlessly and securely pass authenticated identities and their attributes to service providers.</p>\n<h2 id=\"How-does-SSO-work\"><a href=\"#How-does-SSO-work\" class=\"headerlink\" title=\"How does SSO work?\"></a>How does SSO work?</h2><p>Now, let‚Äôs discuss how Single Sign-On works:</p>\n<p><img src=\"/assets/img/system-design/sso.jpg\" alt=\"sso\"></p>\n<ol>\n<li>The user requests a resource from their desired application.</li>\n<li>The application redirects the user to the Identity Provider (IdP) for authentication.</li>\n<li>The user signs in with their credentials (usually, username and password).</li>\n<li>Identity Provider (IdP) sends a Single Sign-On response back to the client application.</li>\n<li>The application grants access to the user.</li>\n</ol>\n<h2 id=\"SAML-vs-OAuth-2-0-and-OpenID-Connect-OIDC\"><a href=\"#SAML-vs-OAuth-2-0-and-OpenID-Connect-OIDC\" class=\"headerlink\" title=\"SAML vs OAuth 2.0 and OpenID Connect (OIDC)\"></a>SAML vs OAuth 2.0 and OpenID Connect (OIDC)</h2><p>There are many differences between SAML, OAuth, and OIDC. SAML uses XML to pass messages, while OAuth and OIDC use JSON. OAuth provides a simpler experience, while SAML is geared towards enterprise security.</p>\n<p>OAuth and OIDC use RESTful communication extensively, which is why mobile, and modern web applications find OAuth and OIDC a better experience for the user. SAML, on the other hand, drops a session cookie in a browser that allows a user to access certain web pages. This is great for short-lived workloads.</p>\n<p>OIDC is developer-friendly and simpler to implement, which broadens the use cases for which it might be implemented. It can be implemented from scratch pretty fast, via freely available libraries in all common programming languages. SAML can be complex to install and maintain, which only enterprise-size companies can handle well.</p>\n<p>OpenID Connect is essentially a layer on top of the OAuth framework. Therefore, it can offer a built-in layer of permission that asks a user to agree to what the service provider might access. Although SAML is also capable of allowing consent flow, it achieves this by hard-coding carried out by a developer and not as part of its protocol.</p>\n<p><em>Both of these authentication protocols are good at what they do. As always, a lot depends on our specific use cases and target audience.</em></p>\n<h2 id=\"Advantages-29\"><a href=\"#Advantages-29\" class=\"headerlink\" title=\"Advantages\"></a>Advantages</h2><p>Following are the benefits of using Single Sign-On:</p>\n<ul>\n<li>Ease of use as users only need to remember one set of credentials.</li>\n<li>Ease of access without having to go through a lengthy authorization process.</li>\n<li>Enforced security and compliance to protect sensitive data.</li>\n<li>Simplifying the management with reduced IT support cost and admin time.</li>\n</ul>\n<h2 id=\"Disadvantages-25\"><a href=\"#Disadvantages-25\" class=\"headerlink\" title=\"Disadvantages\"></a>Disadvantages</h2><p>Here are some disadvantages of Single Sign-On:</p>\n<ul>\n<li>Single Password Vulnerability, if the main SSO password gets compromised, all the supported applications get compromised.</li>\n<li>The authentication process using Single Sign-On is slower than traditional authentication as every application has to request the SSO provider for verification.</li>\n</ul>\n<h2 id=\"Examples-16\"><a href=\"#Examples-16\" class=\"headerlink\" title=\"Examples\"></a>Examples</h2><p>These are some commonly used Identity Providers (IdP):</p>\n<ul>\n<li><a href=\"https://www.okta.com/\">Okta</a></li>\n<li><a href=\"https://cloud.google.com/architecture/identity/single-sign-on\">Google</a></li>\n<li><a href=\"https://auth0.com/\">Auth0</a></li>\n<li><a href=\"https://www.onelogin.com/\">OneLogin</a></li>\n</ul>\n<h1 id=\"SSL-TLS-mTLS\"><a href=\"#SSL-TLS-mTLS\" class=\"headerlink\" title=\"SSL, TLS, mTLS\"></a>SSL, TLS, mTLS</h1><p>Let‚Äôs briefly discuss some important communication security protocols such as SSL, TLS, and mTLS. I would say that from a <em>‚Äúbig picture‚Äù</em> system design perspective, this topic is not very important but still good to know about.</p>\n<h2 id=\"SSL\"><a href=\"#SSL\" class=\"headerlink\" title=\"SSL\"></a>SSL</h2><p>SSL stands for Secure Sockets Layer, and it refers to a protocol for encrypting and securing communications that take place on the internet. It was first developed in 1995 but since has been deprecated in favor of TLS (Transport Layer Security).</p>\n<h3 id=\"Why-is-it-called-an-SSL-certificate-if-it-is-deprecated\"><a href=\"#Why-is-it-called-an-SSL-certificate-if-it-is-deprecated\" class=\"headerlink\" title=\"Why is it called an SSL certificate if it is deprecated?\"></a>Why is it called an SSL certificate if it is deprecated?</h3><p>Most major certificate providers still refer to certificates as SSL certificates, which is why the naming convention persists.</p>\n<h3 id=\"Why-was-SSL-so-important\"><a href=\"#Why-was-SSL-so-important\" class=\"headerlink\" title=\"Why was SSL so important?\"></a>Why was SSL so important?</h3><p>Originally, data on the web was transmitted in plaintext that anyone could read if they intercepted the message. SSL was created to correct this problem and protect user privacy. By encrypting any data that goes between the user and a web server, SSL also stops certain kinds of cyber attacks by preventing attackers from tampering with data in transit.</p>\n<h2 id=\"TLS\"><a href=\"#TLS\" class=\"headerlink\" title=\"TLS\"></a>TLS</h2><p>Transport Layer Security, or TLS, is a widely adopted security protocol designed to facilitate privacy and data security for communications over the internet. TLS evolved from a previous encryption protocol called Secure Sockets Layer (SSL). A primary use case of TLS is encrypting the communication between web applications and servers.</p>\n<p>There are three main components to what the TLS protocol accomplishes:</p>\n<ul>\n<li><strong>Encryption</strong>: hides the data being transferred from third parties.</li>\n<li><strong>Authentication</strong>: ensures that the parties exchanging information are who they claim to be.</li>\n<li><strong>Integrity</strong>: verifies that the data has not been forged or tampered with.</li>\n</ul>\n<h2 id=\"mTLS\"><a href=\"#mTLS\" class=\"headerlink\" title=\"mTLS\"></a>mTLS</h2><p>Mutual TLS, or mTLS, is a method for mutual authentication. mTLS ensures that the parties at each end of a network connection are who they claim to be by verifying that they both have the correct private key. The information within their respective TLS certificates provides additional verification.</p>\n<h3 id=\"Why-use-mTLS\"><a href=\"#Why-use-mTLS\" class=\"headerlink\" title=\"Why use mTLS?\"></a>Why use mTLS?</h3><p>mTLS helps ensure that the traffic is secure and trusted in both directions between a client and server. This provides an additional layer of security for users who log in to an organization‚Äôs network or applications. It also verifies connections with client devices that do not follow a login process, such as Internet of Things (IoT) devices.</p>\n<p>Nowadays, mTLS is commonly used by microservices or distributed systems in a <a href=\"https://en.wikipedia.org/wiki/Zero_trust_security_model\">zero trust security model</a> to verify each other.</p>\n<h1 id=\"System-Design-Interviews\"><a href=\"#System-Design-Interviews\" class=\"headerlink\" title=\"System Design Interviews\"></a>System Design Interviews</h1><p>System design is a very extensive topic and system design interviews are designed to evaluate your capability to produce technical solutions to abstract problems, as such, they‚Äôre not designed for a specific answer. The unique aspect of system design interviews is the two-way nature between the candidate and the interviewer.</p>\n<p>Expectations are quite different at different engineering levels as well. Because someone with a lot of practical experience will approach it quite differently from someone who‚Äôs new in the industry. As a result, it‚Äôs hard to come up with a single strategy that will help us stay organized during the interview.</p>\n<p>Let‚Äôs look at some common strategies for the system design interviews:</p>\n<h2 id=\"Requirements-clarifications\"><a href=\"#Requirements-clarifications\" class=\"headerlink\" title=\"Requirements clarifications\"></a>Requirements clarifications</h2><p>System design interview questions, by nature, are vague or abstract. Asking questions about the exact scope of the problem, and clarifying functional requirements early in the interview is essential. Usually, requirements are divided into three parts:</p>\n<h3 id=\"Functional-requirements\"><a href=\"#Functional-requirements\" class=\"headerlink\" title=\"Functional requirements\"></a>Functional requirements</h3><p>These are the requirements that the end user specifically demands as basic functionalities that the system should offer. All these functionalities need to be necessarily incorporated into the system as part of the contract.</p>\n<p>For example:</p>\n<ul>\n<li>‚ÄúWhat are the features that we need to design for this system?‚Äù</li>\n<li>‚ÄúWhat are the edge cases we need to consider, if any, in our design?‚Äù</li>\n</ul>\n<h3 id=\"Non-functional-requirements\"><a href=\"#Non-functional-requirements\" class=\"headerlink\" title=\"Non-functional requirements\"></a>Non-functional requirements</h3><p>These are the quality constraints that the system must satisfy according to the project contract. The priority or extent to which these factors are implemented varies from one project to another. They are also called non-behavioral requirements. For example, portability, maintainability, reliability, scalability, security, etc.</p>\n<p>For example:</p>\n<ul>\n<li>‚ÄúEach request should be processed with the minimum latency‚Äù</li>\n<li>‚ÄúSystem should be highly available‚Äù</li>\n</ul>\n<h3 id=\"Extended-requirements\"><a href=\"#Extended-requirements\" class=\"headerlink\" title=\"Extended requirements\"></a>Extended requirements</h3><p>These are basically ‚Äúnice to have‚Äù requirements that might be out of the scope of the system.</p>\n<p>For example:</p>\n<ul>\n<li>‚ÄúOur system should record metrics and analytics‚Äù</li>\n<li>‚ÄúService health and performance monitoring?‚Äù</li>\n</ul>\n<h2 id=\"Estimation-and-Constraints\"><a href=\"#Estimation-and-Constraints\" class=\"headerlink\" title=\"Estimation and Constraints\"></a>Estimation and Constraints</h2><p>Estimate the scale of the system we‚Äôre going to design. It is important to ask questions such as:</p>\n<ul>\n<li>‚ÄúWhat is the desired scale that this system will need to handle?‚Äù</li>\n<li>‚ÄúWhat is the read&#x2F;write ratio of our system?‚Äù</li>\n<li>‚ÄúHow many requests per second?‚Äù</li>\n<li>‚ÄúHow much storage will be needed?‚Äù</li>\n</ul>\n<p>These questions will help us scale our design later.</p>\n<h2 id=\"Data-model-design\"><a href=\"#Data-model-design\" class=\"headerlink\" title=\"Data model design\"></a>Data model design</h2><p>Once we have the estimations, we can start with defining the database schema. Doing so in the early stages of the interview would help us to understand the data flow which is the core of every system. In this step, we basically define all the entities and relationships between them.</p>\n<ul>\n<li>‚ÄúWhat are the different entities in the system?‚Äù</li>\n<li>‚ÄúWhat are the relationships between these entities?‚Äù</li>\n<li>‚ÄúHow many tables do we need?‚Äù</li>\n<li>‚ÄúIs NoSQL a better choice here?‚Äù</li>\n</ul>\n<h2 id=\"API-design\"><a href=\"#API-design\" class=\"headerlink\" title=\"API design\"></a>API design</h2><p>Next, we can start designing APIs for the system. These APIs will help us define the expectations from the system explicitly. We don‚Äôt have to write any code, just a simple interface defining the API requirements such as parameters, functions, classes, types, entities, etc.</p>\n<p>For example:</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createUser</span>(<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">email</span>: <span class=\"built_in\">string</span>): <span class=\"title class_\">User</span></span><br></pre></td></tr></table></figure>\n\n<p>It is advised to keep the interface as simple as possible and come back to it later when covering extended requirements.</p>\n<h2 id=\"High-level-component-design\"><a href=\"#High-level-component-design\" class=\"headerlink\" title=\"High-level component design\"></a>High-level component design</h2><p>Now we have established our data model and API design, it‚Äôs time to identify system components (such as Load Balancers, API Gateway, etc.) that are needed to solve our problem and draft the first design of our system.</p>\n<ul>\n<li>‚ÄúIs it best to design a monolithic or a microservices architecture?‚Äù</li>\n<li>‚ÄúWhat type of database should we use?‚Äù</li>\n</ul>\n<p>Once we have a basic diagram, we can start discussing with the interviewer how the system will work from the client‚Äôs perspective.</p>\n<h2 id=\"Detailed-design\"><a href=\"#Detailed-design\" class=\"headerlink\" title=\"Detailed design\"></a>Detailed design</h2><p>Now it‚Äôs time to go into detail about the major components of the system we designed. As always discuss with the interviewer which component may need further improvements.</p>\n<p>Here is a good opportunity to demonstrate your experience in the areas of your expertise. Present different approaches, advantages, and disadvantages. Explain your design decisions, and back them up with examples. This is also a good time to discuss any additional features the system might be able to support, though this is optional.</p>\n<ul>\n<li>‚ÄúHow should we partition our data?‚Äù</li>\n<li>‚ÄúWhat about load distribution?‚Äù</li>\n<li>‚ÄúShould we use cache?‚Äù</li>\n<li>‚ÄúHow will we handle a sudden spike in traffic?‚Äù</li>\n</ul>\n<p>Also, try not to be too opinionated about certain technologies, statements like ‚ÄúI believe that NoSQL databases are just better, SQL databases are not scalable‚Äù reflect poorly. As someone who has interviewed a lot of people over the years, my two cents here would be to be humble about what you know and what you do not. Use your existing knowledge with examples to navigate this part of the interview.</p>\n<h2 id=\"Identify-and-resolve-bottlenecks\"><a href=\"#Identify-and-resolve-bottlenecks\" class=\"headerlink\" title=\"Identify and resolve bottlenecks\"></a>Identify and resolve bottlenecks</h2><p>Finally, it‚Äôs time to discuss bottlenecks and approaches to mitigate them. Here are some important questions to ask:</p>\n<ul>\n<li>‚ÄúDo we have enough database replicas?‚Äù</li>\n<li>‚ÄúIs there any single point of failure?‚Äù</li>\n<li>‚ÄúIs database sharding required?‚Äù</li>\n<li>‚ÄúHow can we make our system more robust?‚Äù</li>\n<li>‚ÄúHow to improve the availability of our cache?‚Äù</li>\n</ul>\n<p>Make sure to read the engineering blog of the company you‚Äôre interviewing with. This will help you get a sense of what technology stack they‚Äôre using and which problems are important to them.</p>\n<h1 id=\"URL-Shortener\"><a href=\"#URL-Shortener\" class=\"headerlink\" title=\"URL Shortener\"></a>URL Shortener</h1><p>Let‚Äôs design a URL shortener, similar to services like <a href=\"https://bitly.com/\">Bitly</a>, <a href=\"https://tinyurl.com/app\">TinyURL</a>.</p>\n<h2 id=\"What-is-a-URL-Shortener\"><a href=\"#What-is-a-URL-Shortener\" class=\"headerlink\" title=\"What is a URL Shortener?\"></a>What is a URL Shortener?</h2><p>A URL shortener service creates an alias or a short URL for a long URL. Users are redirected to the original URL when they visit these short links.</p>\n<p>For example, the following long URL can be changed to a shorter URL.</p>\n<p><strong>Long URL</strong>: <a href=\"https://karanpratapsingh.com/courses/system-design/url-shortener\">https://karanpratapsingh.com/courses/system-design/url-shortener</a></p>\n<p><strong>Short URL</strong>: <a href=\"https://bit.ly/3I71d3o\">https://bit.ly/3I71d3o</a></p>\n<h2 id=\"Why-do-we-need-a-URL-shortener\"><a href=\"#Why-do-we-need-a-URL-shortener\" class=\"headerlink\" title=\"Why do we need a URL shortener?\"></a>Why do we need a URL shortener?</h2><p>URL shortener saves space in general when we are sharing URLs. Users are also less likely to mistype shorter URLs. Moreover, we can also optimize links across devices, this allows us to track individual links.</p>\n<h2 id=\"Requirements\"><a href=\"#Requirements\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h2><p>Our URL shortening system should meet the following requirements:</p>\n<h3 id=\"Functional-requirements-1\"><a href=\"#Functional-requirements-1\" class=\"headerlink\" title=\"Functional requirements\"></a>Functional requirements</h3><ul>\n<li>Given a URL, our service should generate a <em>shorter and unique</em> alias for it.</li>\n<li>Users should be redirected to the original URL when they visit the short link.</li>\n<li>Links should expire after a default timespan.</li>\n</ul>\n<h3 id=\"Non-functional-requirements-1\"><a href=\"#Non-functional-requirements-1\" class=\"headerlink\" title=\"Non-functional requirements\"></a>Non-functional requirements</h3><ul>\n<li>High availability with minimal latency.</li>\n<li>The system should be scalable and efficient.</li>\n</ul>\n<h3 id=\"Extended-requirements-1\"><a href=\"#Extended-requirements-1\" class=\"headerlink\" title=\"Extended requirements\"></a>Extended requirements</h3><ul>\n<li>Prevent abuse of services.</li>\n<li>Record analytics and metrics for redirections.</li>\n</ul>\n<h2 id=\"Estimation-and-Constraints-1\"><a href=\"#Estimation-and-Constraints-1\" class=\"headerlink\" title=\"Estimation and Constraints\"></a>Estimation and Constraints</h2><p>Let‚Äôs start with the estimation and constraints.</p>\n<p><em>Note: Make sure to check any scale or traffic related assumptions with your interviewer.</em></p>\n<h3 id=\"Traffic\"><a href=\"#Traffic\" class=\"headerlink\" title=\"Traffic\"></a>Traffic</h3><p>This will be a read-heavy system, so let‚Äôs assume a <code>100:1</code> read&#x2F;write ratio with 100 million links generated per month.</p>\n<p><strong>Reads&#x2F;Writes Per month</strong></p>\n<p>For reads per month:</p>\n<p>$$<br>100 \\times 100 \\space million &#x3D; 10 \\space billion&#x2F;month<br>$$</p>\n<p>Similarly for writes:</p>\n<p>$$<br>1 \\times 100 \\space million &#x3D; 100 \\space million&#x2F;month<br>$$</p>\n<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>\n<p>100 million requests per month translate into 40 requests per second.</p>\n<p>$$<br>\\frac{100 \\space million}{(30 \\space days \\times 24 \\space hrs \\times 3600 \\space seconds)} &#x3D; \\sim 40 \\space URLs&#x2F;second<br>$$</p>\n<p>And with a <code>100:1</code> read&#x2F;write ratio, the number of redirections will be:</p>\n<p>$$<br>100 \\times 40 \\space URLs&#x2F;second &#x3D; 4000 \\space requests&#x2F;second<br>$$</p>\n<h3 id=\"Bandwidth\"><a href=\"#Bandwidth\" class=\"headerlink\" title=\"Bandwidth\"></a>Bandwidth</h3><p>Since we expect about 40 URLs every second, and if we assume each request is of size 500 bytes then the total incoming data for then write requests would be:</p>\n<p>$$<br>40 \\times 500 \\space bytes &#x3D; 20 \\space KB&#x2F;second<br>$$</p>\n<p>Similarly, for the read requests, since we expect about 4K redirections, the total outgoing data would be:</p>\n<p>$$<br>4000 \\space URLs&#x2F;second \\times 500 \\space bytes &#x3D; \\sim 2 \\space MB&#x2F;second<br>$$</p>\n<h3 id=\"Storage-2\"><a href=\"#Storage-2\" class=\"headerlink\" title=\"Storage\"></a>Storage</h3><p>For storage, we will assume we store each link or record in our database for 10 years. Since we expect around 100M new requests every month, the total number of records we will need to store would be:</p>\n<p>$$<br>100 \\space million \\times 10\\space years \\times 12 \\space months &#x3D; 12 \\space billion<br>$$</p>\n<p>Like earlier, if we assume each stored recorded will be approximately 500 bytes. We will need around 6TB of storage:</p>\n<p>$$<br>12 \\space billion \\times 500 \\space bytes &#x3D; 6 \\space TB<br>$$</p>\n<h3 id=\"Cache\"><a href=\"#Cache\" class=\"headerlink\" title=\"Cache\"></a>Cache</h3><p>For caching, we will follow the classic <a href=\"https://en.wikipedia.org/wiki/Pareto_principle\">Pareto principle</a> also known as the 80&#x2F;20 rule. This means that 80% of the requests are for 20% of the data, so we can cache around 20% of our requests.</p>\n<p>Since we get around 4K read or redirection requests each second. This translates into 350M requests per day.</p>\n<p>$$<br>4000 \\space URLs&#x2F;second \\times 24 \\space hours \\times 3600 \\space seconds &#x3D; \\sim 350 \\space million \\space requests&#x2F;day<br>$$</p>\n<p>Hence, we will need around 35GB of memory per day.</p>\n<p>$$<br>20 \\space percent \\times 350 \\space million \\times 500 \\space bytes &#x3D; 35 \\space GB&#x2F;day<br>$$</p>\n<h3 id=\"High-level-estimate\"><a href=\"#High-level-estimate\" class=\"headerlink\" title=\"High-level estimate\"></a>High-level estimate</h3><p>Here is our high-level estimate:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Estimate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Writes (New URLs)</td>\n<td>40&#x2F;s</td>\n</tr>\n<tr>\n<td>Reads (Redirection)</td>\n<td>4K&#x2F;s</td>\n</tr>\n<tr>\n<td>Bandwidth (Incoming)</td>\n<td>20 KB&#x2F;s</td>\n</tr>\n<tr>\n<td>Bandwidth (Outgoing)</td>\n<td>2 MB&#x2F;s</td>\n</tr>\n<tr>\n<td>Storage (10 years)</td>\n<td>6 TB</td>\n</tr>\n<tr>\n<td>Memory (Caching)</td>\n<td>~35 GB&#x2F;day</td>\n</tr>\n</tbody></table>\n<h2 id=\"Data-model-design-1\"><a href=\"#Data-model-design-1\" class=\"headerlink\" title=\"Data model design\"></a>Data model design</h2><p>Next, we will focus on the data model design. Here is our database schema:</p>\n<p><img src=\"/assets/img/system-design/url-shortener-datamodel.jpg\" alt=\"url-shortener-datamodel\"></p>\n<p>Initially, we can get started with just two tables:</p>\n<p><strong>users</strong></p>\n<p>Stores user‚Äôs details such as <code>name</code>, <code>email</code>, <code>createdAt</code>, etc.</p>\n<p><strong>urls</strong></p>\n<p>Contains the new short URL‚Äôs properties such as <code>expiration</code>, <code>hash</code>, <code>originalURL</code>, and <code>userID</code> of the user who created the short URL. We can also use the <code>hash</code> column as an <a href=\"https://karanpratapsingh.com/courses/system-design/indexes\">index</a> to improve the query performance.</p>\n<h3 id=\"What-kind-of-database-should-we-use\"><a href=\"#What-kind-of-database-should-we-use\" class=\"headerlink\" title=\"What kind of database should we use?\"></a>What kind of database should we use?</h3><p>Since the data is not strongly relational, NoSQL databases such as <a href=\"https://aws.amazon.com/dynamodb\">Amazon DynamoDB</a>, <a href=\"https://cassandra.apache.org/_/index.html\">Apache Cassandra</a>, or <a href=\"https://www.mongodb.com/\">MongoDB</a> will be a better choice here, if we do decide to use an SQL database then we can use something like <a href=\"https://azure.microsoft.com/en-in/products/azure-sql/database\">Azure SQL Database</a> or <a href=\"https://aws.amazon.com/rds\">Amazon RDS</a>.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/sql-vs-nosql-databases\">SQL vs NoSQL</a>.</em></p>\n<h2 id=\"API-design-1\"><a href=\"#API-design-1\" class=\"headerlink\" title=\"API design\"></a>API design</h2><p>Let us do a basic API design for our services:</p>\n<h3 id=\"Create-URL\"><a href=\"#Create-URL\" class=\"headerlink\" title=\"Create URL\"></a>Create URL</h3><p>This API should create a new short URL in our system given an original URL.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createURL</span>(<span class=\"attr\">apiKey</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">originalURL</span>: <span class=\"built_in\">string</span>, expiration?: <span class=\"title class_\">Date</span>): <span class=\"built_in\">string</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>API Key (<code>string</code>): API key provided by the user.</p>\n<p>Original Url (<code>string</code>): Original URL to be shortened.</p>\n<p>Expiration (<code>Date</code>): Expiration date of the new URL <em>(optional)</em>.</p>\n<p><strong>Returns</strong></p>\n<p>Short URL (<code>string</code>): New shortened URL.</p>\n<h3 id=\"Get-URL\"><a href=\"#Get-URL\" class=\"headerlink\" title=\"Get URL\"></a>Get URL</h3><p>This API should retrieve the original URL from a given short URL.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getURL</span>(<span class=\"attr\">apiKey</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">shortURL</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">string</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>API Key (<code>string</code>): API key provided by the user.</p>\n<p>Short Url (<code>string</code>): Short URL mapped to the original URL.</p>\n<p><strong>Returns</strong></p>\n<p>Original URL (<code>string</code>): Original URL to be retrieved.</p>\n<h3 id=\"Delete-URL\"><a href=\"#Delete-URL\" class=\"headerlink\" title=\"Delete URL\"></a>Delete URL</h3><p>This API should delete a given shortURL from our system.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">deleteURL</span>(<span class=\"attr\">apiKey</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">shortURL</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>API Key (<code>string</code>): API key provided by the user.</p>\n<p>Short Url (<code>string</code>): Short URL to be deleted.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h3 id=\"Why-do-we-need-an-API-key\"><a href=\"#Why-do-we-need-an-API-key\" class=\"headerlink\" title=\"Why do we need an API key?\"></a>Why do we need an API key?</h3><p>As you must‚Äôve noticed, we‚Äôre using an API key to prevent abuse of our services. Using this API key we can limit the users to a certain number of requests per second or minute. This is quite a standard practice for developer APIs and should cover our extended requirement.</p>\n<h2 id=\"High-level-design\"><a href=\"#High-level-design\" class=\"headerlink\" title=\"High-level design\"></a>High-level design</h2><p>Now let us do a high-level design of our system.</p>\n<h3 id=\"URL-Encoding\"><a href=\"#URL-Encoding\" class=\"headerlink\" title=\"URL Encoding\"></a>URL Encoding</h3><p>Our system‚Äôs primary goal is to shorten a given URL, let‚Äôs look at different approaches:</p>\n<p><strong>Base62 Approach</strong></p>\n<p>In this approach, we can encode the original URL using <a href=\"https://en.wikipedia.org/wiki/Base62\">Base62</a> which consists of the capital letters A-Z, the lower case letters a-z, and the numbers 0-9.</p>\n<p>$$<br>Number \\space of \\space URLs &#x3D; 62^N<br>$$</p>\n<p>Where,</p>\n<p><code>N</code>: Number of characters in the generated URL.</p>\n<p>So, if we want to generate a URL that is 7 characters long, we will generate ~3.5 trillion different URLs.</p>\n<p>$$<br>\\begin{gather*}<br>62^5 &#x3D; \\sim 916 \\space million \\space URLs \\<br>62^6 &#x3D; \\sim 56.8 \\space billion \\space URLs \\<br>62^7 &#x3D; \\sim 3.5 \\space trillion \\space URLs<br>\\end{gather*}<br>$$</p>\n<p>This is the simplest solution here, but it does not guarantee non-duplicate or collision-resistant keys.</p>\n<p><strong>MD5 Approach</strong></p>\n<p>The <a href=\"https://en.wikipedia.org/wiki/MD5\">MD5 message-digest algorithm</a> is a widely used hash function producing a 128-bit hash value (or 32 hexadecimal digits). We can use these 32 hexadecimal digits for generating 7 characters long URL.</p>\n<p>$$<br>MD5(original_url) \\rightarrow base62encode \\rightarrow hash<br>$$</p>\n<p>However, this creates a new issue for us, which is duplication and collision. We can try to re-compute the hash until we find a unique one but that will increase the overhead of our systems. It‚Äôs better to look for more scalable approaches.</p>\n<p><strong>Counter Approach</strong></p>\n<p>In this approach, we will start with a single server which will maintain the count of the keys generated. Once our service receives a request, it can reach out to the counter which returns a unique number and increments the counter. When the next request comes the counter again returns the unique number and this goes on.</p>\n<p>$$<br>Counter(0-3.5 \\space trillion) \\rightarrow base62encode \\rightarrow hash<br>$$</p>\n<p>The problem with this approach is that it can quickly become a single point for failure. And if we run multiple instances of the counter we can have collision as it‚Äôs essentially a distributed system.</p>\n<p>To solve this issue we can use a distributed system manager such as <a href=\"https://zookeeper.apache.org/\">Zookeeper</a> which can provide distributed synchronization. Zookeeper can maintain multiple ranges for our servers.</p>\n<p>$$<br>\\begin{align*}<br>&amp; Range \\space 1: \\space 1 \\rightarrow 1,000,000 \\<br>&amp; Range \\space 2: \\space 1,000,001 \\rightarrow 2,000,000 \\<br>&amp; Range \\space 3: \\space 2,000,001 \\rightarrow 3,000,000 \\<br>&amp; ‚Ä¶<br>\\end{align*}<br>$$</p>\n<p>Once a server reaches its maximum range Zookeeper will assign an unused counter range to the new server. This approach can guarantee non-duplicate and collision-resistant URLs. Also, we can run multiple instances of Zookeeper to remove the single point of failure.</p>\n<h3 id=\"Key-Generation-Service-KGS\"><a href=\"#Key-Generation-Service-KGS\" class=\"headerlink\" title=\"Key Generation Service (KGS)\"></a>Key Generation Service (KGS)</h3><p>As we discussed, generating a unique key at scale without duplication and collisions can be a bit of a challenge. To solve this problem, we can create a standalone Key Generation Service (KGS) that generates a unique key ahead of time and stores it in a separate database for later use. This approach can make things simple for us.</p>\n<p><strong>How to handle concurrent access?</strong></p>\n<p>Once the key is used, we can mark it in the database to make sure we don‚Äôt reuse it, however, if there are multiple server instances reading data concurrently, two or more servers might try to use the same key.</p>\n<p>The easiest way to solve this would be to store keys in two tables. As soon as a key is used, we move it to a separate table with appropriate locking in place. Also, to improve reads, we can keep some of the keys in memory.</p>\n<p><strong>KGS database estimations</strong></p>\n<p>As per our discussion, we can generate up to ~56.8 billion unique 6 character long keys which will result in us having to store 300 GB of keys.</p>\n<p>$$<br>6 \\space characters \\times 56.8 \\space billion &#x3D; \\sim 390 \\space GB<br>$$</p>\n<p>While 390 GB seems like a lot for this simple use case, it is important to remember this is for the entirety of our service lifetime and the size of the keys database would not increase like our main database.</p>\n<h3 id=\"Caching-1\"><a href=\"#Caching-1\" class=\"headerlink\" title=\"Caching\"></a>Caching</h3><p>Now, let‚Äôs talk about <a href=\"https://karanpratapsingh.com/courses/system-design/caching\">caching</a>. As per our estimations, we will require around ~35 GB of memory per day to cache 20% of the incoming requests to our services. For this use case, we can use <a href=\"https://redis.io/\">Redis</a> or <a href=\"https://memcached.org/\">Memcached</a> servers alongside our API server.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/caching\">caching</a>.</em></p>\n<h3 id=\"Design\"><a href=\"#Design\" class=\"headerlink\" title=\"Design\"></a>Design</h3><p>Now that we have identified some core components, let‚Äôs do the first draft of our system design.</p>\n<p><img src=\"/assets/img/system-design/url-shortener-basic-design.jpg\" alt=\"url-shortener-basic-design\"></p>\n<p>Here‚Äôs how it works:</p>\n<p><strong>Creating a new URL</strong></p>\n<ol>\n<li>When a user creates a new URL, our API server requests a new unique key from the Key Generation Service (KGS).</li>\n<li>Key Generation Service provides a unique key to the API server and marks the key as used.</li>\n<li>API server writes the new URL entry to the database and cache.</li>\n<li>Our service returns an HTTP 201 (Created) response to the user.</li>\n</ol>\n<p><strong>Accessing a URL</strong></p>\n<ol>\n<li>When a client navigates to a certain short URL, the request is sent to the API servers.</li>\n<li>The request first hits the cache, and if the entry is not found there then it is retrieved from the database and an HTTP 301 (Redirect) is issued to the original URL.</li>\n<li>If the key is still not found in the database, an HTTP 404 (Not found) error is sent to the user.</li>\n</ol>\n<h2 id=\"Detailed-design-1\"><a href=\"#Detailed-design-1\" class=\"headerlink\" title=\"Detailed design\"></a>Detailed design</h2><p>It‚Äôs time to discuss the finer details of our design.</p>\n<h3 id=\"Data-Partitioning-1\"><a href=\"#Data-Partitioning-1\" class=\"headerlink\" title=\"Data Partitioning\"></a>Data Partitioning</h3><p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href=\"https://karanpratapsingh.com/courses/system-design/sharding\">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>\n<ul>\n<li>Hash-Based Partitioning</li>\n<li>List-Based Partitioning</li>\n<li>Range Based Partitioning</li>\n<li>Composite Partitioning</li>\n</ul>\n<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href=\"https://karanpratapsingh.com/courses/system-design/consistent-hashing\">Consistent hashing</a>.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/sharding\">Sharding</a> and <a href=\"https://karanpratapsingh.com/courses/system-design/consistent-hashing\">Consistent Hashing</a>.</em></p>\n<h3 id=\"Database-cleanup\"><a href=\"#Database-cleanup\" class=\"headerlink\" title=\"Database cleanup\"></a>Database cleanup</h3><p>This is more of a maintenance step for our services and depends on whether we keep the expired entries or remove them. If we do decide to remove expired entries, we can approach this in two different ways:</p>\n<p><strong>Active cleanup</strong></p>\n<p>In active cleanup, we will run a separate cleanup service which will periodically remove expired links from our storage and cache. This will be a very lightweight service like a <a href=\"https://en.wikipedia.org/wiki/Cron\">cron job</a>.</p>\n<p><strong>Passive cleanup</strong></p>\n<p>For passive cleanup, we can remove the entry when a user tries to access an expired link. This can ensure a lazy cleanup of our database and cache.</p>\n<h3 id=\"Cache-1\"><a href=\"#Cache-1\" class=\"headerlink\" title=\"Cache\"></a>Cache</h3><p>Now let us talk about <a href=\"https://karanpratapsingh.com/courses/system-design/caching\">caching</a>.</p>\n<p><strong>Which cache eviction policy to use?</strong></p>\n<p>As we discussed before, we can use solutions like <a href=\"https://redis.io/\">Redis</a> or <a href=\"https://memcached.org/\">Memcached</a> and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs?</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)\">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>\n<p><strong>How to handle cache miss?</strong></p>\n<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>\n<h3 id=\"Metrics-and-Analytics\"><a href=\"#Metrics-and-Analytics\" class=\"headerlink\" title=\"Metrics and Analytics\"></a>Metrics and Analytics</h3><p>Recording analytics and metrics is one of our extended requirements. We can store and update metadata like visitor‚Äôs country, platform, the number of views, etc alongside the URL entry in our database.</p>\n<h3 id=\"Security-2\"><a href=\"#Security-2\" class=\"headerlink\" title=\"Security\"></a>Security</h3><p>For security, we can introduce private URLs and authorization. A separate table can be used to store user ids that have permission to access a specific URL. If a user does not have proper permissions, we can return an HTTP 401 (Unauthorized) error.</p>\n<p>We can also use an <a href=\"https://karanpratapsingh.com/courses/system-design/api-gateway\">API Gateway</a> as they can support capabilities like authorization, rate limiting, and load balancing out of the box.</p>\n<h2 id=\"Identify-and-resolve-bottlenecks-1\"><a href=\"#Identify-and-resolve-bottlenecks-1\" class=\"headerlink\" title=\"Identify and resolve bottlenecks\"></a>Identify and resolve bottlenecks</h2><p><img src=\"/assets/img/system-design/url-shortener-advanced-design.jpg\" alt=\"url-shortener-advanced-design\"></p>\n<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>\n<ul>\n<li>‚ÄúWhat if the API service or Key Generation Service crashes?‚Äù</li>\n<li>‚ÄúHow will we distribute our traffic between our components?‚Äù</li>\n<li>‚ÄúHow can we reduce the load on our database?‚Äù</li>\n<li>‚ÄúWhat if the key database used by KGS fails?‚Äù</li>\n<li>‚ÄúHow to improve the availability of our cache?‚Äù</li>\n</ul>\n<p>To make our system more resilient we can do the following:</p>\n<ul>\n<li>Running multiple instances of our Servers and Key Generation Service.</li>\n<li>Introducing <a href=\"https://karanpratapsingh.com/courses/system-design/load-balancing\">load balancers</a> between clients, servers, databases, and cache servers.</li>\n<li>Using multiple read replicas for our database as it‚Äôs a read-heavy system.</li>\n<li>Standby replica for our key database in case it fails.</li>\n<li>Multiple instances and replicas for our distributed cache.</li>\n</ul>\n<h1 id=\"WhatsApp\"><a href=\"#WhatsApp\" class=\"headerlink\" title=\"WhatsApp\"></a>WhatsApp</h1><p>Let‚Äôs design a <a href=\"https://whatsapp.com/\">WhatsApp</a> like instant messaging service, similar to services like <a href=\"https://www.whatsapp.com/\">WhatsApp</a>, <a href=\"https://www.messenger.com/\">Facebook Messenger</a>, and <a href=\"https://www.wechat.com/\">WeChat</a>.</p>\n<h2 id=\"What-is-WhatsApp\"><a href=\"#What-is-WhatsApp\" class=\"headerlink\" title=\"What is WhatsApp?\"></a>What is WhatsApp?</h2><p>WhatsApp is a chat application that provides instant messaging services to its users. It is one of the most used mobile applications on the planet connecting over 2 billion users in 180+ countries. WhatsApp is also available on the web.</p>\n<h2 id=\"Requirements-1\"><a href=\"#Requirements-1\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h2><p>Our system should meet the following requirements:</p>\n<h3 id=\"Functional-requirements-2\"><a href=\"#Functional-requirements-2\" class=\"headerlink\" title=\"Functional requirements\"></a>Functional requirements</h3><ul>\n<li>Should support one-on-one chat.</li>\n<li>Group chats (max 100 people).</li>\n<li>Should support file sharing (image, video, etc.).</li>\n</ul>\n<h3 id=\"Non-functional-requirements-2\"><a href=\"#Non-functional-requirements-2\" class=\"headerlink\" title=\"Non-functional requirements\"></a>Non-functional requirements</h3><ul>\n<li>High availability with minimal latency.</li>\n<li>The system should be scalable and efficient.</li>\n</ul>\n<h3 id=\"Extended-requirements-2\"><a href=\"#Extended-requirements-2\" class=\"headerlink\" title=\"Extended requirements\"></a>Extended requirements</h3><ul>\n<li>Sent, Delivered, and Read receipts of the messages.</li>\n<li>Show the last seen time of users.</li>\n<li>Push notifications.</li>\n</ul>\n<h2 id=\"Estimation-and-Constraints-2\"><a href=\"#Estimation-and-Constraints-2\" class=\"headerlink\" title=\"Estimation and Constraints\"></a>Estimation and Constraints</h2><p>Let‚Äôs start with the estimation and constraints.</p>\n<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>\n<h3 id=\"Traffic-1\"><a href=\"#Traffic-1\" class=\"headerlink\" title=\"Traffic\"></a>Traffic</h3><p>Let us assume we have 50 million daily active users (DAU) and on average each user sends at least 10 messages to 4 different people every day. This gives us 2 billion messages per day.</p>\n<p>$$<br>50 \\space million \\times 20 \\space messages &#x3D; 2 \\space billion&#x2F;day<br>$$</p>\n<p>Messages can also contain media such as images, videos, or other files. We can assume that 5 percent of messages are media files shared by the users, which gives us additional 200 million files we would need to store.</p>\n<p>$$<br>5 \\space percent \\times 2 \\space billion &#x3D; 200 \\space million&#x2F;day<br>$$</p>\n<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>\n<p>2 billion requests per day translate into 24K requests per second.</p>\n<p>$$<br>\\frac{2 \\space billion}{(24 \\space hrs \\times 3600 \\space seconds)} &#x3D; \\sim 24K \\space requests&#x2F;second<br>$$</p>\n<h3 id=\"Storage-3\"><a href=\"#Storage-3\" class=\"headerlink\" title=\"Storage\"></a>Storage</h3><p>If we assume each message on average is 100 bytes, we will require about 200 GB of database storage every day.</p>\n<p>$$<br>2 \\space billion \\times 100 \\space bytes &#x3D; \\sim 200 \\space GB&#x2F;day<br>$$</p>\n<p>As per our requirements, we also know that around 5 percent of our daily messages (100 million) are media files. If we assume each file is 50 KB on average, we will require 10 TB of storage every day.</p>\n<p>$$<br>100 \\space million \\times 100 \\space KB &#x3D; 10 \\space TB&#x2F;day<br>$$</p>\n<p>And for 10 years, we will require about 38 PB of storage.</p>\n<p>$$<br>(10 \\space TB + 0.2 \\space TB) \\times 10 \\space years \\times 365 \\space days &#x3D; \\sim 38 \\space PB<br>$$</p>\n<h3 id=\"Bandwidth-1\"><a href=\"#Bandwidth-1\" class=\"headerlink\" title=\"Bandwidth\"></a>Bandwidth</h3><p>As our system is handling 10.2 TB of ingress every day, we will require a minimum bandwidth of around 120 MB per second.</p>\n<p>$$<br>\\frac{10.2 \\space TB}{(24 \\space hrs \\times 3600 \\space seconds)} &#x3D; \\sim 120 \\space MB&#x2F;second<br>$$</p>\n<h3 id=\"High-level-estimate-1\"><a href=\"#High-level-estimate-1\" class=\"headerlink\" title=\"High-level estimate\"></a>High-level estimate</h3><p>Here is our high-level estimate:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Estimate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Daily active users (DAU)</td>\n<td>50 million</td>\n</tr>\n<tr>\n<td>Requests per second (RPS)</td>\n<td>24K&#x2F;s</td>\n</tr>\n<tr>\n<td>Storage (per day)</td>\n<td>~10.2 TB</td>\n</tr>\n<tr>\n<td>Storage (10 years)</td>\n<td>~38 PB</td>\n</tr>\n<tr>\n<td>Bandwidth</td>\n<td>~120 MB&#x2F;s</td>\n</tr>\n</tbody></table>\n<h2 id=\"Data-model-design-2\"><a href=\"#Data-model-design-2\" class=\"headerlink\" title=\"Data model design\"></a>Data model design</h2><p>This is the general data model which reflects our requirements.</p>\n<p><img src=\"/assets/img/system-design/whatsapp-datamodel.jpg\" alt=\"whatsapp-datamodel\"></p>\n<p>We have the following tables:</p>\n<p><strong>users</strong></p>\n<p>This table will contain a user‚Äôs information such as <code>name</code>, <code>phoneNumber</code>, and other details.</p>\n<p><strong>messages</strong></p>\n<p>As the name suggests, this table will store messages with properties such as <code>type</code> (text, image, video, etc.), <code>content</code>, and timestamps for message delivery. The message will also have a corresponding <code>chatID</code> or <code>groupID</code>.</p>\n<p><strong>chats</strong></p>\n<p>This table basically represents a private chat between two users and can contain multiple messages.</p>\n<p><strong>users_chats</strong></p>\n<p>This table maps users and chats as multiple users can have multiple chats (N:M relationship) and vice versa.</p>\n<p><strong>groups</strong></p>\n<p>This table represents a group between multiple users.</p>\n<p><strong>users_groups</strong></p>\n<p>This table maps users and groups as multiple users can be a part of multiple groups (N:M relationship) and vice versa.</p>\n<h3 id=\"What-kind-of-database-should-we-use-1\"><a href=\"#What-kind-of-database-should-we-use-1\" class=\"headerlink\" title=\"What kind of database should we use?\"></a>What kind of database should we use?</h3><p>While our data model seems quite relational, we don‚Äôt necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>\n<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href=\"https://www.postgresql.org/\">PostgreSQL</a> or a distributed NoSQL database such as <a href=\"https://cassandra.apache.org/_/index.html\">Apache Cassandra</a> for our use case.</p>\n<h2 id=\"API-design-2\"><a href=\"#API-design-2\" class=\"headerlink\" title=\"API design\"></a>API design</h2><p>Let us do a basic API design for our services:</p>\n<h3 id=\"Get-all-chats-or-groups\"><a href=\"#Get-all-chats-or-groups\" class=\"headerlink\" title=\"Get all chats or groups\"></a>Get all chats or groups</h3><p>This API will get all chats or groups for a given <code>userID</code>.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getAll</span>(<span class=\"attr\">userID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"title class_\">Chat</span>[] | <span class=\"title class_\">Group</span>[]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>User ID (<code>UUID</code>): ID of the current user.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>Chat[] | Group[]</code>): All the chats and groups the user is a part of.</p>\n<h3 id=\"Get-messages\"><a href=\"#Get-messages\" class=\"headerlink\" title=\"Get messages\"></a>Get messages</h3><p>Get all messages for a user given the <code>channelID</code> (chat or group id).</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getMessages</span>(<span class=\"attr\">userID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">channelID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"title class_\">Message</span>[]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>User ID (<code>UUID</code>): ID of the current user.</p>\n<p>Channel ID (<code>UUID</code>): ID of the channel (chat or group) from which messages need to be retrieved.</p>\n<p><strong>Returns</strong></p>\n<p>Messages (<code>Message[]</code>): All the messages in a given chat or group.</p>\n<h3 id=\"Send-message\"><a href=\"#Send-message\" class=\"headerlink\" title=\"Send message\"></a>Send message</h3><p>Send a message from a user to a channel (chat or group).</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">sendMessage</span>(<span class=\"attr\">userID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">channelID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">message</span>: <span class=\"title class_\">Message</span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>User ID (<code>UUID</code>): ID of the current user.</p>\n<p>Channel ID (<code>UUID</code>): ID of the channel (chat or group) user wants to send a message to.</p>\n<p>Message (<code>Message</code>): The message (text, image, video, etc.) that the user wants to send.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h3 id=\"Join-or-leave-a-group\"><a href=\"#Join-or-leave-a-group\" class=\"headerlink\" title=\"Join or leave a group\"></a>Join or leave a group</h3><p>Send a message from a user to a channel (chat or group).</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">joinGroup</span>(<span class=\"attr\">userID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">channelID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"built_in\">boolean</span></span><br><span class=\"line\"><span class=\"title function_\">leaveGroup</span>(<span class=\"attr\">userID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">channelID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>User ID (<code>UUID</code>): ID of the current user.</p>\n<p>Channel ID (<code>UUID</code>): ID of the channel (chat or group) the user wants to join or leave.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h2 id=\"High-level-design-1\"><a href=\"#High-level-design-1\" class=\"headerlink\" title=\"High-level design\"></a>High-level design</h2><p>Now let us do a high-level design of our system.</p>\n<h3 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h3><p>We will be using <a href=\"https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices\">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let‚Äôs try to divide our system into some core services.</p>\n<p><strong>User Service</strong></p>\n<p>This is an HTTP-based service that handles user-related concerns such as authentication and user information.</p>\n<p><strong>Chat Service</strong></p>\n<p>The chat service will use WebSockets and establish connections with the client to handle chat and group message-related functionality. We can also use cache to keep track of all the active connections sort of like sessions which will help us determine if the user is online or not.</p>\n<p><strong>Notification Service</strong></p>\n<p>This service will simply send push notifications to the users. It will be discussed in detail separately.</p>\n<p><strong>Presence Service</strong></p>\n<p>The presence service will keep track of the last seen status of all users. It will be discussed in detail separately.</p>\n<p><strong>Media service</strong></p>\n<p>This service will handle the media (images, videos, files, etc.) uploads. It will be discussed in detail separately.</p>\n<p><strong>What about inter-service communication and service discovery?</strong></p>\n<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href=\"https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc\">gRPC</a> which is more lightweight and efficient.</p>\n<p><a href=\"https://karanpratapsingh.com/courses/system-design/service-discovery\">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>\n<p><em>Note: Learn more about <a href=\"https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc\">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>\n<h3 id=\"Real-time-messaging\"><a href=\"#Real-time-messaging\" class=\"headerlink\" title=\"Real-time messaging\"></a>Real-time messaging</h3><p>How do we efficiently send and receive messages? We have two different options:</p>\n<p><strong>Pull model</strong></p>\n<p>The client can periodically send an HTTP request to servers to check if there are any new messages. This can be achieved via something like <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#long-polling\">Long polling</a>.</p>\n<p><strong>Push model</strong></p>\n<p>The client opens a long-lived connection with the server and once new data is available it will be pushed to the client. We can use <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets\">WebSockets</a> or <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse\">Server-Sent Events (SSE)</a> for this.</p>\n<p>The pull model approach is not scalable as it will create unnecessary request overhead on our servers and most of the time the response will be empty, thus wasting our resources. To minimize latency, using the push model with <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets\">WebSockets</a> is a better choice because then we can push data to the client once it‚Äôs available without any delay given the connection is open with the client. Also, WebSockets provide full-duplex communication, unlike <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse\">Server-Sent Events (SSE)</a> which are only unidirectional.</p>\n<p><em>Note: Learn more about <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events\">Long polling, WebSockets, Server-Sent Events (SSE)</a>.</em></p>\n<h3 id=\"Last-seen\"><a href=\"#Last-seen\" class=\"headerlink\" title=\"Last seen\"></a>Last seen</h3><p>To implement the last seen functionality, we can use a <a href=\"https://en.wikipedia.org/wiki/Heartbeat_(computing)\">heartbeat</a> mechanism, where the client can periodically ping the servers indicating its liveness. Since this needs to be as low overhead as possible, we can store the last active timestamp in the cache as follows:</p>\n<table>\n<thead>\n<tr>\n<th>Key</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>User A</td>\n<td>2022-07-01T14:32:50</td>\n</tr>\n<tr>\n<td>User B</td>\n<td>2022-07-05T05:10:35</td>\n</tr>\n<tr>\n<td>User C</td>\n<td>2022-07-10T04:33:25</td>\n</tr>\n</tbody></table>\n<p>This will give us the last time the user was active. This functionality will be handled by the presence service combined with <a href=\"https://redis.io/\">Redis</a> or <a href=\"https://memcached.org/\">Memcached</a> as our cache.</p>\n<p>Another way to implement this is to track the latest action of the user, once the last activity crosses a certain threshold, such as <em>‚Äúuser hasn‚Äôt performed any action in the last 30 seconds‚Äù</em>, we can show the user as offline and last seen with the last recorded timestamp. This will be more of a lazy update approach and might benefit us over heartbeat in certain cases.</p>\n<h3 id=\"Notifications\"><a href=\"#Notifications\" class=\"headerlink\" title=\"Notifications\"></a>Notifications</h3><p>Once a message is sent in a chat or a group, we will first check if the recipient is active or not, we can get this information by taking the user‚Äôs active connection and last seen into consideration.</p>\n<p>If the recipient is not active, the chat service will add an event to a <a href=\"https://karanpratapsingh.com/courses/system-design/message-queues\">message queue</a> with additional metadata such as the client‚Äôs device platform which will be used to route the notification to the correct platform later on.</p>\n<p>The notification service will then consume the event from the message queue and forward the request to <a href=\"https://firebase.google.com/docs/cloud-messaging\">Firebase Cloud Messaging (FCM)</a> or <a href=\"https://developer.apple.com/documentation/usernotifications\">Apple Push Notification Service (APNS)</a> based on the client‚Äôs device platform (Android, iOS, web, etc). We can also add support for email and SMS.</p>\n<p><strong>Why are we using a message queue?</strong></p>\n<p>Since most message queues provide best-effort ordering which ensures that messages are generally delivered in the same order as they‚Äôre sent and that a message is delivered at least once which is an important part of our service functionality.</p>\n<p>While this seems like a classic <a href=\"https://karanpratapsingh.com/courses/system-design/publish-subscribe\">publish-subscribe</a> use case, it is actually not as mobile devices and browsers each have their own way of handling push notifications. Usually, notifications are handled externally via Firebase Cloud Messaging (FCM) or Apple Push Notification Service (APNS) unlike message fan-out which we commonly see in backend services. We can use something like <a href=\"https://aws.amazon.com/sqs\">Amazon SQS</a> or <a href=\"https://www.rabbitmq.com/\">RabbitMQ</a> to support this functionality.</p>\n<h3 id=\"Read-receipts\"><a href=\"#Read-receipts\" class=\"headerlink\" title=\"Read receipts\"></a>Read receipts</h3><p>Handling read receipts can be tricky, for this use case we can wait for some sort of <a href=\"https://en.wikipedia.org/wiki/Acknowledgement_(data_networks)\">Acknowledgment (ACK)</a> from the client to determine if the message was delivered and update the corresponding <code>deliveredAt</code> field. Similarly, we will mark message the message seen once the user opens the chat and update the corresponding <code>seenAt</code> timestamp field.</p>\n<h3 id=\"Design-1\"><a href=\"#Design-1\" class=\"headerlink\" title=\"Design\"></a>Design</h3><p>Now that we have identified some core components, let‚Äôs do the first draft of our system design.</p>\n<p><img src=\"/assets/img/system-design/whatsapp-basic-design.jpg\" alt=\"whatsapp-basic-design\"></p>\n<h2 id=\"Detailed-design-2\"><a href=\"#Detailed-design-2\" class=\"headerlink\" title=\"Detailed design\"></a>Detailed design</h2><p>It‚Äôs time to discuss our design decisions in detail.</p>\n<h3 id=\"Data-Partitioning-2\"><a href=\"#Data-Partitioning-2\" class=\"headerlink\" title=\"Data Partitioning\"></a>Data Partitioning</h3><p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href=\"https://karanpratapsingh.com/courses/system-design/sharding\">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>\n<ul>\n<li>Hash-Based Partitioning</li>\n<li>List-Based Partitioning</li>\n<li>Range Based Partitioning</li>\n<li>Composite Partitioning</li>\n</ul>\n<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href=\"https://karanpratapsingh.com/courses/system-design/consistent-hashing\">Consistent hashing</a>.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/sharding\">Sharding</a> and <a href=\"https://karanpratapsingh.com/courses/system-design/consistent-hashing\">Consistent Hashing</a>.</em></p>\n<h3 id=\"Caching-2\"><a href=\"#Caching-2\" class=\"headerlink\" title=\"Caching\"></a>Caching</h3><p>In a messaging application, we have to be careful about using cache as our users expect the latest data, but many users will be requesting the same messages, especially in a group chat. So, to prevent usage spikes from our resources we can cache older messages.</p>\n<p>Some group chats can have thousands of messages and sending that over the network will be really inefficient, to improve efficiency we can add pagination to our system APIs. This decision will be helpful for users with limited network bandwidth as they won‚Äôt have to retrieve old messages unless requested.</p>\n<p><strong>Which cache eviction policy to use?</strong></p>\n<p>We can use solutions like <a href=\"https://redis.io/\">Redis</a> or <a href=\"https://memcached.org/\">Memcached</a> and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs?</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)\">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>\n<p><strong>How to handle cache miss?</strong></p>\n<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/caching\">Caching</a>.</em></p>\n<h3 id=\"Media-access-and-storage\"><a href=\"#Media-access-and-storage\" class=\"headerlink\" title=\"Media access and storage\"></a>Media access and storage</h3><p>As we know, most of our storage space will be used for storing media files such as images, videos, or other files. Our media service will be handling both access and storage of the user media files.</p>\n<p>But where can we store files at scale? Well, <a href=\"https://karanpratapsingh.com/courses/system-design/storage#object-storage\">object storage</a> is what we‚Äôre looking for. Object stores break data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems. We can also use distributed file storage such as <a href=\"https://karanpratapsingh.com/courses/system-design/storage#hdfs\">HDFS</a> or <a href=\"https://www.gluster.org/\">GlusterFS</a>.</p>\n<p><em>Fun fact: WhatsApp deletes media on its servers once it has been downloaded by the user.</em></p>\n<p>We can use object stores like <a href=\"https://aws.amazon.com/s3\">Amazon S3</a>, <a href=\"https://azure.microsoft.com/en-in/services/storage/blobs\">Azure Blob Storage</a>, or <a href=\"https://cloud.google.com/storage\">Google Cloud Storage</a> for this use case.</p>\n<h3 id=\"Content-Delivery-Network-CDN-1\"><a href=\"#Content-Delivery-Network-CDN-1\" class=\"headerlink\" title=\"Content Delivery Network (CDN)\"></a>Content Delivery Network (CDN)</h3><p><a href=\"https://karanpratapsingh.com/courses/system-design/content-delivery-network\">Content Delivery Network (CDN)</a> increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like <a href=\"https://aws.amazon.com/cloudfront\">Amazon CloudFront</a> or <a href=\"https://www.cloudflare.com/cdn\">Cloudflare CDN</a> for this use case.</p>\n<h3 id=\"API-gateway\"><a href=\"#API-gateway\" class=\"headerlink\" title=\"API gateway\"></a>API gateway</h3><p>Since we will be using multiple protocols like HTTP, WebSocket, TCP&#x2F;IP, deploying multiple L4 (transport layer) or L7 (application layer) type load balancers separately for each protocol will be expensive. Instead, we can use an <a href=\"https://karanpratapsingh.com/courses/system-design/api-gateway\">API Gateway</a> that supports multiple protocols without any issues.</p>\n<p>API Gateway can also offer other features such as authentication, authorization, rate limiting, throttling, and API versioning which will improve the quality of our services.</p>\n<p>We can use services like <a href=\"https://aws.amazon.com/api-gateway\">Amazon API Gateway</a> or <a href=\"https://azure.microsoft.com/en-in/services/api-management\">Azure API Gateway</a> for this use case.</p>\n<h2 id=\"Identify-and-resolve-bottlenecks-2\"><a href=\"#Identify-and-resolve-bottlenecks-2\" class=\"headerlink\" title=\"Identify and resolve bottlenecks\"></a>Identify and resolve bottlenecks</h2><p><img src=\"/assets/img/system-design/whatsapp-advanced-design.jpg\" alt=\"whatsapp-advanced-design\"></p>\n<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>\n<ul>\n<li>‚ÄúWhat if one of our services crashes?‚Äù</li>\n<li>‚ÄúHow will we distribute our traffic between our components?‚Äù</li>\n<li>‚ÄúHow can we reduce the load on our database?‚Äù</li>\n<li>‚ÄúHow to improve the availability of our cache?‚Äù</li>\n<li>‚ÄúWouldn‚Äôt API Gateway be a single point of failure?‚Äù</li>\n<li>‚ÄúHow can we make our notification system more robust?‚Äù</li>\n<li>‚ÄúHow can we reduce media storage costs‚Äù?</li>\n<li>‚ÄúDoes chat service has too much responsibility?‚Äù</li>\n</ul>\n<p>To make our system more resilient we can do the following:</p>\n<ul>\n<li>Running multiple instances of each of our services.</li>\n<li>Introducing <a href=\"https://karanpratapsingh.com/courses/system-design/load-balancing\">load balancers</a> between clients, servers, databases, and cache servers.</li>\n<li>Using multiple read replicas for our databases.</li>\n<li>Multiple instances and replicas for our distributed cache.</li>\n<li>We can have a standby replica of our API Gateway.</li>\n<li>Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated <a href=\"https://karanpratapsingh.com/courses/system-design/message-brokers\">message broker</a> such as <a href=\"https://kafka.apache.org/\">Apache Kafka</a> or <a href=\"https://nats.io/\">NATS</a> to make our notification system more robust.</li>\n<li>We can add media processing and compression capabilities to the media service to compress large files similar to WhatsApp which will save a lot of storage space and reduce cost.</li>\n<li>We can create a group service separate from the chat service to further decouple our services.</li>\n</ul>\n<h1 id=\"Twitter\"><a href=\"#Twitter\" class=\"headerlink\" title=\"Twitter\"></a>Twitter</h1><p>Let‚Äôs design a <a href=\"https://twitter.com/\">Twitter</a> like social media service, similar to services like <a href=\"https://facebook.com/\">Facebook</a>, <a href=\"https://instagram.com/\">Instagram</a>, etc.</p>\n<h2 id=\"What-is-Twitter\"><a href=\"#What-is-Twitter\" class=\"headerlink\" title=\"What is Twitter?\"></a>What is Twitter?</h2><p>Twitter is a social media service where users can read or post short messages (up to 280 characters) called tweets. It is available on the web and mobile platforms such as Android and iOS.</p>\n<h2 id=\"Requirements-2\"><a href=\"#Requirements-2\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h2><p>Our system should meet the following requirements:</p>\n<h3 id=\"Functional-requirements-3\"><a href=\"#Functional-requirements-3\" class=\"headerlink\" title=\"Functional requirements\"></a>Functional requirements</h3><ul>\n<li>Should be able to post new tweets (can be text, image, video, etc.).</li>\n<li>Should be able to follow other users.</li>\n<li>Should have a newsfeed feature consisting of tweets from the people the user is following.</li>\n<li>Should be able to search tweets.</li>\n</ul>\n<h3 id=\"Non-Functional-requirements\"><a href=\"#Non-Functional-requirements\" class=\"headerlink\" title=\"Non-Functional requirements\"></a>Non-Functional requirements</h3><ul>\n<li>High availability with minimal latency.</li>\n<li>The system should be scalable and efficient.</li>\n</ul>\n<h3 id=\"Extended-requirements-3\"><a href=\"#Extended-requirements-3\" class=\"headerlink\" title=\"Extended requirements\"></a>Extended requirements</h3><ul>\n<li>Metrics and analytics.</li>\n<li>Retweet functionality.</li>\n<li>Favorite tweets.</li>\n</ul>\n<h2 id=\"Estimation-and-Constraints-3\"><a href=\"#Estimation-and-Constraints-3\" class=\"headerlink\" title=\"Estimation and Constraints\"></a>Estimation and Constraints</h2><p>Let‚Äôs start with the estimation and constraints.</p>\n<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>\n<h3 id=\"Traffic-2\"><a href=\"#Traffic-2\" class=\"headerlink\" title=\"Traffic\"></a>Traffic</h3><p>This will be a read-heavy system, let us assume we have 1 billion total users with 200 million daily active users (DAU), and on average each user tweets 5 times a day. This gives us 1 billion tweets per day.</p>\n<p>$$<br>200 \\space million \\times 5 \\space messages &#x3D; 1 \\space billion&#x2F;day<br>$$</p>\n<p>Tweets can also contain media such as images, or videos. We can assume that 10 percent of tweets are media files shared by the users, which gives us additional 100 million files we would need to store.</p>\n<p>$$<br>10 \\space percent \\times 1 \\space billion &#x3D; 100 \\space million&#x2F;day<br>$$</p>\n<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>\n<p>1 billion requests per day translate into 12K requests per second.</p>\n<p>$$<br>\\frac{1 \\space billion}{(24 \\space hrs \\times 3600 \\space seconds)} &#x3D; \\sim 12K \\space requests&#x2F;second<br>$$</p>\n<h3 id=\"Storage-4\"><a href=\"#Storage-4\" class=\"headerlink\" title=\"Storage\"></a>Storage</h3><p>If we assume each message on average is 100 bytes, we will require about 100 GB of database storage every day.</p>\n<p>$$<br>1 \\space billion \\times 100 \\space bytes &#x3D; \\sim 100 \\space GB&#x2F;day<br>$$</p>\n<p>We also know that around 10 percent of our daily messages (100 million) are media files per our requirements. If we assume each file is 50 KB on average, we will require 5 TB of storage every day.</p>\n<p>$$<br>100 \\space million \\times 100 \\space KB &#x3D; 5 \\space TB&#x2F;day<br>$$</p>\n<p>And for 10 years, we will require about 19 PB of storage.</p>\n<p>$$<br>(5 \\space TB + 0.1 \\space TB) \\times 365 \\space days \\times 10 \\space years &#x3D; \\sim 19 \\space PB<br>$$</p>\n<h3 id=\"Bandwidth-2\"><a href=\"#Bandwidth-2\" class=\"headerlink\" title=\"Bandwidth\"></a>Bandwidth</h3><p>As our system is handling 5.1 TB of ingress every day, we will require a minimum bandwidth of around 60 MB per second.</p>\n<p>$$<br>\\frac{5.1 \\space TB}{(24 \\space hrs \\times 3600 \\space seconds)} &#x3D; \\sim 60 \\space MB&#x2F;second<br>$$</p>\n<h3 id=\"High-level-estimate-2\"><a href=\"#High-level-estimate-2\" class=\"headerlink\" title=\"High-level estimate\"></a>High-level estimate</h3><p>Here is our high-level estimate:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Estimate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Daily active users (DAU)</td>\n<td>100 million</td>\n</tr>\n<tr>\n<td>Requests per second (RPS)</td>\n<td>12K&#x2F;s</td>\n</tr>\n<tr>\n<td>Storage (per day)</td>\n<td>~5.1 TB</td>\n</tr>\n<tr>\n<td>Storage (10 years)</td>\n<td>~19 PB</td>\n</tr>\n<tr>\n<td>Bandwidth</td>\n<td>~60 MB&#x2F;s</td>\n</tr>\n</tbody></table>\n<h2 id=\"Data-model-design-3\"><a href=\"#Data-model-design-3\" class=\"headerlink\" title=\"Data model design\"></a>Data model design</h2><p>This is the general data model which reflects our requirements.</p>\n<p><img src=\"/assets/img/system-design/twitter-datamodel.jpg\" alt=\"twitter-datamodel\"></p>\n<p>We have the following tables:</p>\n<p><strong>users</strong></p>\n<p>This table will contain a user‚Äôs information such as <code>name</code>, <code>email</code>, <code>dob</code>, and other details.</p>\n<p><strong>tweets</strong></p>\n<p>As the name suggests, this table will store tweets and their properties such as <code>type</code> (text, image, video, etc.), <code>content</code>, etc. We will also store the corresponding <code>userID</code>.</p>\n<p><strong>favorites</strong></p>\n<p>This table maps tweets with users for the favorite tweets functionality in our application.</p>\n<p><strong>followers</strong></p>\n<p>This table maps the followers and <a href=\"https://en.wiktionary.org/wiki/followee\">followees</a> as users can follow each other (N:M relationship).</p>\n<p><strong>feeds</strong></p>\n<p>This table stores feed properties with the corresponding <code>userID</code>.</p>\n<p><strong>feeds_tweets</strong></p>\n<p>This table maps tweets and feed (N:M relationship).</p>\n<h3 id=\"What-kind-of-database-should-we-use-2\"><a href=\"#What-kind-of-database-should-we-use-2\" class=\"headerlink\" title=\"What kind of database should we use?\"></a>What kind of database should we use?</h3><p>While our data model seems quite relational, we don‚Äôt necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>\n<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href=\"https://www.postgresql.org/\">PostgreSQL</a> or a distributed NoSQL database such as <a href=\"https://cassandra.apache.org/_/index.html\">Apache Cassandra</a> for our use case.</p>\n<h2 id=\"API-design-3\"><a href=\"#API-design-3\" class=\"headerlink\" title=\"API design\"></a>API design</h2><p>Let us do a basic API design for our services:</p>\n<h3 id=\"Post-a-tweet\"><a href=\"#Post-a-tweet\" class=\"headerlink\" title=\"Post a tweet\"></a>Post a tweet</h3><p>This API will allow the user to post a tweet on the platform.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">postTweet</span>(<span class=\"attr\">userID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">content</span>: <span class=\"built_in\">string</span>, mediaURL?: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>User ID (<code>UUID</code>): ID of the user.</p>\n<p>Content (<code>string</code>): Contents of the tweet.</p>\n<p>Media URL (<code>string</code>): URL of the attached media <em>(optional)</em>.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h3 id=\"Follow-or-unfollow-a-user\"><a href=\"#Follow-or-unfollow-a-user\" class=\"headerlink\" title=\"Follow or unfollow a user\"></a>Follow or unfollow a user</h3><p>This API will allow the user to follow or unfollow another user.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">follow</span>(<span class=\"attr\">followerID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">followeeID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"built_in\">boolean</span></span><br><span class=\"line\"><span class=\"title function_\">unfollow</span>(<span class=\"attr\">followerID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">followeeID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>Follower ID (<code>UUID</code>): ID of the current user.</p>\n<p>Followee ID (<code>UUID</code>): ID of the user we want to follow or unfollow.</p>\n<p>Media URL (<code>string</code>): URL of the attached media <em>(optional)</em>.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h3 id=\"Get-newsfeed\"><a href=\"#Get-newsfeed\" class=\"headerlink\" title=\"Get newsfeed\"></a>Get newsfeed</h3><p>This API will return all the tweets to be shown within a given newsfeed.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">getNewsfeed</span>(<span class=\"attr\">userID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"title class_\">Tweet</span>[]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>User ID (<code>UUID</code>): ID of the user.</p>\n<p><strong>Returns</strong></p>\n<p>Tweets (<code>Tweet[]</code>): All the tweets to be shown within a given newsfeed.</p>\n<h2 id=\"High-level-design-2\"><a href=\"#High-level-design-2\" class=\"headerlink\" title=\"High-level design\"></a>High-level design</h2><p>Now let us do a high-level design of our system.</p>\n<h3 id=\"Architecture-1\"><a href=\"#Architecture-1\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h3><p>We will be using <a href=\"https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices\">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let‚Äôs try to divide our system into some core services.</p>\n<p><strong>User Service</strong></p>\n<p>This service handles user-related concerns such as authentication and user information.</p>\n<p><strong>Newsfeed Service</strong></p>\n<p>This service will handle the generation and publishing of user newsfeeds. It will be discussed in detail separately.</p>\n<p><strong>Tweet Service</strong></p>\n<p>The tweet service will handle tweet-related use cases such as posting a tweet, favorites, etc.</p>\n<p><strong>Search Service</strong></p>\n<p>The service is responsible for handling search-related functionality. It will be discussed in detail separately.</p>\n<p><strong>Media service</strong></p>\n<p>This service will handle the media (images, videos, files, etc.) uploads. It will be discussed in detail separately.</p>\n<p><strong>Notification Service</strong></p>\n<p>This service will simply send push notifications to the users.</p>\n<p><strong>Analytics Service</strong></p>\n<p>This service will be used for metrics and analytics use cases.</p>\n<p><strong>What about inter-service communication and service discovery?</strong></p>\n<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href=\"https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc\">gRPC</a> which is more lightweight and efficient.</p>\n<p><a href=\"https://karanpratapsingh.com/courses/system-design/service-discovery\">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>\n<p><em>Note: Learn more about <a href=\"https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc\">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>\n<h3 id=\"Newsfeed\"><a href=\"#Newsfeed\" class=\"headerlink\" title=\"Newsfeed\"></a>Newsfeed</h3><p>When it comes to the newsfeed, it seems easy enough to implement, but there are a lot of things that can make or break this feature. So, let‚Äôs divide our problem into two parts:</p>\n<p><strong>Generation</strong></p>\n<p>Let‚Äôs assume we want to generate the feed for user A, we will perform the following steps:</p>\n<ol>\n<li>Retrieve the IDs of all the users and entities (hashtags, topics, etc.) user A follows.</li>\n<li>Fetch the relevant tweets for each of the retrieved IDs.</li>\n<li>Use a ranking algorithm to rank the tweets based on parameters such as relevance, time, engagement, etc.</li>\n<li>Return the ranked tweets data to the client in a paginated manner.</li>\n</ol>\n<p>Feed generation is an intensive process and can take quite a lot of time, especially for users following a lot of people. To improve the performance, the feed can be pre-generated and stored in the cache, then we can have a mechanism to periodically update the feed and apply our ranking algorithm to the new tweets.</p>\n<p><strong>Publishing</strong></p>\n<p>Publishing is the step where the feed data is pushed according to each specific user. This can be a quite heavy operation, as a user may have millions of friends or followers. To deal with this, we have three different approaches:</p>\n<ul>\n<li>Pull Model (or Fan-out on load)</li>\n</ul>\n<p><img src=\"/assets/img/system-design/newsfeed-pull-model.jpg\" alt=\"newsfeed-pull-model\"></p>\n<p>When a user creates a tweet, and a follower reloads their newsfeed, the feed is created and stored in memory. The most recent feed is only loaded when the user requests it. This approach reduces the number of write operations on our database.</p>\n<p>The downside of this approach is that the users will not be able to view recent feeds unless they ‚Äúpull‚Äù the data from the server, which will increase the number of read operations on the server.</p>\n<ul>\n<li>Push Model (or Fan-out on write)</li>\n</ul>\n<p><img src=\"/assets/img/system-design/newsfeed-push-model.jpg\" alt=\"newsfeed-push-model\"></p>\n<p>In this model, once a user creates a tweet, it is ‚Äúpushed‚Äù to all the follower‚Äôs feeds immediately. This prevents the system from having to go through a user‚Äôs entire followers list to check for updates.</p>\n<p>However, the downside of this approach is that it would increase the number of write operations on the database.</p>\n<ul>\n<li>Hybrid Model</li>\n</ul>\n<p>A third approach is a hybrid model between the pull and push model. It combines the beneficial features of the above two models and tries to provide a balanced approach between the two.</p>\n<p>The hybrid model allows only users with a lesser number of followers to use the push model and for users with a higher number of followers celebrities, the pull model will be used.</p>\n<h3 id=\"Ranking-Algorithm\"><a href=\"#Ranking-Algorithm\" class=\"headerlink\" title=\"Ranking Algorithm\"></a>Ranking Algorithm</h3><p>As we discussed, we will need a ranking algorithm to rank each tweet according to its relevance to each specific user.</p>\n<p>For example, Facebook used to utilize an <a href=\"https://en.wikipedia.org/wiki/EdgeRank\">EdgeRank</a> algorithm, here, the rank of each feed item is described by:</p>\n<p>$$<br>Rank &#x3D; Affinity \\times Weight \\times Decay<br>$$</p>\n<p>Where,</p>\n<p><code>Affinity</code>: is the ‚Äúcloseness‚Äù of the user to the creator of the edge. If a user frequently likes, comments, or messages the edge creator, then the value of affinity will be higher, resulting in a higher rank for the post.</p>\n<p><code>Weight</code>: is the value assigned according to each edge. A comment can have a higher weightage than likes, and thus a post with more comments is more likely to get a higher rank.</p>\n<p><code>Decay</code>: is the measure of the creation of the edge. The older the edge, the lesser will be the value of decay and eventually the rank.</p>\n<p>Nowadays, algorithms are much more complex and ranking is done using machine learning models which can take thousands of factors into consideration.</p>\n<h3 id=\"Retweets\"><a href=\"#Retweets\" class=\"headerlink\" title=\"Retweets\"></a>Retweets</h3><p>Retweets are one of our extended requirements. To implement this feature we can simply create a new tweet with the user id of the user retweeting the original tweet and then modify the <code>type</code> enum and <code>content</code> property of the new tweet to link it with the original tweet.</p>\n<p>For example, the <code>type</code> enum property can be of type tweet, similar to text, video, etc and <code>content</code> can be the id of the original tweet. Here the first row indicates the original tweet while the second row is how we can represent a retweet.</p>\n<table>\n<thead>\n<tr>\n<th>id</th>\n<th>userID</th>\n<th>type</th>\n<th>content</th>\n<th>createdAt</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ad34-291a-45f6-b36c</td>\n<td>7a2c-62c4-4dc8-b1bb</td>\n<td>text</td>\n<td>Hey, this is my first tweet‚Ä¶</td>\n<td>1658905644054</td>\n</tr>\n<tr>\n<td>f064-49ad-9aa2-84a6</td>\n<td>6aa2-2bc9-4331-879f</td>\n<td>tweet</td>\n<td>ad34-291a-45f6-b36c</td>\n<td>1658906165427</td>\n</tr>\n</tbody></table>\n<p>This is a very basic implementation, to improve this we can create a separate table itself to store retweets.</p>\n<h3 id=\"Search\"><a href=\"#Search\" class=\"headerlink\" title=\"Search\"></a>Search</h3><p>Sometimes traditional DBMS are not performant enough, we need something which allows us to store, search, and analyze huge volumes of data quickly and in near real-time and give results within milliseconds. <a href=\"https://www.elastic.co/\">Elasticsearch</a> can help us with this use case.</p>\n<p><a href=\"https://www.elastic.co/\">Elasticsearch</a> is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. It is built on top of <a href=\"https://lucene.apache.org/\">Apache Lucene</a>.</p>\n<p><strong>How do we identify trending topics?</strong></p>\n<p>Trending functionality will be based on top of the search functionality. We can cache the most frequently searched queries, hashtags, and topics in the last <code>N</code> seconds and update them every <code>M</code> seconds using some sort of batch job mechanism. Our ranking algorithm can also be applied to the trending topics to give them more weight and personalize them for the user.</p>\n<h3 id=\"Notifications-1\"><a href=\"#Notifications-1\" class=\"headerlink\" title=\"Notifications\"></a>Notifications</h3><p>Push notifications are an integral part of any social media platform. We can use a message queue or a message broker such as <a href=\"https://kafka.apache.org/\">Apache Kafka</a> with the notification service to dispatch requests to <a href=\"https://firebase.google.com/docs/cloud-messaging\">Firebase Cloud Messaging (FCM)</a> or <a href=\"https://developer.apple.com/documentation/usernotifications\">Apple Push Notification Service (APNS)</a> which will handle the delivery of the push notifications to user devices.</p>\n<p><em>For more details, refer to the <a href=\"https://karanpratapsingh.com/courses/system-design/whatsapp#notifications\">WhatsApp</a> system design where we discuss push notifications.</em></p>\n<h2 id=\"Detailed-design-3\"><a href=\"#Detailed-design-3\" class=\"headerlink\" title=\"Detailed design\"></a>Detailed design</h2><p>It‚Äôs time to discuss our design decisions in detail.</p>\n<h3 id=\"Data-Partitioning-3\"><a href=\"#Data-Partitioning-3\" class=\"headerlink\" title=\"Data Partitioning\"></a>Data Partitioning</h3><p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href=\"https://karanpratapsingh.com/courses/system-design/sharding\">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>\n<ul>\n<li>Hash-Based Partitioning</li>\n<li>List-Based Partitioning</li>\n<li>Range Based Partitioning</li>\n<li>Composite Partitioning</li>\n</ul>\n<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href=\"https://karanpratapsingh.com/courses/system-design/consistent-hashing\">Consistent hashing</a>.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/sharding\">Sharding</a> and <a href=\"https://karanpratapsingh.com/courses/system-design/consistent-hashing\">Consistent Hashing</a>.</em></p>\n<h3 id=\"Mutual-friends\"><a href=\"#Mutual-friends\" class=\"headerlink\" title=\"Mutual friends\"></a>Mutual friends</h3><p>For mutual friends, we can build a social graph for every user. Each node in the graph will represent a user and a directional edge will represent followers and followees. After that, we can traverse the followers of a user to find and suggest a mutual friend. This would require a graph database such as <a href=\"https://neo4j.com/\">Neo4j</a> and <a href=\"https://www.arangodb.com/\">ArangoDB</a>.</p>\n<p>This is a pretty simple algorithm, to improve our suggestion accuracy, we will need to incorporate a recommendation model which uses machine learning as part of our algorithm.</p>\n<h3 id=\"Metrics-and-Analytics-1\"><a href=\"#Metrics-and-Analytics-1\" class=\"headerlink\" title=\"Metrics and Analytics\"></a>Metrics and Analytics</h3><p>Recording analytics and metrics is one of our extended requirements. As we will be using <a href=\"https://kafka.apache.org/\">Apache Kafka</a> to publish all sorts of events, we can process these events and run analytics on the data using <a href=\"https://spark.apache.org/\">Apache Spark</a> which is an open-source unified analytics engine for large-scale data processing.</p>\n<h3 id=\"Caching-3\"><a href=\"#Caching-3\" class=\"headerlink\" title=\"Caching\"></a>Caching</h3><p>In a social media application, we have to be careful about using cache as our users expect the latest data. So, to prevent usage spikes from our resources we can cache the top 20% of the tweets.</p>\n<p>To further improve efficiency we can add pagination to our system APIs. This decision will be helpful for users with limited network bandwidth as they won‚Äôt have to retrieve old messages unless requested.</p>\n<p><strong>Which cache eviction policy to use?</strong></p>\n<p>We can use solutions like <a href=\"https://redis.io/\">Redis</a> or <a href=\"https://memcached.org/\">Memcached</a> and cache 20% of the daily traffic but what kind of cache eviction policy would best fit our needs?</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)\">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>\n<p><strong>How to handle cache miss?</strong></p>\n<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/caching\">Caching</a>.</em></p>\n<h3 id=\"Media-access-and-storage-1\"><a href=\"#Media-access-and-storage-1\" class=\"headerlink\" title=\"Media access and storage\"></a>Media access and storage</h3><p>As we know, most of our storage space will be used for storing media files such as images, videos, or other files. Our media service will be handling both access and storage of the user media files.</p>\n<p>But where can we store files at scale? Well, <a href=\"https://karanpratapsingh.com/courses/system-design/storage#object-storage\">object storage</a> is what we‚Äôre looking for. Object stores break data files up into pieces called objects. It then stores those objects in a single repository, which can be spread out across multiple networked systems. We can also use distributed file storage such as <a href=\"https://karanpratapsingh.com/courses/system-design/storage#hdfs\">HDFS</a> or <a href=\"https://www.gluster.org/\">GlusterFS</a>.</p>\n<h3 id=\"Content-Delivery-Network-CDN-2\"><a href=\"#Content-Delivery-Network-CDN-2\" class=\"headerlink\" title=\"Content Delivery Network (CDN)\"></a>Content Delivery Network (CDN)</h3><p><a href=\"https://karanpratapsingh.com/courses/system-design/content-delivery-network\">Content Delivery Network (CDN)</a> increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like <a href=\"https://aws.amazon.com/cloudfront\">Amazon CloudFront</a> or <a href=\"https://www.cloudflare.com/cdn\">Cloudflare CDN</a> for this use case.</p>\n<h2 id=\"Identify-and-resolve-bottlenecks-3\"><a href=\"#Identify-and-resolve-bottlenecks-3\" class=\"headerlink\" title=\"Identify and resolve bottlenecks\"></a>Identify and resolve bottlenecks</h2><p><img src=\"/assets/img/system-design/twitter-advanced-design.jpg\" alt=\"twitter-advanced-design\"></p>\n<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>\n<ul>\n<li>‚ÄúWhat if one of our services crashes?‚Äù</li>\n<li>‚ÄúHow will we distribute our traffic between our components?‚Äù</li>\n<li>‚ÄúHow can we reduce the load on our database?‚Äù</li>\n<li>‚ÄúHow to improve the availability of our cache?‚Äù</li>\n<li>‚ÄúHow can we make our notification system more robust?‚Äù</li>\n<li>‚ÄúHow can we reduce media storage costs‚Äù?</li>\n</ul>\n<p>To make our system more resilient we can do the following:</p>\n<ul>\n<li>Running multiple instances of each of our services.</li>\n<li>Introducing <a href=\"https://karanpratapsingh.com/courses/system-design/load-balancing\">load balancers</a> between clients, servers, databases, and cache servers.</li>\n<li>Using multiple read replicas for our databases.</li>\n<li>Multiple instances and replicas for our distributed cache.</li>\n<li>Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated <a href=\"https://karanpratapsingh.com/courses/system-design/message-brokers\">message broker</a> such as <a href=\"https://kafka.apache.org/\">Apache Kafka</a> or <a href=\"https://nats.io/\">NATS</a> to make our notification system more robust.</li>\n<li>We can add media processing and compression capabilities to the media service to compress large files which will save a lot of storage space and reduce cost.</li>\n</ul>\n<h1 id=\"Netflix\"><a href=\"#Netflix\" class=\"headerlink\" title=\"Netflix\"></a>Netflix</h1><p>Let‚Äôs design a <a href=\"https://netflix.com/\">Netflix</a> like video streaming service, similar to services like <a href=\"https://www.primevideo.com/\">Amazon Prime Video</a>, <a href=\"https://www.disneyplus.com/\">Disney Plus</a>, <a href=\"https://www.hulu.com/\">Hulu</a>, <a href=\"https://youtube.com/\">Youtube</a>, <a href=\"https://vimeo.com/\">Vimeo</a>, etc.</p>\n<h2 id=\"What-is-Netflix\"><a href=\"#What-is-Netflix\" class=\"headerlink\" title=\"What is Netflix?\"></a>What is Netflix?</h2><p>Netflix is a subscription-based streaming service that allows its members to watch TV shows and movies on an internet-connected device. It is available on platforms such as the Web, iOS, Android, TV, etc.</p>\n<h2 id=\"Requirements-3\"><a href=\"#Requirements-3\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h2><p>Our system should meet the following requirements:</p>\n<h3 id=\"Functional-requirements-4\"><a href=\"#Functional-requirements-4\" class=\"headerlink\" title=\"Functional requirements\"></a>Functional requirements</h3><ul>\n<li>Users should be able to stream and share videos.</li>\n<li>The content team (or users in YouTube‚Äôs case) should be able to upload new videos (movies, tv shows episodes, and other content).</li>\n<li>Users should be able to search for videos using titles or tags.</li>\n<li>Users should be able to comment on a video similar to YouTube.</li>\n</ul>\n<h3 id=\"Non-Functional-requirements-1\"><a href=\"#Non-Functional-requirements-1\" class=\"headerlink\" title=\"Non-Functional requirements\"></a>Non-Functional requirements</h3><ul>\n<li>High availability with minimal latency.</li>\n<li>High reliability, no uploads should be lost.</li>\n<li>The system should be scalable and efficient.</li>\n</ul>\n<h3 id=\"Extended-requirements-4\"><a href=\"#Extended-requirements-4\" class=\"headerlink\" title=\"Extended requirements\"></a>Extended requirements</h3><ul>\n<li>Certain content should be <a href=\"https://en.wikipedia.org/wiki/Geo-blocking\">geo-blocked</a>.</li>\n<li>Resume video playback from the point user left off.</li>\n<li>Record metrics and analytics of videos.</li>\n</ul>\n<h2 id=\"Estimation-and-Constraints-4\"><a href=\"#Estimation-and-Constraints-4\" class=\"headerlink\" title=\"Estimation and Constraints\"></a>Estimation and Constraints</h2><p>Let‚Äôs start with the estimation and constraints.</p>\n<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>\n<h3 id=\"Traffic-3\"><a href=\"#Traffic-3\" class=\"headerlink\" title=\"Traffic\"></a>Traffic</h3><p>This will be a read-heavy system, let us assume we have 1 billion total users with 200 million daily active users (DAU), and on average each user watches 5 videos a day. This gives us 1 billion videos watched per day.</p>\n<p>$$<br>200 \\space million \\times 5 \\space videos &#x3D; 1 \\space billion&#x2F;day<br>$$</p>\n<p>Assuming, a <code>200:1</code> read&#x2F;write ratio, about 50 million videos will be uploaded every day.</p>\n<p>$$<br>\\frac{1}{200} \\times 1 \\space billion &#x3D; 50 \\space million&#x2F;day<br>$$</p>\n<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>\n<p>1 billion requests per day translate into 12K requests per second.</p>\n<p>$$<br>\\frac{1 \\space billion}{(24 \\space hrs \\times 3600 \\space seconds)} &#x3D; \\sim 12K \\space requests&#x2F;second<br>$$</p>\n<h3 id=\"Storage-5\"><a href=\"#Storage-5\" class=\"headerlink\" title=\"Storage\"></a>Storage</h3><p>If we assume each video is 100 MB on average, we will require about 5 PB of storage every day.</p>\n<p>$$<br>50 \\space million \\times 100 \\space MB &#x3D; 5 \\space PB&#x2F;day<br>$$</p>\n<p>And for 10 years, we will require an astounding 18,250 PB of storage.</p>\n<p>$$<br>5 \\space PB \\times 365 \\space days \\times 10 \\space years &#x3D; \\sim 18,250 \\space PB<br>$$</p>\n<h3 id=\"Bandwidth-3\"><a href=\"#Bandwidth-3\" class=\"headerlink\" title=\"Bandwidth\"></a>Bandwidth</h3><p>As our system is handling 5 PB of ingress every day, we will require a minimum bandwidth of around 58 GB per second.</p>\n<p>$$<br>\\frac{5 \\space PB}{(24 \\space hrs \\times 3600 \\space seconds)} &#x3D; \\sim 58 \\space GB&#x2F;second<br>$$</p>\n<h3 id=\"High-level-estimate-3\"><a href=\"#High-level-estimate-3\" class=\"headerlink\" title=\"High-level estimate\"></a>High-level estimate</h3><p>Here is our high-level estimate:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Estimate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Daily active users (DAU)</td>\n<td>200 million</td>\n</tr>\n<tr>\n<td>Requests per second (RPS)</td>\n<td>12K&#x2F;s</td>\n</tr>\n<tr>\n<td>Storage (per day)</td>\n<td>~5 PB</td>\n</tr>\n<tr>\n<td>Storage (10 years)</td>\n<td>~18,250 PB</td>\n</tr>\n<tr>\n<td>Bandwidth</td>\n<td>~58 GB&#x2F;s</td>\n</tr>\n</tbody></table>\n<h2 id=\"Data-model-design-4\"><a href=\"#Data-model-design-4\" class=\"headerlink\" title=\"Data model design\"></a>Data model design</h2><p>This is the general data model which reflects our requirements.</p>\n<p><img src=\"/assets/img/system-design/netflix-datamodel.jpg\" alt=\"netflix-datamodel\"></p>\n<p>We have the following tables:</p>\n<p><strong>users</strong></p>\n<p>This table will contain a user‚Äôs information such as <code>name</code>, <code>email</code>, <code>dob</code>, and other details.</p>\n<p><strong>videos</strong></p>\n<p>As the name suggests, this table will store videos and their properties such as <code>title</code>, <code>streamURL</code>, <code>tags</code>, etc. We will also store the corresponding <code>userID</code>.</p>\n<p><strong>tags</strong></p>\n<p>This table will simply store tags associated with a video.</p>\n<p><strong>views</strong></p>\n<p>This table helps us to store all the views received on a video.</p>\n<p><strong>comments</strong></p>\n<p>This table stores all the comments received on a video (like YouTube).</p>\n<h3 id=\"What-kind-of-database-should-we-use-3\"><a href=\"#What-kind-of-database-should-we-use-3\" class=\"headerlink\" title=\"What kind of database should we use?\"></a>What kind of database should we use?</h3><p>While our data model seems quite relational, we don‚Äôt necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>\n<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href=\"https://www.postgresql.org/\">PostgreSQL</a> or a distributed NoSQL database such as <a href=\"https://cassandra.apache.org/_/index.html\">Apache Cassandra</a> for our use case.</p>\n<h2 id=\"API-design-4\"><a href=\"#API-design-4\" class=\"headerlink\" title=\"API design\"></a>API design</h2><p>Let us do a basic API design for our services:</p>\n<h3 id=\"Upload-a-video\"><a href=\"#Upload-a-video\" class=\"headerlink\" title=\"Upload a video\"></a>Upload a video</h3><p>Given a byte stream, this API enables video to be uploaded to our service.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">uploadVideo</span>(<span class=\"attr\">title</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">description</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">data</span>: <span class=\"title class_\">Stream</span>&lt;byte&gt;, tags?: <span class=\"built_in\">string</span>[]): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>Title (<code>string</code>): Title of the new video.</p>\n<p>Description (<code>string</code>): Description of the new video.</p>\n<p>Data (<code>Byte[]</code>): Byte stream of the video data.</p>\n<p>Tags (<code>string[]</code>): Tags for the video <em>(optional)</em>.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h3 id=\"Streaming-a-video\"><a href=\"#Streaming-a-video\" class=\"headerlink\" title=\"Streaming a video\"></a>Streaming a video</h3><p>This API allows our users to stream a video with the preferred codec and resolution.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">streamVideo</span>(<span class=\"attr\">videoID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">codec</span>: <span class=\"title class_\">Enum</span>&lt;<span class=\"built_in\">string</span>&gt;, <span class=\"attr\">resolution</span>: <span class=\"title class_\">Tuple</span>&lt;int&gt;, offset?: int): <span class=\"title class_\">VideoStream</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>Video ID (<code>UUID</code>): ID of the video that needs to be streamed.</p>\n<p>Codec (<code>Enum&lt;string&gt;</code>): Required <a href=\"https://en.wikipedia.org/wiki/Video_codec\">codec</a> of the requested video, such as <code>h.265</code>, <code>h.264</code>, <code>VP9</code>, etc.</p>\n<p>Resolution (<code>Tuple&lt;int&gt;</code>): <a href=\"https://en.wikipedia.org/wiki/Display_resolution\">Resolution</a> of the requested video.</p>\n<p>Offset (<code>int</code>): Offset of the video stream in seconds to stream data from any point in the video <em>(optional)</em>.</p>\n<p><strong>Returns</strong></p>\n<p>Stream (<code>VideoStream</code>): Data stream of the requested video.</p>\n<h3 id=\"Search-for-a-video\"><a href=\"#Search-for-a-video\" class=\"headerlink\" title=\"Search for a video\"></a>Search for a video</h3><p>This API will enable our users to search for a video based on its title or tags.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">searchVideo</span>(<span class=\"attr\">query</span>: <span class=\"built_in\">string</span>, nextPage?: <span class=\"built_in\">string</span>): <span class=\"title class_\">Video</span>[]</span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>Query (<code>string</code>): Search query from the user.</p>\n<p>Next Page (<code>string</code>): Token for the next page, this can be used for pagination <em>(optional)</em>.</p>\n<p><strong>Returns</strong></p>\n<p>Videos (<code>Video[]</code>): All the videos available for a particular search query.</p>\n<h3 id=\"Add-a-comment\"><a href=\"#Add-a-comment\" class=\"headerlink\" title=\"Add a comment\"></a>Add a comment</h3><p>This API will allow our users to post a comment on a video (like YouTube).</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">comment</span>(<span class=\"attr\">videoID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">comment</span>: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>VideoID (<code>UUID</code>): ID of the video user wants to comment on.</p>\n<p>Comment (<code>string</code>): The text content of the comment.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h2 id=\"High-level-design-3\"><a href=\"#High-level-design-3\" class=\"headerlink\" title=\"High-level design\"></a>High-level design</h2><p>Now let us do a high-level design of our system.</p>\n<h3 id=\"Architecture-2\"><a href=\"#Architecture-2\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h3><p>We will be using <a href=\"https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices\">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let‚Äôs try to divide our system into some core services.</p>\n<p><strong>User Service</strong></p>\n<p>This service handles user-related concerns such as authentication and user information.</p>\n<p><strong>Stream Service</strong></p>\n<p>The tweet service will handle video streaming-related functionality.</p>\n<p><strong>Search Service</strong></p>\n<p>The service is responsible for handling search-related functionality. It will be discussed in detail separately.</p>\n<p><strong>Media service</strong></p>\n<p>This service will handle the video uploads and processing. It will be discussed in detail separately.</p>\n<p><strong>Analytics Service</strong></p>\n<p>This service will be used for metrics and analytics use cases.</p>\n<p><strong>What about inter-service communication and service discovery?</strong></p>\n<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href=\"https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc\">gRPC</a> which is more lightweight and efficient.</p>\n<p><a href=\"https://karanpratapsingh.com/courses/system-design/service-discovery\">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>\n<p><em>Note: Learn more about <a href=\"https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc\">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>\n<h3 id=\"Video-processing\"><a href=\"#Video-processing\" class=\"headerlink\" title=\"Video processing\"></a>Video processing</h3><p>There are so many variables in play when it comes to processing a video. For example, an average data size of two-hour raw 8K footage from a high-end camera can easily be up to 4 TB, thus we need to have some kind of processing to reduce both storage and delivery costs.</p>\n<p>Here‚Äôs how we can process videos once they‚Äôre uploaded by the content team (or users in YouTube‚Äôs case) and are queued for processing in our <a href=\"https://karanpratapsingh.com/courses/system-design/message-queues\">message queue</a>.</p>\n<p><img src=\"/assets/img/system-design/video-processing-pipeline.jpg\" alt=\"video-processing-pipeline\"></p>\n<p>Let‚Äôs discuss how this works:</p>\n<ul>\n<li><strong>File Chunker</strong></li>\n</ul>\n<p>This is the first step of our processing pipeline. File chunking is the process of splitting a file into smaller pieces called chunks. It can help us eliminate duplicate copies of repeating data on storage, and reduces the amount of data sent over the network by only selecting changed chunks.</p>\n<p>Usually, a video file can be split into equal size chunks based on timestamps but Netflix instead splits chunks based on scenes, this slight variation becomes a huge factor for a better user experience as whenever the client requests a chunk from the server, there is a lower chance of interruption as a complete scene will be retrieved.</p>\n<p><img src=\"/assets/img/system-design/file-chunking.jpg\" alt=\"file-chunking\"></p>\n<ul>\n<li><strong>Content Filter</strong></li>\n</ul>\n<p>This step checks if the video adheres to the content policy of the platform, this can be pre-approved in the case of Netflix as per the <a href=\"https://en.wikipedia.org/wiki/Motion_picture_content_rating_system\">content rating</a> of the media or can be strictly enforced like YouTube.</p>\n<p>This entire step is done by a machine learning model which performs copyright, piracy, and NSFW checks. If issues are found, we can push the task to a <a href=\"https://karanpratapsingh.com/courses/system-design/message-queues#dead-letter-queues\">dead-letter queue (DLQ)</a> and someone from the moderation team can do further inspection.</p>\n<ul>\n<li><strong>Transcoder</strong></li>\n</ul>\n<p><a href=\"https://en.wikipedia.org/wiki/Transcoding\">Transcoding</a> is a process in which the original data is decoded to an intermediate uncompressed format, which is then encoded into the target format. This process uses different <a href=\"https://en.wikipedia.org/wiki/Video_codec\">codecs</a> to perform bitrate adjustment, image downsampling, or re-encoding the media.</p>\n<p>This results in a smaller size file and a much more optimized format for the target devices. Standalone solutions such as <a href=\"https://ffmpeg.org/\">FFmpeg</a> or cloud-based solutions like <a href=\"https://aws.amazon.com/mediaconvert\">AWS Elemental MediaConvert</a> can be used to implement this step of the pipeline.</p>\n<ul>\n<li><strong>Quality Conversion</strong></li>\n</ul>\n<p>This is the last step of the processing pipeline and as the name suggests, this step handles the conversion of the transcoded media from the previous step into different resolutions such as 4K, 1440p, 1080p, 720p, etc.</p>\n<p>This allows us to fetch the desired quality of the video as per the user‚Äôs request, and once the media file finishes processing, it will be uploaded to a distributed file storage such as <a href=\"https://karanpratapsingh.com/courses/system-design/storage#hdfs\">HDFS</a>, <a href=\"https://www.gluster.org/\">GlusterFS</a>, or an <a href=\"https://karanpratapsingh.com/courses/system-design/storage#object-storage\">object storage</a> such as <a href=\"https://aws.amazon.com/s3\">Amazon S3</a> for later retrieval during streaming.</p>\n<p><em>Note: We can add additional steps such as subtitles and thumbnails generation as part of our pipeline.</em></p>\n<p><strong>Why are we using a message queue?</strong></p>\n<p>Processing videos as a long-running task makes much more sense, and a <a href=\"https://karanpratapsingh.com/courses/system-design/message-queues\">message queue</a> also decouples our video processing pipeline from the uploads functionality. We can use something like <a href=\"https://aws.amazon.com/sqs\">Amazon SQS</a> or <a href=\"https://www.rabbitmq.com/\">RabbitMQ</a> to support this.</p>\n<h3 id=\"Video-streaming\"><a href=\"#Video-streaming\" class=\"headerlink\" title=\"Video streaming\"></a>Video streaming</h3><p>Video streaming is a challenging task from both the client and server perspectives. Moreover, internet connection speeds vary quite a lot between different users. To make sure users don‚Äôt re-fetch the same content, we can use a <a href=\"https://karanpratapsingh.com/courses/system-design/content-delivery-network\">Content Delivery Network (CDN)</a>.</p>\n<p>Netflix takes this a step further with its <a href=\"https://openconnect.netflix.com/\">Open Connect</a> program. In this approach, they partner with thousands of Internet Service Providers (ISPs) to localize their traffic and deliver their content more efficiently.</p>\n<p><strong>What is the difference between Netflix‚Äôs Open Connect and a traditional Content Delivery Network (CDN)?</strong></p>\n<p>Netflix Open Connect is our purpose-built <a href=\"https://karanpratapsingh.com/courses/system-design/content-delivery-network\">Content Delivery Network (CDN)</a> responsible for serving Netflix‚Äôs video traffic. Around 95% of the traffic globally is delivered via direct connections between Open Connect and the ISPs their customers use to access the internet.</p>\n<p>Currently, they have Open Connect Appliances (OCAs) in over 1000 separate locations around the world. In case of issues, Open Connect Appliances (OCAs) can failover, and the traffic can be re-routed to Netflix servers.</p>\n<p>Additionally, we can use <a href=\"https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming\">Adaptive bitrate streaming</a> protocols such as <a href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\">HTTP Live Streaming (HLS)</a> which is designed for reliability and it dynamically adapts to network conditions by optimizing playback for the available speed of the connections.</p>\n<p>Lastly, for playing the video from where the user left off (part of our extended requirements), we can simply use the <code>offset</code> property we stored in the <code>views</code> table to retrieve the scene chunk at that particular timestamp and resume the playback for the user.</p>\n<h3 id=\"Searching\"><a href=\"#Searching\" class=\"headerlink\" title=\"Searching\"></a>Searching</h3><p>Sometimes traditional DBMS are not performant enough, we need something which allows us to store, search, and analyze huge volumes of data quickly and in near real-time and give results within milliseconds. <a href=\"https://www.elastic.co/\">Elasticsearch</a> can help us with this use case.</p>\n<p><a href=\"https://www.elastic.co/\">Elasticsearch</a> is a distributed, free and open search and analytics engine for all types of data, including textual, numerical, geospatial, structured, and unstructured. It is built on top of <a href=\"https://lucene.apache.org/\">Apache Lucene</a>.</p>\n<p><strong>How do we identify trending content?</strong></p>\n<p>Trending functionality will be based on top of the search functionality. We can cache the most frequently searched queries in the last <code>N</code> seconds and update them every <code>M</code> seconds using some sort of batch job mechanism.</p>\n<h3 id=\"Sharing\"><a href=\"#Sharing\" class=\"headerlink\" title=\"Sharing\"></a>Sharing</h3><p>Sharing content is an important part of any platform, for this, we can have some sort of URL shortener service in place that can generate short URLs for the users to share.</p>\n<p><em>For more details, refer to the <a href=\"https://karanpratapsingh.com/courses/system-design/url-shortener\">URL Shortener</a> system design.</em></p>\n<h2 id=\"Detailed-design-4\"><a href=\"#Detailed-design-4\" class=\"headerlink\" title=\"Detailed design\"></a>Detailed design</h2><p>It‚Äôs time to discuss our design decisions in detail.</p>\n<h3 id=\"Data-Partitioning-4\"><a href=\"#Data-Partitioning-4\" class=\"headerlink\" title=\"Data Partitioning\"></a>Data Partitioning</h3><p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href=\"https://karanpratapsingh.com/courses/system-design/sharding\">Sharding</a>) can be a good first step. We can use partitions schemes such as:</p>\n<ul>\n<li>Hash-Based Partitioning</li>\n<li>List-Based Partitioning</li>\n<li>Range Based Partitioning</li>\n<li>Composite Partitioning</li>\n</ul>\n<p>The above approaches can still cause uneven data and load distribution, we can solve this using <a href=\"https://karanpratapsingh.com/courses/system-design/consistent-hashing\">Consistent hashing</a>.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/sharding\">Sharding</a> and <a href=\"https://karanpratapsingh.com/courses/system-design/consistent-hashing\">Consistent Hashing</a>.</em></p>\n<h3 id=\"Geo-blocking\"><a href=\"#Geo-blocking\" class=\"headerlink\" title=\"Geo-blocking\"></a>Geo-blocking</h3><p>Platforms like Netflix and YouTube use <a href=\"https://en.wikipedia.org/wiki/Geo-blocking\">Geo-blocking</a> to restrict content in certain geographical areas or countries. This is primarily done due to legal distribution laws that Netflix has to adhere to when they make a deal with the production and distribution companies. In the case of YouTube, this will be controlled by the user during the publishing of the content.</p>\n<p>We can determine the user‚Äôs location either using their <a href=\"https://karanpratapsingh.com/courses/system-design/ip\">IP</a> or region settings in their profile then use services like <a href=\"https://aws.amazon.com/cloudfront\">Amazon CloudFront</a> which supports a geographic restrictions feature or a <a href=\"https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy-geo.html\">geolocation routing policy</a> with <a href=\"https://aws.amazon.com/route53\">Amazon Route53</a> to restrict the content and re-route the user to an error page if the content is not available in that particular region or country.</p>\n<h3 id=\"Recommendations\"><a href=\"#Recommendations\" class=\"headerlink\" title=\"Recommendations\"></a>Recommendations</h3><p>Netflix uses a machine learning model which uses the user‚Äôs viewing history to predict what the user might like to watch next, an algorithm like <a href=\"https://en.wikipedia.org/wiki/Collaborative_filtering\">Collaborative Filtering</a> can be used.</p>\n<p>However, Netflix (like YouTube) uses its own algorithm called Netflix Recommendation Engine which can track several data points such as:</p>\n<ul>\n<li>User profile information like age, gender, and location.</li>\n<li>Browsing and scrolling behavior of the user.</li>\n<li>Time and date a user watched a title.</li>\n<li>The device which was used to stream the content.</li>\n<li>The number of searches and what terms were searched.</li>\n</ul>\n<p><em>For more detail, refer to <a href=\"https://research.netflix.com/research-area/recommendations\">Netflix recommendation research</a>.</em></p>\n<h3 id=\"Metrics-and-Analytics-2\"><a href=\"#Metrics-and-Analytics-2\" class=\"headerlink\" title=\"Metrics and Analytics\"></a>Metrics and Analytics</h3><p>Recording analytics and metrics is one of our extended requirements. We can capture the data from different services and run analytics on the data using <a href=\"https://spark.apache.org/\">Apache Spark</a> which is an open-source unified analytics engine for large-scale data processing. Additionally, we can store critical metadata in the views table to increase data points within our data.</p>\n<h3 id=\"Caching-4\"><a href=\"#Caching-4\" class=\"headerlink\" title=\"Caching\"></a>Caching</h3><p>In a streaming platform, caching is important. We have to be able to cache as much static media content as possible to improve user experience. We can use solutions like <a href=\"https://redis.io/\">Redis</a> or <a href=\"https://memcached.org/\">Memcached</a> but what kind of cache eviction policy would best fit our needs?</p>\n<p><strong>Which cache eviction policy to use?</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)\">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>\n<p><strong>How to handle cache miss?</strong></p>\n<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/caching\">Caching</a>.</em></p>\n<h3 id=\"Media-streaming-and-storage\"><a href=\"#Media-streaming-and-storage\" class=\"headerlink\" title=\"Media streaming and storage\"></a>Media streaming and storage</h3><p>As most of our storage space will be used for storing media files such as thumbnails and videos. Per our discussion earlier, the media service will be handling both the upload and processing of media files.</p>\n<p>We will use distributed file storage such as <a href=\"https://karanpratapsingh.com/courses/system-design/storage#hdfs\">HDFS</a>, <a href=\"https://www.gluster.org/\">GlusterFS</a>, or an <a href=\"https://karanpratapsingh.com/courses/system-design/storage#object-storage\">object storage</a> such as <a href=\"https://aws.amazon.com/s3\">Amazon S3</a> for storage and streaming of the content.</p>\n<h3 id=\"Content-Delivery-Network-CDN-3\"><a href=\"#Content-Delivery-Network-CDN-3\" class=\"headerlink\" title=\"Content Delivery Network (CDN)\"></a>Content Delivery Network (CDN)</h3><p><a href=\"https://karanpratapsingh.com/courses/system-design/content-delivery-network\">Content Delivery Network (CDN)</a> increases content availability and redundancy while reducing bandwidth costs. Generally, static files such as images, and videos are served from CDN. We can use services like <a href=\"https://aws.amazon.com/cloudfront\">Amazon CloudFront</a> or <a href=\"https://www.cloudflare.com/cdn\">Cloudflare CDN</a> for this use case.</p>\n<h2 id=\"Identify-and-resolve-bottlenecks-4\"><a href=\"#Identify-and-resolve-bottlenecks-4\" class=\"headerlink\" title=\"Identify and resolve bottlenecks\"></a>Identify and resolve bottlenecks</h2><p><img src=\"/assets/img/system-design/netflix-advanced-design.jpg\" alt=\"netflix-advanced-design\"></p>\n<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>\n<ul>\n<li>‚ÄúWhat if one of our services crashes?‚Äù</li>\n<li>‚ÄúHow will we distribute our traffic between our components?‚Äù</li>\n<li>‚ÄúHow can we reduce the load on our database?‚Äù</li>\n<li>‚ÄúHow to improve the availability of our cache?‚Äù</li>\n</ul>\n<p>To make our system more resilient we can do the following:</p>\n<ul>\n<li>Running multiple instances of each of our services.</li>\n<li>Introducing <a href=\"https://karanpratapsingh.com/courses/system-design/load-balancing\">load balancers</a> between clients, servers, databases, and cache servers.</li>\n<li>Using multiple read replicas for our databases.</li>\n<li>Multiple instances and replicas for our distributed cache.</li>\n</ul>\n<h1 id=\"Uber\"><a href=\"#Uber\" class=\"headerlink\" title=\"Uber\"></a>Uber</h1><p>Let‚Äôs design an <a href=\"https://uber.com/\">Uber</a> like ride-hailing service, similar to services like <a href=\"https://www.lyft.com/\">Lyft</a>, <a href=\"https://www.olacabs.com/\">OLA Cabs</a>, etc.</p>\n<h2 id=\"What-is-Uber\"><a href=\"#What-is-Uber\" class=\"headerlink\" title=\"What is Uber?\"></a>What is Uber?</h2><p>Uber is a mobility service provider, allowing users to book rides and a driver to transport them in a way similar to a taxi. It is available on the web and mobile platforms such as Android and iOS.</p>\n<h2 id=\"Requirements-4\"><a href=\"#Requirements-4\" class=\"headerlink\" title=\"Requirements\"></a>Requirements</h2><p>Our system should meet the following requirements:</p>\n<h3 id=\"Functional-requirements-5\"><a href=\"#Functional-requirements-5\" class=\"headerlink\" title=\"Functional requirements\"></a>Functional requirements</h3><p>We will design our system for two types of users: Customers and Drivers.</p>\n<p><strong>Customers</strong></p>\n<ul>\n<li>Customers should be able to see all the cabs in the vicinity with an ETA and pricing information.</li>\n<li>Customers should be able to book a cab to a destination.</li>\n<li>Customers should be able to see the location of the driver.</li>\n</ul>\n<p><strong>Drivers</strong></p>\n<ul>\n<li>Drivers should be able to accept or deny the customer requested ride.</li>\n<li>Once a driver accepts the ride, they should see the pickup location of the customer.</li>\n<li>Drivers should be able to mark the trip as complete on reaching the destination.</li>\n</ul>\n<h3 id=\"Non-Functional-requirements-2\"><a href=\"#Non-Functional-requirements-2\" class=\"headerlink\" title=\"Non-Functional requirements\"></a>Non-Functional requirements</h3><ul>\n<li>High reliability.</li>\n<li>High availability with minimal latency.</li>\n<li>The system should be scalable and efficient.</li>\n</ul>\n<h3 id=\"Extended-requirements-5\"><a href=\"#Extended-requirements-5\" class=\"headerlink\" title=\"Extended requirements\"></a>Extended requirements</h3><ul>\n<li>Customers can rate the trip after it‚Äôs completed.</li>\n<li>Payment processing.</li>\n<li>Metrics and analytics.</li>\n</ul>\n<h2 id=\"Estimation-and-Constraints-5\"><a href=\"#Estimation-and-Constraints-5\" class=\"headerlink\" title=\"Estimation and Constraints\"></a>Estimation and Constraints</h2><p>Let‚Äôs start with the estimation and constraints.</p>\n<p><em>Note: Make sure to check any scale or traffic-related assumptions with your interviewer.</em></p>\n<h3 id=\"Traffic-4\"><a href=\"#Traffic-4\" class=\"headerlink\" title=\"Traffic\"></a>Traffic</h3><p>Let us assume we have 100 million daily active users (DAU) with 1 million drivers and on average our platform enables 10 million rides daily.</p>\n<p>If on average each user performs 10 actions (such as request a check available rides, fares, book rides, etc.) we will have to handle 1 billion requests daily.</p>\n<p>$$<br>100 \\space million \\times 10 \\space actions &#x3D; 1 \\space billion&#x2F;day<br>$$</p>\n<p><strong>What would be Requests Per Second (RPS) for our system?</strong></p>\n<p>1 billion requests per day translate into 12K requests per second.</p>\n<p>$$<br>\\frac{1 \\space billion}{(24 \\space hrs \\times 3600 \\space seconds)} &#x3D; \\sim 12K \\space requests&#x2F;second<br>$$</p>\n<h3 id=\"Storage-6\"><a href=\"#Storage-6\" class=\"headerlink\" title=\"Storage\"></a>Storage</h3><p>If we assume each message on average is 400 bytes, we will require about 400 GB of database storage every day.</p>\n<p>$$<br>1 \\space billion \\times 400 \\space bytes &#x3D; \\sim 400 \\space GB&#x2F;day<br>$$</p>\n<p>And for 10 years, we will require about 1.4 PB of storage.</p>\n<p>$$<br>400 \\space GB \\times 10 \\space years \\times 365 \\space days &#x3D; \\sim 1.4 \\space PB<br>$$</p>\n<h3 id=\"Bandwidth-4\"><a href=\"#Bandwidth-4\" class=\"headerlink\" title=\"Bandwidth\"></a>Bandwidth</h3><p>As our system is handling 400 GB of ingress every day, we will require a minimum bandwidth of around 4 MB per second.</p>\n<p>$$<br>\\frac{400 \\space GB}{(24 \\space hrs \\times 3600 \\space seconds)} &#x3D; \\sim 5 \\space MB&#x2F;second<br>$$</p>\n<h3 id=\"High-level-estimate-4\"><a href=\"#High-level-estimate-4\" class=\"headerlink\" title=\"High-level estimate\"></a>High-level estimate</h3><p>Here is our high-level estimate:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Estimate</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Daily active users (DAU)</td>\n<td>100 million</td>\n</tr>\n<tr>\n<td>Requests per second (RPS)</td>\n<td>12K&#x2F;s</td>\n</tr>\n<tr>\n<td>Storage (per day)</td>\n<td>~400 GB</td>\n</tr>\n<tr>\n<td>Storage (10 years)</td>\n<td>~1.4 PB</td>\n</tr>\n<tr>\n<td>Bandwidth</td>\n<td>~5 MB&#x2F;s</td>\n</tr>\n</tbody></table>\n<h2 id=\"Data-model-design-5\"><a href=\"#Data-model-design-5\" class=\"headerlink\" title=\"Data model design\"></a>Data model design</h2><p>This is the general data model which reflects our requirements.</p>\n<p><img src=\"/assets/img/system-design/uber-datamodel.jpg\" alt=\"uber-datamodel\"></p>\n<p>We have the following tables:</p>\n<p><strong>customers</strong></p>\n<p>This table will contain a customer‚Äôs information such as <code>name</code>, <code>email</code>, and other details.</p>\n<p><strong>drivers</strong></p>\n<p>This table will contain a driver‚Äôs information such as <code>name</code>, <code>email</code>, <code>dob</code> and other details.</p>\n<p><strong>trips</strong></p>\n<p>This table represents the trip taken by the customer and stores data such as <code>source</code>, <code>destination</code>, and <code>status</code> of the trip.</p>\n<p><strong>cabs</strong></p>\n<p>This table stores data such as the registration number, and type (like Uber Go, Uber XL, etc.) of the cab that the driver will be driving.</p>\n<p><strong>ratings</strong></p>\n<p>As the name suggests, this table stores the <code>rating</code> and <code>feedback</code> for the trip.</p>\n<p><strong>payments</strong></p>\n<p>The payments table contains the payment-related data with the corresponding <code>tripID</code>.</p>\n<h3 id=\"What-kind-of-database-should-we-use-4\"><a href=\"#What-kind-of-database-should-we-use-4\" class=\"headerlink\" title=\"What kind of database should we use?\"></a>What kind of database should we use?</h3><p>While our data model seems quite relational, we don‚Äôt necessarily need to store everything in a single database, as this can limit our scalability and quickly become a bottleneck.</p>\n<p>We will split the data between different services each having ownership over a particular table. Then we can use a relational database such as <a href=\"https://www.postgresql.org/\">PostgreSQL</a> or a distributed NoSQL database such as <a href=\"https://cassandra.apache.org/_/index.html\">Apache Cassandra</a> for our use case.</p>\n<h2 id=\"API-design-5\"><a href=\"#API-design-5\" class=\"headerlink\" title=\"API design\"></a>API design</h2><p>Let us do a basic API design for our services:</p>\n<h3 id=\"Request-a-Ride\"><a href=\"#Request-a-Ride\" class=\"headerlink\" title=\"Request a Ride\"></a>Request a Ride</h3><p>Through this API, customers will be able to request a ride.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">requestRide</span>(<span class=\"attr\">customerID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">source</span>: <span class=\"title class_\">Tuple</span>&lt;float&gt;, <span class=\"attr\">destination</span>: <span class=\"title class_\">Tuple</span>&lt;float&gt;, <span class=\"attr\">cabType</span>: <span class=\"title class_\">Enum</span>&lt;<span class=\"built_in\">string</span>&gt;, <span class=\"attr\">paymentMethod</span>: <span class=\"title class_\">Enum</span>&lt;<span class=\"built_in\">string</span>&gt;): <span class=\"title class_\">Ride</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>Customer ID (<code>UUID</code>): ID of the customer.</p>\n<p>Source (<code>Tuple&lt;float&gt;</code>): Tuple containing the latitude and longitude of the trip‚Äôs starting location.</p>\n<p>Destination (<code>Tuple&lt;float&gt;</code>): Tuple containing the latitude and longitude of the trip‚Äôs destination.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h3 id=\"Cancel-the-Ride\"><a href=\"#Cancel-the-Ride\" class=\"headerlink\" title=\"Cancel the Ride\"></a>Cancel the Ride</h3><p>This API will allow customers to cancel the ride.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">cancelRide</span>(<span class=\"attr\">customerID</span>: <span class=\"variable constant_\">UUID</span>, reason?: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>Customer ID (<code>UUID</code>): ID of the customer.</p>\n<p>Reason (<code>UUID</code>): Reason for canceling the ride <em>(optional)</em>.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h3 id=\"Accept-or-Deny-the-Ride\"><a href=\"#Accept-or-Deny-the-Ride\" class=\"headerlink\" title=\"Accept or Deny the Ride\"></a>Accept or Deny the Ride</h3><p>This API will allow the driver to accept or deny the trip.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">acceptRide</span>(<span class=\"attr\">driverID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">rideID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"built_in\">boolean</span></span><br><span class=\"line\"><span class=\"title function_\">denyRide</span>(<span class=\"attr\">driverID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">rideID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>Driver ID (<code>UUID</code>): ID of the driver.</p>\n<p>Ride ID (<code>UUID</code>): ID of the customer requested ride.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h3 id=\"Start-or-End-the-Trip\"><a href=\"#Start-or-End-the-Trip\" class=\"headerlink\" title=\"Start or End the Trip\"></a>Start or End the Trip</h3><p>Using this API, a driver will be able to start and end the trip.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">startTrip</span>(<span class=\"attr\">driverID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">tripID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"built_in\">boolean</span></span><br><span class=\"line\"><span class=\"title function_\">endTrip</span>(<span class=\"attr\">driverID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">tripID</span>: <span class=\"variable constant_\">UUID</span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>Driver ID (<code>UUID</code>): ID of the driver.</p>\n<p>Trip ID (<code>UUID</code>): ID of the requested trip.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h3 id=\"Rate-the-Trip\"><a href=\"#Rate-the-Trip\" class=\"headerlink\" title=\"Rate the Trip\"></a>Rate the Trip</h3><p>This API will enable customers to rate the trip.</p>\n<figure class=\"highlight tsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">rateTrip</span>(<span class=\"attr\">customerID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">tripID</span>: <span class=\"variable constant_\">UUID</span>, <span class=\"attr\">rating</span>: int, feedback?: <span class=\"built_in\">string</span>): <span class=\"built_in\">boolean</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Parameters</strong></p>\n<p>Customer ID (<code>UUID</code>): ID of the customer.</p>\n<p>Trip ID (<code>UUID</code>): ID of the completed trip.</p>\n<p>Rating (<code>int</code>): Rating of the trip.</p>\n<p>Feedback (<code>string</code>): Feedback about the trip by the customer <em>(optional)</em>.</p>\n<p><strong>Returns</strong></p>\n<p>Result (<code>boolean</code>): Represents whether the operation was successful or not.</p>\n<h2 id=\"High-level-design-4\"><a href=\"#High-level-design-4\" class=\"headerlink\" title=\"High-level design\"></a>High-level design</h2><p>Now let us do a high-level design of our system.</p>\n<h3 id=\"Architecture-3\"><a href=\"#Architecture-3\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h3><p>We will be using <a href=\"https://karanpratapsingh.com/courses/system-design/monoliths-microservices#microservices\">microservices architecture</a> since it will make it easier to horizontally scale and decouple our services. Each service will have ownership of its own data model. Let‚Äôs try to divide our system into some core services.</p>\n<p><strong>Customer Service</strong></p>\n<p>This service handles customer-related concerns such as authentication and customer information.</p>\n<p><strong>Driver Service</strong></p>\n<p>This service handles driver-related concerns such as authentication and driver information.</p>\n<p><strong>Ride Service</strong></p>\n<p>This service will be responsible for ride matching and quadtree aggregation. It will be discussed in detail separately.</p>\n<p><strong>Trip Service</strong></p>\n<p>This service handles trip-related functionality in our system.</p>\n<p><strong>Payment Service</strong></p>\n<p>This service will be responsible for handling payments in our system.</p>\n<p><strong>Notification Service</strong></p>\n<p>This service will simply send push notifications to the users. It will be discussed in detail separately.</p>\n<p><strong>Analytics Service</strong></p>\n<p>This service will be used for metrics and analytics use cases.</p>\n<p><strong>What about inter-service communication and service discovery?</strong></p>\n<p>Since our architecture is microservices-based, services will be communicating with each other as well. Generally, REST or HTTP performs well but we can further improve the performance using <a href=\"https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc#grpc\">gRPC</a> which is more lightweight and efficient.</p>\n<p><a href=\"https://karanpratapsingh.com/courses/system-design/service-discovery\">Service discovery</a> is another thing we will have to take into account. We can also use a service mesh that enables managed, observable, and secure communication between individual services.</p>\n<p><em>Note: Learn more about <a href=\"https://karanpratapsingh.com/courses/system-design/rest-graphql-grpc\">REST, GraphQL, gRPC</a> and how they compare with each other.</em></p>\n<h3 id=\"How-is-the-service-expected-to-work\"><a href=\"#How-is-the-service-expected-to-work\" class=\"headerlink\" title=\"How is the service expected to work?\"></a>How is the service expected to work?</h3><p>Here‚Äôs how our service is expected to work:</p>\n<p><img src=\"/assets/img/system-design/uber-working.jpg\" alt=\"uber-working\"></p>\n<ol>\n<li>Customer requests a ride by specifying the source, destination, cab type, payment method, etc.</li>\n<li>Ride service registers this request, finds nearby drivers, and calculates the estimated time of arrival (ETA).</li>\n<li>The request is then broadcasted to the nearby drivers for them to accept or deny.</li>\n<li>If the driver accepts, the customer is notified about the live location of the driver with the estimated time of arrival (ETA) while they wait for pickup.</li>\n<li>The customer is picked up and the driver can start the trip.</li>\n<li>Once the destination is reached, the driver will mark the ride as complete and collect payment.</li>\n<li>After the payment is complete, the customer can leave a rating and feedback for the trip if they like.</li>\n</ol>\n<h3 id=\"Location-Tracking\"><a href=\"#Location-Tracking\" class=\"headerlink\" title=\"Location Tracking\"></a>Location Tracking</h3><p>How do we efficiently send and receive live location data from the client (customers and drivers) to our backend? We have two different options:</p>\n<p><strong>Pull model</strong></p>\n<p>The client can periodically send an HTTP request to servers to report its current location and receive ETA and pricing information. This can be achieved via something like <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#long-polling\">Long polling</a>.</p>\n<p><strong>Push model</strong></p>\n<p>The client opens a long-lived connection with the server and once new data is available it will be pushed to the client. We can use <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets\">WebSockets</a> or <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse\">Server-Sent Events (SSE)</a> for this.</p>\n<p>The pull model approach is not scalable as it will create unnecessary request overhead on our servers and most of the time the response will be empty, thus wasting our resources. To minimize latency, using the push model with <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#websockets\">WebSockets</a> is a better choice because then we can push data to the client once it‚Äôs available without any delay given the connection is open with the client. Also, WebSockets provide full-duplex communication, unlike <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events#server-sent-events-sse\">Server-Sent Events (SSE)</a> which are only unidirectional.</p>\n<p>Additionally, the client application should have some sort of background job mechanism to ping GPS location while the application is in the background.</p>\n<p><em>Note: Learn more about <a href=\"https://karanpratapsingh.com/courses/system-design/long-polling-websockets-server-sent-events\">Long polling, WebSockets, Server-Sent Events (SSE)</a>.</em></p>\n<h3 id=\"Ride-Matching\"><a href=\"#Ride-Matching\" class=\"headerlink\" title=\"Ride Matching\"></a>Ride Matching</h3><p>We need a way to efficiently store and query nearby drivers. Let‚Äôs explore different solutions we can incorporate into our design.</p>\n<p><strong>SQL</strong></p>\n<p>We already have access to the latitude and longitude of our customers, and with databases like <a href=\"https://www.postgresql.org/\">PostgreSQL</a> and <a href=\"https://www.mysql.com/\">MySQL</a> we can perform a query to find nearby driver locations given a latitude and longitude (X, Y) within a radius (R).</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> locations <span class=\"keyword\">WHERE</span> lat <span class=\"keyword\">BETWEEN</span> X<span class=\"operator\">-</span>R <span class=\"keyword\">AND</span> X<span class=\"operator\">+</span>R <span class=\"keyword\">AND</span> long <span class=\"keyword\">BETWEEN</span> Y<span class=\"operator\">-</span>R <span class=\"keyword\">AND</span> Y<span class=\"operator\">+</span>R</span><br></pre></td></tr></table></figure>\n\n<p>However, this is not scalable, and performing this query on large datasets will be quite slow.</p>\n<p><strong>Geohashing</strong></p>\n<p>Geohashing is a <a href=\"https://en.wikipedia.org/wiki/Address_geocoding\">geocoding</a> method used to encode geographic coordinates such as latitude and longitude into short alphanumeric strings. It was created by <a href=\"https://twitter.com/gniemeyer\">Gustavo Niemeyer</a> in 2008.</p>\n<p>Geohash is a hierarchical spatial index that uses Base-32 alphabet encoding, the first character in a geohash identifies the initial location as one of the 32 cells. This cell will also contain 32 cells. This means that to represent a point, the world is recursively divided into smaller and smaller cells with each additional bit until the desired precision is attained. The precision factor also determines the size of the cell.</p>\n<p><img src=\"/assets/img/system-design/geohashing.jpg\" alt=\"geohashing\"></p>\n<p>For example, San Francisco with coordinates <code>37.7564, -122.4016</code> can be represented in geohash as <code>9q8yy9mf</code>.</p>\n<p>Now, using the customer‚Äôs geohash we can determine the nearest available driver by simply comparing it with the driver‚Äôs geohash. For better performance, we will index and store the geohash of the driver in memory for faster retrieval.</p>\n<p><strong>Quadtrees</strong></p>\n<p>A Quadtree is a tree data structure in which each internal node has exactly four children. They are often used to partition a two-dimensional space by recursively subdividing it into four quadrants or regions. Each child or leaf node stores spatial information. Quadtrees are the two-dimensional analog of <a href=\"https://en.wikipedia.org/wiki/Octree\">Octrees</a> which are used to partition three-dimensional space.</p>\n<p><img src=\"/assets/img/system-design/quadtree.jpg\" alt=\"quadtree\"></p>\n<p>Quadtrees enable us to search points within a two-dimensional range efficiently, where those points are defined as latitude&#x2F;longitude coordinates or as cartesian (x, y) coordinates.</p>\n<p>We can save further computation by only subdividing a node after a certain threshold.</p>\n<p><img src=\"/assets/img/system-design/quadtree-subdivision.jpg\" alt=\"quadtree-subdivision\"></p>\n<p>Quadtree seems perfect for our use case, we can update the Quadtree every time we receive a new location update from the driver. To reduce the load on the quadtree servers we can use an in-memory datastore such as <a href=\"https://redis.io/\">Redis</a> to cache the latest updates. And with the application of mapping algorithms such as the <a href=\"https://en.wikipedia.org/wiki/Hilbert_curve\">Hilbert curve</a>, we can perform efficient range queries to find nearby drivers for the customer.</p>\n<p><strong>What about race conditions?</strong></p>\n<p>Race conditions can easily occur when a large number of customers will be requesting rides simultaneously. To avoid this, we can wrap our ride matching logic in a <a href=\"https://en.wikipedia.org/wiki/Lock_(computer_science)\">Mutex</a> to avoid any race conditions. Furthermore, every action should be transactional in nature.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/transactions\">Transactions</a> and <a href=\"https://karanpratapsingh.com/courses/system-design/distributed-transactions\">Distributed Transactions</a>.</em></p>\n<p><strong>How to find the best drivers nearby?</strong></p>\n<p>Once we have a list of nearby drivers from the Quadtree servers, we can perform some sort of ranking based on parameters like average ratings, relevance, past customer feedback, etc. This will allow us to broadcast notifications to the best available drivers first.</p>\n<p><strong>Dealing with high demand</strong></p>\n<p>In cases of high demand, we can use the concept of Surge Pricing. Surge pricing is a dynamic pricing method where prices are temporarily increased as a reaction to increased demand and mostly limited supply. This surge price can be added to the base price of the trip.</p>\n<p><em>For more details, learn how <a href=\"https://www.uber.com/us/en/drive/driver-app/how-surge-works\">surge pricing works</a> with Uber.</em></p>\n<h3 id=\"Payments\"><a href=\"#Payments\" class=\"headerlink\" title=\"Payments\"></a>Payments</h3><p>Handling payments at scale is challenging, to simplify our system we can use a third-party payment processor like <a href=\"https://stripe.com/\">Stripe</a> or <a href=\"https://www.paypal.com/\">PayPal</a>. Once the payment is complete, the payment processor will redirect the user back to our application and we can set up a <a href=\"https://en.wikipedia.org/wiki/Webhook\">webhook</a> to capture all the payment-related data.</p>\n<h3 id=\"Notifications-2\"><a href=\"#Notifications-2\" class=\"headerlink\" title=\"Notifications\"></a>Notifications</h3><p>Push notifications will be an integral part of our platform. We can use a message queue or a message broker such as <a href=\"https://kafka.apache.org/\">Apache Kafka</a> with the notification service to dispatch requests to <a href=\"https://firebase.google.com/docs/cloud-messaging\">Firebase Cloud Messaging (FCM)</a> or <a href=\"https://developer.apple.com/documentation/usernotifications\">Apple Push Notification Service (APNS)</a> which will handle the delivery of the push notifications to user devices.</p>\n<p><em>For more details, refer to the <a href=\"https://karanpratapsingh.com/courses/system-design/whatsapp#notifications\">WhatsApp</a> system design where we discuss push notifications.</em></p>\n<h2 id=\"Detailed-design-5\"><a href=\"#Detailed-design-5\" class=\"headerlink\" title=\"Detailed design\"></a>Detailed design</h2><p>It‚Äôs time to discuss our design decisions in detail.</p>\n<h3 id=\"Data-Partitioning-5\"><a href=\"#Data-Partitioning-5\" class=\"headerlink\" title=\"Data Partitioning\"></a>Data Partitioning</h3><p>To scale out our databases we will need to partition our data. Horizontal partitioning (aka <a href=\"https://karanpratapsingh.com/courses/system-design/sharding\">Sharding</a>) can be a good first step. We can shard our database either based on existing <a href=\"https://karanpratapsingh.com/courses/system-design/sharding#partitioning-criteria\">partition schemes</a> or regions. If we divide the locations into regions using let‚Äôs say zip codes, we can effectively store all the data in a given region on a fixed node. But this can still cause uneven data and load distribution, we can solve this using <a href=\"https://karanpratapsingh.com/courses/system-design/consistent-hashing\">Consistent hashing</a>.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/sharding\">Sharding</a> and <a href=\"https://karanpratapsingh.com/courses/system-design/consistent-hashing\">Consistent Hashing</a>.</em></p>\n<h3 id=\"Metrics-and-Analytics-3\"><a href=\"#Metrics-and-Analytics-3\" class=\"headerlink\" title=\"Metrics and Analytics\"></a>Metrics and Analytics</h3><p>Recording analytics and metrics is one of our extended requirements. We can capture the data from different services and run analytics on the data using <a href=\"https://spark.apache.org/\">Apache Spark</a> which is an open-source unified analytics engine for large-scale data processing. Additionally, we can store critical metadata in the views table to increase data points within our data.</p>\n<h3 id=\"Caching-5\"><a href=\"#Caching-5\" class=\"headerlink\" title=\"Caching\"></a>Caching</h3><p>In a location services-based platform, caching is important. We have to be able to cache the recent locations of the customers and drivers for fast retrieval. We can use solutions like <a href=\"https://redis.io/\">Redis</a> or <a href=\"https://memcached.org/\">Memcached</a> but what kind of cache eviction policy would best fit our needs?</p>\n<p><strong>Which cache eviction policy to use?</strong></p>\n<p><a href=\"https://en.wikipedia.org/wiki/Cache_replacement_policies#Least_recently_used_(LRU)\">Least Recently Used (LRU)</a> can be a good policy for our system. In this policy, we discard the least recently used key first.</p>\n<p><strong>How to handle cache miss?</strong></p>\n<p>Whenever there is a cache miss, our servers can hit the database directly and update the cache with the new entries.</p>\n<p><em>For more details, refer to <a href=\"https://karanpratapsingh.com/courses/system-design/caching\">Caching</a>.</em></p>\n<h2 id=\"Identify-and-resolve-bottlenecks-5\"><a href=\"#Identify-and-resolve-bottlenecks-5\" class=\"headerlink\" title=\"Identify and resolve bottlenecks\"></a>Identify and resolve bottlenecks</h2><p><img src=\"/assets/img/system-design/uber-advanced-design.jpg\" alt=\"uber-advanced-design\"></p>\n<p>Let us identify and resolve bottlenecks such as single points of failure in our design:</p>\n<ul>\n<li>‚ÄúWhat if one of our services crashes?‚Äù</li>\n<li>‚ÄúHow will we distribute our traffic between our components?‚Äù</li>\n<li>‚ÄúHow can we reduce the load on our database?‚Äù</li>\n<li>‚ÄúHow to improve the availability of our cache?‚Äù</li>\n<li>‚ÄúHow can we make our notification system more robust?‚Äù</li>\n</ul>\n<p>To make our system more resilient we can do the following:</p>\n<ul>\n<li>Running multiple instances of each of our services.</li>\n<li>Introducing <a href=\"https://karanpratapsingh.com/courses/system-design/load-balancing\">load balancers</a> between clients, servers, databases, and cache servers.</li>\n<li>Using multiple read replicas for our databases.</li>\n<li>Multiple instances and replicas for our distributed cache.</li>\n<li>Exactly once delivery and message ordering is challenging in a distributed system, we can use a dedicated <a href=\"https://karanpratapsingh.com/courses/system-design/message-brokers\">message broker</a> such as <a href=\"https://kafka.apache.org/\">Apache Kafka</a> or <a href=\"https://nats.io/\">NATS</a> to make our notification system more robust.</li>\n</ul>\n<h1 id=\"Next-Steps\"><a href=\"#Next-Steps\" class=\"headerlink\" title=\"Next Steps\"></a>Next Steps</h1><p>Congratulations, you‚Äôve finished the course!</p>\n<p>Now that you know the fundamentals of System Design, here are some additional resources:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=UEAMfLPZZhE&list=PLeKd45zvjcDFUEv_ohr_HdUFe97RItdiB\">Distributed Systems</a> (by Dr. Martin Kleppmann)</li>\n<li><a href=\"https://www.amazon.in/System-Design-Interview-insiders-Second/dp/B08CMF2CQF\">System Design Interview: An Insider‚Äôs Guide</a></li>\n<li><a href=\"https://microservices.io/\">Microservices</a> (by Chris Richardson)</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Serverless_computing\">Serverless computing</a></li>\n<li><a href=\"https://kubernetes.io/\">Kubernetes</a></li>\n</ul>\n<p>It is also recommended to actively follow engineering blogs of companies putting what we learned in the course into practice at scale:</p>\n<ul>\n<li><a href=\"https://engineering.microsoft.com/\">Microsoft Engineering</a></li>\n<li><a href=\"http://googleresearch.blogspot.com/\">Google Research Blog</a></li>\n<li><a href=\"http://techblog.netflix.com/\">Netflix Tech Blog</a></li>\n<li><a href=\"https://aws.amazon.com/blogs/aws\">AWS Blog</a></li>\n<li><a href=\"https://www.facebook.com/Engineering\">Facebook Engineering</a></li>\n<li><a href=\"http://eng.uber.com/\">Uber Engineering Blog</a></li>\n<li><a href=\"http://nerds.airbnb.com/\">Airbnb Engineering</a></li>\n<li><a href=\"https://github.blog/category/engineering\">GitHub Engineering Blog</a></li>\n<li><a href=\"https://software.intel.com/en-us/blogs\">Intel Software Blog</a></li>\n<li><a href=\"http://engineering.linkedin.com/blog\">LinkedIn Engineering</a></li>\n<li><a href=\"https://medium.com/paypal-engineering\">Paypal Developer Blog</a></li>\n<li><a href=\"https://blog.twitter.com/engineering\">Twitter Engineering</a></li>\n</ul>\n<p>Last but not least, volunteer for new projects at your company, and learn from senior engineers and architects to further improve your system design skills.</p>\n<p>I hope this course was a great learning experience. I would love to hear feedback from you.</p>\n<p>Wishing you all the best for further learning!</p>\n<h1 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h1><p>Here are the resources that were referenced while creating this course.</p>\n<ul>\n<li><a href=\"https://www.cloudflare.com/learning\">Cloudflare learning center</a></li>\n<li><a href=\"https://www.ibm.com/blogs\">IBM Blogs</a></li>\n<li><a href=\"https://www.fastly.com/blog\">Fastly Blogs</a></li>\n<li><a href=\"https://ns1.com/blog\">NS1 Blogs</a></li>\n<li><a href=\"https://www.educative.io/courses/grokking-the-system-design-interview\">Grokking the System Design Interview</a></li>\n<li><a href=\"https://github.com/donnemartin/system-design-primer\">System Design Primer</a></li>\n<li><a href=\"https://aws.amazon.com/blogs\">AWS Blogs</a></li>\n<li><a href=\"https://martinfowler.com/\">Martin Fowler</a></li>\n<li><a href=\"https://www.pagerduty.com/resources\">PagerDuty resources</a></li>\n<li><a href=\"https://blogs.vmware.com/learning\">VMWare Blogs</a></li>\n</ul>\n<p><sup> Blog Disclaimer: This webpage is a modification of <a href=\"https://github.com/karanpratapsingh\">@karanpratapsingh</a>‚Äòs <a href=\"https://github.com/karanpratapsingh/system-design\">system-design</a> repository with <a href=\"https://github.com/karanpratapsingh/system-design/commits/main/LICENSE\">CC BY-NC-ND 4.0</a> <a href=\"https://drive.google.com/file/d/1XNunkcoiM90bUjI3LbM8giyVPWc8xVNE/view\">license</a>.</sup> </p>\n",
            "tags": [
                "system-design",
                "distributed-systems",
                "databases"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/leetcode-solutions-cheatsheet/",
            "url": "https://samirpaul.in/posts/leetcode-solutions-cheatsheet/",
            "title": "Leetcode Solutions Cheatsheet",
            "date_published": "2023-08-15T04:24:55.000Z",
            "content_html": "<h2 id=\"Quick-Access-Links\"><a href=\"#Quick-Access-Links\" class=\"headerlink\" title=\"Quick Access Links\"></a>Quick Access Links</h2><h3 id=\"LeetCode\"><a href=\"#LeetCode\" class=\"headerlink\" title=\"LeetCode\"></a>LeetCode</h3><ul>\n<li>LeetCode - CheatSheet<ul>\n<li>Getting Started<ul>\n<li>Prerequisites</li>\n</ul>\n</li>\n<li>Built With</li>\n<li>Authors</li>\n<li>Acknowledgments</li>\n<li><a href=\"#quick-access-links\">Quick Access Links</a><ul>\n<li><a href=\"#leetcode\">LeetCode</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#1-two-sum\">1-Two Sum</a><ul>\n<li><a href=\"#brute-force\">Brute Force</a></li>\n<li><a href=\"#one-pass-hash-table\">One Pass Hash Table</a></li>\n</ul>\n</li>\n<li><a href=\"#2-add-two-numbers\">2-Add Two Numbers</a><ul>\n<li><a href=\"#elementary-math-solution\">Elementary Math Solution</a></li>\n</ul>\n</li>\n<li><a href=\"#3-substring-no-repeat\">3-Substring No Repeat</a><ul>\n<li><a href=\"#brute-force-1\">Brute Force</a></li>\n<li><a href=\"#sliding-window\">Sliding Window</a></li>\n<li><a href=\"#sliding-window-optimized\">Sliding Window Optimized</a></li>\n</ul>\n</li>\n<li><a href=\"#4-median-of-two-sorted-arrays\">4-Median of Two Sorted Arrays</a><ul>\n<li><a href=\"#recursive-approach\">Recursive Approach</a></li>\n</ul>\n</li>\n<li><a href=\"#5-longest-palindromic-substring\">5-Longest Palindromic Substring</a><ul>\n<li><a href=\"#longest-common-substring\">Longest Common Substring</a></li>\n<li><a href=\"#brute-force-2\">Brute Force</a></li>\n<li><a href=\"#dynamic-programming\">Dynamic Programming</a></li>\n<li><a href=\"#expand-around-center\">Expand Around Center</a></li>\n<li><a href=\"#manachers-algorithm\">Manacher‚Äôs Algorithm</a></li>\n</ul>\n</li>\n<li><a href=\"#6-zigzag-conversion\">6-ZigZag Conversion</a><ul>\n<li><a href=\"#sort-by-row\">Sort by Row</a></li>\n<li><a href=\"#visit-by-row\">Visit by Row</a></li>\n</ul>\n</li>\n<li><a href=\"#7-reverse-integer\">7-Reverse Integer</a><ul>\n<li><a href=\"#pop-and-push-digits-and-check-before-overflow\">Pop and Push Digits and Check Before Overflow</a></li>\n</ul>\n</li>\n<li><a href=\"#8-string-to-integer-atoi\">8-String to Integer (atoi)</a><ul>\n<li><a href=\"#ascii-conversion\">ASCII Conversion</a></li>\n</ul>\n</li>\n<li><a href=\"#9-palindrome-number\">9-Palindrome Number</a><ul>\n<li><a href=\"#revert-half-of-the-number\">Revert Half of the Number</a></li>\n</ul>\n</li>\n<li><a href=\"#10-regular-expression-matching\">10-Regular Expression Matching</a><ul>\n<li><a href=\"#recursion\">Recursion</a></li>\n<li><a href=\"#dynamic-programming-1\">Dynamic Programming</a></li>\n<li><a href=\"#non-recursive\">Non-Recursive</a></li>\n</ul>\n</li>\n<li><a href=\"#11-container-with-the-most-water\">11-Container with the Most Water</a><ul>\n<li><a href=\"#brute-force-3\">Brute Force</a></li>\n<li><a href=\"#two-pointer-approach\">Two Pointer Approach</a></li>\n</ul>\n</li>\n<li><a href=\"#12-integer-to-roman\">12-Integer To Roman</a><ul>\n<li><a href=\"#string-array\">String Array</a></li>\n</ul>\n</li>\n<li><a href=\"#13-roman-to-integer\">13-Roman to Integer</a><ul>\n<li><a href=\"#character-array\">Character Array</a></li>\n</ul>\n</li>\n<li><a href=\"#14-longest-common-prefix\">14-Longest Common Prefix</a><ul>\n<li><a href=\"#horizontal-scanning\">Horizontal Scanning</a></li>\n<li><a href=\"#vertical-scanning\">Vertical Scanning</a></li>\n<li><a href=\"#divide-and-conquer\">Divide and Conquer</a></li>\n<li><a href=\"#binary-search\">Binary Search</a></li>\n<li><a href=\"#further-thoughts\">Further Thoughts</a></li>\n</ul>\n</li>\n<li><a href=\"#15-3sum\">15-3Sum</a><ul>\n<li><a href=\"#sorted-array\">Sorted Array</a></li>\n</ul>\n</li>\n<li><a href=\"#16-3sum-closest\">16-3Sum Closest</a><ul>\n<li><a href=\"#3-pointers\">3 Pointers</a></li>\n</ul>\n</li>\n<li><a href=\"#17-letter-combinations-of-a-phone-number\">17-Letter Combinations of a Phone Number</a><ul>\n<li><a href=\"#backtracking\">Backtracking</a></li>\n<li><a href=\"#first-in-first-out-fifo-queue\">First In First Out (FIFO) Queue</a></li>\n</ul>\n</li>\n<li><a href=\"#18-4sum\">18-4Sum</a><ul>\n<li><a href=\"#sorted-array-1\">Sorted Array</a></li>\n</ul>\n</li>\n<li><a href=\"#19-remove-nth-node-from-end-of-list\">19-Remove Nth Node From End of List</a><ul>\n<li><a href=\"#two-pass-algorithm\">Two Pass Algorithm</a></li>\n<li><a href=\"#one-pass-algorithm\">One Pass Algorithm</a></li>\n</ul>\n</li>\n<li><a href=\"#20-valid-parentheses\">20-Valid Parentheses</a><ul>\n<li><a href=\"#counting-method\">Counting method</a></li>\n<li><a href=\"#stacks\">Stacks</a></li>\n</ul>\n</li>\n<li><a href=\"#21-merge-two-sorted-lists\">21-Merge Two Sorted Lists</a><ul>\n<li><a href=\"#recursive\">Recursive</a></li>\n<li><a href=\"#non-recursive-1\">Non-Recursive</a></li>\n</ul>\n</li>\n<li><a href=\"#22-generate-parentheses\">22-Generate Parentheses</a><ul>\n<li><a href=\"#brute-force-4\">Brute Force</a></li>\n<li><a href=\"#backtracking-1\">Backtracking</a></li>\n<li><a href=\"#closure-number\">Closure Number</a></li>\n</ul>\n</li>\n<li><a href=\"#23-merge-k-sorted-lists\">23-Merge k Sorted Lists</a><ul>\n<li><a href=\"#brute-force-5\">Brute Force</a></li>\n</ul>\n</li>\n<li><a href=\"#146-lru-cache\">146-LRU Cache</a></li>\n</ul>\n<p><a name=\"twoSum\"></a></p>\n<h1 id=\"1-Two-Sum\"><a href=\"#1-Two-Sum\" class=\"headerlink\" title=\"1-Two Sum\"></a>1-Two Sum</h1><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.<br>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p>\n<p>Example:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given nums = [2, 7, 11, 15], target = 9,</span><br><span class=\"line\"></span><br><span class=\"line\">Because nums[0] + nums[1] = 2 + 7 = 9,</span><br><span class=\"line\">return [0, 1].</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"twoSumBruteForce\"></a></p>\n<h2 id=\"Brute-Force\"><a href=\"#Brute-Force\" class=\"headerlink\" title=\"Brute Force\"></a>Brute Force</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] twoSum(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;nums.size; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>;j&lt;nums.length;j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (nums[j]==target-nums[i])&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;i,j&#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;No two sum solution&quot;</span>);</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p><strong>Complexity Analysis</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Time complexity:   O(n^2)       we have a nested loop </span><br><span class=\"line\">* Space complexity:  O(1) \t  we do not allocate any additional memory</span><br></pre></td></tr></table></figure>\n<p><a name=\"twoSumOnePassHashTable\"></a></p>\n<h2 id=\"One-Pass-Hash-Table\"><a href=\"#One-Pass-Hash-Table\" class=\"headerlink\" title=\"One Pass Hash Table\"></a>One Pass Hash Table</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] twoSum(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">\tMap&lt;Integer, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;nums.length; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> complement=target-nums[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (map.containsKey(complement))&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;map.get(complement),i&#125;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmap.put(nums[i],i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;No two sum solution&quot;</span>); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Time complexity:   O(n)\t\teach lookup in the hash table only requires O(1) time</span><br><span class=\"line\">* Space complexity:  O(n)\t\twe require additional space for the hash table which stores at most n</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"addTwoNumbers\"></a></p>\n<h1 id=\"2-Add-Two-Numbers\"><a href=\"#2-Add-Two-Numbers\" class=\"headerlink\" title=\"2-Add Two Numbers\"></a>2-Add Two Numbers</h1><p>Given two non-empty linked lists representing two non-negative integers with the digits stored in<br>reverse order and each node containing a single digit, add the two numbers and return as a linked list</p>\n<p>Example: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4) </span><br><span class=\"line\">Output 7 -&gt; 0 -&gt; 8 </span><br><span class=\"line\"></span><br><span class=\"line\">342 + 465 = 807</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br><a name=\"addTwoNumbersElementaryMath\"></a></p>\n<h2 id=\"Elementary-Math-Solution\"><a href=\"#Elementary-Math-Solution\" class=\"headerlink\" title=\"Elementary Math Solution\"></a>Elementary Math Solution</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Definition for singly-linked list.</span></span><br><span class=\"line\"><span class=\"comment\"> * public class ListNode &#123;</span></span><br><span class=\"line\"><span class=\"comment\"> *     int val;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode next;</span></span><br><span class=\"line\"><span class=\"comment\"> *     ListNode(int x) &#123; val = x; &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#125;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ListNode <span class=\"title function_\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class=\"line\">        ListNode dummyHead= <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>); </span><br><span class=\"line\">        ListNode p=l1, q=l2, curr=dummyHead; </span><br><span class=\"line\">        <span class=\"type\">int</span> carry=<span class=\"number\">0</span>; </span><br><span class=\"line\">        <span class=\"keyword\">while</span> (p!=<span class=\"literal\">null</span>||q!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x= (p!=<span class=\"literal\">null</span>) ? p.val :<span class=\"number\">0</span>; <span class=\"comment\">//if (p!=null) then x contains p.val</span></span><br><span class=\"line\">            <span class=\"type\">int</span> y= (q!=<span class=\"literal\">null</span>) ? q.val :<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> sum=carry+x+y;</span><br><span class=\"line\">            carry=sum/<span class=\"number\">10</span>;</span><br><span class=\"line\">            curr.next=<span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(sum%<span class=\"number\">10</span>);</span><br><span class=\"line\">            curr=curr.next; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p!=<span class=\"literal\">null</span>) p=p.next; </span><br><span class=\"line\">            <span class=\"keyword\">if</span> (q!=<span class=\"literal\">null</span>) q=q.next; </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (carry&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            curr.next= <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(carry);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> dummyHead.next; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity analysis</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Time Complexity:  O(max(m,n))         depends on the lengths of the two linked lists </span><br><span class=\"line\">* Space Complexity: O(max(m,n))\t\tthe maximum length of the new list is max(m,n)+1</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"substringNoRepeat\"></a></p>\n<h1 id=\"3-Substring-No-Repeat\"><a href=\"#3-Substring-No-Repeat\" class=\"headerlink\" title=\"3-Substring No Repeat\"></a>3-Substring No Repeat</h1><p>Longest Substring Without Repeating Characters </p>\n<p>Given a string find the length of the longest substring without repeating characters. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example</span><br><span class=\"line\">Input: \t\t&quot;abcabcbb&quot;</span><br><span class=\"line\">Output:\t\t3</span><br><span class=\"line\">Explanation:\tThe answer is &quot;abc&quot;, with the length of 3</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2</span><br><span class=\"line\">Input:\t\t&quot;bbbbb&quot;</span><br><span class=\"line\">Output:\t\t1</span><br><span class=\"line\">Explanation:\tThe answer is &quot;b&quot;, with the length of 1</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 3</span><br><span class=\"line\">Input:\t\t&quot;pwwkew&quot;</span><br><span class=\"line\">Output:\t\t3</span><br><span class=\"line\">Explanation: \tThe answer is &quot;wke&quot;, with the length of 3. Note that the answer must be a substring</span><br><span class=\"line\">\t\t&quot;pwke&quot; is a subsequence and not a substring </span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"substringNoRepeatBruteForce\"></a></p>\n<h2 id=\"Brute-Force-1\"><a href=\"#Brute-Force-1\" class=\"headerlink\" title=\"Brute Force\"></a>Brute Force</h2><p><em>Algorithm</em> </p>\n<p>Suppose we have a function ‚Äúboolean allUnique(String substring)‚Äù which returns true if all the<br>characters in the substring are unique and false otherwise. We can iterate through all the possible<br>substrings of the given string s and call the function allUnique. If it turns out to be true, then we<br>update our answer of the maximum length of substring without duplicate characters. </p>\n<p>To enumerate all substrings of a given string we enumerate the start and end indices of them. Suppose<br>the start and end indices are i and j respectively. Then we have 0 &lt;&#x3D; i &lt;&#x3D; j &lt;&#x3D; n. Thus using two<br>nested loops with i from 0 to n-1 and j from i+1 to n, we can enumerate all the substrings of s</p>\n<p>To check if one string has duplicate characters we can use a set. We iterate through all the<br>characters in the string and put them into the set one by one. Before putting one character, we check<br>if the set already contains it. If so we return false and after the loop we return true.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i + <span class=\"number\">1</span>; j &lt;= n; j++)</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (allUnique(s, i, j)) ans = Math.max(ans, j - i);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">allUnique</span><span class=\"params\">(String s, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        Set&lt;Character&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start; i &lt; end; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Character</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (set.contains(ch)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            set.add(ch);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* Time Complexity:   O(n^3)\t\tVerifying if characters in   [i,j) are unique requires us to scan all of</span><br><span class=\"line\">\t\t\t\t\tthem which would cost O(j-i) time. </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tFor a given i, the sum of time costed by each j -&gt; [i+1,n] is </span><br><span class=\"line\">\t\t\t\t\t&quot;Summation from i+1 to n O(j-1)&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\tThus, the sum of all the time consumption is: </span><br><span class=\"line\">\t\t\t\t\tO(summation from 0 to n-1(summation from j=i+1 to n (j-1))) </span><br><span class=\"line\">\t\t\t\t\tO(summation from i=0 to n-1(1+n-i)(n-i)/2)) = O(n^3)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t*Note that the sum of all numbers up to n 1+2+3+...+n = n(n+1)/2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">* Space Complexity:  O(min(n,m))\tWe require O(k) space for checking a substring has no duplicate </span><br><span class=\"line\">\t\t\t\t\tcharacters, where k is the size of the set. The size of the Set is </span><br><span class=\"line\">\t\t\t\t\tupper bounded by the size of the string n amd the size of the charset</span><br><span class=\"line\">\t\t\t\t\tor alphabet m </span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"substringNoRepeatSlidingWindow\"></a></p>\n<h2 id=\"Sliding-Window\"><a href=\"#Sliding-Window\" class=\"headerlink\" title=\"Sliding Window\"></a>Sliding Window</h2><p>A sliding window is an abstract concept commonly used in array&#x2F;string problems. A window is a range of<br>elements in the array&#x2F;string which usually defined by the start and end indices</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ex. [i,j) left-closed, right-open</span><br></pre></td></tr></table></figure>\n<p>A sliding window is a window that slides its two boundaries in a certain direction, for example if we<br>slide [i,j) to the right by 1 element, then it becomes [i+1, j+1) - left closed, right open.</p>\n<p>Sliding Window approach, whenever we are looking at a section on an array usual to perform calculations<br>we don‚Äôt need to completely recalculate everything for every section of the array. Usually we can use<br>the value obtained from another section of the array to determine something about this section of the<br>array. For example if we are calculating the sum of sections of an array we can use the previously<br>calculated value of a section to determine the sum of an adjacent section in the array. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ex. 1 2 3 4 5 6 7 8 </span><br></pre></td></tr></table></figure>\n<p>If we calculate the first section of four values we get 1+2+3+4 &#x3D; 10 , then to calculate the next section<br>2+3+4+5 we can just take our first section (window_sum) and perform the operation: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window_sum-first entry + last entry = 10-1+5= 14</span><br></pre></td></tr></table></figure>\n<p>So essentially for the window sliding technique we use what we know about an existing window to<br>determine properties for another window. </p>\n<p><br><br><br><em>Algorithm</em></p>\n<p>In the brute force approach, we repeatedly check a substring to see if it has duplicate characters but<br>this is unnecessary. If a substring from index i to j-1 is already checked to have no duplicate<br>characters we only need to check if s[j] is already in the substring. </p>\n<p>To check if a character is already in the substring we can scan the substring which leads to an O(n^2)<br>algorithm but we can improve on this runtime using a HashSet as a sliding window to check if a<br>character exists in the current set O(1). </p>\n<p>We use a HashSet to store the characters in the current window [i,j) and then we slide the index j to<br>the right, if it is not in the HashSet, we slide j further until s[j] is already in the HashSet. At<br>this point we found the maximum size of substrings without duplicate characters starting with index i.<br>If we do this for all i, then we obtain our answer. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">        Set&lt;Character&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">ans</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// try to extend the range [i, j]</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!set.contains(s.charAt(j)))&#123;</span><br><span class=\"line\">                set.add(s.charAt(j++));</span><br><span class=\"line\">                ans = Math.max(ans, j - i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                set.remove(s.charAt(i++));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time complexity:\tO(2n)=O(n)\tWorst case each character will be visited twice by i and j</span><br><span class=\"line\"></span><br><span class=\"line\">Space complexity: \tO(min(m,n))\tSame as the brute force method, we need O(k) space for the </span><br><span class=\"line\">\t\t\t\t\tsliding window where k is the size of the set. The size of the</span><br><span class=\"line\">\t\t\t\t\tset is bounded by the size of the string n and the size of the</span><br><span class=\"line\">\t\t\t\t\tcharset/alphabet m</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br><a name=\"substringNoRepeatOptimized\"></a></p>\n<h2 id=\"Sliding-Window-Optimized\"><a href=\"#Sliding-Window-Optimized\" class=\"headerlink\" title=\"Sliding Window Optimized\"></a>Sliding Window Optimized</h2><p>The previously discussed sliding window approach requires at most 2n steps and this could in fact be<br>optimized even further to require only n steps. Instead of using a set to tell if a character exists or<br>not, we could define a mapping of the characters to its index. Then we can skip the characters<br>immediately when we found a repeated character </p>\n<p>If s[j] has a duplicate in the range [i , j) with index j‚Äô, we don‚Äôt need to increase i little be little<br>we can just skip all the elements in the range [i , j‚Äô] and let i be j‚Äô+1 directly </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> s.length(), ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Map&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;(); <span class=\"comment\">// current index of character</span></span><br><span class=\"line\">        <span class=\"comment\">// try to extend the range [i, j]</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, i = <span class=\"number\">0</span>; j &lt; n; j++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (map.containsKey(s.charAt(j))) &#123;</span><br><span class=\"line\">                i = Math.max(map.get(s.charAt(j)), i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ans = Math.max(ans, j - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">            map.put(s.charAt(j), j + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"medianofTwoSortedArrays\"></a></p>\n<h1 id=\"4-Median-of-Two-Sorted-Arrays\"><a href=\"#4-Median-of-Two-Sorted-Arrays\" class=\"headerlink\" title=\"4-Median of Two Sorted Arrays\"></a>4-Median of Two Sorted Arrays</h1><p>There are two sorted arrays num1 and num2 of size m and n respectively. Find the median of the two<br>sorted arrays. The overall run time complexity should be O(log (m+n)). You may assume nums1 and nums2<br>cannot be both empty. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example </span><br><span class=\"line\"></span><br><span class=\"line\">nums1 = [1, 3] </span><br><span class=\"line\">nums2 = [2]</span><br><span class=\"line\"></span><br><span class=\"line\">The median is 2.0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2</span><br><span class=\"line\"></span><br><span class=\"line\">nums1= [1, 2] </span><br><span class=\"line\">nums2= [3, 4] </span><br><span class=\"line\"></span><br><span class=\"line\">The median is (2+3)/2 = 2.5</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br><a name=\"medianofTwoSortedArraysRecursiveApproach\"></a></p>\n<h2 id=\"Recursive-Approach\"><a href=\"#Recursive-Approach\" class=\"headerlink\" title=\"Recursive Approach\"></a>Recursive Approach</h2><p>In statistics the median is used for dividing a set into two equal length subsets with one set being<br>always greater than the other set. To approach this problem first we cut A into two parts at a random<br>position i: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">       left_A                |           right_A </span><br><span class=\"line\"></span><br><span class=\"line\">A[0], A[1], ... , A[i-1]         A[i], A[i+1], ... , A[m-1]</span><br></pre></td></tr></table></figure>\n\n<p>Since A has m elements, there are m+1 kinds of cutting as i can range from 0-m. We can also see that<br>left_A is empty when i is zero and right_A is empty when i&#x3D;m</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">len(left_A) = i and len(right_A)= m-i</span><br></pre></td></tr></table></figure>\n\n<p>We can similarly cut B into two parts at a random position j: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">left_B\t\t\t|\tright_B</span><br><span class=\"line\"></span><br><span class=\"line\"> B[0], B[1], ... , B[j-1]\t   B[j], B[j+1], ... , B[n-1]</span><br></pre></td></tr></table></figure>\n<p>Now if we put left_A and left_B into one set and put right_A and right_B into another set and name<br>them left_part and right_part, then we get</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">left_part\t\t|\tright_part</span><br><span class=\"line\"> A[0], A[1], ... , A[i-1]\t  A[i], A[i+1], ... , A[m-1]</span><br><span class=\"line\"> B[0], B[1], ... , B[j-1]\t  B[j], B[j+1], ... , B[n-1]</span><br></pre></td></tr></table></figure>\n\n<p>If we can ensure that </p>\n<ol>\n<li>the len(left_part) &#x3D; len(right_part)</li>\n<li>max(left_part) &lt;&#x3D; min(right_part)</li>\n</ol>\n<p>then we divide all the elements in {A,B} into two parts with equal length and one part is always<br>greater than the other. Then </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">median= (max(left_part)+min(right_part))/2</span><br></pre></td></tr></table></figure>\n<p>To ensure these two conditions, we need to ensure: </p>\n<ol>\n<li>i+j&#x3D; m-i+n-j (or: m-i+n-j+1) if n&gt;m, we just need to set i&#x3D;0~m, j&#x3D; (m+n+1)&#x2F;2 - i</li>\n<li>B[j-1]&lt;&#x3D;A[i] and A[i-1]&lt;&#x3D;B[j]</li>\n</ol>\n<p>So, all we need to do is search for i in [0,m] to find an object i such that<br>B[j-1]&lt;&#x3D;A[i] and A[i-1]&lt;&#x3D;B[j] where j&#x3D;(m+n+1)&#x2F;2 -i</p>\n<p>Then we perform a binary search following the steps described below: </p>\n<ol>\n<li>Set imin&#x3D;0, imax&#x3D;0, then start searching in [imin, imax]</li>\n<li>Set i&#x3D;(imin+imax)&#x2F;2 , j&#x3D;(m+n+1)&#x2F;2 - i</li>\n<li>Now we have len(left_part) &#x3D; len(right_part) and there are only 3 more situations which we may<br>encounter:</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- B[j-1] &lt;= A[i] and A[i-1]&lt;=B[j] </span><br><span class=\"line\">  This means that we have found the object i, so we can stop searching</span><br><span class=\"line\"></span><br><span class=\"line\">- B[j-1] &gt; A[i]</span><br><span class=\"line\">  Means A[i] is too small, we must adjust i to get B[j-1]&lt;=A[i] so we increase i because this will</span><br><span class=\"line\">  cuase j to be decreased. We cannot decrease i because when i is decreased, j will be increased</span><br><span class=\"line\">  so B[j-1] is increased and A[i] is decreased (B[j-1]&lt;= A[i] will never be satisfied)</span><br><span class=\"line\"></span><br><span class=\"line\">- A[i-1] &gt; B[j] </span><br><span class=\"line\">  Means A[i-1] is too big and thus we must decrease i to get A[i-1]&lt;=B[j]. In order to do that we </span><br><span class=\"line\">  must adjust the searching range to [imin, i-1] so we set imax=i-1 and go back to step 2</span><br></pre></td></tr></table></figure>\n<p>When the object i is found, then the media is: </p>\n<p> max(A[i-1],B[j-1]), when m+n is odd<br>(max(A[i-1],B[j-1])+min(A[i],B[j]))&#x2F;2, when m+n is even</p>\n<p>Next is to consider the edge values i&#x3D;0, i&#x3D;m, j&#x3D;0, j&#x3D;n where A[i-1], B[j-1], A[i], B[j] may not exist</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">double</span> <span class=\"title function_\">findMedianSortedArrays</span><span class=\"params\">(<span class=\"type\">int</span>[] A, <span class=\"type\">int</span>[] B)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> m=A.length;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> n=B.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (m&gt;n) &#123;   \t<span class=\"comment\">//ensuring that m&lt;=n</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span>[] temp=A; A=B; B=temp;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> tmp=m; m=n; n=tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> iMin=<span class=\"number\">0</span>, iMax=m, halfLen=(m+n+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (iMin&lt;=iMax) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> i=(iMin+iMax)/<span class=\"number\">2</span></span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> j= halfLen - i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i&lt;iMax &amp;&amp; B[j-<span class=\"number\">1</span>] &gt; A[i])&#123;</span><br><span class=\"line\">\t\t\t\tiMin=i+<span class=\"number\">1</span>; <span class=\"comment\">//i is too small</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i&gt;iMin &amp;&amp; A[i-<span class=\"number\">1</span>]&gt;B[j]) &#123;</span><br><span class=\"line\">\t\t\t\tiMax=i-<span class=\"number\">1</span>; <span class=\"comment\">//i is too big</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123; <span class=\"comment\">//we have found the object i </span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> maxLeft=<span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tmaxLeft=B[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tmaxLeft=A[i-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tmaxLeft=Math.max(A[i-<span class=\"number\">1</span>], B[j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> ((m+n)%<span class=\"number\">2</span> ==<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> maxLeft;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> minRIght=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i==m) &#123;</span><br><span class=\"line\">\t\t\t\t\tminRight=B[j];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (j==n) &#123;</span><br><span class=\"line\">\t\t\t\t\tminRight=A[i];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tminRight=Math.min(B[j], A[i]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> (maxLeft+minRight)/<span class=\"number\">2.0</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: O(log(min(m,n)))\tAt first the searching range is [0,m] and the length of this </span><br><span class=\"line\">\t\t\t\t\tsearching range will be reduced by half after each loop so we</span><br><span class=\"line\">\t\t\t\t\tonly need log(m) loops. Since we do constant operations in </span><br><span class=\"line\">\t\t\t\t\teach loop the time complexity is O(log(m) and since m&lt;=n the</span><br><span class=\"line\">\t\t\t\t\ttime complexity is O(log(min(m,n))</span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: O(1)\t\t\tWe only need constant memory to store 9 local variables so the</span><br><span class=\"line\">\t\t\t\t\tspace complexity is O(1)</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"longestPalindromicSubstring\"></a></p>\n<h1 id=\"5-Longest-Palindromic-Substring\"><a href=\"#5-Longest-Palindromic-Substring\" class=\"headerlink\" title=\"5-Longest Palindromic Substring\"></a>5-Longest Palindromic Substring</h1><p>Given a string s, find the longest palindromic substring in s. You may assume that the maximum length<br>of s is 1000. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;babad&quot; </span><br><span class=\"line\">Output: &quot;bab&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">Note: &quot;aba&quot; is also a valid answer </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;cbbd&quot;</span><br><span class=\"line\">Output: &quot;bb&quot; </span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"longestPalindromicSubstringLongestCommonSubstring\"></a></p>\n<h2 id=\"Longest-Common-Substring\"><a href=\"#Longest-Common-Substring\" class=\"headerlink\" title=\"Longest Common Substring\"></a>Longest Common Substring</h2><p>Some people will be tempted to come up with this quick solution which is unforunately flawed, ‚Äúreverse<br>S and become S‚Äô. Find the longest common substring between S and S‚Äô and that will be the longest<br>palindromic substring.‚Äù This will work with some examples but there are some cases where the longest<br>common substring is not a valid palindrome. </p>\n<pre><code>Ex. S=&quot;abacdfgdcaba&quot;, S&#39;=&quot;abacdgfdcaba&quot; \t\n</code></pre>\n<p>The longest common substring between S and S‚Äô is ‚Äúabacd‚Äù and clearly this is not a valid<br>    palindrome</p>\n<p>We can solve this problem however by checking if the substring‚Äôs indices are the same as the reversed<br>substring‚Äôs original indices each time we find a longest common substring. If it is, then we attempt<br>to update the longest palindrome found so far, if not we skip this and find the next candidate</p>\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: O(n^2) </span><br><span class=\"line\">Space Complexity: O(n^2) </span><br></pre></td></tr></table></figure>\n<p><br><br><br><a name=\"longestPalindromicSubstringBruteForce\"></a></p>\n<h2 id=\"Brute-Force-2\"><a href=\"#Brute-Force-2\" class=\"headerlink\" title=\"Brute Force\"></a>Brute Force</h2><p>The obvious brute force solution is to pick all possible starting and ending position for a substring<br>and verify if it is a palindrome </p>\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: O(n^3)\t\tIf n is the length of the input string, there are a total of </span><br><span class=\"line\">\t\t\t\t(n 2) = n(n-1)/2 substrings and since verifying each substring takes </span><br><span class=\"line\">\t\t\t\tO(n) time, the run time complexity is O(n^3)</span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: O(1) </span><br></pre></td></tr></table></figure>\n<p><br><br><br><a name=\"longestPalindromicSubstringDynamicProgramming\"></a></p>\n<h2 id=\"Dynamic-Programming\"><a href=\"#Dynamic-Programming\" class=\"headerlink\" title=\"Dynamic Programming\"></a>Dynamic Programming</h2><p>We can improve on the brute force solution by avoid some unnecessary re-computation while validating<br>palidromes. Consider the word ‚Äúababa‚Äù, if we already know that ‚Äúbab‚Äù is a palindrome then we can<br>determine that ababa is a palindrome by noticing that the two left and right letters connected to bab<br>are the same. </p>\n<p>This yields a straight forward dynamic programming solution where we initialize the one and two letters<br>palindromes and then work our way up finding all three letters palindromes and so on.</p>\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: \tO(n^2)\t</span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: \tO(n^2)\tUsing O(n^2) space to store the table </span><br></pre></td></tr></table></figure>\n<p><br><br><br><a name=\"longestPalindromicSubstringExpandAroundCenter\"></a></p>\n<h2 id=\"Expand-Around-Center\"><a href=\"#Expand-Around-Center\" class=\"headerlink\" title=\"Expand Around Center\"></a>Expand Around Center</h2><p>This approach allows us to solve this problem in O(n^2) time using only constant space complexity. We<br>observe that a palindrome mirrors around its enter and therefore a palindrome can be expanded from its<br>center and there are only 2n-1 such centers (for palindromes with an even number of letters like<br>‚Äúabba‚Äù its center is in between two letters).</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">longestPalindrome</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s==<span class=\"literal\">null</span> || s.length() &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;     <span class=\"comment\">//edge case </span></span><br><span class=\"line\">\t<span class=\"type\">int</span> start=<span class=\"number\">0</span>, end=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;s.length(); i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> len1=expandAroundCenter(s,i,i);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> len2=expandAroundCenter(s,i,i+<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> len=Math.max(len1,len2);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (len&gt;end-start) &#123;</span><br><span class=\"line\">\t\t\tstart= i-(len-<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\tend=i+len/<span class=\"number\">2</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s.substring(start,end+<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">expandAroundCenter</span><span class=\"params\">(String s, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> L=left, R=right;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(L&gt;=<span class=\"number\">0</span> &amp;&amp; R&lt;s.length() &amp;&amp; s.charAt(L)==s.charAt(R)) &#123;</span><br><span class=\"line\">\t\tL--;</span><br><span class=\"line\">\t\tR++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> R-L-<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"longestPalindromicSubstringManacherAlgorithm\"></a></p>\n<h2 id=\"Manacher‚Äôs-Algorithm\"><a href=\"#Manacher‚Äôs-Algorithm\" class=\"headerlink\" title=\"Manacher‚Äôs Algorithm\"></a>Manacher‚Äôs Algorithm</h2><p>There is an O(n) algorithm called Manacher‚Äôs algorithm, however, it is a non-trivial algorithm and no<br>one would expect you to come up with this algorithm in a 45 minute coding session</p>\n<p><br><br><br></p>\n<hr>\n<p><a name=\"zigZagConversion\"></a></p>\n<h1 id=\"6-ZigZag-Conversion\"><a href=\"#6-ZigZag-Conversion\" class=\"headerlink\" title=\"6-ZigZag Conversion\"></a>6-ZigZag Conversion</h1><p>The string ‚ÄúPAYPALISHIRING‚Äù is written in a zigzag pattern on a given number of rows like this: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">P   A   H   N</span><br><span class=\"line\">A P L S I I G</span><br><span class=\"line\">Y   I   R</span><br></pre></td></tr></table></figure>\n<p>And then read line by line: ‚ÄúPAHNAPLSIIGYIR‚Äù. Write a code that will take a string and make this<br>conversion given a number of rows: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: s=&quot;PAYPALISHIRING&quot;, numRows=3</span><br><span class=\"line\">Output: &quot;PAHNAPLSIIGYIR&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2:</span><br><span class=\"line\"></span><br><span class=\"line\">Input: s=&quot;PAYPALISHIRING&quot;, numRows=4</span><br><span class=\"line\">Output: &quot;PINALSIGYAHRPI&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Explanation:</span><br><span class=\"line\"></span><br><span class=\"line\">P           I          N</span><br><span class=\"line\">A       L   S      I   G</span><br><span class=\"line\">Y   A       H   R</span><br><span class=\"line\">P           I</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"zigZagConversionSortbyRow\"></a></p>\n<h2 id=\"Sort-by-Row\"><a href=\"#Sort-by-Row\" class=\"headerlink\" title=\"Sort by Row\"></a>Sort by Row</h2><p>By iterating through the string from left to right we can easily determine which row in the Zig-Zag<br>pattern that a character belongs to</p>\n<p><br><br><br><em>Algorithm</em></p>\n<p>We can use min(numRows,len(s)) lists to represent the non-empty rows of the Zig-Zag Pattern.<br>Iterate through s from left to right appending each character to the appropriate row. The appropriate<br>row can be tracked using two variables: the current row and the current direction. </p>\n<p>The current direction only changes when we moved to the topmost row or moved down to the bottommost<br>row </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">convert</span><span class=\"params\">(String s, <span class=\"type\">int</span> numRows)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (numRows==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> s;\t\t<span class=\"comment\">//if there is only one row return string</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tList&lt;StringBuilder&gt; rows=<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;Math.min(numRows, s.length()); i++)&#123;</span><br><span class=\"line\">\t\t\trows.add(<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> curRow=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"type\">boolean</span> goingDown=<span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">char</span> c: s.toCharArray()) &#123;</span><br><span class=\"line\">\t\t\trows.get(curRow).append(c);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (curRow==<span class=\"number\">0</span> || curRow==numRows-<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\tgoingDown=!goingDown;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcurRow+=goingDown ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tStringBuilder ret= <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(StringBuilder row:rows) &#123;</span><br><span class=\"line\">\t\t\tret.append(row);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity:  O(n)\twhere n==len(s)</span><br><span class=\"line\">Space Complexity: O(n)</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"zigZagConversionVisitbyRow\"></a></p>\n<h2 id=\"Visit-by-Row\"><a href=\"#Visit-by-Row\" class=\"headerlink\" title=\"Visit by Row\"></a>Visit by Row</h2><p>Visit the characters in the same order as reading the Zig-Zag pattern line by line</p>\n<p><br><br><br><em>Algorithm</em></p>\n<p>Visit all characters in row 0 first, then row 1, then row 2, and so on.<br>For all whole numbers k,<br>    * characters in row 0 are located at indexes  k*(2*numRows-2)<br>    * characters in row numRows -1 are located at indexes  k*(2*numRows-2)+ numRows -1<br>    * characters in inner row i are located at indexes  k*(2*numRows-2)+i and (k+1)(2*numRows-2)-i</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> String <span class=\"title function_\">convert</span><span class=\"params\">(String s, <span class=\"type\">int</span> numRows)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (numRows==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> s; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\tStringBuilder ret=<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> n=s.length();</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> cycleLen= <span class=\"number\">2</span>* numRows -<span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;numRows; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>; j+<span class=\"number\">1</span>&lt;n; j+= cycleLen) &#123;</span><br><span class=\"line\">\t\t\t\tret.append(s.charAt(j+i));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (i!=<span class=\"number\">0</span> &amp;&amp; i!=numROws-<span class=\"number\">1</span> &amp;&amp; j+cycleLen-i&lt;n) &#123;</span><br><span class=\"line\">\t\t\t\t\tret.append(s.charAt(j+cycleLen-i));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ret.toString();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: O(n)\twhere n==len(s) Each index is visited once</span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: O(n) \tC++ implementation can achieve O(1) if the return string is not considered </span><br><span class=\"line\">\t\t\textra space</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"reverseInteger\"></a></p>\n<h1 id=\"7-Reverse-Integer\"><a href=\"#7-Reverse-Integer\" class=\"headerlink\" title=\"7-Reverse Integer\"></a>7-Reverse Integer</h1><p>Given a 32- bit signed integer, reverse digits of an integer. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: 123</span><br><span class=\"line\">Output: 321</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: -123</span><br><span class=\"line\">Output: -321</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 3: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: 120 </span><br><span class=\"line\">Output: 21</span><br></pre></td></tr></table></figure>\n\n<p>For the purpose of this problem assume that your function returns 0 when the reversed integer overflows</p>\n<p><br><br><br><a name=\"reverseIntegerPopandPush\"></a></p>\n<h2 id=\"Pop-and-Push-Digits-and-Check-Before-Overflow\"><a href=\"#Pop-and-Push-Digits-and-Check-Before-Overflow\" class=\"headerlink\" title=\"Pop and Push Digits and Check Before Overflow\"></a>Pop and Push Digits and Check Before Overflow</h2><p>We can build up the reverse integer one digit at and time and before doing so we can check whether or<br>not appedning another digit would cause overflow </p>\n<p><br><br><br><em>Algorithm</em></p>\n<p>Reversing an integer can be done similarly to reversing a string. We want to repeatedly ‚Äúpop‚Äù the last<br>digit off of x and push it to the back of the rev so that in the end rev is the reverse of x. </p>\n<p>To push and pop digits without the help of some auxiliar stack&#x2F;array we can use math </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//pop operation: </span><br><span class=\"line\">pop = x%10; </span><br><span class=\"line\">x/=10;</span><br><span class=\"line\"></span><br><span class=\"line\">//push operation:</span><br><span class=\"line\">temp=rev*10+pop;</span><br><span class=\"line\">rev =temp;</span><br></pre></td></tr></table></figure>\n\n<p>This statement is dangerous however as the statement temp&#x3D;rev*10+pop may cause an overflow and luckily<br>it is easy to check beforehand whether or not this statement would cause an overflow. </p>\n<ol>\n<li>If temp&#x3D;rev*10+pop causes an overflow, then rev&gt;&#x3D;INTMAX&#x2F;10</li>\n<li>If rev&gt; INTMAX&#x2F;10, then temp&#x3D;rev*10+pop is guaranteed to overflow</li>\n<li>if rev&#x3D;&#x3D;INTMAX&#x2F;10, then temp&#x3D;rev*10 + pop will overflow if an only if pop&gt;7</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">reverse</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> rev=<span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (x!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> pop=x%<span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\tx/=<span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rev&gt;Integer.MAX_VALUE/<span class=\"number\">10</span>||(rev==Integer.MAX_VALUE/<span class=\"number\">10</span> &amp;&amp; pop&gt;<span class=\"number\">7</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (rev&lt;Integer.MIN_VALUE/<span class=\"number\">10</span>||(rev==Integer.MIN_VALUE/<span class=\"number\">10</span> &amp;&amp; pop&lt;-<span class=\"number\">8</span>)) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\trev=rev*<span class=\"number\">10</span> +pop;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> rev;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity:  O(log(x))\tThere are roughly log10(x) digits in x </span><br><span class=\"line\">Space Complexity: O(1)</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"stringtoInteger\"></a></p>\n<h1 id=\"8-String-to-Integer-atoi\"><a href=\"#8-String-to-Integer-atoi\" class=\"headerlink\" title=\"8-String to Integer (atoi)\"></a>8-String to Integer (atoi)</h1><p>Implement atoi which converts a string to an integer </p>\n<p>The function first discards as many whitespace characters as necessary until the first non-whitespace<br>character is found. Then, starting from this character, takes an optional initial plus or minus sign<br>followed by as many numerical digits as possible and interprets them as a numerical value. </p>\n<p>The string can contain additional characters after those that form the integral number, which are<br>ignored and have no effect on the behavior of this function. </p>\n<p>If the first sequence of non-whitespace characters in str is not a valid integral number, or if no such<br>sequence exits because either str is empty or it contains only whitespace characters, no conversion is<br>performed. </p>\n<p>If no valid conversion could be performed a zero value is returned </p>\n<p>Note: </p>\n<ul>\n<li>only the space character ‚Äò ‚Äò is considered as whitespace character </li>\n<li>assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [-2^31, 2^31-1]. If the numerical value is out of the range of representable values, INT_MAX (2^31-1) or INT_MIN (-2^31) is returned</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;42&quot;</span><br><span class=\"line\">Output: 42</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;      -42&quot; </span><br><span class=\"line\">Output: -42</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 3:</span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;4193 with words &quot;</span><br><span class=\"line\">Output: 4193</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 4: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;words and 987&quot;</span><br><span class=\"line\">Output: 0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 5:</span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;-91283472332&quot;</span><br><span class=\"line\">Output: -2147483648 \t//out of the range of a 32-bit signed integer so INT_MIN is returned</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br><a name=\"stringtoIntegerASCII\"></a></p>\n<h2 id=\"ASCII-Conversion\"><a href=\"#ASCII-Conversion\" class=\"headerlink\" title=\"ASCII Conversion\"></a>ASCII Conversion</h2><p>Recognize that ASCII characters are actually numbers and 0-9 digits are numbers starting from decimal<br>48 (0x30 hexadecimal) </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;0&#x27; is 48</span><br><span class=\"line\">&#x27;1&#x27; is 49</span><br><span class=\"line\">...</span><br><span class=\"line\">&#x27;9&#x27; is 57</span><br></pre></td></tr></table></figure>\n<p>So to get the value of any character digit you can just remove the ‚Äò0‚Äô </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;1&#x27; - &#x27;0&#x27; =&gt; 1</span><br><span class=\"line\">49  -  48 =&gt; 1</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">myAtoi</span><span class=\"params\">(String str)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> index=<span class=\"number\">0</span>, sign=<span class=\"number\">1</span>, total=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//1. Empty string </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (str.length() ==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//2. Remove Spaces </span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(str.charAt(index)==<span class=\"string\">&#x27; &#x27;</span> &amp;&amp; index &lt; str.length())</span><br><span class=\"line\">\t\tindex++;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//3. Handle signs </span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (str.charAt(index)==<span class=\"string\">&#x27;+&#x27;</span> || str.charAt(index)==<span class=\"string\">&#x27;-&#x27;</span>)&#123;</span><br><span class=\"line\">\t\tsign= str.charAt(index) == <span class=\"string\">&#x27;+&#x27;</span> ? <span class=\"number\">1</span>:-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tindex++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//4. COnvert number and avoid overflow</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(index&lt;str.length())&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> digit= str.charAt(index) - <span class=\"string\">&#x27;0&#x27;</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (digit&lt;<span class=\"number\">0</span>||digit&gt;<span class=\"number\">9</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//check if total will overflow after 10 times and add digit</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (Integer.MAX_VALUE/<span class=\"number\">10</span> &lt; total || Integer.MAX_VALUE/<span class=\"number\">10</span> == total </span><br><span class=\"line\">\t\t    &amp;&amp; Integer.MAX_VALUE%<span class=\"number\">10</span>&lt;digit) &#123;    </span><br><span class=\"line\">\t\t    <span class=\"keyword\">return</span> sign==<span class=\"number\">1</span> ? Integer.MAX_VALUE : Integer.MIN_VALUE;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ttotal= <span class=\"number\">10</span>* total+digit;</span><br><span class=\"line\">\t\tindex++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> total*sign;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"palindromeNumber\"></a></p>\n<h1 id=\"9-Palindrome-Number\"><a href=\"#9-Palindrome-Number\" class=\"headerlink\" title=\"9-Palindrome Number\"></a>9-Palindrome Number</h1><p>Determines whether an interger is a palindrome. An integer is a palindrome when it reads the same<br>backward as forward. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: 121</span><br><span class=\"line\">Output: true</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: -121</span><br><span class=\"line\">Output: false </span><br><span class=\"line\">Explanation: \tFrom left to right, it reads -121, meanwhile from right to left it becomes 121- . </span><br><span class=\"line\">\t\tTherefore it is not a palindrome</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 3: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: 10 </span><br><span class=\"line\">Output: false </span><br><span class=\"line\">Explanation: \tReads 01 from right to left. Therefore it is not a palindrome</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br><a name=\"palindromeNumberRevertHalf\"></a></p>\n<h2 id=\"Revert-Half-of-the-Number\"><a href=\"#Revert-Half-of-the-Number\" class=\"headerlink\" title=\"Revert Half of the Number\"></a>Revert Half of the Number</h2><p>A first idea which may come to mind is to convert the number into a string and check if the string is a<br>palindrome but this would require extra non-constant space for creating the string not allowed by the<br>problem description </p>\n<p>Second idea would be reverting the number itself and comparing the number with the original number, if<br>they are the same then the number is a palindrome, however if the reversed number is larger than<br>int.MAX we will hit integer overflow problem. </p>\n<p>To avoid the overflow issue of the reverted number, what if we only revert half of the int number? The<br>reverse of the last half of the palindrome should be the same as the first half of the number if the<br>number is a palindrome. </p>\n<p>If the input is 1221, if we can revert the last part of the number ‚Äú1221‚Äù from ‚Äú21‚Äù to ‚Äú12‚Äù and compare<br>it with the first half of the number ‚Äú12‚Äù, since 12 is the same as 12, we know that the number is a<br>palindrome. </p>\n<p><br><br><br><em>Algorithm</em> </p>\n<p>At the very beginning we can deal with some edge cases. All negative numbers are not palindrome and<br>numbers ending in zero can only be a palindrome if the first digit is also 0 (only 0 satisfies this<br>property) </p>\n<p>Now let‚Äôs think about how to revert the last half of the number. For the number 1221 if we do 1221%10<br>we get the last digit 1. To get the second last digit we divide the number by 10 1221&#x2F;10&#x3D;122 and then<br>we can get the last digit again by doing a modulus by 10, 122%10&#x3D;2. If we multiply the last digit by<br>10 and add the second last digit 1*10+2&#x3D;12 which gives us the reverted number we want. COntinuing this<br>process would give us the reverted number with more digits. </p>\n<p>Next is how do we know that we‚Äôve reached the half of the number?<br>Since we divided the number by 10 and multiplied the reversed number by 10 when the original number is<br>less than the reversed number, it means we‚Äôve gone through half of the number digits. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPalindrome</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x&lt;<span class=\"number\">0</span> || (x%<span class=\"number\">10</span>==<span class=\"number\">0</span> &amp;&amp; x!=<span class=\"number\">0</span>)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> revertedNumber=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (x&gt;revertedNumber)&#123;</span><br><span class=\"line\">            revertedNumber=x%<span class=\"number\">10</span>+revertedNumber*<span class=\"number\">10</span>;</span><br><span class=\"line\">            x/=<span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//when the length is an odd number, we can get rid of the middle digit by </span></span><br><span class=\"line\">        <span class=\"comment\">//revertedNumber/10</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//For example when the input is 12321, at the end of the while loop we get x=12, </span></span><br><span class=\"line\">        <span class=\"comment\">//revertedNumber=123, since the middle digit doesn&#x27;t matter in a palindrome we can</span></span><br><span class=\"line\">        <span class=\"comment\">//simply get rid of it </span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> x==revertedNumber||x==revertedNumber/<span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"regularExpressionMatching\"></a></p>\n<h1 id=\"10-Regular-Expression-Matching\"><a href=\"#10-Regular-Expression-Matching\" class=\"headerlink\" title=\"10-Regular Expression Matching\"></a>10-Regular Expression Matching</h1><p>Given an input string (s) and a pattern (p), implement regular expression matching with support for ‚Äò.‚Äô<br>and ‚Äò*‚Äô</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x27;.&#x27; Matches any single character</span><br><span class=\"line\">&#x27;*&#x27; Matches zero or more of the preceding element </span><br></pre></td></tr></table></figure>\n<p>The matching should cover the entire input string (not partial) </p>\n<p>Note: </p>\n<ul>\n<li>s could be empty and contains only lower case letters a-z</li>\n<li>p could be empty and contains only lower case letters a-z and characters like . or *</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1: </span><br><span class=\"line\"></span><br><span class=\"line\">Input:</span><br><span class=\"line\">\ts=&quot;aa&quot; </span><br><span class=\"line\">\tp=&quot;a&quot; </span><br><span class=\"line\">\tOutput: false </span><br><span class=\"line\">\tExplanation: \t&quot;a&quot; does not match the entire string &quot;aa&quot; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: </span><br><span class=\"line\">\ts=&quot;aa&quot;</span><br><span class=\"line\">\tp=&quot;a*&quot; </span><br><span class=\"line\">\tOutput: true </span><br><span class=\"line\">\tExplanation: \t&#x27;*&#x27; means zero of more of the preceding element, &#x27;a&#x27;. Therefore, by repeating</span><br><span class=\"line\">\t\t\t&#x27;a&#x27; once it becomes &quot;aa&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 3: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: </span><br><span class=\"line\">\ts=&quot;ab&quot; </span><br><span class=\"line\">\tp=&quot;.*&quot; </span><br><span class=\"line\">\tOutput: true </span><br><span class=\"line\">\tExplanation: \t&#x27;.*&#x27; means &quot;zero or more (*) of any character (.)&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 4: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: </span><br><span class=\"line\">\ts=&quot;aab&quot; </span><br><span class=\"line\">\tp=&quot;c*a*b&quot; </span><br><span class=\"line\">\tOutput: true</span><br><span class=\"line\">\tExplanation: \tc can be repeated 0 times, a can be repeated 1 time. Therefore it matches </span><br><span class=\"line\">\t\t\t&quot;aab&quot; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 5: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: </span><br><span class=\"line\">\ts=&quot;mississippi&quot; </span><br><span class=\"line\">\tp=&quot;mis*is*p*.&quot;</span><br><span class=\"line\">\tOutput: false </span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"regularExpressionMatchingRecursion\"></a></p>\n<h2 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h2><p>If there were no Kleene stars (the * wildcard characters for regular expressions), the problem would<br>be easier- we simply check from left to right if each character of the text matches the pattern. When<br>a star is present we may need to check for may different suffixes of the text and see if they match<br>the rest of the pattern. A recursive solution is a straightforward way to represent this relationship</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isMatch</span><span class=\"params\">(String text, String pattern)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pattern.isEmpty()) <span class=\"keyword\">return</span> text.isEmpty(); </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">boolean</span> first_match=(!text.isEmpty() &amp;&amp; </span><br><span class=\"line\">\t\t\t\t    (pattern.charAt(<span class=\"number\">0</span>)==text.charAt(<span class=\"number\">0</span>) || pattern.charAt(<span class=\"number\">0</span>)==<span class=\"string\">&#x27;.&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (pattern.length()&gt;=<span class=\"number\">2</span> &amp;&amp; pattern.charAt(<span class=\"number\">1</span>) ==<span class=\"string\">&#x27;*&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> (isMatch(text,pattern.substring(<span class=\"number\">2</span>))||</span><br><span class=\"line\">\t\t\t       (first_match &amp;&amp; isMatch(text.substring(<span class=\"number\">1</span>),pattern)));</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">//note: pattern.substring(2) returns all of the characters after index 2 of pattern</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> first_match &amp;&amp; isMatch(text.substring(<span class=\"number\">1</span>), pattern.substring(<span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: \tLet T, P be the lengths of the text and the pattern respectively. In the worst</span><br><span class=\"line\">\t\t\tcase, a call to match(text[i:],pattern[2j:]) will be made (i+j i) times, and </span><br><span class=\"line\">\t\t\tstrings of the order O(T-i) and O(P-2*j) will be made. Thus the complexity has</span><br><span class=\"line\">\t\t\tthe order: </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tsummation from i=0 to T * summation from j=0 to P/2 * (i+j i) O(T+P-i-2j).</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tWe can show that this is bounded by O((T+P)2^(T+P/2))</span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity:\tFor every call to match, we will create those strings as described above </span><br><span class=\"line\">\t\t\tpossibly creating duplicates. If memory is not freed, this will also take a</span><br><span class=\"line\">\t\t\ttotal of O((T+P)2^(T+P/2)) space even though there are only order O(T^2+P^2) </span><br><span class=\"line\">\t\t\tunique suffixes of P and T that are actually required </span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"regularExpressionMatchingDynamicProgramming\"></a></p>\n<h2 id=\"Dynamic-Programming-1\"><a href=\"#Dynamic-Programming-1\" class=\"headerlink\" title=\"Dynamic Programming\"></a>Dynamic Programming</h2><p>As the problem has an optimal substructure, it is natural to cache intermediate results. We ask the<br>question dp(i,j): does text[i:] and pattern[j:] match? We can describe our answer in terms of answers<br>to questions involving smaller strings</p>\n<p><br><br><br><em>Algorithm</em> </p>\n<p>We proceed with the same recursion as in Approach 1, except because calls will only ever be made to<br>match(text[i:], pattern[j:]), we use dp(i,j) to handle those calls instead, saving us expensive<br>string-building operations and allowing us to cache the intermediate results </p>\n<p><strong>Java Top-Down Variation</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Result</span> &#123;</span><br><span class=\"line\">\tTRUE, FALSE</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\tResult[][] memo; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isMatch</span><span class=\"params\">(String text, String pattern)</span> &#123; </span><br><span class=\"line\">\t\tmemo=<span class=\"keyword\">new</span> <span class=\"title class_\">Result</span>[text.length() +<span class=\"number\">1</span>][pattern.length() +<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dp(<span class=\"number\">0</span>,<span class=\"number\">0</span>,text,pattern);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">dp</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j, String text, String pattern)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (memo[i][j]!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> memo[i][j]==Result.TRUE;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"type\">boolean</span> ans; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (j==pattern.length())&#123;</span><br><span class=\"line\">\t\t\tans=i==text.length();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">boolean</span> first_match=(i&lt;text.length() &amp;&amp; (pattern.charAt(j) == text.charAt(i) ||</span><br><span class=\"line\">\t\t\t\t\t     patter.charAt(j) == <span class=\"string\">&#x27;.&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (j+<span class=\"number\">1</span>&lt;pattern.length() &amp;&amp; pattern.charAt(j+<span class=\"number\">1</span>)==<span class=\"string\">&#x27;*&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tans=(dp(i,j+<span class=\"number\">1</span>,text,pattern)||first_match&amp;&amp; dp(i+<span class=\"number\">1</span>,j,text,pattern));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tans=first_match &amp;&amp; dp(i+<span class=\"number\">1</span>, j+<span class=\"number\">1</span>, text, pattern); </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmemo[i][j]=ans? Result.TRUE: Result.FALSE; </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: \tLet T, P be the lengths of the text and the pattern respectively. The work </span><br><span class=\"line\">\t\t\tfor every call to dp(i,j) for i=0,...,T; j=0,...,P is done once and it is O(1) \t\t\t\twork. Hence the time complexity is O(TP)</span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity:\tThe only memory we use is the O(TP) boolean entries in our cache. Hence, the </span><br><span class=\"line\">\t\t\tspace complexity is O(TP) </span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"regularExpressionMatchingNonRecursive\"></a></p>\n<h2 id=\"Non-Recursive\"><a href=\"#Non-Recursive\" class=\"headerlink\" title=\"Non-Recursive\"></a>Non-Recursive</h2><p>The recursive programming solutions are pretty confusing so this implementation uses 2D arrays and<br>Dynamic Programming </p>\n<p>The logic works as follows: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. If p.charAt(j) == s.charAt(i) : dp[i][j] = dp[i-1][j-1]; </span><br><span class=\"line\">2. If p.charAt(j) == &#x27;.&#x27; : dp[i][j] = dp[i-1][j-1]; </span><br><span class=\"line\">3. If p.charAt(j) == &#x27;*&#x27;: </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tSubconditions</span><br><span class=\"line\">\t1. If p.charAt(j-1)!= s.charAt(i):dp[i][j]=dp[i][j-2]  \t//in this case a* only counts as empty</span><br><span class=\"line\">\t2. If p.charAt(i-1)== s.charAt(i) or p.charAt(i-1) == &#x27;.&#x27;: </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tdp[i][j] = dp[i-1][j]\t//in this case a* counts as multiple a </span><br><span class=\"line\">\t     or dp[i][j] = dp[i][j-1]\t//in this case a* counts as single a </span><br><span class=\"line\">\t     or dp[i][j] = dp[i][j-2]\t//in this case a* counts as empty </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isMatch</span><span class=\"params\">(String s, String p)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (s==<span class=\"literal\">null</span> || p==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">boolean</span>[][] dp=<span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[s.length()+<span class=\"number\">1</span>][p.length()+<span class=\"number\">1</span>];</span><br><span class=\"line\">\tdp[<span class=\"number\">0</span>][<span class=\"number\">0</span>]=<span class=\"literal\">true</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;p.length(); i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (p.charAt(i)==<span class=\"string\">&#x27;*&#x27;</span> &amp;&amp; dp[<span class=\"number\">0</span>][i-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">\t\t\tdp[<span class=\"number\">0</span>][i+<span class=\"number\">1</span>]=<span class=\"literal\">true</span>; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;s.length();i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">0</span>;j&lt;p.length();j++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p.charAt(j)==<span class=\"string\">&#x27;.&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\tdp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=dp[i][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p.charAt(j)==s.charAt(i))&#123;</span><br><span class=\"line\">\t\t\t\tdp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=dp[i][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (p.charAt(j)==<span class=\"string\">&#x27;*&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (p.charAt(j-<span class=\"number\">1</span>)!=s.charAt(i) &amp;&amp; p.charAt(j-<span class=\"number\">1</span>) !=<span class=\"string\">&#x27;.&#x27;</span>)&#123;</span><br><span class=\"line\">\t\t\t\t\tdp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=dp[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\t\tdp[i+<span class=\"number\">1</span>][j+<span class=\"number\">1</span>]=(dp[i+<span class=\"number\">1</span>][j] || dp[i][j+<span class=\"number\">1</span>] || dp[i+<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dp[s.length()][p.length()];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"containerwiththeMostWater\"></a></p>\n<h1 id=\"11-Container-with-the-Most-Water\"><a href=\"#11-Container-with-the-Most-Water\" class=\"headerlink\" title=\"11-Container with the Most Water\"></a>11-Container with the Most Water</h1><p>Given n non negative integers a1,a2, ‚Ä¶ , an where each represents a point at coordinate (i, ai). n<br>vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two<br>lines, which together with x-axis forns a container such that the container contains the most water. </p>\n<figure class=\"highlight plaintext\"><figcaption><span>The array [1,8,6,2,5,4,8,3,7] would have a max area of water which is 49.</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">      ^\t\t    ^</span><br><span class=\"line\">These two values form the container which could hold water at a max height of 7, these values</span><br><span class=\"line\">are also 7 array indexes apart from each other so it could hold water at a max width of 7. The</span><br><span class=\"line\">area of water which could be held is thus 7 x 7 = 49</span><br></pre></td></tr></table></figure>\n\n\n<p><a name=\"containerwiththeMostWaterBruteForce\"></a></p>\n<h2 id=\"Brute-Force-3\"><a href=\"#Brute-Force-3\" class=\"headerlink\" title=\"Brute Force\"></a>Brute Force</h2><p>In this case we simply consider the area for every possible pair of the lines and find out the maximum<br>area out of those. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">\tpublic int maxArea(int[] height) &#123;</span><br><span class=\"line\">\t\tint maxarea=0; </span><br><span class=\"line\">\t\tfor (int i=0; i&lt;height.length; i++)&#123;</span><br><span class=\"line\">\t\t\tfor (int j=i+1;j&lt;height.length;j++)&#123;</span><br><span class=\"line\">\t\t\t\tmaxarea=Math.max(maxarea, Math.min(height[i],height[j])*(j-i));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn maxarea;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time complexity: \tO(n^2) \tCalculating the area for all n(n-1)/2 height pairs </span><br><span class=\"line\">Space complexity: \tO(1) \tConstant extra space is used </span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"containerwiththeMostWaterTwoPointer\"></a></p>\n<h2 id=\"Two-Pointer-Approach\"><a href=\"#Two-Pointer-Approach\" class=\"headerlink\" title=\"Two Pointer Approach\"></a>Two Pointer Approach</h2><p>The intuition behind this approach is that the area formed between the lines will always be limited by<br>the height of the shorter line. Further, the farther the lines, the more will be the area obtained. </p>\n<p>We take two pointers, one at the beginning and one at the end of the array constituting the length of<br>the lines. Further, we maintain a variable maxarea to store the maximum area obtained till now. At<br>every step, we find out the area formed between them, update maxarea and move the pointer pointing to<br>the shorter line towards the other end by one step. </p>\n<p>Initially we consider the area constituting the exterior most lines. Now to maximize the area we need<br>to consider the area between the lines of larger lengths. If we try to move the pointer at the longer<br>line inwards, we won‚Äôt gain any increase in area, since it is limited by the shorter line. But moving<br>the shorter line‚Äôs pointer could turn out to be benefical, as per the same argument, despite the<br>reduction in width. This is done since a relatively longer line obtained by moving the shorter line‚Äôs<br>pointer might overcome the reduction in area caused by the width reduction. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxArea</span><span class=\"params\">(<span class=\"type\">int</span>[] height)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> maxarea=<span class=\"number\">0</span>, l=<span class=\"number\">0</span>, r=height.length-<span class=\"number\">1</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (l&lt;r)&#123;</span><br><span class=\"line\">\t\t\tmaxarea=Math.max(maxarea,Math.min(height[l],height[r])*(r-l));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (height[l]&lt;height[r])&#123;</span><br><span class=\"line\">\t\t\t\tl++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tr--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> maxarea; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time complexity: \tO(n) \tSingle pass</span><br><span class=\"line\">Space complexity: \tO(1) \tConstant space is used </span><br></pre></td></tr></table></figure>\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"integertoRoman\"></a></p>\n<h1 id=\"12-Integer-To-Roman\"><a href=\"#12-Integer-To-Roman\" class=\"headerlink\" title=\"12-Integer To Roman\"></a>12-Integer To Roman</h1><p>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Symbol\t\tValue </span><br><span class=\"line\">I\t\t1</span><br><span class=\"line\">V\t\t5</span><br><span class=\"line\">X\t\t10</span><br><span class=\"line\">L\t\t50</span><br><span class=\"line\">C\t\t100</span><br><span class=\"line\">D\t\t500</span><br><span class=\"line\">M\t\t1000</span><br></pre></td></tr></table></figure>\n\n<p>For example, two is written as II in Roman numeral, just two one‚Äôs added together. Twelve is written as<br>XII which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II. </p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for<br>four is not IIII. Instead, the number four is written as IV. Because the one is before the five we<br>subtract it making four. The same principle applies to the number nine which is written as IX. There<br>are six instances where subtraction is used: </p>\n<ul>\n<li>I can be placed before V (5) and X (10) to make 4 and 9 </li>\n<li>X can be placed before L (50) and C(100) to make 40 and 90 </li>\n<li>C can be placed before D (500) and M(1000) to make 400 and 900</li>\n</ul>\n<p>Given an integer, convert it to a roman numeral, input is guaranteed to be within the range from<br>1 to 3999</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: 3 </span><br><span class=\"line\">Output: &quot;III&quot; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: 4</span><br><span class=\"line\">Output: &quot;IV&quot; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 3: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: 9 </span><br><span class=\"line\">Output: &quot;IX&quot; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 4: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: 58 </span><br><span class=\"line\">Output: &quot;LVIII&quot; </span><br><span class=\"line\">Explanation: L=50, V=5, III=3</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 5: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: 1994</span><br><span class=\"line\">Output: &quot;MCMXCIV&quot;</span><br><span class=\"line\">Explanation: M=1000, CM=900, XC=90 and IV=4 </span><br></pre></td></tr></table></figure>\n\n<p><a name=\"integertoRomanStringArray\"></a></p>\n<h2 id=\"String-Array\"><a href=\"#String-Array\" class=\"headerlink\" title=\"String Array\"></a>String Array</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">intToRoman</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString M[]=&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;M&quot;</span>, <span class=\"string\">&quot;MM&quot;</span>, <span class=\"string\">&quot;MMM&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//represents 1000, 2000, and 3000 since we know the number is in the range 1 to 3999</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tString C[]=&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;CC&quot;</span>, <span class=\"string\">&quot;CCC&quot;</span>, <span class=\"string\">&quot;CD&quot;</span>, <span class=\"string\">&quot;D&quot;</span>, <span class=\"string\">&quot;DC&quot;</span>, <span class=\"string\">&quot;DCC&quot;</span>, <span class=\"string\">&quot;DCCC&quot;</span>, <span class=\"string\">&quot;CM&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//represents 0, 100,  200,   300,  400, 500,  600,   700,    800,  900</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tString X[]=&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;X&quot;</span>, <span class=\"string\">&quot;XX&quot;</span>, <span class=\"string\">&quot;XXX&quot;</span>, <span class=\"string\">&quot;XL&quot;</span>, <span class=\"string\">&quot;L&quot;</span>, <span class=\"string\">&quot;LX&quot;</span>, <span class=\"string\">&quot;LXX&quot;</span>, <span class=\"string\">&quot;LXXX&quot;</span>, <span class=\"string\">&quot;XC&quot;</span>&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">//represents 0,  10,   20,    30,   40,  50,   60,    70,     80,   90</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tString I[]=&#123;<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;I&quot;</span>, <span class=\"string\">&quot;II&quot;</span>, <span class=\"string\">&quot;III&quot;</span>, <span class=\"string\">&quot;IV&quot;</span>, <span class=\"string\">&quot;V&quot;</span>, <span class=\"string\">&quot;VI&quot;</span>, <span class=\"string\">&quot;VII&quot;</span>, <span class=\"string\">&quot;VIII&quot;</span>, <span class=\"string\">&quot;IX&quot;</span>&#125;; </span><br><span class=\"line\">\t<span class=\"comment\">//represents 0,   1,    2,     3,    4,  5,    6,     7,      8,    9</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> M[num/<span class=\"number\">1000</span>] + C[(num%<span class=\"number\">1000</span>)/<span class=\"number\">100</span>] + X[(num%<span class=\"number\">100</span>)/<span class=\"number\">10</span>] + I[num%<span class=\"number\">10</span>]; </span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"romantoInteger\"></a></p>\n<h1 id=\"13-Roman-to-Integer\"><a href=\"#13-Roman-to-Integer\" class=\"headerlink\" title=\"13-Roman to Integer\"></a>13-Roman to Integer</h1><p>Roman numerals are represented by seven different symbols I, V, X, L, C, D and M </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Symbol \t\tValue </span><br><span class=\"line\">I\t\t1</span><br><span class=\"line\">V\t\t5</span><br><span class=\"line\">X\t\t10 </span><br><span class=\"line\">L\t\t50</span><br><span class=\"line\">C\t\t100</span><br><span class=\"line\">D\t\t500</span><br><span class=\"line\">M\t\t1000</span><br></pre></td></tr></table></figure>\n\n<p>For example, two is written as II in Roman numeral, just two one‚Äôs added together. Twelve is written as<br>XII which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II. </p>\n<p>Roman numerals are usually written largest to smallest from left to right. However, the numeral for<br>four is not IIII. Instead, the number four is written as IV. Because the one is before the five we<br>subtract it making four. The same principle applies to the number nine which is written as IX. There<br>are six instances where subtraction is used: </p>\n<ul>\n<li>I can be placed before V (5) and X (10) to make 4 and 9 </li>\n<li>X can be placed before L (50) and C(100) to make 40 and 90 </li>\n<li>C can be placed before D (500) and M(1000) to make 400 and 900</li>\n</ul>\n<p>Given an integer, convert it to a roman numeral, Input is guaranteed to be within the range from<br>1 to 3999</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1: </span><br><span class=\"line\">\t</span><br><span class=\"line\">Input: &quot;III&quot; </span><br><span class=\"line\">Output: 3 </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;IV&quot; </span><br><span class=\"line\">Output: 4</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 3: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;IX&quot; </span><br><span class=\"line\">Output: 9 </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 4: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;LVIII&quot; </span><br><span class=\"line\">Output: 58 </span><br><span class=\"line\">Explanation: L=50, V=5, III=3</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 5: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;MCMXCIV&quot; </span><br><span class=\"line\">Output: 1994</span><br><span class=\"line\">Explanation: M=1000, CM=900, XC=90 and IV=4</span><br></pre></td></tr></table></figure>\n<p><br><br><br><a name=\"romantoIntegerCharacterArray\"></a></p>\n<h2 id=\"Character-Array\"><a href=\"#Character-Array\" class=\"headerlink\" title=\"Character Array\"></a>Character Array</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">romanToInt</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">\t\tMap&lt;Character, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>(); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&#x27;I&#x27;</span>, <span class=\"number\">1</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&#x27;V&#x27;</span>, <span class=\"number\">5</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&#x27;X&#x27;</span>, <span class=\"number\">10</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&#x27;L&#x27;</span>, <span class=\"number\">50</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&#x27;C&#x27;</span>, <span class=\"number\">100</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&#x27;D&#x27;</span>, <span class=\"number\">500</span>); </span><br><span class=\"line\">\t\tmap.put(<span class=\"string\">&#x27;M&#x27;</span>, <span class=\"number\">1000</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">char</span>[] sc= s.toCharArray(); </span><br><span class=\"line\">\t\t<span class=\"type\">int</span> total= map.get(sc[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t\t<span class=\"type\">int</span> pre=map.get(sc[<span class=\"number\">0</span>]); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;sc.length; i++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> curr=map.get(sc[i]); </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (curr&lt;=pre) &#123;</span><br><span class=\"line\">\t\t\t\ttotal= total + curr; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\ttotal=total+curr -<span class=\"number\">2</span>*pre; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tpre=curr; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> total; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"longestCommonPrefix\"></a></p>\n<h1 id=\"14-Longest-Common-Prefix\"><a href=\"#14-Longest-Common-Prefix\" class=\"headerlink\" title=\"14-Longest Common Prefix\"></a>14-Longest Common Prefix</h1><p>Write a function to find the longest common prefix string amongst an array of strings. If there is no<br>common prefix, return an empty string ‚Äú‚Äù</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: [&quot;flower&quot;, &quot;flow&quot;, &quot;flight&quot;]</span><br><span class=\"line\">Output: &quot;fl&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: [&quot;dog&quot;, &quot;racecar&quot;, &quot;car&quot;] </span><br><span class=\"line\">Output: &quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Explanation: There is no common prefix among the input strings </span><br></pre></td></tr></table></figure>\n\n<p><em>Note:</em><br>All given inputs are in lowercase letters a-z</p>\n<p><br><br><br><a name=\"longestCommonPrefixHorizontalScanning\"></a></p>\n<h2 id=\"Horizontal-Scanning\"><a href=\"#Horizontal-Scanning\" class=\"headerlink\" title=\"Horizontal Scanning\"></a>Horizontal Scanning</h2><br>\n*Intuition:* \n\n<p>For a start we will describe a simple way of find the longest prefix shared by a set of strings<br>LCP(S1 ‚Ä¶ Sn).We will use the observation that: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LCP(S1 ... Sn) = LCP(LCP(LCP(S1, S2), S3), ... Sn) </span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><em>Algorithm:</em></p>\n<p>To employ this idea, the algorithm iterates through the strings [S1 ‚Ä¶ Sn]. finding at each iteration<br>i the longest common prefix of strings LCP(S1 ‚Ä¶ Si). When LCP(S1 ‚Ä¶ Si) is an empty string, the<br>algorithm ends. Otherwise after n iterations, the algorithm returns LCP(S1 ‚Ä¶ Sn) </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Example: </span><br><span class=\"line\"></span><br><span class=\"line\">&#123;leets, leetcode, leet, leeds&#125;</span><br><span class=\"line\">   \\       /      </span><br><span class=\"line\">  LCP&#123;1,2&#125; = leets</span><br><span class=\"line\">  \t     leetcode</span><br><span class=\"line\">\t     leet </span><br><span class=\"line\"></span><br><span class=\"line\">\t \t\\\t&#123;leets, leetcode, leet, leeds&#125;</span><br><span class=\"line\">\t\t \\ \t\t\t   /</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t LCP&#123;1,3&#125; = leet</span><br><span class=\"line\">\t\t \t    leet</span><br><span class=\"line\">\t\t\t    leet</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t      \\          &#123;leets, leetcode, leet, leeds&#125;</span><br><span class=\"line\">\t\t\t       \\ \t\t\t\t  /</span><br><span class=\"line\">\t\t\t       LCP&#123;1,4&#125;   leet</span><br><span class=\"line\">\t\t\t       \t\t  leeds</span><br><span class=\"line\">\t\t\t\t\t  lee</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tLCP&#123;1,4&#125; = &quot;lee&quot;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String longestCommon <span class=\"title function_\">Prefix</span><span class=\"params\">(String[] strs)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (strs.length==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tString prefix=strs[<span class=\"number\">0</span>]; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;strs.length; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (strs[i].indexOf(prefix) != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tprefix=prefix.substring(<span class=\"number\">0</span>, prefix.length() -<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (prefix.isEmpty()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> prefix; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time complexity: \tO(S)\tWhere S is the sum of all characters in all strings. In the worse case</span><br><span class=\"line\">\t\t\t\tall n strings are the same. The algorithm compares the string S1 with </span><br><span class=\"line\">\t\t\t\tthe other strings [S2 ... Sn]. There are S character comparisons where</span><br><span class=\"line\">\t\t\t\tS is the sum of all characters in the input array </span><br><span class=\"line\"></span><br><span class=\"line\">Space complexity: \tO(1) \tWe only used constant extra space </span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br><a name=\"longestCommonPrefixVerticalScanning\"></a></p>\n<h2 id=\"Vertical-Scanning\"><a href=\"#Vertical-Scanning\" class=\"headerlink\" title=\"Vertical Scanning\"></a>Vertical Scanning</h2><p>Imagine a very short string is at the end of the array. The above approach will still do S comparisons.<br>One way to optimize this case is to do vertical scanning. We compare characters from top to bottom on<br>the same column (same character index of the strings) before moving on to the next column. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (strs==<span class=\"literal\">null</span> || strs.length==) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;strs[<span class=\"number\">0</span>].length(); i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">char</span> c=strs[<span class=\"number\">0</span>].charAt(i); </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=<span class=\"number\">1</span>; j&lt;strs.length; j++) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i==strs[j].length() || strs[j].charAt(i)!=c)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>].substring(<span class=\"number\">0</span>,i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>]; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time complexity: \tO(S) \tWhere S is the sum of all characters in all strings. In the worst case</span><br><span class=\"line\">\t\t\t\tthere will be n equal strings with length m and the algorithm performs</span><br><span class=\"line\">\t\t\t\tS=n*m character comparisons. Even the worst case is still the same as </span><br><span class=\"line\">\t\t\t\tApproach 1, in the best case there are at most n*minLen comparisons </span><br><span class=\"line\">\t\t\t\twhere minLen is the length of the shortest string in the array. </span><br><span class=\"line\"></span><br><span class=\"line\">Space complexity: \tO(1)\tWe only used constant extra space</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"longestCommonPrefixDivideandConquer\"></a></p>\n<h2 id=\"Divide-and-Conquer\"><a href=\"#Divide-and-Conquer\" class=\"headerlink\" title=\"Divide and Conquer\"></a>Divide and Conquer</h2><p>The idea of the algorithm comes from the associative property of LCP operation. We notice that:<br>LCP(S1 ‚Ä¶ Sn) &#x3D; LCP(LCP(S1 ‚Ä¶ Sk), LCP(Sk+1 ‚Ä¶ Sn)), where LCP(S1 ‚Ä¶ Sn) is the longest common<br>prefix in a set of strings [S1 ‚Ä¶ Sn], 1&lt;k&lt;n </p>\n<p><br><br><br><em>Algorithm</em> </p>\n<p>To apply the previous observation, we use the divide and conquer technique, where we split the<br>LCP(Si ‚Ä¶ Sj) problem into two subproblems LCP(Si ‚Ä¶ Smid) and LCP(Smid+1 ‚Ä¶ Sj), where mid is<br>(i+j)&#x2F;2. We use their solutions lcpLeft and lcpRight to construct the solution of the main problem<br>LCP(Si ‚Ä¶ Sj). To accomplish this we compare one by one the characters of lcpLeft and lcpRight till<br>there is no character match. The found common prefix of lcpLeft and lcpRight is the solution of the<br>LCP(Si ‚Ä¶ Sj) </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t\t\t&#123;leetcode, leet, lee, le&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t    /                \\   </span><br><span class=\"line\">Divide \t\t\t&#123;leetcode, leet&#125;            &#123;lee, le&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">Conquer\t\t\t\t|\t\t\t | </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t     &#123;leet&#125; \t\t        &#123;le&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t         \\                      /</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t \t   &#123;le&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\tSearching for the longest common prefix (LCP) in dataset &#123;leetcode, leet, lee, le&#125; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> &#123; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (strs == <span class=\"literal\">null</span> || strs.length ==<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> longestCommonPrefix(strs, <span class=\"number\">0</span>, strs.length-<span class=\"number\">1</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> String <span class=\"title function_\">longestCommonPrefix</span><span class=\"params\">(String[] strs, <span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> &#123; </span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l==r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> strs[l];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> mid=(l+r)/<span class=\"number\">2</span>; </span><br><span class=\"line\">\t\tString lcpLeft= longestCommonPrefix(strs,l, mid); </span><br><span class=\"line\">\t\tString lcpRight= longestCommonPrefix(strs,mid+<span class=\"number\">1</span>;r); </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> commonPrefix(lcpLeft,lcpRight);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">String <span class=\"title function_\">commonPrefix</span><span class=\"params\">(String left, String right)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> min=Math.min(left.length(), right.length()); </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;min; i++) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (left.charAt(i) !=right.charAt(i) )&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> left.substring(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> left.substring(<span class=\"number\">0</span>, min);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<p>In the worst case we have n equal strings with length m</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: O(S)\t\twhere S is the number of all characters in the array, S=m*n so time</span><br><span class=\"line\">\t\t\t\tcomplexity is 2*T(n/2)+O(m). Therefore time complexity is O(S). In the</span><br><span class=\"line\">\t\t\t\tbest case the algorithm performs O(minLen * n) comparisons, where</span><br><span class=\"line\">\t\t\t\tminLen is the shortest string of the array </span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: O(m*log(n))\tThere is a memory overhead since we sotre recursive call in the </span><br><span class=\"line\">\t\t\t\texecution stack. There are log(n) recursive calls, each store needs m</span><br><span class=\"line\">\t\t\t\tspace to store the result so space complexity is O(m*log(n))</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"longestCommonPrefixBinarySearch\"></a></p>\n<h2 id=\"Binary-Search\"><a href=\"#Binary-Search\" class=\"headerlink\" title=\"Binary Search\"></a>Binary Search</h2><p>The idea is to apply binary search method to find the string with maximum value L, which is common<br>prefix of all the strings. The algorithm searches the space in the interval (0 ‚Ä¶ minLen), where<br>minLen is minimum string length and the maximum possible common prefix. Each time search space is<br>divided in two equal parts, one of them is discarded because it is sure that it doesn‚Äôt contain the<br>solution. There are two possible cases: </p>\n<ul>\n<li>S[1‚Ä¶mid] is not a common string. This means that for each j&gt;i, S[1‚Ä¶j] is not a common string and we discard the second half of the search space</li>\n<li>S [1‚Ä¶mid] is common string. This means that for each i&lt;j, S[1‚Ä¶i] is a common string and we discard the first half of the search space, because we try to find longer common prefix</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t&#123;leets, leetcode, leetc, leeds&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t|</span><br><span class=\"line\">\t      </span><br><span class=\"line\">\t     &quot;leets&quot;</span><br><span class=\"line\">\t    /        \\</span><br><span class=\"line\">\t &quot;lee&quot;      &quot;ts&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">\t     midpoint </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;lee&quot; in &quot;leetcode&quot; : yes</span><br><span class=\"line\">&quot;lee&quot; in &quot;leetc&quot; : yes</span><br><span class=\"line\">&quot;lee&quot; in &quot;leeds&quot; : yes</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t|</span><br><span class=\"line\"></span><br><span class=\"line\">\t     &quot;leets&quot;</span><br><span class=\"line\">\t     /     \\</span><br><span class=\"line\">\t  &quot;lee&quot;    &quot;ts&quot;</span><br><span class=\"line\">\t    |      /   \\</span><br><span class=\"line\"></span><br><span class=\"line\">\t  &quot;lee&quot;   &quot;t&quot;   &quot;s&quot;</span><br><span class=\"line\">\t        </span><br><span class=\"line\">\t\t   midpoint</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   &quot;leet&quot; in &quot;leetcode&quot; : yes</span><br><span class=\"line\">\t\t   &quot;leet&quot; in &quot;leetc&quot; : yes </span><br><span class=\"line\">\t\t   &quot;leet&quot; in &quot;leeds&quot; : no</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t   LCP= &quot;lee&quot; </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">longestCommonPrefix</span><span class=\"params\">(String[] strs)</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (strs==<span class=\"literal\">null</span> || strs.length==<span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">\t<span class=\"type\">int</span> minLen=Integer.MAX_VALUE; </span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (String str: strs)</span><br><span class=\"line\">\t\tminLen=Math.min(minLen, str.length());</span><br><span class=\"line\">\t<span class=\"type\">int</span> low=<span class=\"number\">1</span>; </span><br><span class=\"line\">\t<span class=\"type\">int</span> high=min Len; </span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (low&lt;=high) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> middle=(low+high)/<span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (isCommonPrefix(strs, middle)</span><br><span class=\"line\">\t\t\tlow=middle+<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\thigh=middle-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> strs[<span class=\"number\">0</span>].substring(<span class=\"number\">0</span>, (low + high)/<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isCommonPrefix</span><span class=\"params\">(String[] strs, <span class=\"type\">int</span> len)</span> &#123;</span><br><span class=\"line\">\tString str1=strs[<span class=\"number\">0</span>].substring(<span class=\"number\">0</span>,len);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;strs.length; i++)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!strs[i].startsWith(str1))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>**Complexity Analysis</p>\n<p>In the worst case we have n equal strings with length m </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time complexity: \tO(S * log(n)), where S is the sum of all characters in all strings. The</span><br><span class=\"line\">\t\t\talgorithm makes log(n) iterations, for each of them there are S=m*n </span><br><span class=\"line\">\t\t\tcomparisons, which gives in total O(S * log(n)) time complexity</span><br><span class=\"line\"></span><br><span class=\"line\">Space complexity: \tO(1). We only used constant extra space </span><br></pre></td></tr></table></figure>\n<p><br><br><br><a name=\"longestCommonPrefixFurtherThoughts\"></a></p>\n<h2 id=\"Further-Thoughts\"><a href=\"#Further-Thoughts\" class=\"headerlink\" title=\"Further Thoughts\"></a>Further Thoughts</h2><p>Considering a slightly different problem: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given a set of keys S= [S1, S2 ... Sn], find the longest common prefix among a string q and S.</span><br><span class=\"line\">This LCP query will be called frequently</span><br></pre></td></tr></table></figure>\n<p>We coule optimize LCP queries by storing the set of keys S in a Trie. See this for Trie<br>implementation. In a Trie, each node descending from the root represents a common prefix of some keys. But we need to<br>find the longest common prefix of a string q and all key strings. This means that we have to find the<br>deepest path from the root, which satisfies the following conditions </p>\n<ul>\n<li>it is a prefix of query string q</li>\n<li>each node along the path must contain only one child element. Otherwise the found path will not be a<br>common prefix among all strings</li>\n<li>the path doesn‚Äôt comprise of nodes which are marked as end of key. Otherwise the path couldn‚Äôt be a<br>prefix of a key which is shorter than itself</li>\n</ul>\n<p><br><br><br><em>Algorithm</em> </p>\n<p>The only question left is how to find the deepest path in the Trie, that fulfills the requirements<br>above. The most effective way is to build a trie from {S1 ‚Ä¶ Sn] strings. Then find the prefix of<br>query string q in the Trie. We traverse the Trie from the root, till it is impossible to continue the<br>path in the Trie because one of the conditions above is not satisfied. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Searching for the longest common prefix of string &quot;le&quot; in a Trie from dataset &#123;lead, leet&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tRoot</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t 1</span><br><span class=\"line\"></span><br><span class=\"line\">\tl   ===========&gt;  \\  l</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t     2</span><br><span class=\"line\"></span><br><span class=\"line\">\te   ===============&gt;   \\ e</span><br><span class=\"line\"></span><br><span class=\"line\">LCP &quot;le&quot; FOUND\t=============&gt;   3   </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t     a\t/  \\ e    End of Key &quot;lee&quot; </span><br><span class=\"line\">\t\t\t\t     </span><br><span class=\"line\">\t\t\t      6      4</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t d  /\t       \\ t</span><br><span class=\"line\">\t\t\t\t        </span><br><span class=\"line\">END OF KEY &quot;lead&quot;\t  7\t\t 5   End of key &quot;leet&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String longestCommonPrefix(String q, String[] strs) &#123;</span><br><span class=\"line\">    if (strs == null || strs.length == 0)</span><br><span class=\"line\">         return &quot;&quot;;  </span><br><span class=\"line\">    if (strs.length == 1)</span><br><span class=\"line\">         return strs[0];</span><br><span class=\"line\">    Trie trie = new Trie();      </span><br><span class=\"line\">    for (int i = 1; i &lt; strs.length ; i++) &#123;</span><br><span class=\"line\">        trie.insert(strs[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return trie.searchLongestPrefix(q);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class TrieNode &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    // R links to node children</span><br><span class=\"line\">    private TrieNode[] links;</span><br><span class=\"line\"></span><br><span class=\"line\">    private final int R = 26;</span><br><span class=\"line\"></span><br><span class=\"line\">    private boolean isEnd;</span><br><span class=\"line\"></span><br><span class=\"line\">    // number of children non null links</span><br><span class=\"line\">    private int size;    </span><br><span class=\"line\">    public void put(char ch, TrieNode node) &#123;</span><br><span class=\"line\">        links[ch -&#x27;a&#x27;] = node;</span><br><span class=\"line\">        size++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public int getLinks() &#123;</span><br><span class=\"line\">        return size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    //assume methods containsKey, isEnd, get, put are implemented as it is described</span><br><span class=\"line\">   //in  https://leetcode.com/articles/implement-trie-prefix-tree/)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Trie &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private TrieNode root;</span><br><span class=\"line\"></span><br><span class=\"line\">    public Trie() &#123;</span><br><span class=\"line\">        root = new TrieNode();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//assume methods insert, search, searchPrefix are implemented</span><br><span class=\"line\">    private String searchLongestPrefix(String word) &#123;</span><br><span class=\"line\">        TrieNode node = root;</span><br><span class=\"line\">        StringBuilder prefix = new StringBuilder();</span><br><span class=\"line\">        for (int i = 0; i &lt; word.length(); i++) &#123;</span><br><span class=\"line\">            char curLetter = word.charAt(i);</span><br><span class=\"line\">            if (node.containsKey(curLetter) &amp;&amp; (node.getLinks() == 1) &amp;&amp; (!node.isEnd())) &#123;</span><br><span class=\"line\">                prefix.append(curLetter);</span><br><span class=\"line\">                node = node.get(curLetter);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                return prefix.toString();</span><br><span class=\"line\"></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         return prefix.toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In the worst case query q has length m and is equal to all n strings of the array </span><br><span class=\"line\"></span><br><span class=\"line\">Time Complexity:   O(S)   where S is the number of all characters in the array, LCP query O(m) </span><br><span class=\"line\">  \t\t\t  Trie build has O(S) time complexity. To find the common prefix of q </span><br><span class=\"line\">\t\t\t  in the Trie takes in the worst O(m). </span><br><span class=\"line\"></span><br><span class=\"line\">Space complexity:  O(S)   we only used additional S extra space for the Trie. </span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"threeSum\"></a></p>\n<h1 id=\"15-3Sum\"><a href=\"#15-3Sum\" class=\"headerlink\" title=\"15-3Sum\"></a>15-3Sum</h1><p>Given an array ‚Äúnums‚Äù of n integers, are there elements a, b, c in nums such that a+b+c&#x3D;0? Find all<br>unique triplets in the array which gives the sum of zero. </p>\n<p>Note: </p>\n<p>The solution set must not contain duplicate triplets </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example: </span><br><span class=\"line\"></span><br><span class=\"line\">Given array nums = [-1, 0, 1, 2, -1, -4]. </span><br><span class=\"line\"></span><br><span class=\"line\">A solution set is: </span><br><span class=\"line\">[</span><br><span class=\"line\">  [-1, 0, 1],</span><br><span class=\"line\">  [-1, -1, 2]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p><br><br><br><a name=\"threeSumSortedArray\"></a></p>\n<h2 id=\"Sorted-Array\"><a href=\"#Sorted-Array\" class=\"headerlink\" title=\"Sorted Array\"></a>Sorted Array</h2><p>The method is to sort an input array and then run through all indices of a possible first element of a<br>triplet. For each element we make another 2Sum sweep of the remaining part of the array. Also we want<br>to skip elements to avoid duplicates in the answer without expending extra memory. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public List&lt;List&lt;Integer&gt;&gt; threeSum(int[] num) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //Arrays.sort re-arranges the array of integers in ascending order</span><br><span class=\"line\">    //ex. [1, 2, 3, 4]</span><br><span class=\"line\"></span><br><span class=\"line\">    Arrays.sort(num);</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = new LinkedList&lt;&gt;(); </span><br><span class=\"line\">    for (int i = 0; i &lt; num.length-2; i++) &#123;</span><br><span class=\"line\">        if (i == 0 || (i &gt; 0 &amp;&amp; num[i] != num[i-1])) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">\t    //This lets us skip some of the duplicate entries in the array</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    int lo = i+1, hi = num.length-1, sum = 0 - num[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t    //This is for the 2 Sum sweep </span><br><span class=\"line\"></span><br><span class=\"line\">            while (lo &lt; hi) &#123;</span><br><span class=\"line\">                if (num[lo] + num[hi] == sum) &#123;</span><br><span class=\"line\">                    res.add(Arrays.asList(num[i], num[lo], num[hi]));</span><br><span class=\"line\">                    while (lo &lt; hi &amp;&amp; num[lo] == num[lo+1]) lo++;</span><br><span class=\"line\">                    while (lo &lt; hi &amp;&amp; num[hi] == num[hi-1]) hi--;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t    //This lets us skip some of the duplicate entries in the array</span><br><span class=\"line\"></span><br><span class=\"line\">                    lo++; hi--;</span><br><span class=\"line\">                &#125; else if (num[lo] + num[hi] &lt; sum) lo++;</span><br><span class=\"line\">                else hi--;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t//This allows us to optimize slightly since we know that the array is sorted</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity:  O(n^2)   We go through a maximum of n elements for the first element of a triplet, </span><br><span class=\"line\">\t\t\t   and then when making a bi-directional 2Sum sweep of the remaining part of </span><br><span class=\"line\">\t\t\t   the array we also go through a maxiumum of n elements. </span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: O(1)\t   If we assume the return linked list is not extra space, then we do not </span><br><span class=\"line\">\t\t\t   allocate any significant extra space</span><br></pre></td></tr></table></figure>\n\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"threeSumClosest\"></a></p>\n<h1 id=\"16-3Sum-Closest\"><a href=\"#16-3Sum-Closest\" class=\"headerlink\" title=\"16-3Sum Closest\"></a>16-3Sum Closest</h1><p>Given an array nums of n integers and an integer target, find three integers in nums such that the sum<br>is closest to target. Return the sum of the three integers. You may assume that each input would have<br>exactly one solution. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example:</span><br><span class=\"line\"></span><br><span class=\"line\">Given array nums=[-1, 2, 1, -4], and target=1.</span><br><span class=\"line\"></span><br><span class=\"line\">The sum that is closest to the target is 2. (-1+2+1=2)</span><br></pre></td></tr></table></figure>\n\n<p><br><br><br><a name=\"threeSumClosestThreePointers\"></a></p>\n<h2 id=\"3-Pointers\"><a href=\"#3-Pointers\" class=\"headerlink\" title=\"3 Pointers\"></a>3 Pointers</h2><p>Similar to the previous 3Sum problem, we use three pointers to point to the current element, next<br>element and the last element. If the sum is less than the target, it means that we need to add a larger<br>element so next element move to the next. If the sum is greater, it means we have to add a smaller<br>element so last element move to the second last element. Keep doing this until the end. Each time<br>compare the difference between sum and target, if it is less than minimum difference so far, then<br>replace result with it, otherwise continue iterating. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Solution &#123;</span><br><span class=\"line\">\t\tpublic int threeSumClosest(int[] num, int target) &#123;</span><br><span class=\"line\">\t\tint result=num[0] + num[1] + num[num.length-1];</span><br><span class=\"line\">\t\tArrays.sort(num);</span><br><span class=\"line\">\t\tfor (int i=0; i&lt;num.length -2; i++) &#123;</span><br><span class=\"line\">\t\t\tint start= i+1, end = num.length -1;</span><br><span class=\"line\">\t\t\twhile (start &lt; end) &#123;</span><br><span class=\"line\">\t\t\t\tint sum = num[i] + num[start] + num[end];</span><br><span class=\"line\">\t\t\t\tif (sum &gt; target) &#123;</span><br><span class=\"line\">\t\t\t\t\tend--;</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tstart++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tif (Math.abs(sum-target) &lt; Math.abs(result-target)) &#123;</span><br><span class=\"line\">\t\t\t\t\tresult=sum;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn result;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"letterCombinationsofaPhoneNumber\"></a></p>\n<h1 id=\"17-Letter-Combinations-of-a-Phone-Number\"><a href=\"#17-Letter-Combinations-of-a-Phone-Number\" class=\"headerlink\" title=\"17-Letter Combinations of a Phone Number\"></a>17-Letter Combinations of a Phone Number</h1><p>Given a string contianing digits from 2-9 inclusive, return all possible letter combinations that the<br>number could represent. </p>\n<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not<br>map to any letters. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 - abc \t3 - def \t4 - ghi\t\t5 - jkl\t\t6 - mno\t\t7 - pqrs \t8 - tuv</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\t9 - wxyz</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example: </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;23&quot; </span><br><span class=\"line\"></span><br><span class=\"line\">Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;]. </span><br></pre></td></tr></table></figure>\n\n\n<p><em>Note: The above answer is in lexicographical order but the answer can be in any order</em></p>\n<p><br><br><br><a name=\"letterCombinationsofaPhoneNumberBacktracking\"></a></p>\n<h2 id=\"Backtracking\"><a href=\"#Backtracking\" class=\"headerlink\" title=\"Backtracking\"></a>Backtracking</h2><p>Backtracking is an algorithm for finding all solutions by exploring all potential candidates. If the<br>solution candidate turns to not be a solution (or at least not the last one), backtracking algorithm<br>discards it by making some changes on the previous step, ie <em>backtracks</em> and then tries again. </p>\n<p>Here is a backtrack function backtrack(combination, next_digits) which takes as arguments an ongoing<br>letter combination and the next digits to check. </p>\n<ul>\n<li>If there are no more digits to check that means the current combination is done </li>\n<li>If there are still digits to check: <ul>\n<li>Iterate over the letters mapping to the next available digit</li>\n<li>Append the current letter to the current combination and proceed to check next digits:</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">combination = combination + letter</span><br><span class=\"line\"></span><br><span class=\"line\">backtrack(combination + letter, next_digits[1:]).</span><br></pre></td></tr></table></figure>\n\n\n<p><strong>Visual Representation</strong> </p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/Screenshot-2022-10-26-180426.png\" alt=\"Visual Representation\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Time Complexity: \tO(3^N * 4^M) \twhere N is the number of digits in the input that maps to 3</span><br><span class=\"line\">\t\t\t\t\tletters (eg. 2, 3, 4, 5, 6, 8) and M is the number of digits </span><br><span class=\"line\">\t\t\t\t\tin the input that maps to 4 letters (eg. 7, 9) and N+M is the </span><br><span class=\"line\">\t\t\t\t\ttotal number digits in the input </span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: \tO(3^N * 4^M)\tsince one has to keep 3^N * 4^M solutions </span><br></pre></td></tr></table></figure>\n\n\n\n<p><br><br><br><a name=\"letterCombinationsofaPhoneNumberFIFOQueue\"></a></p>\n<h2 id=\"First-In-First-Out-FIFO-Queue\"><a href=\"#First-In-First-Out-FIFO-Queue\" class=\"headerlink\" title=\"First In First Out (FIFO) Queue\"></a>First In First Out (FIFO) Queue</h2><p>This solution utilizes the Single Queue Breadth First Search (BFS) which is an algorithm for traversing<br>or searching tree or graph data structures. It starts at the tree root and explores all of the neighbor<br>nodes. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">letterCombinations</span><span class=\"params\">(String digits)</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tLinkedList&lt;String&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;String&gt;();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (digits.isEmpty()) <span class=\"keyword\">return</span> ans; </span><br><span class=\"line\">\tString[] mapping = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[] &#123;<span class=\"string\">&quot;0&quot;</span>, <span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;abc&quot;</span>, <span class=\"string\">&quot;def&quot;</span>, <span class=\"string\">&quot;ghi&quot;</span>, <span class=\"string\">&quot;jkl&quot;</span>, <span class=\"string\">&quot;mno&quot;</span>, <span class=\"string\">&quot;pqrs&quot;</span>, <span class=\"string\">&quot;tuv&quot;</span>, &#123;wxyz<span class=\"string\">&quot;&#125;;</span></span><br><span class=\"line\"><span class=\"string\">\tans.add(&quot;</span><span class=\"string\">&quot;); </span></span><br><span class=\"line\"><span class=\"string\">\tfor (int i = 0; i&lt;digits.length(); i++) &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\tint x = Character.getNumericValue(digits.charAt(i)); </span></span><br><span class=\"line\"><span class=\"string\">\t\t</span></span><br><span class=\"line\"><span class=\"string\">\t\t//we terminate the while loop when we encounter a new-formed string which is more than</span></span><br><span class=\"line\"><span class=\"string\">\t\t//the current level i </span></span><br><span class=\"line\"><span class=\"string\">\t\t</span></span><br><span class=\"line\"><span class=\"string\">\t\t//peek retrieves the first value of the linked list</span></span><br><span class=\"line\"><span class=\"string\">\t\twhile (ans.peek().length==i)&#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t//removes the head or the first value in the linkedlist</span></span><br><span class=\"line\"><span class=\"string\">\t\t\tString t = ans.remove(); </span></span><br><span class=\"line\"><span class=\"string\">\t\t\tfor (char s : mapping[x].toCharArray()) &#123;</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\tans.add(t+s);</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t\t//this works because add appends to the end of the list</span></span><br><span class=\"line\"><span class=\"string\">\t\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">\t\treturn ans; </span></span><br><span class=\"line\"><span class=\"string\">\t&#125;</span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Time Complexity: \tO(3^N * 4^M) \twhere N is the number of digits in the input that maps to 3</span><br><span class=\"line\">\t\t\t\t\tletters (eg. 2, 3, 4, 5, 6, 8) and M is the number of digits </span><br><span class=\"line\">\t\t\t\t\tin the input that maps to 4 letters (eg. 7, 9) and N+M is the </span><br><span class=\"line\">\t\t\t\t\ttotal number digits in the input </span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: \tO(3^N * 4^M)\tsince one has to keep 3^N * 4^M solutions </span><br></pre></td></tr></table></figure>\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"fourSum\"></a></p>\n<h1 id=\"18-4Sum\"><a href=\"#18-4Sum\" class=\"headerlink\" title=\"18-4Sum\"></a>18-4Sum</h1><p>Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such<br>that a + b + c + d &#x3D; target? Find all unique quadruplets in the array which gives the sum of target</p>\n<p><em>Note:</em><br>The solution set must not contain duplicate quadruplets </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example: </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Given array nums = [1, 0, -1, 0, -2, 2], and target = 0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">A solution set is: </span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  [-1,  0, 0, 1],</span><br><span class=\"line\">  [-2, -1, 1, 2],</span><br><span class=\"line\">  [-2,  0, 0, 2]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br><a name=\"fourSumSortedArray\"></a></p>\n<h2 id=\"Sorted-Array-1\"><a href=\"#Sorted-Array-1\" class=\"headerlink\" title=\"Sorted Array\"></a>Sorted Array</h2><p>The idea is the same as the other numbered sum problems like 2sum and 3sum. We sort the array and then<br>proceed to interate through the values until we end up with a result that we are looking for. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">fourSum</span><span class=\"params\">(<span class=\"type\">int</span>[] num, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tArrayList&lt;List&lt;Integer&gt;&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (num.length&lt;<span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tArrays.sort(num); </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;num.length-<span class=\"number\">3</span>; i++) &#123;   <span class=\"comment\">//picking the first candidate must leave room</span></span><br><span class=\"line\">\t\t\t\t\t\t       <span class=\"comment\">//for the other values </span></span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num[i]+num[i+<span class=\"number\">1</span>]+num[i+<span class=\"number\">2</span>]+num[i+<span class=\"number\">3</span>]&gt;target) &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//first candidate too large, search finished</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (num[i]+num[num.length-<span class=\"number\">1</span>]+num[num.length-<span class=\"number\">2</span>]+num[num.length-<span class=\"number\">3</span>]&lt;target) &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//first candidate too small </span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i&gt;<span class=\"number\">0</span> &amp;&amp; num[i]==num[i-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//prevents duplicate in ans list</span></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> j=i+<span class=\"number\">1</span>; j&lt;num.length-<span class=\"number\">2</span>; j++) &#123;   <span class=\"comment\">//picking the second candidate must</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t <span class=\"comment\">//leave room for other values </span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (num[i]+num[j]+num[j+<span class=\"number\">1</span>]+num[j+<span class=\"number\">2</span>]&gt;target) &#123;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//second candidate too large</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (num[i]+num[j]+num[num.length-<span class=\"number\">1</span>]+num[num.length-<span class=\"number\">2</span>]&lt;target) &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//second candidate too small</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(j&gt;i+<span class=\"number\">1</span> &amp;&amp; num[j]==num[j-<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//prevents duplicate results in ans list</span></span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">int</span> low=j+<span class=\"number\">1</span>, high=num.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//two pointer search</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(low&lt;high) &#123;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"type\">int</span> sum=num[i]+num[j]+num[low]+num[high];</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (sum==target) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\t\tans.add(Arrays.asList(num[i],num[j],num[low],num[high]));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">while</span>(low&lt;high&amp;&amp;num[low]==num[low+<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tlow++; <span class=\"comment\">//skipping over duplicates</span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">while</span>(low&lt;high &amp;&amp; num[high]==num[high-<span class=\"number\">1</span>] &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\thigh--; <span class=\"comment\">//skipping over duplicates </span></span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\tlow++;</span><br><span class=\"line\">\t\t\t\t\t\thigh--;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"comment\">//moving window</span></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum&lt;target) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tlow++;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\thigh--;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"removeNthNodefromEndofList\"></a></p>\n<h1 id=\"19-Remove-Nth-Node-From-End-of-List\"><a href=\"#19-Remove-Nth-Node-From-End-of-List\" class=\"headerlink\" title=\"19-Remove Nth Node From End of List\"></a>19-Remove Nth Node From End of List</h1><p>Given a linked list, remove the n-th node from the end of the list and return its head</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example: </span><br><span class=\"line\"></span><br><span class=\"line\">Given linked list: 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5, and n=2 </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">After removing the second node from the end, the linked list becomes </span><br><span class=\"line\">\t\t   </span><br><span class=\"line\">\t\t   1 -&gt; 2 -&gt; 3 -&gt; 5</span><br></pre></td></tr></table></figure>\n\n<p><strong>Note:</strong><br>Given n will always be valid </p>\n<p><strong>Follow up:</strong><br>Could you do this in one pass? </p>\n<p><br><br><br><a name=\"removeNthNodefromEndofListTwoPassAlgorithm\"></a></p>\n<h2 id=\"Two-Pass-Algorithm\"><a href=\"#Two-Pass-Algorithm\" class=\"headerlink\" title=\"Two Pass Algorithm\"></a>Two Pass Algorithm</h2><p><strong>Intuition</strong></p>\n<p>We notice that the problem could be simply reduced to another one: Remove the (L-n+1)th node from the<br>beginning of the list, where L is the list length. This problem is easy to solve once we found the<br>list length L. </p>\n<p><br><br><br><strong>Algorithm</strong> </p>\n<p>First we will add an auxiliary ‚Äúdummy‚Äù node, which points to the list head. The ‚Äúdummy‚Äù node is used to<br>simplify some corner cases such as a list with only one node or removing the head of the list. On the<br>first pass, find the list length L. Then we set a pointer to the dummy node and start to move it<br>through the list till it comes to the (L-n)th node. We relink next pointer of the (L-n)th node to the<br>(L-n+2)th node and we are done. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; NULL</span><br><span class=\"line\"></span><br><span class=\"line\">\t    |</span><br><span class=\"line\">\t    v</span><br><span class=\"line\"></span><br><span class=\"line\">D -&gt; 1 -&gt; 2 -&gt; 4 -&gt; NULL</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">removeNthFromEnd</span><span class=\"params\">(ListNode head, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">ListNode</span> <span class=\"variable\">dummy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>); </span><br><span class=\"line\">\tdummy.next = head; </span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span><span class=\"number\">0</span>; </span><br><span class=\"line\">\t<span class=\"type\">ListNode</span> <span class=\"variable\">first</span> <span class=\"operator\">=</span> head; </span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (first!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlength++;</span><br><span class=\"line\">\t\tfirst=first.next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlength -= n; </span><br><span class=\"line\">\tfirst = dummy;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (length&gt;<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlength--;</span><br><span class=\"line\">\t\tfirst=first.next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfirst.next=first.next.next;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dummy.next; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: \tO(L) \tThe algorithm makes two traversals of the list, first to calculate the </span><br><span class=\"line\">\t\t\t\tlist length L and second to find the (L-n)th node. There are 2L-n </span><br><span class=\"line\">\t\t\t\toperations and time complexity is O(L)</span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: \tO(1) \tWe only used constant extra space</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><br><br><br><a name=\"removeNthNodefromEndofListOnePassAlgorithm\"></a></p>\n<h2 id=\"One-Pass-Algorithm\"><a href=\"#One-Pass-Algorithm\" class=\"headerlink\" title=\"One Pass Algorithm\"></a>One Pass Algorithm</h2><p>The previous algorithm could be optimized to one pass. Instead of one pointer, we could use two<br>pointers. The first pointer advances the list by n+1 steps from the beginning, while the second pointer<br>starts from the beginning of the list. Now, both pointers are separated by exactly n nodes. We maintain<br>this constant gap by advancing both pointers together until the first pointer arrives past the last<br>node. The second pointer will be pointing at the nth node counting from the last. We relink the next<br>pointer of the node referenced by the second pointer to point to the node‚Äôs next next node. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Maintaining N=2 nodes apart between the first and second pointer </span><br><span class=\"line\"></span><br><span class=\"line\">\tD\t-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL</span><br><span class=\"line\"></span><br><span class=\"line\">       first \t Head </span><br><span class=\"line\">       second </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t   </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Move the first pointer N+1 steps </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t     |</span><br><span class=\"line\">\t\t\t     v</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tD\t-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL</span><br><span class=\"line\"></span><br><span class=\"line\">      second     Head       First</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Move the first and second pointers together until the first pointer arrives past the last node </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t     |</span><br><span class=\"line\">\t\t\t     v</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tD\t-&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; NULL</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t Head      Second           First</span><br><span class=\"line\"></span><br><span class=\"line\">Second pointer points to the nth node counting from last so link node to the node&#x27;s next next node </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t  |</span><br><span class=\"line\">\t\t\t\t  v</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\tD\t-&gt; 1 -&gt; 2 -&gt; 3 -&gt;   -&gt; 5 -&gt; NULL</span><br><span class=\"line\">\t         </span><br><span class=\"line\">\t\t Head      Second           First</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">removeNthFromEnd</span><span class=\"params\">(ListNode head, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">ListNode</span> <span class=\"variable\">dummy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\tdummy.next = head; </span><br><span class=\"line\">\t<span class=\"type\">ListNode</span> <span class=\"variable\">first</span> <span class=\"operator\">=</span> dummy; </span><br><span class=\"line\">\t<span class=\"type\">ListNode</span> <span class=\"variable\">second</span> <span class=\"operator\">=</span> dummy;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//Moves the first pointer so that the first and second nodes are separated by n nodes</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">1</span>; i&lt;=n+<span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfirst = first.next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Move first to the end, maintaining the gap</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (first!=<span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfirst=first.next;</span><br><span class=\"line\">\t\tsecond=second.next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tsecond.next=second.next.next;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Complexity Analysis</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: \tO(L) \tThe algorithm makes one traversal of the list of L nodes. Therefore</span><br><span class=\"line\">\t\t\t\ttime complexity is O(L)</span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: \tO(1)\tOnly constant extra space was used </span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"validParentheses\"></a></p>\n<h1 id=\"20-Valid-Parentheses\"><a href=\"#20-Valid-Parentheses\" class=\"headerlink\" title=\"20-Valid Parentheses\"></a>20-Valid Parentheses</h1><p>Given a string containing just the characters ‚Äò(‚Äò, ‚Äò)‚Äô, ‚Äò{‚Äò, ‚Äò}‚Äô, ‚Äò[‚Äò, ‚Äò]‚Äô, determine if the input<br>string is valid </p>\n<p>An input string is valid if: </p>\n<ol>\n<li>Open brackets must be closed by the same type of brackets </li>\n<li>Open brackets must be closed in the correct order</li>\n</ol>\n<p>Note that an empty string is also considered valid</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 1: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;()&quot;</span><br><span class=\"line\">Output: true</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 2: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;()[]&#123;&#125;&quot;</span><br><span class=\"line\">Output: true </span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 3: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;(]&quot;</span><br><span class=\"line\">Output: false</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 4: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;([)]&quot;</span><br><span class=\"line\">Output: false</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example 5: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: &quot;&#123;[]&#125;&quot;</span><br><span class=\"line\">Output: true</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n<p><br><br><br><a name=\"validParenthesesCounting\"></a></p>\n<h2 id=\"Counting-method\"><a href=\"#Counting-method\" class=\"headerlink\" title=\"Counting method\"></a>Counting method</h2><p><strong>Intuition</strong> </p>\n<p>Imagine you are writing a small compiler for your college project and one of the tasks or sub-tasks for<br>the compiler would be to detect if the parenthesis are in place or not. </p>\n<p>The algorithm we will look at in this article can be then used to process all the parenthesis in the<br>program your compiler is compiling and checking if all the parenthesis are in place. This makes<br>checking if a given string of parenthesis is valid or not, an important programming problem. </p>\n<p>The expressions that we will deal with in this problem can consist of three different types of<br>parenthesis: </p>\n<ul>\n<li>() </li>\n<li>{}</li>\n<li>[]</li>\n</ul>\n<p>Before looking at how we can check if a given expression consisting of thes parenthesis is valid or<br>not, let us look at a simpler version of the problem that consists of just one type of parenthesis. So,<br>the expressions we can encounter in this simplified version of the problem are: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(((((()))))) -- VALID</span><br><span class=\"line\"></span><br><span class=\"line\">()()()()     -- VALID</span><br><span class=\"line\"></span><br><span class=\"line\">(((((((()    -- INVALID</span><br><span class=\"line\"></span><br><span class=\"line\">((()(())))   -- VALID</span><br></pre></td></tr></table></figure>\n\n\n<p>Let‚Äôs look at a simple algorithm to deal with this problem </p>\n<p><br><br></p>\n<ol>\n<li><p>We process the expression one bracket at a time starting from the left </p>\n</li>\n<li><p>Suppose we encounter an opening bracket ie. <code>(</code>, it may or may not be an invalid expression because<br>there can be a matching ending bracket somewhere in the remaining part of the expression. Here, we<br>simply increment the counter keeping track of the left parenthesis till now. <code>left += 1</code></p>\n</li>\n<li><p>If we encounter a closing bracket, this has two meanings: </p>\n<ul>\n<li><p>There was no matching opening bracket for this closing bracket and in that case we have an invalid<br>expression. This is the case when <code>left==0</code> ie. when there are no unmatched left brackets<br>available</p>\n</li>\n<li><p>We had some unmatched opening bracket available to match this closing bracket. This is the case<br>when <code>left&gt;0</code> ie. we have unmatched left brackets available</p>\n</li>\n</ul>\n</li>\n<li><p>If we encounter a closing bracket ie. <code>)</code> when left&#x3D;&#x3D;0, then we have an invalid expression on our<br>hands. Else, we decrement <code>left</code> thus reducing the number of unmatched left parenthesis available.</p>\n</li>\n<li><p>Continue processing the string until all parenthesis have been processed</p>\n</li>\n<li><p>If in the end we still have an unmatched left parenthesis available, this implies an invalid<br>expression</p>\n</li>\n</ol>\n<p><br><br></p>\n<p>The reason we discussed this particular algorithm here is because the approach for the approach for<br>the original problem derives its inspiration from this very solution. </p>\n<p>If we try and follow the same approach for our original problem, then it simply won‚Äôt work. The reason<br>a simple counter based approach works above is because all the parenthesis are of the same type. So<br>when we encounter a closing bracket, we simply assume a corresponding opening matching bracket<br>to be available ie. if <code>left&gt;0</code></p>\n<p>But in our problem, if we encounter say <code>]</code>, we don‚Äôt really know if there is a corresponding opening<br><code>[</code> available or not. You could say: </p>\n<blockquote>\n<p>Why not maintain a separate counter for the different types of parenthesis?</p>\n</blockquote>\n<p>This doesn‚Äôt work because the relative placement of the parenthesis also matters here eg: <code>[&#123;]</code></p>\n<p><br><br> </p>\n<p>If we simply keep counters here, then as soon as we encounter the closing square bracket, we would<br>know there is an unmatched opening square bracket available as well. But, the **closest unmatched<br>opening bracket available is a curly bracket and not a square bracket and hence the counting approach<br>breaks here. </p>\n<p><br><br><br><a name=\"validParenthesesStack\"></a></p>\n<h2 id=\"Stacks\"><a href=\"#Stacks\" class=\"headerlink\" title=\"Stacks\"></a>Stacks</h2><p>An interesting property about a valid parenthesis expression is that a sub-expression. (Not every<br>sub-expression) eg. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; [ [ ] &#123; &#125; ] &#125; ( ) ( ) </span><br><span class=\"line\"></span><br><span class=\"line\">  ^         ^</span><br><span class=\"line\">  |         |</span><br></pre></td></tr></table></figure>\n\n<p>The entire expression is valid, but sub portions of it are also valid in themselves. This lends a sort<br>of a recursive structure to the problem. For example consider the expression enclosed within the<br>marked parenthesis in the diagram above. The opening bracket is at index <code>1</code> and the corresponding<br>closing bracket is at index <code>6</code>. </p>\n<blockquote>\n<p>What if whenever we encounter a matching pair of parenthesis in the expression we simply remove it<br>from the expression? </p>\n</blockquote>\n<p>Let‚Äôs have a look at this idea below where we remove the smaller expressions one at a time from the<br>overall expression and since this is a valid expression, we would be left with an empty string in the<br>end. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The stack data structure can come in handy here in representing this recursive structure of the </span><br><span class=\"line\">problem. We can&#x27;t really process this from the inside out because we don&#x27;t have an idea about the </span><br><span class=\"line\">overall structure. But, the stack can help us process this recursively ie. from outside to inwards.</span><br></pre></td></tr></table></figure>\n\n<p>Lets take a look at the algorithm for this problem using stacks as the intermediate data structure. </p>\n<p><strong>Algorithm</strong> </p>\n<ol>\n<li>Initialize a stack S. </li>\n<li>Process each bracket of the expression one at a time </li>\n<li>If we encounter an opening bracket, we simply push it onto the stack. This means we will process it<br>later, let us simply move onto the sub-expression ahead </li>\n<li>If encounter a closing bracket, then we check the element on top of the stack. If the element at the<br>top of the stack is an opening bracket <code>of the same type</code>, then we pop it off the stack and continue<br>processing. Else, this implies an invalid expression </li>\n<li>In the end, if we are left with a stack still having elements, then this implies an invalid<br>expression</li>\n</ol>\n<p>Lets take a look at the implementation for this algorithm</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">//Hash table that takes care of the mappings</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> HashMap&lt;Character, Character&gt; mappings; </span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//Initialize the hash map with mappings. This simply makes the code easier to read </span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"title function_\">Solution</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.mappings = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;Character, Character&gt;(); </span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.mappings.put(<span class=\"string\">&#x27;)&#x27;</span>, <span class=\"string\">&#x27;(&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.mappings.put(<span class=\"string\">&#x27;&#125;&#x27;</span>, <span class=\"string\">&#x27;&#123;&#x27;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">this</span>.mappings.put(<span class=\"string\">&#x27;]&#x27;</span>, <span class=\"string\">&#x27;[&#x27;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(String s)</span> &#123; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"comment\">// Initialize a stack to be used in the algorithm</span></span><br><span class=\"line\">\t\tStack&lt;Character&gt; stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;Character&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt; s.length(); i++) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> s.charAt(i);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// If the current character is a closing bracket </span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.mappings.containsKey(c)) &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// Get the top element of the stack. If the stack is empty, set a dummy value of &#x27;#&#x27; </span></span><br><span class=\"line\">\t\t\t\t<span class=\"type\">char</span> <span class=\"variable\">topElement</span> <span class=\"operator\">=</span> stack.empty() ? <span class=\"string\">&#x27;#&#x27;</span> : stack.pop();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// If the mapping for this bracket doesn&#x27;t match the stack&#x27;s top element, return false. </span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (topElement != <span class=\"built_in\">this</span>.mappings.get(c)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//If it was an opening bracket, push to the stack  </span></span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tstack.push(c);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//If the stack still contains elements, then it is an invalid expression. </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: \tO(n)\tWe simply traverse the given string one character at a time and push </span><br><span class=\"line\">\t\t\t\tand pop operations on a stack take O(1) time </span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: \tO(n)\tIn the worst case, when we push all opening brackets onto the stack, we</span><br><span class=\"line\">\t\t\t\twill end up pushing all the brackets onto the stack eg (((((((((((</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"mergeTwoSortedLists\"></a></p>\n<h1 id=\"21-Merge-Two-Sorted-Lists\"><a href=\"#21-Merge-Two-Sorted-Lists\" class=\"headerlink\" title=\"21-Merge Two Sorted Lists\"></a>21-Merge Two Sorted Lists</h1><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing<br>together the nodes of the first two lists. </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: 1-&gt;2-&gt;4, 1-&gt;3-&gt;4</span><br><span class=\"line\">Output: 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4</span><br></pre></td></tr></table></figure>\n\n\n\n<p><br><br><br><a name=\"mergeTwoSortedListsRecursive\"></a></p>\n<h2 id=\"Recursive\"><a href=\"#Recursive\" class=\"headerlink\" title=\"Recursive\"></a>Recursive</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ListNode <span class=\"title function_\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (l1 == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> l2; </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (l2 == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (l1.val &lt; l2.val) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tl1.next = mergeTwoLists(l1.next, l2);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> l1;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tl2.next = mergeTwoLists(l1, l2.next);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> l2;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br><a name=\"mergeTwoSortedListsNonRecursive\"></a></p>\n<h2 id=\"Non-Recursive-1\"><a href=\"#Non-Recursive-1\" class=\"headerlink\" title=\"Non-Recursive\"></a>Non-Recursive</h2><p>Similar approach and implemenation to the recursive solution above but a little more intuitive and<br>does not require memory being held on the stack (as the recursive program runs it has to store<br>variables on the stack so that when the program jumps back it is able to continue) </p>\n<p>As with most other linked list solutions, a dummy node is utilized and two pointers are used to keep<br>track of where we are in the the two linked lists. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> ListNode <span class=\"title function_\">mergeTwoLists</span><span class=\"params\">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">ListNode</span> <span class=\"variable\">returnNode</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(-<span class=\"number\">1</span>); </span><br><span class=\"line\">\t\t<span class=\"type\">ListNode</span> <span class=\"variable\">headNode</span> <span class=\"operator\">=</span> returnNode; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (l1 != <span class=\"literal\">null</span> &amp;&amp; l2 != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (l1.val &lt;= l2.val) &#123;</span><br><span class=\"line\">\t\t\t\treturnNode.next = l1;</span><br><span class=\"line\">\t\t\t\tl1 = l1.next;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\treturnNode.next = l2;</span><br><span class=\"line\">\t\t\t\tl2 = l2.next; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\treturnNode = returnNode.next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (l1 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\treturnNode.next = l2;</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (l2 == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">\t\t\treturnNode.next = l1; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> headNode.next; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"generateParentheses\"></a></p>\n<h1 id=\"22-Generate-Parentheses\"><a href=\"#22-Generate-Parentheses\" class=\"headerlink\" title=\"22-Generate Parentheses\"></a>22-Generate Parentheses</h1><p>Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example: </span><br><span class=\"line\"></span><br><span class=\"line\">Given n=3, a solution set is: </span><br><span class=\"line\"></span><br><span class=\"line\">[</span><br><span class=\"line\">  &quot;((()))&quot;,</span><br><span class=\"line\">  &quot;(()())&quot;.</span><br><span class=\"line\">  &quot;(())()&quot;,</span><br><span class=\"line\">  &quot;()(())&quot;,</span><br><span class=\"line\">  &quot;()()()&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n<p><br><br><br><a name=\"generateParenthesesBruteForce\"></a></p>\n<h2 id=\"Brute-Force-4\"><a href=\"#Brute-Force-4\" class=\"headerlink\" title=\"Brute Force\"></a>Brute Force</h2><p><strong>Intuition</strong> </p>\n<p>We can generate all 2^(2n) sequences of <code>(</code> and <code>)</code> characters. Then we can check if each one is valid</p>\n<br>\n\n<p><strong>Algorithm</strong> </p>\n<p>To generate all sequences, we use recursion. All sequences of length <code>n</code> is just <code>(</code> plus all sequences<br>of length <code>n-1</code>, and then <code>)</code> plus all sequences of length <code>n-1</code>. </p>\n<p>To check whether a sequence is valid, we keep track of <code>balance</code>, the net number of opening brackets<br>minuts closing brackets. If it falls below zero at any time, or doesn‚Äôt end in zero, the sequence is<br>invalid - otherwise it is valid. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">generateParenthesis</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;String&gt; combinations = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(); </span><br><span class=\"line\">\t\tgenerateAll(<span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">2</span>*n], <span class=\"number\">0</span>, combinations);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> combinations;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">generateAll</span><span class=\"params\">(<span class=\"type\">char</span>[] current, <span class=\"type\">int</span> pos, List&lt;String&gt; result)</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pos == current.length) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (valid(current)) &#123;</span><br><span class=\"line\">\t\t\t\tresult.add(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(current));</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tcurrent[pos] = <span class=\"string\">&#x27;(&#x27;</span>;</span><br><span class=\"line\">\t\t\tgenerateAll(current, pos+<span class=\"number\">1</span>, result);</span><br><span class=\"line\">\t\t\tcurrent[pos] = <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">\t\t\tgenerateAll(current, pos+<span class=\"number\">1</span>, result);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">valid</span><span class=\"params\">(<span class=\"type\">char</span>[] current)</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> <span class=\"variable\">balance</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">char</span> c : current) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(c == <span class=\"string\">&#x27;(&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\tbalance++;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tbalance--;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(balance &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (balance == <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: \tO(2^2n * n)\tFor each of 2^2n sequences, we need to create an validate the </span><br><span class=\"line\">\t\t\t\t\tsequence, which takes O(n) work in the worst case </span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: \tO(2^2n * n) \tNaively, every sequence could be valid, see Closure number for</span><br><span class=\"line\">\t\t\t\t\ta tighter asymptotic bound </span><br></pre></td></tr></table></figure>\n\n\n\n\n<p><br><br><br><a name=\"generateParenthesesBacktracking\"></a></p>\n<h2 id=\"Backtracking-1\"><a href=\"#Backtracking-1\" class=\"headerlink\" title=\"Backtracking\"></a>Backtracking</h2><p><strong>Intuition and Algorithm</strong> </p>\n<p>Instead of adding <code>(</code> or <code>)</code> every time as we do in the Brute Force algorithm, let‚Äôs only add them<br>when we know it will remain a valid sequence. We can do this by keeping track of the number of opening<br>and closing brackets we have placed so far. </p>\n<p>We can start an opening bracket if we still have one (of <code>n</code>) left to place. And we can start a closing<br>bracket if it would not exceed the number of opening brackets </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">generateParenthesis</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tList&lt;String&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(); </span><br><span class=\"line\">\t\tbacktrack(ans, <span class=\"string\">&quot;&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">backtrack</span><span class=\"params\">(List&lt;String&gt; ans, String cur, <span class=\"type\">int</span> open, <span class=\"type\">int</span> close, <span class=\"type\">int</span> max)</span>&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (cur.length() == max*<span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tans.add(cur);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(open &lt; max) &#123;</span><br><span class=\"line\">\t\t\tbacktrack(ans, cur + <span class=\"string\">&quot;(&quot;</span>, open + <span class=\"number\">1</span>, close, max);</span><br><span class=\"line\">\t\t&#125; </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (close &lt; open) &#123;</span><br><span class=\"line\">\t\t\tbacktrack(ans, cur + <span class=\"string\">&quot;)&quot;</span>, open, close +<span class=\"number\">1</span>, max);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong> </p>\n<p>Our complexity analysis rests on understanding how many elements there are in <code>generateParenthesis(n)</code>.<br>This analysis is outside the scope of this article, but it turns out this is the nth Catalan number<br>1&#x2F;(n+1) (2n choose n), which is bounded asymptotically by 4^n&#x2F;(n* sqrt(n)). </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: \tO((4^n)/sqrt(n))\tEach valid sequence has at most n steps during the </span><br><span class=\"line\">\t\t\t\t\t\tbacktracking procedure</span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: \tO((4^n)/sqrt(n))\tAs described above and using O(n) space to store the</span><br><span class=\"line\">\t\t\t\t\t\tsequence</span><br></pre></td></tr></table></figure>\n\n<p>Another way to think about the runtime of backtracking algorithms on interviewers is O(b^d), where b is<br>the branching factor and d is the maximum depth of recursion. </p>\n<p>Backtracking is characterized by a number of decisions b that can be made at each level of recursion.<br>If you visualize the recursion tree, this is the number of children each internal node has. You can<br>also think of b as standing for ‚Äúbase‚Äù, which helps us remember that b is the base of the exponential.</p>\n<p>If we make b decisions at each level of recursion, and we expand the recursion tree to d levels (ie.<br>each path has a length of d), then we get b^d nodes. Since backtracking is exhaustive and must visit<br>each of these nodes, the runtime is O(b^d)</p>\n<p><br><br><br><a name=\"generateParenthesesClosureNumber\"></a></p>\n<h2 id=\"Closure-Number\"><a href=\"#Closure-Number\" class=\"headerlink\" title=\"Closure Number\"></a>Closure Number</h2><p>To enumerate something, generally we would like to express it as a sum of disjoint subsets that are<br>easier to count. </p>\n<p>Consider the <em>closure number</em> of a valid parentheses sequence <code>s</code>: the least <code>index &gt;= 0</code> so that<br>&#96;S[0], S[1], ‚Ä¶ , S[2 * index + 1] is valid. Clearly, every parentheses sequence has a unique closure<br>number. We can try to enumerate them individually. </p>\n<p><br><br></p>\n<p><strong>Algorithm</strong> </p>\n<p>For each closure number c, we know the starting and ending brackets must be at index <code>0</code> and<br><code>2 * c + 1</code>. Then, the <code>2 * c</code> elements between must be a valid sequence, plus the rest of the elements<br>must be a valid sequence.</p>\n<p>This is just some minor improvement to the backtracking solution using the fact that for all valid<br>solutions the first char is always ‚Äò(‚Äò and the lat char is always ‚Äò)‚Äô. We initialize the starting<br>string to ‚Äò(‚Äò and set the recursion bottom condition to string reaching length of <code>2 * n - 1</code> - we know<br>that we need to append a bracket at the end. There will not be much of an improvement in the runtime<br>however. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">generateParenthesis</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">\t\tList&lt;String&gt; ans = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>(); </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (n==<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tans.add(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> c=<span class=\"number\">0</span>; c&lt;n; ++c)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String left: generateParenthesis(c))</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span> (String right: generateParenthesis(n-<span class=\"number\">1</span>-c))</span><br><span class=\"line\">\t\t\t\t\t\tans.add(<span class=\"string\">&quot;(&quot;</span> + left + <span class=\"string\">&quot;)&quot;</span> + right);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Complexity Analysis</strong> </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Time Complexity: \tO((4^n)/sqrt(n))</span><br><span class=\"line\"></span><br><span class=\"line\">Space Complexity: \tO((4^n)/sqrt(n))</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<p><br><br><br></p>\n<hr>\n<p><a name=\"mergeKSortedLists\"></a></p>\n<h1 id=\"23-Merge-k-Sorted-Lists\"><a href=\"#23-Merge-k-Sorted-Lists\" class=\"headerlink\" title=\"23-Merge k Sorted Lists\"></a>23-Merge k Sorted Lists</h1><p>Merge k sorted linked lists and return it as one sorted list. Analyze and descibe its complexity: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Example: </span><br><span class=\"line\"></span><br><span class=\"line\">Input: </span><br><span class=\"line\">[</span><br><span class=\"line\">\t1 -&gt; 4 -&gt; 5,</span><br><span class=\"line\">\t1 -&gt; 3 -&gt; 4,</span><br><span class=\"line\">\t2 -&gt; 6</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">Output: 1 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 4 -&gt; 5 -&gt; 6</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><br><br><br><a name=\"mergeKSortedLists\"></a></p>\n<h2 id=\"Brute-Force-5\"><a href=\"#Brute-Force-5\" class=\"headerlink\" title=\"Brute Force\"></a>Brute Force</h2><p><strong>Intuition and Algorithm</strong> </p>\n<ul>\n<li>Traverse all the linked lists and collect the values of the nodes into an array</li>\n<li>Sort and iterate over this array to get the proper value of nodes</li>\n<li>Create a new sorted linked list and extend it with the new nodes</li>\n</ul>\n<p>As for sorting you can refer to the Algorithms&#x2F;Data Structures CheatSheet for more about sorting algorithms. </p>\n<p><br><br><br></p>\n<hr>\n<p><a name=\"lruCache\"></a></p>\n<h1 id=\"146-LRU-Cache\"><a href=\"#146-LRU-Cache\" class=\"headerlink\" title=\"146-LRU Cache\"></a>146-LRU Cache</h1><p>Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: <code>get</code> and <code>put</code>. </p>\n<p><code>get(key)</code> - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return <code>-1</code> </p>\n<p><code>put(key, value)</code> - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item. </p>\n<p><strong>Follow up:</strong><br>Could both of these operations be done in <strong>O(1)</strong> time complexity?</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LRUCache cache = new LRUCache(2 /* capacity */);</span><br><span class=\"line\"></span><br><span class=\"line\">cache.put(1, 1);</span><br><span class=\"line\">cache.put(2, 2);</span><br><span class=\"line\">cache.get(1); \t\t\t// returns 1 </span><br><span class=\"line\">cache.put(3, 3); \t\t// evicts key 2</span><br><span class=\"line\">cache.get(2);\t\t\t// returns -1 (not found)</span><br><span class=\"line\">\t</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Index\"><a href=\"#Index\" class=\"headerlink\" title=\"Index\"></a>Index</h1><ol>\n<li><a href=\"#lowest-common-ancestor\">Lowest Common Ancestor</a></li>\n<li><a href=\"#count-and-say\">Count And Say</a></li>\n<li><a href=\"#maximum-subarray\">Maximum SubArray</a></li>\n<li><a href=\"#plus-one\">Plus One</a></li>\n<li><a href=\"#sqrt-of-x\">Sqrt of X</a></li>\n<li><a href=\"#climbing-stairs\">Climbing Stairs</a></li>\n<li><a href=\"#remove-duplicates-from-sorted-list\">Remove Duplicates from sorted list</a></li>\n<li><a href=\"#same-tree\">Same Tree</a></li>\n<li><a href=\"#symmetric-tree\">Symmetric Tree</a></li>\n<li><a href=\"#max-depth-of-binary-tree\">Max Depth of Binary Tree</a></li>\n<li><a href=\"#convert-sorted-array-to-binary-search-tree\">Convert Sorted Array to Binary Search Tree</a></li>\n<li><a href=\"#balanced-binary-tree\">Balanced Binary Tree</a></li>\n<li><a href=\"#minimum-depth-of-binary-tree\">Minimum Depth of Binary Tree</a></li>\n<li><a href=\"#path-sum\">Path Sum</a></li>\n<li><a href=\"#pascal's-triangle\">Pascal‚Äôs Triangle</a></li>\n<li><a href=\"#valid-palindrome\">Valid Palindrome</a></li>\n<li><a href=\"#pascal's-triangle-ii\">Pascal‚Äôs Triangle II</a></li>\n<li><a href=\"#best-time-to-buy-and-sell-stock\">Best Time to Buy and Sell Stock</a></li>\n<li><a href=\"#best-time-to-buy-and-sell-stock-ii\">Best Time to Buy and Sell Stock II</a></li>\n<li><a href=\"#single-number\">Single Number</a></li>\n<li><a href=\"#linked-list-cycle\">Linked List Cycle</a></li>\n<li><a href=\"#min-stack\">Min Stack</a></li>\n<li><a href=\"#intersection-of-two-linked-lists\">Intersection of Two Linked Lists</a></li>\n<li><a href=\"#two-sum-ii---input-array-is-sorted\">Two Sum II - Input array is sorted</a></li>\n<li><a href=\"#excel-sheet-column-title\">Excel Sheet Column Title</a></li>\n<li><a href=\"#majority-element\">Majority Element</a></li>\n<li><a href=\"#excel-sheet-column-number\">Excel Sheet Column Number</a></li>\n<li><a href=\"#factorial-trailing-zeroes\">Factorial Trailing Zeroes</a></li>\n<li><a href=\"#combine-two-tables\">Combine Two Tables</a></li>\n<li><a href=\"#second-highest-salary\">Second Highest Salary</a></li>\n<li><a href=\"#employees-earning-more-than-their-managers\">Employees Earning More Than Their Managers</a></li>\n<li><a href=\"#duplicate-emails\">Duplicate Emails</a></li>\n<li><a href=\"#customers-who-never-order\">Customers Who Never Order</a></li>\n<li><a href=\"#rotate-array\">Rotate Array</a></li>\n<li><a href=\"#delete-duplicate-emails\">Delete Duplicate Emails</a></li>\n<li><a href=\"#rising-temperature\">Rising Temperature</a></li>\n<li><a href=\"#x-of-a-kind-in-a-deck-of-cards\">X of a Kind in a Deck of Cards</a></li>\n<li><a href=\"#reverse-integer\">Reverse Integer</a></li>\n<li><a href=\"#add-two-numbers\">Add Two Numbers</a></li>\n<li><a href=\"#longest-substring-without-repeating-characters\">Longest Substring Without Repeating Characters</a></li>\n<li><a href=\"#house-robber\">House Robber</a></li>\n<li><a href=\"#happy-number\">Happy Number</a></li>\n<li><a href=\"#remove-linked-list-elements\">Remove Linked List Elements</a></li>\n<li><a href=\"#count-primes\">Count Primes</a></li>\n<li><a href=\"#isomorphic-strings\">Isomorphic Strings</a></li>\n<li><a href=\"#reverse-linkedlist\">Reverse LinkedList</a></li>\n<li><a href=\"#contains-duplicate\">Contains Duplicate</a></li>\n<li><a href=\"#contains-duplicate-ii\">Contains Duplicate II</a></li>\n<li><a href=\"#implement-stack-using-queues\">Implement Stack Using Queues</a></li>\n<li><a href=\"#invert-binary-tree\">Invert Binary Tree</a></li>\n<li><a href=\"#fibonacci-number\">Fibonacci Number</a></li>\n<li><a href=\"#kth-largest-element\">kth Largest Element</a></li>\n<li><a href=\"#power-of-two\">Power Of Two</a></li>\n<li><a href=\"#valid-sudoku\">Valid Sudoku</a></li>\n<li><a href=\"#implement-queue-using-stack\">Implement Queue Using Stack</a></li>\n<li><a href=\"#palindrome-linkedlist\">Palindrome LinkedList</a></li>\n<li><a href=\"#delete-node-in-a-linked-list\">Delete Node in a Linked List</a></li>\n<li><a href=\"#is-anagram\">Is Anagram</a></li>\n<li><a href=\"#binary-tree-paths\">Binary Tree Paths</a></li>\n<li><a href=\"#add-digits\">Add Digits</a></li>\n<li><a href=\"#largest-perimeter-triangle\">Largest Perimeter Triangle</a></li>\n<li><a href=\"#ugly-number\">Ugly Number</a></li>\n<li><a href=\"#missing-number\">Missing Number</a></li>\n<li><a href=\"#is-bad-version\">Is Bad Version</a></li>\n<li><a href=\"#move-zeroes\">Move Zeroes</a></li>\n<li><a href=\"#word-pattern\">Word Pattern</a></li>\n<li><a href=\"#can-win-nim\">Can Win Nim</a></li>\n<li><a href=\"#power-of-three\">Power Of Three</a></li>\n<li><a href=\"#power-of-four\">Power of Four</a></li>\n<li><a href=\"#reverse-string\">Reverse String</a></li>\n<li><a href=\"#implement-strstr()\">Implement strStr()</a></li>\n<li><a href=\"#reverse-vowels-of-a-string\">Reverse Vowels of a String</a></li>\n<li><a href=\"#intersection-of-two-arrays\">Intersection of two arrays</a></li>\n<li><a href=\"#is-perfect-square\">Is Perfect Square</a></li>\n<li><a href=\"#sum-of-two-integers\">Sum of Two Integers</a></li>\n<li><a href=\"#guess-number-higher-or-lower\">Guess Number Higher or Lower</a></li>\n<li><a href=\"#ransom-note\">Ransom Note</a></li>\n<li><a href=\"#first-unique-character-in-a-string\">First Unique Character in a String</a></li>\n<li><a href=\"#find-the-difference\">Find the Difference</a></li>\n<li><a href=\"#nth-digit\">Nth Digit</a></li>\n<li><a href=\"#sum-of-left-leaves\">Sum of Left Leaves</a></li>\n<li><a href=\"#longest-palindrome\">Longest Palindrome</a></li>\n<li><a href=\"#fizz-buzz\">Fizz Buzz</a></li>\n<li><a href=\"#third-maximum-number\">Third maximum Number</a></li>\n<li><a href=\"#add-two-strings\">Add Two Strings</a></li>\n<li><a href=\"#construct-quad-tree\">Construct Quad Tree</a></li>\n<li><a href=\"#n-ary-tree-level-order-traversal\">N-ary Tree Level Order Traversal</a></li>\n<li><a href=\"#number-of-segments-in-a-string\">Number of Segments in a String</a></li>\n<li><a href=\"#binary-tree-level-order-traversal\">Binary Tree Level Order Traversal</a></li>\n<li><a href=\"#path-sum-iii\">Path Sum III</a></li>\n<li><a href=\"#find-all-anagrams-in-a-string\">Find All Anagrams in a String</a></li>\n<li><a href=\"#arranging-coins\">Arranging Coins</a></li>\n<li><a href=\"#hamming-distance\">Hamming Distance</a></li>\n<li><a href=\"#string-compression\">String Compression</a></li>\n<li><a href=\"#number-of-boomerangs\">Number of Boomerangs</a></li>\n<li><a href=\"#find-all-numbers-disappeared-in-an-array\">Find All Numbers Disappeared in an Array</a></li>\n<li><a href=\"#assign-cookies\">Assign Cookies</a></li>\n<li><a href=\"#poor-pigs\">Poor Pigs</a></li>\n<li><a href=\"#find-pivot-index\">Find Pivot Index</a></li>\n<li><a href=\"#squares-of-a-sorted-array\">Squares of a Sorted Array</a></li>\n<li><a href=\"#repeated-substring-pattern\">Repeated Substring Pattern</a></li>\n<li><a href=\"#island-perimeter\">Island Perimeter</a></li>\n<li><a href=\"#number-complement\">Number Complement</a></li>\n<li><a href=\"#binary-watch\">Binary Watch</a></li>\n<li><a href=\"#minimum-moves-to-equal-array-elements\">Minimum Moves to Equal Array Elements</a></li>\n<li><a href=\"#license-key-formatting\">License Key Formatting</a></li>\n<li><a href=\"#max-consecutive-ones\">Max Consecutive Ones</a></li>\n<li><a href=\"#permutations\">Permutations</a></li>\n<li><a href=\"#construct-the-rectangle\">Construct the Rectangle</a></li>\n<li><a href=\"#merge-intervals\">Merge Intervals</a></li>\n<li><a href=\"#merged-sorted-lists\">Merged sorted lists</a></li>\n<li><a href=\"#next-greater-element-i\">Next Greater Element I</a></li>\n<li><a href=\"#string-without-aaa-or-bbb\">String Without AAA or BBB</a></li>\n<li><a href=\"#keyboard-row\">Keyboard Row</a></li>\n<li><a href=\"#find-mode-in-binary-search-tree\">Find Mode in Binary Search Tree</a></li>\n<li><a href=\"#base-7\">Base 7</a></li>\n<li><a href=\"#relative-ranks\">Relative Ranks</a></li>\n<li><a href=\"#perfect-number\">Perfect Number</a></li>\n<li><a href=\"#detect-capital\">Detect Capital</a></li>\n<li><a href=\"#longest-uncommon-subsequence-i\">Longest Uncommon Subsequence I</a></li>\n<li><a href=\"#course-schedule-ii\">Course Schedule II</a></li>\n<li><a href=\"#letter-combinations-of-a-phone-number\">Letter Combinations of a Phone Number</a></li>\n<li><a href=\"#sudoku-solver\">Sudoku Solver</a></li>\n<li><a href=\"#bulls-and-cows\">Bulls and Cows</a></li>\n<li><a href=\"#n-queens-1\">N-Queens 1</a></li>\n<li><a href=\"#k-diff-pairs-in-an-array\">K-diff pairs in an Array</a></li>\n<li><a href=\"#is-subsequence\">Is Subsequence</a></li>\n<li><a href=\"#minimum-absolute-difference-in-bst\">Minimum Absolute Difference in BST</a></li>\n<li><a href=\"#bst-tree-to-greater-tree\">BST Tree to Greater Tree</a></li>\n<li><a href=\"#student-attendance-record-I\">Student Attendance Record I</a></li>\n<li><a href=\"#reverse-words-in-string-iii\">Reverse Words in String III</a></li>\n<li><a href=\"#quad-tree-intersection\">Quad Tree Intersection</a></li>\n<li><a href=\"#long-pressed-name\">Long Pressed Name</a></li>\n<li><a href=\"#binary-tree-zigzag-level-order-traversal\">Binary Tree Zigag Level Order Traversal</a></li>\n<li><a href=\"#array-partition-I\">Array Partition I</a></li>\n<li><a href=\"#reshape-the-matrix\">Reshape the matrix</a></li>\n<li><a href=\"#swap-nodes-in-pairs\">Swap Nodes in Pairs</a></li>\n<li><a href=\"#generate-parentheses\">Generate Parentheses</a></li>\n<li><a href=\"#distribute-candies\">Distribute Candies</a></li>\n<li><a href=\"#maximum-subproduct-subarray\">Maximum Subproduct Subarray</a></li>\n<li><a href=\"#binary-tree-right-side-view\">Binary Tree Right Side View</a></li>\n<li><a href=\"#find-minimum-in-rotated-sorted-array\">Find Minimum in Rotated Sorted Array</a></li>\n<li><a href=\"#binary-search-tree-iterator\">Binary Search Tree Iterator</a></li>\n<li><a href=\"#find-peak-element\">Find Peak Element</a></li>\n<li><a href=\"#next-permutation\">Next Permutation</a></li>\n<li><a href=\"#search-in-rotated-sorted-array\">Search in Rotated Sorted Array</a></li>\n<li><a href=\"#transpose-matrix\">Transpose Matrix</a></li>\n<li><a href=\"#merge-k-sorted-lists\">Merge K sorted lists</a></li>\n</ol>\n<hr>\n<hr>\n<h3 id=\"Lowest-Common-Ancestor\"><a href=\"#Lowest-Common-Ancestor\" class=\"headerlink\" title=\"Lowest Common Ancestor\"></a><a href=\"https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/\">Lowest Common Ancestor</a><a name=\"lowest-common-ancestor\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">lowestCommonAncestor</span><span class=\"params\">(TreeNode root, TreeNode p, TreeNode q)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">TreeNode</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> root;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p.val &lt; current.val &amp;&amp; q.val &lt; current.val)\t\t<span class=\"comment\">// Both located in left side.</span></span><br><span class=\"line\">            current = current.left;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p.val &gt; current.val &amp;&amp; q.val &gt; current.val)\t<span class=\"comment\">// Both located in right side</span></span><br><span class=\"line\">            current = current.right;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> current;\t\t<span class=\"comment\">// Seperate branches, therefore current is lca.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Count-And-Say\"><a href=\"#Count-And-Say\" class=\"headerlink\" title=\"Count And Say\"></a><a href=\"https://leetcode.com/problems/count-and-say/\">Count And Say</a><a name=\"count-and-say\"></a></h3><p>The updated version runs in 2ms and passes 96.85% submissions.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">countAndSay</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;1&quot;</span>;\t\t<span class=\"comment\">// initial result</span></span><br><span class=\"line\">    StringBuilder temp;\t\t\t<span class=\"comment\">// to create intermediate strings efficiently.</span></span><br><span class=\"line\">    <span class=\"type\">int</span> len;\t\t\t\t\t<span class=\"comment\">// length of the result string.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; n; ++i)&#123;\t<span class=\"comment\">// We need to iterate n-1 times, because 1st result is 1</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">startIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// we will look at each index of result</span></span><br><span class=\"line\">        temp = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();\t<span class=\"comment\">// and store freq,char in the builder</span></span><br><span class=\"line\">        len = result.length();</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (startIndex &lt; len)&#123;</span><br><span class=\"line\">            <span class=\"type\">char</span> <span class=\"variable\">ch</span> <span class=\"operator\">=</span> result.charAt(startIndex++);\t<span class=\"comment\">// get the char at startIndex, and increment it, because we also want to look at the next character</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;\t\t\t\t\t<span class=\"comment\">// intialize it&#x27;s count to 1, we just saw it.</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (startIndex &lt; len &amp;&amp; ch == result.charAt(startIndex))&#123;</span><br><span class=\"line\">                count++;\t\t\t<span class=\"comment\">// If next also matches, increment count and startIndex</span></span><br><span class=\"line\">                startIndex++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            temp.append(count).append(ch);\t<span class=\"comment\">// No more match, Add the freq and the char</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result = temp.toString();\t<span class=\"comment\">// Update result to generate the next cound-and-say</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Maximum-SubArray\"><a href=\"#Maximum-SubArray\" class=\"headerlink\" title=\"Maximum SubArray\"></a><a href=\"https://leetcode.com/problems/maximum-subarray/\">Maximum SubArray</a><a name=\"maximum-subarray\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxSubArray</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">localMax</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>];\t\t<span class=\"comment\">// keeps track of max sum between the previous and current</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">globalMax</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>];\t<span class=\"comment\">// keeps track of global max sum.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    The idea is as follows:</span></span><br><span class=\"line\"><span class=\"comment\">    If the current element is greater than the previous local max, then we found an element that is a better option then before.</span></span><br><span class=\"line\"><span class=\"comment\">    Then, if that localmax changed and is greater than our global max, update our global max.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        localMax = Math.max(localMax + nums[i], nums[i]);</span><br><span class=\"line\">        globalMax = Math.max(localMax, globalMax);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> globalMax;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Plus-One\"><a href=\"#Plus-One\" class=\"headerlink\" title=\"Plus One\"></a><a href=\"https://leetcode.com/problems/plus-one/\">Plus One</a><a name=\"plus-one\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] plusOne(<span class=\"type\">int</span>[] digits)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    digits[digits.length-<span class=\"number\">1</span>]++;\t\t\t<span class=\"comment\">// Add one to the last place.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (digits[digits.length-<span class=\"number\">1</span>] == <span class=\"number\">10</span>)\t<span class=\"comment\">// If it became 10,</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> digits.length-<span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i--)\t<span class=\"comment\">// Then add one to its previous place</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (digits[i] == <span class=\"number\">10</span>)&#123;\t<span class=\"comment\">// If that also results in 10, keep propogating that 1</span></span><br><span class=\"line\">                digits[i-<span class=\"number\">1</span>]++;\t\t<span class=\"comment\">// upstream</span></span><br><span class=\"line\">                digits[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (digits[<span class=\"number\">0</span>] == <span class=\"number\">10</span>)&#123;\t<span class=\"comment\">// If the index 0 is 10, then the number is a multiple of 10.</span></span><br><span class=\"line\">            digits = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[digits.length+<span class=\"number\">1</span>];</span><br><span class=\"line\">            digits[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;\t\t<span class=\"comment\">// So increase length by 1 and set index 0 to 1.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> digits;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Sqrt-of-X\"><a href=\"#Sqrt-of-X\" class=\"headerlink\" title=\"Sqrt of X\"></a><a href=\"https://leetcode.com/problems/sqrtx/\">Sqrt of X</a><a name=\"sqrt-of-x\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">mySqrt</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">x1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span> - (<span class=\"number\">100</span> - x)/<span class=\"number\">20</span>;\t\t<span class=\"comment\">// Using Newton&#x27;s method of computing square roots.</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">done</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!done)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">x2</span> <span class=\"operator\">=</span> x1 - (x1*x1 - x)/(<span class=\"number\">2</span>*x1);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x2 == x1)</span><br><span class=\"line\">            done = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            x1 = x2;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)x1-<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Climbing-Stairs\"><a href=\"#Climbing-Stairs\" class=\"headerlink\" title=\"Climbing Stairs\"></a><a href=\"https://leetcode.com/problems/climbing-stairs/\">Climbing Stairs</a><a name=\"climbing-stairs\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">climbStairs</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span>)\t\t<span class=\"comment\">// I chose n &lt; 4 because climbStairs(0 &lt;= n &lt;= 3) = n</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        dp[i] = i;</span><br><span class=\"line\">    <span class=\"comment\">//return naiveDP(n, dp);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> efficientDP(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">naiveDP</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> dp[])</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (dp[n] != <span class=\"number\">0</span>)\t\t<span class=\"comment\">// If already computed, return it.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">ways</span> <span class=\"operator\">=</span>  naiveDP(n-<span class=\"number\">1</span>, dp) + naiveDP(n-<span class=\"number\">2</span>, dp);\t<span class=\"comment\">// Just like Fibonacci.</span></span><br><span class=\"line\">    dp[n] = ways;\t\t<span class=\"comment\">// Save it.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ways;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">efficientDP</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">4</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n+<span class=\"number\">1</span>];\t\t<span class=\"comment\">// Initialize dp of length n+1 to store n&#x27;th way.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; i++)</span><br><span class=\"line\">        dp[i] = i;\t\t\t\t\t<span class=\"comment\">// climbStairs(0 &lt;= n &lt;= 3) = n</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>; i &lt;= n; i++)\t<span class=\"comment\">// climbStairs(n) = climbStairs(n-1) + climbstairs(n-2);</span></span><br><span class=\"line\">        dp[i] = dp[i-<span class=\"number\">1</span>] + dp[i-<span class=\"number\">2</span>];  <span class=\"comment\">// So fetch those values from the dp array.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[n];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Remove-Duplicates-from-sorted-list\"><a href=\"#Remove-Duplicates-from-sorted-list\" class=\"headerlink\" title=\"Remove Duplicates from sorted list\"></a><a href=\"https://leetcode.com/problems/remove-duplicates-from-sorted-list/\">Remove Duplicates from sorted list</a><a name=\"remove duplicates from sorted list\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">deleteDuplicates</span><span class=\"params\">(ListNode head)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">    <span class=\"comment\">// while we haven&#x27;t reached the tail</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"literal\">null</span> &amp;&amp; current.next != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">// if current&#x27;s next is the same as current, skip and update its next</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (current.next != <span class=\"literal\">null</span> &amp;&amp; current.val == current.next.val)</span><br><span class=\"line\">            current.next = current.next.next;</span><br><span class=\"line\">        current = current.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Same-Tree\"><a href=\"#Same-Tree\" class=\"headerlink\" title=\"Same Tree\"></a><a href=\"https://leetcode.com/problems/same-tree/\">Same Tree</a><a name=\"same-tree\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSameTree</span><span class=\"params\">(TreeNode p, TreeNode q)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p == <span class=\"literal\">null</span> &amp;&amp; q == <span class=\"literal\">null</span>)\t\t<span class=\"comment\">// Two empty trees</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If one of the node is null, the two trees can&#x27;t be equal.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((p == <span class=\"literal\">null</span> &amp;&amp; q != <span class=\"literal\">null</span>) || (p != <span class=\"literal\">null</span> &amp;&amp; q == <span class=\"literal\">null</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// If the values in the two nodes are same, compare its&#x27;s left and right sub-tree.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (p.val == q.val)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isSameTree(p.left, q.left) &amp;&amp; isSameTree(p.right, q.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t<span class=\"comment\">// If nothing worked out, they can&#x27;t be same.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Symmetric-Tree\"><a href=\"#Symmetric-Tree\" class=\"headerlink\" title=\"Symmetric Tree\"></a><a href=\"https://leetcode.com/problems/symmetric-tree/\">Symmetric Tree</a><a name=\"symmetric-tree\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSymmetric</span><span class=\"params\">(TreeNode root)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isSymmetricIterative(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSymmetricIterative</span><span class=\"params\">(TreeNode root)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    Queue&lt;TreeNode&gt; track = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">    track.add(root);\t\t<span class=\"comment\">// Add the root twice so we can compare its left and right</span></span><br><span class=\"line\">    track.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!track.isEmpty())</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> track.poll();\t\t<span class=\"comment\">// Remove 2 nodes</span></span><br><span class=\"line\">        <span class=\"type\">TreeNode</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> track.poll();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"literal\">null</span> &amp;&amp; y == <span class=\"literal\">null</span>)\t\t<span class=\"comment\">// If they are both null, skip it.</span></span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x == <span class=\"literal\">null</span> || y == <span class=\"literal\">null</span> || x.val != y.val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t<span class=\"comment\">// If values don&#x27;t match or one is null</span></span><br><span class=\"line\">        track.add(x.left);\t\t<span class=\"comment\">// Otherwise add them in this order -&gt; LRRL</span></span><br><span class=\"line\">        track.add(y.right);\t\t<span class=\"comment\">// because we need to compare left most with the</span></span><br><span class=\"line\">        track.add(x.right);\t\t<span class=\"comment\">// right most, then inner left with inner right.</span></span><br><span class=\"line\">        track.add(y.left);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t<span class=\"comment\">// Everything&#x27;s all right, so they must be symmetric.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSymmetricRecursive</span><span class=\"params\">(TreeNode root)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helperRecursive(root, root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">helperRecursive</span><span class=\"params\">(TreeNode x, TreeNode y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"literal\">null</span> || y == <span class=\"literal\">null</span>)\t\t<span class=\"comment\">// Base Case: Both or one is null, so true</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (x.val == y.val &amp;&amp; helperRecursive(x.left, y.right) &amp;&amp; helperRecursive(x.right, y.left));</span><br><span class=\"line\">    <span class=\"comment\">// Check if values match and 1.left matches with the 2.right and 1.right matches with 2.left</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Max-Depth-of-Binary-Tree\"><a href=\"#Max-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"Max Depth of Binary Tree\"></a><a href=\"https://leetcode.com/problems/maximum-depth-of-binary-tree/\">Max Depth of Binary Tree</a><a name=\"max depth of binary tree\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">If root is null, height is 0 else add 1 and find if the left or the right has a greater depth.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxDepth</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root == <span class=\"literal\">null</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span> + Math.max(maxDepth(root.left), maxDepth(root.right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Convert-Sorted-Array-to-Binary-Search-Tree\"><a href=\"#Convert-Sorted-Array-to-Binary-Search-Tree\" class=\"headerlink\" title=\"Convert Sorted Array to Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/\">Convert Sorted Array to Binary Search Tree</a><a name=\"convert-sorted-array-to-binary-search-tree\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">sortedArrayToBST</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> aux(nums, <span class=\"number\">0</span>, nums.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> TreeNode <span class=\"title function_\">aux</span><span class=\"params\">(<span class=\"type\">int</span>[] n, <span class=\"type\">int</span> left, <span class=\"type\">int</span> right)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; right)\t\t\t\t\t<span class=\"comment\">// Either empty, or return a null node</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left+right+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;\t\t\t<span class=\"comment\">// Create a node with the middle value</span></span><br><span class=\"line\">    <span class=\"type\">TreeNode</span> <span class=\"variable\">root</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TreeNode</span>(n[mid]);</span><br><span class=\"line\">    root.left = aux(n, left, mid-<span class=\"number\">1</span>);\t<span class=\"comment\">// Compute the left (which is the mid in left side)</span></span><br><span class=\"line\">    root.right = aux(n, mid+<span class=\"number\">1</span>, right);\t<span class=\"comment\">// Compute the right (which is the mid in right side)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Balanced-Binary-Tree\"><a href=\"#Balanced-Binary-Tree\" class=\"headerlink\" title=\"Balanced Binary Tree\"></a><a href=\"https://leetcode.com/problems/balanced-binary-tree/\">Balanced Binary Tree</a><a name=\"balanced-binary-tree\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isBalanced</span><span class=\"params\">(TreeNode root)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> isBalancedBottomUp(root);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isBalancedTopDown</span><span class=\"params\">(TreeNode root)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"comment\">// if difference between root&#x27;s left and right is &gt; 1, they&#x27;re not balanced</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (Math.abs((getHeight(root.left) - getHeight(root.right))) &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// otherwise, we need to check if the left and right subtree are also balanced.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> isBalanced(root.left) &amp;&amp; isBalanced(root.right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getHeight</span><span class=\"params\">(TreeNode node)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Standard height of a binary tree calculator</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + Math.max(getHeight(node.left), getHeight(node.right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isBalancedBottomUp</span><span class=\"params\">(TreeNode root)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getHeight2(root) != -<span class=\"number\">1</span>;\t<span class=\"comment\">// -1 means not balanced.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getHeight2</span><span class=\"params\">(TreeNode node)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">lHeight</span> <span class=\"operator\">=</span> getHeight2(node.left);\t<span class=\"comment\">// Get the height of left and right tree</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rHeight</span> <span class=\"operator\">=</span> getHeight2(node.right);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// If at any point there was a height difference of more than 1 or previous node&#x27;s leftheight || rightheight returned -1, return -1 to let the next node know there was an imbalance.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((Math.abs(lHeight-rHeight) &gt; <span class=\"number\">1</span>) || lHeight == -<span class=\"number\">1</span> || rHeight == -<span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + Math.max(lHeight, rHeight); <span class=\"comment\">// Else carry on with the normal procedure</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Minimum-Depth-of-Binary-Tree\"><a href=\"#Minimum-Depth-of-Binary-Tree\" class=\"headerlink\" title=\"Minimum Depth of Binary Tree\"></a><a href=\"https://leetcode.com/problems/minimum-depth-of-binary-tree/\">Minimum Depth of Binary Tree</a><a name=\"minimum-depth-of-binary-tree\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minDepth</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Base case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// Left is null, find minheight from right side</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> + minDepth(root.right);</span><br><span class=\"line\">    <span class=\"comment\">// Right is null, find minheight from left side</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span> + minDepth(root.left);</span><br><span class=\"line\">    <span class=\"comment\">// Else, both are not null, so compute min height from the two sides.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span> + Math.min(minDepth(root.left), minDepth(root.right));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Path-Sum\"><a href=\"#Path-Sum\" class=\"headerlink\" title=\"Path Sum\"></a><a href=\"https://leetcode.com/problems/path-sum/\">Path Sum</a><a name=\"path-sum\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasPathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> sum)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t<span class=\"comment\">// No sum exist</span></span><br><span class=\"line\">    sum -= root.val;\t<span class=\"comment\">// Sum decreases</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span>)\t<span class=\"comment\">// If we are at a leaf</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum == <span class=\"number\">0</span>;\t<span class=\"comment\">// Check if the sum is 0.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hasPathSum(root.left, sum) || hasPathSum(root.right, sum);</span><br><span class=\"line\">    <span class=\"comment\">// Otherwise look if you can make sum = 0 by exploring the left or right side.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Pascal‚Äôs-Triangle\"><a href=\"#Pascal‚Äôs-Triangle\" class=\"headerlink\" title=\"Pascal‚Äôs Triangle\"></a><a href=\"https://leetcode.com/problems/pascals-triangle/\">Pascal‚Äôs Triangle</a><a name=\"pascal's-triangle\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">generate</span><span class=\"params\">(<span class=\"type\">int</span> numRows)</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; pt = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numRows; i++)\t<span class=\"comment\">// Need to add all n rows</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        List&lt;Integer&gt; temp = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();\t\t<span class=\"comment\">// temp list to store values</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt;= i; j++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == <span class=\"number\">0</span> || i == j)\t\t<span class=\"comment\">// First and last values are always 1.</span></span><br><span class=\"line\">                temp.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">            <span class=\"keyword\">else</span>\t<span class=\"comment\">// Else, get the previous row and surrounding two values and add them</span></span><br><span class=\"line\">                temp.add(pt.get(i-<span class=\"number\">1</span>).get(j-<span class=\"number\">1</span>) + pt.get(i-<span class=\"number\">1</span>).get(j));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        pt.add(temp);\t\t<span class=\"comment\">// Add it to pt.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pt;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Valid-Palindrome\"><a href=\"#Valid-Palindrome\" class=\"headerlink\" title=\"Valid Palindrome\"></a><a href=\"https://leetcode.com/problems/valid-palindrome/\">Valid Palindrome</a><a name=\"valid-palindrome\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPalindrome</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() &gt; <span class=\"number\">0</span>)&#123;\t\t<span class=\"comment\">// Only do this is s is not empty</span></span><br><span class=\"line\">        s = s.toLowerCase();\t<span class=\"comment\">// Convert it to lowercase</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// Initialize left and right pointers</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> s.length()-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right)\t<span class=\"comment\">// continue while we haven&#x27;t hit the middle of the string</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"comment\">// If char at left is not a letter or a number, skip it.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!Character.isLetter(s.charAt(left)) &amp;&amp; !Character.isDigit(s.charAt(left)))</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">            <span class=\"comment\">// Same with char at right.</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!Character.isLetter(s.charAt(right)) &amp;&amp; !Character.isDigit(s.charAt(right)))</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            <span class=\"comment\">//Char&#x27;s are now alphanumeric.</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (s.charAt(left) != s.charAt(right))\t<span class=\"comment\">// If they don&#x27;t match</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t<span class=\"comment\">// return false</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>\t<span class=\"comment\">// They matched, so try to match the inner string</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                left++;</span><br><span class=\"line\">                right--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t<span class=\"comment\">// No mismatch found, return true.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Pascal‚Äôs-Triangle-II\"><a href=\"#Pascal‚Äôs-Triangle-II\" class=\"headerlink\" title=\"Pascal‚Äôs Triangle II\"></a><a href=\"https://leetcode.com/problems/pascals-triangle-ii/\">Pascal‚Äôs Triangle II</a><a name=\"pascal's-triangle-ii\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">getRow</span><span class=\"params\">(<span class=\"type\">int</span> rowIndex)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    ArrayList&lt;Integer&gt; row = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    row.add(<span class=\"number\">1</span>);\t<span class=\"comment\">// First is always 1.</span></span><br><span class=\"line\">\t<span class=\"comment\">// Using the nth row formula to compute the coeeficients. You can google &quot;nth row Pascal&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; rowIndex; i++)</span><br><span class=\"line\">        row.add((<span class=\"type\">int</span>)(<span class=\"number\">1.0</span>*row.get(i)*(rowIndex-i)/(i+<span class=\"number\">1</span>)));</span><br><span class=\"line\">    <span class=\"keyword\">return</span> row;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Best-Time-to-Buy-and-Sell-Stock\"><a href=\"#Best-Time-to-Buy-and-Sell-Stock\" class=\"headerlink\" title=\"Best Time to Buy and Sell Stock\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">Best Time to Buy and Sell Stock</a><a name=\"best-time-to-buy-and-sell-stock\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The general idea is that if the price you are looking at right now in the array minus the minimum observed so far is greater than the maximum profit you recorded, update the max.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (prices.length == <span class=\"number\">0</span>)\t\t<span class=\"comment\">// Empty array</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> prices[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; prices.length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prices[i] &lt; min)</span><br><span class=\"line\">            min = prices[i];</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (prices[i] - min &gt; max)</span><br><span class=\"line\">            max = prices[i]-min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Best-Time-to-Buy-and-Sell-Stock-II\"><a href=\"#Best-Time-to-Buy-and-Sell-Stock-II\" class=\"headerlink\" title=\"Best Time to Buy and Sell Stock II\"></a><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\">Best Time to Buy and Sell Stock II</a><a name=\"best-time-to-buy-and-sell-stock-ii\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The general idea is that the moment you observe a valley and consecutive peak, make the trade by buying the stock on the valley day and selling it on the peak day.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProfit</span><span class=\"params\">(<span class=\"type\">int</span>[] prices)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; prices.length-<span class=\"number\">1</span>; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prices[i+<span class=\"number\">1</span>] &gt; prices[i])</span><br><span class=\"line\">            sum += (prices[i+<span class=\"number\">1</span>] - prices[i]);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Single-Number\"><a href=\"#Single-Number\" class=\"headerlink\" title=\"Single Number\"></a><a href=\"https://leetcode.com/problems/single-number/\">Single Number</a><a name=\"single-number\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The general idea is that XOR of two same numbers returns 0 and XOR with 0 returns the same number. So if there is only one element that doesn&#x27;t have a pair, all the remaining will XOR with themselves at one point and give 0 but not the singleton element.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">singleNumber</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">        num ^= nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Linked-List-Cycle\"><a href=\"#Linked-List-Cycle\" class=\"headerlink\" title=\"Linked List Cycle\"></a><a href=\"https://leetcode.com/problems/linked-list-cycle/\">Linked List Cycle</a><a name=\"linked-list-cycle\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Using the slow-fast runner technique.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasCycle</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">first</span> <span class=\"operator\">=</span> head;\t<span class=\"comment\">// Slow runner</span></span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">second</span> <span class=\"operator\">=</span> first.next;\t\t<span class=\"comment\">// Fast Runner</span></span><br><span class=\"line\">    <span class=\"comment\">// while second is not at the end or it isn&#x27;t the tail</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (second != <span class=\"literal\">null</span> &amp;&amp; second.next != <span class=\"literal\">null</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (second == first)\t<span class=\"comment\">// If fast made a full loop and met up with slow</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t<span class=\"comment\">// We got a cycle</span></span><br><span class=\"line\">        first = first.next;\t\t<span class=\"comment\">// Slow moves one step</span></span><br><span class=\"line\">        second = second.next.next;\t<span class=\"comment\">// Second advances two.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t<span class=\"comment\">// We don&#x27;t have a cycle</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Min-Stack\"><a href=\"#Min-Stack\" class=\"headerlink\" title=\"Min Stack\"></a><a href=\"https://leetcode.com/problems/min-stack/\">Min Stack</a><a name=\"min-stack\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MinStack</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> min;</span><br><span class=\"line\">    Stack&lt;Integer&gt; stack;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MinStack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        min = Integer.MAX_VALUE;</span><br><span class=\"line\">        stack = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        stack.push(x);\t\t<span class=\"comment\">// Push the value</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &lt; min)\t\t<span class=\"comment\">// If that value is minimum than we have, update min</span></span><br><span class=\"line\">            min = x;</span><br><span class=\"line\">        stack.push(min);\t<span class=\"comment\">// Push the minimum on top of the stack for constant time</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t<span class=\"comment\">// minimum retrieval.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        stack.pop();\t\t<span class=\"comment\">// Pop the minimum.</span></span><br><span class=\"line\">        stack.pop();\t\t<span class=\"comment\">// Pop the actual element meant to be popped</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (stack.isEmpty())\t<span class=\"comment\">// If empty, min is Max int value</span></span><br><span class=\"line\">            min = Integer.MAX_VALUE;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            min = stack.peek();\t<span class=\"comment\">// Otherwise, min would be the top most element since we</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t<span class=\"comment\">// always push the minimum on top of any element we push.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">top</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.elementAt(stack.size()-<span class=\"number\">2</span>);\t<span class=\"comment\">// Top element is actually at second last</span></span><br><span class=\"line\">    &#125;\t\t\t\t<span class=\"comment\">// index since the last element is the minimum.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMin</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> min;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Intersection-of-Two-Linked-Lists\"><a href=\"#Intersection-of-Two-Linked-Lists\" class=\"headerlink\" title=\"Intersection of Two Linked Lists\"></a><a href=\"https://leetcode.com/problems/intersection-of-two-linked-lists/\">Intersection of Two Linked Lists</a><a name=\"intersection-of-two-linked-lists\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The general idea is that if you are done traversing any of the lists, make it&#x27;s pointer point to the head of the other list and start iterating. The reasoning is that the second time they iterate, they will have traversed exactly the same distance (it&#x27;s length plus the other list&#x27;s head to the intersecting node) and will meet at the intersecting node.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">getIntersectionNode</span><span class=\"params\">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">pA</span> <span class=\"operator\">=</span> headA;</span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">pB</span> <span class=\"operator\">=</span> headB;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pA != pB)&#123;</span><br><span class=\"line\">        pA = pA == <span class=\"literal\">null</span> ? headB : pA.next;</span><br><span class=\"line\">        pB = pB == <span class=\"literal\">null</span> ? headA : pB.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pA;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Two-Sum-II-Input-array-is-sorted\"><a href=\"#Two-Sum-II-Input-array-is-sorted\" class=\"headerlink\" title=\"Two Sum II - Input array is sorted\"></a><a href=\"https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/\">Two Sum II - Input array is sorted</a><a name=\"two-sum-ii---input-array-is-sorted\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] twoSum(<span class=\"type\">int</span>[] numbers, <span class=\"type\">int</span> target) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, right = numbers.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right)\t<span class=\"comment\">// Narrow down the window from both sides until they add up.</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> numbers[left] + numbers[right];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sum &gt; target)\t<span class=\"comment\">// We overshot, so decrease the window from right</span></span><br><span class=\"line\">            right--;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (sum &lt; target)\t<span class=\"comment\">// Undershot, increase windows from left so next sum is more</span></span><br><span class=\"line\">            left++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span>;\t\t\t\t<span class=\"comment\">// Found the two numbers</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;left+<span class=\"number\">1</span>, right+<span class=\"number\">1</span>&#125;;\t<span class=\"comment\">// +1 because LeetCode followed 1-n indexing.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Excel-Sheet-Column-Title\"><a href=\"#Excel-Sheet-Column-Title\" class=\"headerlink\" title=\"Excel Sheet Column Title\"></a><a href=\"https://leetcode.com/problems/excel-sheet-column-title/\">Excel Sheet Column Title</a><a name=\"excel-sheet-column-title\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">convertToTitle</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* 1 is A and 26 is Z, so n-1 to change it to 0-25 scheme. Then, % 26 to find how</span></span><br><span class=\"line\"><span class=\"comment\">        much it is off on a full alphabet cycle, add 65 (ASCII for A) and convert it to char</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">        res = String.valueOf((<span class=\"type\">char</span>)(<span class=\"number\">65</span>+((n-<span class=\"number\">1</span>)%<span class=\"number\">26</span>))) + res;</span><br><span class=\"line\">        n = (n-<span class=\"number\">1</span>) / <span class=\"number\">26</span>;\t<span class=\"comment\">// Subtract 1 and divide by 26 to get prepare for the next character</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Majority-Element\"><a href=\"#Majority-Element\" class=\"headerlink\" title=\"Majority Element\"></a><a href=\"https://leetcode.com/problems/majority-element/\">Majority Element</a><a name=\"majority-element\"></a></h3><p>Uses <a href=\"https://www.geeksforgeeks.org/majority-element/\">Moore‚Äôs Algorithm</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// This is the implementation of Moore&#x27;s Algorithm for O(n) complexity.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">majorityElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">major</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (major == nums[i])</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            count--;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            major = nums[i];</span><br><span class=\"line\">            count = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> major;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Excel-Sheet-Column-Number\"><a href=\"#Excel-Sheet-Column-Number\" class=\"headerlink\" title=\"Excel Sheet Column Number\"></a><a href=\"https://leetcode.com/problems/excel-sheet-column-number/\">Excel Sheet Column Number</a><a name=\"excel-sheet-column-number\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Start from the end of String s, compute the ASCII for the char, +1 for 1-26 Alphabet-Scheme (hence -64 instead of -65) and multiply it to 26^&#123;distance from the end of the string&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">titleToNumber</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> s.length()-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> length; i &gt; -<span class=\"number\">1</span>; i--)</span><br><span class=\"line\">        total += (<span class=\"type\">int</span>)(s.charAt(i)-<span class=\"number\">64</span>) * Math.pow(<span class=\"number\">26</span>,length-i);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Factorial-Trailing-Zeroes\"><a href=\"#Factorial-Trailing-Zeroes\" class=\"headerlink\" title=\"Factorial Trailing Zeroes\"></a><a href=\"https://leetcode.com/problems/factorial-trailing-zeroes/\">Factorial Trailing Zeroes</a><a name=\"factorial-trailing-zeroes\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The general idea is that every factorial that has 5 as a multiple also has 2 to multiply to 10. So if we can count the number of times we can divide n by 5, should gives us the number of trailing zeroes. O(log(n) base 5) complexity.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">trailingZeroes</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">4</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        res += n / <span class=\"number\">5</span>;</span><br><span class=\"line\">        n /= <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Combine-Two-Tables\"><a href=\"#Combine-Two-Tables\" class=\"headerlink\" title=\"Combine Two Tables\"></a><a href=\"https://leetcode.com/problems/combine-two-tables/\">Combine Two Tables</a><a name=\"combine-two-tables\"></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select FirstName, LastName, City, State</span><br><span class=\"line\">from Person left join Address on Address.personId = person.personId;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Second-Highest-Salary\"><a href=\"#Second-Highest-Salary\" class=\"headerlink\" title=\"Second Highest Salary\"></a><a href=\"https://leetcode.com/problems/second-highest-salary/\">Second Highest Salary</a><a name=\"second-highest-salary\"></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select max(salary) as SecondHighestSalary</span><br><span class=\"line\">from Employee</span><br><span class=\"line\">where salary not in (select max(salary) from employee);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Employees-Earning-More-Than-Their-Managers\"><a href=\"#Employees-Earning-More-Than-Their-Managers\" class=\"headerlink\" title=\"Employees Earning More Than Their Managers\"></a><a href=\"https://leetcode.com/problems/employees-earning-more-than-their-managers/\">Employees Earning More Than Their Managers</a><a name=\"employees-earning-more-than-their-managers\"></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select emp.Name as Employee</span><br><span class=\"line\">from Employee emp, Employee man</span><br><span class=\"line\">where emp.managerId = man.Id and emp.salary &gt; man.salary;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Duplicate-Emails\"><a href=\"#Duplicate-Emails\" class=\"headerlink\" title=\"Duplicate Emails\"></a><a href=\"https://leetcode.com/problems/duplicate-emails/\">Duplicate Emails</a><a name=\"duplicate-emails\"></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select email</span><br><span class=\"line\">from person</span><br><span class=\"line\">group by (email)</span><br><span class=\"line\">having count(*) &gt; 1;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Customers-Who-Never-Order\"><a href=\"#Customers-Who-Never-Order\" class=\"headerlink\" title=\"Customers Who Never Order\"></a><a href=\"https://leetcode.com/problems/customers-who-never-order/\">Customers Who Never Order</a><a name=\"customers-who-never-order\"></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select name as Customers</span><br><span class=\"line\">from Customers</span><br><span class=\"line\">where customers.id not in (select customerId from orders);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Rotate-Array\"><a href=\"#Rotate-Array\" class=\"headerlink\" title=\"Rotate Array\"></a><a href=\"https://leetcode.com/problems/rotate-array/\">Rotate Array</a><a name=\"rotate-array\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">rotate</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">    k %= nums.length;\t\t<span class=\"comment\">// k == nums.length ? Then it&#x27;s a full rotation and no change</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span> , nums.length-<span class=\"number\">1</span>);\t<span class=\"comment\">// First reverse the full array</span></span><br><span class=\"line\">    reverse(nums, <span class=\"number\">0</span>, k-<span class=\"number\">1</span>);\t\t\t\t<span class=\"comment\">// Then reverse element from index 0 to k-1</span></span><br><span class=\"line\">    reverse(nums, k, nums.length-<span class=\"number\">1</span>);\t<span class=\"comment\">// Then reverse all elements from k to end of Array</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Reverse function that reverses the array from specified indices.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverse</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> start, <span class=\"type\">int</span> end)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> nums[start];</span><br><span class=\"line\">        nums[start] = nums[end];</span><br><span class=\"line\">        nums[end] = temp;</span><br><span class=\"line\">        start++;</span><br><span class=\"line\">        end--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Delete-Duplicate-Emails\"><a href=\"#Delete-Duplicate-Emails\" class=\"headerlink\" title=\"Delete Duplicate Emails\"></a><a href=\"https://leetcode.com/problems/delete-duplicate-emails/\">Delete Duplicate Emails</a><a name=\"delete-duplicate-emails\"></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete from Person</span><br><span class=\"line\">where Id not in (select min_id from</span><br><span class=\"line\">(select min(Id) as min_id from Person group by Email) as a)</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Rising-Temperature\"><a href=\"#Rising-Temperature\" class=\"headerlink\" title=\"Rising Temperature\"></a><a href=\"https://leetcode.com/problems/rising-temperature/\">Rising Temperature</a><a name=\"rising-temperature\"></a></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select w2.id</span><br><span class=\"line\">from weather w1, weather w2</span><br><span class=\"line\">where Datediff(w2.recorddate, w1.recorddate) = 1 and w2.temperature &gt; w1.temperature;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"X-of-a-Kind-in-a-Deck-of-Cards\"><a href=\"#X-of-a-Kind-in-a-Deck-of-Cards\" class=\"headerlink\" title=\"X of a Kind in a Deck of Cards\"></a><a href=\"https://leetcode.com/problems/x-of-a-kind-in-a-deck-of-cards/\">X of a Kind in a Deck of Cards</a><a name=\"x-of-a-kind-in-a-deck-of-cards\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasGroupsSizeX</span><span class=\"params\">(<span class=\"type\">int</span>[] deck)</span> &#123;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; freq = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; deck.length; i++)\t\t<span class=\"comment\">// Record the frequencies</span></span><br><span class=\"line\">        freq.put(deck[i],freq.getOrDefault(deck[i],<span class=\"number\">0</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">deck = [1,1,2,2,2,2,3,3,3,3,3,3]</span></span><br><span class=\"line\"><span class=\"comment\">number 1 has len of 2, number 2 has len of 4, number 3 has len of 6, they share a Greatest common divisor of 2, which means diving them into group of size X = 2, will be valid. Thus we just have to ensure each length (of a number) shares a Greatest Common Divisor that&#x27;s &gt;= 2.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">hcf</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: freq.keySet())</span><br><span class=\"line\">        hcf = gcd(hcf, freq.get(i));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> hcf &gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (y != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        temp = y;</span><br><span class=\"line\">        y = x % y;</span><br><span class=\"line\">        x = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Reverse-Integer\"><a href=\"#Reverse-Integer\" class=\"headerlink\" title=\"Reverse Integer\"></a><a href=\"https://leetcode.com/problems/reverse-integer/solution/\">Reverse Integer</a><a name=\"reverse-integer\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">reverse</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sign</span> <span class=\"operator\">=</span> x &lt; <span class=\"number\">0</span> ? -<span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">    x = x * sign;\t\t\t\t\t\t\t<span class=\"comment\">// Make x positive</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        n = n * <span class=\"number\">10</span> + x % <span class=\"number\">10</span>;\t\t\t\t<span class=\"comment\">// Start adding from the end.</span></span><br><span class=\"line\">        x /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)n == n ? (<span class=\"type\">int</span>)n*sign : <span class=\"number\">0</span>;\t<span class=\"comment\">// Try converting to int from long, if no change,</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Return n * sign, else 0 cause overflow.</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Add-Two-Numbers\"><a href=\"#Add-Two-Numbers\" class=\"headerlink\" title=\"Add Two Numbers\"></a><a href=\"https://leetcode.com/problems/add-two-numbers/submissions/\">Add Two Numbers</a><a name=\"add-two-numbers\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">addTwoNumbers</span><span class=\"params\">(ListNode l1, ListNode l2)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">carry</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t<span class=\"comment\">// To record the carry</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t<span class=\"comment\">// To record the total of two vals</span></span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">dummy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>);\t\t<span class=\"comment\">// Dummy&#x27;s next is the actual head</span></span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> dummy;</span><br><span class=\"line\">    <span class=\"keyword\">do</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l1 == <span class=\"literal\">null</span>)\t\t\t\t\t\t<span class=\"comment\">// If one of the node is null, we set it to a</span></span><br><span class=\"line\">            l1 = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>);\t\t\t<span class=\"comment\">// dummy value of 0 so we can adjust for</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (l2 == <span class=\"literal\">null</span>)\t\t\t\t\t\t<span class=\"comment\">// different length of the two lists.</span></span><br><span class=\"line\">            l2 = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        sum = l1.val + l2.val + carry;\t\t<span class=\"comment\">// Add the two vals and the carry.</span></span><br><span class=\"line\">        carry = sum &lt; <span class=\"number\">10</span> ? <span class=\"number\">0</span> : <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">// Record the carry for the next iteration</span></span><br><span class=\"line\">        curr.next = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(sum % <span class=\"number\">10</span>);\t<span class=\"comment\">// next node&#x27;s value is sum % 10.</span></span><br><span class=\"line\">        curr = curr.next;\t\t\t\t\t<span class=\"comment\">// advance current, l1 and l2.</span></span><br><span class=\"line\">        l1 = l1.next;</span><br><span class=\"line\">        l2 = l2.next;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(l1 != <span class=\"literal\">null</span> || l2 != <span class=\"literal\">null</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (carry == <span class=\"number\">1</span>)\t\t\t\t\t\t\t<span class=\"comment\">// In the end, if carry is 1, it was from</span></span><br><span class=\"line\">        curr.next = <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(carry);\t<span class=\"comment\">// from adding last terms, so make next node 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;\t\t\t\t\t\t<span class=\"comment\">// Return the actual head.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Longest-Substring-Without-Repeating-Characters\"><a href=\"#Longest-Substring-Without-Repeating-Characters\" class=\"headerlink\" title=\"Longest Substring Without Repeating Characters\"></a><a href=\"https://leetcode.com/problems/longest-substring-without-repeating-characters/\">Longest Substring Without Repeating Characters</a><a name=\"longest-substring-without-repeating-characters\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">lengthOfLongestSubstring</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">null</span> || s.length() == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span>[] hash = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">128</span>];\t\t\t\t\t<span class=\"comment\">// To store the occurence of characters</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">maxLength</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, j = <span class=\"number\">0</span>; j &lt; s.length(); j++)&#123;</span><br><span class=\"line\">        i = Math.max(hash[s.charAt(j)], i);\t\t<span class=\"comment\">// Check the most recent index of character.</span></span><br><span class=\"line\">        maxLength = Math.max(maxLength, j-i+<span class=\"number\">1</span>);\t<span class=\"comment\">// That minus current pointer gives length</span></span><br><span class=\"line\">        hash[s.charAt(j)] = j+<span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">// Record the index of the next character.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> maxLength;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"House-Robber\"><a href=\"#House-Robber\" class=\"headerlink\" title=\"House Robber\"></a><a href=\"https://leetcode.com/problems/house-robber\">House Robber</a><a name=\"house-robber\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The basic idea is that if you are robbing house i, the maximum loot may come from by robbing the i-2th house or by robbing the i-3th house. Therefore rob both and then find the path that gave the maximum profit.</span></span><br><span class=\"line\"><span class=\"comment\">Example: loot = [1,9,3,8,4,3,6,4,3,5,7,6]</span></span><br><span class=\"line\"><span class=\"comment\">Profit DP = [1,9,4,17,13,20,23,24,26,29,33,35]</span></span><br><span class=\"line\"><span class=\"comment\">Here,</span></span><br><span class=\"line\"><span class=\"comment\">\tdp[2] = loot[2] + loot[1]</span></span><br><span class=\"line\"><span class=\"comment\">\tdp[4] = loot[4] + max(dp[2], dp[1])</span></span><br><span class=\"line\"><span class=\"comment\">\tdp[5] = loot[5] + max(dp[3], dp[2]) and so on.</span></span><br><span class=\"line\"><span class=\"comment\">In the end, just compare the last two elements to check which path gave us the maximum profit.</span></span><br><span class=\"line\"><span class=\"comment\">Some people might not prefer modifying the original nums array. In that case, you can initialize another dp array of same length, initialize the first two elements as dp[0] = nums[0] and dp[1] = nums[1] and dp[3] = nums[0] + nums[2] and then performing the same loop. In that case, you would be using O(n) space.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">rob</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span> || nums == <span class=\"literal\">null</span>)\t\t\t<span class=\"comment\">// 3 Base Case</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(nums[<span class=\"number\">0</span>], nums[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        nums[<span class=\"number\">2</span>] = nums[<span class=\"number\">0</span>] + nums[<span class=\"number\">2</span>];\t\t\t\t<span class=\"comment\">// House 3 profit is rob House 1 and 3.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">            nums[i] = nums[i] + Math.max(nums[i-<span class=\"number\">2</span>], nums[i-<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.max(nums[nums.length-<span class=\"number\">1</span>], nums[nums.length-<span class=\"number\">2</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Happy-Number\"><a href=\"#Happy-Number\" class=\"headerlink\" title=\"Happy Number\"></a><a href=\"https://leetcode.com/problems/happy-number/submissions/\">Happy Number</a><a name=\"happy-number\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isHappy</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> isHappyConstantSpace(n);\t\t<span class=\"comment\">// Much faster than set method</span></span><br><span class=\"line\">        <span class=\"comment\">//return isHappySet(n);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isHappyConstantSpace</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">numSeenLessThan10</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t<span class=\"comment\">// If I see 10 single digits, then it means that I am</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n != <span class=\"number\">1</span>)&#123;\t\t\t\t\t<span class=\"comment\">// now starting to see repititions.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">10</span>)\t\t\t\t\t<span class=\"comment\">// Each time I see a num &lt; 10, increment the counter</span></span><br><span class=\"line\">                numSeenLessThan10++;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (numSeenLessThan10 &gt; <span class=\"number\">9</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            n = getSquare(n);\t\t\t<span class=\"comment\">// Get the total of square of its digits.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The general idea is that the moment you see a repition, it can&#x27;t be a happy number, so keep track of digit square obtained so far. If they hit 1, well and good, otherwise there will be some repition, so return false.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isHappySet</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">        HashSet&lt;Integer&gt; seen = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();\t\t<span class=\"comment\">// Keep track of numbers</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            n = getSquare(n);\t\t\t\t\t\t\t<span class=\"comment\">// Get the sum of digits square</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>)\t\t\t\t\t\t\t\t\t<span class=\"comment\">// If it&#x27;s 1, it&#x27;s a happy number</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (seen.contains(n))\t\t\t\t\t<span class=\"comment\">// If it&#x27;s a repition of something</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t\t<span class=\"comment\">// seen before, it&#x27;s not a happy no.</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                seen.add(n);\t\t\t\t\t\t\t<span class=\"comment\">// If not seen, add it.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">getSquare</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;\t\t<span class=\"comment\">// Add the squares of the digits.</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">digit</span> <span class=\"operator\">=</span> n % <span class=\"number\">10</span>;</span><br><span class=\"line\">            total += digit * digit;</span><br><span class=\"line\">            n /= <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> total;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Remove-Linked-List-Elements\"><a href=\"#Remove-Linked-List-Elements\" class=\"headerlink\" title=\"Remove Linked List Elements\"></a><a href=\"https://leetcode.com/problems/remove-linked-list-elements/\">Remove Linked List Elements</a><a name=\"remove-linked-list-elements\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">removeElements</span><span class=\"params\">(ListNode head, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (head != <span class=\"literal\">null</span> &amp;&amp; head.val == val)\t\t\t\t<span class=\"comment\">// While head contains the val, skip</span></span><br><span class=\"line\">        head = head.next;\t\t\t\t\t\t\t\t<span class=\"comment\">// the head</span></span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">current</span> <span class=\"operator\">=</span> head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"literal\">null</span> &amp;&amp; current.next != <span class=\"literal\">null</span>)&#123;\t<span class=\"comment\">// While we have something to iterate</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current.next.val == val)\t\t\t\t\t<span class=\"comment\">// If current&#x27;s val match, skip the</span></span><br><span class=\"line\">            current.next = current.next.next;\t\t\t<span class=\"comment\">// next node.</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            current = current.next;\t\t\t\t\t\t<span class=\"comment\">// Else advance to the next node.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Count-Primes\"><a href=\"#Count-Primes\" class=\"headerlink\" title=\"Count Primes\"></a><a href=\"https://leetcode.com/problems/count-primes/submissions/\">Count Primes</a><a name=\"count-primes\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">countPrimes</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t<span class=\"comment\">// No prime numbers for numbers &lt; 2</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span>[] store = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[n];\t\t<span class=\"comment\">// Using Sieve of Eratosthenes</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i*i &lt;= n; i++)\t\t\t<span class=\"comment\">// Start from i = 2 to sqrt(n)</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!store[i])\t\t\t\t\t\t<span class=\"comment\">// If store[i] = false, then mark all its</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> i*i; j &lt; n; j += i)<span class=\"comment\">// multiples in the store as true</span></span><br><span class=\"line\">                store[j] = <span class=\"literal\">true</span>;\t\t\t<span class=\"comment\">// True = not a prime, false = prime</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt; n; i++)\t\t\t\t<span class=\"comment\">// Loop through the array, count</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!store[i])</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Isomorphic-Strings\"><a href=\"#Isomorphic-Strings\" class=\"headerlink\" title=\"Isomorphic Strings\"></a><a href=\"https://leetcode.com/problems/isomorphic-strings/submissions/\">Isomorphic Strings</a><a name=\"isomorphic-strings\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isIsomorphic</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() != t.length())\t\t\t<span class=\"comment\">// Can&#x27;t be isomorphic is string lengths do not</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t<span class=\"comment\">// match</span></span><br><span class=\"line\">    <span class=\"type\">char</span>[] hashS = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">128</span>];\t\t\t<span class=\"comment\">// To store String s&#x27; match</span></span><br><span class=\"line\">    <span class=\"type\">char</span>[] hashT = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">128</span>];\t\t\t<span class=\"comment\">// To store String t&#x27;s match</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">charS</span> <span class=\"operator\">=</span> s.charAt(i), charT = t.charAt(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (hashS[charS] != hashT[charT])\t<span class=\"comment\">// If the values at respective characters index</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t<span class=\"comment\">// do not match, return false</span></span><br><span class=\"line\">        hashS[charS] = (<span class=\"type\">char</span>)(i+<span class=\"number\">1</span>);\t\t\t<span class=\"comment\">// Otherwise, mark those index with the same</span></span><br><span class=\"line\">        hashT[charT] = (<span class=\"type\">char</span>)(i+<span class=\"number\">1</span>);\t\t\t<span class=\"comment\">// arbitrary value. I chose a simple (i+1) to</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// to mark both the hash with the same value.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t\t\t\t\t<span class=\"comment\">// Everything worked out, return true;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Reverse-LinkedList\"><a href=\"#Reverse-LinkedList\" class=\"headerlink\" title=\"Reverse LinkedList\"></a><a href=\"https://leetcode.com/problems/reverse-linked-list/solution/\">Reverse LinkedList</a><a name=\"reverse-linkedlist\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Recursive</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">reverseList</span><span class=\"params\">(ListNode head)</span> &#123;\t<span class=\"comment\">// Very tricky. Refer to the demo below</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> reverseList(head.next);</span><br><span class=\"line\">    head.next.next = head;</span><br><span class=\"line\">    head.next = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Iterative</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">reverseList</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;\t\t\t\t\t\t<span class=\"comment\">// No point in reversing empty or 1-sized list</span></span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> head, prev = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    ListNode nextNode;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr != <span class=\"literal\">null</span>)&#123;\t\t\t\t\t<span class=\"comment\">// While we haven&#x27;t reached the tail</span></span><br><span class=\"line\">        nextNode = curr.next;\t\t\t\t<span class=\"comment\">// Store the next node</span></span><br><span class=\"line\">        curr.next = prev;\t\t\t\t\t<span class=\"comment\">// Current&#x27;s next becomes it&#x27;s previous</span></span><br><span class=\"line\">        prev = curr;\t\t\t\t\t\t<span class=\"comment\">// Advance previous to current.</span></span><br><span class=\"line\">        curr = nextNode;\t\t\t\t\t<span class=\"comment\">// Make current the actual next node</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev;\t\t\t\t\t\t\t<span class=\"comment\">// Current is at null, so it&#x27;s previous is the</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// new head.</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/reverse-a-linked-list-image.webp\" alt=\"reverse Linked list\"></p>\n<h3 id=\"Contains-Duplicate\"><a href=\"#Contains-Duplicate\" class=\"headerlink\" title=\"Contains Duplicate\"></a><a href=\"https://leetcode.com/problems/contains-duplicate/submissions/\">Contains Duplicate</a><a name=\"contains-duplicate\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">containsDuplicate</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t\t<span class=\"comment\">// There can&#x27;t be any duplicates.</span></span><br><span class=\"line\">    HashSet&lt;Integer&gt; store = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();\t<span class=\"comment\">// Store unique values.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n: nums)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!store.add(n))\t\t\t\t\t\t<span class=\"comment\">// Add func returns true if n was&#x27;nt present,</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t\t\t\t<span class=\"comment\">// false if duplicate. Therefore if it was a</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// duplicate, return true.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">// No duplicates, so return false</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Contains-Duplicate-II\"><a href=\"#Contains-Duplicate-II\" class=\"headerlink\" title=\"Contains Duplicate II\"></a><a href=\"https://leetcode.com/problems/contains-duplicate-ii/\">Contains Duplicate II</a><a name=\"contains-duplicate-ii\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">containsNearbyDuplicate</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, right = <span class=\"number\">0</span>;</span><br><span class=\"line\">    HashSet&lt;Integer&gt; store = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();\t<span class=\"comment\">// Use a rotating window of size k</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right &lt; nums.length)&#123;\t\t\t\t<span class=\"comment\">// While we haven&#x27;t processed everything</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (store.contains(nums[right]))\t\t<span class=\"comment\">// If our current window contains duplicate</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        store.add(nums[right]);\t\t\t\t\t<span class=\"comment\">// No duplicates in the window</span></span><br><span class=\"line\">        right++;\t\t\t\t\t\t\t\t<span class=\"comment\">// Increase right to visit the new element</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (right - left &gt; k)&#123;\t\t\t\t\t<span class=\"comment\">// If window becomes &gt; k</span></span><br><span class=\"line\">            store.remove(nums[left]);\t\t\t<span class=\"comment\">// remove the number on the left side of</span></span><br><span class=\"line\">            left++;\t\t\t\t\t\t\t\t<span class=\"comment\">// the window and increase the left counter</span></span><br><span class=\"line\">        &#125;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// for new window from the next index</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">// No duplicates found in any window.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Implement-Stack-Using-Queues\"><a href=\"#Implement-Stack-Using-Queues\" class=\"headerlink\" title=\"Implement Stack Using Queues\"></a><a href=\"https://leetcode.com/problems/implement-stack-using-queues/\">Implement Stack Using Queues</a><a name=\"implement-stack-using-queues\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyStack</span> &#123;</span><br><span class=\"line\">    Deque&lt;Integer&gt; stack;</span><br><span class=\"line\">    <span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyStack</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        stack = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayDeque</span>&lt;&gt;();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Push element x onto stack. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        stack.add(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.removeLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Get the top element. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">top</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.peekLast();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Returns whether the stack is empty. */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">empty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stack.isEmpty();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Invert-Binary-Tree\"><a href=\"#Invert-Binary-Tree\" class=\"headerlink\" title=\"Invert Binary Tree\"></a><a href=\"https://leetcode.com/problems/invert-binary-tree/\">Invert Binary Tree</a><a name=\"invert-binary-tree\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">invertTree</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">TreeNode</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> root.left;\t\t<span class=\"comment\">// Swap the left and right nodes</span></span><br><span class=\"line\">    root.left = root.right;</span><br><span class=\"line\">    root.right = temp;</span><br><span class=\"line\">    invertTree(root.left);\t\t\t<span class=\"comment\">// Then swap the subsequent trees of those nodes.</span></span><br><span class=\"line\">    invertTree(root.right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;\t\t\t\t\t<span class=\"comment\">// Return the original root.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Fibonacci-Number\"><a href=\"#Fibonacci-Number\" class=\"headerlink\" title=\"Fibonacci Number\"></a><a href=\"https://leetcode.com/problems/fibonacci-number/\">Fibonacci Number</a><a name=\"fibonacci-number\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Iterative</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">fib</span><span class=\"params\">(<span class=\"type\">int</span> N)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N &lt; <span class=\"number\">2</span>)\t\t\t\t\t\t<span class=\"comment\">// fib(0) = 0; fib(1) = 1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">f0</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, f1 = <span class=\"number\">1</span>, fn = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt;= N; i++)&#123;</span><br><span class=\"line\">        fn = f0 + f1;\t\t\t\t<span class=\"comment\">// fib(n) = fib(n-1) + fib(n-2)</span></span><br><span class=\"line\">        f0 = f1;\t\t\t\t\t<span class=\"comment\">// f0 becomes f1</span></span><br><span class=\"line\">        f1 = fn;\t\t\t\t\t<span class=\"comment\">// f1 becomes fn</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> f1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Dynamic Programming</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">fibDP</span><span class=\"params\">(<span class=\"type\">int</span> N)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (N &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[N+<span class=\"number\">1</span>];\t\t<span class=\"comment\">// To store intermediate result</span></span><br><span class=\"line\">    dp[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;\t\t\t\t\t\t<span class=\"comment\">// fib(0) = 0; fib(1) = 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt;= N; i++)</span><br><span class=\"line\">        dp[i] = dp[i-<span class=\"number\">1</span>]+dp[i-<span class=\"number\">2</span>];\t<span class=\"comment\">// fib(i) = fib(i-1) + fib(i-2)</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp[N];\t\t\t\t\t<span class=\"comment\">// Return the last number in the array</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"kth-Largest-Element\"><a href=\"#kth-Largest-Element\" class=\"headerlink\" title=\"kth Largest Element\"></a><a href=\"https://leetcode.com/problems/kth-largest-element-in-an-array/\">kth Largest Element</a><a name=\"kth-largest-element\"></a></h3><ol>\n<li>   The minheap algorithm has $O(n lg n) $ complexity and $O(1)$ space. The idea here is that we use a minheap to keep only the k greatest elements. If size becomes more than k, we remove the smallest element at the top of the heap. Thereby, at the end, our kth largest element will be at the top.</li>\n<li>   QuickSelect Algorithm performs in $O(n)$ best case, $O(n^2)$ worst case when the pivot chosen is always the largest, so we use a random pivot.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MinHeap Algorithm</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">kthLargest</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k)</span>&#123;</span><br><span class=\"line\">    PriorityQueue&lt;Integer&gt; q = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;((n1,n2) -&gt; n1 - n2);\t<span class=\"comment\">// Initialize minheap</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n: nums)&#123;</span><br><span class=\"line\">        q.add(n);\t\t\t\t<span class=\"comment\">// Add number one by one</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (q.size() &gt; k)\t\t<span class=\"comment\">// If size is greater than k</span></span><br><span class=\"line\">            q.poll();\t\t\t<span class=\"comment\">// Remove the topmost element</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> q.poll();\t\t\t<span class=\"comment\">// The topmost element is our answer</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// QuickSelect Algorithm - Hoare&#x27;s Partition Scheme</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span>[] arr;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">kthLargest</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k)</span>&#123;</span><br><span class=\"line\">\tarr = nums;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> quickselect(<span class=\"number\">0</span>, nums.length-<span class=\"number\">1</span>, nums.length-k);<span class=\"comment\">// kth largest is (n-k)th largest</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">quickselect</span><span class=\"params\">(<span class=\"type\">int</span> left, <span class=\"type\">int</span> right, <span class=\"type\">int</span> k)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left == right)\t\t\t\t\t<span class=\"comment\">// Array contains only 1 element, that&#x27;s the answer</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> arr[left];</span><br><span class=\"line\">\t<span class=\"type\">Random</span> <span class=\"variable\">rand</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();\t\t\t\t<span class=\"comment\">// Choose a random pivot between left and right</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">pivotIndex</span> <span class=\"operator\">=</span> left + rand.nextInt(right-left);\t<span class=\"comment\">// but not left</span></span><br><span class=\"line\">\tpivotIndex = partition(left, right, pivotIndex);\t<span class=\"comment\">// Partition, and find it&#x27;s correct index</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (k == pivotIndex)\t\t\t\t\t<span class=\"comment\">// That index is equal to kth statistic</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> arr[pivotIndex];</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k &lt; pivotIndex)\t\t\t<span class=\"comment\">// If it&#x27;s less than the index, our ans lies in the</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> quickselect(left, pivotIndex-<span class=\"number\">1</span>, k);\t<span class=\"comment\">// left side</span></span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> quickselect(pivotIndex+<span class=\"number\">1</span>, right, k);\t<span class=\"comment\">// Otherwise, it&#x27;s on the right side.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">partition</span><span class=\"params\">(<span class=\"type\">int</span> left, <span class=\"type\">int</span> right, <span class=\"type\">int</span> pivotIndex)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> arr[pivotIndex];\t\t\t<span class=\"comment\">// Partition element</span></span><br><span class=\"line\">\tswap(pivotIndex, right);\t\t\t\t<span class=\"comment\">// Move that element to the end</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">wall</span> <span class=\"operator\">=</span> left - <span class=\"number\">1</span>;\t\t\t\t\t<span class=\"comment\">// wall is initially before everything</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> left; i &lt; right; i++)&#123;</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span> (arr[i] &lt; pivot)\t\t\t\t<span class=\"comment\">// If the current element is &lt; than the pivot, then</span></span><br><span class=\"line\">    \t\tswap(i, ++wall);\t\t\t<span class=\"comment\">// we need to swap it with the element next to wall.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tswap(right, ++wall);\t\t\t\t\t<span class=\"comment\">// Lastly, swap the element at wall and the end.</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> wall;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[i];</span><br><span class=\"line\">\tarr[i] = arr[j];</span><br><span class=\"line\">\tarr[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Power-Of-Two\"><a href=\"#Power-Of-Two\" class=\"headerlink\" title=\"Power Of Two\"></a><a href=\"https://leetcode.com/problems/power-of-two/\">Power Of Two</a><a name=\"power-of-two\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPowerOfTwo</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t<span class=\"comment\">// n &lt; 0 cannot be powers of 2</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n % <span class=\"number\">2</span> != <span class=\"number\">0</span>)\t\t<span class=\"comment\">// If n is odd, it can&#x27;t be a power of 2.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        n = n / <span class=\"number\">2</span>;\t\t\t<span class=\"comment\">// It is a multiple of 2, so divide it by 2.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t<span class=\"comment\">// n came out to be 1 which is a power of 2, so return true.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Valid-Sudoku\"><a href=\"#Valid-Sudoku\" class=\"headerlink\" title=\"Valid Sudoku\"></a><a href=\"https://leetcode.com/problems/valid-sudoku/\">Valid Sudoku</a><a name=\"valid-sudoku\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">char</span>[][] board;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValidSudoku</span><span class=\"params\">(<span class=\"type\">char</span>[][] board)</span>&#123;</span><br><span class=\"line\"><span class=\"built_in\">this</span>.board = board;</span><br><span class=\"line\"><span class=\"keyword\">return</span> rowCheck() &amp;&amp; colCheck() &amp;&amp; boxCheck();\t<span class=\"comment\">// Check row first, then column and at</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// last, boxes because they are time</span></span><br><span class=\"line\">                                                <span class=\"comment\">// consuming.</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">onePassCheck</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  HashSet&lt;Integer&gt;[] rows = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>[<span class=\"number\">9</span>];\t\t<span class=\"comment\">// 1 HashSet for each row</span></span><br><span class=\"line\">  HashSet&lt;Integer&gt;[] columns = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>[<span class=\"number\">9</span>];\t<span class=\"comment\">// 1 HashSet for each column</span></span><br><span class=\"line\">  HashSet&lt;Integer&gt;[] boxes = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>[<span class=\"number\">9</span>];\t<span class=\"comment\">// 1 HashSet for each box.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">      rows[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">      columns[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">      boxes[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i++)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j++)&#123;</span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>)(board[i][j]);</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (n != -<span class=\"number\">2</span>)&#123;\t\t\t\t\t\t\t<span class=\"comment\">// -2 = &#x27;.&#x27;\t\t</span></span><br><span class=\"line\">              <span class=\"type\">int</span> <span class=\"variable\">boxIndex</span> <span class=\"operator\">=</span> (i/<span class=\"number\">3</span>) * <span class=\"number\">3</span> + j/<span class=\"number\">3</span>;\t<span class=\"comment\">// Calculate which box we are in.</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (!rows[i].add(n) || !columns[j].add(n) || !boxes[boxIndex].add(n))</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t<span class=\"comment\">// If the row set or the column set or the</span></span><br><span class=\"line\">          &#125;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// box set contains that val, return false.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">rowCheck</span><span class=\"params\">()</span>&#123;\t\t\t\t\t\t<span class=\"comment\">// Horizontal check</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span>[] arr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span>[] row: board)&#123;</span><br><span class=\"line\">      arr = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: row)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> c-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val != -<span class=\"number\">2</span>)&#123;\t\t\t\t\t\t\t\t<span class=\"comment\">// val = -2 means &#x27;.&#x27; in the board</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (arr[val-<span class=\"number\">1</span>])\t\t\t\t\t\t\t<span class=\"comment\">// If val already seen, invalid sudoku</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          arr[val-<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;\t\t\t\t\t\t<span class=\"comment\">// else, Mark that index as seen.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">colCheck</span><span class=\"params\">()</span>&#123;\t\t\t\t\t\t<span class=\"comment\">// Vertical Check.</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span>[] arr;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">col</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; col &lt; board.length; col++)&#123;</span><br><span class=\"line\">      arr = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; row &lt; board[<span class=\"number\">0</span>].length; row++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> board[row][col]-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val != -<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (arr[val-<span class=\"number\">1</span>])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          arr[val-<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">boxCheck</span><span class=\"params\">()</span>&#123;\t\t\t\t\t<span class=\"comment\">// For the 9 sub boxes, let the single</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">9</span>; i+=<span class=\"number\">3</span>)&#123;\t\t\t\t<span class=\"comment\">// box checker check it&#x27;s validity.</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">9</span>; j+=<span class=\"number\">3</span>)\t\t\t\t<span class=\"comment\">// If any of the subbox was invalid,</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!singleBoxCheck(i,j))\t\t\t\t<span class=\"comment\">// we abort and return false.</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">singleBoxCheck</span><span class=\"params\">(<span class=\"type\">int</span> topRightRow, <span class=\"type\">int</span> topRightCol)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span>[] arr = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[<span class=\"number\">9</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++)&#123;\t\t\t\t<span class=\"comment\">// Each sub box has 3 rows and 3 columns</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; j++)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> board[topRightRow+i][topRightCol+j]-<span class=\"string\">&#x27;0&#x27;</span>;\t<span class=\"comment\">// This gives us the value at </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (val != -<span class=\"number\">2</span>)&#123;\t\t\t\t\t\t\t<span class=\"comment\">// each cell in the sub box and we fill the</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (arr[val-<span class=\"number\">1</span>])\t\t\t\t\t\t<span class=\"comment\">// arr with all values that are seen.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t<span class=\"comment\">// If seen twice, return false;</span></span><br><span class=\"line\">          arr[val-<span class=\"number\">1</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Implement-Queue-Using-Stack\"><a href=\"#Implement-Queue-Using-Stack\" class=\"headerlink\" title=\"Implement Queue Using Stack\"></a><a href=\"https://leetcode.com/problems/implement-queue-using-stacks/submissions/\">Implement Queue Using Stack</a><a name=\"implement-queue-using-stack\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Since we reverse stack1 into stack2, stack2 is basically our queue, so if stack2 isn&#x27;t empty, then the topmost element is what we need when we pop or peek. If it is empty, then again fill it with whatever&#x27;s there is stack1, and it again becomes the correct queue.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">Stack&lt;Integer&gt; stack1;</span><br><span class=\"line\">Stack&lt;Integer&gt; stack2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">MyQueue</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    stack1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">    stack2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Stack</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">    stack1.push(x);\t\t\t<span class=\"comment\">// Push onto stack1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    peek();\t\t\t\t\t<span class=\"comment\">// First call the peek function, to make sure stack 2 isn&#x27;t</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack2.pop();\t<span class=\"comment\">// empty. Then, the topmost element of stack2 is what we want</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Get the front element. */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">peek</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (stack2.isEmpty())&#123;\t\t\t</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!stack1.isEmpty())</span><br><span class=\"line\">            stack2.push(stack1.pop());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack2.peek();\t<span class=\"comment\">// stack2 is basically the queue, so return whatever&#x27;s on the top</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Returns whether the queue is empty. */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">empty</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> stack1.isEmpty() &amp;&amp; stack2.isEmpty();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Palindrome-LinkedList\"><a href=\"#Palindrome-LinkedList\" class=\"headerlink\" title=\"Palindrome LinkedList\"></a><a href=\"https://leetcode.com/problems/palindrome-linked-list/submissions/\">Palindrome LinkedList</a><a name=\"palindrome-linkedlist\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPalindrome</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">null</span> || head.next == <span class=\"literal\">null</span>)\t\t<span class=\"comment\">// Size 0 or 1 list, must be unique.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head.next.next == <span class=\"literal\">null</span>)\t\t\t\t\t<span class=\"comment\">// Size 2 list, compare the head and tail</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> head.val == head.next.val;\t\t<span class=\"comment\">// values</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">middleNode</span> <span class=\"operator\">=</span> head;\t\t\t\t\t<span class=\"comment\">// Standard Rabbit-Tortoise pointers.</span></span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">fastPointer</span> <span class=\"operator\">=</span> head;\t\t\t\t<span class=\"comment\">// Fast pointer jumps twice so by the time</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// it reaches the end of the list, middlenode</span></span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> head;\t\t\t\t\t\t<span class=\"comment\">// is at the middle of the linkedlist.</span></span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">prev</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    ListNode nextNode;\t\t\t\t\t\t\t<span class=\"comment\">// These three nodes are for reversing the </span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// first half of the list</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (fastPointer != <span class=\"literal\">null</span> &amp;&amp; fastPointer.next != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        middleNode = middleNode.next;\t\t\t<span class=\"comment\">// Advance middle once, fastpointer twice</span></span><br><span class=\"line\">        fastPointer = fastPointer.next.next;</span><br><span class=\"line\"></span><br><span class=\"line\">        nextNode = curr.next;\t\t\t\t\t<span class=\"comment\">// Reverse the curr node, but first store the</span></span><br><span class=\"line\">        curr.next = prev;\t\t\t\t\t\t<span class=\"comment\">// next newNode. By doing this, we would have</span></span><br><span class=\"line\">        prev = curr;\t\t\t\t\t\t\t<span class=\"comment\">// reversed exactly half of the list because</span></span><br><span class=\"line\">        curr = nextNode;\t\t\t\t\t\t<span class=\"comment\">// fastpointer advacnes at double the speed.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (fastPointer != <span class=\"literal\">null</span>)\t\t\t\t\t<span class=\"comment\">// If faspointer isn&#x27;t null, then we have an</span></span><br><span class=\"line\">        middleNode = middleNode.next;\t\t\t<span class=\"comment\">// odd length list, so advance middle once,</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// List looks like 1-&gt;2-&gt;3-&gt;2-&gt;1 instead of</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (middleNode != <span class=\"literal\">null</span>)&#123;\t\t\t\t\t<span class=\"comment\">// 1-&gt;2-&gt;3-&gt;3-&gt;2-&gt;1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (middleNode.val != prev.val)\t\t\t<span class=\"comment\">// While middle isn&#x27;t null, check middlenode</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t<span class=\"comment\">// val and prev val. Prev is basically the</span></span><br><span class=\"line\">        middleNode = middleNode.next;\t\t\t<span class=\"comment\">// the point where the list reverses.</span></span><br><span class=\"line\">        prev = prev.next;\t\t\t\t\t\t<span class=\"comment\">// Advance middle and next.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">// Values matched, so return true.</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Reversed list looks like this:</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 1&lt;-2&lt;-3&lt;-prev middle-&gt;3-&gt;2-&gt;1 in even len</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// 1&lt;-2&lt;-prev middle-&gt;2-&gt;1 in odd lengths.</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Delete-Node-in-a-Linked-List\"><a href=\"#Delete-Node-in-a-Linked-List\" class=\"headerlink\" title=\"Delete Node in a Linked List\"></a><a href=\"https://leetcode.com/problems/delete-node-in-a-linked-list/submissions/\">Delete Node in a Linked List</a><a name=\"delete-node-in-a-linked-list\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteNode</span><span class=\"params\">(ListNode node)</span> &#123;</span><br><span class=\"line\">    node.val = node.next.val;\t\t<span class=\"comment\">// Node&#x27;s value becomes its next node&#x27;s value</span></span><br><span class=\"line\">    node.next = node.next.next;  \t<span class=\"comment\">// Node&#x27;s next is it&#x27;s next&#x27;s next.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Is-Anagram\"><a href=\"#Is-Anagram\" class=\"headerlink\" title=\"Is Anagram\"></a><a href=\"https://leetcode.com/problems/valid-anagram/submissions/\">Is Anagram</a><a name=\"is-anagram\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isAnagram</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() != t.length())\t\t\t<span class=\"comment\">// Can&#x27;t be anagram if size aren&#x27;t the same</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] store = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];\t\t\t\t<span class=\"comment\">// Acts like a hashmap</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; s.length(); i++)\t<span class=\"comment\">// Increment the count by 1 in the store for the</span></span><br><span class=\"line\">        store[s.charAt(i)-<span class=\"string\">&#x27;a&#x27;</span>]++;\t\t\t<span class=\"comment\">// index = position of char in the alphabet</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; t.length(); i++)&#123;\t<span class=\"comment\">// Loop throught the second string, decrement</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--store[t.charAt(i)-<span class=\"string\">&#x27;a&#x27;</span>] &lt; <span class=\"number\">0</span>)\t<span class=\"comment\">// count of each character in store by 1, but if</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t<span class=\"comment\">// it goes below 0, then it means that character</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// occurred more than it did in s. So false.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t\t\t\t\t<span class=\"comment\">// Everything matched, so return true.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Binary-Tree-Paths\"><a href=\"#Binary-Tree-Paths\" class=\"headerlink\" title=\"Binary Tree Paths\"></a><a href=\"https://leetcode.com/problems/binary-tree-paths/\">Binary Tree Paths</a><a name=\"binary-tree-paths\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; paths = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">binaryTreePaths</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)\t\t\t\t\t<span class=\"comment\">// No paths</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> paths;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">rootval</span> <span class=\"operator\">=</span> root.val + <span class=\"string\">&quot;&quot;</span>;\t\t<span class=\"comment\">// Converting int to string.</span></span><br><span class=\"line\">    traverse(root, rootval);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> paths;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">traverse</span><span class=\"params\">(TreeNode root, String s)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left == <span class=\"literal\">null</span> &amp;&amp; root.right == <span class=\"literal\">null</span>)\t\t<span class=\"comment\">// It&#x27;s a leaf, and you found a path</span></span><br><span class=\"line\">        paths.add(s);\t\t\t\t\t\t\t\t\t<span class=\"comment\">// so add it to the list</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"literal\">null</span>)\t\t\t\t\t\t\t\t<span class=\"comment\">// Left side is traversable, so</span></span><br><span class=\"line\">        traverse(root.left, s + <span class=\"string\">&quot;-&gt;&quot;</span> + root.left.val);\t<span class=\"comment\">// visit it and record its value.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.right != <span class=\"literal\">null</span>)\t\t\t\t\t\t\t\t<span class=\"comment\">// Same as above, but for right side.</span></span><br><span class=\"line\">        traverse(root.right, s + <span class=\"string\">&quot;-&gt;&quot;</span> + root.right.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Add-Digits\"><a href=\"#Add-Digits\" class=\"headerlink\" title=\"Add Digits\"></a><a href=\"https://leetcode.com/problems/add-digits/\">Add Digits</a><a name=\"add-digits\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">constantTime</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;\t\t\t<span class=\"comment\">// Already a single digit</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> n % <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (result == <span class=\"number\">0</span>)\t\t<span class=\"comment\">// If perfectly divisible by 9, then sum will be 9.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">9</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;\t\t\t<span class=\"comment\">// Otherwise, the result is going to be n % 9.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">iterative</span><span class=\"params\">(<span class=\"type\">int</span> num)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">9</span>)&#123;\t\t\t\t<span class=\"comment\">// While number isn&#x27;t between 2-9</span></span><br><span class=\"line\">        num = sumOfDigits(num);\t\t<span class=\"comment\">// make num = sum of it&#x27;s digits.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">sumOfDigits</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;\t\t<span class=\"comment\">// Standard method to add the digits of a number.</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        sum += n % <span class=\"number\">10</span>;\t\t\t\t<span class=\"comment\">// Extract the last digit, add it to sum.</span></span><br><span class=\"line\">        n /= <span class=\"number\">10</span>;\t\t\t\t\t<span class=\"comment\">// Divide the num by 10.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Largest-Perimeter-Triangle\"><a href=\"#Largest-Perimeter-Triangle\" class=\"headerlink\" title=\"Largest Perimeter Triangle\"></a><a href=\"https://leetcode.com/problems/largest-perimeter-triangle/\">Largest Perimeter Triangle</a><a name=\"largest-perimeter-triangle\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">largestPerimeter</span><span class=\"params\">(<span class=\"type\">int</span>[] A)</span> &#123;</span><br><span class=\"line\">    Arrays.sort(A);\t\t\t\t\t\t\t<span class=\"comment\">// Sort so the largest sides are at the end.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> A.length-<span class=\"number\">3</span>; i &gt;= <span class=\"number\">0</span>; --i)\t<span class=\"comment\">// Triangle inequality Theorem : a + b &gt; c</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (A[i] + A[i+<span class=\"number\">1</span>] &gt; A[i+<span class=\"number\">2</span>])\t\t\t<span class=\"comment\">// If sum of last two is greater than the last</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> A[i] + A[i+<span class=\"number\">1</span>] + A[i+<span class=\"number\">2</span>];\t<span class=\"comment\">// we found out max perimeter, otherwise</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">// decrease i by i, then check the next three</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// triplets</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// In the end if nothing works out, we return 0.</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Ugly-Number\"><a href=\"#Ugly-Number\" class=\"headerlink\" title=\"Ugly Number\"></a><a href=\"https://leetcode.com/problems/ugly-number/submissions/\">Ugly Number</a><a name=\"ugly-number\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isUgly</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t<span class=\"comment\">// Negative numbers are automatically non ugly</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num % <span class=\"number\">2</span> == <span class=\"number\">0</span>)\t<span class=\"comment\">// Keep dividing number by 2 till it is divisible</span></span><br><span class=\"line\">        num /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num % <span class=\"number\">3</span> == <span class=\"number\">0</span>)\t<span class=\"comment\">// Keep dividing by 3</span></span><br><span class=\"line\">        num /= <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num % <span class=\"number\">5</span> == <span class=\"number\">0</span>)\t<span class=\"comment\">// and 5</span></span><br><span class=\"line\">        num /= <span class=\"number\">5</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num == <span class=\"number\">1</span>;\t\t<span class=\"comment\">// If num isn&#x27;t 1, that means that there are other prime factors</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t<span class=\"comment\">// except 2,3 and 5.</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Missing-Number\"><a href=\"#Missing-Number\" class=\"headerlink\" title=\"Missing Number\"></a><a href=\"https://leetcode.com/problems/missing-number/\">Missing Number</a><a name=\"missing-number\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">missingNumber</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;\t\t\t<span class=\"comment\">// Since it&#x27;s given that the array contains</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">nsum</span> <span class=\"operator\">=</span> (nums.length*(nums.length+<span class=\"number\">1</span>))/<span class=\"number\">2</span>;\t<span class=\"comment\">// all numbers from 0-n, we use the formula</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">arraySum</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>];\t\t\t\t\t\t<span class=\"comment\">// to compute sum of n numbers.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; nums.length; i++)\t\t<span class=\"comment\">// Then we loop through the array to compute</span></span><br><span class=\"line\">        arraySum += nums[i];\t\t\t\t\t<span class=\"comment\">// the sum of the array.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nsum - arraySum;\t\t\t\t\t\t<span class=\"comment\">// Subtract the array sum from the required</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// sum, and that gives us the missing number</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Is-Bad-Version\"><a href=\"#Is-Bad-Version\" class=\"headerlink\" title=\"Is Bad Version\"></a><a href=\"https://leetcode.com/problems/first-bad-version/submissions/\">Is Bad Version</a><a name=\"is-bad-version\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">firstBadVersion</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;\t\t<span class=\"comment\">// Basic Binary Search Algorithm</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">low</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, high = n;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt; high)&#123;</span><br><span class=\"line\">        mid = low + (high - low)/<span class=\"number\">2</span>;\t\t<span class=\"comment\">// high - low to prefent integer overflow.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isBadVersion(mid))\t\t\t<span class=\"comment\">// if the model at mid was bad version, then we</span></span><br><span class=\"line\">            high = mid;\t\t\t\t\t<span class=\"comment\">// could possibly have a bad version before it</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">// If it wasn&#x27;t, then our first bad version lies</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// beyond the middle element.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Move-Zeroes\"><a href=\"#Move-Zeroes\" class=\"headerlink\" title=\"Move Zeroes\"></a><a href=\"https://leetcode.com/problems/move-zeroes/solution/\">Move Zeroes</a><a name=\"move-zeroes\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The general idea is that we know the end of the array is going to contain zeroes. So first, iterate over the array, if you find any non-zero value, copy it down to the front of the array. Then we you are done, length of the array minus the last index where you copied the non-zero element is the number of zeroes you need to fill in. So iterate from that last non-zero index to the end of the array and fill in zeroes.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveZeroes</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">lastNonZeroIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; i++)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">            nums[lastNonZeroIndex++] = nums[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> lastNonZeroIndex; i &lt; nums.length; i++)</span><br><span class=\"line\">        nums[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">This solution is an extension of the above, but a better one because we only swap elements when needed and do not do any unnecessary writes. Start from the beginning of the array, maintain the last position of non-zero value you saw, and the current element. If you see a non-zero value, swap the current value with the index just after the last non-zero index you have, and then increment the non-zero index by 1 because you just found a new non-zero value. This helps us prepare for the next non-zero value we find and copy it at this index+1. By doing so, we are basically partitioning the array into non-zeroes and zero values.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">moveZeroes</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">lastNonZeroIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, i = <span class=\"number\">0</span>; i &lt; nums.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] != <span class=\"number\">0</span>)</span><br><span class=\"line\">            swap(nums, i , lastNonZeroIndex++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] a, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> a[i];</span><br><span class=\"line\">    a[i] = a[j];</span><br><span class=\"line\">    a[j] = temp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Word-Pattern\"><a href=\"#Word-Pattern\" class=\"headerlink\" title=\"Word Pattern\"></a><a href=\"https://leetcode.com/problems/word-pattern/\">Word Pattern</a><a name=\"word-pattern\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">wordPattern</span><span class=\"params\">(String pattern, String str)</span> &#123;</span><br><span class=\"line\">    String[] words = str.split(<span class=\"string\">&quot; &quot;</span>);\t\t<span class=\"comment\">// Split str into words</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pattern.length() != words.length)\t<span class=\"comment\">// If length of pattern and words mismatch</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t<span class=\"comment\">// then pattern do not match</span></span><br><span class=\"line\">    HashMap&lt;Character, String&gt; patternStore = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();\t<span class=\"comment\">// Map pattern char to word</span></span><br><span class=\"line\">    HashMap&lt;String, Character&gt; wordMap = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();\t\t<span class=\"comment\">// Map word to pattern char</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; words.length; i++)&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> pattern.charAt(i);\t\t\t\t\t<span class=\"comment\">// Get the char</span></span><br><span class=\"line\">        patternStore.putIfAbsent(c, words[i]);\t\t<span class=\"comment\">// Put it in patternStore if absent</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!patternStore.get(c).equals(words[i]))\t<span class=\"comment\">// If it was already there and it doesn&#x27;t</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t\t<span class=\"comment\">// map to words[i], we have a violation</span></span><br><span class=\"line\">        wordMap.putIfAbsent(words[i], c);\t\t\t<span class=\"comment\">// Now check the other way around. If</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (wordMap.get(words[i]) != c)\t\t\t\t<span class=\"comment\">// words is absent in the map, map it to</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t\t<span class=\"comment\">// the char. If present, then fetch it&#x27;s</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// mapping and check if both match to c.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t\t\t\t\t<span class=\"comment\">// No violation, so return true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Can-Win-Nim\"><a href=\"#Can-Win-Nim\" class=\"headerlink\" title=\"Can Win Nim\"></a><a href=\"https://leetcode.com/problems/nim-game/\">Can Win Nim</a><a name=\"can-win-nim\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canWinNim</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n % <span class=\"number\">4</span> != <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// You can always win the game if n is not divisible by 4.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Power-Of-Three\"><a href=\"#Power-Of-Three\" class=\"headerlink\" title=\"Power Of Three\"></a><a href=\"https://leetcode.com/problems/power-of-three/\">Power Of Three</a><a name=\"power-of-three\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPowerOfThree</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">1</span>)\t\t\t\t<span class=\"comment\">// If negative, it can&#x27;t be a power of 3.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n % <span class=\"number\">3</span> == <span class=\"number\">0</span>)\t\t<span class=\"comment\">// While n is divisible by 3, keep dividing it.</span></span><br><span class=\"line\">        n /= <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n == <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">// In the end, if it was a power of 3, then n should be 1.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Power-of-Four\"><a href=\"#Power-of-Four\" class=\"headerlink\" title=\"Power of Four\"></a><a href=\"https://leetcode.com/problems/power-of-four/submissions/\">Power of Four</a><a name=\"power-of-four\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">You can also use the iterative method that I have used in Power of Two and Power of Three problems. I just wanted to try a different approach here. This is a constant time function.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPowerOfFour</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">double</span> <span class=\"variable\">pow</span> <span class=\"operator\">=</span> Math.log(num)/Math.log(<span class=\"number\">4</span>);\t<span class=\"comment\">// Calculate x in 4^x = num using logs.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> pow == (<span class=\"type\">int</span>)pow;\t\t\t\t\t<span class=\"comment\">// Making sure that x is an integer and not a</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// fractional exponent.</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Reverse-String\"><a href=\"#Reverse-String\" class=\"headerlink\" title=\"Reverse String\"></a><a href=\"https://leetcode.com/problems/reverse-string/\">Reverse String</a><a name=\"reverse-string\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">1 Liner solution. Basically, create a StringBuilder of the string, the builder already has a reverse method, so reverse it and then return it&#x27;s toString.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">reverseString</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(s).reverse().toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Golfing aside, here is how one is expected to solve it in an interview.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">reverseString</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span>[] array = s.toCharArray();\t\t<span class=\"comment\">// Create a char array of the string</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> array.length;\t\t\t\t<span class=\"comment\">// length of the array</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len/<span class=\"number\">2</span>; i++)&#123;\t<span class=\"comment\">// We only need to iterate over half the array.</span></span><br><span class=\"line\">\t\t<span class=\"type\">char</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> array[i];\t\t\t<span class=\"comment\">// Swap the 0th index element with (len-1)th,</span></span><br><span class=\"line\">\t\tarray[i] = array[len-i-<span class=\"number\">1</span>];\t\t<span class=\"comment\">// 1st index element with (len-2)th, until you get</span></span><br><span class=\"line\">\t\tarray[len-i-<span class=\"number\">1</span>] = temp;\t\t\t<span class=\"comment\">// to the middle element.</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(array);\t\t\t<span class=\"comment\">// Return a new string with the reversed array.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Implement-strStr\"><a href=\"#Implement-strStr\" class=\"headerlink\" title=\"Implement strStr()\"></a><a href=\"https://leetcode.com/problems/implement-strstr/submissions/\">Implement strStr()</a><a name=\"implement-strstr()\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">The basic idea here is that you only need to iterate haystack length - needle length, and then check the substring of size = needle length in haystack from each index. If you are successfully able to match each character of the needle in the corresponding substring in haystack, return the index you start from. </span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">strStr</span><span class=\"params\">(String haystack, String needle)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (needle.length() &gt; haystack.length())\t<span class=\"comment\">// Needle length can&#x27;t be &gt; than haystack</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">hl</span> <span class=\"operator\">=</span> haystack.length();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">nl</span> <span class=\"operator\">=</span> needle.length();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nl == <span class=\"number\">0</span>)\t\t\t\t\t\t\t\t<span class=\"comment\">// Empty strings are always a match starting</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">// from 0.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= hl-nl; i++)&#123;\t\t\t<span class=\"comment\">// Iterate haystack length - needle length.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; nl &amp;&amp; haystack.charAt(i+j) == needle.charAt(j); ++j)&#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j == nl-<span class=\"number\">1</span>)\t\t\t\t\t\t<span class=\"comment\">// We are checking how far from i can we</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;\t\t\t\t\t\t<span class=\"comment\">// match. If i matched with j, increment j</span></span><br><span class=\"line\">        &#125;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// and then match the character i+1 to j.</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// If that matches, increment j and match i+2</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// j == n-1 checked wether or not if we were</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// able to match the full needle string, if</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// yes, then i is our index</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// in the end, nothing matched, so return -1</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Reverse-Vowels-of-a-String\"><a href=\"#Reverse-Vowels-of-a-String\" class=\"headerlink\" title=\"Reverse Vowels of a String\"></a><a href=\"https://leetcode.com/problems/reverse-vowels-of-a-string/\">Reverse Vowels of a String</a><a name=\"reverse-vowels-of-a-string\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">reverseVowels</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> s;\t\t\t\t\t<span class=\"comment\">// No need to reverse a string of length 0 or 1</span></span><br><span class=\"line\">    <span class=\"type\">char</span>[] str = s.toCharArray();\t<span class=\"comment\">// Get the char array</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> str.length-<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt; right)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; !isVowel(str[left]))\t\t<span class=\"comment\">// While left is pointing to a</span></span><br><span class=\"line\">            left++;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// consonant, increment it/</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &lt; right &amp;&amp; !isVowel(str[right]))\t<span class=\"comment\">// While right is pointing to a</span></span><br><span class=\"line\">            right--;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// consonant, decrement it.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> str[left];\t\t\t\t\t\t\t<span class=\"comment\">// Left and right are now pointing</span></span><br><span class=\"line\">        str[left] = str[right];\t\t\t\t\t\t\t<span class=\"comment\">// to vowels, so swap it.</span></span><br><span class=\"line\">        str[right] = temp;\t\t\t\t\t\t\t\t<span class=\"comment\">// And then increment left and</span></span><br><span class=\"line\">        left++;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// decrement right to process the</span></span><br><span class=\"line\">        right--;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// inner string</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(str);\t\t\t<span class=\"comment\">// Return a string from the reveresed array.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isVowel</span><span class=\"params\">(<span class=\"type\">char</span> c)</span>&#123;\t<span class=\"comment\">// Function to check if a character is a vowel.</span></span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (c) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;e&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;i&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;o&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;u&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;E&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;I&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;O&#x27;</span>:</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&#x27;U&#x27;</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Intersection-of-two-arrays\"><a href=\"#Intersection-of-two-arrays\" class=\"headerlink\" title=\"Intersection of two arrays\"></a><a href=\"https://leetcode.com/problems/intersection-of-two-arrays/\">Intersection of two arrays</a><a name=\"intersection-of-two-arrays\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] intersection(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2) &#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; set1 = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;Integer&gt;();\t\t<span class=\"comment\">// Record all unique values in set 1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums1)</span><br><span class=\"line\">        set1.add(i);</span><br><span class=\"line\">    Set&lt;Integer&gt; intersect = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();\t\t<span class=\"comment\">// We will use it to record intersection</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums2)\t\t\t\t\t\t\t\t<span class=\"comment\">// For each value in nums2 array</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (set1.contains(i))\t\t\t\t\t\t<span class=\"comment\">// If set1 contains it, we found an</span></span><br><span class=\"line\">            intersect.add(i);\t\t\t\t\t\t<span class=\"comment\">// intersecting element, so add it.</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] res = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[intersect.size()];\t\t\t<span class=\"comment\">// We will now convert the set to an</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// array and then return the array.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n: intersect)</span><br><span class=\"line\">        res[i++] = n;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Is-Perfect-Square\"><a href=\"#Is-Perfect-Square\" class=\"headerlink\" title=\"Is Perfect Square\"></a><a href=\"https://leetcode.com/problems/valid-perfect-square/\">Is Perfect Square</a><a name=\"is-perfect-square\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">The basic idea here is to close in on the square root using binary search algorithm. </span></span><br><span class=\"line\"><span class=\"comment\">I handle 4 seperately because it&#x27;s root is the only one where 4/3 &lt; it&#x27;s square root. </span></span><br><span class=\"line\"><span class=\"comment\">All other numbers square root is greater than its value/3.</span></span><br><span class=\"line\"><span class=\"comment\">So we create a lowerBound of 1 and an upperBound of num/3. Then if the middle value&#x27;s square</span></span><br><span class=\"line\"><span class=\"comment\">overshoots, we make upperBound = mid-1, otherwise increment lowerBound to mid+1. This way, we</span></span><br><span class=\"line\"><span class=\"comment\">close on the square root from both sides, and if the middle values is the square root, it&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">square will yield num.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isPerfectSquare</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">2</span> || num == <span class=\"number\">4</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">lowerBound</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">upperBound</span> <span class=\"operator\">=</span> num/<span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"type\">long</span> mid;</span><br><span class=\"line\">    <span class=\"type\">long</span> square;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lowerBound &lt;= upperBound)&#123;</span><br><span class=\"line\">        mid = lowerBound + (upperBound-lowerBound)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        square = mid*mid;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (square == num)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (square &gt; num)</span><br><span class=\"line\">            upperBound = mid-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            lowerBound = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Sum-of-Two-Integers\"><a href=\"#Sum-of-Two-Integers\" class=\"headerlink\" title=\"Sum of Two Integers\"></a><a href=\"https://leetcode.com/problems/sum-of-two-integers/\">Sum of Two Integers</a><a name=\"sum-of-two-integers\"></a></h3><p>I cannot explain it better than this <a href=\"https://leetcode.com/problems/sum-of-two-integers/discuss/132479/Simple-explanation-on-how-to-arrive-at-the-solution\">post</a>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getSum</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> a ^ b;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">carry</span> <span class=\"operator\">=</span> a &amp; b;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (carry == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getSum(sum, carry &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Guess-Number-Higher-or-Lower\"><a href=\"#Guess-Number-Higher-or-Lower\" class=\"headerlink\" title=\"Guess Number Higher or Lower\"></a><a href=\"https://leetcode.com/problems/guess-number-higher-or-lower/\">Guess Number Higher or Lower</a><a name=\"guess-number-higher-or-lower\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">guessNumber</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;\t\t\t\t<span class=\"comment\">// Standard binary search algorithm</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">low</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, high = n, result = -<span class=\"number\">2</span>;\t\t<span class=\"comment\">// Arbitrary result, but not 0</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (result != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        mid = low + (high-low)/<span class=\"number\">2</span>;\t\t\t<span class=\"comment\">// Check the mid.</span></span><br><span class=\"line\">        result = guess(mid);\t\t\t\t<span class=\"comment\">// Check if our guess is correct</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result == -<span class=\"number\">1</span>)\t\t\t\t\t<span class=\"comment\">// If result == -1, then we overshot</span></span><br><span class=\"line\">            high = mid-<span class=\"number\">1</span>;\t\t\t\t\t<span class=\"comment\">// So we can discard all values &gt; mid</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (result == <span class=\"number\">1</span>)\t\t\t\t<span class=\"comment\">// If result == 1, we undershot</span></span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;\t\t\t\t\t<span class=\"comment\">// Need to discard all the values &lt; mid</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid;\t\t\t\t\t\t\t\t<span class=\"comment\">// Result == 0, so return the mid.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Ransom-Note\"><a href=\"#Ransom-Note\" class=\"headerlink\" title=\"Ransom Note\"></a><a href=\"https://leetcode.com/problems/ransom-note/submissions/\">Ransom Note</a><a name=\"ransom-note\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canConstruct</span><span class=\"params\">(String ransomNote, String magazine)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] store = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: magazine.toCharArray())\t\t<span class=\"comment\">// First, fill the store with available</span></span><br><span class=\"line\">        store[c-<span class=\"string\">&#x27;a&#x27;</span>]++;\t\t\t\t\t\t\t<span class=\"comment\">// characters from the magazine</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: ransomNote.toCharArray())\t\t<span class=\"comment\">// Then, scan through the note, decrement</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--store[c-<span class=\"string\">&#x27;a&#x27;</span>] &lt; <span class=\"number\">0</span>)\t\t\t\t\t<span class=\"comment\">// each char&#x27;s index by 1 because we used</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t<span class=\"comment\">// it. If it&#x27;s frequency drops below 0,</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">// then it means that we need more chars</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// than available. In the end, return</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// true if everything worked out.</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"First-Unique-Character-in-a-String\"><a href=\"#First-Unique-Character-in-a-String\" class=\"headerlink\" title=\"First Unique Character in a String\"></a><a href=\"https://leetcode.com/problems/first-unique-character-in-a-string/submissions/\">First Unique Character in a String</a><a name=\"first-unique-character-in-a-string\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">firstUniqChar</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] freq = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];\t\t\t<span class=\"comment\">// Preprocess freq array to maintain freq of each</span></span><br><span class=\"line\">    <span class=\"type\">char</span>[] chars = s.toCharArray();\t\t<span class=\"comment\">// character in the string s</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: chars)</span><br><span class=\"line\">        ++freq[c-<span class=\"string\">&#x27;a&#x27;</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; chars.length; i++)\t<span class=\"comment\">// Make a second pass through the chars of the</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (freq[chars[i]-<span class=\"string\">&#x27;a&#x27;</span>] == <span class=\"number\">1</span>)\t\t<span class=\"comment\">// string in order, and if any of the char&#x27;s</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;\t\t\t\t\t\t<span class=\"comment\">// frequency is 1, that&#x27;s our unique char</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">// Otherwise, no unique character</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Find-the-Difference\"><a href=\"#Find-the-Difference\" class=\"headerlink\" title=\"Find the Difference\"></a><a href=\"https://leetcode.com/problems/find-the-difference/\">Find the Difference</a><a name=\"find-the-difference\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">The general idea here is same as the problem where we are required to find a unique int</span></span><br><span class=\"line\"><span class=\"comment\">in an array containing duplicates except one. We use the xor operator between each character</span></span><br><span class=\"line\"><span class=\"comment\">of the string s and t, and the ones that are duplicate will xor to give 0. XOR of any element</span></span><br><span class=\"line\"><span class=\"comment\">with 0 is the element itself, and XOR of two same elements gives 0. This way, since string s</span></span><br><span class=\"line\"><span class=\"comment\">and t basically has pairs of repeating characters except one, the unique element will XOR</span></span><br><span class=\"line\"><span class=\"comment\">with 0 and give us it&#x27;s ASCII code. The only thing we need to take care of is to now shift it</span></span><br><span class=\"line\"><span class=\"comment\">up by 26, so we add &#x27;a&#x27; and convert it to char.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">char</span> <span class=\"title function_\">findTheDifference</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">xor</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: s.toCharArray())</span><br><span class=\"line\">        xor ^= c-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: t.toCharArray())</span><br><span class=\"line\">        xor ^= c-<span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">char</span>)(xor+<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Nth-Digit\"><a href=\"#Nth-Digit\" class=\"headerlink\" title=\"Nth Digit\"></a><a href=\"https://leetcode.com/problems/nth-digit/\">Nth Digit</a><a name=\"nth-digit\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">Notice that # of digits between 0-9 is 1*9, 10-99 is 2*90, 100-999 is 3*900. If we generalize</span></span><br><span class=\"line\"><span class=\"comment\">it, it is exactly equal to 9 * (num of digits in the number) * 10^&#123;# of digits - 1&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findNthDigit</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (n &lt; <span class=\"number\">10</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pow</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">// First we need to figure out how many digits there are</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">upperBound</span> <span class=\"operator\">=</span> <span class=\"number\">9</span>;\t\t<span class=\"comment\">// in the number.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; upperBound)&#123;</span><br><span class=\"line\">        n -= upperBound;\t\t<span class=\"comment\">// If n is a two digit number, subtract the 9 single digit</span></span><br><span class=\"line\">        ++pow;\t\t\t\t\t<span class=\"comment\">// numbers, if 3 digit, subtract the first 189 digits.</span></span><br><span class=\"line\">        upperBound = (<span class=\"type\">long</span>)Math.pow(<span class=\"number\">10</span>, pow-<span class=\"number\">1</span>) * pow * <span class=\"number\">9</span>;</span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t<span class=\"comment\">// pow allows us to track how many digits there are in num.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>)Math.pow(<span class=\"number\">10</span>,pow-<span class=\"number\">1</span>) + (n-<span class=\"number\">1</span>)/pow;\t\t<span class=\"comment\">// Calculate which number we want</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">position</span> <span class=\"operator\">=</span> pow - <span class=\"number\">1</span> - (n-<span class=\"number\">1</span>) % pow;\t\t\t\t<span class=\"comment\">// Calculate which index we want</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; position; i++)\t\t\t\t\t<span class=\"comment\">// Divide num that many times</span></span><br><span class=\"line\">        num /= <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num % <span class=\"number\">10</span>;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// num % 10 gives us that digit.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Sum-of-Left-Leaves\"><a href=\"#Sum-of-Left-Leaves\" class=\"headerlink\" title=\"Sum of Left Leaves\"></a><a href=\"https://leetcode.com/problems/sum-of-left-leaves/\">Sum of Left Leaves</a><a name=\"sum-of-left-leaves\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sumOfLeftLeaves</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)\t\t<span class=\"comment\">// Empty tree, therefore total is 0.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// Initialize sum.</span></span><br><span class=\"line\">    <span class=\"comment\">// Look ahead and check. If left is not null but left is a leaf, then sum is the value of the left leaf.</span></span><br><span class=\"line\">    <span class=\"comment\">// But if left is null or left is an inner node, then we need to explore it, so sum is whatever the subtree from the left node returns.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root.left != <span class=\"literal\">null</span> &amp;&amp; root.left.left == <span class=\"literal\">null</span> &amp;&amp; root.left.right == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        sum = root.left.val;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        sum = sumOfLeftLeaves(root.left);</span><br><span class=\"line\">    <span class=\"comment\">// We computed the sum of the left side. Now we need to traverse the right side and fetch</span></span><br><span class=\"line\">    <span class=\"comment\">// the sum, so total sum is sum of the left side as computed above + sum returned by</span></span><br><span class=\"line\">    <span class=\"comment\">// traversing the right side.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum + sumOfLeftLeaves(root.right);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Longest-Palindrome\"><a href=\"#Longest-Palindrome\" class=\"headerlink\" title=\"Longest Palindrome\"></a><a href=\"https://leetcode.com/problems/longest-palindrome/\">Longest Palindrome</a><a name=\"longest-palindrome\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">longestPalindrome</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] freq = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">128</span>];\t\t<span class=\"comment\">// To record the frequency of each char</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: s.toCharArray())</span><br><span class=\"line\">        freq[c]++;\t\t\t\t\t<span class=\"comment\">// Increment count by 1 for each character observed</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t<span class=\"comment\">// length of the longest palindrome</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">isOdd</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;\t\t\t<span class=\"comment\">// Check if our palindrome length is odd</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">128</span>; i++)&#123;\t<span class=\"comment\">// Go through each character&#x27;s index</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (freq[i] != <span class=\"number\">0</span>)&#123;\t\t\t<span class=\"comment\">// Only if it has been observed atleast once</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> freq[i];\t\t<span class=\"comment\">// Store it&#x27;s frequency</span></span><br><span class=\"line\">            <span class=\"type\">int</span> used;\t\t\t\t<span class=\"comment\">// Record how many of it&#x27;s occurrences we will use</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (val % <span class=\"number\">2</span> == <span class=\"number\">0</span>)\t\t<span class=\"comment\">// If a perfect multiple of 2, we will use all</span></span><br><span class=\"line\">                used = val;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                used = val-<span class=\"number\">1</span>;\t\t<span class=\"comment\">// If odd occurrences, then the max we can use to form a</span></span><br><span class=\"line\">                isOdd = <span class=\"literal\">true</span>;\t\t<span class=\"comment\">// valid palindrome is val-1. It also tells us that the</span></span><br><span class=\"line\">            &#125;\t\t\t\t\t\t<span class=\"comment\">// palindrome is going to be of odd length.</span></span><br><span class=\"line\">            len += used;\t\t\t<span class=\"comment\">// Finally, increment length by the number of chars used</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isOdd)\t\t\t\t\t\t<span class=\"comment\">// If length is odd, we can always insert any single</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> len+<span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">// character in the middle to keep the palindrome valid.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> len;\t\t\t\t\t\t<span class=\"comment\">// If the length is even, then we can&#x27;t do anything.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Fizz-Buzz\"><a href=\"#Fizz-Buzz\" class=\"headerlink\" title=\"Fizz Buzz\"></a><a href=\"https://leetcode.com/problems/fizz-buzz/\">Fizz Buzz</a><a name=\"fizz-buzz\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">fizzBuzz</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    List&lt;String&gt; nums = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;String&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= n; ++i)&#123;\t\t\t\t<span class=\"comment\">// Loop from 1 to n</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i % <span class=\"number\">15</span> == <span class=\"number\">0</span>)\t\t\t\t\t\t<span class=\"comment\">// If i divisible by 15, add &quot;FizzBuzz&quot;</span></span><br><span class=\"line\">            nums.add(<span class=\"string\">&quot;FizzBuzz&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">5</span> == <span class=\"number\">0</span>)\t\t\t\t\t<span class=\"comment\">// i&#x27;s not a multiple of 15, check if it&#x27;s a</span></span><br><span class=\"line\">            nums.add(<span class=\"string\">&quot;Buzz&quot;</span>);\t\t\t\t\t<span class=\"comment\">// multiple of 5. If so, add &quot;Buzz&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i % <span class=\"number\">3</span> == <span class=\"number\">0</span>)\t\t\t\t\t<span class=\"comment\">// i&#x27;s not a multiple of 5, check if it&#x27;s a</span></span><br><span class=\"line\">            nums.add(<span class=\"string\">&quot;Fizz&quot;</span>);\t\t\t\t\t<span class=\"comment\">// multiple of 3, if so, add &quot;Fizz&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            nums.add(i+<span class=\"string\">&quot;&quot;</span>);\t\t\t\t\t\t<span class=\"comment\">// Otherwise, just add the String type of the</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// number</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Third-maximum-Number\"><a href=\"#Third-maximum-Number\" class=\"headerlink\" title=\"Third maximum Number\"></a><a href=\"https://leetcode.com/problems/third-maximum-number/\">Third maximum Number</a><a name=\"third-maximum-number\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">thirdMax</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">0</span>)\t\t<span class=\"comment\">// Empty array</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">1</span>)\t\t<span class=\"comment\">// Size 1 array</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">2</span>)\t\t<span class=\"comment\">// Size 2 array, check between 0th element or 1st element</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>] &gt; nums[<span class=\"number\">1</span>] ? nums[<span class=\"number\">0</span>] : nums[<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">firstMax</span> <span class=\"operator\">=</span> Long.MIN_VALUE;\t\t<span class=\"comment\">// Lowest values for all three</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">secondMax</span> <span class=\"operator\">=</span> Long.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"variable\">thirdMax</span> <span class=\"operator\">=</span> Long.MIN_VALUE;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums)&#123;\t\t\t\t\t<span class=\"comment\">// For each number in the array</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt; firstMax)&#123;\t\t\t\t<span class=\"comment\">// If num &gt; than the largest, then old largest</span></span><br><span class=\"line\">            thirdMax = secondMax;\t\t<span class=\"comment\">// becomes second largest and second largest becomes</span></span><br><span class=\"line\">            secondMax = firstMax;\t\t<span class=\"comment\">// first largest, then update the largest.</span></span><br><span class=\"line\">            firstMax = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; secondMax &amp;&amp; i != firstMax)&#123;\t<span class=\"comment\">// If num &gt; second and num is not is the</span></span><br><span class=\"line\">            thirdMax = secondMax;\t\t\t\t\t<span class=\"comment\">// same as first, first largets becomes</span></span><br><span class=\"line\">            secondMax = i;\t\t\t\t\t\t\t<span class=\"comment\">// second largest and update the second</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (i &gt; thirdMax &amp;&amp; i != secondMax &amp;&amp; i != firstMax) <span class=\"comment\">// // If num &gt; third, we</span></span><br><span class=\"line\">            \tthirdMax = i;\t\t\t\t\t\t<span class=\"comment\">// need to check that it is not the same</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// as the first and second largest.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (thirdMax == Long.MIN_VALUE)\t\t\t\t\t<span class=\"comment\">// This check allows us to make sure that</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)firstMax;\t\t\t\t\t\t<span class=\"comment\">// we do indeed have a third max and is</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)thirdMax;\t\t\t\t\t\t\t<span class=\"comment\">// not what we initialized initially.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Add-Two-Strings\"><a href=\"#Add-Two-Strings\" class=\"headerlink\" title=\"Add Two Strings\"></a><a href=\"https://leetcode.com/problems/add-strings/\">Add Two Strings</a><a name=\"add-two-strings\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">addStrings</span><span class=\"params\">(String num1, String num2)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num1.equals(<span class=\"string\">&quot;0&quot;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num2.equals(<span class=\"string\">&quot;0&quot;</span>))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> num1;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** We use a char array to maintain the digit at each index. We want the array to be of</span></span><br><span class=\"line\"><span class=\"comment\">    the size of the largest string + 1 to handle carry bit if any at the end. We start</span></span><br><span class=\"line\"><span class=\"comment\">    adding each digit of the string from the end, and place it in it&#x27;s correct index at the</span></span><br><span class=\"line\"><span class=\"comment\">    end of the sum array. This way, we avoid reversing it and return the answer in constant</span></span><br><span class=\"line\"><span class=\"comment\">    time. Take care to convert the digit you compute by adding &#x27;0&#x27;. Lastly, if the carry bit</span></span><br><span class=\"line\"><span class=\"comment\">    is 1, we need to make the 0th index as 1, and return the string by using the sum array.</span></span><br><span class=\"line\"><span class=\"comment\">    If it&#x27;s not 1, then the sum array has a leading 0 which we don&#x27;t want. So we use Java&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">    String constructor that takes in the char array, startingIndex in that array and the</span></span><br><span class=\"line\"><span class=\"comment\">    number of elements of that array we want. So if the carry isn&#x27;t 1, we technically want</span></span><br><span class=\"line\"><span class=\"comment\">    everything from index 1 and # of elements = sum.length - 1 because we discard 0 index.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"type\">char</span>[] sum = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[<span class=\"number\">1</span> + Math.max(num1.length(), num2.length())];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> sum.length-<span class=\"number\">1</span>, idx1 = num1.length()-<span class=\"number\">1</span>, idx2 = num2.length()-<span class=\"number\">1</span>, carry = <span class=\"number\">0</span>, total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> n1, n2;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (idx1 &gt;= <span class=\"number\">0</span> || idx2 &gt;= <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        n1 = idx1 &lt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : num1.charAt(idx1--)-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        n2 = idx2 &lt; <span class=\"number\">0</span> ? <span class=\"number\">0</span> : num2.charAt(idx2--)-<span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        total = n1 + n2 + carry;</span><br><span class=\"line\">        carry = total/<span class=\"number\">10</span>;</span><br><span class=\"line\">        sum[index--] = (<span class=\"type\">char</span>)(total % <span class=\"number\">10</span> + <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (carry == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        sum[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;1&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(sum);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(sum, <span class=\"number\">1</span>, sum.length-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Construct-Quad-Tree\"><a href=\"#Construct-Quad-Tree\" class=\"headerlink\" title=\"Construct Quad Tree\"></a><a href=\"https://leetcode.com/problems/construct-quad-tree/\">Construct Quad Tree</a><a name=\"construct-quad-tree\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span>[][] grid;\t\t\t\t\t<span class=\"comment\">// Store it once, instead of passing it over &amp; over.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Node <span class=\"title function_\">construct</span><span class=\"params\">(<span class=\"type\">int</span>[][] _grid)</span> &#123;</span><br><span class=\"line\">    grid = _grid;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> helper(<span class=\"number\">0</span>,<span class=\"number\">0</span>,grid.length);\t\t<span class=\"comment\">// Ask helper to build the tree.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> Node <span class=\"title function_\">helper</span><span class=\"params\">(<span class=\"type\">int</span> top, <span class=\"type\">int</span> left, <span class=\"type\">int</span> len)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt;= <span class=\"number\">0</span>)\t\t\t\t\t\t<span class=\"comment\">// Base case: if empty grid or if we are done</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;\t\t\t\t\t<span class=\"comment\">// checking the full grid, return null</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> grid[top][left];\t\t\t<span class=\"comment\">// Get the topleft value, and start checking the box</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; len; ++i)&#123;\t\t<span class=\"comment\">// of len*len. If at any point, the value doesn&#x27;t</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; len; ++j)&#123;\t<span class=\"comment\">// match the key, we have found a breakpoint from</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (grid[top+i][left+j] != key)&#123;\t<span class=\"comment\">// where we need to break the grid into four</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> len/<span class=\"number\">2</span>;\t\t<span class=\"comment\">// grids, each of len = len/2. The topleft grid has</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"literal\">true</span>, <span class=\"literal\">false</span>, \t<span class=\"comment\">// the same top and left point, the topright</span></span><br><span class=\"line\">                                helper(top,left, offset),\t<span class=\"comment\">// grid has left point shifted to</span></span><br><span class=\"line\">                                helper(top, left + offset, offset),\t<span class=\"comment\">// the right by offset.</span></span><br><span class=\"line\">                                helper(top+offset, left, offset),\t<span class=\"comment\">// The bottom left grid</span></span><br><span class=\"line\">                                helper(top+offset, left+offset, offset));\t<span class=\"comment\">// is shifted</span></span><br><span class=\"line\">            &#125;\t<span class=\"comment\">// downwards by offset with the same left point. The bottom right grid will</span></span><br><span class=\"line\">        &#125;\t\t<span class=\"comment\">// have an index where it&#x27;s top is shifted down by len/2 and left by left/2.</span></span><br><span class=\"line\">    &#125;\t\t\t<span class=\"comment\">// We know that the node will have a value = true if 1 else false and it won&#x27;t be a leaf, so true, false, topleft, topright, bottomleft, bottomright.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(key == <span class=\"number\">1</span>, <span class=\"literal\">true</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>, <span class=\"literal\">null</span>);\t<span class=\"comment\">// Everything passed, so we return a new Node whose value is true if key is 1, else false and it will be a leaf, with</span></span><br><span class=\"line\"><span class=\"comment\">// no children, so 4 nulls.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"N-ary-Tree-Level-Order-Traversal\"><a href=\"#N-ary-Tree-Level-Order-Traversal\" class=\"headerlink\" title=\"N-ary Tree Level Order Traversal\"></a><a href=\"https://leetcode.com/problems/n-ary-tree-level-order-traversal/\">N-ary Tree Level Order Traversal</a><a name=\"n-ary-tree-level-order-traversal\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">levelOrder</span><span class=\"params\">(Node root)</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; res = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();\t<span class=\"comment\">// Result list</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)\t\t\t\t\t\t\t\t<span class=\"comment\">// If root is null, return empty list.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    Queue&lt;Node&gt; q = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();\t\t\t\t<span class=\"comment\">// BFS Queue. Add the root.</span></span><br><span class=\"line\">    q.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.isEmpty())&#123;\t\t\t\t\t\t\t<span class=\"comment\">// While q isn&#x27;t empty</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> q.size();\t\t\t\t\t\t<span class=\"comment\">// Check how many elements in that level</span></span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(size);<span class=\"comment\">// level list to store elements.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++)&#123;\t\t\t\t<span class=\"comment\">// Remove each node for whatever the size</span></span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> q.poll();\t\t\t\t\t\t<span class=\"comment\">// Add that node&#x27;s value and add all of</span></span><br><span class=\"line\">            level.add(n.val);\t\t\t\t\t\t<span class=\"comment\">// its children to the queue.</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Node child: n.children)</span><br><span class=\"line\">                q.add(child);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        res.add(level);\t\t\t\t\t\t\t\t<span class=\"comment\">// Add the level array to the result</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Return the result list.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Number-of-Segments-in-a-String\"><a href=\"#Number-of-Segments-in-a-String\" class=\"headerlink\" title=\"Number of Segments in a String\"></a><a href=\"https://leetcode.com/problems/number-of-segments-in-a-string/\">Number of Segments in a String</a><a name=\"number-of-segments-in-a-string\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">countSegments</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() == <span class=\"number\">0</span>)\t\t\t\t\t<span class=\"comment\">// Empty String</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">segments</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t\t<span class=\"comment\">// Record segments</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> <span class=\"variable\">prev</span> <span class=\"operator\">=</span> s.charAt(<span class=\"number\">0</span>);\t\t\t\t<span class=\"comment\">// We will compare adjacent characters.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; s.length(); ++i)&#123;\t<span class=\"comment\">// Start looking at chars from index 0</span></span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> s.charAt(i);\t\t\t<span class=\"comment\">// Get the current char</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (prev != <span class=\"string\">&#x27; &#x27;</span> &amp;&amp; curr == <span class=\"string\">&#x27; &#x27;</span>)\t\t<span class=\"comment\">// If previous char wasn&#x27;t a space but the</span></span><br><span class=\"line\">            ++segments;\t\t\t\t\t\t<span class=\"comment\">// current char is, we found a segment.</span></span><br><span class=\"line\">        prev = curr;\t\t\t\t\t\t<span class=\"comment\">// Make previous = current for next iteration</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">This line is important. If prev was an empty space, that means that all we have been looking</span></span><br><span class=\"line\"><span class=\"comment\">at was empty spaces towards the end. So return whatever segments we found in the beginning</span></span><br><span class=\"line\"><span class=\"comment\">of the string. But if prev wasn&#x27;t a space, that means the char next to prev might have been</span></span><br><span class=\"line\"><span class=\"comment\">an empty space or just a normal character. In any case, we would want to include that last</span></span><br><span class=\"line\"><span class=\"comment\">segment, so we return segment+1.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> prev == <span class=\"string\">&#x27; &#x27;</span> ? segments : segments+<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Binary-Tree-Level-Order-Traversal\"><a href=\"#Binary-Tree-Level-Order-Traversal\" class=\"headerlink\" title=\"Binary Tree Level Order Traversal\"></a><a href=\"https://leetcode.com/problems/binary-tree-level-order-traversal/\">Binary Tree Level Order Traversal</a><a name=\"binary-tree-level-order-traversal\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">levelOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">    List&lt;List&lt;Integer&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)\t\t\t\t\t\t<span class=\"comment\">// Empty Tree</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    Queue&lt;TreeNode&gt; q = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();\t<span class=\"comment\">// BFS Queue</span></span><br><span class=\"line\">    q.add(root);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.isEmpty())&#123;\t\t\t\t\t<span class=\"comment\">// While we have something to process</span></span><br><span class=\"line\">        List&lt;Integer&gt; level = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> q.size();\t\t\t\t<span class=\"comment\">// Check how many elements at the current level</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; size; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">TreeNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> q.poll();\t\t<span class=\"comment\">// Remove one element each time</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (node != <span class=\"literal\">null</span>)&#123;\t\t\t\t<span class=\"comment\">// If not null, add it&#x27;s val to the level list,</span></span><br><span class=\"line\">                level.add(node.val);\t\t<span class=\"comment\">// and it&#x27;s left and right children to the queue</span></span><br><span class=\"line\">                q.add(node.left);\t\t\t<span class=\"comment\">// to process in order</span></span><br><span class=\"line\">                q.add(node.right);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!level.isEmpty())\t\t\t\t<span class=\"comment\">// If level list wasn&#x27;t empty,</span></span><br><span class=\"line\">            result.add(level);\t\t\t\t<span class=\"comment\">// add it to the result list.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Path-Sum-III\"><a href=\"#Path-Sum-III\" class=\"headerlink\" title=\"Path Sum III\"></a><a href=\"https://leetcode.com/problems/path-sum-iii/submissions/\">Path Sum III</a><a name=\"path-sum-iii\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HashMap&lt;Integer, Integer&gt; sumToWays;\t\t\t<span class=\"comment\">// Record how many ways there are to form sum</span></span><br><span class=\"line\"><span class=\"type\">int</span> ways;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Total number of ways.</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pathSum</span><span class=\"params\">(TreeNode root, <span class=\"type\">int</span> sum)</span> &#123;</span><br><span class=\"line\">    sumToWays = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    ways = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sumToWays.put(<span class=\"number\">0</span>,<span class=\"number\">1</span>);\t\t\t\t\t\t\t<span class=\"comment\">// 1 way to form a sum of 0.</span></span><br><span class=\"line\">    helper(root, <span class=\"number\">0</span>, sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ways;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">The idea here is as follows. Start with the root node, and keep a running total. We maintain</span></span><br><span class=\"line\"><span class=\"comment\">how many ways there to form a running sum. Then we check how many ways there are to form</span></span><br><span class=\"line\"><span class=\"comment\">(running sum) - (sum we are looking for). If there is a way to form it, then we increase the</span></span><br><span class=\"line\"><span class=\"comment\">number of ways to form sum. We then have to update the map to record how many ways can the</span></span><br><span class=\"line\"><span class=\"comment\">running sum be formed. If it&#x27;s something we could form before, increment it, or else set it</span></span><br><span class=\"line\"><span class=\"comment\">to 1. Now, traverse the left side and then the right side. In the end, for each time we</span></span><br><span class=\"line\"><span class=\"comment\">incremented the count for a running sum, we need to decrement it because we are backtracking.</span></span><br><span class=\"line\"><span class=\"comment\">We are first going down, incrementing the count for runningSum, then we move up and decrement</span></span><br><span class=\"line\"><span class=\"comment\">it by 1 for each time we observed it. This is to maintain the Pre-Order traversal.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">helper</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> runningSum, <span class=\"type\">int</span> sum)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    runningSum += node.val;</span><br><span class=\"line\">    ways += sumToWays.getOrDefault(runningSum-sum, <span class=\"number\">0</span>);</span><br><span class=\"line\">    sumToWays.put(runningSum, sumToWays.getOrDefault(runningSum, <span class=\"number\">0</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    helper(node.left, runningSum, sum);</span><br><span class=\"line\">    helper(node.right, runningSum, sum);</span><br><span class=\"line\"></span><br><span class=\"line\">    sumToWays.put(runningSum, sumToWays.get(runningSum)-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Find-All-Anagrams-in-a-String\"><a href=\"#Find-All-Anagrams-in-a-String\" class=\"headerlink\" title=\"Find All Anagrams in a String\"></a><a href=\"https://leetcode.com/problems/find-all-anagrams-in-a-string/\">Find All Anagrams in a String</a><a name=\"find-all-anagrams-in-a-string\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">findAnagrams</span><span class=\"params\">(String s, String p)</span> &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, end = <span class=\"number\">0</span>, slen = s.length(), plen = p.length();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (slen == <span class=\"number\">0</span> || slen &lt; plen || plen == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] freq = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">26</span>];\t\t\t\t<span class=\"comment\">// Store the freq of chars in p</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: p.toCharArray())</span><br><span class=\"line\">        freq[c-<span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">    <span class=\"type\">char</span>[] sArr = s.toCharArray();\t\t\t<span class=\"comment\">// Get the chars of the string s as an array</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (end &lt; slen)&#123;\t\t\t\t\t\t<span class=\"comment\">// While everything is not processed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (--freq[sArr[end]-<span class=\"string\">&#x27;a&#x27;</span>] &gt;= <span class=\"number\">0</span>)\t\t<span class=\"comment\">// decrease the freq of the char at index end</span></span><br><span class=\"line\">            plen--;\t\t\t\t\t\t\t<span class=\"comment\">// if it&#x27;s &gt; 0, then we matched something in p</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// so decrease plen by 1.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (plen == <span class=\"number\">0</span>)&#123;\t\t\t\t\t<span class=\"comment\">// If plen goes to 0, we were able to match all</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (end-start+<span class=\"number\">1</span> == p.length())\t<span class=\"comment\">// chars of p. If length of the matched chars is</span></span><br><span class=\"line\">                result.add(start);\t\t\t<span class=\"comment\">// equal to length p, we found a start point.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (freq[sArr[start]-<span class=\"string\">&#x27;a&#x27;</span>] &gt;= <span class=\"number\">0</span>)\t<span class=\"comment\">// Check if the freq of char at start index is</span></span><br><span class=\"line\">                plen++;\t\t\t\t\t\t<span class=\"comment\">// &gt;= 0. If it is, shift the window to the right</span></span><br><span class=\"line\">            ++freq[sArr[start++]-<span class=\"string\">&#x27;a&#x27;</span>];\t\t<span class=\"comment\">// but first restore the frequency of the char</span></span><br><span class=\"line\">        &#125;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// at the index start.</span></span><br><span class=\"line\"></span><br><span class=\"line\">        end++;\t\t\t\t\t\t\t\t<span class=\"comment\">// Get ready to inspect the new element</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;\t\t\t\t\t\t\t<span class=\"comment\">// Return the answer.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Arranging-Coins\"><a href=\"#Arranging-Coins\" class=\"headerlink\" title=\"Arranging Coins\"></a><a href=\"https://leetcode.com/problems/arranging-coins/\">Arranging Coins</a><a name=\"arranging-coins\"></a></h3><p>The idea is as follows. Sum of first n numbers is given by $\\frac{n^2+n}{2}$. We need to find $n$ such that sum of $n$ numbers is closest to the number of coins we have. That is, $\\frac{n^2+n}{2} &#x3D; k$ where $k$ is the number of coins we have. So, everything boils down to solving the quadratic equation $n^2 + n - 2k &#x3D; 0$. We use the quadratic formula where for any quadratic equation $ax^2 -bx + c$ is solved substituting for $a$, $b$ and $c$ in $x &#x3D; \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2}$. Here, $a$ and $b$ are always going to be 1, while $c$ is always going to be $2k$. Substitute those, and solve the equation.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">arrangeCoins</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// return solveQuadratic(n);</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> iterative(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">solveQuadratic</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)(Math.sqrt(<span class=\"number\">1</span> + <span class=\"number\">8</span>*(<span class=\"type\">long</span>)n)-<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">iterative</span><span class=\"params\">(<span class=\"type\">int</span> n)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">used</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, level = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// Coins used, and level completed.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (n &gt; <span class=\"number\">0</span>)&#123;\t\t\t\t\t<span class=\"comment\">// While coins left are greater than 0.</span></span><br><span class=\"line\">        n-=used;\t\t\t\t\t<span class=\"comment\">// Calculcate remaining coins.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt; -<span class=\"number\">1</span>)\t\t\t\t\t<span class=\"comment\">// If there are still some coins left,</span></span><br><span class=\"line\">            ++level;\t\t\t\t<span class=\"comment\">// we were able to fill the level.</span></span><br><span class=\"line\">        ++used;\t\t\t\t\t\t<span class=\"comment\">// Prepare used for the next level, which is plus 1.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> level;\t\t\t\t\t<span class=\"comment\">// Return level</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Hamming-Distance\"><a href=\"#Hamming-Distance\" class=\"headerlink\" title=\"Hamming Distance\"></a><a href=\"https://leetcode.com/problems/hamming-distance/\">Hamming Distance</a><a name=\"hamming-distance\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">hammingDistance</span><span class=\"params\">(<span class=\"type\">int</span> x, <span class=\"type\">int</span> y)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">diff</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t<span class=\"comment\">// Track differences</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (x != <span class=\"number\">0</span> || y != <span class=\"number\">0</span>) &#123;\t<span class=\"comment\">// While both of them aren&#x27;t 0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x % <span class=\"number\">2</span> != y % <span class=\"number\">2</span>)\t\t<span class=\"comment\">// Check the bit of x and y by mod 2. If they are unequal</span></span><br><span class=\"line\">            diff++;\t\t\t\t<span class=\"comment\">// increment difference.</span></span><br><span class=\"line\">        x /= <span class=\"number\">2</span>;\t\t\t\t\t<span class=\"comment\">// Divide x and y by 2.</span></span><br><span class=\"line\">        y /= <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> diff;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"String-Compression\"><a href=\"#String-Compression\" class=\"headerlink\" title=\"String Compression\"></a><a href=\"https://leetcode.com/problems/string-compression/\">String Compression</a><a name=\"string-compression\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">compress</span><span class=\"params\">(<span class=\"type\">char</span>[] chars)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> chars.length;\t\t\t<span class=\"comment\">// No need to reverse array of length 0 or 1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> len;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">arrayIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t<span class=\"comment\">// To maintain the length of new array.</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t<span class=\"comment\">// start index</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t<span class=\"comment\">// end index</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (end &lt; len)&#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">first</span> <span class=\"operator\">=</span> chars[start];\t<span class=\"comment\">// Record the char we are looking at.</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t<span class=\"comment\">// count is 0.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (end &lt; len &amp;&amp; chars[end] == first)&#123;\t<span class=\"comment\">// while the char is the same</span></span><br><span class=\"line\">            ++end;\t\t\t\t\t<span class=\"comment\">// increment end to check next char</span></span><br><span class=\"line\">            ++count;\t\t\t\t<span class=\"comment\">// and increment the count.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        start = end;\t\t\t\t<span class=\"comment\">// shift start to end to check next sequence of chars</span></span><br><span class=\"line\">        chars[arrayIndex++] = first;\t<span class=\"comment\">// our arrayIndex points to to the new array&#x27;s </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count != <span class=\"number\">1</span>)&#123;\t\t\t\t<span class=\"comment\">// indices. So copy the first char to arrayIndex.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &gt; <span class=\"number\">1</span> &amp;&amp; count &lt; <span class=\"number\">10</span>)\t<span class=\"comment\">//Only if count isn&#x27;t 1, if count is less than 10</span></span><br><span class=\"line\">                chars[arrayIndex++] = (<span class=\"type\">char</span>)(count+<span class=\"string\">&#x27;0&#x27;</span>);\t<span class=\"comment\">// then we simply convert count to char and write it next to the char we just overwrote.</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>\t\t\t\t\t\t<span class=\"comment\">// Otherwise, it has many digits. So convert it to</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: String.valueOf(count).toCharArray())&#123;\t<span class=\"comment\">// string and add all it&#x27;s digit to the array one by one while increment arrayIndex.</span></span><br><span class=\"line\">                    chars[arrayIndex++] = c;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arrayIndex;\t\t\t<span class=\"comment\">// Wherever arrayIndex is, is the new length for the array.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Number-of-Boomerangs\"><a href=\"#Number-of-Boomerangs\" class=\"headerlink\" title=\"Number of Boomerangs\"></a><a href=\"https://leetcode.com/problems/number-of-boomerangs/\">Number of Boomerangs</a><a name=\"number-of-boomerangs\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">numberOfBoomerangs</span><span class=\"params\">(<span class=\"type\">int</span>[][] points)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">boomerangs</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    HashMap&lt;Double, Integer&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();\t<span class=\"comment\">// To record points with same dist</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] i: points)&#123;\t\t<span class=\"comment\">// Compute distance between one point and every other.</span></span><br><span class=\"line\">        map.clear()\t\t\t\t<span class=\"comment\">// clear map before each relative distance computation</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] j: points)&#123;\t<span class=\"comment\">// Compute distance with other points</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == j)\t\t\t<span class=\"comment\">// Don&#x27;t compare the same two points.</span></span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"type\">double</span> <span class=\"variable\">dist</span> <span class=\"operator\">=</span> Math.sqrt(Math.pow(i[<span class=\"number\">0</span>]-j[<span class=\"number\">0</span>],<span class=\"number\">2</span>) + Math.pow(i[<span class=\"number\">1</span>]-j[<span class=\"number\">1</span>],<span class=\"number\">2</span>));</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">prevCount</span> <span class=\"operator\">=</span> map.getOrDefault(dist, <span class=\"number\">0</span>);\t<span class=\"comment\">// Check how many points are equidistant from point i.</span></span><br><span class=\"line\">            boomerangs += prevCount * <span class=\"number\">2</span>;\t<span class=\"comment\">//  Number of boomerangs = whatever pairs there were before times 2, because you can form twice the number of different orders.</span></span><br><span class=\"line\">            map.put(dist, prevCount+<span class=\"number\">1</span>);\t<span class=\"comment\">// Increase the count of points observed for that distance.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> boomerangs;\t<span class=\"comment\">// return number of boomerangs</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Find-All-Numbers-Disappeared-in-an-Array\"><a href=\"#Find-All-Numbers-Disappeared-in-an-Array\" class=\"headerlink\" title=\"Find All Numbers Disappeared in an Array\"></a><a href=\"https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/\">Find All Numbers Disappeared in an Array</a><a name=\"find-all-numbers-disappeared-in-an-array\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">The idea is simple. For each number in the array, since it&#x27;s gauranteed that that the values</span></span><br><span class=\"line\"><span class=\"comment\">lie are inclusive [1,n], we can look at the index value-1. So check that index, and mark</span></span><br><span class=\"line\"><span class=\"comment\">that value as negative. That is why I take the absolute value. Check value at that index, if</span></span><br><span class=\"line\"><span class=\"comment\">negative, it means we have visited it via some other duplicate value. But if it&#x27;s positive,</span></span><br><span class=\"line\"><span class=\"comment\">then we are seeing it for the first time, so make it&#x27;s value negative. Make a second pass.</span></span><br><span class=\"line\"><span class=\"comment\">For values that are still positive, that means those indices were never visited, hence left</span></span><br><span class=\"line\"><span class=\"comment\">positive. So add 1 to them and add it to the set. Eg:</span></span><br><span class=\"line\"><span class=\"comment\">\tGiven array a = [4,3,2,7,8,2,3,1],</span></span><br><span class=\"line\"><span class=\"comment\">1.\tval = 4 =&gt; idx = 3 &amp; a[3] &gt; 0, therefore, a[3] *= -1</span></span><br><span class=\"line\"><span class=\"comment\">\ta = [4,3,2,-7,8,2,3,1]</span></span><br><span class=\"line\"><span class=\"comment\">2.\tval = 3 =&gt; idx = 2 &amp; a[2] &gt; 0, therefore a[2] *= -1</span></span><br><span class=\"line\"><span class=\"comment\">\ta = [4,3,-2,-7,8,2,3,1]</span></span><br><span class=\"line\"><span class=\"comment\">3.\tval = -2 =&gt; idx = abs(-2)-1 = 1 &amp; a[1] &gt; 0, therefore a[1] *= -1</span></span><br><span class=\"line\"><span class=\"comment\">\ta = [4,-3,-2,-7,8,2,3,1]</span></span><br><span class=\"line\"><span class=\"comment\">4.\tval = -7 =&gt; idx = abs(-7)-1 = 6 &amp; a[6] &gt; 0, therfore a[6] *= -1</span></span><br><span class=\"line\"><span class=\"comment\">\ta = [4,-3,-2,-7,8,2,-3,1]</span></span><br><span class=\"line\"><span class=\"comment\">5.\tval = 8 =&gt; idx = abs(8)-1 = 7 &amp; a[7] &gt; 0, therfore a[7] *= -1</span></span><br><span class=\"line\"><span class=\"comment\">\ta = [4,-3,-2,-7,8,2,-3,-1]</span></span><br><span class=\"line\"><span class=\"comment\">6.\tval = 2 =&gt; idx = 1 but a[2] &lt; 0. No change.</span></span><br><span class=\"line\"><span class=\"comment\">7.\tval = -3 =&gt; idx = abs(-3)-1 = 2 but a[2] &lt; 0. No change.</span></span><br><span class=\"line\"><span class=\"comment\">8.\tval = -1 =&gt; idx = abs(-1)-1 = 0 &amp; a[0] &gt; 0, therefore a[0] *= -1</span></span><br><span class=\"line\"><span class=\"comment\">\ta = [-4,-3,-2,-7,8,2,-3,-1]</span></span><br><span class=\"line\"><span class=\"comment\">Observation: Notice index 4 and 5 have positive values, since those values were never</span></span><br><span class=\"line\"><span class=\"comment\">encountered, so the values at those indexes never became negative. Hence missing values are</span></span><br><span class=\"line\"><span class=\"comment\">5 and 6.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">findDisappearedNumbers</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums)&#123;\t\t\t\t<span class=\"comment\">// For each number in the array</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> Math.abs(i)-<span class=\"number\">1</span>;\t<span class=\"comment\">// Look at the index that the number corresponds to</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[idx] &gt; <span class=\"number\">0</span>)\t\t\t<span class=\"comment\">// If val is -ve, then it means we have encountered it.</span></span><br><span class=\"line\">            nums[idx] *= -<span class=\"number\">1</span>;  \t\t<span class=\"comment\">// If not, make it -ve.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; ++i)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] &gt; <span class=\"number\">0</span>)\t\t\t<span class=\"comment\">// Make another pass through the array, and the indices</span></span><br><span class=\"line\">            result.add(i+<span class=\"number\">1</span>);\t\t<span class=\"comment\">// where value was positive, index+1 was missing from</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;\t\t\t\t\t<span class=\"comment\">// the array</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Assign-Cookies\"><a href=\"#Assign-Cookies\" class=\"headerlink\" title=\"Assign Cookies\"></a><a href=\"https://leetcode.com/problems/assign-cookies/\">Assign Cookies</a><a name=\"assign-cookies\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">We will employ a greedy algorithm where we first try to content children whose requirements</span></span><br><span class=\"line\"><span class=\"comment\">are small. We do this by sorting both the arrays, so we can match the child with least</span></span><br><span class=\"line\"><span class=\"comment\">requirement with the smallest cookie available.</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findContentChildren</span><span class=\"params\">(<span class=\"type\">int</span>[] g, <span class=\"type\">int</span>[] s)</span> &#123;</span><br><span class=\"line\">    Arrays.sort(g);</span><br><span class=\"line\">    Arrays.sort(s);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">satisfied</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; g.length &amp;&amp; j &lt; s.length)&#123;\t<span class=\"comment\">// While children are left and we have cookies,</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s[j] &gt;= g[i])&#123;\t\t<span class=\"comment\">// Check if the cookie at index j &gt;= child i&#x27;s requirement</span></span><br><span class=\"line\">            satisfied++;\t\t<span class=\"comment\">// If so, increment the number of content child and we will</span></span><br><span class=\"line\">            i++;\t\t\t\t<span class=\"comment\">// process the next child.</span></span><br><span class=\"line\">        &#125;\t\t\t\t\t\t<span class=\"comment\">// If cookie j &lt; child i&#x27;s demand, check the next cookie by</span></span><br><span class=\"line\">        j++;\t\t\t\t\t<span class=\"comment\">// incrementing j. If cookie j &gt; child i&#x27;s demand, we will</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t<span class=\"comment\">// still need to increment j, hence outside the conditional.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> satisfied;\t\t\t<span class=\"comment\">// Return number of satisfied children</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Poor-Pigs\"><a href=\"#Poor-Pigs\" class=\"headerlink\" title=\"Poor Pigs\"></a><a href=\"https://leetcode.com/problems/poor-pigs/\">Poor Pigs</a><a name=\"poor-pigs\"></a></h3><p><a href=\"https://leetcode.com/problems/poor-pigs/discuss/94305/1-line-solution-with-detailed-problem-clarification-and-math-proof-(please-read-if-you-really-want-to-know-what-this-problem-means)\">Link</a> to the solution explanation. This problem is phrased poorly and I had to read the comments by other users to understand what it required from me. The link I marked here explains the logic pretty good. But the simple logic is this: The number of rounds $r &#x3D; \\frac{Total Test Time}{Minutes To Die} +1$. Each pig has chances of dying in each round or staying alive till the end, so we plus 1. Now given the number of rounds $r$ and the number of samples $s$, how many volunteers $v$ will you need? $r^v &#x3D; s$. Each round has some volunteers which in total at the end should be able to test out all the samples. Therefore, $v &#x3D;\\log_rs$.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">poorPigs</span><span class=\"params\">(<span class=\"type\">int</span> buckets, <span class=\"type\">int</span> minutesToDie, <span class=\"type\">int</span> minutesToTest)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">base</span> <span class=\"operator\">=</span> minutesToTest/minutesToDie+<span class=\"number\">1</span>;\t\t<span class=\"comment\">// How many rounds can you perform?</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)Math.ceil(Math.log(buckets)/Math.log(base));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Find-Pivot-Index\"><a href=\"#Find-Pivot-Index\" class=\"headerlink\" title=\"Find Pivot Index\"></a><a href=\"https://leetcode.com/problems/find-pivot-index/\">Find Pivot Index</a><a name=\"find-pivot-index\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">pivotIndex</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, leftSum = <span class=\"number\">0</span>;\t\t<span class=\"comment\">// We will test each index as a pivot by sliding it -&gt;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums)\t\t\t\t<span class=\"comment\">// Precalculate the sum of the array</span></span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; ++i)&#123;\t<span class=\"comment\">// Check if the sum of the leftSide of i is</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (leftSum == sum - leftSum - nums[i])\t<span class=\"comment\">// equal to totalSum - leftSideSum - pivot</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;\t\t\t\t\t\t\t<span class=\"comment\">// which is i. If so, return i.</span></span><br><span class=\"line\">        leftSum += nums[i];\t\t\t\t\t\t<span class=\"comment\">// Otherwise add nums[i] to the leftSum and</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// slide pivot to the -&gt;.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">// No pivot found. Return -1.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Squares-of-a-Sorted-Array\"><a href=\"#Squares-of-a-Sorted-Array\" class=\"headerlink\" title=\"Squares of a Sorted Array\"></a><a href=\"https://leetcode.com/problems/squares-of-a-sorted-array/\">Squares of a Sorted Array</a><a name=\"squares-of-a-sorted-array\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] sortedSquares(<span class=\"type\">int</span>[] A) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> A.length;\t\t<span class=\"comment\">// Length of array A</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pivot</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// Pivot is the index where values goes from -ve to +ve.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (pivot &lt; len &amp;&amp; A[pivot] &lt; <span class=\"number\">0</span>) <span class=\"comment\">// While values are -ve.</span></span><br><span class=\"line\">        ++pivot;\t\t\t<span class=\"comment\">// increment pivot. We exit when we find a positive.</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] squares = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[len];\t<span class=\"comment\">// Result array</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// Keeps track of where to where to put elements in result array</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pivot == <span class=\"number\">0</span>)\t\t\t<span class=\"comment\">// pivot = 0 means pivot didn&#x27;t shift, there are only +ve values</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: A)\t\t<span class=\"comment\">// So fill in the array with squares of numbers.</span></span><br><span class=\"line\">            squares[index++] = i*i;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;\t\t\t\t\t<span class=\"comment\">// Otherwise we have a negative somewhere.</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> pivot-<span class=\"number\">1</span>;\t<span class=\"comment\">// So we will compare values left and right of the pivot</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> pivot;\t<span class=\"comment\">// and whichever&#x27;s smaller fills up the array first.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &gt; -<span class=\"number\">1</span> &amp;&amp; right &lt; len)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">lsquare</span> <span class=\"operator\">=</span> A[left] * A[left];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">rsquare</span> <span class=\"operator\">=</span> A[right] * A[right];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (lsquare &lt; rsquare)&#123;\t\t<span class=\"comment\">// left &lt; right, so add left square. decrement left</span></span><br><span class=\"line\">                squares[index++] = lsquare;</span><br><span class=\"line\">                --left;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rsquare &lt; lsquare)&#123;\t<span class=\"comment\">// right &lt; left, add right square and increment.</span></span><br><span class=\"line\">                squares[index++] = rsquare;</span><br><span class=\"line\">                ++right;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                squares[index++] = lsquare;\t<span class=\"comment\">// both are equal. add both square and</span></span><br><span class=\"line\">                squares[index++] = rsquare;\t<span class=\"comment\">// decrement left, increment right.</span></span><br><span class=\"line\">                --left;\t\t\t\t\t\t<span class=\"comment\">// Continue doing this until we hit either end</span></span><br><span class=\"line\">                ++right;\t\t\t\t\t<span class=\"comment\">// of the array.</span></span><br><span class=\"line\">            &#125;\t\t\t\t\t\t\t\t<span class=\"comment\">// In the end we need to check if elements on</span></span><br><span class=\"line\">        &#125;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// either side are left to be filled in.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (left &gt; -<span class=\"number\">1</span>)\t\t\t\t\t<span class=\"comment\">// Left side elements remain, so fill their</span></span><br><span class=\"line\">            squares[index++] = A[left] * A[left--]; <span class=\"comment\">// squares one by one till none left.</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (right &lt; len)\t\t\t\t\t<span class=\"comment\">// Right side elements remain, so fill their</span></span><br><span class=\"line\">            squares[index++] = A[right] * A[right++];\t<span class=\"comment\">// squares in</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> squares;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Repeated-Substring-Pattern\"><a href=\"#Repeated-Substring-Pattern\" class=\"headerlink\" title=\"Repeated Substring Pattern\"></a><a href=\"https://leetcode.com/problems/repeated-substring-pattern/submissions/\">Repeated Substring Pattern</a><a name=\"repeated-substring-pattern\"></a></h3><p>We use the <a href=\"https://www.geeksforgeeks.org/kmp-algorithm-for-pattern-searching/\">KMP Algorithm</a> that allows us to match a string ‚Äòs‚Äô with another string ‚Äòp‚Äô to find the longest sequence of characters in ‚Äòs‚Äô that match ‚Äòp‚Äô. We can use a Naive Pattern match where we start from the beginning of the string and start comparing the characters of ‚Äòs‚Äô with ‚Äòp‚Äô. Initially, we keep the partition at index 0. If the character‚Äôs match, we move partition to the right by 1 till we get to the end of the string. If something doesn‚Äôt match, we don‚Äôt move the partition but look at the next character to match. In the end, wherever the partition is, that‚Äôs our longest length we could match with string ‚Äòp‚Äô. The complexity of that is <i>O(len(p)(len(s)-len(p)+1))</i>.</p>\n<p>KMP fixes it by skipping characters that we know already match. In this problem, we aren‚Äôt matching with any other string but itself. So, we start from index 1 of the string and compare it from the beginning. If they match, we increase j by 1, note it down in lps array and then increase i by 1 to check the next character. j basically measures the longest chain of characters we were able to match. If we couldn‚Äôt match character at index i and if streak was greater than 0, then our new streak becomes whatever it was in the previous round of matching characters. If the streak is 0, then we simply note down at index i in our lps array 0, meaning longest length measured upto index i was 0. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">repeatedSubstringPattern</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">maxLength</span> <span class=\"operator\">=</span> lps(s);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxLength &gt; <span class=\"number\">0</span> &amp;&amp; s.length() % (s.length() - maxLength) == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">lps</span><span class=\"params\">(String s)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> s.length();</span><br><span class=\"line\">    <span class=\"type\">int</span>[] lps = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[len];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;\t\t<span class=\"comment\">// To match the string with itself.</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; len)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s.charAt(i) == s.charAt(j))&#123;\t<span class=\"comment\">// if the chars match</span></span><br><span class=\"line\">            lps[i] = ++j;\t\t\t\t\t<span class=\"comment\">// we record that # of matches at index i was</span></span><br><span class=\"line\">            ++i;\t\t\t\t\t\t\t<span class=\"comment\">// 1+j and increment i to check next character</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;\t\t\t\t\t\t\t\t<span class=\"comment\">// character did not match</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (j &gt; <span class=\"number\">0</span>)\t\t\t\t\t\t<span class=\"comment\">// If our matching streak &gt; 0</span></span><br><span class=\"line\">                j = lps[j-<span class=\"number\">1</span>];\t\t\t\t<span class=\"comment\">// our new streak becomes the previous round&#x27;s streak</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>\t\t\t\t\t\t\t<span class=\"comment\">// Otherwise, streak is already 0.</span></span><br><span class=\"line\">                lps[i++] = <span class=\"number\">0</span>;\t\t\t\t<span class=\"comment\">// So we record that # of matches made at i is 0</span></span><br><span class=\"line\">        &#125;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// We increment i to check next index.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lps[len-<span class=\"number\">1</span>];\t\t\t\t\t\t<span class=\"comment\">// Longest prefix length that was also a suffix</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// is whatever was recorded at the end of array.</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Island-Perimeter\"><a href=\"#Island-Perimeter\" class=\"headerlink\" title=\"Island Perimeter\"></a><a href=\"https://leetcode.com/problems/island-perimeter/\">Island Perimeter</a><a name=\"island-perimeter\"></a></h3><p>The idea is simple. Count the number of cells with value 1 which denotes the land. Check towards the left and up to that cell and check if it shares any edge with another cell with value 1. If it does record that. In the end, the formula for perimeter is 4 * (the number of land cells) - 2 * (overlapping edges).</p>\n<p><strong>Reasoning:</strong> Perimeter of a square is 4 times the length of it‚Äôs side. Here all squares are of length 1. So total perimeter is 4*(number of cells with value &#x3D; 1). But we also need to account the edges that are common between two adjacent land cells. If one square shares an edge with another, we just lost one side from both the square, resulting in a loss of two sides. Therefore, we need to subtract twice the number of overlapping edges from the total perimeter to get  the total perimeter. </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">islandPerimeter</span><span class=\"params\">(<span class=\"type\">int</span>[][] grid)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">land</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">overlap</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; row &lt; grid.length; ++row)</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">col</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; col &lt; grid[<span class=\"number\">0</span>].length; ++col)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (grid[row][col] == <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                ++land;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (row-<span class=\"number\">1</span> &gt; -<span class=\"number\">1</span> &amp;&amp; grid[row-<span class=\"number\">1</span>][col] == <span class=\"number\">1</span>)\t<span class=\"comment\">// Check above the current cell.</span></span><br><span class=\"line\">                    ++overlap;\t\t<span class=\"comment\">// If it&#x27;s a land, we need to record one overlap.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (col-<span class=\"number\">1</span> &gt; -<span class=\"number\">1</span> &amp;&amp; grid[row][col-<span class=\"number\">1</span>] == <span class=\"number\">1</span>)\t<span class=\"comment\">// Similarly, check to the left.</span></span><br><span class=\"line\">                    ++overlap;\t\t<span class=\"comment\">// If it&#x27;s a land, we need to increment overlap</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">4</span>*land - <span class=\"number\">2</span>*overlap;\t\t<span class=\"comment\">// Check the reasoning above.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Number-Complement\"><a href=\"#Number-Complement\" class=\"headerlink\" title=\"Number Complement\"></a><a href=\"https://leetcode.com/problems/number-complement/\">Number Complement</a><a name=\"number-complement\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findComplement</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pow2</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">// Easily keep track of power of 2.</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">comp</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t<span class=\"comment\">// Complement number</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num != <span class=\"number\">0</span>)&#123;\t\t\t<span class=\"comment\">// Since num gets divided by 2, it will be 0 in the end.</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">bit</span> <span class=\"operator\">=</span> num % <span class=\"number\">2</span> == <span class=\"number\">0</span> ? <span class=\"number\">1</span> : <span class=\"number\">0</span>;\t<span class=\"comment\">// If bit is 0 then complement is 1 &amp; vice versa.</span></span><br><span class=\"line\">        comp += bit * pow2;\t\t<span class=\"comment\">// Multiply it by the appropriate power of 2 and add to comp</span></span><br><span class=\"line\">        pow2 *= <span class=\"number\">2</span>;\t\t\t\t<span class=\"comment\">// Update power of 2 for next iteration.</span></span><br><span class=\"line\">        num /= <span class=\"number\">2</span>;\t\t\t\t<span class=\"comment\">// Divide num by 2 to get the next bit.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> comp;\t\t\t\t<span class=\"comment\">// Comp is now the complement.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Binary-Watch\"><a href=\"#Binary-Watch\" class=\"headerlink\" title=\"Binary Watch\"></a><a href=\"https://leetcode.com/problems/binary-watch/\">Binary Watch</a><a name=\"binary-watch\"></a></h3><p>The idea is as follows. We have 10 lights. First 4 represent hours. Namely 1, 2, 4 and 8, which are the first four powers of 2. The next 6 lights, represent minutes. Those are 1, 2, 4, 8, 16 and 32. These are powers of 2 from 0-5. So if we iterate from 1 to 9, powers of numbers 1-3 gives us hours and powers of numbers 4-9 minus 4 gives us minutes. So, if we have, let‚Äôs say 2 lights, we need to find every combination of 2 lights. So in our helper function, we iterate from 1-9 to check every hour and minute combination. We also need to keep a track of the lights that we used, so we don‚Äôt use the same light again. If hours are &gt; 11 or minutes are &gt; 59, we have an invalid time and we can abort. If the number of lights are 0, that means we found a valid time and we should add it to the result. Now, if the lights are not 0, then we need to check every possible combination from the last light used to 9. If i &lt; 4, then we are looking at an hourly combination, otherwise it‚Äôs a minute combination. So we recurse with updated lights used, decrease the numOfLights since we used one, update respective hours or minutes until we hit base case.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">readBinaryWatch</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    helper(<span class=\"number\">0</span>, num, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">helper</span><span class=\"params\">(<span class=\"type\">int</span> lightsUsed, <span class=\"type\">int</span> numOfLights, <span class=\"type\">int</span> hrs, <span class=\"type\">int</span> min)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hrs &gt; <span class=\"number\">11</span> || min &gt; <span class=\"number\">59</span>)\t\t<span class=\"comment\">// Base case. Invalid time</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numOfLights == <span class=\"number\">0</span>)&#123;\t\t\t<span class=\"comment\">// All lights used, so add time to the list.</span></span><br><span class=\"line\">        result.add(hrs + <span class=\"string\">&quot;:&quot;</span> + (min &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + min : min));</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> lightsUsed; i &lt; <span class=\"number\">10</span>; i++)&#123;\t<span class=\"comment\">// Otherwise start recursing from number of prev</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">4</span>)\t\t\t\t\t\t\t<span class=\"comment\">// light used. i &lt; 4 means hours</span></span><br><span class=\"line\">            helper(i+<span class=\"number\">1</span>, numOfLights-<span class=\"number\">1</span>, hrs + (<span class=\"type\">int</span>)Math.pow(<span class=\"number\">2</span>, i), min);</span><br><span class=\"line\">        <span class=\"keyword\">else</span>\t\t\t\t\t\t\t\t<span class=\"comment\">// i = [4,9] means minute. So recurse.</span></span><br><span class=\"line\">            helper(i+<span class=\"number\">1</span>, numOfLights-<span class=\"number\">1</span>, hrs, min + (<span class=\"type\">int</span>)Math.pow(<span class=\"number\">2</span>,i-<span class=\"number\">4</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Minimum-Moves-to-Equal-Array-Elements\"><a href=\"#Minimum-Moves-to-Equal-Array-Elements\" class=\"headerlink\" title=\"Minimum Moves to Equal Array Elements\"></a><a href=\"https://leetcode.com/problems/minimum-moves-to-equal-array-elements/\">Minimum Moves to Equal Array Elements</a><a name=\"minimum-moves-to-equal-array-elements\"></a></h3><p>This was an interesting problem. But after working out a few examples by hand, you can notice that it is always a question of bringing the minimum element in par with everyone. So if you know the minimum of the array, we can check how many steps it will take to bring the minimum in par with other element by calculating the distance between them. For example,</p>\n<blockquote>\n<p>Let the array be [1,2,3]</p>\n<p>We can observe that the minimum here is 1. Let us list down all steps to make all elements equal.</p>\n<ol>\n<li>[2,2,4], Keeping the second element fixed. Notice that distance between the element where 1 was and where 3 was is till the same.</li>\n<li>[3,3,4], Keeping the last element fixed.</li>\n<li>[4,4,4], Keeping last element fixed.</li>\n</ol>\n<p>Here, we first tried to make 1 equal to it‚Äôs neighbor, which required us 1 step. Now, once it becomes equal to 1, the problem is how to make the last element in the original array, which is 3 equal to 1. It requires 2 steps, resulting in a total of of 3. The reason is that the moment you decide to increment the minimum element to match the next element, you fix the neighboring element and have to increment everything else. This will make the minimum and its neighbor the same, but it will also keep the distance between the minimum and all other elements the same because we just incremented everything. </p>\n<p>So, the total number of moves required is the distance between the elements of the array and the minimum.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minMoves</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; min)</span><br><span class=\"line\">            min = i;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">moves</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums)</span><br><span class=\"line\">        moves += i-min;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> moves;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Now the above solution required two passes of the array. Can we do even better? Notice that in the end, all we are doing is finding the min and subtracting min from all the elements in the array. That means we are subtracting min <em>n</em> times where n is the length of the array. Why <em>n</em> times? Because there are <em>n</em> elements in the array. Shouldn‚Äôt it be <em>(n-1)</em> times? No, because the distance of the min from min is 0. So we need to subtract min from itself too, so <em>n</em> times. We can achieve this by first calculating the total of the array while simultaneously keeping track of the minimum. Once done, all we need to do is subtract min <em>n</em> times from the sum, which is equivalent to subtracting min from each element. This results in a much overall better algorithm, requiring only 1 pass of the array.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">minMoves</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, min = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums)&#123;</span><br><span class=\"line\">        sum += i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &lt; min)</span><br><span class=\"line\">            min = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum - min*nums.length;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"License-Key-Formatting\"><a href=\"#License-Key-Formatting\" class=\"headerlink\" title=\"License Key Formatting\"></a><a href=\"https://leetcode.com/problems/license-key-formatting/\">License Key Formatting</a><a name=\"license-key-formatting\"></a></h3><p>The idea is simple. </p>\n<ol>\n<li>I maintain a temporary array <em>s</em> that contains only the characters in string <em>S</em> after converting them to uppercase.</li>\n<li>I maintain a variable <em>length</em> that counts how many characters I found in the string <em>S</em>. If length is 0, that means it contains only dashes (-). </li>\n<li>Then I record the <em>offset</em>. <em>Offset</em> basically measures how many characters of the String <em>S</em> will be grouped unevenly in the beginning part of the string. I can check that by using the modulus operator and finding out the remainder. That many characters (of <em>length &lt; K</em>) will be in the beginning part of the string.</li>\n<li>Next step is to calculate how many dashes I will need. It‚Äôs basically <em>length &#x2F; K</em>.</li>\n<li>Then I create the char array that will hold the characters of the formatted key. It‚Äôs length will be number of characters + the dashes we will need. We need to take care of a special case here. If the <em>offset</em> is 0, meaning I was able to divide characters in equal group, I need to subtract 1. Eg, let‚Äôs say we had 8 characters and <em>K</em> was 4.  dashes &#x3D; 8 &#x2F; 4 &#x3D; 2. We can divide 8 characters equally into 2 groups using only 1 dash. But since dashes was 2, it is clearly off by 1. This is the case when <em>offset</em> is 0.</li>\n<li><em>kIndex</em> tracks where character is to be inserted in the key array.</li>\n<li><em>used</em> tracks how many characters of the array <em>s</em>, which indirectly holds the characters of String <em>S</em>, are used.</li>\n<li>First I copy down the characters of length <em>offset</em>. Because those are the ones of uneven length. <em>kIndex</em> and <em>used</em> variables are updated.</li>\n<li>Last thing to do is to use all the remaining characters in array <em>s</em>, but we take <em>K</em> characters at a time, because we know that the segments are going to be of equal length. We also need to insert ‚Äò-‚Äò after each segment, but only if <em>kIndex</em> is not at the beginning or at the end of the key array, because inserting it at those points is invalid.</li>\n<li>Create a new string and return it.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">licenseKeyFormatting</span><span class=\"params\">(String S, <span class=\"type\">int</span> K)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>[] s = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[S.length()];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">length</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: S.toCharArray())</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (c != <span class=\"string\">&#x27;-&#x27;</span>)</span><br><span class=\"line\">        s[length++] = Character.toUpperCase(c);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (length == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">offset</span> <span class=\"operator\">=</span> length % K;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">dashes</span> <span class=\"operator\">=</span> length / K; </span><br><span class=\"line\">    <span class=\"type\">char</span>[] key = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[length + dashes + (offset == <span class=\"number\">0</span> ? -<span class=\"number\">1</span> : <span class=\"number\">0</span>)];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">kIndex</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">used</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (used &lt; offset)</span><br><span class=\"line\">      key[kIndex++] = s[used++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (used &lt; index)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (kIndex &gt; <span class=\"number\">0</span> &amp;&amp; kIndex &lt; key.length)</span><br><span class=\"line\">        key[kIndex++] = <span class=\"string\">&#x27;-&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; K; ++i)</span><br><span class=\"line\">        key[kIndex++] = s[used++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(key);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Max-Consecutive-Ones\"><a href=\"#Max-Consecutive-Ones\" class=\"headerlink\" title=\"Max Consecutive Ones\"></a><a href=\"https://leetcode.com/problems/max-consecutive-ones/\">Max Consecutive Ones</a><a name=\"max-consecutive-ones\"></a></h3><p>Solution 1: I came up with this solution initially. 4 ms runtime and passes 99.97% submissions.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMaxConsecutiveOnes</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t<span class=\"comment\">// Keep track of start of a streak, if any</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t<span class=\"comment\">// max length of the streak</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; nums.length)&#123;\t<span class=\"comment\">// While we are not at the end of the array</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[start] == <span class=\"number\">1</span>)&#123;\t\t<span class=\"comment\">// Check if we have a 1 at start, if so</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">streak</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// initialize streak and check how long can we continue</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (start &lt; nums.length &amp;&amp; nums[start] == <span class=\"number\">1</span>)&#123;\t<span class=\"comment\">// that streak.</span></span><br><span class=\"line\">                ++streak;\t\t\t<span class=\"comment\">// Increment streak and left for each consecutive 1</span></span><br><span class=\"line\">                ++start;\t\t\t<span class=\"comment\">// make sure you don&#x27;t forget that start &lt; nums.length</span></span><br><span class=\"line\">            &#125;\t\t\t\t\t\t<span class=\"comment\">// before checking nums[start] to prevent out-of-bounds</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (streak &gt; max)\t\t<span class=\"comment\">// Check if the current streak is better than the</span></span><br><span class=\"line\">                max = streak;\t\t<span class=\"comment\">// previous streak.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ++start;\t\t\t\t\t<span class=\"comment\">// Increment start in either case to check for new</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t\t<span class=\"comment\">// streaks.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>Solution 2: After analyzing the problem further, I noticed that 0 denotes the end of a streak. If we observe 1, we increment streak by 1. But if I see a 0, I reset my streak to 0. This solution too had a 4 ms runtime and passed 99.97% submissions.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMaxConsecutiveOnes</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t<span class=\"comment\">// Global max streak</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">streak</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t<span class=\"comment\">// Local max streak.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums)&#123;\t\t\t<span class=\"comment\">// For each number in nums</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>)&#123;\t\t\t<span class=\"comment\">// If we see a 1</span></span><br><span class=\"line\">            ++streak;\t\t\t<span class=\"comment\">// increment our ongoing streak.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (streak &gt; max)\t<span class=\"comment\">// If the local streak &gt; global max</span></span><br><span class=\"line\">                max = streak;\t<span class=\"comment\">// update global max streak.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>\t\t\t\t\t<span class=\"comment\">// otherwise we just saw a 0.</span></span><br><span class=\"line\">            streak = <span class=\"number\">0</span>;\t\t\t<span class=\"comment\">// So our streak resets to 0.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;\t\t\t\t\t<span class=\"comment\">// return the global max streak.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Permutations\"><a href=\"#Permutations\" class=\"headerlink\" title=\"Permutations\"></a><a href=\"https://leetcode.com/problems/permutations/\">Permutations</a><a name=\"permutations\"></a></h3><p>The idea is as follows. Given an array a &#x3D; {1,2,3}, we want to generate all it‚Äôs possible combinations. What we are trying to do here is that we first take the element at index 0, and find permutations of the remaining thing. When we do that, we insert the element at index 0 in front of the list to get 1 permutation. Similarly, we then take the element at index 1, and permute the remaining contents of the array and insert the element at index 1 in the beginning of the array to get another permutation and so on. In this problem, we are asked to return a list of list, so we first copy the numbers of the array into an ArrayList. Let‚Äôs run this code for the above example.</p>\n<blockquote>\n<p>Given nums &#x3D; {1,2,3}, our ArrayList will be the same, al &#x3D; [1,2,3]. Our result list is empty, result &#x3D; [] and index &#x3D; 0.</p>\n<p><strong>helper([1,2,3], 0)</strong></p>\n<blockquote>\n<p>swap (0, 0) ‚Üí al &#x3D; [1,2,3]</p>\n<p><strong>helper(1,2,3, 1)</strong></p>\n<blockquote>\n<p>swap(1, 1) ‚Üí al &#x3D; [1,2,3]</p>\n<p><strong>helper([1,2,3], 2)</strong></p>\n<blockquote>\n<p>swap(2, 2) ‚Üí [1,2,3]</p>\n<p><strong>helper([1,2,3], 3)</strong></p>\n<blockquote>\n<p>We update our result list now, because index &#x3D;&#x3D; length. Therefore, result &#x3D; [[1,2,3]]. Our recursive stack collapses and we move on to the next instruction, which is undo the step, al &#x3D; [1,2,3].</p>\n</blockquote>\n</blockquote>\n<p>swap(1, 2) ‚Üí al &#x3D; [1,3,2]</p>\n<p><strong>helper([1,3,2], 3)</strong></p>\n<blockquote>\n<p>Again, index &#x3D;&#x3D; length, add it to the list. result &#x3D; [[1,2,3], [1,3,2]]. Recursion stack collapses, we undo the swap, al &#x3D; [1,2,3]</p>\n</blockquote>\n</blockquote>\n<p>swap(0, 1) ‚Üí al &#x3D; [2,1,3]</p>\n<p><strong>helper([2,1,3], 1)</strong></p>\n<blockquote>\n<p>swap(1,1) ‚Üí al &#x3D; [2,1,3]</p>\n<p><strong>helper([2,1,3], 2)</strong></p>\n<blockquote>\n<p>swap(2, 2) ‚Üí al &#x3D; [2,1,3]</p>\n<p><strong>helper([2,1,3], 3)</strong></p>\n<blockquote>\n<p>index &#x3D;&#x3D; length, add the current order to the list. result &#x3D; [[1,2,3], [1,3,2], [2,1,3]]</p>\n</blockquote>\n</blockquote>\n<p>swap(1, 2) ‚Üí al &#x3D; [2,3,1]</p>\n<p><strong>helper([2,3,1], 3)</strong></p>\n<blockquote>\n<p>index &#x3D;&#x3D; length, add the order to the list. Result &#x3D; [[1,2,3], [1,3,2], [2,1,3], [2,3,1]]</p>\n</blockquote>\n</blockquote>\n<p>swap(0, 2) ‚Üí al &#x3D; [3,2,1]</p>\n<p><strong>helper([3,2,1], 2)</strong></p>\n<blockquote>\n<p>swap(2,2) ‚Üí al &#x3D; [3,2,1]</p>\n<p><strong>helper([3,2,1], 3)</strong></p>\n<blockquote>\n<p>index &#x3D;&#x3D; length, add the order to the list. Result &#x3D; [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1]] </p>\n</blockquote>\n</blockquote>\n<p>swap(1,2) ‚Üí al &#x3D; [3,1,2]</p>\n<p><strong>helper([3,1,2], 3)</strong></p>\n<blockquote>\n<p>index &#x3D;&#x3D; length, add the order to the list. Result &#x3D; [[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,2,1], [3,1,2]]</p>\n</blockquote>\n</blockquote>\n<p>All branches have been explored now, since the iteration ends and we return the result list.</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> len;\t\t\t\t\t\t<span class=\"comment\">// To store the length of the input array</span></span><br><span class=\"line\">List&lt;List&lt;Integer&gt;&gt; result;\t\t<span class=\"comment\">// Result list</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">permute</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    List&lt;Integer&gt; numList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();\t<span class=\"comment\">// Creating a copy of the nums array</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums)\t\t\t<span class=\"comment\">// because it&#x27;s easier to create a list from a list.</span></span><br><span class=\"line\">        numList.add(i);\t\t\t<span class=\"comment\">// Add everything to the list.</span></span><br><span class=\"line\">    len = nums.length;</span><br><span class=\"line\">    helper(numList, <span class=\"number\">0</span>);\t\t\t<span class=\"comment\">// Call the aux function.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">helper</span><span class=\"params\">(List&lt;Integer&gt; order, <span class=\"type\">int</span> index)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (index == len)\t\t\t<span class=\"comment\">// If we have checked all the numbers in the array, add a</span></span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;(order));\t<span class=\"comment\">// clone of the list to the array.</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> index; i &lt; len; ++i)&#123;\t<span class=\"comment\">// Otherwise from index to the end of the array,</span></span><br><span class=\"line\">        swap(order, i, index);\t<span class=\"comment\">// take one element, swap it with itself, then the next and</span></span><br><span class=\"line\">        helper(order, index+<span class=\"number\">1</span>);\t<span class=\"comment\">// so on. Recurse again, but on the next index we just swapped.</span></span><br><span class=\"line\">        swap(order, i, index);\t<span class=\"comment\">// Undo the swap so that it helps us in generating the next</span></span><br><span class=\"line\">    &#125;\t\t\t\t\t\t\t<span class=\"comment\">// permutation.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(List&lt;Integer&gt; list, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span>&#123;\t<span class=\"comment\">// Swap elements in a list.</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> list.get(i);</span><br><span class=\"line\">    list.set(i, list.get(j));</span><br><span class=\"line\">    list.set(j, temp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Construct-the-Rectangle\"><a href=\"#Construct-the-Rectangle\" class=\"headerlink\" title=\"Construct the Rectangle\"></a><a href=\"https://leetcode.com/problems/construct-the-rectangle/\">Construct the Rectangle</a><a name=\"construct-the-rectangle\"></a></h3><p>The idea is very simple. We just need to iterate from width &#x3D; sqrt(area) to 1 and check if area is perfectly divisible by width. If at any point, width is divisible, then that must be our minimum difference length and width, because we are diverging from the center on both sides. Width decreases while length keeps increasing. Think of it like this, for area &#x3D; 24, we have many factors of 24, namely 1, 2, 3,4, 6, 8, 12, 24. It‚Äôs sqrt when rounded down is 4. So we check for width &#x3D; 4, is 24 perfectly divisible by 4? Yes, so divide it and whatever you get is going to be the minimal difference values. Suppose 4 and 6 weren‚Äôt the factors for 24. In that case we decrease width by 1, which is 3. Check again, is 24 divisible by 3. Yes? Then that must be our answer. We are diverging away from the center on both sides equally, width to the left towards 1 and length to the right towards area . Therefore the moment we find one value that divides area perfectly, that‚Äôs our required values.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] constructRectangle(<span class=\"type\">int</span> area) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] dimensions = &#123;area, <span class=\"number\">1</span>&#125;;\t\t<span class=\"comment\">// We know that if nothing works out, n*1 is always</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">done</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;\t\t\t\t<span class=\"comment\">// going to be the answer</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">width</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>)Math.sqrt(area);\t<span class=\"comment\">// We only need to check width from sqrt(area)</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!done)&#123;\t\t\t\t\t\t<span class=\"comment\">// While not done</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (area % length == <span class=\"number\">0</span>)&#123;\t\t<span class=\"comment\">// check if area is perfectly divisible by width</span></span><br><span class=\"line\">            dimensions[<span class=\"number\">0</span>] = width;\t\t<span class=\"comment\">// if so, we found our width and the length.</span></span><br><span class=\"line\">            dimensions[<span class=\"number\">1</span>] = area/width;</span><br><span class=\"line\">            done = <span class=\"literal\">true</span>;\t\t\t\t<span class=\"comment\">// mark done as false</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        --width;\t\t\t\t\t\t<span class=\"comment\">// otherwise decrease the length</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dimensions;\t\t\t\t\t<span class=\"comment\">// return the dimensions found.</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Merge-Intervals\"><a href=\"#Merge-Intervals\" class=\"headerlink\" title=\"Merge Intervals\"></a><a href=\"https://leetcode.com/problems/merge-intervals/\">Merge Intervals</a><a name=\"merge-intervals\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Interval&gt; <span class=\"title function_\">merge</span><span class=\"params\">(List&lt;Interval&gt; intervals)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (intervals == <span class=\"literal\">null</span> || intervals.size() &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> intervals;</span><br><span class=\"line\">    Collections.sort(intervals, (a,b) -&gt; a.start-b.start);\t<span class=\"comment\">// Sort the list so we can </span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// compare adjacent intervals.</span></span><br><span class=\"line\">    List&lt;Interval&gt; merged = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    merged.add(intervals.get(<span class=\"number\">0</span>));\t\t\t\t\t<span class=\"comment\">// Add the initial interval.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (Interval i: intervals)&#123;\t\t\t\t\t<span class=\"comment\">// For each interval</span></span><br><span class=\"line\">        <span class=\"type\">Interval</span> <span class=\"variable\">last</span> <span class=\"operator\">=</span> merged.get(merged.size()-<span class=\"number\">1</span>);<span class=\"comment\">// Get the last added time.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i.start &gt; last.end)\t\t\t\t\t\t<span class=\"comment\">// If it&#x27;s time is greater than the last</span></span><br><span class=\"line\">            merged.add(i);\t\t\t\t\t\t\t<span class=\"comment\">// interval&#x27;s end, it doesn&#x27;t overlap</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// otherwise it does.</span></span><br><span class=\"line\">            last.end = last.end &gt; i.end ? last.end : i.end;\t<span class=\"comment\">// So check which has greater end time, and make the last added interval&#x27;s time equals that</span></span><br><span class=\"line\">            merged.set(merged.size()-<span class=\"number\">1</span>, last);\t\t<span class=\"comment\">// And set it as the last added interval</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> merged;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Return the merged list.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Merged-sorted-lists\"><a href=\"#Merged-sorted-lists\" class=\"headerlink\" title=\"Merged sorted lists\"></a><a href=\"https://leetcode.com/problems/merge-sorted-array/\">Merged sorted lists</a><a name=\"merged-sorted-lists\"></a></h3><ol>\n<li>counterA keeps track of which element we are looking at in array ‚Äòa‚Äô. Same with counterB</li>\n<li>counterK keeps track of where to insert the element in array ‚Äòa‚Äô, since a has enough space. The problem states that it might have more than enough space, so we use only the spaces we need, which is the total of both their sizes. Since indexing in an array is 0-based, we subtract 1.</li>\n<li>We insert elements from the end, since the end part of ‚Äòa‚Äô is empty. We can insert from the front, but then we would need to shift elements to the right after each insertion from ‚Äòb‚Äô.</li>\n<li>If array values are equal, add them to the end, and decrease both their counter to check new values in the next iteration</li>\n<li>If not equal, then check which one is greater, since the last part of the array should contain larger values. Whichever‚Äôs greater, put it in ‚Äòa‚Äô at index ‚ÄòcounterA‚Äô and decrement the respective counter.</li>\n<li>In the end, we might have some leftover elements either from ‚Äòa‚Äô or ‚Äòb‚Äô because we only process elements that are equal to the <strong>min(size(a), size(b))</strong>, until we run out of elements in one of the array. So, whichever array has elements pending, add it to the front of the array and return a.</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] merge(<span class=\"type\">int</span>[] a, <span class=\"type\">int</span> sizeA, <span class=\"type\">int</span>[] b, <span class=\"type\">int</span> sizeB)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">counterA</span> <span class=\"operator\">=</span> sizeA-<span class=\"number\">1</span>, counterB = sizeB-<span class=\"number\">1</span>, counterK = sizeA+sizeB-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (counterA &gt; -<span class=\"number\">1</span> &amp;&amp; counterB &gt; -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a[counterA] == b[counterB])&#123;</span><br><span class=\"line\">            a[counterK--] = a[counterA--];</span><br><span class=\"line\">            a[counterK--] = b[counterB--];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            a[counterK--] = a[counterA] &gt; b[counterB] ? a[counterA--] : b[counterB--];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (counterA &gt; -<span class=\"number\">1</span>)</span><br><span class=\"line\">        a[counterK--] = a[counterA--];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (counterB &gt; -<span class=\"number\">1</span>)</span><br><span class=\"line\">        a[counterK--] = b[counterB--];</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Next-Greater-Element-I\"><a href=\"#Next-Greater-Element-I\" class=\"headerlink\" title=\"Next Greater Element I\"></a><a href=\"https://leetcode.com/problems/next-greater-element-i/\">Next Greater Element I</a><a name=\"next-greater-element-i\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] nextGreaterElement(<span class=\"type\">int</span>[] nums1, <span class=\"type\">int</span>[] nums2) &#123;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; index = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();\t<span class=\"comment\">// We use the hashmap to keep a</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums2.length; ++i)\t\t\t\t<span class=\"comment\">// track of the index of each value</span></span><br><span class=\"line\">        index.put(nums2[i], i);\t\t\t\t\t\t\t<span class=\"comment\">// in nums 2. That way, when we want</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"comment\">// to look for a value greater than a val in nums1, we know</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[nums1.length];\t<span class=\"comment\">// which index to start iterating from.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums1.length; ++i)&#123;\t<span class=\"comment\">// So for each val in nums1</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> nums1[i];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> index.get(val); j &lt; nums2.length; ++j)&#123;\t<span class=\"comment\">// Iterate from that value&#x27;s</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (nums2[j] &gt; val)&#123;\t\t\t<span class=\"comment\">// index in nums2 to the end, and see if you can</span></span><br><span class=\"line\">                result[i] = nums2[j];\t\t<span class=\"comment\">// find any val &gt; nums1[i]. If you do, save it</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;\t\t\t\t\t\t<span class=\"comment\">// in the result array and break the loop.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (result[i] == <span class=\"number\">0</span>)\t\t<span class=\"comment\">// Now if we didn&#x27;t find any value, then result[i] would be</span></span><br><span class=\"line\">            result[i] = -<span class=\"number\">1</span>;\t\t<span class=\"comment\">// 0, so we set that index to -1 in our result array.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;\t\t\t\t<span class=\"comment\">// simply return the result array.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"String-Without-AAA-or-BBB\"><a href=\"#String-Without-AAA-or-BBB\" class=\"headerlink\" title=\"String Without AAA or BBB\"></a><a href=\"https://leetcode.com/problems/string-without-aaa-or-bbb/\">String Without AAA or BBB</a><a name=\"string-without-aaa-or-bbb\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">strWithout3a3b</span><span class=\"params\">(<span class=\"type\">int</span> A, <span class=\"type\">int</span> B)</span> &#123;\t\t\t\t</span><br><span class=\"line\">    <span class=\"type\">char</span>[] ch = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[A+B];\t\t<span class=\"comment\">// We create an char array to store string chars</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> A &gt; B ? <span class=\"string\">&#x27;a&#x27;</span> : <span class=\"string\">&#x27;b&#x27;</span>;\t<span class=\"comment\">// record the most frequent occurring element</span></span><br><span class=\"line\">    <span class=\"type\">char</span> <span class=\"variable\">min</span> <span class=\"operator\">=</span> max == <span class=\"string\">&#x27;a&#x27;</span> ? <span class=\"string\">&#x27;b&#x27;</span> : <span class=\"string\">&#x27;a&#x27;</span>;\t<span class=\"comment\">// and the least frequent occurring element</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (A &gt; <span class=\"number\">0</span> || B &gt; <span class=\"number\">0</span>)&#123;\t\t\t<span class=\"comment\">// While we haven&#x27;t added all of the elements</span></span><br><span class=\"line\">    <span class=\"comment\">// We check that if our current index &gt; 1 and our previoud two characters in the array</span></span><br><span class=\"line\">    <span class=\"comment\">// are the same, then we must have written the max occurring char, so it&#x27;s time to write</span></span><br><span class=\"line\">    <span class=\"comment\">// the minimum occurring element. We write it, and then decrement the specific A or B.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; <span class=\"number\">1</span> &amp;&amp; max == ch[index-<span class=\"number\">1</span>] &amp;&amp; max == ch[index-<span class=\"number\">2</span>])&#123;</span><br><span class=\"line\">            ch[index++] = min;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (min == <span class=\"string\">&#x27;a&#x27;</span>)\t\t<span class=\"comment\">// If the minimum freq element is &#x27;a&#x27;, decrement A</span></span><br><span class=\"line\">                A--;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                B--;\t\t\t<span class=\"comment\">// otherwise decrement B</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (B &gt; A)&#123;\t\t<span class=\"comment\">// Otherwise, if B occurs more than A, then set char to B</span></span><br><span class=\"line\">            ch[index++] = <span class=\"string\">&#x27;b&#x27;</span>;\t<span class=\"comment\">// decrement B and increment index</span></span><br><span class=\"line\">            B--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;\t\t\t\t\t<span class=\"comment\">// A occurs more, so add A to the char array.</span></span><br><span class=\"line\">            ch[index++] = <span class=\"string\">&#x27;a&#x27;</span>;\t<span class=\"comment\">// Increment index, decrement A count</span></span><br><span class=\"line\">            A--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(ch);\t\t<span class=\"comment\">// Create a string from the char array and return it.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Keyboard-Row\"><a href=\"#Keyboard-Row\" class=\"headerlink\" title=\"Keyboard Row\"></a><a href=\"https://leetcode.com/problems/keyboard-row/\">Keyboard Row</a><a name=\"keyboard-row\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Maps each character to the row in the keyboard in which it occurs.</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span>[] map = &#123;<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> String[] findWords(String[] words) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    String[] w = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[words.length];\t<span class=\"comment\">// Store filtered words</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">index</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t<span class=\"comment\">// Where to insert the filtered words</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String s: words)\t\t\t\t\t<span class=\"comment\">// for each word in words</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (checkWord(s.toLowerCase()))\t\t<span class=\"comment\">// convert it to lowercase and check if all char</span></span><br><span class=\"line\">            w[index++] = s;\t\t\t\t\t<span class=\"comment\">// occurs in the same row, if it does, add it</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> Arrays.copyOfRange(w, <span class=\"number\">0</span>, index);\t<span class=\"comment\">// Simply return a copy of the array from 0</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// index</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">checkWord</span><span class=\"params\">(String word)</span>&#123;\t\t<span class=\"comment\">// Check if all chars in the word belong in the</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> map[word.charAt(<span class=\"number\">0</span>)-<span class=\"string\">&#x27;a&#x27;</span>];\t\t<span class=\"comment\">// same row. Check first chars row</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: word.toCharArray())&#123;\t\t<span class=\"comment\">// For all the chars in the word</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map[c-<span class=\"string\">&#x27;a&#x27;</span>] != row)\t\t\t\t<span class=\"comment\">// if that char belongs to a different row,</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t<span class=\"comment\">// return false</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t\t\t\t\t<span class=\"comment\">// All chars in same row, return true.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Find-Mode-in-Binary-Search-Tree\"><a href=\"#Find-Mode-in-Binary-Search-Tree\" class=\"headerlink\" title=\"Find Mode in Binary Search Tree\"></a><a href=\"https://leetcode.com/problems/find-mode-in-binary-search-tree/\">Find Mode in Binary Search Tree</a><a name=\"find-mode-in-binary-search-tree\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> TreeNode parent;\t\t<span class=\"comment\">// Keep track of parent at each node</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> maxMode;\t\t\t<span class=\"comment\">// maxMode we found</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> currentMode;\t\t<span class=\"comment\">// mode recorded at each node</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> Set&lt;Integer&gt; modes;\t\t<span class=\"comment\">// keep distinct modes found</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] findMode(TreeNode root)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)\t\t\t<span class=\"comment\">// node is null, so return empty array</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">0</span>];</span><br><span class=\"line\">    maxMode = <span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">// we have just seen the root, so maxMode so far is 1.</span></span><br><span class=\"line\">    currentMode = <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">// so is the current mode</span></span><br><span class=\"line\">    modes = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">    modes.add(root.val);\t\t<span class=\"comment\">// add the root to our modes set</span></span><br><span class=\"line\">    traverse(root);\t\t\t\t<span class=\"comment\">// start traversing it&#x27;s left and right branches</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[modes.size()];\t<span class=\"comment\">// We have found all the modes</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t<span class=\"comment\">// keep track of where to insert elements in result array</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: modes)\t\t\t<span class=\"comment\">// add all the distinct modes one by one</span></span><br><span class=\"line\">        result[idx++] = i;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;\t\t\t\t<span class=\"comment\">// and return it.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">traverse</span><span class=\"params\">(TreeNode node)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)\t\t\t<span class=\"comment\">// if node is null, stop</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;\t\t\t\t\t<span class=\"comment\">// otherwise traverse the left branch</span></span><br><span class=\"line\">    traverse(node.left);\t\t<span class=\"comment\">// Once we hit the null, we start backtracking to the leaf</span></span><br><span class=\"line\">    updateMode(node);\t\t\t<span class=\"comment\">// then we call updateMode with the node</span></span><br><span class=\"line\">    parent = node;\t\t\t\t<span class=\"comment\">// once it&#x27;s done, we update parent as the current node, so </span></span><br><span class=\"line\">    traverse(node.right);\t\t<span class=\"comment\">// when we backtrack, we can easily check that node and it&#x27;s</span></span><br><span class=\"line\">&#125;\t\t\t\t\t\t\t\t<span class=\"comment\">// next node&#x27;s value for similarity. Then traverse right.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateMode</span><span class=\"params\">(TreeNode node)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span> &amp;&amp; parent.val == node.val)&#123;\t<span class=\"comment\">// If parent node isn&#x27;t null and the</span></span><br><span class=\"line\">        ++currentMode;\t\t\t<span class=\"comment\">// node&#x27;s value is the same as parent, we update currentMode</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentMode &gt;= maxMode)&#123;\t<span class=\"comment\">// If the currentMode is greater or equal to maxMode</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (currentMode &gt; maxMode)\t<span class=\"comment\">// just check if it&#x27;s greater. If it is, remove all </span></span><br><span class=\"line\">                modes.clear();\t\t\t<span class=\"comment\">// previously recorded modes</span></span><br><span class=\"line\">            modes.add(node.val);\t\t<span class=\"comment\">// Add the current node to the set and update the </span></span><br><span class=\"line\">            maxMode = currentMode;\t\t<span class=\"comment\">// maxMode</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;\t\t\t\t\t\t<span class=\"comment\">// otherwise, value&#x27;s aren&#x27;t the same. so our currentMode</span></span><br><span class=\"line\">        currentMode = <span class=\"number\">1</span>;\t\t<span class=\"comment\">// becomes 1. If maxMode is also 1, then all we have been </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (maxMode == <span class=\"number\">1</span>)\t\t<span class=\"comment\">// seeing are distinct values, so add that node&#x27;s value to</span></span><br><span class=\"line\">            modes.add(node.val);<span class=\"comment\">// to the mode&#x27;s set.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Base-7\"><a href=\"#Base-7\" class=\"headerlink\" title=\"Base 7\"></a><a href=\"https://leetcode.com/problems/base-7/\">Base 7</a><a name=\"base-7\"></a></h3><p>Solution 1 without StringBuilder (Beats 100%, 7ms)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">convertToBase7</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;0&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> (<span class=\"type\">int</span>)(Math.log(Math.abs(num))/Math.log(<span class=\"number\">7</span>))+<span class=\"number\">1</span>;\t<span class=\"comment\">// Calculate # of bits</span></span><br><span class=\"line\">    <span class=\"type\">int</span> idx;\t\t<span class=\"comment\">// where to start inserting from</span></span><br><span class=\"line\">    <span class=\"type\">char</span>[] digits;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span>) &#123;\t<span class=\"comment\">// If num is negative</span></span><br><span class=\"line\">        num = -num;\t<span class=\"comment\">// Make it positive</span></span><br><span class=\"line\">        digits = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[len+<span class=\"number\">1</span>];\t<span class=\"comment\">// We need one more space for -ve sign in the front</span></span><br><span class=\"line\">        digits[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;-&#x27;</span>;\t\t\t<span class=\"comment\">// Put the -ve sign</span></span><br><span class=\"line\">        idx = len;\t\t\t\t\t<span class=\"comment\">// and index is now len</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        digits = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[len];\t\t<span class=\"comment\">// otherwise we only need &quot;len&quot; spaces</span></span><br><span class=\"line\">        idx = len-<span class=\"number\">1</span>;\t\t\t\t<span class=\"comment\">// index is len-1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num != <span class=\"number\">0</span>) &#123;\t\t\t\t<span class=\"comment\">// While num != 0, calculate remainder and add it.</span></span><br><span class=\"line\">        digits[idx--] = (<span class=\"type\">char</span>)(num % <span class=\"number\">7</span> + <span class=\"string\">&#x27;0&#x27;</span>);\t<span class=\"comment\">// Divide number by 7</span></span><br><span class=\"line\">        num /= <span class=\"number\">7</span>;</span><br><span class=\"line\">    &#125;     </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(digits);\t\t<span class=\"comment\">// Just create a string and return it.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Solution 2 with StringBuilder</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">convertToBase7</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">StringBuilder</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">isNegative</span> <span class=\"operator\">=</span> num &lt; <span class=\"number\">0</span>;\t<span class=\"comment\">// Just so we can know if we need to add the &quot;-&quot; sign</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num &lt; <span class=\"number\">0</span>)\t\t\t\t\t<span class=\"comment\">// Take the absolute value of num</span></span><br><span class=\"line\">        num = -num;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (num &gt; <span class=\"number\">6</span>) &#123;\t\t\t\t<span class=\"comment\">// Keep adding the remainder, and dividing num by 7.</span></span><br><span class=\"line\">        sb.append(num % <span class=\"number\">7</span>);</span><br><span class=\"line\">        num /= <span class=\"number\">7</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sb.append(num);\t\t\t\t\t<span class=\"comment\">// Add whatever is left at the end.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isNegative)\t\t\t\t\t<span class=\"comment\">// If num was negative, add the minus sign.</span></span><br><span class=\"line\">        sb.append(<span class=\"string\">&#x27;-&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> sb.reverse().toString();\t<span class=\"comment\">// Reverse the builder and return the toString()</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Relative-Ranks\"><a href=\"#Relative-Ranks\" class=\"headerlink\" title=\"Relative Ranks\"></a><a href=\"https://leetcode.com/problems/relative-ranks/\">Relative Ranks</a><a name=\"relative-ranks\"></a></h3><p>The idea employed here is simple. We need to store the relative ranks in sorted order. We can sort the array for that, but that is O(n log n). We can do better than that by finding the relative rank in linear time. First we find the maximum score in the array and create another array of length &#x3D; maxScore + 1. We add 1 so that when we see the maxScore in the nums, we can assign it to maxScore index. Once we have done that, now we iterate over the nums array. Variable i keeps track of what rank to assign. We check a value in the array and at that index in our reverse sorted array, we put i+1, which basically marks it‚Äôs rank based on it‚Äôs position in the rankings. Some of then indexes would be default, that is a score of 0. We then check each value in the descend array and if it‚Äôs not 0, we assign it a rank, but not if the ranks are 1, 2 or 3. In that case, we assign it a special value of Gold, SIlver or Bronze.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String[] findRelativeRanks(<span class=\"type\">int</span>[] nums) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">maxScore</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n: nums)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n &gt; maxScore)</span><br><span class=\"line\">            maxScore = n;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] descend = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[maxScore+<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; nums.length; ++i)</span><br><span class=\"line\">        descend[nums[i]] = i+<span class=\"number\">1</span>;</span><br><span class=\"line\">    String[] result = <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>[nums.length];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">rank</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> descend.length-<span class=\"number\">1</span>; i &gt; -<span class=\"number\">1</span>; --i)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> descend[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (descend[i] != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rank == <span class=\"number\">1</span>)</span><br><span class=\"line\">                result[idx-<span class=\"number\">1</span>] = <span class=\"string\">&quot;Gold Medal&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rank == <span class=\"number\">2</span>)</span><br><span class=\"line\">                result[idx-<span class=\"number\">1</span>] = <span class=\"string\">&quot;Silver Medal&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rank == <span class=\"number\">3</span>)</span><br><span class=\"line\">                result[idx-<span class=\"number\">1</span>] = <span class=\"string\">&quot;Bronze Medal&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                result[idx-<span class=\"number\">1</span>] = rank + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">            ++rank;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Perfect-Number\"><a href=\"#Perfect-Number\" class=\"headerlink\" title=\"Perfect Number\"></a><a href=\"https://leetcode.com/problems/perfect-number/\">Perfect Number</a><a name=\"perfect-number\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">checkPerfectNumber</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"number\">1</span>)\t\t<span class=\"comment\">// 1 is a special case, where it&#x27;s only factor is itself.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;\t\t<span class=\"comment\">// We know our total will atleast be 1, 1 is everyone&#x27;s factor</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; i &lt;= Math.sqrt(num); ++i)\t<span class=\"comment\">// Only loop through num&#x27;s sqrt</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num % i == <span class=\"number\">0</span>)&#123;\t\t\t\t<span class=\"comment\">// If i divides num perfectly</span></span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">otherFactor</span> <span class=\"operator\">=</span> num/i;\t<span class=\"comment\">// Calculate the other factor</span></span><br><span class=\"line\">            total += i + (otherFactor == i ? <span class=\"number\">0</span> : otherFactor);\t<span class=\"comment\">// If i and other factor are</span></span><br><span class=\"line\">        &#125;\t\t\t\t\t\t\t\t<span class=\"comment\">// different, add them both, otherwise just i.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> total == num;\t\t\t\t<span class=\"comment\">// Check in the end if your total is the same as num</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Detect-Capital\"><a href=\"#Detect-Capital\" class=\"headerlink\" title=\"Detect Capital\"></a><a href=\"https://leetcode.com/problems/detect-capital/\">Detect Capital</a><a name=\"detect-capital\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">detectCapitalUse</span><span class=\"params\">(String word)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> word.length();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">2</span>)\t\t\t<span class=\"comment\">// Empty or size 1 words are ok.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">char</span>[] chars = word.toCharArray();\t<span class=\"comment\">// Get the char array</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">isUpper</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;\t<span class=\"comment\">// by default we let isUpper to false</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (chars[<span class=\"number\">0</span>] &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; chars[<span class=\"number\">0</span>] &lt;= <span class=\"string\">&#x27;Z&#x27;</span>)\t\t<span class=\"comment\">// Check if first two letters are uppercase</span></span><br><span class=\"line\">        isUpper = chars[<span class=\"number\">1</span>] &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; chars[<span class=\"number\">1</span>] &lt;= <span class=\"string\">&#x27;Z&#x27;</span>; <span class=\"comment\">// If first was upper and second wasnt</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; len; ++i)&#123;\t<span class=\"comment\">// isUpper = false, otherwise true.</span></span><br><span class=\"line\">        <span class=\"type\">boolean</span> <span class=\"variable\">isAlsoUpper</span> <span class=\"operator\">=</span> chars[i] &gt;= <span class=\"string\">&#x27;A&#x27;</span> &amp;&amp; chars[i] &lt;= <span class=\"string\">&#x27;Z&#x27;</span>; <span class=\"comment\">// We check onwards 1 char</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isUpper &amp;&amp; !isAlsoUpper)\t<span class=\"comment\">// If that char is lower and previous part was</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t<span class=\"comment\">// not lower, invalid use.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!isUpper &amp;&amp; isAlsoUpper)\t<span class=\"comment\">// Or if previous part was lower and current letter</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t<span class=\"comment\">// is upper, we return false.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t\t<span class=\"comment\">// Everything proceeded smoothly. So return true.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Longest-Uncommon-Subsequence-I\"><a href=\"#Longest-Uncommon-Subsequence-I\" class=\"headerlink\" title=\"Longest Uncommon Subsequence I\"></a><a href=\"https://leetcode.com/problems/longest-uncommon-subsequence-i/\">Longest Uncommon Subsequence I</a><a name=\"longest-uncommon-subsequence-i\"></a></h3><p>This is those kind of problems that shouldn‚Äôt be up there. The problem is stated rather poorly and the solution is even stupider. All you are checking for is if the two string‚Äôs aren‚Äôt the same, then whichever one has a larger length is essentially the longest uncommon subsequence because the other string cannot form the full string. I know, it‚Äôs stupid.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findLUSlength</span><span class=\"params\">(String a, String b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.equals(b))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a.length() &gt; b.length() ? a.length() : b.length();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Course-Schedule-II\"><a href=\"#Course-Schedule-II\" class=\"headerlink\" title=\"Course Schedule II\"></a><a href=\"https://leetcode.com/problems/course-schedule-ii/\">Course Schedule II</a><a name=\"course-schedule-ii\"></a></h3><p>This is a graph problem where we require to sort the vertices topologically. There are two choices we have for sorting topologically - Depth First Search approach based on finshing times or the Kahn‚Äôs Algorithm. I have used Kahn‚Äôs algorithm in this solution. Runtime is 2ms [beats 100%] and uses 45.3 MB space [beats than 90.16%]. The idea for Kahn‚Äôs is simple - Enqueue all the nodes which has 0 incoming edges because those are the ones that can be started first. Then while the queue isn‚Äôt empty, remove one node at a time, process it‚Äôs outgoing nodes and decrease their indegrees by one. The reasoning behind that is let‚Äôs say Node 2 has two prerequisites, Node 0 and Node 1. Node 0 and Node 1 have 0 indegrees. So our first two nodes would be Node 1 and Node 0 and if they are finished, then their outgoing Nodes can be started, that is Node 2. Now when you decrease any node‚Äôs indegree and they become zero, add them to the queue because they can now be started. Keep doing this until the queue is empty.</p>\n<p>In my approach, I‚Äôm avoiding any unnecessary data structure and using only the most basic ones like array‚Äôs. So instead of using the queue, what I do is fill the array <code>order</code> which also stores the topological order. <code>idx</code> keeps track of the last index available to fill in the array. <code>start</code> mimics the <code>poll</code> behaviour of a queue. <code>while (start != idx)</code> makes sure that while we still have nodes to process, remove the one that can be started and decrease all the indegrees of outgoing edges.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[] findOrder(<span class=\"type\">int</span> numCourses, <span class=\"type\">int</span>[][] prerequisites) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] indegrees = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numCourses];\t\t\t\t<span class=\"comment\">// We maintain each node&#x27;s indegree</span></span><br><span class=\"line\">    List&lt;Integer&gt;[] graph = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>[numCourses];\t<span class=\"comment\">// Each node&#x27;s outgoing edges</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] edge: prerequisites) &#123;\t\t\t\t\t<span class=\"comment\">// Process each edge</span></span><br><span class=\"line\">        indegrees[edge[<span class=\"number\">0</span>]]++;\t\t\t\t\t\t\t<span class=\"comment\">// Update indegrees</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (graph[edge[<span class=\"number\">1</span>]] == <span class=\"literal\">null</span>)\t\t\t\t\t\t<span class=\"comment\">// Also store the edge in graph</span></span><br><span class=\"line\">            graph[edge[<span class=\"number\">1</span>]] = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;Integer&gt;();</span><br><span class=\"line\">        graph[edge[<span class=\"number\">1</span>]].add(edge[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] order = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[numCourses];\t\t    <span class=\"comment\">// We don&#x27;t technically need a queue.</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; numCourses; ++i)        <span class=\"comment\">// Find all nodes who indegree is 0</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (indegrees[i] == <span class=\"number\">0</span>)                  <span class=\"comment\">// and put them in the order array</span></span><br><span class=\"line\">            order[idx++] = i;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;                              <span class=\"comment\">// start tracks node to be polled.</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start != idx) &#123;                      <span class=\"comment\">// while we can poll the queue</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> order[start++];                 <span class=\"comment\">// poll the node u</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (graph[u] != <span class=\"literal\">null</span>)                   <span class=\"comment\">// If node u has outgoing edges </span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> out: graph[u])             <span class=\"comment\">// Then for each of those nodes</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (--indegrees[out] == <span class=\"number\">0</span>)      <span class=\"comment\">// decrease their indegrees and check if it&#x27;s 0</span></span><br><span class=\"line\">                    order[idx++] = out;         <span class=\"comment\">// if it&#x27;s 0, add it to our queue (order)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx != numCourses)\t\t\t\t\t\t<span class=\"comment\">// Cycle check. If our idx != numCourses then</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[] &#123;&#125;;\t\t\t\t\t<span class=\"comment\">// not all nodes could be processed. So we have</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> order;\t\t\t\t\t\t\t\t<span class=\"comment\">// a cycle. Otherwise return our order array.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Letter-Combinations-of-a-Phone-Number\"><a href=\"#Letter-Combinations-of-a-Phone-Number\" class=\"headerlink\" title=\"Letter Combinations of a Phone Number\"></a><a href=\"https://leetcode.com/problems/letter-combinations-of-a-phone-number/\">Letter Combinations of a Phone Number</a><a name=\"letter-combinations-of-a-phone-number\"></a></h3><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Letter Combinations of a Phone Number.</p>\n<p>Memory Usage: 35.9 MB, less than 98.63% of Java online submissions for Letter Combinations of a Phone Number.</p>\n<hr>\n<p>How do we count numbers? 16, 17, 18, 19 and then what? 20 right? We see that the last number is 19, we can‚Äôt go past 9 so we set it to 0 and then increment the precedding digit to get 20. The idea is the same for this problem too. We keep a <code>levels</code> array to keep track of which character do we take from which number‚Äôs allowed alphabet letters. For example, let‚Äôs say the input string is <code>23</code>. Our <code>levels</code> array would <code>[0, 0]</code> in the beginning. This says pick characters at index 0 and 0 from alphabet characters corresponding to 2 and 3 which gives us <code>ad</code>. Then, we increase the last most counter in our levels array by 1 giving us <code>[0, 1]</code>. This allows us to get <code>ae</code> in the next iteration and levels array would be <code>[0, 2]</code>. We get <code>af</code> and levels array becomes <code>[0, 3]</code>. Now this is where it becomes interesting. We are only allowed three letters for the digit corresponding to 3 and since we already used all of them , we now need to shift to the next character for digit 2, which is <code>b</code>. Level array looks like <code>[1, 0]</code>. This will allow us to get <code>[b,e]</code>. So you get the rough idea now. Only thing now is we watch out when to stop. We stop when we have utilized all available characters from the 0th index‚Äôs number‚Äôs allowed alphabet letters. In this case, we stop when levels array look like <code>[3, 0]</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"type\">char</span>[][] map = &#123;</span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>&#125;,        <span class=\"comment\">// 2</span></span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;d&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;f&#x27;</span>&#125;,        <span class=\"comment\">// 3</span></span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;g&#x27;</span>, <span class=\"string\">&#x27;h&#x27;</span>, <span class=\"string\">&#x27;i&#x27;</span>&#125;,        <span class=\"comment\">// 4</span></span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;j&#x27;</span>, <span class=\"string\">&#x27;k&#x27;</span>, <span class=\"string\">&#x27;l&#x27;</span>&#125;,        <span class=\"comment\">// 5</span></span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;m&#x27;</span>, <span class=\"string\">&#x27;n&#x27;</span>, <span class=\"string\">&#x27;o&#x27;</span>&#125;,        <span class=\"comment\">// 6</span></span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;p&#x27;</span>, <span class=\"string\">&#x27;q&#x27;</span>, <span class=\"string\">&#x27;r&#x27;</span>, <span class=\"string\">&#x27;s&#x27;</span>&#125;,   <span class=\"comment\">// 7</span></span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;t&#x27;</span>, <span class=\"string\">&#x27;u&#x27;</span>, <span class=\"string\">&#x27;v&#x27;</span>&#125;,        <span class=\"comment\">// 8</span></span><br><span class=\"line\">            &#123;<span class=\"string\">&#x27;w&#x27;</span>, <span class=\"string\">&#x27;x&#x27;</span>, <span class=\"string\">&#x27;y&#x27;</span>, <span class=\"string\">&#x27;z&#x27;</span>&#125;    <span class=\"comment\">// 9</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();                <span class=\"comment\">// Maintain the list of combinations</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[] numbers;                                          <span class=\"comment\">// numbers parsed from input</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[] levels;                                           <span class=\"comment\">// utility array to keep track of next character in string</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> n;                                                  <span class=\"comment\">// number of input digits.</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;String&gt; <span class=\"title function_\">solution</span><span class=\"params\">(String digits)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (digits == <span class=\"literal\">null</span> || digits.length() == <span class=\"number\">0</span>)                 <span class=\"comment\">// stop if null or empty string</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        n = digits.length();</span><br><span class=\"line\">        numbers = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\">        levels = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; digits.length(); ++i) &#123;                 <span class=\"comment\">// parse all the digits from the string as int</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((numbers[i] = digits.charAt(i) - <span class=\"string\">&#x27;0&#x27;</span>) &lt; <span class=\"number\">2</span>)          <span class=\"comment\">// stop if any of them is 0 or 1</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        helper();                                                   <span class=\"comment\">// start recursion</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">helper</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (levels[<span class=\"number\">0</span>] == map[numbers[<span class=\"number\">0</span>]-<span class=\"number\">2</span>].length)                  <span class=\"comment\">// if we are done iterating over all possible combinations,</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;                                                 <span class=\"comment\">// stop recursion.</span></span><br><span class=\"line\">        <span class=\"type\">char</span>[] s = <span class=\"keyword\">new</span> <span class=\"title class_\">char</span>[n];                                     <span class=\"comment\">// stores all the characters of the string</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; n; ++i)                                 <span class=\"comment\">// loop through levels array. The value at each index</span></span><br><span class=\"line\">            s[i] = map[numbers[i]-<span class=\"number\">2</span>][levels[i]];                    <span class=\"comment\">// tells us which character to keep from which map index</span></span><br><span class=\"line\">        levels[n-<span class=\"number\">1</span>]++;                                              <span class=\"comment\">// Increase the entry at the end of the levels array</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> levels.length-<span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; --i) &#123;                 <span class=\"comment\">// Now loop through the levels array from the end</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (levels[i] == map[numbers[i]-<span class=\"number\">2</span>].length) &#123;            <span class=\"comment\">// If the value = total number of characters allowed for that number</span></span><br><span class=\"line\">                levels[i] = <span class=\"number\">0</span>;                                      <span class=\"comment\">// then we set it to 0 and increment the previous level entry</span></span><br><span class=\"line\">                levels[i - <span class=\"number\">1</span>]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.add(<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(s));                                  <span class=\"comment\">// Add the string and induce next recursive call.</span></span><br><span class=\"line\">        helper();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Sudoku-Solver\"><a href=\"#Sudoku-Solver\" class=\"headerlink\" title=\"Sudoku Solver\"></a><a href=\"https://leetcode.com/problems/sudoku-solver/\">Sudoku Solver</a><a name=\"sudoku-solver\"></a></h3><p>Runtime: 4 ms, faster than 90.01% of Java online submissions for Sudoku Solver.</p>\n<p>Memory Usage: 35.1 MB, less than 71.93% of Java online submissions for Sudoku Solver.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">char</span>[][] board;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">solveSudoku</span><span class=\"params\">(<span class=\"type\">char</span>[][] board)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.board = board;</span><br><span class=\"line\">    solve(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (col == <span class=\"number\">9</span>) &#123;                                 <span class=\"comment\">// If col is 9, make it 0 and shift to the next row</span></span><br><span class=\"line\">        col = <span class=\"number\">0</span>;</span><br><span class=\"line\">        row += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (row == <span class=\"number\">9</span>)                               <span class=\"comment\">// If row is also 9 now, then it means we have successfully filled all cells</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                            <span class=\"comment\">// So return true and end backtracking.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;                  <span class=\"comment\">// Otherwise, we start picking values from 1-9</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[row][col] == <span class=\"string\">&#x27;.&#x27;</span>) &#123;               <span class=\"comment\">// And try to plug it into empty cells</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (isValid(row, col, i)) &#123;             <span class=\"comment\">// If that value is valid in that cell</span></span><br><span class=\"line\">                board[row][col] = (<span class=\"type\">char</span>)(i+<span class=\"string\">&#x27;0&#x27;</span>);    <span class=\"comment\">// fill it</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (solve(row, col+<span class=\"number\">1</span>))          <span class=\"comment\">// and move on to fill the next cell via recursive call</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;                    <span class=\"comment\">// If the recursion ended by returning true, then return true to signal success</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span>                                <span class=\"comment\">// Otherwise, we were not able to put an value in that cell</span></span><br><span class=\"line\">                    board[row][col] = <span class=\"string\">&#x27;.&#x27;</span>;          <span class=\"comment\">// so change it back to 0 and the backtracking would try the next higher value in that cell.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> solve(row, col+<span class=\"number\">1</span>);           <span class=\"comment\">// That cell wasn&#x27;t empty, so move on to the next empty cell.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;                                   <span class=\"comment\">// No solution found.</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isValid</span><span class=\"params\">(<span class=\"type\">int</span> row, <span class=\"type\">int</span> col, <span class=\"type\">int</span> val)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// row check</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; c &lt; <span class=\"number\">9</span>; ++c)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[row][c] - <span class=\"string\">&#x27;0&#x27;</span> == val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// column check</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; r &lt; <span class=\"number\">9</span>; ++r)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (board[r][col] - <span class=\"string\">&#x27;0&#x27;</span> == val)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// box check</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">top</span> <span class=\"operator\">=</span> row / <span class=\"number\">3</span> * <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> col / <span class=\"number\">3</span> * <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">3</span>; ++j) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board[top+i][left+j] - <span class=\"string\">&#x27;0&#x27;</span> == val)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Bulls-and-Cows\"><a href=\"#Bulls-and-Cows\" class=\"headerlink\" title=\"Bulls and Cows\"></a><a href=\"https://leetcode.com/problems/bulls-and-cows/\">Bulls and Cows</a><a name=\"bulls-and-cows\"></a></h3><p>Runtime: 1 ms, faster than 100.00% of Java online submissions for Bulls and Cows.</p>\n<p>Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for Bulls and Cows.</p>\n<p>The idea is simple, first record the frequency of the digits of the secret number. Then we first find number of <code>bulls</code> by checking for exact indices match. After that we start to record the number of <code>cows</code>. The way we do is by again iterating over the <code>guess</code> string; only if there was a character mismatch and we still have the character available from <code>freq</code> table, we have a <code>cow</code>. Update it and decrement the frequency of the number we just used up.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getHint</span><span class=\"params\">(String secret, String guess)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">bulls</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">cows</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span>[] freq = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>];\t\t\t\t\t\t\t<span class=\"comment\">// Freq of available digits from secret</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; guess.length(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">char</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> secret.charAt(i);</span><br><span class=\"line\">        freq[s - <span class=\"string\">&#x27;0&#x27;</span>]++;\t\t\t\t\t\t\t\t<span class=\"comment\">// Record the freq of the digit</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s == guess.charAt(i)) &#123;\t\t\t\t\t\t<span class=\"comment\">// If it&#x27;s a match, we have a bulls.</span></span><br><span class=\"line\">            bulls++;</span><br><span class=\"line\">            freq[s - <span class=\"string\">&#x27;0&#x27;</span>]--;\t\t\t\t\t\t\t<span class=\"comment\">// We just used the character, so decrement it.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; guess.length(); ++i) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> secret.charAt(i) - <span class=\"string\">&#x27;0&#x27;</span>;\t\t\t\t\t<span class=\"comment\">// Convert the chars into int</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">g</span> <span class=\"operator\">=</span> guess.charAt(i) - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (s != g &amp;&amp; freq[g] &gt; <span class=\"number\">0</span>) &#123;\t\t\t\t\t<span class=\"comment\">// Only if they are a mismtach and we have a number g available in freq table</span></span><br><span class=\"line\">            cows++;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// then it&#x27;s a cow.</span></span><br><span class=\"line\">            freq[g]--;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// We used up the number, so decrement it&#x27;s freq.</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>().append(bulls).append(<span class=\"string\">&quot;A&quot;</span>).append(cows).append(<span class=\"string\">&quot;B&quot;</span>).toString();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"N-Queens-I\"><a href=\"#N-Queens-I\" class=\"headerlink\" title=\"N-Queens I\"></a><a href=\"https://leetcode.com/problems/n-queens/\">N-Queens I</a><a name=\"n-queens-1\"></a></h3><p>Runtime: 3 ms, faster than 73.76% of Java online submissions for N-Queens.<br>Memory Usage: 37.6 MB, less than 100.00% of Java online submissions for N-Queens.</p>\n<p>The idea is same as sudoku, but insteading of scanning rows, we scan columns. Start with row 0, column 0 and see if we can place a queen there, if yes place it and try the next cell of row 0 by recursing. We can‚Äôt put the queen in the same row again, so we keep changing rows with column 1 until we find somewhere to place it. Keep doing this until you were successfully able to place all the queens as checked by the condition <code>col == n</code>. If so, add that solution to our list of accepted solutions.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NQueens</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span>[][] board;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> n;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;List&lt;String&gt;&gt; result;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;List&lt;String&gt;&gt; <span class=\"title function_\">solveNQueens</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.n = n;</span><br><span class=\"line\">        board = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[n][n];</span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        solve(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">solve</span><span class=\"params\">(<span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (col == n)</span><br><span class=\"line\">            addToList();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; row &lt; n; ++row) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (canPlaceQueen(row, col)) &#123;</span><br><span class=\"line\">                board[row][col] = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (solve(col+<span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    board[row][col] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addToList</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">        StringBuilder sb;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span>[] r: board) &#123;</span><br><span class=\"line\">            sb = <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: r)</span><br><span class=\"line\">                sb.append(i == <span class=\"number\">1</span> ? <span class=\"string\">&#x27;Q&#x27;</span> : <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">            list.add(sb.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result.add(list);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">canPlaceQueen</span><span class=\"params\">(<span class=\"type\">int</span> row, <span class=\"type\">int</span> col)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Check all rows for the same column</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; col; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board[row][i] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Check upper left diagonal of the cell</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> row, j = col; i &gt;= <span class=\"number\">0</span> &amp;&amp; j &gt;= <span class=\"number\">0</span>; i--, j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// Check lower left diagonal of the cell.</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> row, j = col; i &lt; n &amp;&amp; j &gt;= <span class=\"number\">0</span>; i++, j--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (board[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"K-diff-pairs-in-an-Array\"><a href=\"#K-diff-pairs-in-an-Array\" class=\"headerlink\" title=\"K-diff pairs in an Array\"></a><a href=\"https://leetcode.com/problems/k-diff-pairs-in-an-array/\">K-diff pairs in an Array</a><a name=\"k-diff-pairs-in-an-array\"></a></h3><p>Pretty intuitive solution. Build a frequency HashMap for all the numbers in the array. In a special case where <code>diff</code> is 0, just count occurences in our <code>freq</code> map whose values are 2 or more. In other case, just loop through all the keys and make sure it‚Äôs supplement exists to count the number of K-diff pairs.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findPairs</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> k)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">pairs</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    HashMap&lt;Integer, Integer&gt; freq = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: nums) &#123;</span><br><span class=\"line\">        freq.put(i, freq.getOrDefault(i, <span class=\"number\">0</span>)+<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: freq.values())</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">                pairs++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> pairs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: freq.keySet()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (freq.containsKey(i+k))</span><br><span class=\"line\">            pairs++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pairs;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"Is-Subsequence\"><a href=\"#Is-Subsequence\" class=\"headerlink\" title=\"Is Subsequence\"></a><a href=\"https://leetcode.com/problems/is-subsequence/submissions/\">Is Subsequence</a><a name=\"is-subsequence\"></a></h3><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Is Subsequence.<br>Memory Usage: 49.6 MB, less than 100.00% of Java online submissions for Is Subsequence.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isSubsequence</span><span class=\"params\">(String s, String t)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> -<span class=\"number\">1</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">// Set it to 0 to start check for 0th index</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: s.toCharArray()) &#123;\t\t\t\t<span class=\"comment\">// For all the characters in String s</span></span><br><span class=\"line\">        idx = t.indexOf(c, idx+<span class=\"number\">1</span>);\t\t\t\t<span class=\"comment\">// Find it&#x27;s index in String t from index one more than the last index matched</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (idx &lt; <span class=\"number\">0</span>)\t\t\t\t\t\t\t<span class=\"comment\">// idx &lt; 0 means not found</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Minimum-Absolute-Difference-in-BST\"><a href=\"#Minimum-Absolute-Difference-in-BST\" class=\"headerlink\" title=\"Minimum Absolute Difference in BST\"></a><a href=\"https://leetcode.com/problems/minimum-absolute-difference-in-bst/\">Minimum Absolute Difference in BST</a><a name=\"minimum-absolute-difference-in-bst\"></a></h3><p>The idea is to use the Inorder traversal of a BST. We repeatively iterate over the left branch to find the minimum diff and then do the same for the right branch, but this time we already know that the parent of the right branch has to be its minimum, so first set it and then traverse the right branch to find the minimum difference.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;\t\t\t\t\t\t\t\t<span class=\"comment\">// Hold the minimum difference.</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">prev</span> <span class=\"operator\">=</span> Integer.MAX_VALUE;\t\t\t\t\t\t\t\t<span class=\"comment\">// Holds the minimum value observed for the right branch</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMinimumDifference</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">    traverse(root);\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Start iterating from the root.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">traverse</span><span class=\"params\">(TreeNode node)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Null node, so stop recursion</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    traverse(node.left);\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Keep traversing till the end of the tree</span></span><br><span class=\"line\">    res = Math.min(Math.abs(node.val-prev), res);\t\t\t<span class=\"comment\">// Check if we have a minimum, if so set it.</span></span><br><span class=\"line\">    prev = node.val;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// The smallest value for the right branch is it&#x27;s parent</span></span><br><span class=\"line\">    traverse(node.right);\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Set it first and then traverse.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BST-Tree-to-Greater-Tree\"><a href=\"#BST-Tree-to-Greater-Tree\" class=\"headerlink\" title=\"BST Tree to Greater Tree\"></a><a href=\"https://leetcode.com/problems/convert-bst-to-greater-tree/\">BST Tree to Greater Tree</a><a name=\"bst-tree-to-greater-tree\"></a></h3><p>The idea is simple. In a BST, we know everything on the right side of a node is greater than it and it‚Äôs left side. So when we are at any node, it‚Äôs value would be its value + sum of everything on its right side. So, we first compute the node‚Äôs value and then notice that the value for the node on the left is nothing but its value + parents value. So the node‚Äôs value is computed, do the same thing for the left side, but this time, the starting sum would be the parent‚Äôs value.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> TreeNode <span class=\"title function_\">convertBST</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">    traverse(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"title function_\">traverse</span><span class=\"params\">(TreeNode node, <span class=\"type\">int</span> sum)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    node.val += traverse(node.right, sum);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> traverse(node.left, node.val);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Student-Attendance-Record-I\"><a href=\"#Student-Attendance-Record-I\" class=\"headerlink\" title=\"Student Attendance Record I\"></a><a href=\"https://leetcode.com/problems/student-attendance-record-i/\">Student Attendance Record I</a><a name=\"student-attendance-record-I\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">checkRecord</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">A</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Count number of A&#x27;s seen</span></span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">L</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Count number of consecutive L&#x27;s seen</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">char</span> c: s.toCharArray()) &#123;\t\t<span class=\"comment\">// Loop through each character</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;A&#x27;</span>) &#123;\t\t\t\t\t\t\t\t<span class=\"comment\">// If c is A, increment A</span></span><br><span class=\"line\">              A++;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (A &gt; <span class=\"number\">1</span>)\t\t\t\t\t\t\t\t<span class=\"comment\">// If A is more than 1, return false</span></span><br><span class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"type\">false</span></span><br><span class=\"line\">              <span class=\"variable\">L</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Always set L count to 0</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c == <span class=\"string\">&#x27;L&#x27;</span>) &#123;\t\t\t\t\t<span class=\"comment\">// If c is L,</span></span><br><span class=\"line\">              L++;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// We might have consecutive L&#x27;s, so start counting</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (L &gt; <span class=\"number\">2</span>) &#123;\t\t\t\t\t\t\t<span class=\"comment\">// If we have more than 2 consecutive L&#x27;s</span></span><br><span class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t<span class=\"comment\">// return false</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span>\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Lastly, we might have a P, that will reset our</span></span><br><span class=\"line\">              L = <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// consecutive L streak.</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Everything passed, so return true.</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reverse-Words-in-String-III\"><a href=\"#Reverse-Words-in-String-III\" class=\"headerlink\" title=\"Reverse Words in String III\"></a><a href=\"https://leetcode.com/problems/reverse-words-in-a-string-iii/\">Reverse Words in String III</a><a name=\"reverse-words-in-string-iii\"></a></h3><p>Runtime: 2 ms, faster than 99.34% of Java online submissions for Reverse Words in a String III.</p>\n<p>Memory Usage: 37.9 MB, less than 100.00% of Java online submissions for Reverse Words in a String III.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">reverseWords</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">char</span>[] arr = s.toCharArray();</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> arr.length;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> end;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (start &lt; len) &#123;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Check the whole string</span></span><br><span class=\"line\">          end = start;\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// find the index of the first whitespace</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span>(end &lt; len &amp;&amp; arr[end] != <span class=\"string\">&#x27; &#x27;</span>)\t\t<span class=\"comment\">// denoting end of the word</span></span><br><span class=\"line\">              end++;</span><br><span class=\"line\">          reverseWord(arr, start, end-<span class=\"number\">1</span>);\t\t\t\t<span class=\"comment\">// reverse that specific word</span></span><br><span class=\"line\">          start = end+<span class=\"number\">1</span>;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// update start to the new word beginning</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(arr);\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// create a new string out of the array</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tReverses a word in-place by iterating n/2 times where n = len of the word.</span></span><br><span class=\"line\"><span class=\"comment\">\tTraverse upto the middle point of the word while swapping each word from start+offset to end-\t offset.</span></span><br><span class=\"line\"><span class=\"comment\">\t**/</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverseWord</span><span class=\"params\">(<span class=\"type\">char</span>[] arr, <span class=\"type\">int</span> start, <span class=\"type\">int</span> stop)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt;= (stop-start)/<span class=\"number\">2</span>; ++i) &#123;</span><br><span class=\"line\">          <span class=\"type\">char</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[start+i];</span><br><span class=\"line\">          arr[start+i] = arr[stop-i];</span><br><span class=\"line\">          arr[stop-i] = temp;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Quad-Tree-Intersection\"><a href=\"#Quad-Tree-Intersection\" class=\"headerlink\" title=\"Quad Tree Intersection\"></a><a href=\"https://leetcode.com/problems/quad-tree-intersection/\">Quad Tree Intersection</a><a name=\"quad-tree-intersection\"></a></h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Node <span class=\"title function_\">intersect</span><span class=\"params\">(Node qt1, Node qt2)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (qt1.isLeaf)\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// If only a leaf, then return the one with true val</span></span><br><span class=\"line\">          <span class=\"keyword\">return</span> qt1.val ? qt1 : qt2;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (qt2.isLeaf)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> qt2.val ? qt2 : qt1;</span><br><span class=\"line\">      <span class=\"type\">Node</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>();\t\t\t\t\t\t\t<span class=\"comment\">// Prepare for recursion</span></span><br><span class=\"line\">      n.val = <span class=\"literal\">true</span>;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// By default, each level node is not a leaf with </span></span><br><span class=\"line\">      n.isLeaf = <span class=\"literal\">false</span>;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// value = true</span></span><br><span class=\"line\">  </span><br><span class=\"line\">  \t\t<span class=\"comment\">// Keep traversing all the way to a terminal node and then store it.</span></span><br><span class=\"line\">      n.topLeft = intersect(qt1.topLeft, qt2.topLeft);</span><br><span class=\"line\">      n.topRight = intersect(qt1.topRight, qt2.topRight);</span><br><span class=\"line\">      n.bottomLeft = intersect(qt1.bottomLeft, qt2.bottomLeft);</span><br><span class=\"line\">      n.bottomRight = intersect(qt1.bottomRight, qt2.bottomRight);</span><br><span class=\"line\">  </span><br><span class=\"line\">  \t\t<span class=\"comment\">// Check now if you&#x27;re at the base case. If n&#x27;s children are leaves and all their values are same, then make n a leaf and it&#x27;s value the same as it&#x27;s child.</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n.topLeft.isLeaf &amp;&amp; n.topRight.isLeaf &amp;&amp; n.bottomLeft.isLeaf &amp;&amp; n.bottomRight.isLeaf &amp;&amp; (n.topLeft.val == n.topRight.val &amp;&amp; n.topRight.val == n.bottomLeft.val &amp;&amp; n.bottomLeft.val == n.bottomRight.val)) &#123;</span><br><span class=\"line\">          n.isLeaf = <span class=\"literal\">true</span>;</span><br><span class=\"line\">          n.val = n.topLeft.val;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Long-Pressed-Name\"><a href=\"#Long-Pressed-Name\" class=\"headerlink\" title=\"Long Pressed Name\"></a><a href=\"https://leetcode.com/problems/long-pressed-name/\">Long Pressed Name</a><a name=\"long-pressed-name\"></a></h3><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Long Pressed Name.</p>\n<p>Memory Usage: 34.2 MB, less than 100.00% of Java online submissions for Long Pressed Name.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">isLongPressedName</span><span class=\"params\">(String name, String typed)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">char</span>[] n = name.toCharArray();\t\t\t\t\t\t<span class=\"comment\">// Arrays are much nicer to work with</span></span><br><span class=\"line\">      <span class=\"type\">char</span>[] t = typed.toCharArray();\t\t\t\t\t\t<span class=\"comment\">// Record start and stop points for both</span></span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">startN</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, endN = n.length, startT = <span class=\"number\">0</span>, endT = t.length;</span><br><span class=\"line\">      <span class=\"keyword\">while</span> (startT &lt; endT) &#123;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// While we haven&#x27;t looked at the whole string</span></span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> startN+<span class=\"number\">1</span>;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Let&#x27;s first count same consecutive letters</span></span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">countN</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// in String name</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (temp &lt; endN &amp;&amp; n[startN] == n[temp]) &#123;</span><br><span class=\"line\">              temp++;</span><br><span class=\"line\">              countN++;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">countT</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Do the same for typed string</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span> (startT &lt; endT &amp;&amp; n[startN] == t[startT]) &#123;</span><br><span class=\"line\">              startT++;</span><br><span class=\"line\">              countT++;</span><br><span class=\"line\">          &#125;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// If consecutive letters in typed string are</span></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (countT &lt; countN)\t\t\t\t\t\t\t\t\t<span class=\"comment\">// less than the ones in original name</span></span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// return false</span></span><br><span class=\"line\">          startN = temp;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Otherwise, prepare for next character</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> startN == endN;\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Lastly, check if we were able to match</span></span><br><span class=\"line\">  &#125;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// all character of the name string</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Binary-Tree-Zigzag-Level-Order-Traversal\"><a href=\"#Binary-Tree-Zigzag-Level-Order-Traversal\" class=\"headerlink\" title=\"Binary Tree Zigzag Level Order Traversal\"></a><a href=\"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/\">Binary Tree Zigzag Level Order Traversal</a><a name=\"binary-tree-zigzag-level-order-traversal\"></a></h3><p>The idea here is simple. We perform a BFS as usual using a Queue but I maintain a variable called <code>dir</code> to check which side do I add from. <code>dir=1</code> means add from Right-&gt;Left and <code>dir=-1</code> means add from usual Left-&gt;Right. I am also using LinkedList because of easy addition of elements in both direction. When I need to add from Right-&gt;Left, I use the <code>addFirst(E e)</code> method of LinkedList to add to the head, otherwise normal add to the tail. One important thing to take care of at each iteration is to know how many nodes to dequeue, hence the usage of the variable <code>children</code>. This allows me to keep track of how many children were added to the queue at each stage so I dequeue exactly that many children in the next stage. Apart from that, everything is straightforward.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;List&lt;Integer&gt;&gt; <span class=\"title function_\">zigzagLevelOrder</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">      List&lt;List&lt;Integer&gt;&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">          <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">      Queue&lt;TreeNode&gt; q = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">      q.add(root);\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Children = 1 because only root is added.</span></span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">dir</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, children = <span class=\"number\">1</span>;\t\t\t<span class=\"comment\">// Added the root, so next time dir = 1 (Right-&gt;Left)</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span>(!q.isEmpty()) &#123;</span><br><span class=\"line\">          <span class=\"type\">int</span> <span class=\"variable\">pushed</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">          LinkedList&lt;Integer&gt; l = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">          <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; children; ++i) &#123;\t\t<span class=\"comment\">// Poll only those nodes that were queued in</span></span><br><span class=\"line\">              <span class=\"type\">TreeNode</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> q.poll();\t\t\t\t\t\t\t<span class=\"comment\">// the previous stage.</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (dir == <span class=\"number\">1</span>)</span><br><span class=\"line\">                  l.add(u.val);</span><br><span class=\"line\">              <span class=\"keyword\">else</span></span><br><span class=\"line\">                  l.addFirst(u.val);\t\t\t\t\t\t\t<span class=\"comment\">// Left-&gt;Right add</span></span><br><span class=\"line\">              <span class=\"keyword\">if</span> (u.left != <span class=\"literal\">null</span>) &#123;\t\t\t\t\t\t\t\t<span class=\"comment\">// Add children, notice I am counting here</span></span><br><span class=\"line\">                  q.add(u.left);\t\t\t\t\t\t\t\t\t<span class=\"comment\">// how many children I am pushing/queuing</span></span><br><span class=\"line\">                  ++pushed;\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// to the queue</span></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (u.right != <span class=\"literal\">null</span>) &#123;\t\t\t\t\t\t\t<span class=\"comment\">// Same thing for right child.</span></span><br><span class=\"line\">                  q.add(u.right);</span><br><span class=\"line\">                  ++pushed;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          list.add(l);\t\t\t\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Add this list to main list</span></span><br><span class=\"line\">          children = pushed;\t\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// update # of children pushed</span></span><br><span class=\"line\">          dir = dir == <span class=\"number\">1</span> ? -<span class=\"number\">1</span>: <span class=\"number\">1</span>;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// update dir for next iteration</span></span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Array-Partition-I\"><a href=\"#Array-Partition-I\" class=\"headerlink\" title=\"Array Partition I\"></a><a href=\"https://leetcode.com/problems/array-partition-i/\">Array Partition I</a><a name=\"array-partition-I\"></a></h3><p>Runtime: 3 ms, faster than 99.90% of Java online submissions for Array Partition I.</p>\n<p>Memory Usage: 40.1 MB, less than 100.00% of Java online submissions for Array Partition I.</p>\n<p>I originally came up with the sorting solution where you sort the array and look at two numbers at a time and keep the smaller number out of them and add to the sum. It was way slower, so I checked the fastest submission and this one is pretty smart. The idea is really good. We know there are going to be 20,001 numbers, so reserve an array for it. Now let‚Äôs say we had duplicates in our array, ex [1,2,1,4,1,1], if we were to sort it, we would get [1,1,1,1,2,4]. Notice that those four 1‚Äôs don‚Äôt really matter because each of them pairs up with the other to give you a one 1. That is why we mark those particular indices as true and false. Notice that in our variable <code>sum</code> we would have counted them individually, making <code>sum = 4</code> when in fact it should be 2 since we only take one of them from two pairs. If we have even occurrence of any number, they would be false, meaning we don‚Äôt need to account them in the <code>diff</code> calculation. Now coming to <code>diff</code> how do we compute it? First we have the <code>seen</code> array to know which elements we need to look at. If that particular index is true, then we check if it‚Äôs the first element of the pair which we maintain via the boolean value <code>firstElemOfPair</code>. If its true, then <code>first</code> becomes that value. Otherwise, we know that we‚Äôre looking at the second element so we update the <code>diff</code> which is basically that value subtract <code>first</code>. Notice that if we look at a pair in our example as (2,4), we would pick 2 and the <code>diff</code> would be 2. This needs to be subtracted from our <code>sum</code>, hence the reason to maintain both of them. At the end, we finally subtract sum and diff and divide the result by 2 because we were doubling our diff‚Äôs too.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">arrayPairSum</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">boolean</span>[] seen = <span class=\"keyword\">new</span> <span class=\"title class_\">boolean</span>[<span class=\"number\">20001</span>];</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> n: nums) &#123;</span><br><span class=\"line\">          seen[n + <span class=\"number\">10000</span>] = !seen[n+<span class=\"number\">10000</span>];</span><br><span class=\"line\">          sum += n;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">diff</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"type\">int</span> <span class=\"variable\">first</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"type\">boolean</span> <span class=\"variable\">firstElemOfPair</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; seen.length; ++i) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (seen[i]) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (firstElemOfPair)</span><br><span class=\"line\">                  first = i;</span><br><span class=\"line\">              <span class=\"keyword\">else</span></span><br><span class=\"line\">                  diff += i-first;</span><br><span class=\"line\">              firstElemOfPair = !firstElemOfPair;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (sum-diff)/<span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Reshape-the-Matrix\"><a href=\"#Reshape-the-Matrix\" class=\"headerlink\" title=\"Reshape the Matrix\"></a><a href=\"https://leetcode.com/problems/reshape-the-matrix/\">Reshape the Matrix</a><a name=\"reshape-the-matrix\"></a></h3><p>Runtime: 1 ms, faster than 100.00% of Java online submissions for Reshape the Matrix.</p>\n<p>Memory Usage: 38.4 MB, less than 100.00% of Java online submissions for Reshape the Matrix.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] matrixReshape(<span class=\"type\">int</span>[][] nums, <span class=\"type\">int</span> r, <span class=\"type\">int</span> c) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">numsR</span> <span class=\"operator\">=</span> nums.length;\t\t\t\t                    <span class=\"comment\">// Get rows and col of nums</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">numsC</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>].length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numsR * numsC != r*c || (numsR == r &amp;&amp; numsC == c))\t<span class=\"comment\">// If can&#x27;t reshape or problems</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums;\t\t\t\t\t\t\t\t\t        <span class=\"comment\">// asks to reshape in the same dimensions, return the same array</span></span><br><span class=\"line\">    <span class=\"type\">int</span>[][] mat = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[r][c];\t\t\t                    <span class=\"comment\">// New matrix to be returned</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">row</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, col = <span class=\"number\">0</span>, nR = <span class=\"number\">0</span>, nC = <span class=\"number\">0</span>; \t                <span class=\"comment\">// To keep track of which element to consume and where to place it in the new matrix</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (row != r) &#123;</span><br><span class=\"line\">        mat[row][col++] = nums[nR][nC++];\t                    <span class=\"comment\">// Increment only the column value for both</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (col == c) &#123;\t\t\t\t\t\t\t\t        <span class=\"comment\">// Check if we are at boundary, if so, increment row</span></span><br><span class=\"line\">            col = <span class=\"number\">0</span>;\t\t\t\t\t\t\t\t\t        <span class=\"comment\">// and set col to 0 for both cases.</span></span><br><span class=\"line\">            ++row;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nC == numsC) &#123;</span><br><span class=\"line\">            nC = <span class=\"number\">0</span>;</span><br><span class=\"line\">            ++nR;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mat;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Swap-Nodes-in-Pairs\"><a href=\"#Swap-Nodes-in-Pairs\" class=\"headerlink\" title=\"Swap Nodes in Pairs\"></a><a href=\"https://leetcode.com/problems/swap-nodes-in-pairs/\">Swap Nodes in Pairs</a><a name=\"swap-nodes-in-pairs\"></a></h3><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Swap Nodes in Pairs.</p>\n<p>Memory Usage: 34.5 MB, less than 100.00% of Java online submissions for Swap Nodes in Pairs.</p>\n<p>The idea is simple. We add a dummy node in front for simplicity as it allows us to generalize the concept of getting two nodes at a time. We maintain a current pointer that points to the node in the actual LinkedList. Then, we get it‚Äôs next and it‚Äôs next.next and store it into n1 and n2. Now notice that before making n2‚Äôs next &#x3D; n1, we need to store n2‚Äôs next into n1‚Äôs next. After we do that, we need to make sure that current‚Äôs next is n2 which is now working with the actual LinkedList. Then, we need to make sure that current.next.next is n1 which we just fixed and update current which is basically n1.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">swapPairs</span><span class=\"params\">(ListNode head)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">dummy</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    dummy.next = head;</span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">curr</span> <span class=\"operator\">=</span> dummy;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (curr.next != <span class=\"literal\">null</span> &amp;&amp; curr.next.next != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> curr.next;</span><br><span class=\"line\">        <span class=\"type\">ListNode</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> n1.next;</span><br><span class=\"line\">        n1.next = n2.next;</span><br><span class=\"line\">        curr.next = n2;</span><br><span class=\"line\">        curr.next.next = n1;</span><br><span class=\"line\">        curr = curr.next.next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dummy.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Generate-Parentheses\"><a href=\"#Generate-Parentheses\" class=\"headerlink\" title=\"Generate Parentheses\"></a><a href=\"https://leetcode.com/problems/generate-parentheses/\">Generate Parentheses</a><a name=\"generate-parentheses\"></a></h3><p>Iterative Approach 1: This one is very slow.</p>\n<p>Runtime: 4 ms, faster than 8.87% of Java online submissions for Generate Parentheses.</p>\n<p>Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Generate Parentheses.</p>\n<p>The idea is simple. We basically do a BFS and keep track of the parentheses combination we have obtained so far. Poll the queue and check if it‚Äôs length is 2*n (for a given n, we would have # of open brackets &#x3D; # of closed brackets), add it to the list and check next combination. If not, then check if we can add an open bracket, add it and update number of open bracket count and add this combination to the queue. Then try to see if we can add a closed bracket, if you can add it, then update closed bracket count add that combination to the queue. Keep doing this until the queue becomes empty. This is the first approach I came up with which is naive as you can see since it‚Äôs doing an exhaustive search for all valid combination.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String data;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> open;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> close;</span><br><span class=\"line\"></span><br><span class=\"line\">    Node(String s, <span class=\"type\">int</span> o, <span class=\"type\">int</span> c) &#123;</span><br><span class=\"line\">        data = s;</span><br><span class=\"line\">        open = o;</span><br><span class=\"line\">        close = c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">generateParenthesis</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">    Queue&lt;Node&gt; q = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">    q.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(<span class=\"string\">&quot;(&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"type\">Node</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> q.poll();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (u.data.length() == <span class=\"number\">2</span>*n)</span><br><span class=\"line\">            list.add(u.data);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(u.data, u.open, u.close);</span><br><span class=\"line\">            <span class=\"type\">Node</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Node</span>(u.data, u.open, u.close);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n1.open &lt; n) &#123;</span><br><span class=\"line\">                n1.data = u.data + <span class=\"string\">&#x27;(&#x27;</span>;</span><br><span class=\"line\">                ++n1.open;</span><br><span class=\"line\">                q.add(n1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (n2.close &lt; u.open) &#123;</span><br><span class=\"line\">                n2.data = u.data + <span class=\"string\">&#x27;)&#x27;</span>;</span><br><span class=\"line\">                ++n2.close;</span><br><span class=\"line\">                q.add(n2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Recursive Solution 2: This one is much more faster. I generalized the above idea into the fact that I am adding only valid combinations and any invalid combinations are automatically discarded. The logic is as follows: We know for a given n, the string length should be 2*n. So that forms our base case for recursion, if the length of String <code>s</code> is <code>2n</code>, we want to add it to the list. Otherwise, we check if the number of open brackets we have so far is less than <code>n</code>. If so, we can add an open bracket. Then check if number of close bracket is less than <code>open</code>, if so that sequence would be valid and add a close bracket and recurse.</p>\n<p>Runtime: 1 ms, faster than 95.16% of Java online submissions for Generate Parentheses.<br>Memory Usage: 36.1 MB, less than 100.00% of Java online submissions for Generate Parentheses.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;String&gt; <span class=\"title function_\">generateParenthesis</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    helper(list, <span class=\"string\">&quot;(&quot;</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">helper</span><span class=\"params\">(List&lt;String&gt; list, String s, <span class=\"type\">int</span> open, <span class=\"type\">int</span> close, <span class=\"type\">int</span> n)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.length() == <span class=\"number\">2</span>*n)</span><br><span class=\"line\">        list.add(s);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (open &lt; n)</span><br><span class=\"line\">            helper(list, s+<span class=\"string\">&#x27;(&#x27;</span>, open+<span class=\"number\">1</span>, close, n);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (close &lt; open)</span><br><span class=\"line\">            helper(list, s+<span class=\"string\">&#x27;)&#x27;</span>, open, close+<span class=\"number\">1</span>, n);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>###<a href=\"https://leetcode.com/problems/distribute-candies/\">Distribute Candies</a><a name=\"distribute-candies\"></a></p>\n<p>Pretty simple solution. We want to give maximize the number of unique candies to give to the sister. So we maintain a hashset to collect all the unique candies first. Both of them get half the candies, so let <code>s = number of candies they get</code>. Now, if the size of the set is greater than or equal to <code>s</code>, then the sister only gets <code>s</code> candies out of it. Otherwise, the maximum amount of unique candies she can get is equal to the set size.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">distributeCandies</span><span class=\"params\">(<span class=\"type\">int</span>[] candies)</span> &#123;</span><br><span class=\"line\">    Set&lt;Integer&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;(candies.length);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i: candies)</span><br><span class=\"line\">        set.add(i);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">share</span> <span class=\"operator\">=</span> candies.length/<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> set.size() &gt;= share ? share: set.size();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Maximum-subproduct-subarray\"><a href=\"#Maximum-subproduct-subarray\" class=\"headerlink\" title=\"Maximum subproduct subarray\"></a><a href=\"https://leetcode.com/problems/maximum-product-subarray/\">Maximum subproduct subarray</a><a name=\"maximum-subproduct-subarray\"></a></h3><p>Credits for this simplistic solution to LeetCode user <a href=\"https://leetcode.com/problems/maximum-product-subarray/discuss/48230/Possibly-simplest-solution-with-O(n)-time-complexity\">mzchen</a>. The approach is very clever. Notice that if this problem was about finding maximum sum subarray, then a negative number would break the contiguous array. Here, what it does is that it makes our maximum product minimum when we see a negative number and vice versa. We keep track of maximum and minimum we have so far and check if we have a negative number. If so swap our max and min. Then, find the local maximum and minimum between current number and multiplying that number with our current max or min. After that, update our global max value and keep doing this for all values in the array.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">maxProduct</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">max</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>, imax = max, imin = max; i &lt; nums.length; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> imax;</span><br><span class=\"line\">            imax = imin;</span><br><span class=\"line\">            imin = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        imax = Math.max(nums[i], imax * nums[i]);</span><br><span class=\"line\">        imin = Math.min(nums[i], imin * nums[i]);</span><br><span class=\"line\">        max = Math.max(max, imax);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Binary-Tree-Right-Side-View\"><a href=\"#Binary-Tree-Right-Side-View\" class=\"headerlink\" title=\"Binary Tree Right Side View\"></a><a href=\"https://leetcode.com/problems/binary-tree-right-side-view/\">Binary Tree Right Side View</a><a name=\"binary-tree-right-side-view\"></a></h3><p>Runtime: 1 ms, faster than 95.45% of Java online submissions for Binary Tree Right Side View.</p>\n<p>Memory Usage: 36.3 MB, less than 100.00% of Java online submissions for Binary Tree Right Side View.</p>\n<p>This is an interesting problem cause initially, I thought we would always have a complete binary tree and I made my initial solution oriented towards it. But then I saw that it doesn‚Äôt say that anywhere and it could be any kind of binary tree. So it got me thinking towards a more generalized approach. Notice that to get a right side view of the binary tree, we only need the last value at any given level and put it into the list. So we maintain a queue and also the number of elements we enqueue at each stage. Initially, we put the root node in our queue and our enqueue count is 1. We dequeue exactly that many elements and again enqueue each of those dequeued node‚Äôs children. Notice that I am using the variable <code>newEnqueued</code> to keep track of newly enqueued elements. Lastly, we need to check if we dequeued the last element. If so, that must be a part of the solution since it has to be the rightmost element at that level, so I add it to the list. Update <code>enqueued</code> to the new value and repeat until our queue isn‚Äôt empty.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> List&lt;Integer&gt; <span class=\"title function_\">rightSideView</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">    List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (root == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">    Queue&lt;TreeNode&gt; q = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedList</span>&lt;&gt;();</span><br><span class=\"line\">    q.add(root);</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">enqueued</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!q.isEmpty()) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">newEnqueued</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; enqueued; ++i) &#123;</span><br><span class=\"line\">            <span class=\"type\">TreeNode</span> <span class=\"variable\">u</span> <span class=\"operator\">=</span> q.poll();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (u.left != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                q.add(u.left);</span><br><span class=\"line\">                ++newEnqueued;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (u.right != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                q.add(u.right);</span><br><span class=\"line\">                ++newEnqueued;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == enqueued-<span class=\"number\">1</span>)</span><br><span class=\"line\">                list.add(u.val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        enqueued = newEnqueued;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Find-Minimum-in-Rotated-Sorted-Array\"><a href=\"#Find-Minimum-in-Rotated-Sorted-Array\" class=\"headerlink\" title=\"Find Minimum in Rotated Sorted Array\"></a><a href=\"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/submissions/\">Find Minimum in Rotated Sorted Array</a><a name=\"find-minimum-in-rotated-sorted-array\"></a></h3><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Find Minimum in Rotated Sorted Array.</p>\n<p>Memory Usage: 38.6 MB, less than 77.27% of Java online submissions for Find Minimum in Rotated Sorted Array.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findMin</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">1</span>)\t\t\t\t\t\t\t\t\t<span class=\"comment\">// Base case.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">right</span> <span class=\"operator\">=</span> nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (nums[left] &gt; nums[right]) &#123;\t\t<span class=\"comment\">// While we are in the ascending order half,</span></span><br><span class=\"line\">        mid = (left + right)/<span class=\"number\">2</span>;\t\t\t\t\t\t<span class=\"comment\">// Find the middle element</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &gt;= nums[left])\t\t\t<span class=\"comment\">// If mid element &gt;= left element, then our min</span></span><br><span class=\"line\">            left = mid + <span class=\"number\">1</span>;\t\t\t\t\t\t\t\t<span class=\"comment\">// must be in the right half.</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            right = mid;\t\t\t\t\t\t\t\t\t<span class=\"comment\">// otherwise min in the left half.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[left];\t\t\t\t\t\t\t\t\t\t<span class=\"comment\">// left points to minimum element.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Binary-Search-Tree-Iterator\"><a href=\"#Binary-Search-Tree-Iterator\" class=\"headerlink\" title=\"Binary Search Tree Iterator\"></a><a href=\"https://leetcode.com/problems/binary-search-tree-iterator/\">Binary Search Tree Iterator</a><a name=\"binary-search-tree-iterator\"></a></h3><p>Runtime: 15 ms, faster than 99.74% of Java online submissions for Binary Search Tree Iterator.</p>\n<p>Memory Usage: 49.9 MB, less than 93.83% of Java online submissions for Binary Search Tree Iterator.</p>\n<p>Logic is same as your In-Order traversal of any Binary Tree, but store the node values you visit in any data structure. Here I am using an ArrayList for storing each of the visited node‚Äôs value. Maintain <code>idx</code> value to keep track of which value to return. <code>hasNext()</code> method returns true as long as <code>idx &lt; list.size()</code>.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BSTIterator</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Integer&gt; list;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">BSTIterator</span><span class=\"params\">(TreeNode root)</span> &#123;</span><br><span class=\"line\">        list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        traverse(root);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">traverse</span><span class=\"params\">(TreeNode node)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        traverse(node.left);</span><br><span class=\"line\">        list.add(node.val);</span><br><span class=\"line\">        traverse(node.right);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@return</span> the next smallest number */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">next</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list.get(idx++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/** <span class=\"doctag\">@return</span> whether we have a next smallest number */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">hasNext</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> idx != list.size();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Find-Peak-Element\"><a href=\"#Find-Peak-Element\" class=\"headerlink\" title=\"Find Peak Element\"></a><a href=\"https://leetcode.com/problems/find-peak-element/\">Find Peak Element</a><a name=\"find-peak-element\"></a></h3><p>This question was asked to me for my internship at Yahoo! The idea is simple, we want any one of the peak. So to achieve <code>O(log n)</code> time, we have to mimic binary search algorithm. We look at the middle element and check it‚Äôs neighbor, if it‚Äôs greater than the middle element, then we know we will have atleast one peak on the right side. Why? Think what could happen. We know that the element next to middle is greater than it, so there are two possibilities on the right side, either elements keep increasing to the right of the middle‚Äôs next element or we might go up till a particular index and then go down. So in any case, we will have a peak on the right side. On the other case, if the element on the right side is smaller than the middle, then we know that the left half including the middle will have the peak cause middle is already greater than middle‚Äôs right, so we might have middle as the peak itself.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">findPeakElement</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length == <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">low</span> <span class=\"operator\">=</span> nums[<span class=\"number\">0</span>], high = nums.length - <span class=\"number\">1</span>, mid;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (low &lt; high) &#123;</span><br><span class=\"line\">        mid = (low + high)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[mid] &lt; nums[mid+<span class=\"number\">1</span>])</span><br><span class=\"line\">            low = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            high = mid;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> low;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Next-Permutation\"><a href=\"#Next-Permutation\" class=\"headerlink\" title=\"Next Permutation\"></a><a href=\"https://leetcode.com/problems/next-permutation/\">Next Permutation</a><a name=\"next-permutation\"></a></h3><p>Runtime: 0 ms, faster than 100.00% of Java online submissions for Next Permutation.</p>\n<p>Memory Usage: 40.3 MB, less than 47.00% of Java online submissions for Next Permutation.</p>\n<p>This one was quite interesting in the sense it seems difficult but is very simple once you try out a few example. If we want to find the next lexicographical greater number, then we need to find a particular index from the right side of the array such that the number after it is greater than itself, because by swapping them would give us a next larger number. So what I first do is find the index of the number such that <code>num[idx] &gt; num[idx-1]</code>. We know at this point that all the numbers after that index are reverse sorted, so we need to fix it and sort them in increasing order because lexicographical order demands all the numbers in increasing manner. Example, say <code>nums = [2,3,1,4,2,1,0]</code>. You can see that that the next number should be <code>[2,3,2,0,1,1,4]</code>. Notice that I replaced the number at index 2 with the first number which is greater than it if the array after index 2 was sorted. This gaurantees us a larger lexicographical number. So the first while loop finds us that index number and then I reverse the array after it. Once you reverse it, we should expect the <code>nums</code> array to look like <code>[2,3,1,0,1,2,4]</code>. Note that now we need to find the number larger than the number at index 2, which is 1 in this case. The first number greater than 1 is 2, so the second while loop finds it and then we simply swap them to give us the next larger lexicographically greater number &#x3D;&gt; <code>[2,3,2,0,1,1,4].</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nextPermutation</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (nums.length &lt; <span class=\"number\">2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">idx</span> <span class=\"operator\">=</span> nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (idx &gt; <span class=\"number\">0</span> &amp;&amp; nums[idx] &lt;= nums[idx-<span class=\"number\">1</span>])</span><br><span class=\"line\">        --idx;</span><br><span class=\"line\">    reverse(nums, idx);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (idx == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">val</span> <span class=\"operator\">=</span> nums[idx-<span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> idx;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; nums.length &amp;&amp; nums[i] &lt;= val)</span><br><span class=\"line\">        ++i;</span><br><span class=\"line\">    swap(nums, i, idx-<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> idx1, <span class=\"type\">int</span> idx2)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> arr[idx1];</span><br><span class=\"line\">    arr[idx1] = arr[idx2];</span><br><span class=\"line\">    arr[idx2] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverse</span><span class=\"params\">(<span class=\"type\">int</span>[] arr, <span class=\"type\">int</span> start)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> arr.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (start &lt; end)</span><br><span class=\"line\">        swap(arr, start++, end--);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Search-in-Rotated-Sorted-Array\"><a href=\"#Search-in-Rotated-Sorted-Array\" class=\"headerlink\" title=\"Search in Rotated Sorted Array\"></a><a href=\"https://leetcode.com/problems/search-in-rotated-sorted-array/\">Search in Rotated Sorted Array</a><a name=\"search-in-rotated-sorted-array\"></a></h3><p>The idea is same as binary search except you need to keep track of which half to stay in. We compute the middle index and the value at that index. If the middle value is the target, then return that index. Otherwise, find the correct half. If the number on the left side is &lt; middle value then we know that between the left and middle index, values are increasing. We only need to now check if target is &lt; middle value, if so we need to adjust our right pointer otherwise adjust the left pointer. If left value is not &lt; middle value then we are at a shift where the array is pivoted. We again need to confirm now which half to take. There would be some index <code>i</code> such that <code>nums[left] &gt; nums[i] &lt; nums[mid]</code> and value are increasing upto <code>i</code> and shifts from index <code>i</code> onwards. In this case, we again need to adjust our index pointers and we repeat this loop until <code>left &lt;= right</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">search</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> target)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">left</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, right = nums.length-<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left &lt;= right) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (left + right)/<span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">midVal</span> <span class=\"operator\">=</span> nums[mid];</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target == midVal)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (nums[left] &lt;= midVal) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &lt; midVal &amp;&amp; target &gt;= nums[left])</span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                left = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (target &gt; midVal &amp;&amp; target &lt;= nums[right])</span><br><span class=\"line\">                left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">                right = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Transpose-Matrix\"><a href=\"#Transpose-Matrix\" class=\"headerlink\" title=\"Transpose Matrix\"></a><a href=\"https://leetcode.com/problems/transpose-matrix/\">Transpose Matrix</a><a name=\"transpose-matrix\"></a></h3><p>Pretty straightforward. Create matrix B of opposite dimensions to those of A. We maintain <code>br</code> and <code>bc</code> which tracks row and columns of B. We iterate over each element of A and put it in <code>B[br][bc]</code> and then ideally we would increment <code>bc</code> for an exact copy, but since we want transpose, we increment <code>br</code> and then reset it to 0 if we fill all the values in a row and increment column count, giving us the tranpose of the matrix.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span>[][] transpose(<span class=\"type\">int</span>[][] A) &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span>[][] B = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[A[<span class=\"number\">0</span>].length][A.length];</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">br</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>, bc = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; A.length; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; A[<span class=\"number\">0</span>].length; ++j) &#123;</span><br><span class=\"line\">            B[br][bc] = A[i][j];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (++br == B.length) &#123;</span><br><span class=\"line\">                br = <span class=\"number\">0</span>;</span><br><span class=\"line\">                ++bc;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> B;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Merge-K-Sorted-Lists\"><a href=\"#Merge-K-Sorted-Lists\" class=\"headerlink\" title=\"Merge K Sorted Lists\"></a><a href=\"https://leetcode.com/problems/merge-k-sorted-lists/submissions/\">Merge K Sorted Lists</a><a name=\"merge-k-sorted-lists\"></a></h3><p>This was an onsite interview question at ThousandEyes. The idea is simple. Basically, we have multiple sorted lists so we have access to one value at a time, that is head of the lists initially and the consecutive nodes. So we need to fetch the minimum element out of all of them in constant time. The easiest way for us to do this is to use a PriorityQueue and define the logic of comparision of two ListNodes. Then, we add all the nodes inside the PQ and build our resulting List. Fetch the minimum valued ListNode and add it to our list. Then we also need to update that particular list‚Äôs head, so we  add that list‚Äôs next in the PQ so the next time it is fetched, we fetch the correct node of the list. Repeat this until the list is empty and return dummy‚Äôs next node.</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> ListNode <span class=\"title function_\">mergeKLists</span><span class=\"params\">(ListNode[] lists)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lists.length == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    PriorityQueue&lt;ListNode&gt; pq = <span class=\"keyword\">new</span> <span class=\"title class_\">PriorityQueue</span>&lt;&gt;(lists.length, (n1, n2) -&gt; n1.val - n2.val);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (ListNode ln: lists)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ln != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            pq.add(ln);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pq.isEmpty())</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">node</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ListNode</span>(-<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">ListNode</span> <span class=\"variable\">ret</span> <span class=\"operator\">=</span> node;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!pq.isEmpty()) &#123;</span><br><span class=\"line\">        node.next = pq.poll();</span><br><span class=\"line\">        node = node.next;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (node.next != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            pq.add(node.next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret.next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/complete-computer-science-study-plan-to-become-a-software-engineer/",
            "url": "https://samirpaul.in/posts/complete-computer-science-study-plan-to-become-a-software-engineer/",
            "title": "Complete Computer Science Study Plan to Become a Software Engineer",
            "date_published": "2023-08-15T04:24:52.000Z",
            "content_html": "<h2 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents\"></a>Table of Contents</h2><h3 id=\"The-Study-Plan\"><a href=\"#The-Study-Plan\" class=\"headerlink\" title=\"The Study Plan\"></a>The Study Plan</h3><ul>\n<li><a href=\"#\">What is it?</a></li>\n<li><a href=\"#why-use-it\">Why use it?</a></li>\n<li><a href=\"#how-to-use-it\">How to use it</a></li>\n<li><a href=\"#dont-feel-you-arent-smart-enough\">Don‚Äôt feel you aren‚Äôt smart enough</a></li>\n<li><a href=\"#a-note-about-video-resources\">A Note About Video Resources</a></li>\n<li><a href=\"#choose-a-programming-language\">Choose a Programming Language</a></li>\n<li><a href=\"#books-for-data-structures-and-algorithms\">Books for Data Structures and Algorithms</a></li>\n<li><a href=\"#interview-prep-books\">Interview Prep Books</a></li>\n<li><a href=\"#dont-make-my-mistakes\">Don‚Äôt Make My Mistakes</a></li>\n<li><a href=\"#what-you-wont-see-covered\">What you Won‚Äôt See Covered</a></li>\n<li><a href=\"#the-daily-plan\">The Daily Plan</a></li>\n<li><a href=\"#coding-question-practice\">Coding Question Practice</a></li>\n<li><a href=\"#coding-problems\">Coding Problems</a></li>\n</ul>\n<h3 id=\"Topics-of-Study\"><a href=\"#Topics-of-Study\" class=\"headerlink\" title=\"Topics of Study\"></a>Topics of Study</h3><ul>\n<li><a href=\"#algorithmic-complexity--big-o--asymptotic-analysis\">Algorithmic complexity &#x2F; Big-O &#x2F; Asymptotic analysis</a></li>\n<li><a href=\"#data-structures\">Data Structures</a><ul>\n<li><a href=\"#arrays\">Arrays</a></li>\n<li><a href=\"#linked-lists\">Linked Lists</a></li>\n<li><a href=\"#stack\">Stack</a></li>\n<li><a href=\"#queue\">Queue</a></li>\n<li><a href=\"#hash-table\">Hash table</a></li>\n</ul>\n</li>\n<li><a href=\"#more-knowledge\">More Knowledge</a><ul>\n<li><a href=\"#binary-search\">Binary search</a></li>\n<li><a href=\"#bitwise-operations\">Bitwise operations</a></li>\n</ul>\n</li>\n<li><a href=\"#trees\">Trees</a><ul>\n<li><a href=\"#trees---intro\">Trees - Intro</a></li>\n<li><a href=\"#binary-search-trees-bsts\">Binary search trees: BSTs</a></li>\n<li><a href=\"#heap--priority-queue--binary-heap\">Heap &#x2F; Priority Queue &#x2F; Binary Heap</a></li>\n<li>balanced search trees (general concept, not details)</li>\n<li>traversals: preorder, inorder, postorder, BFS, DFS</li>\n</ul>\n</li>\n<li><a href=\"#sorting\">Sorting</a><ul>\n<li>selection</li>\n<li>insertion</li>\n<li>heapsort</li>\n<li>quicksort</li>\n<li>merge sort</li>\n</ul>\n</li>\n<li><a href=\"#graphs\">Graphs</a><ul>\n<li>directed</li>\n<li>undirected</li>\n<li>adjacency matrix</li>\n<li>adjacency list</li>\n<li>traversals: BFS, DFS</li>\n</ul>\n</li>\n<li><a href=\"#even-more-knowledge\">Even More Knowledge</a><ul>\n<li><a href=\"#recursion\">Recursion</a></li>\n<li><a href=\"#dynamic-programming\">Dynamic Programming</a></li>\n<li><a href=\"#design-patterns\">Design Patterns</a></li>\n<li><a href=\"#combinatorics-n-choose-k--probability\">Combinatorics (n choose k) &amp; Probability</a></li>\n<li><a href=\"#np-np-complete-and-approximation-algorithms\">NP, NP-Complete and Approximation Algorithms</a></li>\n<li><a href=\"#how-computers-process-a-program\">How computers process a program</a></li>\n<li><a href=\"#caches\">Caches</a></li>\n<li><a href=\"#processes-and-threads\">Processes and Threads</a></li>\n<li><a href=\"#testing\">Testing</a></li>\n<li><a href=\"#string-searching--manipulations\">String searching &amp; manipulations</a></li>\n<li><a href=\"#tries\">Tries</a></li>\n<li><a href=\"#floating-point-numbers\">Floating Point Numbers</a></li>\n<li><a href=\"#unicode\">Unicode</a></li>\n<li><a href=\"#endianness\">Endianness</a></li>\n<li><a href=\"#networking\">Networking</a></li>\n</ul>\n</li>\n<li><a href=\"#final-review\">Final Review</a></li>\n</ul>\n<h3 id=\"Getting-the-Job\"><a href=\"#Getting-the-Job\" class=\"headerlink\" title=\"Getting the Job\"></a>Getting the Job</h3><ul>\n<li><a href=\"#update-your-resume\">Update Your Resume</a></li>\n<li><a href=\"#find-a-job\">Find a Job</a></li>\n<li><a href=\"#interview-process--general-interview-prep\">Interview Process &amp; General Interview Prep</a></li>\n<li><a href=\"#be-thinking-of-for-when-the-interview-comes\">Be thinking of for when the interview comes</a></li>\n<li><a href=\"#have-questions-for-the-interviewer\">Have questions for the interviewer</a></li>\n<li><a href=\"#once-youve-got-the-job\">Once You‚Äôve Got The Job</a></li>\n</ul>\n<p><strong>‚Äî‚Äî‚Äî‚Äî‚Äî- Everything below this point is optional ‚Äî‚Äî‚Äî‚Äî‚Äî-</strong></p>\n<h3 id=\"Optional-Extra-Topics-Resources\"><a href=\"#Optional-Extra-Topics-Resources\" class=\"headerlink\" title=\"Optional Extra Topics &amp; Resources\"></a>Optional Extra Topics &amp; Resources</h3><ul>\n<li><a href=\"#additional-books\">Additional Books</a></li>\n<li><a href=\"#system-design-scalability-data-handling\">System Design, Scalability, Data Handling</a> (if you have 4+ years experience)</li>\n<li><a href=\"#additional-learning\">Additional Learning</a><ul>\n<li><a href=\"#compilers\">Compilers</a></li>\n<li><a href=\"#emacs-and-vim\">Emacs and vi(m)</a></li>\n<li><a href=\"#unix-command-line-tools\">Unix command line tools</a></li>\n<li><a href=\"#information-theory-videos\">Information theory</a></li>\n<li><a href=\"#parity--hamming-code-videos\">Parity &amp; Hamming Code</a></li>\n<li><a href=\"#entropy\">Entropy</a></li>\n<li><a href=\"#cryptography\">Cryptography</a></li>\n<li><a href=\"#compression\">Compression</a></li>\n<li><a href=\"#computer-security\">Computer Security</a></li>\n<li><a href=\"#garbage-collection\">Garbage collection</a></li>\n<li><a href=\"#parallel-programming\">Parallel Programming</a></li>\n<li><a href=\"#messaging-serialization-and-queueing-systems\">Messaging, Serialization, and Queueing Systems</a></li>\n<li><a href=\"#a\">A*</a></li>\n<li><a href=\"#fast-fourier-transform\">Fast Fourier Transform</a></li>\n<li><a href=\"#bloom-filter\">Bloom Filter</a></li>\n<li><a href=\"#hyperloglog\">HyperLogLog</a></li>\n<li><a href=\"#locality-sensitive-hashing\">Locality-Sensitive Hashing</a></li>\n<li><a href=\"#van-emde-boas-trees\">van Emde Boas Trees</a></li>\n<li><a href=\"#augmented-data-structures\">Augmented Data Structures</a></li>\n<li><a href=\"#balanced-search-trees\">Balanced search trees</a><ul>\n<li>AVL trees</li>\n<li>Splay trees</li>\n<li>Red&#x2F;black trees</li>\n<li>2-3 search trees</li>\n<li>2-3-4 Trees (aka 2-4 trees)</li>\n<li>N-ary (K-ary, M-ary) trees</li>\n<li>B-Trees</li>\n</ul>\n</li>\n<li><a href=\"#k-d-trees\">k-D Trees</a></li>\n<li><a href=\"#skip-lists\">Skip lists</a></li>\n<li><a href=\"#network-flows\">Network Flows</a></li>\n<li><a href=\"#disjoint-sets--union-find\">Disjoint Sets &amp; Union Find</a></li>\n<li><a href=\"#math-for-fast-processing\">Math for Fast Processing</a></li>\n<li><a href=\"#treap\">Treap</a></li>\n<li><a href=\"#linear-programming-videos\">Linear Programming</a></li>\n<li><a href=\"#geometry-convex-hull-videos\">Geometry, Convex hull</a></li>\n<li><a href=\"#discrete-math\">Discrete math</a></li>\n</ul>\n</li>\n<li><a href=\"#additional-detail-on-some-subjects\">Additional Detail on Some Subjects</a></li>\n<li><a href=\"#video-series\">Video Series</a></li>\n<li><a href=\"#computer-science-courses\">Computer Science Courses</a></li>\n<li><a href=\"#papers\">Papers</a></li>\n</ul>\n<hr>\n<h2 id=\"Why-use-it\"><a href=\"#Why-use-it\" class=\"headerlink\" title=\"Why use it?\"></a>Why use it?</h2><p>If you want to work as a software engineer for a large company, these are the things you have to know.</p>\n<p>If you missed out on getting a degree in computer science, like I did, this will catch you up and save four years of your life.</p>\n<p>When I started this project, I didn‚Äôt know a stack from a heap, didn‚Äôt know Big-O anything, or anything about trees, or how to<br>traverse a graph. If I had to code a sorting algorithm, I can tell ya it would have been terrible.<br>Every data structure I had ever used was built into the language, and I didn‚Äôt know how they worked<br>under the hood at all. I never had to manage memory unless a process I was running would give an ‚Äúout of<br>memory‚Äù error, and then I‚Äôd have to find a workaround. I used a few multidimensional arrays in my life and<br>thousands of associative arrays, but I never created data structures from scratch.</p>\n<p>It‚Äôs a long plan. It may take you months. If you are familiar with a lot of this already it will take you a lot less time.</p>\n<h2 id=\"How-to-use-it\"><a href=\"#How-to-use-it\" class=\"headerlink\" title=\"How to use it\"></a>How to use it</h2><p>Everything below is an outline, and you should tackle the items in order from top to bottom.</p>\n<p>I‚Äôm using GitHub‚Äôs special markdown flavor, including tasks lists to track progress.</p>\n<ul>\n<li><a href=\"https://guides.github.com/features/mastering-markdown/#GitHub-flavored-markdown\">More about GitHub-flavored markdown</a></li>\n</ul>\n<h3 id=\"If-you-don‚Äôt-want-to-use-git\"><a href=\"#If-you-don‚Äôt-want-to-use-git\" class=\"headerlink\" title=\"If you don‚Äôt want to use git\"></a>If you don‚Äôt want to use git</h3><p>On this page, click the Code button near the top, then click ‚ÄúDownload ZIP‚Äù. Unzip the file and you can work with the text files.</p>\n<p>If you‚Äôre open in a code editor that understands markdown, you‚Äôll see everything formatted nicely.</p>\n<p><img src=\"https://d3j2pkmjtin6ou.cloudfront.net/how-to-download-as-zip.png\" alt=\"How to download the repo as a zip file\"></p>\n<h3 id=\"If-you‚Äôre-comfortable-with-git\"><a href=\"#If-you‚Äôre-comfortable-with-git\" class=\"headerlink\" title=\"If you‚Äôre comfortable with git\"></a>If you‚Äôre comfortable with git</h3><p>Create a new branch so you can check items like this, just put an x in the brackets: [x]</p>\n<ol>\n<li><p><em><strong>Fork the GitHub repo:</strong></em> <code>https://github.com/jwasham/coding-interview-university</code> by clicking on the Fork button.</p>\n<p> <img src=\"https://d3j2pkmjtin6ou.cloudfront.net/fork-button.png\" alt=\"Fork the GitHub repo\"></p>\n</li>\n<li><p>Clone to your local repo:</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:&lt;your_github_username&gt;/coding-interview-university.git</span><br><span class=\"line\">cd coding-interview-university</span><br><span class=\"line\">git checkout -b progress</span><br><span class=\"line\">git remote add jwasham https://github.com/jwasham/coding-interview-university</span><br><span class=\"line\">git fetch --all</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Mark all boxes with X after you completed your changes:</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;Marked x&quot;</span><br><span class=\"line\">git rebase jwasham/main</span><br><span class=\"line\">git push --set-upstream origin progress</span><br><span class=\"line\">git push --force</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Don‚Äôt-feel-you-aren‚Äôt-smart-enough\"><a href=\"#Don‚Äôt-feel-you-aren‚Äôt-smart-enough\" class=\"headerlink\" title=\"Don‚Äôt feel you aren‚Äôt smart enough\"></a>Don‚Äôt feel you aren‚Äôt smart enough</h2><ul>\n<li>Successful software engineers are smart, but many have an insecurity that they aren‚Äôt smart enough.</li>\n<li>Following videos may help you overcome this insecurity:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=0SARbwvhupQ\">The myth of the Genius Programmer</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=1i8ylq4j_EY\">It‚Äôs Dangerous to Go Alone: Battling the Invisible Monsters in Tech</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"A-Note-About-Video-Resources\"><a href=\"#A-Note-About-Video-Resources\" class=\"headerlink\" title=\"A Note About Video Resources\"></a>A Note About Video Resources</h2><p>Some videos are available only by enrolling in a Coursera or EdX class. These are called MOOCs.<br>Sometimes the classes are not in session so you have to wait a couple of months, so you have no access.</p>\n<p>It would be great to replace the online course resources with free and always-available public sources,<br>such as YouTube videos (preferably university lectures), so that you people can study these anytime,<br>not just when a specific online course is in session.</p>\n<h2 id=\"Choose-a-Programming-Language\"><a href=\"#Choose-a-Programming-Language\" class=\"headerlink\" title=\"Choose a Programming Language\"></a>Choose a Programming Language</h2><p>You‚Äôll need to choose a programming language for the coding interviews you do,<br>but you‚Äôll also need to find a language that you can use to study computer science concepts.</p>\n<p>Preferably the language would be the same, so that you only need to be proficient in one.</p>\n<h3 id=\"For-this-Study-Plan\"><a href=\"#For-this-Study-Plan\" class=\"headerlink\" title=\"For this Study Plan\"></a>For this Study Plan</h3><p>When I did the study plan, I used 2 languages for most of it: C and Python</p>\n<ul>\n<li>C: Very low level. Allows you to deal with pointers and memory allocation&#x2F;deallocation, so you feel the data structures<br>  and algorithms in your bones. In higher level languages like Python or Java, these are hidden from you. In day to day work, that‚Äôs terrific,<br>  but when you‚Äôre learning how these low-level data structures are built, it‚Äôs great to feel close to the metal.<ul>\n<li>C is everywhere. You‚Äôll see examples in books, lectures, videos, <em>everywhere</em> while you‚Äôre studying.</li>\n<li><a href=\"https://www.amazon.com/Programming-Language-Brian-W-Kernighan/dp/0131103628\">The C Programming Language, Vol 2</a><ul>\n<li>This is a short book, but it will give you a great handle on the C language and if you practice it a little<br>  you‚Äôll quickly get proficient. Understanding C helps you understand how programs and memory work.</li>\n<li>You don‚Äôt need to go super deep in the book (or even finish it). Just get to where you‚Äôre comfortable reading and writing in C.</li>\n<li><a href=\"https://github.com/lekkas/c-algorithms\">Answers to questions in the book</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Python: Modern and very expressive, I learned it because it‚Äôs just super useful and also allows me to write less code in an interview.</li>\n</ul>\n<p>This is my preference. You do what you like, of course.</p>\n<p>You may not need it, but here are some sites for learning a new language:</p>\n<ul>\n<li><a href=\"https://exercism.org/tracks\">Exercism</a></li>\n<li><a href=\"http://www.codewars.com/\">Codewars</a></li>\n<li><a href=\"https://www.hackerearth.com/for-developers/\">HackerEarth</a></li>\n<li><a href=\"https://www.scaler.com/topics/\">Scaler Topics (Java, C++)</a></li>\n</ul>\n<h3 id=\"For-your-Coding-Interview\"><a href=\"#For-your-Coding-Interview\" class=\"headerlink\" title=\"For your Coding Interview\"></a>For your Coding Interview</h3><p>You can use a language you are comfortable in to do the coding part of the interview, but for large companies, these are solid choices:</p>\n<ul>\n<li>C++</li>\n<li>Java</li>\n<li>Python</li>\n</ul>\n<p>You could also use these, but read around first. There may be caveats:</p>\n<ul>\n<li>JavaScript</li>\n<li>Ruby</li>\n</ul>\n<p>Here is an article I wrote about choosing a language for the interview:<br><a href=\"https://startupnextdoor.com/important-pick-one-language-for-the-coding-interview/\">Pick One Language for the Coding Interview</a>.<br>This is the original article my post was based on: <a href=\"https://web.archive.org/web/20210516054124/http://blog.codingforinterviews.com/best-programming-language-jobs/\">Choosing a Programming Language for Interviews</a></p>\n<p>You need to be very comfortable in the language and be knowledgeable.</p>\n<p>Read more about choices: </p>\n<ul>\n<li><a href=\"http://www.byte-by-byte.com/choose-the-right-language-for-your-coding-interview/\">Choose the Right Language for Your Coding Interview</a></li>\n</ul>\n<h2 id=\"Books-for-Data-Structures-and-Algorithms\"><a href=\"#Books-for-Data-Structures-and-Algorithms\" class=\"headerlink\" title=\"Books for Data Structures and Algorithms\"></a>Books for Data Structures and Algorithms</h2><p>This book will form your foundation for computer science.</p>\n<p>Just choose one, in a language that you will be comfortable with. You‚Äôll be doing a lot of reading and coding.</p>\n<h3 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h3><ul>\n<li><a href=\"https://www.amazon.com/Algorithms-Parts-1-5-Bundle-Fundamentals/dp/0201756080\">Algorithms in C, Parts 1-5 (Bundle), 3rd Edition</a><ul>\n<li>Fundamentals, Data Structures, Sorting, Searching, and Graph Algorithms</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h3><ul>\n<li><a href=\"https://www.amazon.com/Structures-Algorithms-Python-Michael-Goodrich/dp/1118290275/\">Data Structures and Algorithms in Python</a><ul>\n<li>by Goodrich, Tamassia, Goldwasser</li>\n<li>I loved this book. It covered everything and more.</li>\n<li>Pythonic code</li>\n<li>my glowing book report: <a href=\"https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/\">https://startupnextdoor.com/book-report-data-structures-and-algorithms-in-python/</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h3><p>Your choice:</p>\n<ul>\n<li>Goodrich, Tamassia, Goldwasser<ul>\n<li><a href=\"https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/1118771338/\">Data Structures and Algorithms in Java</a></li>\n</ul>\n</li>\n<li>Sedgewick and Wayne:<ul>\n<li><a href=\"https://www.amazon.com/Algorithms-4th-Robert-Sedgewick/dp/032157351X/\">Algorithms</a></li>\n<li>Free Coursera course that covers the book (taught by the authors!):<ul>\n<li><a href=\"https://www.coursera.org/learn/algorithms-part1\">Algorithms I</a></li>\n<li><a href=\"https://www.coursera.org/learn/algorithms-part2\">Algorithms II</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"C-1\"><a href=\"#C-1\" class=\"headerlink\" title=\"C++\"></a>C++</h3><p>Your choice:</p>\n<ul>\n<li>Goodrich, Tamassia, and Mount<ul>\n<li><a href=\"https://www.amazon.com/Data-Structures-Algorithms-Michael-Goodrich/dp/0470383275\">Data Structures and Algorithms in C++, 2nd Edition</a></li>\n</ul>\n</li>\n<li>Sedgewick and Wayne<ul>\n<li><a href=\"https://www.amazon.com/Algorithms-Parts-1-4-Fundamentals-Structure/dp/0201350882/\">Algorithms in C++, Parts 1-4: Fundamentals, Data Structure, Sorting, Searching</a></li>\n<li><a href=\"https://www.amazon.com/Algorithms-Part-Graph-3rd-Pt-5/dp/0201361183/\">Algorithms in C++ Part 5: Graph Algorithms</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Interview-Prep-Books\"><a href=\"#Interview-Prep-Books\" class=\"headerlink\" title=\"Interview Prep Books\"></a>Interview Prep Books</h2><p>You don‚Äôt need to buy a bunch of these. Honestly ‚ÄúCracking the Coding Interview‚Äù is probably enough,<br>but I bought more to give myself more practice. But I always do too much.</p>\n<p>I bought both of these. They gave me plenty of practice.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Programming-Interviews-Exposed-Through-Interview/dp/111941847X/\">Programming Interviews Exposed: Coding Your Way Through the Interview, 4th Edition</a><ul>\n<li>Answers in C++ and Java</li>\n<li>This is a good warm-up for Cracking the Coding Interview</li>\n<li>Not too difficult. Most problems may be easier than what you‚Äôll see in an interview (from what I‚Äôve read)</li>\n</ul>\n</li>\n<li><a href=\"http://www.amazon.com/Cracking-Coding-Interview-6th-Programming/dp/0984782850/\">Cracking the Coding Interview, 6th Edition</a><ul>\n<li>answers in Java</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"If-you-have-tons-of-extra-time\"><a href=\"#If-you-have-tons-of-extra-time\" class=\"headerlink\" title=\"If you have tons of extra time:\"></a>If you have tons of extra time:</h3><p>Choose one:</p>\n<ul>\n<li><a href=\"https://www.amazon.com/Elements-Programming-Interviews-Insiders-Guide/dp/1479274836\">Elements of Programming Interviews (C++ version)</a></li>\n<li><a href=\"https://www.amazon.com/Elements-Programming-Interviews-Python-Insiders/dp/1537713949/\">Elements of Programming Interviews in Python</a></li>\n<li><a href=\"https://www.amazon.com/Elements-Programming-Interviews-Java-Insiders/dp/1517435803/\">Elements of Programming Interviews (Java version)</a><br>  - <a href=\"https://github.com/gardncl/elements-of-programming-interviews\">Companion Project - Method Stub and Test Cases for Every Problem in the Book</a></li>\n</ul>\n<h2 id=\"Don‚Äôt-Make-My-Mistakes\"><a href=\"#Don‚Äôt-Make-My-Mistakes\" class=\"headerlink\" title=\"Don‚Äôt Make My Mistakes\"></a>Don‚Äôt Make My Mistakes</h2><p>This list grew over many months, and yes, it got out of hand.</p>\n<p>Here are some mistakes I made so you‚Äôll have a better experience. And you‚Äôll save months of time.</p>\n<h3 id=\"1-You-Won‚Äôt-Remember-it-All\"><a href=\"#1-You-Won‚Äôt-Remember-it-All\" class=\"headerlink\" title=\"1. You Won‚Äôt Remember it All\"></a>1. You Won‚Äôt Remember it All</h3><p>I watched hours of videos and took copious notes, and months later there was much I didn‚Äôt remember. I spent 3 days going<br>through my notes and making flashcards, so I could review. I didn‚Äôt need all of that knowledge.</p>\n<p>Please, read so you won‚Äôt make my mistakes:</p>\n<p><a href=\"https://startupnextdoor.com/retaining-computer-science-knowledge/\">Retaining Computer Science Knowledge</a>.</p>\n<h3 id=\"2-Use-Flashcards\"><a href=\"#2-Use-Flashcards\" class=\"headerlink\" title=\"2. Use Flashcards\"></a>2. Use Flashcards</h3><p>To solve the problem, I made a little flashcards site where I could add flashcards of 2 types: general and code.<br>Each card has different formatting. I made a mobile-first website, so I could review on my phone or tablet, wherever I am.</p>\n<p>Make your own for free:</p>\n<ul>\n<li><a href=\"https://github.com/jwasham/computer-science-flash-cards\">Flashcards site repo</a></li>\n</ul>\n<p><strong>I DON‚ÄôT RECOMMEND using my flashcards.</strong> There are too many and most of them are trivia that you don‚Äôt need.</p>\n<p>But if you don‚Äôt want to listen to me, here you go:</p>\n<ul>\n<li><a href=\"https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham.db\">My flash cards database (1200 cards)</a>:</li>\n<li><a href=\"https://github.com/jwasham/computer-science-flash-cards/blob/main/cards-jwasham-extreme.db\">My flash cards database (extreme - 1800 cards)</a>:</li>\n</ul>\n<p>Keep in mind I went overboard and have cards covering everything from assembly language and Python trivia to machine learning and statistics.<br>It‚Äôs way too much for what‚Äôs required.</p>\n<p><strong>Note on flashcards:</strong> The first time you recognize you know the answer, don‚Äôt mark it as known. You have to see the<br>same card and answer it several times correctly before you really know it. Repetition will put that knowledge deeper in<br>your brain.</p>\n<p>An alternative to using my flashcard site is <a href=\"http://ankisrs.net/\">Anki</a>, which has been recommended to me numerous times.<br>It uses a repetition system to help you remember. It‚Äôs user-friendly, available on all platforms and has a cloud sync system.<br>It costs $25 on iOS but is free on other platforms.</p>\n<p>My flashcard database in Anki format: <a href=\"https://ankiweb.net/shared/info/25173560\">https://ankiweb.net/shared/info/25173560</a> (thanks <a href=\"https://github.com/xiewenya\">@xiewenya</a>).</p>\n<p>Some students have mentioned formatting issues with white space that can be fixed by doing the following: open deck, edit card, click cards, select the ‚Äústyling‚Äù radio button, add the member ‚Äúwhite-space: pre;‚Äù to the card class.</p>\n<h3 id=\"3-Do-Coding-Interview-Questions-While-You‚Äôre-Learning\"><a href=\"#3-Do-Coding-Interview-Questions-While-You‚Äôre-Learning\" class=\"headerlink\" title=\"3. Do Coding Interview Questions While You‚Äôre Learning\"></a>3. Do Coding Interview Questions While You‚Äôre Learning</h3><p>THIS IS VERY IMPORTANT.</p>\n<p>Start doing coding interview questions while you‚Äôre learning data structures and algorithms.</p>\n<p>You need to apply what you‚Äôre learning to solving problems, or you‚Äôll forget. I made this mistake. </p>\n<p>Once you‚Äôve learned a topic, and feel somewhat comfortable with it, for example, <strong>linked lists</strong>:</p>\n<ol>\n<li>Open one of the <a href=\"#interview-prep-books\">coding interview books</a> (or coding problem websites, listed below) </li>\n<li>Do 2 or 3 questions regarding linked lists. </li>\n<li>Move on to the next learning topic.</li>\n<li>Later, go back and do another 2 or 3 linked list problems.</li>\n<li>Do this with each new topic you learn.</li>\n</ol>\n<p><strong>Keep doing problems while you‚Äôre learning all this stuff, not after.</strong></p>\n<p>You‚Äôre not being hired for knowledge, but how you apply the knowledge.</p>\n<p>There are many resources for this, listed below. Keep going.</p>\n<h3 id=\"4-Focus\"><a href=\"#4-Focus\" class=\"headerlink\" title=\"4. Focus\"></a>4. Focus</h3><p>There are a lot of distractions that can take up valuable time. Focus and concentration are hard. Turn on some music<br>without lyrics and you‚Äôll be able to focus pretty well.</p>\n<h2 id=\"What-you-won‚Äôt-see-covered\"><a href=\"#What-you-won‚Äôt-see-covered\" class=\"headerlink\" title=\"What you won‚Äôt see covered\"></a>What you won‚Äôt see covered</h2><p>These are prevalent technologies but not part of this study plan:</p>\n<ul>\n<li>SQL</li>\n<li>Javascript</li>\n<li>HTML, CSS, and other front-end technologies</li>\n</ul>\n<h2 id=\"The-Daily-Plan\"><a href=\"#The-Daily-Plan\" class=\"headerlink\" title=\"The Daily Plan\"></a>The Daily Plan</h2><p>This course goes over a lot of subjects. Each will probably take you a few days, or maybe even a week or more. It depends on your schedule.</p>\n<p>Each day, take the next subject in the list, watch some videos about that subject, and then write an implementation<br>of that data structure or algorithm in the language you chose for this course.</p>\n<p>You can see my code here:</p>\n<ul>\n<li><a href=\"https://github.com/jwasham/practice-c\">C</a></li>\n<li><a href=\"https://github.com/jwasham/practice-cpp\">C++</a></li>\n<li><a href=\"https://github.com/jwasham/practice-python\">Python</a></li>\n</ul>\n<p>You don‚Äôt need to memorize every algorithm. You just need to be able to understand it enough to be able to write your own implementation.</p>\n<h2 id=\"Coding-Question-Practice\"><a href=\"#Coding-Question-Practice\" class=\"headerlink\" title=\"Coding Question Practice\"></a>Coding Question Practice</h2><p>ü§î Why is this here? I‚Äôm not ready to interview.</p>\n<p><a href=\"#3-do-coding-interview-questions-while-youre-learning\">Then go back and read this.</a></p>\n<p>Why you need to practice doing programming problems:</p>\n<ul>\n<li>Problem recognition, and where the right data structures and algorithms fit in</li>\n<li>Gathering requirements for the problem</li>\n<li>Talking your way through the problem like you will in the interview</li>\n<li>Coding on a whiteboard or paper, not a computer</li>\n<li>Coming up with time and space complexity for your solutions (see Big-O below)</li>\n<li>Testing your solutions</li>\n</ul>\n<p>There is a great intro for methodical, communicative problem solving in an interview. You‚Äôll get this from the programming<br>interview books, too, but I found this outstanding:<br><a href=\"http://www.hiredintech.com/algorithm-design/\">Algorithm design canvas</a></p>\n<p>Write code on a whiteboard or paper, not a computer. Test with some sample inputs. Then type it and test it out on a computer.</p>\n<p>If you don‚Äôt have a whiteboard at home, pick up a large drawing pad from an art store. You can sit on the couch and practice.<br>This is my ‚Äúsofa whiteboard‚Äù. I added the pen in the photo just for scale. If you use a pen, you‚Äôll wish you could erase.<br>Gets messy quick. <strong>I use a pencil and eraser.</strong></p>\n<p><img src=\"https://d3j2pkmjtin6ou.cloudfront.net/art_board_sm_2.jpg\" alt=\"my sofa whiteboard\"></p>\n<p><strong>Coding question practice is not about memorizing answers to programming problems.</strong></p>\n<h2 id=\"Coding-Problems\"><a href=\"#Coding-Problems\" class=\"headerlink\" title=\"Coding Problems\"></a>Coding Problems</h2><p>Don‚Äôt forget your key coding interview books <a href=\"#interview-prep-books\">here</a>.</p>\n<p>Solving Problems:</p>\n<ul>\n<li><a href=\"https://www.topcoder.com/thrive/articles/How%20To%20Find%20a%20Solution\">How to Find a Solution</a></li>\n<li><a href=\"https://www.topcoder.com/thrive/articles/How%20To%20Dissect%20a%20Topcoder%20Problem%20Statement%20Content\">How to Dissect a Topcoder Problem Statement</a></li>\n</ul>\n<p>Coding Interview Question Videos:</p>\n<ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PLamzFoFxwoNjPfxzaWqs7cZGsPYy0x_gI\">IDeserve (88 videos)</a></li>\n<li><a href=\"https://www.youtube.com/user/tusharroy2525/playlists?shelf_id=2&view=50&sort=dd\">Tushar Roy (5 playlists)</a><ul>\n<li>Super for walkthroughs of problem solutions</li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLU_sdQYzUj2keVENTP0a5rdykRSgg9Wp-\">Nick White - LeetCode Solutions (187 Videos)</a><ul>\n<li>Good explanations of solution and the code</li>\n<li>You can watch several in a short time</li>\n</ul>\n</li>\n<li><a href=\"https://youtube.com/FisherCoder\">FisherCoder - LeetCode Solutions</a></li>\n</ul>\n<p>Challenge&#x2F;Practice sites:</p>\n<ul>\n<li><a href=\"https://leetcode.com/\">LeetCode</a><ul>\n<li>My favorite coding problem site. It‚Äôs worth the subscription money for the 1-2 months you‚Äôll likely be preparing.</li>\n<li>See Nick White and FisherCoder Videos above for code walk-throughs.</li>\n</ul>\n</li>\n<li><a href=\"https://www.hackerrank.com/\">HackerRank</a></li>\n<li><a href=\"https://www.topcoder.com/\">TopCoder</a></li>\n<li><a href=\"https://codeforces.com/\">Codeforces</a></li>\n<li><a href=\"https://codility.com/programmers/\">Codility</a></li>\n<li><a href=\"https://practice.geeksforgeeks.org/explore/?page=1\">Geeks for Geeks</a></li>\n<li><a href=\"https://www.interviewbit.com/\">InterviewBit</a></li>\n<li><a href=\"https://www.algoexpert.io/product\">AlgoExpert</a><ul>\n<li>Created by Google engineers, this is also an excellent resource to hone your skills.</li>\n</ul>\n</li>\n<li><a href=\"https://projecteuler.net/\">Project Euler</a><ul>\n<li>very math focused, and not really suited for coding interviews</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Let‚Äôs-Get-Started\"><a href=\"#Let‚Äôs-Get-Started\" class=\"headerlink\" title=\"Let‚Äôs Get Started\"></a>Let‚Äôs Get Started</h2><p>Alright, enough talk, let‚Äôs learn!</p>\n<p>But don‚Äôt forget to do coding problems from above while you learn!</p>\n<h2 id=\"Algorithmic-complexity-Big-O-Asymptotic-analysis\"><a href=\"#Algorithmic-complexity-Big-O-Asymptotic-analysis\" class=\"headerlink\" title=\"Algorithmic complexity &#x2F; Big-O &#x2F; Asymptotic analysis\"></a>Algorithmic complexity &#x2F; Big-O &#x2F; Asymptotic analysis</h2><ul>\n<li>Nothing to implement here, you‚Äôre just watching videos and taking notes! Yay!</li>\n<li>There are a lot of videos here. Just watch enough until you understand it. You can always come back and review.</li>\n<li>Don‚Äôt worry if you don‚Äôt understand all the math behind it.</li>\n<li>You just need to understand how to express the complexity of an algorithm in terms of Big-O.</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=iOq5kSKqeR4\">Harvard CS50 - Asymptotic Notation (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=V6mKVRU1evU\">Big O Notations (general quick tutorial) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ei-A_wy5Yxw&index=2&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN\">Big O Notation (and Omega and Theta) - best mathematical explanation (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=z1mkCe3kVUA\">Skiena (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_VIS4YDpuP98\">UC Berkeley Big O (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=B3SpQZaAZP4&index=10&list=PL1BaGV1cIH4UhkL8a9bJGG356covJ76qN\">Amortized Analysis (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> TopCoder (includes recurrence relations and master theorem):<ul>\n<li><a href=\"https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20one\">Computational Complexity: Section 1</a></li>\n<li><a href=\"https://www.topcoder.com/thrive/articles/Computational%20Complexity%20part%20two\">Computational Complexity: Section 2</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://bigocheatsheet.com/\">Cheat sheet</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/__vX2sjlpXU\">[Review] Big-O notation in 5 minutes (video)</a></li>\n</ul>\n<p>Well, that‚Äôs about enough of that. </p>\n<p>When you go through ‚ÄúCracking the Coding Interview‚Äù, there is a chapter on this, and at the end there is a quiz to see<br>if you can identify the runtime complexity of different algorithms. It‚Äôs a super review and test.</p>\n<h2 id=\"Data-Structures\"><a href=\"#Data-Structures\" class=\"headerlink\" title=\"Data Structures\"></a>Data Structures</h2><ul>\n<li><h3 id=\"Arrays\"><a href=\"#Arrays\" class=\"headerlink\" title=\"Arrays\"></a>Arrays</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> About Arrays:<ul>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/arrays-OsBSF\">Arrays (video)</a></li>\n<li><a href=\"https://archive.org/details/ucberkeley_webcast_Wp8oiO_CZZE\">UC Berkeley CS61B - Linear and Multi-Dim Arrays (video)</a> (Start watching from 15m 32s)</li>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/dynamic-arrays-EwbnV\">Dynamic Arrays (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=1jtrQqYpt7g\">Jagged Arrays (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement a vector (mutable array with automatic resizing):<ul>\n<li><input disabled=\"\" type=\"checkbox\"> Practice coding using arrays and pointers, and pointer math to jump to an index instead of using indexing.</li>\n<li><input disabled=\"\" type=\"checkbox\"> New raw data array with allocated memory<ul>\n<li>can allocate int array under the hood, just not use its features</li>\n<li>start with 16, or if starting number is greater, use power of 2 - 16, 32, 64, 128</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> size() - number of items</li>\n<li><input disabled=\"\" type=\"checkbox\"> capacity() - number of items it can hold</li>\n<li><input disabled=\"\" type=\"checkbox\"> is_empty()</li>\n<li><input disabled=\"\" type=\"checkbox\"> at(index) - returns item at given index, blows up if index out of bounds</li>\n<li><input disabled=\"\" type=\"checkbox\"> push(item)</li>\n<li><input disabled=\"\" type=\"checkbox\"> insert(index, item) - inserts item at index, shifts that index‚Äôs value and trailing elements to the right</li>\n<li><input disabled=\"\" type=\"checkbox\"> prepend(item) - can use insert above at index 0</li>\n<li><input disabled=\"\" type=\"checkbox\"> pop() - remove from end, return value</li>\n<li><input disabled=\"\" type=\"checkbox\"> delete(index) - delete item at index, shifting all trailing elements left</li>\n<li><input disabled=\"\" type=\"checkbox\"> remove(item) - looks for value and removes index holding it (even if in multiple places)</li>\n<li><input disabled=\"\" type=\"checkbox\"> find(item) - looks for value and returns first index with that value, -1 if not found</li>\n<li><input disabled=\"\" type=\"checkbox\"> resize(new_capacity) &#x2F;&#x2F; private function<ul>\n<li>when you reach capacity, resize to double the size</li>\n<li>when popping an item, if size is 1&#x2F;4 of capacity, resize to half</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Time<ul>\n<li>O(1) to add&#x2F;remove at end (amortized for allocations for more space), index, or update</li>\n<li>O(n) to insert&#x2F;remove elsewhere</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Space<ul>\n<li>contiguous in memory, so proximity helps performance</li>\n<li>space needed &#x3D; (array capacity, which is &gt;&#x3D; n) * size of item, but even if 2n, still O(n)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Linked-Lists\"><a href=\"#Linked-Lists\" class=\"headerlink\" title=\"Linked Lists\"></a>Linked Lists</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Description:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/singly-linked-lists-kHhgK\">Singly Linked Lists (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_htzJdKoEmO0\">CS 61B - Linked Lists 1 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_-c4I3gFYe3w\">CS 61B - Linked Lists 2 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/F8AbOfQwl1c\">[Review] Linked lists in 4 minutes (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=QN6FPiD0Gzo\">C Code (video)</a><br>  - not the whole video, just portions about Node struct and memory allocation</li>\n<li><input disabled=\"\" type=\"checkbox\"> Linked List vs Arrays:<ul>\n<li><a href=\"https://www.coursera.org/lecture/data-structures-optimizing-performance/core-linked-lists-vs-arrays-rjBs9\">Core Linked Lists Vs Arrays (video)</a></li>\n<li><a href=\"https://www.coursera.org/lecture/data-structures-optimizing-performance/in-the-real-world-lists-vs-arrays-QUaUd\">In The Real World Linked Lists Vs Arrays (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=YQs6IC-vgmo\">Why you should avoid linked lists (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Gotcha: you need pointer to pointer knowledge:<br>  (for when you pass a pointer to a function that may change the address where that pointer points)<br>  This page is just to get a grasp on ptr to ptr. I don‚Äôt recommend this list traversal style. Readability and maintainability suffer due to cleverness.<ul>\n<li><a href=\"https://www.eskimo.com/~scs/cclass/int/sx8.html\">Pointers to Pointers</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement (I did with tail pointer &amp; without):<ul>\n<li><input disabled=\"\" type=\"checkbox\"> size() - returns number of data elements in list</li>\n<li><input disabled=\"\" type=\"checkbox\"> empty() - bool returns true if empty</li>\n<li><input disabled=\"\" type=\"checkbox\"> value_at(index) - returns the value of the nth item (starting at 0 for first)</li>\n<li><input disabled=\"\" type=\"checkbox\"> push_front(value) - adds an item to the front of the list</li>\n<li><input disabled=\"\" type=\"checkbox\"> pop_front() - remove front item and return its value</li>\n<li><input disabled=\"\" type=\"checkbox\"> push_back(value) - adds an item at the end</li>\n<li><input disabled=\"\" type=\"checkbox\"> pop_back() - removes end item and returns its value</li>\n<li><input disabled=\"\" type=\"checkbox\"> front() - get value of front item</li>\n<li><input disabled=\"\" type=\"checkbox\"> back() - get value of end item</li>\n<li><input disabled=\"\" type=\"checkbox\"> insert(index, value) - insert value at index, so current item at that index is pointed to by new item at index</li>\n<li><input disabled=\"\" type=\"checkbox\"> erase(index) - removes node at given index</li>\n<li><input disabled=\"\" type=\"checkbox\"> value_n_from_end(n) - returns the value of the node at nth position from the end of the list</li>\n<li><input disabled=\"\" type=\"checkbox\"> reverse() - reverses the list</li>\n<li><input disabled=\"\" type=\"checkbox\"> remove_value(value) - removes the first item in the list with this value</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Doubly-linked List<ul>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/doubly-linked-lists-jpGKD\">Description (video)</a></li>\n<li>No need to implement</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Stack\"><a href=\"#Stack\" class=\"headerlink\" title=\"Stack\"></a>Stack</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/stacks-UdKzQ\">Stacks (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/KcT3aVgrrpU\">[Review] Stacks in 3 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Will not implement. Implementing with array is trivial</li>\n</ul>\n</li>\n<li><h3 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/queues-EShpq\">Queue (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://en.wikipedia.org/wiki/Circular_buffer\">Circular buffer&#x2F;FIFO</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/D6gu-_tmEpQ\">[Review] Queues in 3 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement using linked-list, with tail pointer:<ul>\n<li>enqueue(value) - adds value at position at tail</li>\n<li>dequeue() - returns value and removes least recently added element (front)</li>\n<li>empty()</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement using fixed-sized array:<ul>\n<li>enqueue(value) - adds item at end of available storage</li>\n<li>dequeue() - returns value and removes least recently added element</li>\n<li>empty()</li>\n<li>full()</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Cost:<ul>\n<li>a bad implementation using linked list where you enqueue at head and dequeue at tail would be O(n)<br>  because you‚Äôd need the next to last element, causing a full traversal each dequeue</li>\n<li>enqueue: O(1) (amortized, linked list and array [probing])</li>\n<li>dequeue: O(1) (linked list and array)</li>\n<li>empty: O(1) (linked list and array)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Hash-table\"><a href=\"#Hash-table\" class=\"headerlink\" title=\"Hash table\"></a>Hash table</h3><ul>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nVideos:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=0M_kIqhwbFo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=8\">Hashing with Chaining (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=BRO7mVIFt08&index=9&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">Table Doubling, Karp-Rabin (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=rvdJDijO2Ro&index=10&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">Open Addressing, Cryptographic Hashing (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=C4Kc8xzcA68\">PyCon 2010: The Mighty Dictionary (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=66P5FMkWoVU\">PyCon 2017: The Dictionary Even Mightier (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=z0lJ2k0sl1g&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=11\">(Advanced) Randomization: Universal &amp; Perfect Hashing (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=N0COwN14gt0&list=PL2B4EEwhKD-NbwZ4ezj7gyc_3yNrojKM9&index=4\">(Advanced) Perfect hashing (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/knV86FlSXJ8\">[Review] Hash tables in 4 minutes (video)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nOnline Courses:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures-optimizing-performance/core-hash-tables-m7UuP\">Core Hash Tables (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/home/week/4\">Data Structures (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/phone-book-problem-NYZZP\">Phone Book Problem (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> distributed hash tables:<ul>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/instant-uploads-and-storage-optimization-in-dropbox-DvaIb\">Instant Uploads And Storage Optimization In Dropbox (video)</a></li>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/distributed-hash-tables-tvH8H\">Distributed Hash Tables (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nImplement with array using linear probing</p>\n<ul>\n<li>hash(k, m) - m is size of hash table</li>\n<li>add(key, value) - if key already exists, update value</li>\n<li>exists(key)</li>\n<li>get(key)</li>\n<li>remove(key)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"More-Knowledge\"><a href=\"#More-Knowledge\" class=\"headerlink\" title=\"More Knowledge\"></a>More Knowledge</h2><ul>\n<li><h3 id=\"Binary-search\"><a href=\"#Binary-search\" class=\"headerlink\" title=\"Binary search\"></a>Binary search</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=D5SrAga1pno\">Binary Search (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.khanacademy.org/computing/computer-science/algorithms/binary-search/a/binary-search\">Binary Search (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.topcoder.com/thrive/articles/Binary%20Search\">detail</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://leetcode.com/discuss/general-discussion/786126/python-powerful-ultimate-binary-search-template-solved-many-problems\">blueprint</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/fDKIpRe8GW4\">[Review] Binary search in 4 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement:<ul>\n<li>binary search (on sorted array of integers)</li>\n<li>binary search using recursion</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Bitwise-operations\"><a href=\"#Bitwise-operations\" class=\"headerlink\" title=\"Bitwise operations\"></a>Bitwise operations</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/bits-cheat-sheet.pdf\">Bits cheat sheet</a> - you should know many of the powers of 2 from (2^1 to 2^16 and 2^32)</li>\n<li><input disabled=\"\" type=\"checkbox\"> Get a really good understanding of manipulating bits with: &amp;, |, ^, ~, &gt;&gt;, &lt;&lt;<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://en.wikipedia.org/wiki/Word_(computer_architecture)\">words</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Good intro:<br>  <a href=\"https://www.youtube.com/watch?v=7jkIUgLC29I\">Bit Manipulation (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=d0AwjSpNXR0\">C Programming Tutorial 2-10: Bitwise Operators (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://en.wikipedia.org/wiki/Bit_manipulation\">Bit Manipulation</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation\">Bitwise Operation</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://graphics.stanford.edu/~seander/bithacks.html\">Bithacks</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://bits.stephan-brumme.com/\">The Bit Twiddler</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://bits.stephan-brumme.com/interactive.html\">The Bit Twiddler Interactive</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ZusiKXcz_ac\">Bit Hacks (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://pconrad.github.io/old_pconrad_cs16/topics/bitOps/\">Practice Operations</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> 2s and 1s complement<ul>\n<li><a href=\"https://www.youtube.com/watch?v=lKTsv6iVxV4\">Binary: Plusses &amp; Minuses (Why We Use Two‚Äôs Complement) (video)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Ones%27_complement\">1s Complement</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Two%27s_complement\">2s Complement</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Count set bits<ul>\n<li><a href=\"https://youtu.be/Hzuzo9NJrlc\">4 ways to count bits in a byte (video)</a></li>\n<li><a href=\"https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetKernighan\">Count Bits</a></li>\n<li><a href=\"http://stackoverflow.com/questions/109023/how-to-count-the-number-of-set-bits-in-a-32-bit-integer\">How To Count The Number Of Set Bits In a 32 Bit Integer</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Swap values:<ul>\n<li><a href=\"https://bits.stephan-brumme.com/swap.html\">Swap</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Absolute value:<ul>\n<li><a href=\"https://bits.stephan-brumme.com/absInteger.html\">Absolute Integer</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Trees\"><a href=\"#Trees\" class=\"headerlink\" title=\"Trees\"></a>Trees</h2><ul>\n<li><h3 id=\"Trees-Intro\"><a href=\"#Trees-Intro\" class=\"headerlink\" title=\"Trees - Intro\"></a>Trees - Intro</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/trees-95qda\">Intro to Trees (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/tree-traversal-fr51b\">Tree Traversal (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=uWL6FJhq5fM\">BFS(breadth-first search) and DFS(depth-first search) (video)</a><ul>\n<li>BFS notes:<ul>\n<li>level order (BFS, using queue)</li>\n<li>time complexity: O(n)</li>\n<li>space complexity: best: O(1), worst: O(n&#x2F;2)&#x3D;O(n)</li>\n</ul>\n</li>\n<li>DFS notes:<ul>\n<li>time complexity: O(n)</li>\n<li>space complexity:<br>  best: O(log n) - avg. height of tree<br>  worst: O(n)</li>\n<li>inorder (DFS: left, self, right)</li>\n<li>postorder (DFS: left, right, self)</li>\n<li>preorder (DFS: self, left, right)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/HZ5YTanv5QE\">[Review] Breadth-first search in 4 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/Urx87-NMm6c\">[Review] Depth-first search in 4 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZO1JC2RgEi04nLy6D-rKk6b\">[Review] Tree Traversal (playlist) in 11 minutes (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Binary-search-trees-BSTs\"><a href=\"#Binary-search-trees-BSTs\" class=\"headerlink\" title=\"Binary search trees: BSTs\"></a>Binary search trees: BSTs</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=x6At0nzX92o&index=1&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6\">Binary Search Tree Review (video)</a>    </li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/E7cXP/introduction\">Introduction (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=76dhtgZt38A&ab_channel=MITOpenCourseWare\">MIT (video)</a></li>\n<li>C&#x2F;C++:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=COZK7NATh4k&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=28\">Binary search tree - Implementation in C&#x2F;C++ (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=hWokyBoo0aI&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=29\">BST implementation - memory allocation in stack and heap (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Ut90klNN264&index=30&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Find min and max element in a binary search tree (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=_pnqMz5nrRs&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=31\">Find height of a binary tree (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=9RHO6jU--GU&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=32\">Binary tree traversal - breadth-first and depth-first strategies (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=86g8jAQug04&index=33&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Binary tree: Level Order Traversal (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=gm8DUJJhmY4&index=34&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Binary tree traversal: Preorder, Inorder, Postorder (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=yEwSGhSsT0U&index=35&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Check if a binary tree is binary search tree or not (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=gcULXE7ViZw&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P&index=36\">Delete a node from Binary Search Tree (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=5cPbNCrdotA&index=37&list=PL2_aWCzGMAwI3W_JlcBbtYTwiQSsOTa6P\">Inorder Successor in a binary search tree (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> insert    &#x2F;&#x2F; insert value into tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_node_count &#x2F;&#x2F; get count of values stored</li>\n<li><input disabled=\"\" type=\"checkbox\"> print_values &#x2F;&#x2F; prints the values in the tree, from min to max</li>\n<li><input disabled=\"\" type=\"checkbox\"> delete_tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> is_in_tree &#x2F;&#x2F; returns true if given value exists in the tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_height &#x2F;&#x2F; returns the height in nodes (single node‚Äôs height is 1)</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_min   &#x2F;&#x2F; returns the minimum value stored in the tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_max   &#x2F;&#x2F; returns the maximum value stored in the tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> is_binary_search_tree</li>\n<li><input disabled=\"\" type=\"checkbox\"> delete_value</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_successor &#x2F;&#x2F; returns next-highest value in tree after given value, -1 if none</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Heap-Priority-Queue-Binary-Heap\"><a href=\"#Heap-Priority-Queue-Binary-Heap\" class=\"headerlink\" title=\"Heap &#x2F; Priority Queue &#x2F; Binary Heap\"></a>Heap &#x2F; Priority Queue &#x2F; Binary Heap</h3><ul>\n<li>visualized as a tree, but is usually linear in storage (array, linked list)</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://en.wikipedia.org/wiki/Heap_(data_structure)\">Heap</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/introduction-2OpTs\">Introduction (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/GRV2q/binary-trees\">Binary Trees (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/supplement/S5xxz/tree-height-remark\">Tree Height Remark (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/0g1dl/basic-operations\">Basic Operations (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/gl5Ni/complete-binary-trees\">Complete Binary Trees (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/HxQo9/pseudocode\">Pseudocode (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/odNJmw5TOEE?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3291\">Heap Sort - jumps to start (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/heap-sort-hSzMO\">Heap Sort (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/data-structures/building-a-heap-dwrOS\">Building a heap (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=B7hVxCmfPtM&index=4&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">MIT: Heaps and Heap Sort (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_yIUFT6AKBGE\">CS 61B Lecture 24: Priority Queues (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=MiyLo8adrWw\">Linear Time BuildHeap (max-heap)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZNsyqgPW-DNwUeT8F8uhWc6\">[Review] Heap (playlist) in 13 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Implement a max-heap:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> insert</li>\n<li><input disabled=\"\" type=\"checkbox\"> sift_up - needed for insert</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_max - returns the max item, without removing it</li>\n<li><input disabled=\"\" type=\"checkbox\"> get_size() - return number of elements stored</li>\n<li><input disabled=\"\" type=\"checkbox\"> is_empty() - returns true if heap contains no elements</li>\n<li><input disabled=\"\" type=\"checkbox\"> extract_max - returns the max item, removing it</li>\n<li><input disabled=\"\" type=\"checkbox\"> sift_down - needed for extract_max</li>\n<li><input disabled=\"\" type=\"checkbox\"> remove(x) - removes item at index x</li>\n<li><input disabled=\"\" type=\"checkbox\"> heapify - create a heap from an array of elements, needed for heap_sort</li>\n<li><input disabled=\"\" type=\"checkbox\"> heap_sort() - take an unsorted array and turn it into a sorted array in-place using a max heap or min heap</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Sorting\"><a href=\"#Sorting\" class=\"headerlink\" title=\"Sorting\"></a>Sorting</h2><ul>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nNotes:</p>\n<ul>\n<li>Implement sorts &amp; know best case&#x2F;worst case, average complexity of each:<ul>\n<li>no bubble sort - it‚Äôs terrible - O(n^2), except when n &lt;&#x3D; 16</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Stability in sorting algorithms (‚ÄúIs Quicksort stable?‚Äù)<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Sorting_algorithm#Stability\">Sorting Algorithm Stability</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1517793/stability-in-sorting-algorithms\">Stability In Sorting Algorithms</a></li>\n<li><a href=\"http://www.geeksforgeeks.org/stability-in-sorting-algorithms/\">Stability In Sorting Algorithms</a></li>\n<li><a href=\"http://homepages.math.uic.edu/~leon/cs-mcs401-s08/handouts/stability.pdf\">Sorting Algorithms - Stability</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Which algorithms can be used on linked lists? Which on arrays? Which on both?<ul>\n<li>I wouldn‚Äôt recommend sorting a linked list, but merge sort is doable.</li>\n<li><a href=\"http://www.geeksforgeeks.org/merge-sort-for-linked-list/\">Merge Sort For Linked List</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>For heapsort, see Heap data structure above. Heap sort is great, but not stable</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.coursera.org/learn/algorithms-part1/home/week/3\">Sedgewick - Mergesort (5 videos)</a></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/mergesort-ARWDq\">1. Mergesort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part1/lecture/PWNEl/bottom-up-mergesort\">2. Bottom up Mergesort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/sorting-complexity-xAltF\">3. Sorting Complexity</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/comparators-9FYhS\">4. Comparators</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part1/lecture/pvvLZ/stability\">5. Stability</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.coursera.org/learn/algorithms-part1/home/week/3\">Sedgewick - Quicksort (4 videos)</a></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/quicksort-vjvnC\">1. Quicksort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/selection-UQxFT\">2. Selection</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/duplicate-keys-XvjPd\">3. Duplicate Keys</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part1/system-sorts-QBNZ7\">4. System Sorts</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nUC Berkeley:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_EiUvYS2DT6I\">CS 61B Lecture 29: Sorting I (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_2hTY3t80Qsk\">CS 61B Lecture 30: Sorting II (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_Y6LOLpxg6Dc\">CS 61B Lecture 32: Sorting III (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_qNMQ4ly43p4\">CS 61B Lecture 33: Sorting V (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_pvbBMd-3NoI\">CS 61B 2014-04-21: Radix Sort(video)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=P00xJgWzz2c&index=1&list=PL89B61F78B552C1AB\">Bubble Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=ni_zk257Nqo&index=7&list=PL89B61F78B552C1AB\">Analyzing Bubble Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=Kg4bqzAqRBM&index=3&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">Insertion Sort, Merge Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=c4BRHC7kTaQ&index=2&list=PL89B61F78B552C1AB\">Insertion Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=GCae1WNvnZM&index=3&list=PL89B61F78B552C1AB\">Merge Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=y_G9BkAm6B8&index=4&list=PL89B61F78B552C1AB\">Quicksort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/watch?v=6nDMgr0-Yyo&index=8&list=PL89B61F78B552C1AB\">Selection Sort (video)</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nMerge sort code:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/examples/sorting/mergesort.c\">Using output array (C)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/jwasham/practice-python/blob/master/merge_sort/merge_sort.py\">Using output array (Python)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/jwasham/practice-cpp/blob/master/merge_sort/merge_sort.cc\">In-place (C++)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nQuick sort code:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/examples/randomization/quick.c\">Implementation (C)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/jwasham/practice-c/blob/master/quick_sort/quick_sort.c\">Implementation (C)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/jwasham/practice-python/blob/master/quick_sort/quick_sort.py\">Implementation (Python)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZOZSbGAXAPIq1BeUf4j20pl\">[Review] Sorting (playlist) in 18 minutes</a></p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/Hoixgm4-P4M\">Quick sort in 4 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/2DmK_H7IdTo\">Heap sort in 4 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/4VqmGXwpLqc\">Merge sort in 3 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/xli_FI7CuzA\">Bubble sort in 2 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/g-PGLbMth_g\">Selection sort in 3 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/JU767SDMDvA\">Insertion sort in 2 minutes (video)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nImplement:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> Mergesort: O(n log n) average and worst case</li>\n<li><input disabled=\"\" type=\"checkbox\"> Quicksort O(n log n) average case</li>\n<li>Selection sort and insertion sort are both O(n^2) average and worst case</li>\n<li>For heapsort, see Heap data structure above</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nNot required, but I recommended them:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/home/week/3\">Sedgewick - Radix Sorts (6 videos)</a><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/vGHvb/strings-in-java\">1. Strings in Java</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part2/key-indexed-counting-2pi1Z\">2. Key Indexed Counting</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/c1U7L/lsd-radix-sort\">3. Least Significant Digit First String Radix Sort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/gFxwG/msd-radix-sort\">4. Most Significant Digit First String Radix Sort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part2/3-way-radix-quicksort-crkd5\">5. 3 Way Radix Quicksort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays\">6. Suffix Arrays</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#radixSort\">Radix Sort</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=xhr26ia4k38\">Radix Sort (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Nz1KZXbghj8&index=7&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">Radix Sort, Counting Sort (linear time given constraints) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=cNB2lADK3_s&index=8&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">Randomization: Matrix Multiply, Quicksort, Freivalds‚Äô algorithm (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=pOKy3RZbSws&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&index=14\">Sorting in Linear Time (video)</a></li>\n</ul>\n</li>\n</ul>\n<p>As a summary, here is a visual representation of <a href=\"https://www.youtube.com/watch?v=kPRA0W1kECg\">15 sorting algorithms</a>.<br>If you need more detail on this subject, see ‚ÄúSorting‚Äù section in <a href=\"#additional-detail-on-some-subjects\">Additional Detail on Some Subjects</a></p>\n<h2 id=\"Graphs\"><a href=\"#Graphs\" class=\"headerlink\" title=\"Graphs\"></a>Graphs</h2><p>Graphs can be used to represent many problems in computer science, so this section is long, like trees and sorting were.</p>\n<ul>\n<li><p>Notes:</p>\n<ul>\n<li>There are 4 basic ways to represent a graph in memory:<ul>\n<li>objects and pointers</li>\n<li>adjacency matrix</li>\n<li>adjacency list</li>\n<li>adjacency map</li>\n</ul>\n</li>\n<li>Familiarize yourself with each representation and its pros &amp; cons</li>\n<li>BFS and DFS - know their computational complexity, their trade offs, and how to implement them in real code</li>\n<li>When asked a question, look for a graph-based solution first, then move on if none</li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nMIT(videos):</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=oFVYVzlvk9c&t=14s&ab_channel=MITOpenCourseWare\">Breadth-First Search</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=IBfWDYSffUU&t=32s&ab_channel=MITOpenCourseWare\">Depth-First Search</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nSkiena Lectures - great intro:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Sjk0xqWWPCc&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=10\">CSE373 2020 - Lecture 10 - Graph Data Structures (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ZTwjXj81NVY&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=11\">CSE373 2020 - Lecture 11 - Graph Traversal (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=KyordYB3BOs&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=12\">CSE373 2020 - Lecture 12 - Depth First Search (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=oolm2VnJUKw&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=13\">CSE373 2020 - Lecture 13 - Minimum Spanning Trees (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=RktgPx0MarY&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=14\">CSE373 2020 - Lecture 14 - Minimum Spanning Trees (con‚Äôt) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=MUe5DXRhyAo&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=15\">CSE373 2020 - Lecture 15 - Graph Algorithms (con‚Äôt 2) (video)</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nGraphs (review and more):</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Aa2sqUhIn-E&index=15&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">6.006 Single-Source Shortest Paths Problem (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=NSHizBK9JD8&t=1731s&ab_channel=MITOpenCourseWare\">6.006 Dijkstra (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=f9cVS_URPc0&ab_channel=MITOpenCourseWare\">6.006 Bellman-Ford (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=CHvQ3q_gJ7E&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=18\">6.006 Speeding Up Dijkstra (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=i_AQT_XfvD8&index=6&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\">Aduni: Graph Algorithms I - Topological Sorting, Minimum Spanning Trees, Prim‚Äôs Algorithm -  Lecture 6 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ufj5_bppBsA&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=7\">Aduni: Graph Algorithms II - DFS, BFS, Kruskal‚Äôs Algorithm, Union Find Data Structure - Lecture 7 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=DiedsPsMKXc&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=8\">Aduni: Graph Algorithms III: Shortest Path - Lecture 8 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=XIAQRlNkJAw&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=9\">Aduni: Graph Alg. IV: Intro to geometric algorithms - Lecture 9 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://archive.org/details/ucberkeley_webcast_zFbq8vOZ_0k\">CS 61B 2014: Weighted graphs (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=tKwnms5iRBU&index=16&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">Greedy Algorithms: Minimum Spanning Tree (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=RpgcYiky7uw\">Strongly Connected Components Kosaraju‚Äôs Algorithm Graph Algorithm (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZO-Y-H3xIC9DGSfVYJng9Yw\">[Review] Shortest Path Algorithms (playlist) in 16 minutes (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZObEi3Hf6lmyW-CBfs7nkOV\">[Review] Minimum Spanning Trees (playlist) in 4 minutes (video)</a></li>\n</ul>\n</li>\n<li><p>Full Coursera Course:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-on-graphs/home/welcome\">Algorithms on Graphs (video)</a></li>\n</ul>\n</li>\n<li><p>I‚Äôll implement:</p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> DFS with adjacency list (recursive)</li>\n<li><input disabled=\"\" type=\"checkbox\"> DFS with adjacency list (iterative with stack)</li>\n<li><input disabled=\"\" type=\"checkbox\"> DFS with adjacency matrix (recursive)</li>\n<li><input disabled=\"\" type=\"checkbox\"> DFS with adjacency matrix (iterative with stack)</li>\n<li><input disabled=\"\" type=\"checkbox\"> BFS with adjacency list</li>\n<li><input disabled=\"\" type=\"checkbox\"> BFS with adjacency matrix</li>\n<li><input disabled=\"\" type=\"checkbox\"> single-source shortest path (Dijkstra)</li>\n<li><input disabled=\"\" type=\"checkbox\"> minimum spanning tree</li>\n<li>DFS-based algorithms (see Aduni videos above):<ul>\n<li><input disabled=\"\" type=\"checkbox\"> check for cycle (needed for topological sort, since we‚Äôll check for cycle before starting)</li>\n<li><input disabled=\"\" type=\"checkbox\"> topological sort</li>\n<li><input disabled=\"\" type=\"checkbox\"> count connected components in a graph</li>\n<li><input disabled=\"\" type=\"checkbox\"> list strongly connected components</li>\n<li><input disabled=\"\" type=\"checkbox\"> check for bipartite graph</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Even-More-Knowledge\"><a href=\"#Even-More-Knowledge\" class=\"headerlink\" title=\"Even More Knowledge\"></a>Even More Knowledge</h2><ul>\n<li><h3 id=\"Recursion\"><a href=\"#Recursion\" class=\"headerlink\" title=\"Recursion\"></a>Recursion</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Stanford lectures on recursion &amp; backtracking:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=gl3emqCuueQ&list=PLFE6E58F856038C69&index=8\">Lecture 8 | Programming Abstractions (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=uFJhEPrbycQ&list=PLFE6E58F856038C69&index=9\">Lecture 9 | Programming Abstractions (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=NdF1QDTRkck&index=10&list=PLFE6E58F856038C69\">Lecture 10 | Programming Abstractions (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=p-gpaIGRCQI&list=PLFE6E58F856038C69&index=11\">Lecture 11 | Programming Abstractions (video)</a></li>\n</ul>\n</li>\n<li>When it is appropriate to use it?</li>\n<li>How is tail recursion better than not?<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.quora.com/What-is-tail-recursion-Why-is-it-so-bad\">What Is Tail Recursion Why Is It So Bad?</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/programming-languages/tail-recursion-YZic1\">Tail Recursion (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/ngCos392W4w\">5 Simple Steps for Solving Any Recursive Problem(video)</a></li>\n</ul>\n<p>  Backtracking Blueprint: <a href=\"https://leetcode.com/problems/combination-sum/discuss/16502/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partitioning)\">Java</a><br>  <a href=\"https://leetcode.com/problems/combination-sum/discuss/429538/General-Backtracking-questions-solutions-in-Python-for-reference-%3A\">Python</a></p>\n</li>\n<li><h3 id=\"Dynamic-Programming\"><a href=\"#Dynamic-Programming\" class=\"headerlink\" title=\"Dynamic Programming\"></a>Dynamic Programming</h3><ul>\n<li>You probably won‚Äôt see any dynamic programming problems in your interview, but it‚Äôs worth being able to recognize a<br>  problem as being a candidate for dynamic programming.</li>\n<li>This subject can be pretty difficult, as each DP soluble problem must be defined as a recursion relation, and coming up with it can be tricky.</li>\n<li>I suggest looking at many examples of DP problems until you have a solid understanding of the pattern involved.</li>\n<li><input disabled=\"\" type=\"checkbox\"> Videos:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=wAA0AMfcJHQ&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=18\">Skiena: CSE373 2020 - Lecture 19 - Introduction to Dynamic Programming (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=T3A4jlHlhtA&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=19\">Skiena: CSE373 2020 - Lecture 20 - Edit Distance (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=iPnPVcZmRbE&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=20\">Skiena: CSE373 2020 - Lecture 20 - Edit Distance (continued) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=2xPE4Wq8coQ&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=21\">Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=2xPE4Wq8coQ&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=21\">Skiena: CSE373 2020 - Lecture 21 - Dynamic Programming and Review (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/J5aJEcOr6Eo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3558\">Simonson: Dynamic Programming 0 (starts at 59:18) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=0EzHjQ_SOeU&index=11&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\">Simonson: Dynamic Programming I - Lecture 11 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=v1qiRwuJU7g&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=12\">Simonson: Dynamic programming II - Lecture 12 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> List of individual DP problems (each is short):<br>  <a href=\"https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr\">Dynamic Programming (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Yale Lecture notes:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#dynamicProgramming\">Dynamic Programming</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Coursera:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithmic-thinking-2/lecture/80RrW/the-rna-secondary-structure-problem\">The RNA secondary structure problem (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithmic-thinking-2/a-dynamic-programming-algorithm-PSonq\">A dynamic programming algorithm (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithmic-thinking-2/illustrating-the-dp-algorithm-oUEK2\">Illustrating the DP algorithm (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithmic-thinking-2/lecture/nfK2r/running-time-of-the-dp-algorithm\">Running time of the DP algorithm (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithmic-thinking-2/lecture/M999a/dp-vs-recursive-implementation\">DP vs. recursive implementation (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithmic-thinking-2/global-pairwise-sequence-alignment-UZ7o6\">Global pairwise sequence alignment (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithmic-thinking-2/lecture/WnNau/local-pairwise-sequence-alignment\">Local pairwise sequence alignment (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Design-patterns\"><a href=\"#Design-patterns\" class=\"headerlink\" title=\"Design patterns\"></a>Design patterns</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=3cmzqZzwNDM&list=PLGLfVvz_LVvQ5G-LdJ8RLqe-ndo7QITYc&index=3\">Quick UML review (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Learn these patterns:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> strategy</li>\n<li><input disabled=\"\" type=\"checkbox\"> singleton</li>\n<li><input disabled=\"\" type=\"checkbox\"> adapter</li>\n<li><input disabled=\"\" type=\"checkbox\"> prototype</li>\n<li><input disabled=\"\" type=\"checkbox\"> decorator</li>\n<li><input disabled=\"\" type=\"checkbox\"> visitor</li>\n<li><input disabled=\"\" type=\"checkbox\"> factory, abstract factory</li>\n<li><input disabled=\"\" type=\"checkbox\"> facade</li>\n<li><input disabled=\"\" type=\"checkbox\"> observer</li>\n<li><input disabled=\"\" type=\"checkbox\"> proxy</li>\n<li><input disabled=\"\" type=\"checkbox\"> delegate</li>\n<li><input disabled=\"\" type=\"checkbox\"> command</li>\n<li><input disabled=\"\" type=\"checkbox\"> state</li>\n<li><input disabled=\"\" type=\"checkbox\"> memento</li>\n<li><input disabled=\"\" type=\"checkbox\"> iterator</li>\n<li><input disabled=\"\" type=\"checkbox\"> composite</li>\n<li><input disabled=\"\" type=\"checkbox\"> flyweight</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PLF206E906175C7E07\">Series of videos (27 videos)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.amazon.com/Head-First-Design-Patterns-Freeman/dp/0596007124\">Book: Head First Design Patterns</a><ul>\n<li>I know the canonical book is ‚ÄúDesign Patterns: Elements of Reusable Object-Oriented Software‚Äù, but Head First is great for beginners to OO.</li>\n</ul>\n</li>\n<li><a href=\"https://sourcemaking.com/design-patterns-and-tips\">Handy reference: 101 Design Patterns &amp; Tips for Developers</a></li>\n</ul>\n</li>\n<li><h3 id=\"Combinatorics-n-choose-k-Probability\"><a href=\"#Combinatorics-n-choose-k-Probability\" class=\"headerlink\" title=\"Combinatorics (n choose k) &amp; Probability\"></a>Combinatorics (n choose k) &amp; Probability</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=8RRo6Ti9d0U\">Math Skills: How to find Factorial, Permutation and Combination (Choose) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=sZkAAk9Wwa4\">Make School: Probability (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=dNaJg-mLobQ\">Make School: More Probability and Markov Chains (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Khan Academy:<ul>\n<li>Course layout:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.khanacademy.org/math/probability/probability-and-combinatorics-topic\">Basic Theoretical Probability</a></li>\n</ul>\n</li>\n<li>Just the videos - 41 (each are simple and each are short):<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=uzkc-qNVoOk&list=PLC58778F28211FA19\">Probability Explained (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"NP-NP-Complete-and-Approximation-Algorithms\"><a href=\"#NP-NP-Complete-and-Approximation-Algorithms\" class=\"headerlink\" title=\"NP, NP-Complete and Approximation Algorithms\"></a>NP, NP-Complete and Approximation Algorithms</h3><ul>\n<li>Know about the most famous classes of NP-complete problems, such as traveling salesman and the knapsack problem,<br>  and be able to recognize them when an interviewer asks you them in disguise.</li>\n<li>Know what NP-complete means.</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=moPtwq_cVH8&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=23\">Computational Complexity (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Simonson:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/qcGnJ47Smlo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=2939\">Greedy Algs. II &amp; Intro to NP Completeness (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=e0tGC6ZQdQE&index=16&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\">NP Completeness II &amp; Reductions (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=fCX1BGT3wjE&index=17&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\">NP Completeness III (Video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=NKLDp3Rch3M&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=18\">NP Completeness IV (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Skiena:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ItHp5laE1VE&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=23\">CSE373 2020 - Lecture 23 - NP-Completeness (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=inaFJeCzGxU&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=24\">CSE373 2020 - Lecture 24 - Satisfiability (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=B-bhKxjZLlc&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=25\">CSE373 2020 - Lecture 25 - More NP-Completeness (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=_EzetTkG_Cc&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=26\">CSE373 2020 - Lecture 26 - NP-Completeness Challenge (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=eHZifpgyH_4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=22\">Complexity: P, NP, NP-completeness, Reductions (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=MEz1J9wY2iM&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=24\">Complexity: Approximation Algorithms (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=4q-jmGrmxKs&index=25&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">Complexity: Fixed-Parameter Algorithms (video)</a></li>\n<li>Peter Norvig discusses near-optimal solutions to traveling salesman problem:<ul>\n<li><a href=\"http://nbviewer.jupyter.org/url/norvig.com/ipython/TSP.ipynb\">Jupyter Notebook</a></li>\n</ul>\n</li>\n<li>Pages 1048 - 1140 in CLRS if you have it.</li>\n</ul>\n</li>\n<li><h3 id=\"How-computers-process-a-program\"><a href=\"#How-computers-process-a-program\" class=\"headerlink\" title=\"How computers process a program\"></a>How computers process a program</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=XM4lGflQFvA\">How CPU executes a program (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/1I5ZMmrOfnA\">How computers calculate - ALU (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/fpnE6UAfbtU\">Registers and RAM (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/FZGugFqdr60\">The Central Processing Unit (CPU) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://youtu.be/zltgXvg6r3k\">Instructions and Programs (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Caches\"><a href=\"#Caches\" class=\"headerlink\" title=\"Caches\"></a>Caches</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> LRU cache:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=R5ON3iwx78M\">The Magic of LRU Cache (100 Days of Google Dev) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=bq6N7Ym81iI\">Implementing LRU (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=8-FZRAjR7qU\">LeetCode - 146 LRU Cache (C++) (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> CPU cache:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=vjYF_fAZI5E&list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-&index=24\">MIT 6.004 L15: The Memory Hierarchy (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ajgC3-pyGlk&index=25&list=PLrRW1w6CGAcXbMtDFj205vALOGmiRc82-\">MIT 6.004 L16: Cache Issues (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Processes-and-Threads\"><a href=\"#Processes-and-Threads\" class=\"headerlink\" title=\"Processes and Threads\"></a>Processes and Threads</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> Computer Science 162 - Operating Systems (25 videos):<ul>\n<li>for processes and threads see videos 1-11</li>\n<li><a href=\"https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iBDyz-ba4yDskqMDY6A1w_c\">Operating Systems and System Programming (video)</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.quora.com/What-is-the-difference-between-a-process-and-a-thread\">What Is The Difference Between A Process And A Thread?</a></li>\n<li>Covers:<ul>\n<li>Processes, Threads, Concurrency issues<ul>\n<li>Difference between processes and threads</li>\n<li>Processes</li>\n<li>Threads</li>\n<li>Locks</li>\n<li>Mutexes</li>\n<li>Semaphores</li>\n<li>Monitors</li>\n<li>How they work?</li>\n<li>Deadlock</li>\n<li>Livelock</li>\n</ul>\n</li>\n<li>CPU activity, interrupts, context switching</li>\n<li>Modern concurrency constructs with multicore processors</li>\n<li><a href=\"https://youtu.be/O4nwUqQodAg\">Paging, segmentation and virtual memory (video)</a></li>\n<li><a href=\"https://youtu.be/iKlAWIKEyuw\">Interrupts (video)</a></li>\n<li>Process resource needs (memory: code, static storage, stack, heap, and also file descriptors, i&#x2F;o)</li>\n<li>Thread resource needs (shares above (minus stack) with other threads in the same process but each has its own pc, stack counter, registers, and stack)</li>\n<li>Forking is really copy on write (read-only) until the new process writes to memory, then it does a full copy.</li>\n<li>Context switching<ul>\n<li>How context switching is initiated by the operating system and underlying hardware?</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL5jc9xFGsL8E12so1wlMS0r0hTQoJL74M\">threads in C++ (series - 10 videos)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PLacuG5pysFbDQU8kKxbUh4K5c1iL5_k7k\">CS 377 Spring ‚Äò14: Operating Systems from University of Massachusetts</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> concurrency in Python (videos):<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PL1H1sBF1VAKVMONJWJkmUh6_p8g4F2oy1\">Short series on threads</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Bs7vPNbB9JM\">Python Threads</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Obt-vMVdM8s\">Understanding the Python GIL (2010)</a><ul>\n<li><a href=\"http://www.dabeaz.com/GIL\">reference</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=MCs5OvhV9S4\">David Beazley - Python Concurrency From the Ground Up: LIVE! - PyCon 2015</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ZzfHjytDceU\">Keynote David Beazley - Topics of Interest (Python Asyncio)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=0zaPs8OtyKY\">Mutex in Python</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h3><ul>\n<li>To cover:<ul>\n<li>how unit testing works</li>\n<li>what are mock objects</li>\n<li>what is integration testing</li>\n<li>what is dependency injection</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=SAhJf36_u5U\">Agile Software Testing with James Bach (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=ILkT_HV9DVU\">Open Lecture by James Bach on Software Testing (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://vimeo.com/83960706\">Steve Freeman - Test-Driven Development (that‚Äôs not what we meant) (video)</a><ul>\n<li><a href=\"http://gotocon.com/dl/goto-berlin-2013/slides/SteveFreeman_TestDrivenDevelopmentThatsNotWhatWeMeant.pdf\">slides</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Dependency injection:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=IKD2-MAkXyQ\">video</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://jasonpolites.github.io/tao-of-testing/ch3-1.1.html\">Tao Of Testing</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://jasonpolites.github.io/tao-of-testing/ch4-1.1.html\">How to write tests</a></li>\n</ul>\n</li>\n<li><h3 id=\"String-searching-manipulations\"><a href=\"#String-searching-manipulations\" class=\"headerlink\" title=\"String searching &amp; manipulations\"></a>String searching &amp; manipulations</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/TH18W/suffix-arrays\">Sedgewick - Suffix Arrays (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/home/week/4\">Sedgewick - Substring Search (videos)</a><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part2/introduction-to-substring-search-n3ZpG\">1. Introduction to Substring Search</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/2Kn5i/brute-force-substring-search\">2. Brute-Force Substring Search</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/TAtDr/knuth-morris-pratt\">3. Knuth-Morris Pratt</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/CYxOT/boyer-moore\">4. Boyer-Moore</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/lecture/algorithms-part2/rabin-karp-3KiqT\">5. Rabin-Karp</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures/lecture/tAfHI/search-pattern-in-text\">Search pattern in text (video)</a></li>\n</ul>\n<p>  If you need more detail on this subject, see ‚ÄúString Matching‚Äù section in <a href=\"#additional-detail-on-some-subjects\">Additional Detail on Some Subjects</a>.</p>\n</li>\n<li><h3 id=\"Tries\"><a href=\"#Tries\" class=\"headerlink\" title=\"Tries\"></a>Tries</h3><ul>\n<li>Note there are different kinds of tries. Some have prefixes, some don‚Äôt, and some use string instead of bits<br>  to track the path</li>\n<li>I read through code, but will not implement</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/home/week/4\">Sedgewick - Tries (3 videos)</a><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/CPVdr/r-way-tries\">1. R Way Tries</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/yQM8K/ternary-search-tries\">2. Ternary Search Tries</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/algorithms-part2/lecture/jwNmV/character-based-operations\">3. Character Based Operations</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Tries\">Notes on Data Structures and Programming Techniques</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Short course videos:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/08Xyf/core-introduction-to-tries\">Introduction To Tries (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/PvlZW/core-performance-of-tries\">Performance Of Tries (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/DFvd3/core-implementing-a-trie\">Implementing A Trie (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.toptal.com/java/the-trie-a-neglected-data-structure\">The Trie: A Neglected Data Structure</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.topcoder.com/thrive/articles/Using%20Tries\">TopCoder - Using Tries</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=TJ8SkcUSdbU\">Stanford Lecture (real world use case) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=NinWEPPrkDQ&index=16&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf\">MIT, Advanced Data Structures, Strings (can get pretty obscure about halfway through) (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Floating-Point-Numbers\"><a href=\"#Floating-Point-Numbers\" class=\"headerlink\" title=\"Floating Point Numbers\"></a>Floating Point Numbers</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> simple 8-bit: <a href=\"https://www.youtube.com/watch?v=ji3SfClm8TU\">Representation of Floating Point Numbers - 1 (video - there is an error in calculations - see video description)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Unicode\"><a href=\"#Unicode\" class=\"headerlink\" title=\"Unicode\"></a>Unicode</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.joelonsoftware.com/articles/Unicode.html\">The Absolute Minimum Every Software Developer Absolutely, Positively Must Know About Unicode and Character Sets</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://kunststube.net/encoding/\">What Every Programmer Absolutely, Positively Needs To Know About Encodings And Character Sets To Work With Text</a></li>\n</ul>\n</li>\n<li><h3 id=\"Endianness\"><a href=\"#Endianness\" class=\"headerlink\" title=\"Endianness\"></a>Endianness</h3><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://web.archive.org/web/20180107141940/http://www.cs.umd.edu:80/class/sum2003/cmsc311/Notes/Data/endian.html\">Big And Little Endian</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=JrNF0KRAlyo\">Big Endian Vs Little Endian (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=oBSuXP-1Tc0\">Big And Little Endian Inside&#x2F;Out (video)</a><ul>\n<li>Very technical talk for kernel devs. Don‚Äôt worry if most is over your head.</li>\n<li>The first half is enough.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Networking\"><a href=\"#Networking\" class=\"headerlink\" title=\"Networking\"></a>Networking</h3><ul>\n<li><strong>If you have networking experience or want to be a reliability engineer or operations engineer, expect questions</strong></li>\n<li>Otherwise, this is just good to know</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.khanacademy.org/computing/code-org/computers-and-the-internet\">Khan Academy</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Vdc8TCESIg8\">UDP and TCP: Comparison of Transport Protocols (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=e5DEVa9eSN0\">TCP&#x2F;IP and the OSI Model Explained! (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=nomyRJehhnM\">Packet Transmission across the Internet. Networking &amp; TCP&#x2F;IP tutorial. (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=WGJrLqtX7As\">HTTP (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=S2iBR2ZlZf0\">SSL and HTTPS (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=Rp3iZUvXWlM\">SSL&#x2F;TLS (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=E9FxNzv1Tr8\">HTTP 2.0 (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/playlist?list=PLEbnTDJUr_IegfoqO4iPnPYQui46QqT0j\">Video Series (21 videos) (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=t5xYI0jzOf4\">Subnetting Demystified - Part 5 CIDR Notation (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Sockets:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=6G_W54zuadg&t=6s\">Java - Sockets - Introduction (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=G75vN2mnJeQ\">Socket Programming (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Final-Review\"><a href=\"#Final-Review\" class=\"headerlink\" title=\"Final Review\"></a>Final Review</h2><ul>\n<li><p>This section will have shorter videos that you can watch pretty quickly to review most of the important concepts.<br>  It‚Äôs nice if you want a refresher often.</p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nSeries of 2-3 minutes short subject videos (23 videos)</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=r4r1DZcx1cM&list=PLmVb1OknmNJuC5POdcDv5oCS7_OUkDgpj&index=22\">Videos</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \nSeries of 2-5 minutes short subject videos - Michael Sambol (38 videos):</p>\n<ul>\n<li><a href=\"https://www.youtube.com/channel/UCzDJwLWoYCUQowF_nG3m5OQ\">Videos</a></li>\n</ul>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.coursera.org/learn/algorithms-part1\">Sedgewick Videos - Algorithms I</a></p>\n</li>\n<li><p><input disabled=\"\" type=\"checkbox\"> \n<a href=\"https://www.coursera.org/learn/algorithms-part2\">Sedgewick Videos - Algorithms II</a></p>\n</li>\n</ul>\n<hr>\n<h2 id=\"Update-Your-Resume\"><a href=\"#Update-Your-Resume\" class=\"headerlink\" title=\"Update Your Resume\"></a>Update Your Resume</h2><ul>\n<li>See Resume prep information in the books: ‚ÄúCracking The Coding Interview‚Äù and ‚ÄúProgramming Interviews Exposed‚Äù</li>\n<li>I don‚Äôt know how important this is (you can do your own research) but here is an article on making your resume ATS Compliant:<ul>\n<li><a href=\"https://ayedot.com/97/MiniBlog/Meaning-of-ATS-compliant-resume-and-How-to-create-ATS-Resume-for-Free\">How to Create or Check if your Resume is ATS Compliant</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.careercup.com/resume\">‚ÄúThis Is What A GOOD Resume Should Look Like‚Äù by Gayle McDowell (author of Cracking the Coding Interview)</a>, <ul>\n<li>Note by the author: ‚ÄúThis is for a US-focused resume. CVs for India and other countries have different expectations, although many of the points will be the same.‚Äù</li>\n</ul>\n</li>\n<li><a href=\"https://www.techinterviewhandbook.org/resume/guide\">‚ÄúStep-by-step resume guide‚Äù by Tech Interview Handbook</a><ul>\n<li>Detailed guide on how to set up your resume from scratch, write effective resume content, optimize it, and test your resume</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Find-a-Job\"><a href=\"#Find-a-Job\" class=\"headerlink\" title=\"Find a Job\"></a>Find a Job</h2><ul>\n<li><a href=\"https://ayedot.com/151/MiniBlog/Top-10-Best-Websites-for-Careers--Jobs\">Sites for Finding Jobs</a></li>\n</ul>\n<h2 id=\"Interview-Process-General-Interview-Prep\"><a href=\"#Interview-Process-General-Interview-Prep\" class=\"headerlink\" title=\"Interview Process &amp; General Interview Prep\"></a>Interview Process &amp; General Interview Prep</h2><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://davidbyttow.medium.com/how-to-pass-the-engineering-interview-in-2021-45f1b389a1\">How to Pass the Engineering Interview in 2021</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=N233T0epWTs\">Demystifying Tech Recruiting</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> How to Get a Job at the Big 4:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=YJZCUhxNCv8\">How to Get a Job at the Big 4 - Amazon, Facebook, Google &amp; Microsoft (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=6790FVXWBw8&feature=youtu.be\">How to Get a Job at the Big 4.1 (Follow-up video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Cracking The Coding Interview Set 1:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=rEJzOhC5ZtQ\">Gayle L McDowell - Cracking The Coding Interview (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=aClxtDcdpsQ\">Cracking the Coding Interview with Author Gayle Laakmann McDowell (video)</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Cracking the Facebook Coding Interview:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=wCl9kvQGHPI\">The Approach</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=4UWDyJq8jZg\">Problem Walkthrough</a></li>\n</ul>\n</li>\n<li>Prep Courses:<ul>\n<li><a href=\"https://www.udemy.com/software-engineer-interview-unleashed\">Software Engineer Interview Unleashed (paid course)</a>:<ul>\n<li>Learn how to make yourself ready for software engineer interviews from a former Google interviewer.</li>\n</ul>\n</li>\n<li><a href=\"https://www.udemy.com/python-for-data-structures-algorithms-and-interviews/\">Python for Data Structures, Algorithms, and Interviews (paid course)</a>:<ul>\n<li>A Python centric interview prep course which covers data structures, algorithms, mock interviews and much more.</li>\n</ul>\n</li>\n<li><a href=\"https://www.udacity.com/course/data-structures-and-algorithms-in-python--ud513\">Intro to Data Structures and Algorithms using Python (Udacity free course)</a>:<ul>\n<li>A free Python centric data structures and algorithms course.</li>\n</ul>\n</li>\n<li><a href=\"https://www.udacity.com/course/data-structures-and-algorithms-nanodegree--nd256\">Data Structures and Algorithms Nanodegree! (Udacity paid Nanodegree)</a>:<ul>\n<li>Get hands-on practice with over 100 data structures and algorithm exercises and guidance from a dedicated mentor to help prepare you for interviews and on-the-job scenarios.</li>\n</ul>\n</li>\n<li><a href=\"https://www.educative.io/courses/grokking-the-behavioral-interview\">Grokking the Behavioral Interview (Educative free course)</a>:<ul>\n<li>Many times, it‚Äôs not your technical competency that holds you back from landing your dream job, it‚Äôs how you perform on the behavioral interview.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>Mock Interviews:</p>\n<ul>\n<li><a href=\"http://www.gainlo.co/#!/\">Gainlo.co: Mock interviewers from big companies</a> - I used this and it helped me relax for the phone screen and on-site interview</li>\n<li><a href=\"https://www.pramp.com/\">Pramp: Mock interviews from&#x2F;with peers</a> - peer-to-peer model of practice interviews</li>\n<li><a href=\"https://interviewing.io/\">interviewing.io: Practice mock interview with senior engineers</a> - anonymous algorithmic&#x2F;systems design interviews with senior engineers from FAANG anonymously</li>\n</ul>\n<h2 id=\"Be-thinking-of-for-when-the-interview-comes\"><a href=\"#Be-thinking-of-for-when-the-interview-comes\" class=\"headerlink\" title=\"Be thinking of for when the interview comes\"></a>Be thinking of for when the interview comes</h2><p>Think of about 20 interview questions you‚Äôll get, along with the lines of the items below. Have at least one answer for each.<br>Have a story, not just data, about something you accomplished.</p>\n<ul>\n<li><p>Why do you want this job?</p>\n</li>\n<li><p>What‚Äôs a tough problem you‚Äôve solved?</p>\n</li>\n<li><p>Biggest challenges faced?</p>\n</li>\n<li><p>Best&#x2F;worst designs seen?</p>\n</li>\n<li><p>Ideas for improving an existing product</p>\n</li>\n<li><p>How do you work best, as an individual and as part of a team?</p>\n</li>\n<li><p>Which of your skills or experiences would be assets in the role and why?</p>\n</li>\n<li><p>What did you most enjoy at [job x &#x2F; project y]?</p>\n</li>\n<li><p>What was the biggest challenge you faced at [job x &#x2F; project y]?</p>\n</li>\n<li><p>What was the hardest bug you faced at [job x &#x2F; project y]?</p>\n</li>\n<li><p>What did you learn at [job x &#x2F; project y]?</p>\n</li>\n<li><p>What would you have done better at [job x &#x2F; project y]?</p>\n</li>\n<li><p>If you find it hard to come up with good answers of these types of interview questions, here are some ideas: </p>\n<ul>\n<li><a href=\"https://ayedot.com/119/MiniBlog/General-Interview-Questions-and-their-Answers-for-Tech-Jobs\">General Interview Questions and their Answers</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Have-questions-for-the-interviewer\"><a href=\"#Have-questions-for-the-interviewer\" class=\"headerlink\" title=\"Have questions for the interviewer\"></a>Have questions for the interviewer</h2><p>Some of mine (I already may know the answers, but want their opinion or team perspective):</p>\n<ul>\n<li>How large is your team?</li>\n<li>What does your dev cycle look like? Do you do waterfall&#x2F;sprints&#x2F;agile?</li>\n<li>Are rushes to deadlines common? Or is there flexibility?</li>\n<li>How are decisions made in your team?</li>\n<li>How many meetings do you have per week?</li>\n<li>Do you feel your work environment helps you concentrate?</li>\n<li>What are you working on?</li>\n<li>What do you like about it?</li>\n<li>What is the work life like?</li>\n<li>How is the work&#x2F;life balance?</li>\n</ul>\n<h2 id=\"Once-You‚Äôve-Got-The-Job\"><a href=\"#Once-You‚Äôve-Got-The-Job\" class=\"headerlink\" title=\"Once You‚Äôve Got The Job\"></a>Once You‚Äôve Got The Job</h2><p>Congratulations!</p>\n<p>Keep learning.</p>\n<p>You‚Äôre never really done.</p>\n<hr>\n<p>Everything below this point is optional. It is NOT needed for an entry-level interview.<br>However, by studying these, you‚Äôll get greater exposure to more CS concepts, and will be better prepared for<br>any software engineering job. You‚Äôll be a much more well-rounded software engineer.</p>\n<hr>\n<h2 id=\"Additional-Books\"><a href=\"#Additional-Books\" class=\"headerlink\" title=\"Additional Books\"></a>Additional Books</h2><p>üìö These are here so you can dive into a topic you find interesting.</p>\n<ul>\n<li><a href=\"https://www.amazon.com/dp/013937681X\">The Unix Programming Environment</a><ul>\n<li>An oldie but a goodie</li>\n</ul>\n</li>\n<li><a href=\"https://www.amazon.com/dp/1593273894/\">The Linux Command Line: A Complete Introduction</a><ul>\n<li>A modern option</li>\n</ul>\n</li>\n<li><a href=\"https://en.wikipedia.org/wiki/TCP/IP_Illustrated\">TCP&#x2F;IP Illustrated Series</a></li>\n<li><a href=\"https://www.amazon.com/gp/product/0596007124/\">Head First Design Patterns</a><ul>\n<li>A gentle introduction to design patterns</li>\n</ul>\n</li>\n<li><a href=\"https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612\">Design Patterns: Elements of Reusable Object-Oriente‚Äãd Software</a><ul>\n<li>AKA the ‚ÄúGang Of Four‚Äù book, or GOF</li>\n<li>The canonical design patterns book</li>\n</ul>\n</li>\n<li><a href=\"http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1849967202\">Algorithm Design Manual</a> (Skiena)<ul>\n<li>As a review and problem recognition</li>\n<li>The algorithm catalog portion is well beyond the scope of difficulty you‚Äôll get in an interview</li>\n<li>This book has 2 parts:<ul>\n<li>Class textbook on data structures and algorithms<ul>\n<li>Pros:<ul>\n<li>Is a good review as any algorithms textbook would be</li>\n<li>Nice stories from his experiences solving problems in industry and academia</li>\n<li>Code examples in C</li>\n</ul>\n</li>\n<li>Cons:<ul>\n<li>Can be as dense or impenetrable as CLRS, and in some cases, CLRS may be a better alternative for some subjects</li>\n<li>Chapters 7, 8, 9 can be painful to try to follow, as some items are not explained well or require more brain than I have</li>\n<li>Don‚Äôt get me wrong: I like Skiena, his teaching style, and mannerisms, but I may not be Stony Brook material</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Algorithm catalog:<ul>\n<li>This is the real reason you buy this book.</li>\n<li>This book is better as an algorithm reference, and not something you read cover to cover.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Can rent it on Kindle</li>\n<li>Answers:<ul>\n<li><a href=\"https://web.archive.org/web/20150404194210/http://www.algorithm.cs.sunysb.edu/algowiki/index.php/The_Algorithms_Design_Manual_(Second_Edition)\">Solutions</a></li>\n</ul>\n</li>\n<li><a href=\"http://www3.cs.stonybrook.edu/~skiena/algorist/book/errata\">Errata</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.amazon.com/Write-Great-Code-Understanding-Machine/dp/1593270038\">Write Great Code: Volume 1: Understanding the Machine</a><ul>\n<li>The book was published in 2004, and is somewhat outdated, but it‚Äôs a terrific resource for understanding a computer in brief</li>\n<li>The author invented <a href=\"https://en.wikipedia.org/wiki/High_Level_Assembly\">HLA</a>, so take mentions and examples in HLA with a grain of salt. Not widely used, but decent examples of what assembly looks like</li>\n<li>These chapters are worth the read to give you a nice foundation:<ul>\n<li>Chapter 2 - Numeric Representation</li>\n<li>Chapter 3 - Binary Arithmetic and Bit Operations</li>\n<li>Chapter 4 - Floating-Point Representation</li>\n<li>Chapter 5 - Character Representation</li>\n<li>Chapter 6 - Memory Organization and Access</li>\n<li>Chapter 7 - Composite Data Types and Memory Objects</li>\n<li>Chapter 9 - CPU Architecture</li>\n<li>Chapter 10 - Instruction Set Architecture</li>\n<li>Chapter 11 - Memory Architecture and Organization</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"https://www.amazon.com/Introduction-Algorithms-fourth-Thomas-Cormen/dp/026204630X\">Introduction to Algorithms</a><ul>\n<li><strong>Important:</strong> Reading this book will only have limited value. This book is a great review of algorithms and data structures, but won‚Äôt teach you how to write good code. You have to be able to code a decent solution efficiently</li>\n<li>AKA CLR, sometimes CLRS, because Stein was late to the game</li>\n</ul>\n</li>\n<li><a href=\"https://www.amazon.com/dp/0128119055\">Computer Architecture, Sixth Edition: A Quantitative Approach</a><ul>\n<li>For a richer, more up-to-date (2017), but longer treatment</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"System-Design-Scalability-Data-Handling\"><a href=\"#System-Design-Scalability-Data-Handling\" class=\"headerlink\" title=\"System Design, Scalability, Data Handling\"></a>System Design, Scalability, Data Handling</h2><p><strong>You can expect system design questions if you have 4+ years of experience.</strong></p>\n<ul>\n<li>Scalability and System Design are very large topics with many topics and resources, since<br>there is a lot to consider when designing a software&#x2F;hardware system that can scale.<br>Expect to spend quite a bit of time on this</li>\n<li>Considerations:<ul>\n<li>Scalability<ul>\n<li>Distill large data sets to single values</li>\n<li>Transform one data set to another</li>\n<li>Handling obscenely large amounts of data</li>\n</ul>\n</li>\n<li>System design<ul>\n<li>features sets</li>\n<li>interfaces</li>\n<li>class hierarchies</li>\n<li>designing a system under certain constraints</li>\n<li>simplicity and robustness</li>\n<li>tradeoffs</li>\n<li>performance analysis and optimization</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <strong>START HERE</strong>: <a href=\"https://github.com/donnemartin/system-design-primer\">The System Design Primer</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.hiredintech.com/system-design/\">System Design from HiredInTech</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.quora.com/How-do-I-prepare-to-answer-design-questions-in-a-technical-interview?redirected_qid=1500023\">How Do I Prepare To Answer Design Questions In A Technical Interview?</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://blog.gainlo.co/index.php/2015/10/22/8-things-you-need-to-know-before-system-design-interviews/\">8 Things You Need to Know Before a System Design Interview</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=UrYLYV7WSHM\">Database Normalization - 1NF, 2NF, 3NF and 4NF (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://github.com/checkcheckzz/system-design-interview\">System Design Interview</a> - There are a lot of resources in this one. Look through the articles and examples. I put some of them below</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://web.archive.org/web/20120716060051/http://www.palantir.com/2011/10/how-to-rock-a-systems-design-interview/\">How to ace a systems design interview</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://everythingisdata.wordpress.com/2009/10/17/numbers-everyone-should-know/\">Numbers Everyone Should Know</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://blog.tsunanet.net/2010/11/how-long-does-it-take-to-make-context.html\">How long does it take to make a context switch?</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=srOgpXECblk\">Transactions Across Datacenters (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://ksat.me/a-plain-english-introduction-to-cap-theorem\">A plain English introduction to CAP Theorem</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=cQP8WApzIQQ&list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB\">MIT 6.824: Distributed Systems, Spring 2020 (20 videos)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Consensus Algorithms:<ul>\n<li><input disabled=\"\" type=\"checkbox\"> Paxos - <a href=\"https://www.youtube.com/watch?v=s8JqcZtvnsM\">Paxos Agreement - Computerphile (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Raft - <a href=\"https://www.youtube.com/watch?v=P9Ydif5_qvE\">An Introduction to the Raft Distributed Consensus Algorithm (video)</a><ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://raft.github.io/\">Easy-to-read paper</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://thesecretlivesofdata.com/raft/\">Infographic</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.tom-e-white.com/2007/11/consistent-hashing.html\">Consistent Hashing</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://horicky.blogspot.com/2009/11/nosql-patterns.html\">NoSQL Patterns</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Scalability:<ul>\n<li>You don‚Äôt need all of these. Just pick a few that interest you.</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=-W9F__D3oY4\">Great overview (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> Short series:<ul>\n<li><a href=\"http://www.lecloud.net/post/7295452622/scalability-for-dummies-part-1-clones\">Clones</a></li>\n<li><a href=\"http://www.lecloud.net/post/7994751381/scalability-for-dummies-part-2-database\">Database</a></li>\n<li><a href=\"http://www.lecloud.net/post/9246290032/scalability-for-dummies-part-3-cache\">Cache</a></li>\n<li><a href=\"http://www.lecloud.net/post/9699762917/scalability-for-dummies-part-4-asynchronism\">Asynchronism</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://www.aosabook.org/en/distsys.html\">Scalable Web Architecture and Distributed Systems</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf\">Fallacies of Distributed Computing Explained</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=modXC5IWTJI\">Jeff Dean - Building Software Systems At Google and Lessons Learned (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://lethain.com/introduction-to-architecting-systems-for-scale/\">Introduction to Architecting Systems for Scale</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=9nWyWwY2Onc\">Scaling mobile games to a global audience using App Engine and Cloud Datastore (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=H4vMcD7zKM0\">How Google Does Planet-Scale Engineering for Planet-Scale Infra (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.topcoder.com/thrive/articles/The%20Importance%20of%20Algorithms\">The Importance of Algorithms</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2009/8/6/an-unorthodox-approach-to-database-design-the-coming-of-the.html\">Sharding</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=p0jGmgIrf_M&list=PLRXxvay_m8gqVlExPC5DG3TGWJTaBgqSA&index=4\">Engineering for the Long Game - Astrid Atkinson Keynote(video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2012/3/26/7-years-of-youtube-scalability-lessons-in-30-minutes.html\">7 Years Of YouTube Scalability Lessons In 30 Minutes</a><ul>\n<li><a href=\"https://www.youtube.com/watch?v=G-lGCC4KKok\">video</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/8/15/how-paypal-scaled-to-billions-of-transactions-daily-using-ju.html\">How PayPal Scaled To Billions Of Transactions Daily Using Just 8VMs</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://blog.clevertap.com/how-to-remove-duplicates-in-large-datasets/\">How to Remove Duplicates in Large Datasets</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=3vV4YiqKm1o\">A look inside Etsy‚Äôs scale and engineering culture with Jon Cowie (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://thenewstack.io/led-amazon-microservices-architecture/\">What Led Amazon to its Own Microservices Architecture</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://eng.uber.com/trip-data-squeeze/\">To Compress Or Not To Compress, That Was Uber‚Äôs Question</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/2/25/when-should-approximate-query-processing-be-used.html\">When Should Approximate Query Processing Be Used?</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/2/23/googles-transition-from-single-datacenter-to-failover-to-a-n.html\">Google‚Äôs Transition From Single Datacenter, To Failover, To A Native Multihomed Architecture</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html\">The Image Optimization Technology That Serves Millions Of Requests Per Day</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/2/1/a-patreon-architecture-short.html\">A Patreon Architecture Short</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/1/27/tinder-how-does-one-of-the-largest-recommendation-engines-de.html\">Tinder: How Does One Of The Largest Recommendation Engines Decide Who You‚Äôll See Next?</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/1/25/design-of-a-modern-cache.html\">Design Of A Modern Cache</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/1/13/live-video-streaming-at-facebook-scale.html\">Live Video Streaming At Facebook Scale</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2016/1/11/a-beginners-guide-to-scaling-to-11-million-users-on-amazons.html\">A Beginner‚Äôs Guide To Scaling To 11 Million+ Users On Amazon‚Äôs AWS</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2015/11/9/a-360-degree-view-of-the-entire-netflix-stack.html\">A 360 Degree View Of The Entire Netflix Stack</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/latency-everywhere-and-it-costs-you-sales-how-crush-it\">Latency Is Everywhere And It Costs You Sales - How To Crush It</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://instagram-engineering.tumblr.com/post/13649370142/what-powers-instagram-hundreds-of-instances\">What Powers Instagram: Hundreds of Instances, Dozens of Technologies</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2013/9/23/salesforce-architecture-how-they-handle-13-billion-transacti.html\">Salesforce Architecture - How They Handle 1.3 Billion Transactions A Day</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"http://highscalability.com/blog/2013/11/4/espns-architecture-at-scale-operating-at-100000-duh-nuh-nuhs.html\">ESPN‚Äôs Architecture At Scale - Operating At 100,000 Duh Nuh Nuhs Per Second</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> See ‚ÄúMessaging, Serialization, and Queueing Systems‚Äù way below for info on some of the technologies that can glue services together</li>\n<li><input disabled=\"\" type=\"checkbox\"> Twitter:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=5cKTP36HVgI\">O‚ÄôReilly MySQL CE 2011: Jeremy Cole, ‚ÄúBig and Small Data at @Twitter‚Äù (video)</a></li>\n<li><a href=\"https://www.infoq.com/presentations/Twitter-Timeline-Scalability\">Timelines at Scale</a></li>\n</ul>\n</li>\n<li>For even more, see ‚ÄúMining Massive Datasets‚Äù video series in the <a href=\"#video-series\">Video Series</a> section</li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> Practicing the system design process: Here are some ideas to try working through on paper, each with some documentation on how it was handled in the real world:<ul>\n<li>review: <a href=\"https://github.com/donnemartin/system-design-primer\">The System Design Primer</a></li>\n<li><a href=\"http://www.hiredintech.com/system-design/\">System Design from HiredInTech</a></li>\n<li><a href=\"https://github.com/jwasham/coding-interview-university/blob/main/extras/cheat%20sheets/system-design.pdf\">cheat sheet</a></li>\n<li>flow:<ol>\n<li>Understand the problem and scope:<ul>\n<li>Define the use cases, with interviewer‚Äôs help</li>\n<li>Suggest additional features</li>\n<li>Remove items that interviewer deems out of scope</li>\n<li>Assume high availability is required, add as a use case</li>\n</ul>\n</li>\n<li>Think about constraints:<ul>\n<li>Ask how many requests per month</li>\n<li>Ask how many requests per second (they may volunteer it or make you do the math)</li>\n<li>Estimate reads vs. writes percentage</li>\n<li>Keep 80&#x2F;20 rule in mind when estimating</li>\n<li>How much data written per second</li>\n<li>Total storage required over 5 years</li>\n<li>How much data read per second</li>\n</ul>\n</li>\n<li>Abstract design:<ul>\n<li>Layers (service, data, caching)</li>\n<li>Infrastructure: load balancing, messaging</li>\n<li>Rough overview of any key algorithm that drives the service</li>\n<li>Consider bottlenecks and determine solutions</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Exercises:<ul>\n<li><a href=\"https://blog.twitter.com/2010/announcing-snowflake\">Design a random unique ID generation system</a></li>\n<li><a href=\"http://www.slideshare.net/dvirsky/introduction-to-redis\">Design a key-value database</a></li>\n<li><a href=\"http://highscalability.com/blog/2011/12/6/instagram-architecture-14-million-users-terabytes-of-photos.html\">Design a picture sharing system</a></li>\n<li><a href=\"http://ijcai13.org/files/tutorial_slides/td3.pdf\">Design a recommendation system</a></li>\n<li><a href=\"http://www.hiredintech.com/system-design/the-system-design-process/\">Design a URL-shortener system: copied from above</a></li>\n<li><a href=\"https://web.archive.org/web/20220217064329/https://adayinthelifeof.nl/2011/02/06/memcache-internals/\">Design a cache system</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Additional-Learning\"><a href=\"#Additional-Learning\" class=\"headerlink\" title=\"Additional Learning\"></a>Additional Learning</h2><p>I added them to help you become a well-rounded software engineer, and to be aware of certain<br>technologies and algorithms, so you‚Äôll have a bigger toolbox.</p>\n<ul>\n<li><h3 id=\"Compilers\"><a href=\"#Compilers\" class=\"headerlink\" title=\"Compilers\"></a>Compilers</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=IhC7sdYe-Jg\">How a Compiler Works in ~1 minute (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=CSZLNYF4Klo\">Harvard CS50 - Compilers (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=twodd1KFfGk\">C++ (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=FnGCDLhaxKU\">Understanding Compiler Optimization (C++) (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Emacs-and-vi-m\"><a href=\"#Emacs-and-vi-m\" class=\"headerlink\" title=\"Emacs and vi(m)\"></a>Emacs and vi(m)</h3><ul>\n<li>Familiarize yourself with a unix-based code editor</li>\n<li>vi(m):<ul>\n<li><a href=\"https://www.youtube.com/watch?v=5givLEMcINQ&index=1&list=PL13bz4SHGmRxlZVmWQ9DvXo1fEg4UdGkr\">Editing With vim 01 - Installation, Setup, and The Modes (video)</a></li>\n<li><a href=\"http://vim-adventures.com/\">VIM Adventures</a></li>\n<li>set of 4 videos:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=SI8TeVMX8pk\">The vi&#x2F;vim editor - Lesson 1</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=F3OO7ZIOaJE\">The vi&#x2F;vim editor - Lesson 2</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ZYEccA_nMaI\">The vi&#x2F;vim editor - Lesson 3</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=1lYD5gwgZIA\">The vi&#x2F;vim editor - Lesson 4</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Using_Vi_instead_of_Emacs\">Using Vi Instead of Emacs</a></li>\n</ul>\n</li>\n<li>emacs:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=hbmV1bnQ-i0\">Basics Emacs Tutorial (video)</a></li>\n<li>set of 3 (videos):<ul>\n<li><a href=\"https://www.youtube.com/watch?v=ujODL7MD04Q\">Emacs Tutorial (Beginners) -Part 1- File commands, cut&#x2F;copy&#x2F;paste, cursor commands</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=XWpsRupJ4II\">Emacs Tutorial (Beginners) -Part 2- Buffer management, search, M-x grep and rgrep modes</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=paSgzPso-yc\">Emacs Tutorial (Beginners) -Part 3- Expressions, Statements, ~&#x2F;.emacs file and packages</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=JWD1Fpdd4Pc\">Evil Mode: Or, How I Learned to Stop Worrying and Love Emacs (video)</a></li>\n<li><a href=\"http://www.cs.yale.edu/homes/aspnes/classes/223/notes.html#Writing_C_programs_with_Emacs\">Writing C Programs With Emacs</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=48JlgiBpw_I&t=0s\">The Absolute Beginner‚Äôs Guide to Emacs (video by David Wilson)</a></li>\n<li><a href=\"https://systemcrafters.net/emacs-essentials/absolute-beginners-guide-to-emacs/\">The Absolute Beginner‚Äôs Guide to Emacs (notes by David Wilson)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Unix-command-line-tools\"><a href=\"#Unix-command-line-tools\" class=\"headerlink\" title=\"Unix command line tools\"></a>Unix command line tools</h3><ul>\n<li>I filled in the list below from good tools.</li>\n<li>bash</li>\n<li>cat</li>\n<li>grep</li>\n<li>sed</li>\n<li>awk</li>\n<li>curl or wget</li>\n<li>sort</li>\n<li>tr</li>\n<li>uniq</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Strace\">strace</a></li>\n<li><a href=\"https://danielmiessler.com/study/tcpdump/\">tcpdump</a></li>\n</ul>\n</li>\n<li><h3 id=\"Information-theory-videos\"><a href=\"#Information-theory-videos\" class=\"headerlink\" title=\"Information theory (videos)\"></a>Information theory (videos)</h3><ul>\n<li><a href=\"https://www.khanacademy.org/computing/computer-science/informationtheory\">Khan Academy</a></li>\n<li>More about Markov processes:<ul>\n<li><a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/waxgx/core-markov-text-generation\">Core Markov Text Generation</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/gZhiC/core-implementing-markov-text-generation\">Core Implementing Markov Text Generation</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures-optimizing-performance/lecture/EUjrq/project-markov-text-generation-walk-through\">Project &#x3D; Markov Text Generation Walk Through</a></li>\n</ul>\n</li>\n<li>See more in MIT 6.050J Information and Entropy series below</li>\n</ul>\n</li>\n<li><h3 id=\"Parity-Hamming-Code-videos\"><a href=\"#Parity-Hamming-Code-videos\" class=\"headerlink\" title=\"Parity &amp; Hamming Code (videos)\"></a>Parity &amp; Hamming Code (videos)</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=q-3BctoUpHE\">Intro</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=DdMcAUlxh1M\">Parity</a></li>\n<li>Hamming Code:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=1A_NcXxdoCc\">Error detection</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=JAMLuxdHH8o\">Error correction</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=wbH2VxzmoZk\">Error Checking</a></li>\n</ul>\n</li>\n<li><h3 id=\"Entropy\"><a href=\"#Entropy\" class=\"headerlink\" title=\"Entropy\"></a>Entropy</h3><ul>\n<li>Also see videos below</li>\n<li>Make sure to watch information theory videos first</li>\n<li><a href=\"https://youtu.be/JnJq3Py0dyM?t=176\">Information Theory, Claude Shannon, Entropy, Redundancy, Data Compression &amp; Bits (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Cryptography\"><a href=\"#Cryptography\" class=\"headerlink\" title=\"Cryptography\"></a>Cryptography</h3><ul>\n<li>Also see videos below</li>\n<li>Make sure to watch information theory videos first</li>\n<li><a href=\"https://www.khanacademy.org/computing/computer-science/cryptography\">Khan Academy Series</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=KqqOXndnvic&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=30\">Cryptography: Hash Functions</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=9TNI2wHmaeI&index=31&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">Cryptography: Encryption</a></li>\n</ul>\n</li>\n<li><h3 id=\"Compression\"><a href=\"#Compression\" class=\"headerlink\" title=\"Compression\"></a>Compression</h3><ul>\n<li>Make sure to watch information theory videos first</li>\n<li>Computerphile (videos):<ul>\n<li><a href=\"https://www.youtube.com/watch?v=Lto-ajuqW3w\">Compression</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=M5c_RFKVkko\">Entropy in Compression</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=umTbivyJoiI\">Upside Down Trees (Huffman Trees)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=DV8efuB3h2g\">EXTRA BITS&#x2F;TRITS - Huffman Trees</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=goOa3DGezUA\">Elegant Compression in Text (The LZ 77 Method)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=cCDCfoHTsaU\">Text Compression Meets Probabilities</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLOU2XLYxmsIJGErt5rrCqaSGTMyyqNt2H\">Compressor Head videos</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=whGwm0Lky2s\">(optional) Google Developers Live: GZIP is not enough!</a></li>\n</ul>\n</li>\n<li><h3 id=\"Computer-Security\"><a href=\"#Computer-Security\" class=\"headerlink\" title=\"Computer Security\"></a>Computer Security</h3><ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">MIT (23 videos)</a><ul>\n<li><a href=\"https://www.youtube.com/watch?v=GqmQg-cszw4&index=1&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Introduction, Threat Models</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=6bwzNg5qQ0o&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&index=2\">Control Hijacking Attacks</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=drQyrzRoRiA&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&index=3\">Buffer Overflow Exploits and Defenses</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=6SIJmoE9L9g&index=4&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Privilege Separation</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8VqTSY-11F4&index=5&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Capabilities</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=VEV74hwASeU&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh&index=6\">Sandboxing Native Code</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=chkFBigodIw&index=7&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Web Security Model</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=EBQIGy1ROLY&index=8&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Securing Web Applications</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=yRVZPvHYHzw&index=9&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Symbolic Execution</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=SIEVvk3NVuk&index=11&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Network Security</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=QOtA76ga_fY&index=12&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Network Protocols</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=PuVMkSEcPiI&index=15&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">Side-Channel Attacks</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"Garbage-collection\"><a href=\"#Garbage-collection\" class=\"headerlink\" title=\"Garbage collection\"></a>Garbage collection</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=iHVs_HkjdmI\">GC in Python (video)</a></li>\n<li><a href=\"https://www.infoq.com/presentations/garbage-collection-benefits\">Deep Dive Java: Garbage Collection is Good!</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=P-8Z0-MhdQs&list=PLdzf4Clw0VbOEWOS_sLhT_9zaiQDrS5AR&index=3\">Deep Dive Python: Garbage Collection in CPython (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Parallel-Programming\"><a href=\"#Parallel-Programming\" class=\"headerlink\" title=\"Parallel Programming\"></a>Parallel Programming</h3><ul>\n<li><a href=\"https://www.coursera.org/learn/parprog1/home/week/1\">Coursera (Scala)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=uY85GkaYzBk\">Efficient Python for High Performance Parallel Computing (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Messaging-Serialization-and-Queueing-Systems\"><a href=\"#Messaging-Serialization-and-Queueing-Systems\" class=\"headerlink\" title=\"Messaging, Serialization, and Queueing Systems\"></a>Messaging, Serialization, and Queueing Systems</h3><ul>\n<li><a href=\"https://thrift.apache.org/\">Thrift</a><ul>\n<li><a href=\"http://thrift-tutorial.readthedocs.io/en/latest/intro.html\">Tutorial</a></li>\n</ul>\n</li>\n<li><a href=\"https://developers.google.com/protocol-buffers/\">Protocol Buffers</a><ul>\n<li><a href=\"https://developers.google.com/protocol-buffers/docs/tutorials\">Tutorials</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.grpc.io/\">gRPC</a><ul>\n<li><a href=\"https://www.youtube.com/watch?v=5tmPvSe7xXQ&list=PLcTqM9n_dieN0k1nSeN36Z_ppKnvMJoly&index=1\">gRPC 101 for Java Developers (video)</a></li>\n</ul>\n</li>\n<li><a href=\"http://redis.io/\">Redis</a><ul>\n<li><a href=\"http://try.redis.io/\">Tutorial</a></li>\n</ul>\n</li>\n<li><a href=\"https://aws.amazon.com/sqs/\">Amazon SQS (queue)</a></li>\n<li><a href=\"https://aws.amazon.com/sns/\">Amazon SNS (pub-sub)</a></li>\n<li><a href=\"https://www.rabbitmq.com/\">RabbitMQ</a><ul>\n<li><a href=\"https://www.rabbitmq.com/getstarted.html\">Get Started</a></li>\n</ul>\n</li>\n<li><a href=\"http://www.celeryproject.org/\">Celery</a><ul>\n<li><a href=\"http://docs.celeryproject.org/en/latest/getting-started/first-steps-with-celery.html\">First Steps With Celery</a></li>\n</ul>\n</li>\n<li><a href=\"http://zeromq.org/\">ZeroMQ</a><ul>\n<li><a href=\"http://zeromq.org/intro:read-the-manual\">Intro - Read The Manual</a></li>\n</ul>\n</li>\n<li><a href=\"http://activemq.apache.org/\">ActiveMQ</a></li>\n<li><a href=\"http://kafka.apache.org/documentation.html#introduction\">Kafka</a></li>\n<li><a href=\"http://msgpack.org/index.html\">MessagePack</a></li>\n<li><a href=\"https://avro.apache.org/\">Avro</a></li>\n</ul>\n</li>\n<li><h3 id=\"A\"><a href=\"#A\" class=\"headerlink\" title=\"A*\"></a>A*</h3><ul>\n<li><a href=\"https://en.wikipedia.org/wiki/A*_search_algorithm\">A Search Algorithm</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-L-WgKMFuhE\">A* Pathfinding (E01: algorithm explanation) (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Fast-Fourier-Transform\"><a href=\"#Fast-Fourier-Transform\" class=\"headerlink\" title=\"Fast Fourier Transform\"></a>Fast Fourier Transform</h3><ul>\n<li><a href=\"https://betterexplained.com/articles/an-interactive-guide-to-the-fourier-transform/\">An Interactive Guide To The Fourier Transform</a></li>\n<li><a href=\"http://www.askamathematician.com/2012/09/q-what-is-a-fourier-transform-what-is-it-used-for/\">What is a Fourier transform? What is it used for?</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Xxut2PN-V8Q\">What is the Fourier Transform? (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=iTMn0Kt18tg&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=4\">Divide &amp; Conquer: FFT (video)</a></li>\n<li><a href=\"http://jakevdp.github.io/blog/2013/08/28/understanding-the-fft/\">Understanding The FFT</a></li>\n</ul>\n</li>\n<li><h3 id=\"Bloom-Filter\"><a href=\"#Bloom-Filter\" class=\"headerlink\" title=\"Bloom Filter\"></a>Bloom Filter</h3><ul>\n<li>Given a Bloom filter with m bits and k hashing functions, both insertion and membership testing are O(k)</li>\n<li><a href=\"https://www.youtube.com/watch?v=-SuTGoFYjZs\">Bloom Filters (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=qBTdukbzc78\">Bloom Filters | Mining of Massive Datasets | Stanford University (video)</a></li>\n<li><a href=\"http://billmill.org/bloomfilter-tutorial/\">Tutorial</a></li>\n<li><a href=\"http://blog.michaelschmatz.com/2016/04/11/how-to-write-a-bloom-filter-cpp/\">How To Write A Bloom Filter App</a></li>\n</ul>\n</li>\n<li><h3 id=\"HyperLogLog\"><a href=\"#HyperLogLog\" class=\"headerlink\" title=\"HyperLogLog\"></a>HyperLogLog</h3><ul>\n<li><a href=\"http://highscalability.com/blog/2012/4/5/big-data-counting-how-to-count-a-billion-distinct-objects-us.html\">How To Count A Billion Distinct Objects Using Only 1.5KB Of Memory</a></li>\n</ul>\n</li>\n<li><h3 id=\"Locality-Sensitive-Hashing\"><a href=\"#Locality-Sensitive-Hashing\" class=\"headerlink\" title=\"Locality-Sensitive Hashing\"></a>Locality-Sensitive Hashing</h3><ul>\n<li>Used to determine the similarity of documents</li>\n<li>The opposite of MD5 or SHA which are used to determine if 2 documents&#x2F;strings are exactly the same</li>\n<li><a href=\"http://ferd.ca/simhashing-hopefully-made-simple.html\">Simhashing (hopefully) made simple</a></li>\n</ul>\n</li>\n<li><h3 id=\"van-Emde-Boas-Trees\"><a href=\"#van-Emde-Boas-Trees\" class=\"headerlink\" title=\"van Emde Boas Trees\"></a>van Emde Boas Trees</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=hmReJCupbNU&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=6\">Divide &amp; Conquer: van Emde Boas Trees (video)</a></li>\n<li><a href=\"https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2012/lecture-notes/MIT6_046JS12_lec15.pdf\">MIT Lecture Notes</a></li>\n</ul>\n</li>\n<li><h3 id=\"Augmented-Data-Structures\"><a href=\"#Augmented-Data-Structures\" class=\"headerlink\" title=\"Augmented Data Structures\"></a>Augmented Data Structures</h3><ul>\n<li><a href=\"https://archive.org/details/ucberkeley_webcast_zksIj9O8_jc\">CS 61B Lecture 39: Augmenting Data Structures</a></li>\n</ul>\n</li>\n<li><h3 id=\"Balanced-search-trees\"><a href=\"#Balanced-search-trees\" class=\"headerlink\" title=\"Balanced search trees\"></a>Balanced search trees</h3><ul>\n<li><p>Know at least one type of balanced binary tree (and know how it‚Äôs implemented):</p>\n</li>\n<li><p>‚ÄúAmong balanced search trees, AVL and 2&#x2F;3 trees are now pass√©, and red-black trees seem to be more popular.<br>  A particularly interesting self-organizing data structure is the splay tree, which uses rotations<br>  to move any accessed key to the root.‚Äù - Skiena</p>\n</li>\n<li><p>Of these, I chose to implement a splay tree. From what I‚Äôve read, you won‚Äôt implement a<br>  balanced search tree in your interview. But I wanted exposure to coding one up<br>  and let‚Äôs face it, splay trees are the bee‚Äôs knees. I did read a lot of red-black tree code</p>\n<ul>\n<li>Splay tree: insert, search, delete functions<br>  If you end up implementing red&#x2F;black tree try just these:</li>\n<li>Search and insertion functions, skipping delete</li>\n</ul>\n</li>\n<li><p>I want to learn more about B-Tree since it‚Äôs used so widely with very large data sets</p>\n</li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Self-balancing_binary_search_tree\">Self-balancing binary search tree</a></p>\n</li>\n<li><p><strong>AVL trees</strong></p>\n<ul>\n<li>In practice:<br>  From what I can tell, these aren‚Äôt used much in practice, but I could see where they would be:<br>  The AVL tree is another structure supporting O(log n) search, insertion, and removal. It is more rigidly<br>  balanced than red‚Äìblack trees, leading to slower insertion and removal but faster retrieval. This makes it<br>  attractive for data structures that may be built once and loaded without reconstruction, such as language<br>  dictionaries (or program dictionaries, such as the opcodes of an assembler or interpreter)</li>\n<li><a href=\"https://www.youtube.com/watch?v=FNeL18KsWPc&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=6\">MIT AVL Trees &#x2F; AVL Sort (video)</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/Qq5E0/avl-trees\">AVL Trees (video)</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/PKEBC/avl-tree-implementation\">AVL Tree Implementation (video)</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/22BgE/split-and-merge\">Split And Merge</a></li>\n</ul>\n</li>\n<li><p><strong>Splay trees</strong></p>\n<ul>\n<li>In practice:<br>  Splay trees are typically used in the implementation of caches, memory allocators, routers, garbage collectors,<br>  data compression, ropes (replacement of string used for long text strings), in Windows NT (in the virtual memory,<br>  networking and file system code) etc</li>\n<li><a href=\"https://archive.org/details/ucberkeley_webcast_G5QIXywcJlY\">CS 61B: Splay Trees (video)</a></li>\n<li>MIT Lecture: Splay Trees:<ul>\n<li>Gets very mathy, but watch the last 10 minutes for sure.</li>\n<li><a href=\"https://www.youtube.com/watch?v=QnPl_Y6EqMo\">Video</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Red&#x2F;black trees</strong></p>\n<ul>\n<li>These are a translation of a 2-3 tree (see below).</li>\n<li>In practice:<br>  Red‚Äìblack trees offer worst-case guarantees for insertion time, deletion time, and search time.<br>  Not only does this make them valuable in time-sensitive applications such as real-time applications,<br>  but it makes them valuable building blocks in other data structures which provide worst-case guarantees;<br>  for example, many data structures used in computational geometry can be based on red‚Äìblack trees, and<br>  the Completely Fair Scheduler used in current Linux kernels uses red‚Äìblack trees. In the version 8 of Java,<br>  the Collection HashMap has been modified such that instead of using a LinkedList to store identical elements with poor<br>  hashcodes, a Red-Black tree is used</li>\n<li><a href=\"https://youtu.be/1W3x0f_RmUo?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3871\">Aduni - Algorithms - Lecture 4 (link jumps to starting point) (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hm2GHwyKF1o&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=5\">Aduni - Algorithms - Lecture 5 (video)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Red%E2%80%93black_tree\">Red-Black Tree</a></li>\n<li><a href=\"https://www.topcoder.com/thrive/articles/An%20Introduction%20to%20Binary%20Search%20and%20Red-Black%20Trees\">An Introduction To Binary Search And Red Black Tree</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZNqDI8qfOZgzbqahCUmUEin\">[Review] Red-Black Trees (playlist) in 30 minutes (video)</a></li>\n</ul>\n</li>\n<li><p><strong>2-3 search trees</strong></p>\n<ul>\n<li>In practice:<br>  2-3 trees have faster inserts at the expense of slower searches (since height is more compared to AVL trees).</li>\n<li>You would use 2-3 tree very rarely because its implementation involves different types of nodes. Instead, people use Red Black trees.</li>\n<li><a href=\"https://www.youtube.com/watch?v=C3SsdUqasD4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=2\">23-Tree Intuition and Definition (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=iYvBtGKsqSg&index=3&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6\">Binary View of 23-Tree</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=TOb1tuEZ2X4&index=5&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">2-3 Trees (student recitation) (video)</a></li>\n</ul>\n</li>\n<li><p><strong>2-3-4 Trees (aka 2-4 trees)</strong></p>\n<ul>\n<li>In practice:<br>  For every 2-4 tree, there are corresponding red‚Äìblack trees with data elements in the same order. The insertion and deletion<br>  operations on 2-4 trees are also equivalent to color-flipping and rotations in red‚Äìblack trees. This makes 2-4 trees an<br>  important tool for understanding the logic behind red‚Äìblack trees, and this is why many introductory algorithm texts introduce<br>  2-4 trees just before red‚Äìblack trees, even though <strong>2-4 trees are not often used in practice</strong>.</li>\n<li><a href=\"https://archive.org/details/ucberkeley_webcast_zqrqYXkth6Q\">CS 61B Lecture 26: Balanced Search Trees (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=DQdMYevEyE4&index=4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6\">Bottom Up 234-Trees (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=2679VQ26Fp4&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=5\">Top Down 234-Trees (video)</a></li>\n</ul>\n</li>\n<li><p><strong>N-ary (K-ary, M-ary) trees</strong></p>\n<ul>\n<li>note: the N or K is the branching factor (max branches)</li>\n<li>binary trees are a 2-ary tree, with branching factor &#x3D; 2</li>\n<li>2-3 trees are 3-ary</li>\n<li><a href=\"https://en.wikipedia.org/wiki/K-ary_tree\">K-Ary Tree</a></li>\n</ul>\n</li>\n<li><p><strong>B-Trees</strong></p>\n<ul>\n<li>Fun fact: it‚Äôs a mystery, but the B could stand for Boeing, Balanced, or Bayer (co-inventor).</li>\n<li>In Practice:<br>  B-Trees are widely used in databases. Most modern filesystems use B-trees (or Variants). In addition to<br>  its use in databases, the B-tree is also used in filesystems to allow quick random access to an arbitrary<br>  block in a particular file. The basic problem is turning the file block i address into a disk block<br>  (or perhaps to a cylinder-head-sector) address</li>\n<li><a href=\"https://en.wikipedia.org/wiki/B-tree\">B-Tree</a></li>\n<li><a href=\"http://btechsmartclass.com/data_structures/b-trees.html\">B-Tree Datastructure</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=I22wEC1tTGo&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6&index=6\">Introduction to B-Trees (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=s3bCdZGrgpA&index=7&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6\">B-Tree Definition and Insertion (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=svfnVhJOfMc&index=8&list=PLA5Lqm4uh9Bbq-E0ZnqTIa8LRaL77ica6\">B-Tree Deletion (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=V3omVLzI0WE&index=7&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf\">MIT 6.851 - Memory Hierarchy Models (video)</a><br>  - covers cache-oblivious B-Trees, very interesting data structures<br>  - the first 37 minutes are very technical, may be skipped (B is block size, cache line size)</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PL9xmBV_5YoZNFPPv98DjTdD9X6UI9KMHz\">[Review] B-Trees (playlist) in 26 minutes (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><h3 id=\"k-D-Trees\"><a href=\"#k-D-Trees\" class=\"headerlink\" title=\"k-D Trees\"></a>k-D Trees</h3><ul>\n<li>Great for finding number of points in a rectangle or higher dimension object</li>\n<li>A good fit for k-nearest neighbors</li>\n<li><a href=\"https://www.youtube.com/watch?v=Y4ZgLlDfKDg\">kNN K-d tree algorithm (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Skip-lists\"><a href=\"#Skip-lists\" class=\"headerlink\" title=\"Skip lists\"></a>Skip lists</h3><ul>\n<li>‚ÄúThese are somewhat of a cult data structure‚Äù - Skiena</li>\n<li><a href=\"https://www.youtube.com/watch?v=2g9OSRKJuzM&index=10&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">Randomization: Skip Lists (video)</a></li>\n<li><a href=\"https://en.wikipedia.org/wiki/Skip_list\">For animations and a little more detail</a></li>\n</ul>\n</li>\n<li><h3 id=\"Network-Flows\"><a href=\"#Network-Flows\" class=\"headerlink\" title=\"Network Flows\"></a>Network Flows</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=Tl90tNtKvxs\">Ford-Fulkerson in 5 minutes ‚Äî Step by step example (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=v1VgJmkEJW0\">Ford-Fulkerson Algorithm (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=2vhN4Ice5jI\">Network Flows (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Disjoint-Sets-Union-Find\"><a href=\"#Disjoint-Sets-Union-Find\" class=\"headerlink\" title=\"Disjoint Sets &amp; Union Find\"></a>Disjoint Sets &amp; Union Find</h3><ul>\n<li><a href=\"https://archive.org/details/ucberkeley_webcast_MAEGXTwmUsI\">UCB 61B - Disjoint Sets; Sorting &amp; selection (video)</a></li>\n<li><a href=\"https://www.coursera.org/learn/algorithms-part1/home/week/1\">Sedgewick Algorithms - Union-Find (6 videos)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Math-for-Fast-Processing\"><a href=\"#Math-for-Fast-Processing\" class=\"headerlink\" title=\"Math for Fast Processing\"></a>Math for Fast Processing</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=eCaXlAaN2uE&index=11&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb\">Integer Arithmetic, Karatsuba Multiplication (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=ru7mWZJlRQg\">The Chinese Remainder Theorem (used in cryptography) (video)</a></li>\n</ul>\n</li>\n<li><h3 id=\"Treap\"><a href=\"#Treap\" class=\"headerlink\" title=\"Treap\"></a>Treap</h3><ul>\n<li>Combination of a binary search tree and a heap</li>\n<li><a href=\"https://en.wikipedia.org/wiki/Treap\">Treap</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=6podLUYinH8\">Data Structures: Treaps explained (video)</a></li>\n<li><a href=\"https://www.cs.cmu.edu/~scandal/papers/treaps-spaa98.pdf\">Applications in set operations</a></li>\n</ul>\n</li>\n<li><h3 id=\"Linear-Programming-videos\"><a href=\"#Linear-Programming-videos\" class=\"headerlink\" title=\"Linear Programming (videos)\"></a>Linear Programming (videos)</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=M4K6HYLHREQ\">Linear Programming</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=2ACJ9ewUC6U\">Finding minimum cost</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=8AA_81xI3ik\">Finding maximum value</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=44pAWI7v5Zk\">Solve Linear Equations with Python - Simplex Algorithm</a></li>\n</ul>\n</li>\n<li><h3 id=\"Geometry-Convex-hull-videos\"><a href=\"#Geometry-Convex-hull-videos\" class=\"headerlink\" title=\"Geometry, Convex hull (videos)\"></a>Geometry, Convex hull (videos)</h3><ul>\n<li><a href=\"https://youtu.be/XIAQRlNkJAw?list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&t=3164\">Graph Alg. IV: Intro to geometric algorithms - Lecture 9</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=J5aJEcOr6Eo&index=10&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm\">Geometric Algorithms: Graham &amp; Jarvis - Lecture 10</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=EzeYI7p9MjU&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=2\">Divide &amp; Conquer: Convex Hull, Median Finding</a></li>\n</ul>\n</li>\n<li><h3 id=\"Discrete-math\"><a href=\"#Discrete-math\" class=\"headerlink\" title=\"Discrete math\"></a>Discrete math</h3><ul>\n<li><a href=\"http://www.infocobuild.com/education/audio-video-courses/computer-science/cs70-spring2015-berkeley.html\">Computer Science 70, 001 - Spring 2015 - Discrete Mathematics and Probability Theory</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLWX710qNZo_sNlSWRMVIh6kfTjolNaZ8t\">Discrete Mathematics by Shai Simonson (19 videos)</a></li>\n<li><a href=\"https://nptel.ac.in/courses/106/106/106106183/\">Discrete Mathematics By IIT Ropar NPTEL</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"Additional-Detail-on-Some-Subjects\"><a href=\"#Additional-Detail-on-Some-Subjects\" class=\"headerlink\" title=\"Additional Detail on Some Subjects\"></a>Additional Detail on Some Subjects</h2><ul>\n<li><p>I added these to reinforce some ideas already presented above, but didn‚Äôt want to include them<br>above because it‚Äôs just too much. It‚Äôs easy to overdo it on a subject.<br>You want to get hired in this century, right?</p>\n</li>\n<li><p><strong>SOLID</strong>   </p>\n<ul>\n<li><input disabled=\"\" type=\"checkbox\"> <a href=\"https://www.youtube.com/watch?v=TMuno5RZNeE\">Bob Martin SOLID Principles of Object Oriented and Agile Design (video)</a></li>\n<li><input disabled=\"\" type=\"checkbox\"> S - <a href=\"http://www.oodesign.com/single-responsibility-principle.html\">Single Responsibility Principle</a> | <a href=\"http://www.javacodegeeks.com/2011/11/solid-single-responsibility-principle.html\">Single responsibility to each Object</a><ul>\n<li><a href=\"https://docs.google.com/open?id=0ByOwmqah_nuGNHEtcU5OekdDMkk\">more flavor</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> O - <a href=\"http://www.oodesign.com/open-close-principle.html\">Open&#x2F;Closed Principle</a>  | <a href=\"https://en.wikipedia.org/wiki/Open/closed_principle\">On production level Objects are ready for extension but not for modification</a><ul>\n<li><a href=\"http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgN2M5MTkwM2EtNWFkZC00ZTI3LWFjZTUtNTFhZGZiYmUzODc1&hl=en\">more flavor</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> L - <a href=\"http://www.oodesign.com/liskov-s-substitution-principle.html\">Liskov Substitution Principle</a> | <a href=\"http://stackoverflow.com/questions/56860/what-is-the-liskov-substitution-principle\">Base Class and Derived class follow ‚ÄòIS A‚Äô Principle</a><ul>\n<li><a href=\"http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgNzAzZjA5ZmItNjU3NS00MzQ5LTkwYjMtMDJhNDU5ZTM0MTlh&hl=en\">more flavor</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> I - <a href=\"http://www.oodesign.com/interface-segregation-principle.html\">Interface segregation principle</a> | clients should not be forced to implement interfaces they don‚Äôt use<ul>\n<li><a href=\"https://www.youtube.com/watch?v=3CtAfl7aXAQ\">Interface Segregation Principle in 5 minutes (video)</a></li>\n<li><a href=\"http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgOTViYjJhYzMtMzYxMC00MzFjLWJjMzYtOGJiMDc5N2JkYmJi&hl=en\">more flavor</a></li>\n</ul>\n</li>\n<li><input disabled=\"\" type=\"checkbox\"> D -<a href=\"http://www.oodesign.com/dependency-inversion-principle.html\">Dependency Inversion principle</a> | Reduce the dependency In composition of objects.<ul>\n<li><a href=\"http://stackoverflow.com/questions/62539/what-is-the-dependency-inversion-principle-and-why-is-it-important\">Why Is The Dependency Inversion Principle And Why Is It Important</a></li>\n<li><a href=\"http://docs.google.com/a/cleancoder.com/viewer?a=v&pid=explorer&chrome=true&srcid=0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz&hl=en\">more flavor</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Union-Find</strong></p>\n<ul>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/JssSY/overview\">Overview</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/EM5D0/naive-implementations\">Naive Implementation</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/Mxu0w/trees\">Trees</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/qb4c2/union-by-rank\">Union By Rank</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/Q9CVI/path-compression\">Path Compression</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/GQQLN/analysis-optional\">Analysis Options</a></li>\n</ul>\n</li>\n<li><p><strong>More Dynamic Programming</strong> (videos)</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=r4-cftqTcdI&ab_channel=MITOpenCourseWare\">6.006: Dynamic Programming I: Fibonacci, Shortest Paths</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=KLBCUx1is2c&ab_channel=MITOpenCourseWare\">6.006: Dynamic Programming II: Text Justification, Blackjack</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=TDo3r5M1LNo&ab_channel=MITOpenCourseWare\">6.006: DP III: Parenthesization, Edit Distance, Knapsack</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=i9OAOk0CUQE&ab_channel=MITOpenCourseWare\">6.006: DP IV: Guitar Fingering, Tetris, Super Mario Bros.</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Tw1k46ywN6E&index=14&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">6.046: Dynamic Programming &amp; Advanced DP</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=NzgFUwOaoIw&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=15\">6.046: Dynamic Programming: All-Pairs Shortest Paths</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=krZI60lKPek&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=12\">6.046: Dynamic Programming (student recitation)</a></li>\n</ul>\n</li>\n<li><p><strong>Advanced Graph Processing</strong> (videos)</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=mUBmcbbJNf4&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=27\">Synchronous Distributed Algorithms: Symmetry-Breaking. Shortest-Paths Spanning Trees</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=kQ-UQAzcnzA&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp&index=28\">Asynchronous Distributed Algorithms: Shortest-Paths Spanning Trees</a></li>\n</ul>\n</li>\n<li><p>MIT <strong>Probability</strong> (mathy, and go slowly, which is good for mathy things) (videos):</p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=SmFwFdESMHI&index=18&list=PLB7540DEDD482705B\">MIT 6.042J - Probability Introduction</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=E6FbvM-FGZ8&index=19&list=PLB7540DEDD482705B\">MIT 6.042J - Conditional Probability</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=l1BCv3qqW4A&index=20&list=PLB7540DEDD482705B\">MIT 6.042J - Independence</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=MOfhhFaQdjw&list=PLB7540DEDD482705B&index=21\">MIT 6.042J - Random Variables</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=gGlMSe7uEkA&index=22&list=PLB7540DEDD482705B\">MIT 6.042J - Expectation I</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=oI9fMUqgfxY&index=23&list=PLB7540DEDD482705B\">MIT 6.042J - Expectation II</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=q4mwO2qS2z4&index=24&list=PLB7540DEDD482705B\">MIT 6.042J - Large Deviations</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=56iFMY8QW2k&list=PLB7540DEDD482705B&index=25\">MIT 6.042J - Random Walks</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=oDniZCmNmNw&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=19\">Simonson: Approximation Algorithms (video)</a></p>\n</li>\n<li><p><strong>String Matching</strong></p>\n<ul>\n<li>Rabin-Karp (videos):<ul>\n<li><a href=\"https://www.coursera.org/lecture/data-structures/rabin-karps-algorithm-c0Qkw\">Rabin Karps Algorithm</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/nYrc8/optimization-precomputation\">Precomputing</a></li>\n<li><a href=\"https://www.coursera.org/learn/data-structures/lecture/h4ZLc/optimization-implementation-and-analysis\">Optimization: Implementation and Analysis</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=BRO7mVIFt08&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=9\">Table Doubling, Karp-Rabin</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=w6nuXg0BISo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&index=32\">Rolling Hashes, Amortized Analysis</a></li>\n</ul>\n</li>\n<li>Knuth-Morris-Pratt (KMP):<ul>\n<li><a href=\"https://www.youtube.com/watch?v=5i7oKodCRJo\">TThe Knuth-Morris-Pratt (KMP) String Matching Algorithm</a></li>\n</ul>\n</li>\n<li>Boyer‚ÄìMoore string search algorithm<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_string_search_algorithm\">Boyer-Moore String Search Algorithm</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=QDZpzctPf10\">Advanced String Searching Boyer-Moore-Horspool Algorithms (video)</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.coursera.org/learn/algorithms-on-strings/home/week/1\">Coursera: Algorithms on Strings</a><ul>\n<li>starts off great, but by the time it gets past KMP it gets more complicated than it needs to be</li>\n<li>nice explanation of tries</li>\n<li>can be skipped</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Sorting</strong></p>\n<ul>\n<li>Stanford lectures on sorting:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=ENp00xylP7c&index=15&list=PLFE6E58F856038C69\">Lecture 15 | Programming Abstractions (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=y4M9IVgrVKo&index=16&list=PLFE6E58F856038C69\">Lecture 16 | Programming Abstractions (video)</a></li>\n</ul>\n</li>\n<li>Shai Simonson, <a href=\"http://www.aduni.org/\">Aduni.org</a>:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=odNJmw5TOEE&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=2\">Algorithms - Sorting - Lecture 2 (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hj8YKFTFKEE&list=PLFDnELG9dpVxQCxuD-9BSy2E7BWY3t5Sm&index=3\">Algorithms - Sorting II - Lecture 3 (video)</a></li>\n</ul>\n</li>\n<li>Steven Skiena lectures on sorting:<ul>\n<li><a href=\"https://www.youtube.com/watch?v=jUf-UQ3a0kg&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=8\">CSE373 2020 - Mergesort&#x2F;Quicksort (video)</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=0ksyQKmre84&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=9\">CSE373 2020 - Linear Sorting (video)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Video-Series\"><a href=\"#Video-Series\" class=\"headerlink\" title=\"Video Series\"></a>Video Series</h2><p>Sit back and enjoy.</p>\n<ul>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLrmLmBdmIlpsHaNTPP_jHHDx_os9ItYXr\">List of individual Dynamic Programming problems (each is short)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL038BE01D3BAEFDB0\">x86 Architecture, Assembly, Applications (11 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLE7DDD91010BC51F8\">MIT 18.06 Linear Algebra, Spring 2005 (35 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL3B08AE665AB9002A\">Excellent - MIT Calculus Revisited: Single Variable Calculus</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=22hwcnXIGgk&list=PLOtl7M3yp-DX6ic0HGT0PUX_wiNmkWkXx&index=1\">Skiena lectures from Algorithm Design Manual - CSE373 2020 - Analysis of Algorithms (26 videos)</a></p>\n</li>\n<li><p><a href=\"https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iAlnI-BQr9hjqADPBtujFJd\">UC Berkeley 61B (Spring 2014): Data Structures (25 videos)</a></p>\n</li>\n<li><p><a href=\"https://archive.org/details/ucberkeley-webcast-PL4BBB74C7D2A1049C\">UC Berkeley 61B (Fall 2006): Data Structures (39 videos)</a></p>\n</li>\n<li><p><a href=\"https://archive.org/details/ucberkeley-webcast-PL-XXv-cvA_iCl2-D-FS5mk0jFF6cYSJs_\">UC Berkeley 61C: Machine Structures (26 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLJ9pm_Rc9HesnkwKlal_buSIHA-jTZMpO\">OOSE: Software Dev Using UML and Java (21 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLDSlqjcPpoL64CJdF0Qee5oWqGS6we_Yu\">MIT 6.004: Computation Structures (49 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL5PHm2jkkXmi5CxxI7b3JCL1TWybTDtKq\">Carnegie Mellon - Computer Architecture Lectures (39 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=HtSuA80QTyo&list=PLUl4u3cNGP61Oq3tWYp6V_F-5jb5L2iHb&nohtml5=False\">MIT 6.006: Intro to Algorithms (47 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=zm2VP0kHl1M&list=PL6535748F59DCA484\">MIT 6.033: Computer System Engineering (22 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLUl4u3cNGP63gFHB6xb-kVBiQHYe_4hSi\">MIT 6.034 Artificial Intelligence, Fall 2010 (30 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=L3LMbpZIKhQ&list=PLB7540DEDD482705B\">MIT 6.042J: Mathematics for Computer Science, Fall 2010 (25 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=2P-yW7LQr08&list=PLUl4u3cNGP6317WaSNfmCvGym2ucw3oGp\">MIT 6.046: Design and Analysis of Algorithms (34 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=cQP8WApzIQQ&list=PLrw6a1wE39_tb2fErI4-WkMbsvGQk9_UB\">MIT 6.824: Distributed Systems, Spring 2020 (20 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=T0yzrZL1py0&list=PLUl4u3cNGP61hsJNdULdudlRL493b-XZf&index=1\">MIT 6.851: Advanced Data Structures (22 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL6ogFv-ieghdoGKGg2Bik3Gl1glBTEu8c\">MIT 6.854: Advanced Algorithms, Spring 2016 (24 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL2SOU6wwxB0uP4rJgf5ayhHWgw7akUWSf\">Harvard COMPSCI 224: Advanced Algorithms (25 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/watch?v=GqmQg-cszw4&index=1&list=PLUl4u3cNGP62K2DjQLRxDNRi0z2IRWnNh\">MIT 6.858 Computer Systems Security, Fall 2014</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL9D558D49CA734A02\">Stanford: Programming Paradigms (27 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PL6N5qY2nvvJE8X75VkXglSrVhLv1tVcfy\">Introduction to Cryptography by Christof Paar</a></p>\n<ul>\n<li><a href=\"http://www.crypto-textbook.com/\">Course Website along with Slides and Problem Sets</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://www.youtube.com/playlist?list=PLLssT5z_DsK9JDLcT8T62VtzwyW9LNepV\">Mining Massive Datasets - Stanford University (94 videos)</a></p>\n</li>\n<li><p><a href=\"https://www.youtube.com/user/DrSaradaHerke/playlists?shelf_id=5&view=50&sort=dd\">Graph Theory by Sarada Herke (67 videos)</a></p>\n</li>\n</ul>\n<h2 id=\"Computer-Science-Courses\"><a href=\"#Computer-Science-Courses\" class=\"headerlink\" title=\"Computer Science Courses\"></a>Computer Science Courses</h2><ul>\n<li><a href=\"https://github.com/open-source-society/computer-science\">Directory of Online CS Courses</a></li>\n<li><a href=\"https://github.com/prakhar1989/awesome-courses\">Directory of CS Courses (many with online lectures)</a></li>\n</ul>\n<h2 id=\"Algorithms-implementation\"><a href=\"#Algorithms-implementation\" class=\"headerlink\" title=\"Algorithms implementation\"></a>Algorithms implementation</h2><ul>\n<li><a href=\"https://algs4.cs.princeton.edu/code\">Multiple Algorithms implementation by Princeton University</a></li>\n</ul>\n<h2 id=\"Papers\"><a href=\"#Papers\" class=\"headerlink\" title=\"Papers\"></a>Papers</h2><ul>\n<li><a href=\"https://www.cs.cmu.edu/~crary/819-f09/\">Love classic papers?</a></li>\n<li><a href=\"http://spinroot.com/courses/summer/Papers/hoare_1978.pdf\">1978: Communicating Sequential Processes</a><ul>\n<li><a href=\"https://godoc.org/github.com/thomas11/csp\">implemented in Go</a></li>\n</ul>\n</li>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//archive/gfs-sosp2003.pdf\">2003: The Google File System</a><ul>\n<li>replaced by Colossus in 2012</li>\n</ul>\n</li>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf\">2004: MapReduce: Simplified Data Processing on Large Clusters</a><ul>\n<li>mostly replaced by Cloud Dataflow?</li>\n</ul>\n</li>\n<li><a href=\"https://static.googleusercontent.com/media/research.google.com/en//archive/bigtable-osdi06.pdf\">2006: Bigtable: A Distributed Storage System for Structured Data</a></li>\n<li><a href=\"https://research.google.com/archive/chubby-osdi06.pdf\">2006: The Chubby Lock Service for Loosely-Coupled Distributed Systems</a></li>\n<li><a href=\"http://s3.amazonaws.com/AllThingsDistributed/sosp/amazon-dynamo-sosp2007.pdf\">2007: Dynamo: Amazon‚Äôs Highly Available Key-value Store</a><ul>\n<li>The Dynamo paper kicked off the NoSQL revolution</li>\n</ul>\n</li>\n<li><a href=\"https://www.akkadia.org/drepper/cpumemory.pdf\">2007: What Every Programmer Should Know About Memory (very long, and the author encourages skipping of some sections)</a></li>\n<li>2012: AddressSanitizer: A Fast Address Sanity Checker:<ul>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37752.pdf\">paper</a></li>\n<li><a href=\"https://www.usenix.org/conference/atc12/technical-sessions/presentation/serebryany\">video</a></li>\n</ul>\n</li>\n<li>2013: Spanner: Google‚Äôs Globally-Distributed Database:<ul>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//archive/spanner-osdi2012.pdf\">paper</a></li>\n<li><a href=\"https://www.usenix.org/node/170855\">video</a></li>\n</ul>\n</li>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43790.pdf\">2015: Continuous Pipelines at Google</a></li>\n<li><a href=\"https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/44686.pdf\">2015: High-Availability at Massive Scale: Building Google‚Äôs Data Infrastructure for Ads</a></li>\n<li><a href=\"http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43835.pdf\">2015: How Developers Search for Code: A Case Study</a></li>\n<li>More papers: <a href=\"https://github.com/0voice/computer_expert_paper\">1,000 papers</a></li>\n</ul>\n",
            "tags": [
                "computer-science",
                "study-plan"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/computer-networks-notes/",
            "url": "https://samirpaul.in/posts/computer-networks-notes/",
            "title": "Computer Networks Notes",
            "date_published": "2023-08-15T04:24:52.000Z",
            "content_html": "<h1 id=\"Chapter-1-Computer-Networks-and-the-Internet\"><a href=\"#Chapter-1-Computer-Networks-and-the-Internet\" class=\"headerlink\" title=\"Chapter 1: Computer Networks and the Internet\"></a>Chapter 1: Computer Networks and the Internet</h1><h2 id=\"1-1-What-is-the-Internet\"><a href=\"#1-1-What-is-the-Internet\" class=\"headerlink\" title=\"1.1 What is the Internet?\"></a>1.1 What is the Internet?</h2><h3 id=\"1-1-1-A-nuts-and-bolts-description\"><a href=\"#1-1-1-A-nuts-and-bolts-description\" class=\"headerlink\" title=\"1.1.1 A nuts-and-bolts description\"></a>1.1.1 A nuts-and-bolts description</h3><p>The Internet is a computer networks that interconnects hundreds of millions of computing devices through the world. Today not only computers and workstation are being connected to the network, therefore the term <em>computer network</em> may sound a bit dated.</p>\n<p>All the devices connected to the Internet are called <strong>hosts</strong> or <strong>end systems</strong>. End systems are connected together by a network of <strong>communication links</strong> and <strong>packets switches</strong>.</p>\n<p>Different links can transmit data at different rates, with the <strong>transmission rate</strong> of a link measured in bits&#x2F;second.</p>\n<p>When one end system has data to send to another end system, the sending end system <em>segments</em> the data and adds <em>header bytes</em> to each segment. The resulting packages of information, called <strong>packets</strong>, are then sent through the network to the destination and system where they a reassembled into the original data.</p>\n<p>A packet switch takes a packet arriving on one of its incoming communication links and forwards that packet on one of its outgoing communication links. The two most prominent types of packets switches are <strong>routers</strong> and <strong>link switches</strong>. The sequence of communication links and packet switches traversed by a packet from the sending end system to the receiving end system is known as <strong>route</strong> or <strong>path</strong>.</p>\n<p>End systems access the Internet through <strong>Internet Service Providers (ISPs)</strong>, including residential ISPs (cable or phone company), corporate, university ISPs ‚Ä¶<br>Each ISP in itself is a network of packet switches and communication links.<br><em>Lower tier</em> (which interconnect end-systems) ISPs are interconnected through national and international <em>upper tier</em> ISP. An upper-tier ISP consists of high speed routers interconnected with high-speed fiber-optic links. Each ISP network is managed independently.</p>\n<p>End systems, packet switches and other pieces of the Internet run <strong>protocols</strong> that control the sending and receiving of information within the Internet.</p>\n<h3 id=\"1-1-2-A-Services-Description\"><a href=\"#1-1-2-A-Services-Description\" class=\"headerlink\" title=\"1.1.2 A Services Description\"></a>1.1.2 A Services Description</h3><p>The Internet can be described as <em>an infrastructure that provides services to applications</em>. These applications (Web, social networks, VoIP‚Ä¶) are said to be <strong>distributed</strong> since they involve multiple end systems that exchange data with each other.<br><strong>Internet applications run on end systems, not in the packet switches or routers</strong>, packet switches facilitate the exchange of data, but they are not concerned with the application that is the source or sink of data.</p>\n<p>End systems attached to the Internet provide and <strong>Application Programming Interface (API)</strong> that specifies how a program running on one end system asks the Internet infrastructure to deliver data to a specific destination program running on another end system.</p>\n<h3 id=\"1-1-3-What-Is-a-Protocol\"><a href=\"#1-1-3-What-Is-a-Protocol\" class=\"headerlink\" title=\"1.1.3 What Is a Protocol?\"></a>1.1.3 What Is a Protocol?</h3><p>All the activity in the Internet that involves two or more communicating remote entities is governed by a protocol.</p>\n<p><strong>A protocol defines the format and the order of messages exchanged between two or more communicating entities, as weel as the actions taken on the trasmission and&#x2F;or receipt of a message or other event</strong></p>\n<h2 id=\"1-2-The-Network-Edge\"><a href=\"#1-2-The-Network-Edge\" class=\"headerlink\" title=\"1.2 The Network Edge\"></a>1.2 The Network Edge</h2><p>Computers and other devices connected to the Internet are often referred to as <em>end systems</em> as they sit at the edge of the Internet. They are also called <em>hosts</em> as they host, run, applications programs such as a Web Browser or an email client.</p>\n<p>Hosts are sometimes further divided into two categories: <em>clients</em> and <em>servers</em>. The former being desktop, mobile pcs, smartphones, the latter being powerful machines that store and distribute Web pages, streams‚Ä¶<br>Nowadays most of the servers reside in large <em>data centers</em></p>\n<h3 id=\"1-2-1-Access-Networks\"><a href=\"#1-2-1-Access-Networks\" class=\"headerlink\" title=\"1.2.1 Access Networks\"></a>1.2.1 Access Networks</h3><p>They are the networks that physically connect end systems to the first router on a path from the end system to any other distant end system.<br>Examples: mobile network, national or global ISP, local or regional ISP, home networks enterprise networks.</p>\n<h4 id=\"Home-Access-DSL-Cable-FITH-Dial-Up-and-Satellite\"><a href=\"#Home-Access-DSL-Cable-FITH-Dial-Up-and-Satellite\" class=\"headerlink\" title=\"Home Access: DSL, Cable, FITH, Dial-Up and Satellite\"></a>Home Access: DSL, Cable, FITH, Dial-Up and Satellite</h4><p>Today, the two most prevalent types of broadband residential access are <strong>digital subscriber line (DSL)</strong> and <strong>cable</strong>.</p>\n<p>A residence typically obtains DSL access from the telephone company (telco) that provides its wired local phone access. The customer‚Äôs telco is therefore its ISP.<br>DSL modem use the existing telephone lines to exchange data with DSLAMs (digital subscriber line access multiplexer) located in the telco local central office. The DSL modem takes digital data and translates it to high-frequency tones for transmission over telephone wires, these analog signals from many houses are translated back into digital format at the DSLAM. The use of different frequencies allows the phone line to carry a high-speed downstream channel, a medium-speed upstream channel and an ordinary two-way telephone channel.<br>Hundreds or even thousands of households connect to a single DSLAM.</p>\n<p>DSL: 24 Mbps downstream and 2.5 Mbps upstream (MAX VALUES). Because of the difference between these two values, the access is said to be <strong>asymmetric</strong>.</p>\n<p><strong>Cable Internet</strong> access makes use of the cable television company‚Äôs existing cable television infrastructure. Cable modems connect to CMTS (Cablem Modem Termination System) which does the same job the DSLAM does for phone lines. The access is typically asymmetric.<br>CABLE: 42.8 Mbps downstream and 30.7 Mbps upstream (MAX VALUES).<br>Cable Internet access is a shared broadcast medium: each packet travels downstream on every link to every home and viceversa. For this, if several users are simultaneously using the downstream channel, the actual rate will be significantly lower.</p>\n<p>Another up-and-coming technology that promises very high speeds is <strong>fiber to the home (FTTH)</strong>. The concept is simple: provide an optical fiber path from the Central Office (CO)</p>\n<h4 id=\"Access-in-the-Enterprise-and-the-Home-Ethernet-and-WiFi\"><a href=\"#Access-in-the-Enterprise-and-the-Home-Ethernet-and-WiFi\" class=\"headerlink\" title=\"Access in the Enterprise and the Home: Ethernet and WiFi\"></a>Access in the Enterprise and the Home: Ethernet and WiFi</h4><p>On corporate and university campuses, and increasingly in home settings, a <strong>Local Area Network (LAN)</strong> is used to connect an end system to the edge router.<br>Ethernet is by far the most prevalent access technology is corporate, university and home networks. Ethernet uses twisted-pair copper wire to connect to an Ethernet switch which is connected into the larger Internet.<br>The Internet is increasingly accessed wirelessly: wireless users transmit&#x2F;receive packets to&#x2F;from an access point connected into the enterprise‚Äôs network which in turn is connected to the wired Internet.</p>\n<h4 id=\"Wide-Area-Wireless-Access-3G-and-LTE\"><a href=\"#Wide-Area-Wireless-Access-3G-and-LTE\" class=\"headerlink\" title=\"Wide-Area Wireless Access: 3G and LTE\"></a>Wide-Area Wireless Access: 3G and LTE</h4><p>Smartphones and Tablets employ the same wireless infrastructure used for cellular telephony to send&#x2F;receive packets through a base station operated by the cellular network provider. Third generation (3G) wireless and fourth generation (4G) of wide-area network are being deployed. LTE (‚ÄúLong-Term Evolution‚Äù) has its root in 3G and can potentially achieve rates in excess of 10 Mbps.</p>\n<h3 id=\"1-2-2-Physical-Media\"><a href=\"#1-2-2-Physical-Media\" class=\"headerlink\" title=\"1.2.2 Physical Media\"></a>1.2.2 Physical Media</h3><p>The book talks about it in detail but we haven‚Äôt talked about it in class</p>\n<p>A bit, when traveling from source to destination, passes through a series of transmitter-receiver pairs, for each pair, the bit is sent by propagating electromagnetic waves or optical pulses across a <strong>physical medium</strong>. This can take many shapes and forms and doesn‚Äôt have to be of the same type for each transmitter-receiver pair along the path.<br>Physical media fall into two categories:</p>\n<ul>\n<li><strong>guided media</strong>: the waves are guided along a solid medium (fiber-optic cable, twisted-pair copper wire, coaxial cable)</li>\n<li><strong>unguided media</strong>: the waves propagate in the atmosphere and in outer space (wireless LAN, digital satellite channel)</li>\n</ul>\n<h2 id=\"1-3-The-Network-Core\"><a href=\"#1-3-The-Network-Core\" class=\"headerlink\" title=\"1.3 The Network Core\"></a>1.3 The Network Core</h2><h3 id=\"1-3-1-Packet-Switching\"><a href=\"#1-3-1-Packet-Switching\" class=\"headerlink\" title=\"1.3.1 Packet Switching\"></a>1.3.1 Packet Switching</h3><p>In a network application, end systems exchange <strong>messages</strong> with each other. To send a message from a source end system to a destination end system, the source breaks long messages into smaller chunks of data known as <strong>packets</strong>.<br>Between source and destination, each packet travels through communication links and <strong>packet switches</strong> (for which there are two predominant types, <strong>routers</strong> and <strong>link-layer switches</strong>).<br>Packets are transmitted over each communication link at a rate equal to the <em>full</em> transmission rate of the link. So, if a source end system or a packet switch is send a packet of L bits over a link with transmission rate R bits&#x2F;sec, then the time to transmit the packet is L&#x2F;R seconds.</p>\n<h4 id=\"Store-and-forward-Transmission\"><a href=\"#Store-and-forward-Transmission\" class=\"headerlink\" title=\"Store-and-forward Transmission\"></a>Store-and-forward Transmission</h4><p>Most packet switches use <strong>store-and-forward transmission</strong> at the inputs to the links. Store-and-forward transmission means that the packet switch must receive the entire packet before it can begin to transmit the first bit of the packet onto the outbound link. The link must <strong>buffer</strong> (‚Äústore‚Äù) the packet‚Äôs bits and only after the router has received all of the packet‚Äôs bits can it begin to transmit (‚Äúforward‚Äù) the packet onto the outbound link.</p>\n<h4 id=\"Queuing-Delays-and-Packet-Loss\"><a href=\"#Queuing-Delays-and-Packet-Loss\" class=\"headerlink\" title=\"Queuing Delays and Packet Loss\"></a>Queuing Delays and Packet Loss</h4><p>Each packet switch has multiple links attached to it. For each attached link, the packet switch has an <strong>output buffer</strong> (or <strong>output queue</strong>) which stores packets that the router is about to send into that link.<br>If an arriving packet needs to be transmitted onto a link but finds the link busy with the transmission of another packet, the arriving packet must wait in the output buffer. Thus, packets suffer output buffer <strong>queuing delays</strong> which are variable and depend on the level of congestion in the network. Since the amount of buffer space is finite, an arriving packet may find the buffer completely full. In this case, <strong>packet loss</strong> will occur, either the arriving packet or one of the already queued packets will be dropped.</p>\n<h4 id=\"Forwarding-tables-and-routing-protocols\"><a href=\"#Forwarding-tables-and-routing-protocols\" class=\"headerlink\" title=\"Forwarding tables and routing protocols\"></a>Forwarding tables and routing protocols</h4><p>In the Internet, every end system has an address called an IP address. When a source end system wants to send a packet to a destination end system, the source includes the destination‚Äôs IP address in the packet‚Äôs header.<br>Each router has a <strong>forwarding table</strong> that maps destination addresses (or portions of the destination addresses) to that router‚Äôs outbound links. When a packet arrives at the router, the router examines the address and searches its forwarding table, using this destination address, to find the appropriate outbound link.<br>A number of special <strong>routing protocols</strong> are used to automatically set the forwarding tables.</p>\n<h3 id=\"1-3-2-Circuit-Switching\"><a href=\"#1-3-2-Circuit-Switching\" class=\"headerlink\" title=\"1.3.2 Circuit Switching\"></a>1.3.2 Circuit Switching</h3><p>In circuit-switched networks, the resources needed along a path(buffers, link transmission rate) to provide for communication between the end systems are <strong>reserved</strong> for the duration of the communication sessions.<br>When two hosts want to communicate, the network establishes a <strong>dedicated end-to-end connection</strong> between them.</p>\n<h4 id=\"Multiplexing-in-Circuit-Switched-Networks\"><a href=\"#Multiplexing-in-Circuit-Switched-Networks\" class=\"headerlink\" title=\"Multiplexing in Circuit-Switched Networks\"></a>Multiplexing in Circuit-Switched Networks</h4><p>A circuit in a link is implemented with either <strong>frequency-division multiplexing (FDM)</strong> or <strong>time-division multiplexing (TDM)</strong>.<br>With FDM, the frequency spectrum of a link is divided up among the connections established across the link. The width of the band is called the <strong>bandwidth</strong>.<br>For a TDM link, time is divided into frames of fixed duration, and each frame is divided into a fixed number of time slots.</p>\n<h4 id=\"Packet-Switching-Versus-Circuit-Switching\"><a href=\"#Packet-Switching-Versus-Circuit-Switching\" class=\"headerlink\" title=\"Packet Switching Versus Circuit Switching\"></a>Packet Switching Versus Circuit Switching</h4><p>Packet switching is more flexible, uses resources efficiently and is simpler to implement (even if it requires congestion control).<br>Circuit switching offers performance guarantees but uses resources inefficiently</p>\n<h3 id=\"1-3-3-A-Network-of-Networks\"><a href=\"#1-3-3-A-Network-of-Networks\" class=\"headerlink\" title=\"1.3.3 A Network of Networks\"></a>1.3.3 A Network of Networks</h3><p>To create the Internet, ISPs must be interconnected, thus creating a <em>network of networks</em>.<br>Much of the evolution of the structure of the Internet is driven by economics and national policy, rather than by performance consideration.</p>\n<p>Today‚Äôs Internet is complex, consisting of a dozen or so tier-1 ISPs and hundreds of thousands of lower-tier ISPs. The ISPs are diverse in their coverage, with some spanning multiple continents and oceans, and others limited to narrow geographic regions. The lower-tier ISPs connect to the higher-tier ISPs and the higher-tier ISPs interconnect with one another. Users and content providers are customers of lower-tier ISPs and lower-tier ISPs are customers of higher-tier ISPs. Recently, major content providers (Google) have also created their own networks and connect directly into lower-tier ISPs where possible.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-network_of_networks.png\" alt=\"network_of_networks\"></p>\n<h2 id=\"1-4-Delay-Loss-and-Throughput-in-Packet-Switched-Networks\"><a href=\"#1-4-Delay-Loss-and-Throughput-in-Packet-Switched-Networks\" class=\"headerlink\" title=\"1.4 Delay, Loss and Throughput in Packet-Switched Networks\"></a>1.4 Delay, Loss and Throughput in Packet-Switched Networks</h2><p>Computer networks necessarily constrain <strong>throughput</strong> (the amount of data per second that can be transferred) between end system, introduce delays between end systems and can actually lose packets.</p>\n<h3 id=\"1-4-1-Overview-of-Delay-in-Packet-Switched-networks\"><a href=\"#1-4-1-Overview-of-Delay-in-Packet-Switched-networks\" class=\"headerlink\" title=\"1.4.1 Overview of Delay in Packet-Switched networks\"></a>1.4.1 Overview of Delay in Packet-Switched networks</h3><p>As a packet travels from one node (host or router) to the subsequent host along his path, it suffers from several types of delays at <em>each</em> node along the path.</p>\n<h4 id=\"Types-of-Delay\"><a href=\"#Types-of-Delay\" class=\"headerlink\" title=\"Types of Delay\"></a>Types of Delay</h4><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-type_of_delays.png\" alt=\"type_of_delays\"></p>\n<h5 id=\"Processing-Delay\"><a href=\"#Processing-Delay\" class=\"headerlink\" title=\"Processing Delay\"></a>Processing Delay</h5><p>The <strong>processing delay</strong> consists of the time required to examine the packet‚Äôs header and determine where to direct the packet. It may also include other factors, such as the time needed to check for bit-level errors occurred during transmission.<br>They typically are of the order of microseconds or less.<br>After processing the packet is sent to the queue preceding the link to the next router</p>\n<h5 id=\"Queuing-Delay\"><a href=\"#Queuing-Delay\" class=\"headerlink\" title=\"Queuing Delay\"></a>Queuing Delay</h5><p>At the queue, the packet experiences a <strong>queuing delay</strong> as it waits to be transmitted onto the link. It depends on the number of earlier-arriving packets, therefore if the queue is empty, then the packet‚Äôs queuing delay will be 0.<br>Typically of the order of microseconds or milliseconds.</p>\n<h5 id=\"Transmission-delays\"><a href=\"#Transmission-delays\" class=\"headerlink\" title=\"Transmission delays\"></a>Transmission delays</h5><p>If the length of the packet is <em>L</em> bits, and the <strong>transmission rate</strong> of the link is <em>R</em> bits&#x2F;sec, then the <strong>transmission delay</strong> is <em>L&#x2F;R</em>.<br>This is the amount of time required to push (transmit) all of the packet‚Äôs bits into the link.<br>Typically on the order of microseconds to milliseconds.</p>\n<h5 id=\"Propagation-Delay\"><a href=\"#Propagation-Delay\" class=\"headerlink\" title=\"Propagation Delay\"></a>Propagation Delay</h5><p>The time required to propagate a bit from the beginning of the link to the next router is the <strong>propagation delay</strong>. The bit propagates at the propagation speed of the link, which depends on the physical medium of the link.<br>The propagation delay is the distance between two routers divided by the propagation speed of the link.</p>\n<h5 id=\"Total-nodal-delay\"><a href=\"#Total-nodal-delay\" class=\"headerlink\" title=\"Total nodal delay\"></a>Total nodal delay</h5><p>it is the summation of the previous delays</p>\n<h3 id=\"1-4-2-Queuing-Delay-and-Packet-Loss\"><a href=\"#1-4-2-Queuing-Delay-and-Packet-Loss\" class=\"headerlink\" title=\"1.4.2 Queuing Delay and Packet Loss\"></a>1.4.2 Queuing Delay and Packet Loss</h3><p>The queuing delay depends can vary from packet to packet, therefore when characterizing queuing delay, one typically uses statistical measures, such as <em>average queuing delay, variance of queuing delay, and the probability that the queuing delay exceeds some specified value</em>.</p>\n<h4 id=\"Packet-Loss\"><a href=\"#Packet-Loss\" class=\"headerlink\" title=\"Packet Loss\"></a>Packet Loss</h4><p>A queue preceding a link has finite capacity. If a packet finds a full queue, then the router will <strong>drop</strong> it, the packet will be lost.<br>The fraction of lost packets increases as the traffic intensity increases.</p>\n<h3 id=\"1-4-3-End-to-End-Delay\"><a href=\"#1-4-3-End-to-End-Delay\" class=\"headerlink\" title=\"1.4.3 End-to-End Delay\"></a>1.4.3 End-to-End Delay</h3><p>Let‚Äôs now consider the <strong>total delay, from source to destination</strong> (not only the nodal delay). Let‚Äôs suppose there are <em>N-1</em> routers between the source host and the destination host, then the nodal delays accumulate and give an <strong>end-to-end delay</strong>:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">d(end_end) = N * [d(proc) + d(queue) + d(trans) + d(prop)]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-4-Throughput-in-Computer-Networks\"><a href=\"#1-4-4-Throughput-in-Computer-Networks\" class=\"headerlink\" title=\"1.4.4 Throughput in Computer Networks\"></a>1.4.4 Throughput in Computer Networks</h3><p>Another critical performance measure in computer networks is <em>end-to-end throughput</em>.<br>The <strong>instantaneous throughput</strong> at any instant of time is the rate (in bits&#x2F;sec) at which host B is receiving a file.<br>If the file consists of <em>F</em> bits and the transfers takes <em>T</em> seconds to transfer the whole file, then the <strong>average throughput</strong> of the file is <em>F&#x2F;T bits&#x2F;sec</em>.<br>For a simple two-link network, the throughput is the min of all the throughputs, that is the transmission rate of the <strong>bottleneck link</strong>.<br>Therefore, the constraining factor for throughput in today‚Äôs Internet is typically the <em>access network</em>.</p>\n<h2 id=\"1-5-Protocol-Layers-and-Their-Service-Models\"><a href=\"#1-5-Protocol-Layers-and-Their-Service-Models\" class=\"headerlink\" title=\"1.5 Protocol Layers and Their Service Models\"></a>1.5 Protocol Layers and Their Service Models</h2><h3 id=\"1-5-1-Layered-Architecture\"><a href=\"#1-5-1-Layered-Architecture\" class=\"headerlink\" title=\"1.5.1 Layered Architecture\"></a>1.5.1 Layered Architecture</h3><p>A layered architecture allows us to discuss a well-defined, specific part of a large and complex system. This simplification itself is of considerable value by providing <em>modularity</em>, making it much easier to change the implementation of the service provided by the layer: as long as the layer provides the same service to the layer above it, and uses the same services from the layer below it, the remainder of the system remains unchanged when a layer‚Äôs implementation is changed.</p>\n<h4 id=\"Protocol-Layering\"><a href=\"#Protocol-Layering\" class=\"headerlink\" title=\"Protocol Layering\"></a>Protocol Layering</h4><p>To provide structure to the design of network protocols, the network designers organize protocols in <strong>layers</strong>. <strong>Each protocol belongs to one of the layers</strong>. We are interested in the <strong>services</strong> that a layer offers to the layer above, <strong>service model</strong> of a layer.<br>When taken together, the protocols of the various layers are called the <strong>protocol stack</strong>. The Internet protocol stack consists of five layers:</p>\n<ul>\n<li>Application</li>\n<li>Transport</li>\n<li>Network</li>\n<li>Link</li>\n<li>Physical</li>\n</ul>\n<h5 id=\"Application-Layer\"><a href=\"#Application-Layer\" class=\"headerlink\" title=\"Application Layer\"></a>Application Layer</h5><p>Where network applications and their applications-layer protocols reside.<br>The Internet‚Äôs application layer includes many protocols: HTTP, SMTP, FTP, DNS.<br>An application-layer protocol is distributed over multiple end systems, with the application in one end system using the protocol to exchange packets of information with the application in another end system. This packet of information at the application layer is called <strong>message</strong>.</p>\n<h5 id=\"Transport-Layer\"><a href=\"#Transport-Layer\" class=\"headerlink\" title=\"Transport Layer\"></a>Transport Layer</h5><p>It transports application-layer messages between application endpoints.<br>In the Internet there are two transport protocols: TCP and UDP.<br>TCP provides a connection-oriented service to its application: the service includes guaranteed delivery of application-layer messages to the destination and flow control unit. TCP also breaks long messages into shorter segments and provides a <strong>congestion-control mechanism</strong>, so that a source throttles its transmission rate when the network is congested.<br>HTTP and SMTP use TCP</p>\n<p>UDP provides a connectionless service to its applications: it‚Äôs a no-frills service that provides no guarantees, no reliability, no flow control and no congestion control.<br>A transport-layer packet is called <strong>segment</strong><br>Skype uses UDP (speed required)</p>\n<h5 id=\"Network-Layer\"><a href=\"#Network-Layer\" class=\"headerlink\" title=\"Network Layer\"></a>Network Layer</h5><p>It is responsible for moving network-layer packets known as <strong>datagrams</strong> from one host to another.<br>The Internet‚Äôs network layer includes the IP Protocol. There is only one IP Protocol and all the Internet components that have a network layer must run it.<br>The Internet‚Äôs network layer also contains routing protocols that determine the routes that datagrams take between sources and destinations.<br>The Internet has many routing protocols.<br>Often it is simply referred to as the IP protocols, forgetting that it includes routing too.</p>\n<h5 id=\"Link-Layer\"><a href=\"#Link-Layer\" class=\"headerlink\" title=\"Link Layer\"></a>Link Layer</h5><p>To move a packet from one node to the next, the network layer relies on the services of the link layer.<br>The services provided by the link layer depend on the specific link-layer protocol that is employed over the link.<br>Examples are Ethernet, WiFi.<br>We will refer to the link-layer packets as <strong>frames</strong></p>\n<h5 id=\"Physical-Layer\"><a href=\"#Physical-Layer\" class=\"headerlink\" title=\"Physical Layer\"></a>Physical Layer</h5><p>The job of the physical layer is to move the individual bits within the frame from one node to the next.<br>The protocols are link dependent and further depend of the actual transmission medium of the link.</p>\n<h3 id=\"1-5-2-Encapsulation\"><a href=\"#1-5-2-Encapsulation\" class=\"headerlink\" title=\"1.5.2 Encapsulation\"></a>1.5.2 Encapsulation</h3><p>Routers and link-layer switches are both packet switches but routers and link-layer switches do not implement all of the layers in the protocol stack: link-layer switches implement Physical and Link while router add the Network Layer too.</p>\n<p>From the Application Layer, the message passes to the transport layer, which appends additional information to it (the <strong>Header</strong>) that will be used by the receiver-side transport layer. The transport layer then adds its own header and passes the datagram to the link layer which adds it own link-layer header information.<br>Thus, we see that at each layer, a packet has two types of fields: <strong>header fields</strong> and a <strong>payload field</strong>, the payload typically being the packet from the layer above.</p>\n<p>The process of encapsulation can be more complex: for example a large message may be divided into multiple transport-layer segments, which will be divided into multiple datagrams‚Ä¶.</p>\n<h2 id=\"1-6-Networks-Under-Attack\"><a href=\"#1-6-Networks-Under-Attack\" class=\"headerlink\" title=\"1.6 Networks Under Attack\"></a>1.6 Networks Under Attack</h2><h3 id=\"Malware\"><a href=\"#Malware\" class=\"headerlink\" title=\"Malware\"></a>Malware</h3><p>Along with all the good files we exchange on the Internet, come malicious software, collectively known as <strong>malware</strong> that can also enter and infect our devices.<br>Once a device infected, the malware can do all kinds of evil things: deleting files, install spyware‚Ä¶<br>A compromised host may also be enrolled in a network of thousands of similarly compromised devices, known as <strong>botnet</strong> which can be used for spam or distributed denial-of-service.<br>Much of the malware is <strong>self-replicating</strong>: it seeks entry into other hosts from the infected machines. Malware can spread in the from of a virus or a worm.</p>\n<ul>\n<li><strong>Viruses</strong> are malware that requires some form of user interaction to infect the user‚Äôs device.</li>\n<li><strong>Worms</strong> are malware that can enter a device without any explicit user interaction.</li>\n</ul>\n<h3 id=\"DoS\"><a href=\"#DoS\" class=\"headerlink\" title=\"DoS\"></a>DoS</h3><p>Denial-of-Service attacks render a network, host, or other piece of infrastructure unusable by legittimate users. Most of them fall into one of the three categories:</p>\n<ul>\n<li><em>Vulnerability Attack</em>: a few well-crafted messages are sent to a vulnerable application or operating system running on the targeted host. The service might stop or the host might crash.</li>\n<li><em>Bandwidth flooding</em>: a deluge of packets is sent to the targeted host, so many packets that the target‚Äôs access link becomes clogged preventing legitimate packets from reaching the server</li>\n<li><em>Connection flooding</em>: a large number of half-open or fully open TCP connections are established at the targeted host, which can become so bogged down that it stops accepting legitimate connections.</li>\n</ul>\n<p>In a <strong>distributed DoS</strong> (<strong>DDoS</strong>) attack the attacker controls multiple sources and has each source blast traffic at the target.</p>\n<h3 id=\"Sniffing\"><a href=\"#Sniffing\" class=\"headerlink\" title=\"Sniffing\"></a>Sniffing</h3><p>A passive receiver can record a copy of every packet that passes through the network. It is then called a <strong>packet sniffer</strong>.<br>Because packet sniffers are <em>passive</em> (they do not inject packets into the channel), they are difficult to detect. Some of the best defenses against packet sniffing involve cryptography.</p>\n<h3 id=\"Spoofing\"><a href=\"#Spoofing\" class=\"headerlink\" title=\"Spoofing\"></a>Spoofing</h3><p>The ability to inject packets into the Internet with a false source address is known as <strong>IP Spoofing</strong> and is but one of many ways in which one user can masquerade as another user.<br>To solve this problem we will need <em>end-point authentication</em>.</p>\n<h3 id=\"The-history-of-the-Internet-shaped-is-structure\"><a href=\"#The-history-of-the-Internet-shaped-is-structure\" class=\"headerlink\" title=\"The history of the Internet shaped is structure\"></a>The history of the Internet shaped is structure</h3><p>The Internet was originally designed to be based on the model of a <em>group of mutually trusting users attached to a transparent network</em>, a model in which there is no need for security. Many aspects of the original Internet architecture deeply reflect this notion of mutual trust, such as the ability for one to send a packet to any other user is the default rather than a requested&#x2F;granted capability.<br>However today‚Äôs Internet certainly does not involve ‚Äúmutually trusted users‚Äù: communication among mutually trusted users is the exception rather the rule.</p>\n<h2 id=\"History-of-Computer-Networking-and-the-Internet\"><a href=\"#History-of-Computer-Networking-and-the-Internet\" class=\"headerlink\" title=\"History of Computer Networking and the Internet\"></a>History of Computer Networking and the Internet</h2><h1 id=\"Chapter-2-Application-Layer\"><a href=\"#Chapter-2-Application-Layer\" class=\"headerlink\" title=\"Chapter 2: Application Layer\"></a>Chapter 2: Application Layer</h1><p>Network applications are the <em>raison d‚Äô√™tre</em> of a computer network. They include  text email, remote access to computers, file transfers, the WorldWideWeb (mid 90s), web searching, e-commerce, Twitter&#x2F;Facebook, Amazon, Netflix, Youtube, WoW‚Ä¶</p>\n<h2 id=\"2-1-Principles-of-Network-Applications\"><a href=\"#2-1-Principles-of-Network-Applications\" class=\"headerlink\" title=\"2.1 Principles of Network Applications\"></a>2.1 Principles of Network Applications</h2><p>At the core of network application development is writing programs that run on different <strong>end systems</strong> and communicate with each over the network. The programs running on end systems might be different (server-client architecture) or identical (Peer-to-Peer architecture).<br>Importantly we write programs that run on end systems&#x2F;hosts, not on network-core devices (routers&#x2F;link-layer switches).</p>\n<h3 id=\"2-1-1-Network-Application-Architectures\"><a href=\"#2-1-1-Network-Application-Architectures\" class=\"headerlink\" title=\"2.1.1 Network Application Architectures\"></a>2.1.1 Network Application Architectures</h3><p>From the application developer‚Äôs perspective, the network architecture is fixed and provides a specific set of services to applications.<br>The <strong>application architecture</strong>, on the other hand, is chosen by him. In choosing the application architecture, a developer will likely draw one of the two predominant architectural paradigms used in modern network applications:</p>\n<ul>\n<li><strong>Client-server architecture</strong>: there is an always on host, called the <em>server</em> which serves requests from many other hosts, called <em>clients</em>: [Web Browser and Web Server]. Clients do not communicate directly with each other. The server has a fixed, well-known address, called an IP address that clients use to connect to him. Often, a single server host is incapable of keeping up with all the requests from clients, for this reason, a <strong>data center</strong>, housing a large number of hosts, is often used to create a powerful virtual server (via <em>proxyin</em>).</li>\n<li><strong>P2P architecture</strong>: there is minimal or no reliance on dedicated servers in data centers, the application exploits direct communication between pairs of intermittently connected bots, called <em>peers</em>. They are end systems owned and controlled by users. [Bittorrent, Skype]. P2P applications provide <strong>self-scalability</strong> (the network load is distributed) They are also <strong>cost-effective</strong> since they don‚Äôt require significant infrastructure and server bandwidth. P2P face challenges:<ol>\n<li>ISP Friendly (asymmetric nature of residential ISPs)</li>\n<li>Security</li>\n<li>Incentives (convincing users to participate)</li>\n</ol>\n</li>\n</ul>\n<p>Some applications have hybrid architectures, such as for many instant messaging applications: a server keeps track of the IP addresses of users, but user-to-user messages are sent directly between users.</p>\n<h3 id=\"2-1-2-Processes-Communicating\"><a href=\"#2-1-2-Processes-Communicating\" class=\"headerlink\" title=\"2.1.2 Processes Communicating\"></a>2.1.2 Processes Communicating</h3><p>In the jargon of operating systems, it‚Äôs not programs but <strong>processes</strong> that communicate. A process can be thought of as a program that is running within an end system.<br>Processes on two different end systems communicate with each other by exchanging <strong>messages</strong> across the computer network: a sending process creates and sends messages into the network, a receiving process receives these messages and possibly responds by sending messages back.</p>\n<h4 id=\"Client-and-Server-Processes\"><a href=\"#Client-and-Server-Processes\" class=\"headerlink\" title=\"Client and Server Processes\"></a>Client and Server Processes</h4><p>A network application consists of pairs of processes that send messages to each other over a network. For each pair of communicating processes we label:</p>\n<ul>\n<li>the process that initiates the communication as the <strong>client</strong> [web browser]</li>\n<li>the process that waits to be contacted to begin the session as the <strong>server</strong> [web server]</li>\n</ul>\n<p>This labels stand even for P2P applications in the <em>context of a communication session</em>.</p>\n<h4 id=\"The-Interface-Between-the-Process-and-the-Computer-Network\"><a href=\"#The-Interface-Between-the-Process-and-the-Computer-Network\" class=\"headerlink\" title=\"The Interface Between the Process and the Computer Network\"></a>The Interface Between the Process and the Computer Network</h4><p>A process sends messages into, and receives messages from, the network through a software interface called a <strong>socket</strong>.<br><strong>A socket is the interface between the application layer and the transport layer within a host</strong>, it is also referred to as the <strong>Application Programming Interface</strong> (<strong>API</strong>) between the application and the network.<br>The application developer has control of everything on the application-layer of the socket but has little control of the transport-layer side of the socket. The only control that he has over the transport-layer is:</p>\n<ol>\n<li>The choice of the transport protocol</li>\n<li>Perhaps the ability to fix a few transport-layer parameters such as maximum buffer and maximum segment sizes</li>\n</ol>\n<h4 id=\"Addressing-Processes\"><a href=\"#Addressing-Processes\" class=\"headerlink\" title=\"Addressing Processes\"></a>Addressing Processes</h4><p>In order for a process running on one host to send packets to a process running on another host, the receiving process needs to have an address. To identify the receiving processes, two pieces of information need to be specified:</p>\n<ol>\n<li>The address of the host. In the Internet, the host is identified by its <strong>IP Address</strong>, a 32-bit (or 64) quantity that identifies the host uniquely.</li>\n<li>An identifier that specifies the receiving process in the destination host: the destination <strong>port number</strong>. Popular applications have been assigned specific port numbers (web server -&gt; 80)</li>\n</ol>\n<h3 id=\"2-1-3-Transport-Services-Available-to-Applications\"><a href=\"#2-1-3-Transport-Services-Available-to-Applications\" class=\"headerlink\" title=\"2.1.3 Transport Services Available to Applications\"></a>2.1.3 Transport Services Available to Applications</h3><p>What are the services that a transport-layer protocol can offer to applications invoking it?</p>\n<h4 id=\"Reliable-Data-Transfer\"><a href=\"#Reliable-Data-Transfer\" class=\"headerlink\" title=\"Reliable Data Transfer\"></a>Reliable Data Transfer</h4><p>For many applications, such as email, file transfer, web document transfers and financial applications, packet‚Äôs drops and data loss can have devastating consequences. If a protocol provides guarantees that the data sent is delivered completely and correctly, it is said to provide <strong>reliable data transfer</strong>. The sending process can just pass its data into the socket and know with complete confidence that the data will arrive without errors at the receiving process.</p>\n<h4 id=\"Throughput\"><a href=\"#Throughput\" class=\"headerlink\" title=\"Throughput\"></a>Throughput</h4><p>A transport-layer protocol could provide guaranteed available throughput at some specific rate. Applications that have throughput requirements are said to be <strong>bandwidth-sensitive applications</strong>.</p>\n<h4 id=\"Timing\"><a href=\"#Timing\" class=\"headerlink\" title=\"Timing\"></a>Timing</h4><p>A transport-layer protocol can also provide timing guarantees. Example: guarantees that every bit the sender pumps into the socket arrives at the receiver‚Äôs socket no more than 100 msec later, interesting for real-time applications such as telephony, virtual environments‚Ä¶</p>\n<h4 id=\"Security\"><a href=\"#Security\" class=\"headerlink\" title=\"Security\"></a>Security</h4><p>A transport-layer protocol can provide an application with one or more security services. It could encrypt all data transmitted by sending process and in the receiving host decrypt it.</p>\n<h3 id=\"2-1-4-Transport-Services-Provided-by-the-Internet\"><a href=\"#2-1-4-Transport-Services-Provided-by-the-Internet\" class=\"headerlink\" title=\"2.1.4 Transport Services Provided by the Internet\"></a>2.1.4 Transport Services Provided by the Internet</h3><p>The Internet makes two transport protocols available to applications: TCP and UDP.</p>\n<h4 id=\"TCP-Services\"><a href=\"#TCP-Services\" class=\"headerlink\" title=\"TCP Services\"></a>TCP Services</h4><p>TCP includes a connection-oriented service and a reliable data transfer service:</p>\n<ul>\n<li><strong>Connection-oriented service</strong>: client and server exchange transport-layer control information <em>before</em> the application-level messages begin to flow. This so-called <em>handshaking</em> procedure alerts the client and server, allowing them to prepare for an onslaught of packets. Then a <strong>TCP connection</strong> is said to exist between the sockets of the two processes. When the application finishes sending messages, it must tear down the connection</li>\n</ul>\n<h5 id=\"SECURING-TCP\"><a href=\"#SECURING-TCP\" class=\"headerlink\" title=\"SECURING TCP\"></a>SECURING TCP</h5><p>Nether TCP nor UDP provide encryption. Therefore the Internet community has developed an enhancement for TCP called <strong>Secure Sockets Layer (SSL)</strong>, which not only does everything that traditional TCP does but also provides critical process-to-process security services including <em>encryption</em>, <em>data integrity</em> and <em>end-point authentication</em>. It is not a third protocol, but an enhancement of TCP, <strong>the enhancement being implemented in the application layer</strong> in both the client and the server side of the application (highly optimized libraries exist). SSL has its own socket API, similar to the traditional one. Sending processes passes cleartext data to the SSL socket which encrypts it.</p>\n<ul>\n<li><strong>Reliable data transfer service</strong> The communicating processes can rely on TCP to deliver all data sent without error and in the proper order.</li>\n</ul>\n<p>TCP also includes a <strong>congestion-control mechanism</strong>, a service for the general welfare of the Internet rather than for the direct benefit of the communicating processes. It throttles a sending process when the network is congested between sender and receiver.</p>\n<h4 id=\"UDP-Services\"><a href=\"#UDP-Services\" class=\"headerlink\" title=\"UDP Services\"></a>UDP Services</h4><p>UDP is a no-frills, lightweight transport protocol, providing minimal services. It is connectionless, there‚Äôs no handshaking. The data transfer is unreliable: there are no guarantees that the message sent will ever reach the receiving process. Furthermore messages may arrive out of order. UDP does not provide a congestion-control mechanism neither.</p>\n<h4 id=\"Services-Not-Provided-by-Internet-Transport-Protocols\"><a href=\"#Services-Not-Provided-by-Internet-Transport-Protocols\" class=\"headerlink\" title=\"Services Not Provided by Internet Transport Protocols\"></a>Services Not Provided by Internet Transport Protocols</h4><p>These two protocols do not provide timing or throughput guarantees, services not provided by today‚Äôs Internet transport protocols. We therefore design applications to cope, to the greatest extent possible, with this lack of guarantees.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-app_tras.png\" alt=\"app tras\"></p>\n<h3 id=\"2-1-5-Application-Layer-Protocols\"><a href=\"#2-1-5-Application-Layer-Protocols\" class=\"headerlink\" title=\"2.1.5 Application-Layer Protocols\"></a>2.1.5 Application-Layer Protocols</h3><p>An <strong>application-layer protocol</strong> defines how an application‚Äôs processes, running on different end systems, pass messages to each other. It defines:</p>\n<ul>\n<li>The type of the messages exchanged (request&#x2F;response)</li>\n<li>The syntax of the various message types</li>\n<li>The semantics of the fields (meaning of the information in fields)</li>\n<li>The rules for determining whem and how a process sends messages and responds to messages</li>\n</ul>\n<h2 id=\"2-2-The-Web-and-HTTP\"><a href=\"#2-2-The-Web-and-HTTP\" class=\"headerlink\" title=\"2.2 The Web and HTTP\"></a>2.2 The Web and HTTP</h2><p>In the early 1990s, a major new application arrived on the scene: the World Wide Web (Berners-Lee 1994), the first application that caught the general public‚Äôs eye.<br>The Web operates <em>on demand</em>: users receives what they want, when they want it.<br>It is enormously easy for an individual to make information available over the web, hyperlinks and search engines help us navigate through the ocean of web sites‚Ä¶</p>\n<h3 id=\"2-2-1-Overview-of-HTTP\"><a href=\"#2-2-1-Overview-of-HTTP\" class=\"headerlink\" title=\"2.2.1 Overview of HTTP\"></a>2.2.1 Overview of HTTP</h3><p>The <strong>HyperText Transfer Protocol (HTTP)</strong>, the Web‚Äôs application-layer protocol is a the heart of the Web. It is implemented in two programs: a client program and a server program.<br>The two programs talk to each other by exchanging HTTP messages.<br>A <strong>Web page</strong> (or document) consists of objects. An <strong>object</strong> is simply a file (HTML file, jpeg image‚Ä¶) that is <em>addressable by a single URL</em>.<br>Most Web pages consist of a <strong>base HTML file</strong> and several referenced objects. The HTML file references the other objects in the page with the objects‚Äô URLs.<br>Each URL has two components: the hostname of the server that houses the object and the object‚Äôs path name.<br><strong>Web Browsers</strong> implement the client side of HTTP.<br><strong>HTTP</strong> uses TCP as its underlying transport protocol.<br>The server sends requested files to clients without storing any state information about the client: it is a <strong>stateless protocol</strong></p>\n<h3 id=\"2-2-2-Non-Persistent-and-Persistent-Connections\"><a href=\"#2-2-2-Non-Persistent-and-Persistent-Connections\" class=\"headerlink\" title=\"2.2.2 Non-Persistent and Persistent Connections\"></a>2.2.2 Non-Persistent and Persistent Connections</h3><p>In many Internet applications, the client and server communicate for an extended period of time, depending on the application and on how the application is being used, the series of requests may be back-to-back, periodically at regular intervals or intermittently. When this is happening over TCP, the developer must take an important decision: should each request&#x2F;response pair be sent over a <em>separate</em> TCP connection or should all of the requests and their corresponding responses be sent over the <em>same</em> TCP connection?<br>In the former approach, the application is said to use <strong>non-persistent connections</strong> and in the latter it is said to use <strong>persistent connections</strong><br>By default HTTP uses non-persistent connections but can be configured to be use persistent connections.<br>To estimate the amount of time that elapses when a client requests the base HTML file until the entire file is received by the client we define the <strong>round-trip time</strong> (<strong>RTT</strong>) which is the time it takes for a small packet to travel from client to server and then back to the client.</p>\n<h4 id=\"HTTP-with-Non-Persistent-Connections\"><a href=\"#HTTP-with-Non-Persistent-Connections\" class=\"headerlink\" title=\"HTTP with Non-Persistent Connections\"></a>HTTP with Non-Persistent Connections</h4><p>For the page and each object it contains, a TCP connection must be opened (handshake request, handshake answer), we therefore observe an addition RTT, and for each object we will have a request followed by the reply<br>This model can be expensive on the server side: a new connection needs to be established for each requested object, for each connection a TCP buffer must be allocated along some memory to store TCP variables.</p>\n<h4 id=\"HTTP-with-Persistent-Connections\"><a href=\"#HTTP-with-Persistent-Connections\" class=\"headerlink\" title=\"HTTP with Persistent Connections\"></a>HTTP with Persistent Connections</h4><p>The server leaves the TCP connection open after sending a response, subsequent requests and responses between the same client and server will be sent over the same connection. In particular an entire web page (text + objects) ca be sent over a single persistent TCP connection, multiple web pages residing on the same server can be sent from the server to the same client over a single persistent TCP connection.<br><strong>These requests can be make back-to-back</strong> without waiting for replies to pending requests (<strong>pipelining</strong>).<br>When the server receives back-to-back requests, it sends the objects back-to-back.<br>If connection isn‚Äôt used for a pre-decided amount of time, it will be closed.</p>\n<h3 id=\"2-2-3-HTTP-Message-Format\"><a href=\"#2-2-3-HTTP-Message-Format\" class=\"headerlink\" title=\"2.2.3 HTTP Message Format\"></a>2.2.3 HTTP Message Format</h3><p>Two types of HTTP messages:</p>\n<h4 id=\"HTTP-Request-Message\"><a href=\"#HTTP-Request-Message\" class=\"headerlink\" title=\"HTTP Request Message\"></a>HTTP Request Message</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /somedir/page.html HTTP/1.1</span><br><span class=\"line\">Host: www.someschool.edu</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">User-agent: Mozilla/5.0</span><br><span class=\"line\">Accept-language: fr</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Ordinary ASCII text</li>\n<li>First line: <strong>request line</strong></li>\n<li>Other lines: <strong>header lines</strong></li>\n<li>the first lines has 3 fields: method field, URL field, HTTP version field:<ul>\n<li>method field possible values: <code>GET, POST, HEAD, PUT, DELETE</code></li>\n</ul>\n</li>\n</ul>\n<p>The majority of HTTP requests use the GET method, used to request an object.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-http_request.png\" alt=\"http requests\"></p>\n<p> The entity body (empty with <code>GET</code>) is used by the <code>POST</code> method, for example for filling out forms. The user is still requesting a Web page but the specific contents of the page depend on what the user entered into the form fields. When <code>POST</code> is used, the entity body contains what the user entered into the form fields.<br>Requests can also be made with <code>GET</code> including the inputted data in the requested URL.<br>The <code>HEAD</code> method is similar to <code>GET</code>, when a server receives it, it responds with an HTTP message but it leaves out the requested object. It is often used for debugging.<br><code>PUT</code> is often used in conjunction with web publishing tools, to allow users to upload an object to a specific path on the web servers.<br>Finally, <code>DELETE</code> allows a user or application to delete an object on a web server.</p>\n<h4 id=\"HTTP-Response-Message\"><a href=\"#HTTP-Response-Message\" class=\"headerlink\" title=\"HTTP Response Message\"></a>HTTP Response Message</h4><p>A typical HTTP response message:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Connection: close</span><br><span class=\"line\">Date: ...</span><br><span class=\"line\">Server: ...</span><br><span class=\"line\">Last-Modified: ...</span><br><span class=\"line\">Content-Length: ...</span><br><span class=\"line\">Content-Type: text/html</span><br><span class=\"line\"></span><br><span class=\"line\">(data data data data data ...)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Status line: protocol version, status code, corresponding status message</li>\n<li>six header lines:<ul>\n<li>the connection will be closed after sending the message</li>\n<li>date and time when the response was created (when the server retrieves the object from the file system, insert object in the message, sends the response message)</li>\n<li>Type of the server &#x2F; software</li>\n<li>Last modified: useful for object caching</li>\n<li>Content-Length: number of bytes in the object</li>\n<li>Content-Type</li>\n</ul>\n</li>\n<li>entity body: contains the requested object itself (data)</li>\n</ul>\n<p>Some common status codes:</p>\n<ul>\n<li><code>200 OK</code>: request succeeded, information returned</li>\n<li><code>301 Moved Permanently</code>: the object has moved, the new location is specified in the header of the response</li>\n<li><code>400 Bad Request</code>: generic error code, request not understood</li>\n<li><code>404 Not Found</code>: The requested document doesn‚Äôt exist on the server</li>\n<li><code>505 HTTP Version Not Supported</code>: The requested HTTP protocol version is not supported by the server</li>\n</ul>\n<h3 id=\"2-2-4-User-Server-Interaction-Cookies\"><a href=\"#2-2-4-User-Server-Interaction-Cookies\" class=\"headerlink\" title=\"2.2.4 User-Server Interaction: Cookies\"></a>2.2.4 User-Server Interaction: Cookies</h3><p>An HTTP server is <em>stateless</em> in order to simplify server design and improves performances. A website can identify users using <strong>cookies</strong>.<br>Cookie technology has 4 components:</p>\n<ol>\n<li>Cookie header in HTTP response message</li>\n<li>Cookie header in HTTP request message</li>\n<li>Cookie file on the user‚Äôs end-system managed by the browser</li>\n<li>Back-end database at the Website</li>\n</ol>\n<p>User connects to website using cookies:</p>\n<ul>\n<li>Server creates a unique identification number and creates an entry in its back-end database indexed by the identification number<br> -server responds to user‚Äôs browser including in the header: <code>Set-cookie: identification number</code></li>\n<li>The browser will append to the cookie file the hostname of the server and the identification number header</li>\n<li>Each time the browser will request a page, it will consult the cookie file, extract the identification number for the site and put a cookie header line including the identification number</li>\n</ul>\n<p>The server can track the user‚Äôs activity: it knows exactly what pages, in which order and at what times that identification number has visited. This is also why cookies are controversial: a website can learn a lot about a user and sell this information to a third party.</p>\n<p>Therefore <strong>cookies can be used to create a user session layer on top of stateless HTTP</strong>.</p>\n<h3 id=\"2-2-5-Web-Caching\"><a href=\"#2-2-5-Web-Caching\" class=\"headerlink\" title=\"2.2.5 Web Caching\"></a>2.2.5 Web Caching</h3><p>A <strong>Web cache</strong>, also called <strong>proxy server</strong> is a network entity that satisfies HTTP requests on behalf of an origin Web server. It has its own disk storage and keeps copies of recently requested objects in this storage.</p>\n<ol>\n<li>The browser establishes a TCP connection to the web cache, sending an HTTP request for the object to the Web cache.</li>\n<li>The web cache checks to see if it has a copy of the object stored locally. If yes, it will return it within an HTTP response message to the browser.</li>\n<li>If not, the Web cache opens a TCP connection to the origin server, which responds with the requested object.</li>\n<li>The Web caches receives the object, stores a copy in its storage and sends a copy, within an HTTP response message, to the browser over the existing TCP connection.</li>\n</ol>\n<p>Therefore a <strong>cache is both a server and a client at the same time</strong>.<br>Usually caches are purchased and installed by ISPs.<br>They can substantially reduce the response time for a client request and substantially reduce traffic on an institution‚Äôs access link to the Internet.</p>\n<p>Through the use of <strong>Content Distribution Networks (CDNs)</strong> web caches are increasingly playing an important role in the Internet. A CDN installs many geographically distributed caches throughout the Internet, localizing much of the traffic.</p>\n<h3 id=\"2-2-6-The-Conditional-GET\"><a href=\"#2-2-6-The-Conditional-GET\" class=\"headerlink\" title=\"2.2.6 The Conditional GET\"></a>2.2.6 The Conditional <code>GET</code></h3><p>Caches introduce a new problem: what if the copy of an object residing in the cache is stale?<br>The <strong>conditional GET</strong> is used to verify that an object is up to date.<br>An HTTP request message is a conditional get if</p>\n<ol>\n<li>the request message uses the <code>GET</code> method</li>\n<li>the request message includes an <code>If-modified-since:</code> header line.</li>\n</ol>\n<p>A conditional get message is sent from the cache to server which responds only if the object has been modified.</p>\n<h2 id=\"2-5-DNS-The-Internet‚Äôs-Directory-Service\"><a href=\"#2-5-DNS-The-Internet‚Äôs-Directory-Service\" class=\"headerlink\" title=\"2.5 DNS - The Internet‚Äôs Directory Service\"></a>2.5 DNS - The Internet‚Äôs Directory Service</h2><p>One identifier for a host is its <strong>hostname</strong> [<code>cnn.com</code>, <code>www.yahoo.com</code>]. Hostnames are mnemonic and therefore used by humans. Hosts are also identified by <strong>IP addresses</strong>.</p>\n<h3 id=\"2-5-1-Services-provided-by-DNS\"><a href=\"#2-5-1-Services-provided-by-DNS\" class=\"headerlink\" title=\"2.5.1 Services provided by DNS\"></a>2.5.1 Services provided by DNS</h3><p>Routers and use IP addresses. The Internet‚Äôs <strong>domain name system (DNS)</strong> translates hostnames to IP addresses. The DNS is:</p>\n<ol>\n<li>A distributed database implemented in a hierarchy of <strong>DNS Servers</strong></li>\n<li>An application-layer protocol that allows hosts to query the distributed database.</li>\n</ol>\n<p>DNS servers are often UNIX machines running the <strong>B</strong>erkeley <strong>I</strong>nternet <strong>N</strong>ame <strong>D</strong>omaine (BIND) software.</p>\n<p><strong>DNS runs over UDP and uses port 53</strong><br>It is often employed by other application-layer protocols (HTTP, FTP‚Ä¶) to translate user-supplied hostnames to IP addresses.</p>\n<p>How it works:</p>\n<ul>\n<li>The user machine runs the client side of the DNS application</li>\n<li>The browser extracts <code>www. xxxxx . xxx</code> from the URL and passes the hostname to the client side of the DNS application</li>\n<li>The DNS sends a query containing the hostname to a DNS server</li>\n<li>The DNS client eventually receives a reply including the IP address for the hostname</li>\n<li>The browser can initiate a TCP connection.</li>\n</ul>\n<p><strong>DNS adds an additional delay</strong></p>\n<p>DNS provides other services in addition to translating hostnames to IP addresses:</p>\n<ul>\n<li><strong>host aliasing</strong>: a host with a complicated hostname can have more alias names. The original one is said to be a <strong>canonical hostname</strong>.</li>\n<li><strong>mail server aliasing</strong>: to make email servers‚Äô hostnames more mnemonic. This also allows for an e-mail server and an Web server to have the same hostname.</li>\n<li><strong>load distribution</strong>: replicated servers can have the same hostname. In this case, a set of IP addresses is associated with one canonical hostname. When a client make a DNS query for a name mapped to a set of addresses, the server responds with the entire set, but rotates the ordering within each reply.</li>\n</ul>\n<h3 id=\"2-5-2-Overview-of-How-DNS-Works\"><a href=\"#2-5-2-Overview-of-How-DNS-Works\" class=\"headerlink\" title=\"2.5.2 Overview of How DNS Works\"></a>2.5.2 Overview of How DNS Works</h3><p>From the perspective of the invoking application in the user‚Äôs host, DNS is a black box providing a simple, straightforward translation service.<br>Having one single global DNS server would be simple, but it‚Äôs not realistic because it would a <strong>single point of failure</strong>, it would have an impossible <strong>traffic volume</strong>, it would be <strong>geographically too distant</strong> from some querying clients, its <strong>maintenance</strong> would be impossible.</p>\n<h4 id=\"A-Distributed-Hierarchical-Database\"><a href=\"#A-Distributed-Hierarchical-Database\" class=\"headerlink\" title=\"A Distributed, Hierarchical Database\"></a>A Distributed, Hierarchical Database</h4><p>The DNS uses a large number of servers, organized in a hierarchical fashion and distributed around the world.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-dns-servers.png\" alt=\"dns servers\"></p>\n<p>The three classes of DNS servers:</p>\n<ul>\n<li><strong>Root DNS servers</strong>: In the Internet there are 13 root DNS servers, most hosted in North America, each of these is in reality a network of replicated servers, for both security and reliability purposes (total: 247)</li>\n<li><strong>Top-level domain (TLD) servers</strong>: responsible for top-level domains such as com org net edu and govand all of the country top-level domains uk fr jp</li>\n<li><strong>Authoritative DNS servers</strong>: every organization with publicly accessible hosts must provide publicly accessible DNS records that map the names of those hosts to IP addresses. An organization can choose to implement its own authoritative DNS server or to pay to have the records stored in an authoritative DNS of some service provider.</li>\n</ul>\n<p>Finally there are <strong>local DNS servers</strong> which is central to the DNS architecture. They are hosted by ISPs. When a hosts connects to one of these, the local DNS server provides the host with the IP addresses of one or more of its local DNS servers. Requests can ho up to the root DNS servers and back down.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-distributedDNS.png\" alt=\"distriuted dns\"></p>\n<p>We can have both <strong>recursive</strong> and <strong>iterative queries</strong>.<br>In <strong>recursive queries</strong> the user sends the request its nearest DNS which will ask to a higher-tier server, which will ask to lower order‚Ä¶ the chain goes on until it reaches a DNS that can reply, the reply will follow the inverse path that the request had.<br>In <strong>iterative queries</strong> the same machine sends requests and receives replies.<br>Any DNS can be iterative or recursive or both.</p>\n<h4 id=\"DNS-Caching\"><a href=\"#DNS-Caching\" class=\"headerlink\" title=\"DNS Caching\"></a>DNS Caching</h4><p>DNS extensively exploits DNS caching in order to improve the delay performance and to reduce the number of DNS messages ricocheting around the Internet.<br>In a query chain, when a DNS receives a DNS reply it can cache the mapping in its local memory.</p>\n<h3 id=\"2-5-3-DNS-Records-and-Messages\"><a href=\"#2-5-3-DNS-Records-and-Messages\" class=\"headerlink\" title=\"2.5.3 DNS Records and Messages\"></a>2.5.3 DNS Records and Messages</h3><p>The DNS servers that implement the DNS distributed database store <strong>resource records (RRs)</strong> including RRs that provide hostname-to-IP address mappings.<br>Each DNS reply messages carries one or more resource records.</p>\n<p>A resource record is a four-tuple that contains the fields: <code>(Name, Value, Type, TTL)</code><br><code>TTL</code> is the time to live of the resource record (when a resource should be removed from a cache). The meaning of <code>Name</code> and <code>Value</code> depend on <code>Type</code>:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A</td>\n<td>a hostname</td>\n<td>IP address</td>\n</tr>\n<tr>\n<td>NS</td>\n<td>a domain (foo.com)</td>\n<td>hostname of an  authoritative DNS server which knows how to obtain the IP addresses for hosts in the domain. Used to route queries further along in the query chain</td>\n</tr>\n<tr>\n<td>CNAME</td>\n<td>a alias name</td>\n<td>canonical hostname for the name in Name</td>\n</tr>\n<tr>\n<td>MX</td>\n<td>alias hostname</td>\n<td>canonical hostname of a mail server that has an alias hostname Name</td>\n</tr>\n</tbody></table>\n<h4 id=\"DNS-Messages\"><a href=\"#DNS-Messages\" class=\"headerlink\" title=\"DNS Messages\"></a>DNS Messages</h4><p>The only types of DNS messages are DNS queries and reply messages. They have the same format:</p>\n<ul>\n<li>first 12 bytes in the <em>header section</em>: 16-bit number identifying the query, which will be copied into the reply query so that the client can match received replies with sent queries. 1 bit query&#x2F;reply flag (0 query, 1 reply). 1 bit flag authoritative flag set in reply messages when DNS server is an authoritative for a queried name. 1 bit recursion flag if the client desires that the server performs recursion when it doesn‚Äôt have a record, 1 bit recursion-available field is set in the reply if the DNS server supports recursion</li>\n<li><em>question section</em>: information about the query: name field containing the name being queried, type field</li>\n<li><em>answer section</em>: resource records for the name originally queried: Type, Value, TTL. Multiple RRs can be returned if the server has multiple IP addresses</li>\n<li><em>authority section</em>: records for other authoritative servers.</li>\n<li><em>additional section</em>: other helpful records: canonical hostnames‚Ä¶</li>\n</ul>\n<h4 id=\"Inserting-Records-into-the-DNS-Database\"><a href=\"#Inserting-Records-into-the-DNS-Database\" class=\"headerlink\" title=\"Inserting Records into the DNS Database\"></a>Inserting Records into the DNS Database</h4><p>We created a new company. Next we register th domain name <code>newcompany.com</code> at a registrar. A <strong>registrar is a commercial entity that verifies the uniqueness of the domain name, enters it into the DNS database and collects a small fee for these services</strong>. When we register the address, <strong>we need the provide the registrar with the IP address of our primary and secondary authoritative DNS servers</strong>, that will make sure that a Type NS and a Type A records are entered into the TLD com servers for our two DNS servers.</p>\n<h5 id=\"Focus-on-security-DNS-vulnerabilities\"><a href=\"#Focus-on-security-DNS-vulnerabilities\" class=\"headerlink\" title=\"Focus on security: DNS vulnerabilities\"></a>Focus on security: DNS vulnerabilities</h5><ul>\n<li>DDoS bandwidth-flooding attack</li>\n<li>MITM: the mitm answers queries with false replies tricking the user into connecting to another server.</li>\n<li>The DNS infrastructure can be used to launch a DDoS attack against a targeted host</li>\n</ul>\n<p>To date, there hasn‚Äôt been an attack that that has successfully impeded the DNS service, DNS has demonstrated itself to be surprisingly robust against attacks. However there have been successful reflector attacks, these can be addressed by appropriate configuration of DNS servers.</p>\n<h2 id=\"2-6-Peer-to-Peer-Applications\"><a href=\"#2-6-Peer-to-Peer-Applications\" class=\"headerlink\" title=\"2.6 Peer-to-Peer Applications\"></a>2.6 Peer-to-Peer Applications</h2><h3 id=\"2-6-1-File-Distribution\"><a href=\"#2-6-1-File-Distribution\" class=\"headerlink\" title=\"2.6.1 File Distribution\"></a>2.6.1 File Distribution</h3><p>In P2P file distribution, each peer can redistribute any portion of the file it has received to any peers, thereby assisting the server in the distribution process. As of 2012 the most popular P2P file distribution protocol is BitTorrent, developed by Bram Cohen.</p>\n<h4 id=\"Scalability-of-P2P-architectures\"><a href=\"#Scalability-of-P2P-architectures\" class=\"headerlink\" title=\"Scalability of P2P architectures\"></a>Scalability of P2P architectures</h4><p>Denote the upload rate of the server‚Äôs access link by $u_s$, the upload rate of the <em>i</em>th peer‚Äôs access link by $u_i$ and the download rate of the <em>i</em>th access link by $d_i$, tthe size of the to be distributed in bits ()<br>Comparison client-server and P2P.</p>\n<h4 id=\"Client-Server\"><a href=\"#Client-Server\" class=\"headerlink\" title=\"Client-Server\"></a>Client-Server</h4><p>The server must transmit one copy of the file to <em>N</em> peers, thus it transmits *NF *bits. The time to distribute the file is at least <strong>NF&#x2F;u_s</strong>.<br>Denote $d_min &#x3D; min{ d_i }$ the link with the slowest download rate cannot obtain all <em>F</em> bits in less than $F&#x2F;d_min$ seconds<br>Therefore:<br>$$ D_{cs} \\geq \\max \\left{ \\frac{NF}{u_s} , \\frac{F}{d_min} \\right} $$</p>\n<h4 id=\"P2P\"><a href=\"#P2P\" class=\"headerlink\" title=\"P2P\"></a>P2P</h4><p>When a peer receives some file data, it can use its own upload capacity to redistribute the data to other peers.</p>\n<ul>\n<li>At the beginning of the distribution only the server has the file. It must send all the bits at least once. $D \\geq F&#x2F;u_s$</li>\n<li>The peer with the lowest download rate cannot obtain all <em>F</em> bits of the file in less than $F&#x2F;d_min $ seconds.</li>\n<li>The total upload capacity of the system is equal to the summation of the upload rates of the server and of all the peers. The system must upload <em>F</em> bits to <em>N</em> peers, thus delivering a total of <em>NF</em> bits which can‚Äôt be done faster that $u_total$.</li>\n</ul>\n<p>We obtain:<br>$$ D_{P2P} &#x3D; \\max \\left{ \\frac{F}{u_s} , \\frac{F}{d_{min}} , \\frac{NF}{u_s + \\sum_{i&#x3D;1}^N u_j} \\right} $$</p>\n<h4 id=\"BitTorrent\"><a href=\"#BitTorrent\" class=\"headerlink\" title=\"BitTorrent\"></a>BitTorrent</h4><p>In BitTorrent the collection of all peers participating in the distribution of a particular file is called a <em>torrent</em>. Peers in a torrent download equal-size <em>chunks</em> of the file from one another with a typical chunk size of 256 KBytes.<br>At the beginning a peer has no chunks, it accumulates more and more chunks over time. While it downloads chunks it also uploads chunks to other peers. Once a peer has acquired the entire file it may leave the torrent or remain in it and continue to upload chunks to other peers (becoming a <em>seeder</em>). Any peer can leave the torrent at any time and later rejoin it at anytime as well.</p>\n<p>Each torrent has an infrastructure node called a <em>tracker</em>: when a peer joins a torrent, it registers itself with the tracker and periodically informs it that it is still in the torrent. The tracker keeps track of the peers participating in the torrent. A torrent can have up to thousands of peers participating at any instant of time.</p>\n<p>User joins the torrent, the tracker randomly selects a subset of peers from the set of participating peers. User establishes concurrent TCP connections with all of these peers, called <em>neighboring peers</em>. The neighboring peers can change over time.<br>The user will ask each of his neighboring peers for the list of chunks they have (one list per neighbor).<br>The user starts downloading the chunks that have the fewest repeated copies among the neighbors (<strong>rares first</strong> technique). In this manner the rarest chunks get more quickly redistributed, roughly equalizing the numbers of copies of each chunk in the torrent.</p>\n<p>Every 10 seconds the user measures the rate at which she receives bits and determines the four peers that are sending to her at the highest rate. It then reciprocates by sending chunks to these same four peers. The four peers are called <strong>unchocked</strong>. Every 30 seconds it also choses one additional neighbor and sends it chunks. These peers are called <strong>optmistically unchocked</strong>.</p>\n<h3 id=\"2-6-2-Distributed-Hash-Tables-DHTs\"><a href=\"#2-6-2-Distributed-Hash-Tables-DHTs\" class=\"headerlink\" title=\"2.6.2 Distributed Hash Tables (DHTs)\"></a>2.6.2 Distributed Hash Tables (DHTs)</h3><p>How to implement a simple database in a P2P network?<br>In the P2P system each peer will only hold a small subset of the totality of the (key, value) pairs. Any peer can query the distributed database with a particular key, the database will locate the peers that have the corresponding pair and return the pair to querying peer. Any peer can also insert a new pair in the databse. Such a distributed database is referred to as a <strong>distributed hash table (DHT)</strong>.<br>In a P2P file sharing application a DHT can be used to store the chunks associated to the IP of the peer in possession of them.</p>\n<h6 id=\"An-approach\"><a href=\"#An-approach\" class=\"headerlink\" title=\"An approach:\"></a>An approach:</h6><p>Let‚Äôs assign an identifier to each peer, where the identifier is an integer in the range <strong><code>[0, 2^n -1]</code></strong> for some fixed <strong><code>n</code></strong>. Such an identifier can be expressed by a <strong><code>n-bit</code></strong> representation. A hash function is used to transform non-integer values into integer values. We suppose that this function is available to all peers.<br><strong>How to assign keys to peers?</strong> We assign each <code>(key,value)</code> pair to the peer <em><strong>whose identifier is the closest to key</strong></em>, which is the identifier defined as <em><strong>the closest successor of the key</strong></em>.<br>To avoid having each peer keeping track of all other peers (scalability issue) we use</p>\n<h4 id=\"Circular-DHT\"><a href=\"#Circular-DHT\" class=\"headerlink\" title=\"Circular DHT\"></a>Circular DHT</h4><p>If we organize peers into a circle, each peer only keeps track of its immediate successor and predecessor <strong>(modulo <code>2^n</code>)</strong>. This circular arrangement of peers is a special case of an <strong>overlay network</strong>: the peers form an abstract logical network which resides above the ‚Äúunderlay‚Äù computer network, the overlay links are not physical but virtual liaisons between pairs of peers. A single overlay link typically uses many physical links and physical routers in the underlying network.</p>\n<p>In the circle a peer asks ‚Äúwho is responsible for key <em>k</em>?‚Äù and it sends the message clockwise around the circle. Whenever a peer receives such message, it knows the identifier of its predecessor and predecessor, it can determine whether it is responsible (closest to) for the key in question. If not, it passes the message to its successor. When the message reaches the peer responsible for the key, it can send a message back to the querying peer indicating that it is responsible for that key.<br>Using this system <strong><code>N/2*</code></strong> messages are sent on average <strong>(N &#x3D; number of peers)</strong>. In designing a DHT there is always a tradeoff between the number of neighbors for each peer and the number of DHT messages needed to resolve a single query. (1 message if each peer keeps track of all other peers; <strong><code>N/2</code></strong> messages if each knows only 2 neighbors).<br>To improve our circular DHT we could add shortcuts so that each peer not only keeps track of its immediate successor and predecessor but also of relatively small number of shortcut peers scattered around the circle.<br><strong>How many shortcut neighbors?</strong> Studies show that DHT can be designed so that the number of neighbors per peer as well as the number of messages per query is <strong><code>O(log *N*)</code> (<code>N</code> the number of peers)</strong>.</p>\n<h4 id=\"Peer-Churn\"><a href=\"#Peer-Churn\" class=\"headerlink\" title=\"Peer Churn\"></a>Peer Churn</h4><p>In a P2P system, a peer can come or go without warning. To keep the DHT overlay in place in presence of a such peer churn we require each peer to keep track (know to IP address) of its predecessor and successor, and to periodically verify that its two successors are alive.<br>If a peer abruptly leaves, its successor and predecessor need to update their information. The predecessor replaces its first successor with its second successor and ask it for the identifier and IP address of its immediate successor.</p>\n<p>What if a peer joins? If it only knows one peer, it will ask him what will be his predecessor and successor. The message will reach the predecessor which will send the new arrived its predecessor and successor information. The new arrived can join the DHT making its predecessor successor its own successor and by notifying its predecessor to change its successor information.</p>\n<h2 id=\"2-7-Socket-Programming-Creating-Network-Applications\"><a href=\"#2-7-Socket-Programming-Creating-Network-Applications\" class=\"headerlink\" title=\"2.7 Socket Programming: Creating Network Applications\"></a>2.7 Socket Programming: Creating Network Applications</h2><p>Only code explication ‚Äî-&gt; skipping</p>\n<h1 id=\"Chapter-3-Transport-Layer\"><a href=\"#Chapter-3-Transport-Layer\" class=\"headerlink\" title=\"Chapter 3: Transport Layer\"></a>Chapter 3: Transport Layer</h1><h2 id=\"3-1-Introduction-and-Transport-Layer-Services\"><a href=\"#3-1-Introduction-and-Transport-Layer-Services\" class=\"headerlink\" title=\"3.1 Introduction and Transport-Layer Services\"></a>3.1 Introduction and Transport-Layer Services</h2><p>A transport-layer protocol provides for <strong>logical communication</strong> (as if the hosts running the processes were directly connected) between application processes running on different hosts. Application processes use the logical communication provided by the transport layer to send messages to each other, free from the worry of the details of the physical infrastructure used.<br><strong>Transport-layer protocols are implemented in the end systems but not in network routers</strong>.<br>On the sending side, the transport layer converts the application messages into transport-layer packets, known as transport-layer <strong>segments</strong>. This is done by breaking them into smaller chunks and adding a transport-layer header to each chunk. The transport-layer then passes the segment to the network-layer packet at the sending end-system.<br>On the receiving side, the network layer extracts the transport-layer segment from the datagram and passes the segment up to the transport-layer which then processes the received segment, making the data in the segment available to the received application.</p>\n<h3 id=\"3-1-1-Relationship-Between-Transport-and-Network-Layers\"><a href=\"#3-1-1-Relationship-Between-Transport-and-Network-Layers\" class=\"headerlink\" title=\"3.1.1 Relationship Between Transport and Network Layers\"></a>3.1.1 Relationship Between Transport and Network Layers</h3><p>A transport-layer protocol provides logical communication between <strong><em>processes</em></strong> running on different hosts. Whereas a network-layer protocol provides logical communication between <strong><em>hosts</em></strong>.</p>\n<h3 id=\"3-1-2-Overview-of-the-Transport-Layer-in-the-Internet\"><a href=\"#3-1-2-Overview-of-the-Transport-Layer-in-the-Internet\" class=\"headerlink\" title=\"3.1.2 Overview of the Transport Layer in the Internet\"></a>3.1.2 Overview of the Transport Layer in the Internet</h3><p>A TCP&#x2F;IP network (such as the Internet) makes two distinct transport-layer protocols available to the application layer:</p>\n<ul>\n<li><strong>UDP</strong> [ <strong>U</strong>ser <strong>D</strong>atagram <strong>P</strong>rotocol], which provides an unreliable, connectionless service to the invoking application</li>\n<li><strong>TCP</strong> [<strong>T</strong>ransmission <strong>C</strong>ontrol <strong>P</strong>rotocol] which provides a reliable, connection-oriented service to the invoking application.</li>\n</ul>\n<p>We need to spend a few words on the network-layer protocol: the Internet network-layer protocol is the IP (Internet Protocol). It provides a logical communication between hosts. The IP service model is a <strong>best-effort delivery service</strong>: it makes the best effort to deliver segments between hosts, <em>but it <strong>doesnt</strong> provide guarantees</em>:</p>\n<ul>\n<li>it doesn‚Äôt guarantee segment <strong>delivery</strong></li>\n<li>it doesn‚Äôt guarantee <strong>orderly</strong> delivery of segments</li>\n<li>it doesn‚Äôt guarantee the <strong>integrity</strong> of the data in the segments</li>\n</ul>\n<p>Thus IP is said to be an <strong>unreliable service</strong>.<br>Every host has <strong>at least one network-layer address</strong> a so-called IP address.</p>\n<p>UDP and TCP extend IP‚Äôs delivery service between 2 end systems to a delivery service between two processes running on the end systems.<br>Extend host-to-host delivery to process-to-process delivery is called <strong>transport-layer multiplexing and demultiplexing</strong>.<br>UDP provides process-to-process delivery and error checking services. Therefore it is an <strong>unreliable service</strong>.<br>TCP provides <strong>reliable data transfer</strong> using flow control, sequence numbers, acknowledgements and timers. <strong>TCP thus converts IP‚Äôs unreliable service between end systems into a reliable data transport service between processes</strong>.<br>TCP also provides <strong>congestion control</strong>, a service not really provided to the invoking application as it is to the Internet as a whole: <strong>it prevents any TCP connection from swamping the links and routers between communication hosts with an excessive amount of traffic giving each connection traversing a congested link an equal share of the bandwidth.</strong></p>\n<h2 id=\"3-2-Multiplexing-and-Demultiplexing\"><a href=\"#3-2-Multiplexing-and-Demultiplexing\" class=\"headerlink\" title=\"3.2 Multiplexing and Demultiplexing\"></a>3.2 Multiplexing and Demultiplexing</h2><p>Here we‚Äôll cover multiplexing &amp; demultiplexing in the context of the Internet but <strong>a multiplexing&#x2F;demultiplexing service is needed for all computer networks</strong>.</p>\n<ul>\n<li>The job of delivering the data in a transport-layer segment to the correct socket is called <strong>demultiplexing</strong>.</li>\n<li>The job of gathering data chunks at the source host from different sockets, encapsulating each data chunk with header information (which will be used in demultiplexing) to create segments and passing the segments to the networks layer is called <strong>multiplexing</strong>.</li>\n</ul>\n<p> Therefore sockets need to have unique identifiers and each segment needs to have special fields that indicate the socket to which the segment is delivered. These fields are the <strong>source port number field</strong> and the <strong>destination port number field</strong>. Each port number is a <strong>16-bit number</strong> ranging from 0 to 65535.<br> Port numbers ranging from 0 to 1023 are called <strong>well-known port numbers</strong> and are restricted, reserved for us by well-known application protocols such as HTTP (80) and FTP (21). Designing an application, we should assign it a port number.</p>\n<h4 id=\"Connectionless-Multiplexing-and-Demultiplexing\"><a href=\"#Connectionless-Multiplexing-and-Demultiplexing\" class=\"headerlink\" title=\"Connectionless Multiplexing and Demultiplexing\"></a>Connectionless Multiplexing and Demultiplexing</h4><p>A UDP socket is fully identified by the <strong>two-tuple</strong>:<br><code>(destination IP address , destination port number)</code><br>therefore if two UDP segments have different source IP address and&#x2F;or source port numbers but have the same destination IP address and destination port number, than the two segments will be directed to the same destination process via the same destination socket.<br>The source port number serves as part of the <strong><code>return address</code></strong>.</p>\n<h4 id=\"Connection-oriented-Multiplexing-and-Demultiplexing\"><a href=\"#Connection-oriented-Multiplexing-and-Demultiplexing\" class=\"headerlink\" title=\"Connection-oriented Multiplexing and Demultiplexing\"></a>Connection-oriented Multiplexing and Demultiplexing</h4><p>A TCP socket is identified by the <strong>four-tuple</strong>:<br><code>(source IP address, source port number, destination IP address, destination port number)</code><br>When a TCP segment arrives from the network to a host, the <strong>host uses all four values to demultiplex the segment to the appropriate socket</strong>.<br>Two arriving TCP segments with different source IP addresses or source port numbers will (with the exception of a TCP carrying the original connection establishment request) be directed to two different sockets.</p>\n<p>Routine:</p>\n<ul>\n<li>The TCP server application always has a <strong>welcoming socket</strong> that waits for connection establishment requests from TCP clients on port number <code>X</code></li>\n<li>The TCP client creates a socket and sends a connection <strong>establishment request</strong> (a TCP segment including destination port, source port number and <em>a special connection-establishment bit set in the TCP header</em>)</li>\n<li>The server OS receives the incoming connection-request segment on port <code>X</code>, it locates the server process that is waiting to accept a connection on port number <code>X</code>, then creates <strong>a new socket</strong> which will be identified by<br> <code>(source port number in the segment (cleint), IP address of source host (client), the destination port number in the segment (its own), its own IP address)</code></li>\n<li>With the TCP connection in place, client and server can now send data to each other</li>\n</ul>\n<p>The server may support many simultaneous TCP connection sockets, with each socket attached to a process and each socket identified by its own four-tuple.<br>When a TCP segment arrives at the host, all the fours fields are used to demultiplex the segment to the appropriate socket.</p>\n<h5 id=\"Port-Scanning\"><a href=\"#Port-Scanning\" class=\"headerlink\" title=\"Port Scanning\"></a>Port Scanning</h5><p>Can be used both by attackers and system administrator to find vulnerabilities in the target or to know network applications are running in the network.<br>The most used port scanner is <strong>nmap</strong> free and open source.<br>For TCP it scans port looking for port accepting connections, for UDP looking for UDP ports that respond to transmitted UDP segments.<br>It then returns a list of open, closed or unreachable ports.<br>A host running nmap can attempt to scan any target <em>anywhere</em> in the Internet</p>\n<h4 id=\"Web-Servers-and-TCP\"><a href=\"#Web-Servers-and-TCP\" class=\"headerlink\" title=\"Web Servers and TCP\"></a>Web Servers and TCP</h4><p>In a web server, all segments have destination port 80 and both the initial connection-establishment segments and the segments carrying HTTP request messages will have destination port 80, the server will distinguish clients using the source IP addresses and port numbers.<br>Moreover in today‚Äôs high-performing Web, servers often use only one process and <em>create a new thread with a new connection soket for each new client connection</em>.</p>\n<p>If using persistent HTTP, client and server will exchange messages via the same server socket. If using non-persistent HTTP, a new TCP connection is created and closed for every request&#x2F;response and hence a new socket is created and closed for every request&#x2F;response.</p>\n<h2 id=\"3-3-Connectionless-Transport-UDP\"><a href=\"#3-3-Connectionless-Transport-UDP\" class=\"headerlink\" title=\"3.3 Connectionless Transport: UDP\"></a>3.3 Connectionless Transport: UDP</h2><p>UDP does multiplexing&#x2F;demultiplexing, light error checking, nothing more. If the developer chooses UDP, the application is almost directly talking with IP.<br>Note that with UDP there is no handshaking between sending and receiving transport-layer entities before sending a segment. For this reason UDP is said to be <strong>connectionless</strong>.<br>DNS is an example of an application layer protocol that typically uses UDP: there is no handshaking and when a client doesn‚Äôt receive a reply either it tries sending the query to another name server or it informs the invoking application that it can‚Äôt get a reply. Why should a developer choose UDP?</p>\n<ul>\n<li><em>Finer application-level controll over what data is sent and when</em>: as soon as the application passes data to UDP, UDP will package the data inside a segment and immediately pass it to the network layer. TCP‚Äôs congestion control can delay the sending of the segment and will try sending the packet until this is received. In real time applications the sending rate is important, so we can trade off some data loss for some sending rate.</li>\n<li><em>No connection establishement</em> UDP justs send data without any formal preliminaries without introducing any delay, probably the reason why DNS runs over UDP.</li>\n<li><em>No connection state</em>: because a UDP application doesn‚Äôt need to keep track of the users or to keep connections alive, it can typically support many more active clients than a TCP application</li>\n<li><em>Small packet header overhead</em> TCP has 20 bytes of header overhead in every segment versus the 8 of UDP</li>\n</ul>\n<p>It is possible for an application developer to have reliable data transfer when using UDP. This can be done if reliability is built into the application itself (eg adding acknowledgement and retransmission mechanisms) but it is a nontrivial task and may keep the developer busy for a long time.</p>\n<h3 id=\"3-3-1-UDP-Segment-Structure\"><a href=\"#3-3-1-UDP-Segment-Structure\" class=\"headerlink\" title=\"3.3.1 UDP Segment Structure\"></a>3.3.1 UDP Segment Structure</h3><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-udp_segment.png\" alt=\"udp segment\"></p>\n<p>The UDP header has only four fields, each consisting of two bytes: </p>\n<ul>\n<li><code>source port number</code></li>\n<li><code>destination port number</code></li>\n<li><code>checksum</code> (used for error detection.)</li>\n<li><code>length</code> (which specifies the number of bytes in the UDP segment, header + data)</li>\n</ul>\n<p>This <code>length</code> field is needed since the size of the data field may differ from one UDP segment to the next.</p>\n<h3 id=\"3-3-2-UDP-Checksum\"><a href=\"#3-3-2-UDP-Checksum\" class=\"headerlink\" title=\"3.3.2 UDP Checksum\"></a>3.3.2 UDP Checksum</h3><p>Provides for error detection, to determine whether the bits in the segment have been altered as it moves from source to destination.</p>\n<p>At the send side, UDP performs the 1s complement of the sum of all the 16-bit (max 64) words in the segment, with any overflow encountered during the sum being wrapped around. This result is put in the checksum field of the UDP segment header.</p>\n<p>UDP implements error detection according to the <strong>end-end principle</strong>: certain functionality (error detection in this case) must be implemented on an end-end basis: ‚Äúfunctions placed at the lower levels may be redundant or of little value when compared to the cost of providing them at the higher level‚Äù.</p>\n<h2 id=\"3-4-Principles-of-Reliable-Data-Transfer\"><a href=\"#3-4-Principles-of-Reliable-Data-Transfer\" class=\"headerlink\" title=\"3.4 Principles of Reliable Data Transfer\"></a>3.4 Principles of Reliable Data Transfer</h2><p>It is the responsibility of a <strong>realiable data transfer protocol</strong> to implement reliable data service: no transferred data bits are corrupted or lost and all are delivered in the order in which they were sent.<br>We will consider the following actions:</p>\n<ul>\n<li>The sending side of the data transfer protocol will be invoked from above by a call to <code>rdt_send()</code></li>\n<li>On the receiving side <code>rdt_rcv()</code> will be called when a packet arrives while <code>deliver_data()</code> will be called when the <code>rdt</code> protocol wants to deliver data to the upper layer.</li>\n</ul>\n<p>We use the term packet rather than segment because the concepts explained here applies to computer networks in general.<br>We will only consider the case of <strong>unidirectional data transfer</strong> that is data transfer from the sending to the receiving side. The case of reliable <strong>bidirectional</strong> (full-duplex) <strong>data transfer</strong> is not more difficult but more tedious to explain. Nonetheless sending and receiving side will need to transmit packets in <em>both directions</em>.</p>\n<h3 id=\"3-4-1-Building-a-Reliable-Data-Transfer-Protocol\"><a href=\"#3-4-1-Building-a-Reliable-Data-Transfer-Protocol\" class=\"headerlink\" title=\"3.4.1 Building a Reliable Data Transfer Protocol\"></a>3.4.1 Building a Reliable Data Transfer Protocol</h3><p><strong>Finite-state machine</strong>s (FSM) are boring! And unlikely to be asked at the exam, therefore I decided not to cover them here.</p>\n<h3 id=\"3-4-2-Pipelined-Reliable-Data-Transfer-Protocols\"><a href=\"#3-4-2-Pipelined-Reliable-Data-Transfer-Protocols\" class=\"headerlink\" title=\"3.4.2 Pipelined Reliable Data Transfer Protocols\"></a>3.4.2 Pipelined Reliable Data Transfer Protocols</h3><p>In today‚Äôs high-speed networks stop-and-wait protocols are simply not tolerable: we  cannot send one packet and wait for the ACK and then send the second one, it is inefficient as we can see computing the <strong>utilization of the channel</strong>:</p>\n<p>$$ U &#x3D; \\frac{L&#x2F;R}{RTT+ L&#x2F;R} $$</p>\n<p>The solution is simple: rather than operate in a stop-and-wait manner, the sender is allowed to send multiple packets without waiting for acknowledgements. Since the many in-transit send-to-receiver packets can be visualized as filling a pipeline, this technique is known as <strong>pipelining</strong>.</p>\n<p>Some consequences:</p>\n<ul>\n<li>The range of sequence numbers must be increased: <strong>each in-transit packet must have a unique sequence number</strong></li>\n<li>Sender and receiver may have to buffer more than one packet.</li>\n</ul>\n<p>Two basic approaches toward pipelined error recovery can be identified: <strong>Go-Back-N</strong> and <strong>Selective Repeat</strong></p>\n<h3 id=\"3-4-3-Go-Back-N-GBN\"><a href=\"#3-4-3-Go-Back-N-GBN\" class=\"headerlink\" title=\"3.4.3 Go-Back-N (GBN)\"></a>3.4.3 Go-Back-N (GBN)</h3><p>The sender is allowed to send N packets (<strong>sender window size &#x3D; N</strong>), the receiver has a window of size <strong>1</strong>.<br>If a segment from sender to receiver is lost, the receiver discards all the segments with sequence number greater than the sequence number of the dropped packet, answering with ACK with this sequence number. (no packet re-ordering)<br>The sender will wait for ACK in order to move the window and send new packets. The wait is not infinite, after a certain time a timeout will occur and the sender will retransmit all the packets in the sending window.<br>In a Go-Back-N protocol, acknowledgements are <strong>cumulative</strong>: if sender receives ACK3 he will know that all the packets from 0 to 3 have been received, even if hasn‚Äôt received ACK2.</p>\n<h3 id=\"3-4-4-Selective-Repeat\"><a href=\"#3-4-4-Selective-Repeat\" class=\"headerlink\" title=\"3.4.4 Selective Repeat\"></a>3.4.4 Selective Repeat</h3><p>When the window-size and bandwidth-delay product are both large, many packets can be in the pipeline and a single packet error can thus cause GBN to retransmit a large number of packets, many unnecessarily.<br><strong>Selective Repeat</strong> avoid unnecessary retransmissions by having the sender retransmit only those that packets it suspects were received in error at the receiver:<br><strong>individual acknowledgements</strong> (opposed to cumulative).<br><strong>sender window size &#x3D; N</strong> and <strong>receiver window site &#x3D; N</strong>.<br>The sender has a timer for each packet in its window. When a timeout occurs, only the missing packet is resent.<br>The receiver buffers out of order packets.</p>\n<h2 id=\"3-5-Conncetion-Oriented-Transport-TCP\"><a href=\"#3-5-Conncetion-Oriented-Transport-TCP\" class=\"headerlink\" title=\"3.5 Conncetion-Oriented Transport: TCP\"></a>3.5 Conncetion-Oriented Transport: TCP</h2><h3 id=\"3-5-1-The-TCP-Connection\"><a href=\"#3-5-1-The-TCP-Connection\" class=\"headerlink\" title=\"3.5.1 The TCP Connection\"></a>3.5.1 The TCP Connection</h3><p>TCP is said to be <strong>connection-oriented</strong> because before one application process can begin to send data to another, the two processes must first ‚Äúhandshake‚Äù with each other. During the connection establishment, both sides of the connection will initialize many TCP state variables.<br>TCP connection is not an end-to-end TDM or FDM circuit nor is it a virtual circuit as <strong>the connection state resides entirely in the two end systems</strong> and not in the intermediate network elements.<br>A TCP connection provides a <strong>full-duplex service</strong>: when a connection between process A and process B, application layer data can flow from A to B and, at the same time, from B to A.<br>TCP is also <strong>point-to-point</strong>: a connection is always  between a <em>single sender</em> and a <em>single receiver</em>, no multicast possible.</p>\n<p>Establishment of the connection: the client first sends a special TCP segment, the server responds with a second special TCP segment and the client answer again with a third special TCP segment. The first two cannot contain a payload while the third can. Three segments: <strong>three-way handshake</strong>.<br>Both the sender and the receiver have buffers that are set up during the handshake.<br>The maximum amount if data that can be grabbed and placed in a segment is limited by the <strong>maximum segment size (MSS)</strong>.<br>TCP therefore splits data into smaller chunks and pairs each chunk of client data with a TCP header thereby forming <strong>TCP segments</strong> which are passed down to the network layer. When TCP receives a segment at the other end, the segment‚Äôs data is placed in the TCP connection‚Äôs receive buffer. <strong>Each side of the connection has its own send buffer and its own receive buffer</strong></p>\n<h3 id=\"3-5-2-TCP-Segment-Structure\"><a href=\"#3-5-2-TCP-Segment-Structure\" class=\"headerlink\" title=\"3.5.2 TCP Segment Structure\"></a>3.5.2 TCP Segment Structure</h3><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-tcp-segment.png\" alt=\"tcp segment\"></p>\n<ul>\n<li>32 bit sequence number and acknowledgement number necessary for reliable data transmission</li>\n<li>16 bit <strong>receive window</strong> used for flow control, indicates the number of bytes that a receiver is willing to accept</li>\n<li>4 bit <strong>header length field</strong>. The TCP header can be of a variable length due to the TCP options field (usually empty therefore usual length is 20 bytes)</li>\n<li><strong>options field</strong> used to negotiate MSS or as a window scaling factor for use in high speed networks.</li>\n<li><strong>flag field</strong>: 6 bits:<ol>\n<li>ACK used to indicate that the value carried in the acknowledgement field is valid, that is the segment contains an acknowledgement for a segment that has been successfully received.</li>\n<li>,  3. and 4. <strong>RST, SYN, FIN</strong> for connection setup and teardown</li>\n<li><strong>PSH</strong> indicates that the receiver should pass the data to upper layer immediately</li>\n<li>URG indicates that there is data in the segment that the sending side upper layer has marked as urgent.</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"Sequence-Numbers-and-Acknowledgment-Numbers\"><a href=\"#Sequence-Numbers-and-Acknowledgment-Numbers\" class=\"headerlink\" title=\"Sequence Numbers and Acknowledgment Numbers\"></a>Sequence Numbers and Acknowledgment Numbers</h4><p>TCP views data as <em>an unstructured, but ordered, stream of bytes</em> and TCP‚Äôs use of sequence numbers reflects this view: sequence numbers are over the stream of bytes and not over the series of transmitted segments.<br>The <strong>sequence number for a segment</strong> is the byte-stream number of the first byte in the segment.<br>EX 500,000 bytes, MSS &#x3D; 1,000 bytes &#x3D;&gt; 500 segments are created. First is numbered 0, second 1000, third 2000‚Ä¶..</p>\n<p><strong>The acknowledgement number</strong> <em>that Host A puts in its segment is the sequence number of the next byte Host A is expecting from Host B</em>.<br>TCP is said to provide <strong>cumulative acknowledgements</strong>: if sender receives ACK 536 he will know that all the bytes from 0 to 535 have been well received.<br>What does a host do when it receives out-of-order segments? The receiver buffers the out-of-order bytes and waits for the missing bytes to fill in the gaps.<br>Usually both sides of a TCP connection randomly choose an initial sequence number <strong>randomly</strong> both for security and for minimizing the possibility that a segment that is still present in the network from an earlier, already terminated connection between two hosts is mistaken for a valid segment in a later connection between these same two hosts.</p>\n<h3 id=\"3-5-3-Round-Trip-Time-Estimation-and-Timeout\"><a href=\"#3-5-3-Round-Trip-Time-Estimation-and-Timeout\" class=\"headerlink\" title=\"3.5.3 Round-Trip Time Estimation and Timeout\"></a>3.5.3 Round-Trip Time Estimation and Timeout</h3><p>TCP uses a timeout&#x2F;retransmit mechanism to recover from lost segments. The question rises: How long should the timeout intervals be?<br>Clearly the timeout should be larger than the connection‚Äôs round-trip time? How much larger? How can the RTT be evaluated?</p>\n<h4 id=\"Estimating-the-Round-Trip-Time\"><a href=\"#Estimating-the-Round-Trip-Time\" class=\"headerlink\" title=\"Estimating the Round-Trip Time\"></a>Estimating the Round-Trip Time</h4><p>The sample RTT, <code>SampleRTT</code>, for a segment is the amount of time between when the segment is sent (passed to network layer) and when an acknowledgement for the segment is received.<br>Most TCP implementations take one <code>SampleRTT</code> at a time: at any point in time, the <code>SampleRTT</code> is being estimated for only one of the transmitted but currently unacknowledged segments, leading to a <em>new value of <code>SampleRTT</code> for approximatively every RTT</em>.<br>TCP <strong>never computes a <code>SampleRTT</code> for a segment that has been retransmitted</strong>, only for segments transmitted once.<br>In order to estimate a typical RTT, TCP keeps an average called <code>EstimatedRTT</code> of the <code>SampleRTT</code> values. Upon obtaining a new <code>SampleRTT</code> TCP updates this estimation according to the formula:</p>\n<p><code>EstimatedRTT = (1 - a) * EstimatedRTT + a * SampleRTT</code></p>\n<p> where usually a &#x3D; 1&#x2F;8 &#x3D; 0.125</p>\n<p>We note that this weighted average puts more weight on recent samples than on old samples. In statistics such an average is called an <strong>exponential weighted moving average (EWMA)</strong>.<br>It is also useful to having an estimate of the <em>variability of the RTT</em>. We can measure how much <code>SampleRTT</code> typically deviates from <code>EstimatedRTT</code>:</p>\n<p><code>DevRTT = (1 - b) * DevRTT + b* | SampleRTT - EstimatedRTT |</code></p>\n<p>We note that this is an EWMA of the difference of estimated and last measured RTT. The recommended value for b is b &#x3D; 0.25</p>\n<h4 id=\"Setting-and-Managing-the-Retransmission-Timeout-Interval\"><a href=\"#Setting-and-Managing-the-Retransmission-Timeout-Interval\" class=\"headerlink\" title=\"Setting and Managing the Retransmission Timeout Interval\"></a>Setting and Managing the Retransmission Timeout Interval</h4><p><code>TimeoutInterval = EstimatedRTT + 4 * DevRTT</code></p>\n<p>An initial <code>TimeoutInterval</code> value of 1 second is recommended.<br>Also <strong>when a timeout occurs, the value of <code>TimeoutInterval</code> is doubled</strong> in order to avoid a premature timeout occurring for a subsequent segment that will soon be acknowledged. As soon as a segment is received and <code>EstimatedRTT</code> is updated, the <code>TimeoutInterval</code> is again computed using the formula above.</p>\n<h3 id=\"3-5-4-Reliable-Data-Transfer\"><a href=\"#3-5-4-Reliable-Data-Transfer\" class=\"headerlink\" title=\"3.5.4 Reliable Data Transfer\"></a>3.5.4 Reliable Data Transfer</h3><p>TCP creates a <strong>reliable data transfer service</strong> on top of IP‚Äôs unreliable best-effort service. It ensures that the data stream that a process reads out of its TCP receive buffer is <em>uncorrupted, without gaps, without duplication and in sequence</em>.<br>We supposed until now that an individual timer was associated with each transmitted segment. However timer management can require considerable overhead. Thus the recommended TCP timer management procedures (defined by RFC standards) use only a <em><strong>single</strong></em> retransmission timer (it is helpful to think of the timer as being <em>associated with the oldest unacknowledged segment</em>).</p>\n<ol>\n<li>Upon receiving data from the application layer, TCP encapsulates it in a segment and passes to the segment to IP. If the timer is not running for some other segment, TCP starts it when the segment is passed to IP, the timer expiration interval being <code>TimeoutInterval</code></li>\n<li>If the timeout occurs, TCP responds by <strong>retransmitting the segment that caused the timeout</strong> and by restarting the timer</li>\n<li>An valid acknowledgement segment is received: TCP compares the ACK <code>y</code> value with its <code>sendBase</code> (the sequence number of the oldest unacknowledged byte). If <code>y &gt; sendBase</code> then ACK is acknowledging one or more previously unacknowledged segments (cumulative acknowledgement). The <code>sendBase</code> variable is updated and the timer is restarted if there are not-yet-acknowledged segments.</li>\n</ol>\n<h4 id=\"Doubling-the-Timeout-Interval\"><a href=\"#Doubling-the-Timeout-Interval\" class=\"headerlink\" title=\"Doubling the Timeout Interval\"></a>Doubling the Timeout Interval</h4><p>Each time TCP retransmits, it sets the next timeout interval to twice the prevous value. However when the timer is restarted after receiving data from the application layer or after receiving an ACK, the <code>TimeoutInterval</code> is recomputed as described previously</p>\n<h4 id=\"Fast-Retransmit\"><a href=\"#Fast-Retransmit\" class=\"headerlink\" title=\"Fast Retransmit\"></a>Fast Retransmit</h4><p>The problem with timeout-triggered retransmission is that the timeout period can be relatively long.<br>The sender can however often detect packet loss before the timeout event occurs by noting <em>duplicate ACKs</em>. A <strong>duplicate ACK</strong> is an ACK that reacknowledges a segment for which the sender has already received an earlier acknowledgement.<br>When the TCP sender receives <strong>three duplicate ACK for the same data</strong> it takes this as an indication that the segment following the segment that has been ACKed three times has been lost. In the case that three duplicate ACKs are received, the TCP sender performs a <strong>fast restransmit</strong>: it retransmits the missing segment <em>before</em> that segment‚Äôs timer expires.</p>\n<h4 id=\"Go-Back-N-or-Selective-Repeat\"><a href=\"#Go-Back-N-or-Selective-Repeat\" class=\"headerlink\" title=\"Go-Back-N or Selective Repeat?\"></a>Go-Back-N or Selective Repeat?</h4><p>Acknowledgments are cumulative (GBN) but many TCP implementations will buffer correctly received but out-of-order segments.<br>Also consider fast retransmit where only the missing packet is resent (SR) instead of all the window (GBN).<br>We can see that TCP‚Äôs error recovery mechanism is categorized as a <strong>hybdrid of GB and SR protocols</strong>.</p>\n<h3 id=\"3-5-5-Flow-Control\"><a href=\"#3-5-5-Flow-Control\" class=\"headerlink\" title=\"3.5.5 Flow Control\"></a>3.5.5 Flow Control</h3><p>The host on each side of a TCP connection set aside a receive buffer for the connection. When TCP receives bytes that are correct and in sequence, it places the data in the receive buffer. The associated application process will read data from this buffer, but necessarily at the instant the data arrives (busy, not interested‚Ä¶). Thus the <em>the sender can easily overflow the connection‚Äôs receive bufffer by sending too much data too quickly</em>. To avoid this event, TCP provides a <strong>flow-control service</strong>.<br>Flow control is a <em>speed-matching service</em>: matching the rate at which the sender is sending against the rate at which the receiving application is reading.</p>\n<p><strong>Flow control and congestion control are not the same!</strong>: the former preventing overflow at the receiver side and being actuated only by the two end points, the latter preventing congestion of the network.</p>\n<p>TCP provides flow control by having the <em>sender</em> maintain a variable called the <strong>receive window</strong>, used to give the sender an idea of how much free buffer space is available at the receiver.</p>\n<p>Host A sends a large file to Host B over TCP.</p>\n<h5 id=\"B-side\"><a href=\"#B-side\" class=\"headerlink\" title=\"B side\"></a>B side</h5><ul>\n<li>B allocates a receive buffer to its connection, its size being <code>RcvBuffer</code></li>\n<li>B also keeps the variables: <code>LastByteRead</code> (number of last byte in the data stream read by the application process) and <code>LastByteRcvd</code> (the number of the last byte arrived from the network and placed in the receive buffer)</li>\n</ul>\n<p>We have: <code>LastByteRcvd - LastByteRead &lt;= RcvBuffer</code> (we don‚Äôt want overflow!)</p>\n<p>Receive window aka the <em>amount of spare room in the buffer</em> <code>rwnd = RcvBuffer -  [LastByteRcvd - LastByteRead]</code><br><code>rwnd</code> is dynamic</p>\n<h5 id=\"A-side\"><a href=\"#A-side\" class=\"headerlink\" title=\"A side\"></a>A side</h5><p>A keeps track of two variables:</p>\n<pre><code>1. `LastByteSent`\n2. `LastByteAcked`\n</code></pre>\n<p>Through the connection‚Äôs life A must make sure that <code>LastByteSent - LastByteSent &lt;= rwnd</code></p>\n<p>If B‚Äôs buffer becomes full, he sends <code>rwnd = 0</code>.  If <em>B has nothing to send to A</em>, when the application process empties B‚Äôs buffer, TCP does not send a new segment with the new value of <code>rwnd</code> to A (TCP sends to A only if it needs to send data or if it needs to send an ACK).<br>Therefore A is never informed that B‚Äôs buffer has some free space and <strong>he is blocked and can trasmit no more data</strong>.<br>To solve this problem, TCP requires A to <strong>continue to send segments with one data byte when B‚Äôs receive window is 0</strong>, these segments will be acknowledged by B. Eventually the buffer will begin to empty and the acknowledgements will contain √† non-zero <code>rwnd</code> value.</p>\n<p>We remember that <strong>UDP has no flow control service</strong></p>\n<h3 id=\"3-5-6-TCP-Connection-Management\"><a href=\"#3-5-6-TCP-Connection-Management\" class=\"headerlink\" title=\"3.5.6 TCP Connection Management\"></a>3.5.6 TCP Connection Management</h3><h4 id=\"How-is-the-connection-established-Three-way-handshake\"><a href=\"#How-is-the-connection-established-Three-way-handshake\" class=\"headerlink\" title=\"How is the connection established? Three-way handshake\"></a>How is the connection established? <strong>Three-way handshake</strong></h4><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-three-way.png\" alt=\"three way\"></p>\n<ol>\n<li>The client-side TCP sends a special TCP segment to server-side TCP. This segment <strong>doesn‚Äôt contain any application-layer data</strong> but the <strong>flag bit SYN is set to 1</strong>. The segment is referred to as a <em>SYN segment</em>. The client also <strong>randomly chooses an initial sequence number</strong> (<code>client_isn</code>) and <strong>puts this number in the sequence number field of the initial TCP SYN segment</strong>. (randomizing <code>client_isn</code> is interesting to avoid security attacks).</li>\n<li>The TCP SYN segment arrives at the server-side, it is extracted from the datagram. The server allocates the TCP buffers and variables to the connection and <strong>sends a connection-granted segment to the client</strong>. This segment also contains no application-layer data. The <strong>SYN flag is set to 1</strong>, the <strong>ACK field in the header is set to <code>client_isn+1</code></strong>. <strong>The server chooses its own initial sequence number <code>server_isn</code></strong> and <strong>puts this value in the sequence number field of the TCP segment header</strong>. This segment is referred to as <em>SYNACK segment</em>.</li>\n<li>Upon receiving the SYNACK segment, the client also allocates buffers and variables to the connection. The client then <strong>sends the server yet another segment which acknowledges the SYNACK</strong> (<code>server_isn+1</code> is set the acknowledgement field of the TCP segment header)</li>\n</ol>\n<p>After this setup, all the segments will have the SYN bit set to 0 in their headers.</p>\n<h4 id=\"Tearing-down-a-TCP-connection\"><a href=\"#Tearing-down-a-TCP-connection\" class=\"headerlink\" title=\"Tearing down a TCP connection\"></a>Tearing down a TCP connection</h4><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-tcp-end.png\" alt=\"tcp end\"></p>\n<p>The client decides to end the connection:</p>\n<ol>\n<li>The client sends a special TCP segment to the server, this special segment having the <strong>FIN bit flag set to 1</strong> in the header.</li>\n<li>The server receives the segment and sends an acknowledgement to the client.</li>\n<li>The server then sends its own shutdown segment which also <strong>has the FIN bit set to 1</strong></li>\n<li>The client acknowledges the server‚Äôs shutdown segment.</li>\n<li>The ‚Äúresources‚Äù (buffers and variables) in the host<strong>s</strong> are deallocated.</li>\n</ol>\n<h4 id=\"What-if-the-two-ends-are-not-ready-for-communication\"><a href=\"#What-if-the-two-ends-are-not-ready-for-communication\" class=\"headerlink\" title=\"What if the two ends are not ready for communication?\"></a>What if the two ends are not ready for communication?</h4><p> A host receives a TCP segment whose port number or source IP address do not match with any of the ongoing sockets in the host -&gt; the host sends a special reset segment to the source (RST flag bit set to 1) and drops the packet (UDP does responds with a special ICMP datagram)</p>\n<h2 id=\"3-6-Principles-of-Congestion-Control\"><a href=\"#3-6-Principles-of-Congestion-Control\" class=\"headerlink\" title=\"3.6 Principles of Congestion Control\"></a>3.6 Principles of Congestion Control</h2><h3 id=\"3-6-1-The-Causes-and-the-Costs-of-Congestion\"><a href=\"#3-6-1-The-Causes-and-the-Costs-of-Congestion\" class=\"headerlink\" title=\"3.6.1 The Causes and the Costs of Congestion\"></a>3.6.1 The Causes and the Costs of Congestion</h3><h4 id=\"Scenario-1-Two-Senders-A-Router-with-Infinite-Buffers\"><a href=\"#Scenario-1-Two-Senders-A-Router-with-Infinite-Buffers\" class=\"headerlink\" title=\"Scenario 1: Two Senders, A Router with Infinite Buffers\"></a>Scenario 1: Two Senders, A Router with Infinite Buffers</h4><p>A -&gt; D, B -&gt; C, A and B connect to the Internet through the same router, B and C connect to the Internet through the same router<br>(pas envie)</p>\n<h2 id=\"3-7-TCP-Congestion-Control\"><a href=\"#3-7-TCP-Congestion-Control\" class=\"headerlink\" title=\"3.7 TCP Congestion Control\"></a>3.7 TCP Congestion Control</h2><p>TCP limits the rate at which it sends traffic into its connection as a function of perceived network congestion.<br>The TCP congestion-control mechanism operating at the sender keeps track of an additional variable: the <strong>congestion window</strong>, noted <code>cwnd</code> which imposes a constraint on the rate at which a TCP sender can send traffic into the network. Specifically: <code>LastByteSent - LastByteAcked &lt;= min&#123;cwnd, rwnd&#125;</code>.<br>Limiting the amount of unacknowledged data at the sender we can limit the sender‚Äôs send rate.<br>At the beginning of each RTT the sender sends <code>cwnd</code> bytes of data and at the end of the RTT he acknowledges. Thus <strong>the sender‚Äôs send rate is roughly <code>cwnd/RTT</code> bytes&#x2F;sec. Adjusting the value of <code>cwnd</code> the sender can adjust the rate at which it sends data into the connection</strong>.<br>Let now consider a <em>loss event</em> (timeout OR three duplicate ACKs). When there is excessive congestion some router buffers along the path overflows, causing a loss event at the sender <em>which is taken by the sender to be an indication of congestion on the sender-to-receiver path</em>.<br>If there is no congestion then all the acknowledgements will be received at the sender, which will take these arrivals as an indication that segments have been received and that he can increase the congestion window size and hence its transmission rate. If acknowledgements arrive at a slow rate then the congestion window will be increased at a relatively slow rate and, viceversa, it will be increased more quickly if ACKs arrive at a high rate.<br>Because TCP uses acknowledgements to trigger (or clock) its increase in congestion window size, TCP is said to be <strong>self-clocking</strong>. TCP uses the principles:</p>\n<ol>\n<li><em>A lost segment implies congestion therefore the sender rate should be decreased.</em></li>\n<li><em>An acknowledged segment means the network‚Äôs working, therefore the sender‚Äôs rate can be increased</em> (if ACK of unacknowledged segment)</li>\n<li><em>Bandwidth probing</em>: the transmission rates increases with ACKs and decreases with loss events: TCP is continuously checking (probing) the congestion state of the network</li>\n</ol>\n<h3 id=\"TCP-Congestion-Control-Algorithm\"><a href=\"#TCP-Congestion-Control-Algorithm\" class=\"headerlink\" title=\"TCP Congestion-Control Algorithm\"></a>TCP Congestion-Control Algorithm</h3><p>Three components :</p>\n<h4 id=\"1-Slow-Start\"><a href=\"#1-Slow-Start\" class=\"headerlink\" title=\"1 - Slow Start\"></a>1 - Slow Start</h4><p>When a TCP connection begins, <code>cwnd</code> is usually initialized to a small value of 1 MSS and only one segment is sent. <strong>Each acknowledged packet</strong> will cause the <code>cwnd</code> to be increased by 1 MSS and the sender will send now two segments (because the window is increased by one for each ack).<br>Therefore the number of segments doubles at each RTT, therefore the sending rate also doubles every RTT. Thus TCP send rate <strong>starts slow but grows exponentially during the slow start phase</strong>.<br>When does the growth end?</p>\n<ul>\n<li>Timeout: <code>cwnd</code> is set to 1 MSS and the slow start is started anew. Also the variable slow start threshold is initialized:<br> <code>ssthresh = cwnd / 2 - (half of value of cwnd when congestion is detected)</code></li>\n<li>When <code>cwnd &gt;= ssthresh</code> slow starts is stopped -&gt; congestion avoidance state</li>\n<li>Three duplicate ACKs: fast retransmit and fast recovery state</li>\n</ul>\n<h4 id=\"2-Congestion-Avoidance\"><a href=\"#2-Congestion-Avoidance\" class=\"headerlink\" title=\"2 - Congestion Avoidance\"></a>2 - Congestion Avoidance</h4><p>TCP suppose congestion is present, how to adapt?<br>Instead of doubling <code>cwnd</code> every RTT, <code>cwnd</code> is increased <strong>by just a single MSS every RTT</strong>.<br>When should this linear increase stop?</p>\n<ul>\n<li>Timeout: <code>cwnd</code> is set to 1 MSS, and <code>ssthresh = cwnd (when loss happened) / 2</code></li>\n<li>Three duplicate ACKs: <code>cwnd = (cwnd / 2) + 3 MSS</code> and <code>ssthresh = cwnd (when 3 ACKs received) / 2</code> -&gt; fast recovery state</li>\n</ul>\n<h4 id=\"3-Fast-Recovery\"><a href=\"#3-Fast-Recovery\" class=\"headerlink\" title=\"3 - Fast Recovery\"></a>3 - Fast Recovery</h4><p><code>cwnd</code> is increased by 1 MSS for every duplicate ACK received for the missing state that caused TCP to enter this state. When the ACK arrives for the missing segment, TCP goes into Congestion Avoidance after reducing <code>cwnd</code>.<br>If a timeout occurs <code>cwnd</code> is set to 1 MSS and <code>ssthresh</code> is set to half the value of <code>cwnd</code> when the loss event occurred.<br>Fast recovery is recommended but not required in TCP, in fact only the newer version of TCP, <strong>TCP Reno</strong> incorporated fast recovery.</p>\n<h4 id=\"Macroscopic-Description-of-TCP-Throughput\"><a href=\"#Macroscopic-Description-of-TCP-Throughput\" class=\"headerlink\" title=\"Macroscopic Description of TCP Throughput\"></a>Macroscopic Description of TCP Throughput</h4><p>What is the average throughput (average rate) of a long-lived TCP connection?<br>Ignoring the slow start phase (usually very short as the rate grows exponentially). When the window size is <em>w</em> the transmission rate is roughly <em>w</em>&#x2F;RTT. <em>w</em> is increased by 1 MSS each RTT until a loss event.<br>Denote by <em>W</em> the value of <em>w</em> when a loss event occurs. Then we have</p>\n<p>average throughput of a connection &#x3D; (0.75 * W)&#x2F;RTT</p>\n<h4 id=\"TCP-Over-High-Bandwidth-Paths\"><a href=\"#TCP-Over-High-Bandwidth-Paths\" class=\"headerlink\" title=\"TCP Over High-Bandwidth Paths\"></a>TCP Over High-Bandwidth Paths</h4><p>Today‚Äôs high speed links allow to have huge windows. What happens if one of the segments in the window gets lost? What fraction of the transmitted segments could be lost that would allow the TCP congestion control to achieve the desired rate?</p>\n<p>average throughput of a connection &#x3D; (1.22 * MSS)&#x2F;(RTT * sqrt(L))</p>\n<p>Where L is the loss rate</p>\n<h1 id=\"Chapter-4-The-Network-Layer\"><a href=\"#Chapter-4-The-Network-Layer\" class=\"headerlink\" title=\"Chapter 4: The Network Layer\"></a>Chapter 4: The Network Layer</h1><p>In the chapter, there is an important distinction between the <strong>routing</strong> and <strong>forwarding</strong> functions of the network layer. Forwarding involves the transfer of a packet from an incoming link to an outgoing link <em>within a single router</em> while routing involves <em>all of a network‚Äôs routers</em> whose collective interactions via routing protocols determine the paths that packets take on their trips from source to destination.</p>\n<h2 id=\"4-1-Introduction\"><a href=\"#4-1-Introduction\" class=\"headerlink\" title=\"4.1 Introduction\"></a>4.1 Introduction</h2><p>The primary role of routers is to forward datagrams from input links to output links. Routers do not run nor the application-layer or the transport-layer, they go only up until the network layer.</p>\n<h3 id=\"4-1-1-Forwarding-and-Routing\"><a href=\"#4-1-1-Forwarding-and-Routing\" class=\"headerlink\" title=\"4.1.1 Forwarding and Routing\"></a>4.1.1 Forwarding and Routing</h3><p>The role of the network layer is deceptively simple: <strong>to move packets from a sending hosts to a receiving host</strong>. To do so it performs two important functions:</p>\n<ul>\n<li><em><strong>Forwarding</strong></em>: When a packet arrives to a router‚Äôs input link, the router must move the packet to the appropriate output link. It is an action <strong>local</strong> to the router</li>\n<li><em><strong>Routing</strong></em>: The network layer must determine the route or path taken by packets as they flow from a sender to a receiver. The algorithms that calculate these paths are referred to as <strong>routing algorithsm</strong>. It is a <strong>network-wide</strong> action</li>\n</ul>\n<p>Every router has a <strong>forwarding table</strong>. When a router receives a packet, it extracts a value from a specific field in the header and searches for that value in in the forwarding table.<br>The procedure used to set up and update the table depends on the protocol used. However a router receives and sends <em>routing protocol messages</em> to configure its forwarding table.</p>\n<p>We also need to mark the distinction between routers and <em>packet switches</em>.</p>\n<ul>\n<li>Packet-switches: performs forwarding according to the value in a field in the header of the packet. Some packet switches called <strong>link-layer switches</strong> base their forwarding decisions on values in the fields of the <em>link-layer frame</em> (link-layer devices)</li>\n<li>Routers: base forwarding decisions on the value in the network-layer field. (network-layer devices) but also must implement link layer (no 3 without 2)</li>\n</ul>\n<h4 id=\"Connection-Setup\"><a href=\"#Connection-Setup\" class=\"headerlink\" title=\"Connection Setup\"></a>Connection Setup</h4><p>in some computer networks there is a third really important networks-layer function: <strong>connection setup</strong>: a <strong>path-wide</strong> process that sets up connection state in routers.</p>\n<h3 id=\"4-1-2-Network-Service-Models\"><a href=\"#4-1-2-Network-Service-Models\" class=\"headerlink\" title=\"4.1.2 Network Service Models\"></a>4.1.2 Network Service Models</h3><p>The <strong>network service model</strong> defines the characteristics of end-to-end transport of packets between sending and receiving end systems. Some possible service for a network layer:</p>\n<ol>\n<li>Sending side:<ul>\n<li><em>Guaranteed delivery</em></li>\n<li><em>Guaranteed delivery with bounded delay</em></li>\n</ul>\n</li>\n<li>Flow and receiving side:<ul>\n<li><em>In-order packet delivery</em></li>\n<li><em>Guaranteed minimal bandwidth</em></li>\n<li><em>Guaranteed maximum jitter</em> (amount of time between transmission of two successive packets at the sender side is equal to the amount of time between their receipt at the destination, or that this spacing changes by no more than some specified value)</li>\n<li><em>Security services</em>: encryption for confidentiality, data integrity and source authentication</li>\n</ul>\n</li>\n</ol>\n<p><strong>The Internet‚Äôs network layer doesn‚Äôt provide any of these</strong>: it provides a <strong>best-effort service</strong> there are no timing or bandwidth guarantees, no loss or order guarantees and congestion control indications.</p>\n<h2 id=\"4-2-Virtual-Circuit-and-Datagrams-Networks\"><a href=\"#4-2-Virtual-Circuit-and-Datagrams-Networks\" class=\"headerlink\" title=\"4.2 Virtual  Circuit and Datagrams Networks\"></a>4.2 Virtual  Circuit and Datagrams Networks</h2><p>As in transport layer, the network layer can use connection or connection-less protocols. There however some differences with the transport layer:</p>\n<ul>\n<li>In the network layer these services are <strong>host-to-host</strong> services (not the case for the TL, just look at TCP)</li>\n<li>The network layer provides either a host-to-host connectionless service or a host-to-host connection service <strong>but no both</strong>. Connection service -&gt; <strong>Virtual-Circuit (VC) networks</strong>, Connectionless service -&gt; <strong>datagram networks</strong></li>\n</ul>\n<h3 id=\"4-2-1-Virtual-Circuit-Networks\"><a href=\"#4-2-1-Virtual-Circuit-Networks\" class=\"headerlink\" title=\"4.2.1 Virtual-Circuit Networks\"></a>4.2.1 Virtual-Circuit Networks</h3><p>The Internet is a datagram network but many alternative network architectures (ATM) are virtual-circuit networks. The connections in VC are called *<em>virtual circuits (VCs)3</em>.<br>A VC consists of</p>\n<ol>\n<li>A source-to-destination <em>path</em></li>\n<li>VC numbers, one for each link along the path</li>\n<li>Entries in the forwarding table in each router along the path</li>\n</ol>\n<p>A packet belonging to a virtual circuit will carry a VC number in its header. Because a VC may have different VC numbers on each link, each router must replace the VC number of traversing packets with a new VC number, which is obtained from the forwarding table. How is this determined?<br>Whenever a VC is established across a router, an entry is added to the forwarding table, and one (corresponding to the terminating VC) is removed whenever a VC ends.<br>The routers must maintain <strong>connection state information</strong> for the ongoing connections (using the tablea). There are 3 phases in a VC:</p>\n<ul>\n<li><em>VC Setup</em>: sending side contacts networks layer specifying the IP address of the destination. The network sets up the VC. The path is determined as well as the VC number for each link along the path. The forwarding tables are updated and resources reserved.</li>\n<li><em>Data transfer</em>: the packets flow</li>\n<li><em>VC teardown</em>: The call termination propagates along the path, the forwarding tables are updated</li>\n</ul>\n<p>During network-layer setup <em>all the routers along the path between source and destination are involved in VC setup, and each router is fully aware of all VCs passing through it</em> (not in TCP: setup and connection only between source and destination).<br>The messages used by end ssystems to initiate or terminate a VC are called <strong>signaling messages</strong> and the protocols used to exchange them are called <strong>signaling protocols</strong>.</p>\n<h3 id=\"4-2-2-Datagram-Networks\"><a href=\"#4-2-2-Datagram-Networks\" class=\"headerlink\" title=\"4.2.2 Datagram Networks\"></a>4.2.2 Datagram Networks</h3><p>Each time an end system wants to send a packet, it sampts the packet with the address of the destination end system and pops the packet into the network. The routers along the path will use this address to forward it.<br>The router has a forward table that <em>maps destination addresses to link interfaces</em>. When a packet arrives, it reads the destination address, uses the table to determine what link to use, and forwards the packet to that output link interface.</p>\n<p>If we consider IPv4, addresses are 32 bits long. To avoid having tables with 2^32 entries, routers use <strong>prefixes</strong>. When there are multiple mathces to one address, the router uses the <strong>longest prefix matching rule</strong>.</p>\n<p>Although routers in datagram networks maintain no connection state information, they nevertheless maintain forwarding state information in their forwarding tables.</p>\n<h3 id=\"4-2-3-Origins-of-VC-and-Datagram-Networks\"><a href=\"#4-2-3-Origins-of-VC-and-Datagram-Networks\" class=\"headerlink\" title=\"4.2.3 Origins of VC and Datagram Networks\"></a>4.2.3 Origins of VC and Datagram Networks</h3><p>VC has its roots in the telephony world, which uses circuits switching too.<br>The datagram model instead comes from the need to simplify as much as possible the network to bring computers together.</p>\n<h2 id=\"4-3-What‚Äôs-Inside-a-Router\"><a href=\"#4-3-What‚Äôs-Inside-a-Router\" class=\"headerlink\" title=\"4.3 What‚Äôs Inside a Router?\"></a>4.3 What‚Äôs Inside a Router?</h2><ul>\n<li><em>Input ports</em>: performs the physical layer functions of incoming link at the router. It is also here that the forwarding table is consulted to determine the output port to which the arriving packet will be forwarded via the switching fabric. Control packets (protocol info) are forwarded to the routing processor.</li>\n<li><em>Switching fabric</em>: connects input prots to output ports.</li>\n<li><em>Output ports</em>: stores packets received from the switching fabric and performs the necessary link layer and physical layer functions.</li>\n<li><em>Routing processor</em>: executes the routing protocols (algorithms), maintains routing tables and attached link state information and computes the forwarding table for the router.</li>\n</ul>\n<p>Input ports, switching fabric and output ports implement the forwarding function and are almost always implemented in hardware (<em>routing forwarding plane hardware</em>) while the routing processor implements the routing function and is usually implemented in software running on traditional CPU (<em>router control plane</em>)</p>\n<h3 id=\"4-3-1-Input-Processing\"><a href=\"#4-3-1-Input-Processing\" class=\"headerlink\" title=\"4.3.1 Input Processing\"></a>4.3.1 Input Processing</h3><p>The packet arrives and the link and phyisical layer unpacking functions are performed. The forwarding table is computed and updated by the routing processor with a shadow copy typically stored at each input port so that forwarding decision can be made locallly without invoking the centralized routing processor on a per packet basis and thus avoiding a centralized processing bottleneck. The table is transferred to ports through separated bus. The lookup is then just a search (implemented in hardware and using high performance algorithms), speed also depends on the memory technology (DRAM, SRAM‚Ä¶). Lookup is important but input processing also consists of</p>\n<ul>\n<li>physical and link layer processing</li>\n<li>chekcing the packet‚Äôs version number, checksum, time to live‚Ä¶.</li>\n<li>updating counters for network management.</li>\n</ul>\n<p>Input ports than moves the packet to the switching fabric (eventually queuing them if this is busy)</p>\n<h3 id=\"4-3-2-Switching\"><a href=\"#4-3-2-Switching\" class=\"headerlink\" title=\"4.3.2 Switching\"></a>4.3.2 Switching</h3><p>Can be performed in different ways:</p>\n<h4 id=\"Switching-via-memory\"><a href=\"#Switching-via-memory\" class=\"headerlink\" title=\"Switching via memory\"></a>Switching via memory</h4><p>Switching under the control of the CPU and input and output ports functioned as traditional I&#x2F;O devices in a traditional operating system. The packet arrives, is copied into the processor memory, the processor determines the output port and copies the packet to the output port‚Äôs buffer.<br>No parallel forwarding (only 1 memory read&#x2F;write bus)</p>\n<h4 id=\"Switching-via-a-bus\"><a href=\"#Switching-via-a-bus\" class=\"headerlink\" title=\"Switching via a bus\"></a>Switching via a bus</h4><p>An input port transfers a packet directly to the output port over a shared bus without intervention by the routing processor. The input port pre-pends an internal header to the packet. All the output ports receive the packet but only the one that matches the label in the internal header will keep the packet. The output port will remove this internal header. The switching speed is limited to the bus speed as one packet at a time can cross the bus (multiple arriving packets will have to wait). Sufficient only for small area and enterprise networks</p>\n<h4 id=\"Switching-via-an-interconnected-network\"><a href=\"#Switching-via-an-interconnected-network\" class=\"headerlink\" title=\"Switching via an interconnected network\"></a>Switching via an interconnected network</h4><p>To overcome the bandwidth limitation of a single shared bus a more sophisticated interconnection network can be used.<br>A <em>crossbar switch</em> is an interconnection network consisting of 2N buses that connect N input ports to N output ports. Each vertical bus intersects each horizontal bus at a crosspoint which can be opened or closed at any time by the switch fabric controller. If a packet has to go from input X to output Y, only the crosspoint between the horizontal bus from X and the vertical bus to Y will be closed.<br>Thus packets directed to different output ports can be forwarded simultaneously, but not multiple packets directed to the same output port.</p>\n<h3 id=\"4-3-3-Output-Processing\"><a href=\"#4-3-3-Output-Processing\" class=\"headerlink\" title=\"4.3.3 Output Processing\"></a>4.3.3 Output Processing</h3><p>takes packets stored in the output‚Äôs port‚Äôs memory and transmits them over the output link, thus selecting de dequeuing packets for transmission and performing the necessary link and physical layer transmission functions.</p>\n<h3 id=\"4-3-4-Where-Does-Queuing-Occur\"><a href=\"#4-3-4-Where-Does-Queuing-Occur\" class=\"headerlink\" title=\"4.3.4 Where Does Queuing Occur?\"></a>4.3.4 Where Does Queuing Occur?</h3><p>Queues may form at both the input ports and the output ports. The location and the extent of queuing will depend on traffic load, speed of the switching fabric, and line speed. As the queues grow large, the router‚Äôs memory can eventually be exhausted and <strong>packet loss</strong> will occur. IS THIS USEFUL ? NOT COVERED BY TEACHER</p>\n<h2 id=\"4-4-The-Internet-Protocol-IP-Forwarding-and-Addressing-in-the-Internet\"><a href=\"#4-4-The-Internet-Protocol-IP-Forwarding-and-Addressing-in-the-Internet\" class=\"headerlink\" title=\"4.4 The Internet Protocol (IP): Forwarding and Addressing in the Internet\"></a>4.4 The Internet Protocol (IP): Forwarding and Addressing in the Internet</h2><p>We know move to study of the network layer in the Internet. There are two versions of the IP (Internet Protocol) in use today: IPv4 and IPv6.<br>There 3 main components in the Internet: the IP Protocol (addressing, datagram format and packet handling conventions), the routing protocol (path selection), the Internet Control Message Protocol (ICMP) (error reporting and network information).</p>\n<h3 id=\"4-4-1-Datagram-Format\"><a href=\"#4-4-1-Datagram-Format\" class=\"headerlink\" title=\"4.4.1 Datagram Format\"></a>4.4.1 Datagram Format</h3><p>A network layer packet is referred to as a <strong>datagram</strong>.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ipv4datagram.png\" alt=\"ipv4 datagram\"></p>\n<p>Some fields:</p>\n<ul>\n<li><em>Version number</em>: 4 bits specifying the IP protocol version of the datagram (IPv4 or IPv6 )</li>\n<li><em>Header length</em>: the length of the packet is variable therefore this field tells where the header ends and the data begins. Usually datagrams contain no option so that the typical IP datagram has <strong>20-byte header</strong></li>\n<li><em>Type of service</em> (TOS): allows different types of datagrams to be distinguished from each other. (eg real time vs non real time)</li>\n<li><em>Datagram length</em>: 16 bits specifying the total length, that is header + data measured in bytes. 16 bits -&gt; max header length &#x3D; 65535 bytes, but usually datagrams are rarely larger than 1500 bytes.</li>\n<li><em>Identifier, flags, fragmentation offset</em>: used for IP fragmentation. (NB: IPv6 doesn‚Äôt allow fragmentation at routers)</li>\n<li><em>Time-to-live</em> (TTL): used to avoid that datagrams circulate forever. It is decreased by one each time the datagram is processed by a router. When TTL &#x3D; 0, the datagram is dropped</li>\n<li><em>Protocol</em>: only used when datagram reaches its final destination, it specifies what <em>transport protocol</em> to which the data of the datagram should be passed. EX: 6 -&gt; TCP, 17 -&gt; UDP</li>\n<li><em>Header checksum</em>: helps the router to detect bit errors in a received IP datagram. Computation: each two bytes in the <strong>header</strong> are considered as numbers, summed up using the 1s complement arithmetic. The 1s complement of this sum is then put in the checksum field. A router computes the checksum for each datagram. If the computed one doesn‚Äôt equal the one in the field then the router has detected an error. Usually the datagram is discarded. As it is recomputed at each router, it may change.</li>\n<li><em>Source and destination IP addresses</em></li>\n<li><em>Options</em>: rarely used, dropped by IPv6</li>\n<li><em>Data (payload)</em>: usually contains the transport layer segment but can also contain ICMP messages</li>\n</ul>\n<h4 id=\"IP-Datagram-Fragmentation\"><a href=\"#IP-Datagram-Fragmentation\" class=\"headerlink\" title=\"IP Datagram Fragmentation\"></a>IP Datagram Fragmentation</h4><p>The maximum amount of data that a link layer can carry is called the <strong>Maximum Transmission Unit (MTU)</strong>. As each datagram is encapsulated in a link layer frame, the MTU imposes a hard limit on the length of the datagram. Each of the links along the route can use different link-layer protocols and therefore can have different MTU.<br>We therefore have to break the IP datagram into smaller datagrams, each of which will go in different link layer frames. Each of these smaller datagrams is referred to as a <strong>fragment</strong>.<br>A fragment must be reassembled before it can be passed to the transport layer. To reduce the workload on routers, the designers of IPv4 decided that reassembling should only be done at the destination end system.</p>\n<p>In IPv4, to comply with fragmentation, the header contains the fields:</p>\n<ul>\n<li><em>Identifiers</em>: identifies the <strong>unfragmented datagram</strong> (same for all fragments)</li>\n<li><em>flags</em>: in particular there is one flag set to 0 if the fragment is the last or to 1 if there are more to come</li>\n<li><em>fragmentation offset</em>: an integer x, the data in the fragment should be inserted beginning at byte x * 8</li>\n</ul>\n<p>If one fragment contains error or is lost, all the others are dropped and TCP will have the sender retransmit all the data.<br>Fragmentation complicates the network and end systems and can be used in lethal DoS attacks such as the Jolt2 attack</p>\n<h3 id=\"4-4-2-IPv4-Addressing\"><a href=\"#4-4-2-IPv4-Addressing\" class=\"headerlink\" title=\"4.4.2 IPv4 Addressing\"></a>4.4.2 IPv4 Addressing</h3><p>The boundary between the host and the physical link is called an <strong>interface</strong>. A router has multiple links connected to it, therefore multiple interfaces and therefore a router has multiple IP addresses and <em>an IP address is technically associated with an interface rather than with a host or router</em>.<br>IPv4 addresses are 32 bits long (4 bytes) -&gt; max 2^32 possible addresses. They are typically writen in <strong>dotted decimal notation</strong> where each byte of the address is written in deciaml from and separated by a period from the others.<br>EX 193.32.216.9 &#x3D;&#x3D;&#x3D; 11000001 00100000 11011000 00001001<br>Each interface on every host (except host behind NATs) must have a unique IP address. How are these computed?<br>A portion is determined by the subnet to which the host is connected.<br>A subnet is the portion of the network interconnected end systems and one one router. (also called <em>IP network</em> or <em>network</em>). IP assigns an address to a subnet x.x.x.x&#x2F;y where &#x2F;y notation, sometimes known as a <strong>subnet mask</strong> indicates <em>that the leftmost y bits of the 32 bit quantity define the subnet address</em>. If y is 24, then any host attached to the a.a.a.0&#x2F;24 subnet would be <em>required</em> to have an address of the form a.a.a.xxx.</p>\n<p>FIGURE 4.17 WTF</p>\n<p>The Internet‚Äôs address assignment strategy is known as <strong>Classless Interdomain Routing (CIDR)</strong>. It generalizes the notion of subnet addressing. Consider a.b.c.d&#x2F;x : the x most significant bits constitute the network portion of the IP address and are often referred to as the <strong>prefix</strong> (or <em>network prefix</em>). EX an organization is assigned a block of contiguous addresses, that is, a range of addresses with a common prefix.<br>When someone outside the organization want to send a datagram to someone inside, he will only need this x bits. The remaining 32-x bits can be thought of as distinguishing among the devices within the organization. These bits may have an additional subnetting structure.<br>There is yet another type of IP address, the <em>IP broadcast address 255.255.255.255</em>. When a datagram is sent to this address, the datagram is delivered to all hosts on the same subnet.</p>\n<h4 id=\"Obtaining-a-Block-of-Addresses\"><a href=\"#Obtaining-a-Block-of-Addresses\" class=\"headerlink\" title=\"Obtaining a Block of Addresses\"></a>Obtaining a Block of Addresses</h4><p>A network administrator contacts an ISP which would provide a partition of the addresses that had already been allocated to him.<br>EX ISP has 200.23.16.0&#x2F;20, it splits in 8 equal sized blocks: 200.23.16.0&#x2F;23, 200.23.18.0&#x2F;23, 200.23.20.0&#x2F;23, ‚Ä¶, 200.23.30.0&#x2F;23<br>Who assigns set of addresses to ISPs? The <em><strong>Internet Corporation for Assigned Names and Numbers (ICANN)</strong></em> which allocates IP addresses, manages DNS root servers, assigns domain names and solves domain name disputes.</p>\n<h4 id=\"Obtaining-a-Host-Address-The-Dynamic-Host-Configuration-Protocol\"><a href=\"#Obtaining-a-Host-Address-The-Dynamic-Host-Configuration-Protocol\" class=\"headerlink\" title=\"Obtaining a Host Address: The Dynamic Host Configuration Protocol\"></a>Obtaining a Host Address: The Dynamic Host Configuration Protocol</h4><p>Once an organization has obtained a block of addresses, it can assign individual IP addresses to the hosts and router interfaces which are part of it. This can be done either <strong>manually</strong> (by the network administrator) or automatically by the <strong>Dynamic Host Configuration Protocol (DHCP)</strong>.<br>It can be configured so that a host receives the same IP each time it connects to the network or a temporary IP addresses that will change upon each connection. DHCP also transmits to hosts additional information (subnet mask, address of first-hop &#x3D; default gateway, address of local DNS server).<br>As it automates the connection of a host into the network, DHCP is often referred to as a <strong>plug-and-play protocol</strong>. It is also popular in *wireless LANs where hosts join and leave frequently and in <em>residential ISP access networks</em>.<br>DHCP is a <em>client-server protocol</em>, the client being a newly arriving host needing network configuration information and the server being a router or a <em>DHCP relay agent</em> that know the address of a DHCP server for that network.<br>For a new client there is a 4 step process i nthe DHCP protcol:</p>\n<ol>\n<li><em>DHCP server discovery</em> c (client) looks for a server sending <strong>DHCP discover message</strong> a UDP packet directed to port 67. This segment is encapsulated in datagram sent to 255.255.255.255 (broadcast address) from address 0.0.0.0</li>\n<li><em>DHCP server offer(s)</em> s (server) replies with a <strong>DHCP offer message</strong> broadcast to all nodes on the subnet using (sent to 255.255.255.0). c may receiver many of these (more servers) containing the transaction ID, proposed IP address and an address lease time (amout of time for which the address will be valid)</li>\n<li><em>DHCP request</em>: c chooses one offer and responds to s with a <strong>DHCP request message</strong> echoing back the configuration parameters</li>\n<li><em>DHCP ACK</em> s responds with <strong>DHCP ACK message</strong> confirming</li>\n</ol>\n<p>DHCP also provides a mechanism for renewing the lease on an address.</p>\n<h4 id=\"Network-Address-Translation-NAT\"><a href=\"#Network-Address-Translation-NAT\" class=\"headerlink\" title=\"Network Address Translation (NAT)\"></a>Network Address Translation (NAT)</h4><p>Every IP-capable device needs an IP address. The number of connected devices grows fast, how to deal with IPv4 address space exhaustion?<br><strong>Network Address Translation (NAT)</strong><br>The NAT-enabled router defines a <strong>realm</strong> (or private network) (a network whose addresses only have meaning to devices within that network) and it can use the whole 32 bit address space for devices connected to it, it will also have a public address used to communicate with the exterior. The picture is explicative.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-nat.png\" alt=\"nat\"></p>\n<p>From the outside the router looks like a single device with a single IP address. It hides the details of the internal network from the outside world. Internal addresses can be assigned using DHCP.</p>\n<p>Problems with NAT:</p>\n<ul>\n<li>Port number should be used for addressingi processes not hosts</li>\n<li>Routers shouldn‚Äôt have access to the transport layer (ports)</li>\n<li>NAT violates end-to-end argument (any host should be able to contact any other host)</li>\n<li>NAT interferes with P2P applications (peers hidden by NAT), therefore the need of <strong>connection reversal</strong> for <strong>NAT traversal</strong></li>\n</ul>\n<h4 id=\"UPnP\"><a href=\"#UPnP\" class=\"headerlink\" title=\"UPnP\"></a>UPnP</h4><p>NAT traversal is increasingly provided by Universal Plug and Play. It requires both the host and the NAT to be compatible. Host requests a NAT mapping_<br><em>(private IP address, private port number) -&gt; (public IP address, public port number)</em><br>If the NAT accepts and creates the mapping, then outsiders can create connections to (public IP address, public port number).</p>\n<h3 id=\"4-4-3-Internet-Control-Message-Protocol\"><a href=\"#4-4-3-Internet-Control-Message-Protocol\" class=\"headerlink\" title=\"4.4.3 Internet Control Message Protocol\"></a>4.4.3 Internet Control Message Protocol</h3><p>ICMP is used to communicate network-layer information between hosts and routers, usually for error reporting (ex Destination network unreachable).<br>ICMP is considered part of IP but architecturally lies just above IP as ICMP messages are carried inside IP datagrams as payloads.<br>ICMP have a type and a code field and carry the header and the first 8 bytes of the datagram that caused the message to be generated in the first place.<br>Ping and traceroute are implemented using ICMP messages</p>\n<h4 id=\"Inspecting-datagrams-firewalls-and-intrusion-detection-systems\"><a href=\"#Inspecting-datagrams-firewalls-and-intrusion-detection-systems\" class=\"headerlink\" title=\"Inspecting datagrams: firewalls and intrusion detection systems\"></a>Inspecting datagrams: firewalls and intrusion detection systems</h4><p>Firewalls inspect the datagram and segment header fields denying suspicious datagrams entry into the internal network. Firewalls can block ICMP packages or packets based on port numbers, addresses.<br>Additional protection can be provided by IDS, placed at the boundary of the network, performs <em>deep packet inspection</em> examining not only headers but also payloads (including application layer data). IDS have databases of packet signatures that are know to be dangerous. As packets flow through the IDS, it tries to match them to signatures in its database, if a match is found, an alert is created. IPS (intrusion prevention system) in addition to detecting, also blocks packets raising alerts.</p>\n<h3 id=\"4-4-4-IPv6\"><a href=\"#4-4-4-IPv6\" class=\"headerlink\" title=\"4.4.4 IPv6\"></a>4.4.4 IPv6</h3><p>Developed because of IPv4 address space exhaustion</p>\n<h4 id=\"Datagram-format\"><a href=\"#Datagram-format\" class=\"headerlink\" title=\"Datagram format\"></a>Datagram format</h4><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ipv6datagram.png\" alt=\"ipv6 datagram\"></p>\n<ul>\n<li>the size of the source and destination addresses is increased <strong>from 32 to 128 bits</strong>: every grain of sand on the planet can be addressable.<br>Unicast and multicast addresses are joind by the <strong>anycast address</strong> which allow a datagram to be delivered to any one of a group of hosts.</li>\n<li>A number of IPv4 fields have been dropped or made optional resulting in a <strong>40-byte fixed-length header</strong> which allows faster datagram processing.</li>\n<li><em>Flow label</em> not clear definition. 20-bit</li>\n<li><em>Version</em>: 4-bit for IPv6 or 4. If ipv6 -&gt; 0110</li>\n<li><em>Traffic class</em>: 8 bit similar to TOS</li>\n<li><em>Payload length</em>: 16 bit unsigned integer indicating number of bytes following the 40-byte datagram header</li>\n<li><em>Next header</em>: transport layer protocol</li>\n<li><em>Hop limit</em>: decremented by one by each router forwarding the datagram, when 0, the datagram is discarded</li>\n</ul>\n<p>Fragmentation and reassembly cannot be done by intermediate routers, only by source and destination. If a router cannot trasmit a datagram because too big, it drops it and sends back an ICMP error message ‚ÄúPacket too big‚Äù. This reduces a lot the workload on the network.</p>\n<p>As the transport layer and the link layer already perform check-summing, this functionality has been removed from the network layer for faster datagram processing.</p>\n<p>An option field is no longer part of the header, instead it is one of the possible next headers pointed to from the header.<br>A <strong>new version of ICMP has been defined for IPv6</strong> which includes messages adapted to IPv6 (‚Äúpacket too big‚Äù) and replaces IGMP (Internet Group Management Protocol), used to manage a host‚Äôs joining and leaving of multicast groups.</p>\n<h4 id=\"Transitioning-from-IPv4-to-IPv6\"><a href=\"#Transitioning-from-IPv4-to-IPv6\" class=\"headerlink\" title=\"Transitioning from IPv4 to IPv6\"></a>Transitioning from IPv4 to IPv6</h4><p>IPv6 is back compatible with IPv4 but not viceversa.</p>\n<p>It‚Äôs not humanable possible to decide a date on which all machines would change their protocol.<br>The most straightfoward way is a <strong>dual stack</strong> approach where IPv6 nodes also have a complete IPv4 implementation. To determine whether anotehr node is IPv6 or IPv4-only DNS can be used, just checking whether the node has a IPv6 address or an IPv4 one. However this will bring about the loss of data in specific IPv6 header fields.<br>Another approach would be <strong>tunneling</strong> : when two IPv6 nodes are connected by intervening IPv4 routers, we call the IPv4 nodes <strong>tunnel</strong>, the entire IPv6 datagram is put in the payload field of a IPv4 datagram which will be propagated by the tunnel unaware of the details and received by the destination IPv6 node which is able to extract the IPv6 datagram and to route it.<br>This migration shows the difficulty in changing network-layer protocols.</p>\n<h1 id=\"4-5-Routing-Algorithms\"><a href=\"#4-5-Routing-Algorithms\" class=\"headerlink\" title=\"4.5 Routing Algorithms\"></a>4.5 Routing Algorithms</h1><p>A host is attached directly to one router, the <strong>default router</strong> for the host (also called <strong>first hop router</strong>). Whenever a host sends a packet, the packet is transferred to its default router, which we‚Äôll call <strong>source router</strong>, we‚Äôll call the default router for the destination host as the <strong>destination router</strong>. Routing a packet from source to destination boils down to routing the packet from source router to destination router.</p>\n<p>The purpose of a routing algorithm is simple: given a set of routers connected by links, it finds a ‚Äúgood‚Äù path from source to destination router. <em>A good path is the least expensive one</em>.</p>\n<p>Graphs (see Algorithms course) are used to formulate routing problems, the node representing routers and the edges the links connecting them. Each edge also has a <strong>value representing its cost</strong>. For any nodes x and y in the G(raph) we denote c(x,y) the cost of the edge between them. If (x,y) doesn‚Äôt belong to G, we set c(x,y) &#x3D; infinity. We only consider undirected graphs.<br>We just have to find the least costly paths between sources and destinations.<br>We can classify routing algorithms in two groups:</p>\n<ul>\n<li><strong>Global routing algorithms</strong>: compute the least-cost path between a source and a destination using complete, global knowledge about the network.<br> They are often referred to as <strong>link-state (LS) algorithms</strong> since the algorithm must be aware of the cost of each link in the network</li>\n<li><strong>Decentralized routing algorthms</strong>: compute the least-cost path in an iterative, distributed manner: no node has complete information about the cost of all network links. Instead, each node begins with only the knowledge of the costs of its own directly attached links.</li>\n</ul>\n<p>We could also make another classification separating <strong>static routing algorithms</strong> (routes change very slowly, eg after human intervention) and <strong>dynamic routing algorithms</strong>( routing change as the load or topology change). Finally another distinction could be made between <strong>load-sensitive</strong> or <strong>load-insensitive</strong> algorithms according to whether link costs vary reflecting the level of congestion.</p>\n<h3 id=\"4-5-1-The-Link-State-LS-Routing-Algorithm\"><a href=\"#4-5-1-The-Link-State-LS-Routing-Algorithm\" class=\"headerlink\" title=\"4.5.1 The Link-State (LS) Routing Algorithm\"></a>4.5.1 The Link-State (LS) Routing Algorithm</h3><p>All link costs are known. In practice this is accomplished by having each node broadcast link-state packets to all other nodes in the network, each packet containing the identities and costs of its attached links resulting in <strong>all nodes having an identical and complete view of the network</strong> (each node could run the algorithm).<br>A link-state algorithm can be <em><strong>Dijkstra‚Äôs algorithm</strong></em> or <em><strong>Prim‚Äôs algorithm</strong></em>.<br>Code and example page 394</p>\n<h3 id=\"4-5-2-The-Distance-Vector-DV-Routing-Algorithm\"><a href=\"#4-5-2-The-Distance-Vector-DV-Routing-Algorithm\" class=\"headerlink\" title=\"4.5.2 The Distance-Vector (DV) Routing Algorithm\"></a>4.5.2 The Distance-Vector (DV) Routing Algorithm</h3><p>The <strong>distance-vector</strong> algorithm is <strong>iterative</strong>, <strong>asynchronous</strong> and <strong>distributed</strong>.</p>\n<ul>\n<li><em>Distributed</em> because each node receives some information from one or more of its directly attached neighbors, performs a calculation and then distributes the results back to its neighbors.</li>\n<li><em>iterative</em>: the process continues on until no more information is exchanged between neighbors (self terminating)</li>\n<li><em>asynchronous</em>: the nodes are not required to operate in lockstep with each other</li>\n</ul>\n<p>The least cost between x and y d(x,y) can be determined using the <em><strong>Bellman-Ford</strong></em> equation :</p>\n<p>d(x,y) &#x3D; min_v {c(x,y) + d(v,y)}</p>\n<p>‚Ä¶ to be continued</p>\n<h3 id=\"4-5-3-Hierarchical-Routing\"><a href=\"#4-5-3-Hierarchical-Routing\" class=\"headerlink\" title=\"4.5.3 Hierarchical Routing\"></a>4.5.3 Hierarchical Routing</h3><p>In practice it is not possible to have a network of interconnected routers running the same routing algorithm because of two reasons:</p>\n<ul>\n<li><em>Scale</em> if the number of routers is large, running LS or DV algorithms for the whole network becomes prohibitive for memory, processing, storing and timing costs.</li>\n<li><em>Administrative autonomoy</em> an organization should be able to organize its network as it wishes, while still being able to connect its network to the outside world.</li>\n</ul>\n<p>Therefore routers are organized into <strong>autonomous systems (ASs)</strong>, each of which being under the same administrative control. Routers in the same AS run the same routing algorithm and have information about each other. The routing algorithm running <em>within</em> an AS is called an <strong>intra-autonomous system routing protocol</strong>. In an AS, one or more routers will have the task of being responsible for forwarding packets outside the AS, these routers are called <strong>gateway routers</strong>.<br>To obtain reachability information from neighboring ASs and propagating the reachability information to all routers interal to its AS, gateway routers use <strong>inter-AS routing protocols</strong>. Two communicating ASs must run the same inter-AS routing protocol.</p>\n<p>When a router needs to forward a packet outside its AS and there are multiple gateway routers, the router has to make a choice. One often employed practice is to use <strong>hot-potato routing</strong>: the AS gets rid of the packet as quickly as possible (as inexpensively as possible), the router sends the packet to the gateway router that has the smallest router-to-gateway cost among all gateways with a path to the destination.<br>An AS can decide what (internal) destinations to advertise to neighboring ASs: this a <em>policy</em> decision.</p>\n<h2 id=\"4-6-Routing-in-the-Internet\"><a href=\"#4-6-Routing-in-the-Internet\" class=\"headerlink\" title=\"4.6 Routing in the Internet\"></a>4.6 Routing in the Internet</h2><h3 id=\"4-6-1-Intra-AS-Routing-in-the-Internet-RIP\"><a href=\"#4-6-1-Intra-AS-Routing-in-the-Internet-RIP\" class=\"headerlink\" title=\"4.6.1 Intra-AS Routing in the Internet: RIP\"></a>4.6.1 Intra-AS Routing in the Internet: RIP</h3><p>Intra-AS routing protocols are also known as <strong>interior gateway protocols</strong>. Historically two of these have been used extensively in the Internet: <strong>Routing Information Protocol (RIP)</strong> and <strong>Open Shortest Path First (OSPF)</strong>.</p>\n<p>RIP was started for the Xerox Network Systems (XNS) architecture and was was widely deployed after being included in BSD. It is a <strong>distance-vector</strong> protocol working very similarly to what studied before. RIP uses <em>hop count</em> as a cost metric (each link has cost 1). Costs are from source router a destination subnet (not router-to-router as previously seen).<br><strong>hop</strong> &#x3D; number of subnets traversed along the shortest path from source to destination subnet, including the destination subnet.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-riphop.png\" alt=\"riphop\"></p>\n<p>Routing updates [messages] are exchanged between neighbors approximately every 30 seconds using a <strong>RIP response message</strong>, which contains a list of up to 25 destination subnets within the AS as well as the sender‚Äôs distance to each of those subnets. Response messages are also known as <strong>RIP advertisements</strong>.<br>Each router maintains a RIP table known as a <strong>routing table</strong> which includes both the router‚Äôs distance vector and the router‚Äôs forwarding table. There are three columns in it: the destination subnet, the identity of next router along shortest path to reach destination and the number of hops to get to the destination along the shortest path.</p>\n<p>If a router doesn‚Äôt hear from its neighbor for at least once every 180 seconds, that neighbor is considered to be no longer reachable (died or link down).<br>Routers can also request information about its neighbor‚Äôs cost to a given destination using RIP‚Äôs request messages, which are transmitted over UDP using port 520.<br>RIP is implemented in software but has access to the routing tables through the UNIX kernel.</p>\n<h3 id=\"4-6-2-Intra-AS-Routing-in-the-Internet-OSPF\"><a href=\"#4-6-2-Intra-AS-Routing-in-the-Internet-OSPF\" class=\"headerlink\" title=\"4.6.2 Intra-AS Routing in the Internet: OSPF\"></a>4.6.2 Intra-AS Routing in the Internet: OSPF</h3><p>OSPF and the related IS-IS are typically deployed in upper-tier ISPs whereas RIP is deployed in lower-tier ISPs and enterprise networks. Open indicates that the routing protocol speficication is publicly available.<br>It was conceived as the successor to RIP. It is however a <strong>link state protocol</strong> that uses <strong>flooding of link-state information</strong> and a <strong>Dijkstra least-cost path algorithm</strong>: routers construct a complete topological map (graph) of the AS, then run Dijkstra‚Äôs algorithm to determine a shortest-path tree to <em>all subnets</em> with itself as the root node. Link costs are individually configured by the networks administrator who might choose to set all the link costs to 1, thus achieving minimum hop routuing or might choose to set the link weights to be <em>inversely proportional to link capacity</em> in order to discourage traffic from using low-bandwidth links.<br>A router broadcasts routing information to <em><strong>all other routers</strong></em> in the AS, not just the neighbors. The broadcast happens whenever there is a change in a link‚Äôs state or every 30 minutes if the link‚Äôs state doesn‚Äôt change. OSPF advertisements are contained in <strong>OSPF messages</strong>  that are carried by IP with an upper-lyerprotocol of 89 for OSPF, therefore OSPF must implement reliable message transfer and link-state broadcast; OSP also checks that links are operational using HELLO messages to attached neighbors. OSPF offers some services:</p>\n<ul>\n<li><em>security</em>: OSPF messages can be authenticated (not active by default).</li>\n<li><em>multiple same-cost paths</em>: two paths having same cost can be used at the same time.</li>\n<li><em>integrated support for unicast and multicast routing</em></li>\n<li><em>support for hierarchy within a single routing domain</em>: ability to structure an autonomous system hierarchically. A OSPF AS can be configured hierarchically into areas, each running its own OSPF algorithm, with each router broadcasting its link state to all other routers in that area. <strong>Area border routers</strong> are responsible for routing packets outside the area and one area is configured to be the <strong>backbone area</strong>, which routes traffic between other areas in the AS, it contains area border routers but also normal routers.</li>\n</ul>\n<h3 id=\"4-6-3-Inter-AS-Routing-BGP\"><a href=\"#4-6-3-Inter-AS-Routing-BGP\" class=\"headerlink\" title=\"4.6.3 Inter-AS Routing: BGP\"></a>4.6.3 Inter-AS Routing: BGP</h3><p>The <strong>Border Gateway Protocol (BGP)</strong> is the de facto standard inter-AS routing protocol in today‚Äôs Internet. It provides each AS means to:</p>\n<ul>\n<li>obtain reachability information from neighboring ASs</li>\n<li>propagate reachability information to all internal routers</li>\n<li>determine good routes to subnets using reachability information and AS policy.</li>\n<li>it allows <strong>each subnet to advertise its existence to the rest of the Internet</strong></li>\n</ul>\n<h4 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h4><p>It is a very complex algorithm. Routers exchange information over semipermanent TCP connections using port 179. There is typically one such BGP TCP connection for each link directly connecting two routers in two different ASs but there are also semipermanent TCP connections between routers in the same AS. For each connection, the two routers at the end of it are called <strong>BGP peers</strong> and the connection is called a <strong>BGP session</strong>. A session spanning two ASs is an <strong>external BGP (eBGP) session</strong> and BGP sessions between routers within an AS is called an <strong>internal BGP (iBGP) session</strong>. Destinations are not hosts, but CIDRized <strong>prefixes</strong>, each representing a subnet or collection of subnets.</p>\n<h4 id=\"Path-Attributes-and-BGP-Routes\"><a href=\"#Path-Attributes-and-BGP-Routes\" class=\"headerlink\" title=\"Path Attributes and BGP Routes\"></a>Path Attributes and BGP Routes</h4><p>In BGP an AS is identified by its <strong>globally unique AS number (ASN)</strong> which is assigned by ICANN regional registries. When a router advertises a prefix across a BGP session, it includes with the prefix a number of <strong>BGP attributes</strong>, a prefix with its attributes is called a <strong>route</strong>. Two other important attributes are:</p>\n<ul>\n<li><em>AS-PATH</em>: contains the ASs through which the advertisement for the prefix has passed. When a prefix is passed into an AS, the AS adds its ASN to the AS-PATH.<br> This attribute is used to detect and prevent looping advertisements (if router sees that its AS is already in AS-PATH, it rejects the ad) and to choose among multiple paths to the same prefix.<br> -<em>NEXT-HOP</em>: <strong>the router interface that begins the AS-PATH</strong>.</li>\n</ul>\n<p>BGP also includes attributes allowing routers to assign preferences metrics to the routes and indicating how to prefix was inserted into BGP at the origins.<br>When a router receives a route advertisement, it uses its <strong>import policy</strong> to decide whether to accept or filter the route and whether to set certain attributes such as the router preference metrics.</p>\n<h4 id=\"BGP-Route-Selection\"><a href=\"#BGP-Route-Selection\" class=\"headerlink\" title=\"BGP Route Selection\"></a>BGP Route Selection</h4><p>The input of the selection is the set of all routes that have been learned and accepted by the router. If two or more routes exist for the same prefix, elimination rules are applied until only one remains.</p>\n<h1 id=\"Chapter-8-Security-in-Computer-Networks\"><a href=\"#Chapter-8-Security-in-Computer-Networks\" class=\"headerlink\" title=\"Chapter 8: Security in Computer Networks\"></a>Chapter 8: Security in Computer Networks</h1><h2 id=\"8-1-What-is-Network-Security\"><a href=\"#8-1-What-is-Network-Security\" class=\"headerlink\" title=\"8.1 What is Network Security?\"></a>8.1 What is Network Security?</h2><p>Desirable properties of <strong>secure communication</strong>:</p>\n<ul>\n<li><em>Confindentiality</em>: only sender and receiver should be able to understand the contents of the transmitted message -&gt; encryption</li>\n<li><em>Message integrity</em>: make sure the content of the communication is not altered -&gt; checksum</li>\n<li><em>End-point authentication</em>: sender and receiver should be able to confirm the identity of the other party involved in the communication.</li>\n<li><em>Operation security</em>: ability to counter attacks to internal networks -&gt; firewalls, IPS, IDS</li>\n</ul>\n<p>Possible attacks:</p>\n<ul>\n<li><em>eavesdropping</em>: sniffing and recording messages flowing in a channel</li>\n<li><em>modification, inserion, deletion</em> of messages or message content</li>\n</ul>\n<p>These two allow to mount many other types of attacks</p>\n<h2 id=\"8-2-Principle-of-Cryptography\"><a href=\"#8-2-Principle-of-Cryptography\" class=\"headerlink\" title=\"8.2 Principle of Cryptography\"></a>8.2 Principle of Cryptography</h2><p>See Information Science, BA2<br>ADDITION:</p>\n<h4 id=\"Block-Ciphers\"><a href=\"#Block-Ciphers\" class=\"headerlink\" title=\"Block Ciphers\"></a>Block Ciphers</h4><p>Today there are two broad classes of symmetric encryption techniques: <strong>stream ciphers</strong> and <strong>block ciphers</strong>(used for PGP, SSL, IPssec)<br>In a block cipher, the message to be encrypted is processed into blocks of <em>k</em> bis and each block is encrypted independently. To encode a bloc, the cipher uses a <em>on-to-one</em> mapping to map the <em>k</em>-bit block of cleartext to a <em>k</em>-bit block of ciphertext. To avoid bruteforce attacks, cipher blocks usually employ large blocks (<em>k</em>&#x3D;64) but longer blocks implies longer tables to store the mappings.<br>Block ciphers typically use functions that simulate randomly permuted tables. EX<br>64 bit input split into 8 8-bit chunks, each of which is processed by a 8-bit to 8-bit table, each chunk having its table. The encrypted chunks are reassembled into a 64 bits message which is fed again to the input. After <em>n</em> such cycles, the function provides a 64-bit block of ciphertext. The key for this block would be the eight permutation tables, assuming that the scramble function is publicly known. Popular block ciphers: DES (Data Encryption Standard), 3DES, AES (Advanced Encryption Standard). These use functions instead of predetermined tables. Each of them uses a string of bits for a key (64-bit blocks with 56-bit key in DES, 128-bits blocks and 128&#x2F;192&#x2F;256 bits-long keys)</p>\n<h5 id=\"Cipher-Block-Chaining\"><a href=\"#Cipher-Block-Chaining\" class=\"headerlink\" title=\"Cipher-Block Chaining\"></a>Cipher-Block Chaining</h5><p>We need to avoid long messages avoiding that two or more identical ciphertexts (produced for identical cleartexts by a symmetric encryption).<br>(I DON‚ÄôT FINISH THIS PART, IT GOES TOO DEEP INTO ENCRYPTION TECHNIQUES WHICH IS NOT WHAT WE ARE INTERESTED IN)</p>\n<h2 id=\"8-3-Message-Integrity-and-Digital-Signatures\"><a href=\"#8-3-Message-Integrity-and-Digital-Signatures\" class=\"headerlink\" title=\"8.3 Message Integrity and Digital Signatures\"></a>8.3 Message Integrity and Digital Signatures</h2><p>We want to provide <strong>message integrity</strong> (aka message authentication). Message integrity is verified when:</p>\n<ul>\n<li>The message received indeed originated from the sender</li>\n<li>The message was not tampered with on its way to the receiver</li>\n</ul>\n<h3 id=\"8-3-1-Cryptographic-Hash-Functions\"><a href=\"#8-3-1-Cryptographic-Hash-Functions\" class=\"headerlink\" title=\"8.3.1 Cryptographic Hash Functions\"></a>8.3.1 Cryptographic Hash Functions</h3><p>A <strong>hash function</strong> takes an input <em>m</em> and computes a fixed length size string <em>H(m)</em> known as a hash. A <strong>cryptographic hash function</strong> is required to have an additional property:</p>\n<p><strong>it is computationally infeasible to find any two different messages <em>x</em> and <em>y</em> such that H(x) &#x3D; H(y)</strong><br>Some used cryptographic hashing functions are md5, SHA‚Ä¶</p>\n<h3 id=\"8-3-2-Message-Authentication-Code\"><a href=\"#8-3-2-Message-Authentication-Code\" class=\"headerlink\" title=\"8.3.2 Message Authentication Code\"></a>8.3.2 Message Authentication Code</h3><p>To perform message integrity we also need a shared secret <em>s</em>, called the <strong>authentication key</strong>. The procedure is then:</p>\n<ol>\n<li>Alice creates message <em>m</em>, concatenates <em>m+s</em> and computes the hash <em>H(m+s)</em> to create the <strong>message authentication code (MAC)</strong></li>\n<li>Alice <strong>appends the MAC to the message</strong> <em>m</em> creating <em>(m+H(m+s))</em></li>\n<li>Bob receives the message and knowing the hash function and the secret, computes the hash. He creates <em>H(m+s)</em> and compares it with what he received.</li>\n</ol>\n<p>MAC is nice because <em>it doesn‚Äôt require any encryption algorithm</em><br>The most popular standard of mac today is <strong>HMAC</strong> which can be used with either MD5 or SHA-1. The problem then is: how to distribute the secret?<br> Physically?</p>\n<h3 id=\"8-3-3-Digital-Signatures\"><a href=\"#8-3-3-Digital-Signatures\" class=\"headerlink\" title=\"8.3.3 Digital Signatures\"></a>8.3.3 Digital Signatures</h3><p>A <strong>digital signature</strong> is a cryptographic technique to indicate the owner or creator of a document or to signify one‚Äôs agreement with a document‚Äôs content.<br>Just as with handwritten signatures, digital signatures should be created in a way that they are <strong>verifiable</strong> (prove that the the author of a signature is indeed the author) and nonforgeable** (prove that only that individual could have signed the document).<br>We can use the public and private keys we already created for asymmetric confidentiality.<br>To sign a message <em>m</em> Bob can encrypt the message with the <strong>private key</strong> (only the matching public key will be able to decrypt).<br>However encryption and decryption and computationally expensive therefore:</p>\n<ol>\n<li>Bob computes the hash of the message</li>\n<li>Bob uses his private key to encrypt the hash</li>\n<li>Bob contants the encrypted hash and the message</li>\n<li>Alice can decrypt, find the hash, compute a hash herself check for identity</li>\n</ol>\n<p>We saw that both digital signatures and MACs involve using a hash function but digital signatures, requiring encryption, need heavier operations and also need a <em>Public Key infrastructure</em> (PKI) with certification authorities.</p>\n<h4 id=\"Public-Key-Certification\"><a href=\"#Public-Key-Certification\" class=\"headerlink\" title=\"Public Key Certification\"></a>Public Key Certification</h4><p>An important application of digital signatures is <strong>public key certification</strong>, that is, <strong>certifying that a public key belongs to a specific entity</strong>. It is used in IPsec and SSL.<br>A <strong>Certification Authority</strong> binds a public key to a particular entity. It has the follow roles:</p>\n<ol>\n<li>A CA verifies that an entity (person, router, ‚Ä¶) is who it says it is. The method depends on the authority</li>\n<li>The CA creates a <strong>cerificate</strong> that binds the public key of the entity to the identity. The certificate contains the public key and globally unique identifying information about the owner of the public key. The <strong>certificate is digitally signed by the CA</strong></li>\n</ol>\n<h2 id=\"8-4-End-Point-Authentication\"><a href=\"#8-4-End-Point-Authentication\" class=\"headerlink\" title=\"8.4 End-Point Authentication\"></a>8.4 End-Point Authentication</h2><p><strong>End-point authentication</strong> is the process of one entity proving its identity to another entity over a computer network.<br>Authentication must be done solely on the basis of messages and data exchanged as part of an <strong>authentication protocol</strong>. Typically this would run before the two communicating parties run some other protocol.</p>\n<p>We can analyze authentication developing a simple algorithm step by step:</p>\n<h4 id=\"Version-1-0\"><a href=\"#Version-1-0\" class=\"headerlink\" title=\"Version 1.0\"></a>Version 1.0</h4><p>Alice simply sends a message to Bob saying ‚ÄúI‚Äôm Alice‚Äù</p>\n<h4 id=\"Version-2-0\"><a href=\"#Version-2-0\" class=\"headerlink\" title=\"Version 2.0\"></a>Version 2.0</h4><p>Alice and Bob always communicate using the same addresses. Bob can simply check that the message has the source IP of Alice. However is fairly easy to spoof an IP address: crafting a special datagram is feasible using a custom kernel e.g Linux.</p>\n<h4 id=\"Version-3-0\"><a href=\"#Version-3-0\" class=\"headerlink\" title=\"Version 3.0\"></a>Version 3.0</h4><p>Alice and Bob could share a secret password, a secrete between the authenticator and the person being authenticated.<br>Alice: I‚Äôm Alice, Password.<br>However password can be eavesdropped, sniffed (read and stored).</p>\n<h4 id=\"Version-3-1\"><a href=\"#Version-3-1\" class=\"headerlink\" title=\"Version 3.1\"></a>Version 3.1</h4><p>We could encrypt the password using a shared symmetric cryptographic key.<br>However this protocol is subject to <strong>playback attacks</strong> an eavesdropper could sniff the encrypted secret and, without having to decrypt, could send it to impersonate Alice.</p>\n<h4 id=\"Version-4-0\"><a href=\"#Version-4-0\" class=\"headerlink\" title=\"Version 4.0\"></a>Version 4.0</h4><p>To avoid playback attacks we could use the same principle behind TCP‚Äôs three way handshake. A <strong>nonce</strong> is a number that a protocol will use only once in a lifetime.<br>The procedure is then:</p>\n<ol>\n<li>Alice sends: <code>I am Alice</code></li>\n<li>bob chooses a nonce and sends it to Alice</li>\n<li>Alice encrypts it using Alice and Bob‚Äôs symmetric secret key and sends the encrypted nonce.</li>\n<li>Bob decrypts the received nonce and checks for equality with the one he generated.</li>\n</ol>\n<h2 id=\"8-5-Securing-e-mail\"><a href=\"#8-5-Securing-e-mail\" class=\"headerlink\" title=\"8.5 Securing e-mail\"></a>8.5 Securing e-mail</h2><p>Security functionalities are provided by many layers of the network stack. Why? There is a need for security at higher layers as well as blanket coverage at lower layers and it easier to provide security at higher layers.</p>\n<h3 id=\"8-5-1-Secure-E-Mail\"><a href=\"#8-5-1-Secure-E-Mail\" class=\"headerlink\" title=\"8.5.1 Secure E-Mail\"></a>8.5.1 Secure E-Mail</h3><p>What features do we want? <em>Confindentiality, Sender authentication, Receiver authentication</em>.</p>\n<ul>\n<li>Confidentiality: to overcome the problem of sharing a symmetric secret, Alice and Bob use asymmetric cryptography. Bob makes his public key publicly available (key server or web page) and Alice encrypts her message with Bob‚Äôs public key. Bob can decrypt using his private key. However asymmetric crypto is quite inefficient. A <em>session key</em> can be used: Alice selects a <strong>random symmetric key</strong>. She uses it to encrypt the message. She the encrypts this key using Bob‚Äôs public key and concatenates the symmetricly encrypted message and the asymmetricly encrypted key.</li>\n<li>Sender authentication and message integrity: we suppose that Alice and Bob don‚Äôt care for confidentiality. They will use <strong>digital signatures</strong> and <strong>message digests</strong>.<br> Alice applies a hash function <em>H</em> to her message <em>m</em>, obtain a message digest, signs the digest with her private key to create a digital signature, concatenates the original message with the signature to create a package and sends the package to Bob‚Äôs e-mail address.<br> Bob uses Alice‚Äôs public key to the digest and compares the result fo this operation with his own hash <em>H</em> of the message.</li>\n<li>Confidentiality, sender authentication and message integrity: the two procedures above can be combined, message and digest are concatenated and the treated as a new message which is encrypted using the first technique.</li>\n</ul>\n<p>These techniques suppose however that Alice and Bob are able to exchange their public keys. An intruder could in fact send a public key to Bob pretending to be Alice. <em>Certification is needed</em>.</p>\n<h4 id=\"Phil-Zimmermann-and-PGP\"><a href=\"#Phil-Zimmermann-and-PGP\" class=\"headerlink\" title=\"Phil Zimmermann and PGP\"></a>Phil Zimmermann and PGP</h4><p>PZ was the creator of PGP. For that he was legally attacked by the US Government, he distributed PGP while it should have stayed a secret weapon in the heads of the defense. The US dropped the case and PGP became the most widely used e-mail encryption software in the world despite the lack of funding, paid staff.</p>\n<h3 id=\"8-5-2-PGP\"><a href=\"#8-5-2-PGP\" class=\"headerlink\" title=\"8.5.2 PGP\"></a>8.5.2 PGP</h3><p>Pretty Good Privacy (PGP) is an e-mail encryption scheme that has become the De Facto standard.<br>It uses the same design shown above, giving the option of signing, encrypting or both.<br>When PGP is installed, it creates a public key pair for the user, the public key can be posted online while the private key is protected by a password which has to be entered every time the user accesses the private key.<br>A PGP message appears after the <strong>MIME</strong> header.<br>PGP also provides a mechanism for public key certification. PGP public keys are certified by <em><strong>Web of Trust</strong></em>: Alice can certify any key&#x2F;username pair when she believes the pair really belong together and, in addition, PGP permits Alice to say that she trusts another user to vouch for the authenticity of more keys. Some PGP users sign each other‚Äôs key by holding <em>key-signing parties</em>.</p>\n<h2 id=\"8-6-Securing-TCP-Connections-SSL\"><a href=\"#8-6-Securing-TCP-Connections-SSL\" class=\"headerlink\" title=\"8.6 Securing TCP Connections: SSL\"></a>8.6 Securing TCP Connections: SSL</h2><p>We now move to the transport layer. The enhanced version of TCP is called <strong>Secure Socket Layer (SSL)</strong>, a slightly modified version of SSL v3 called <strong>Transport Layer Security (TLS)</strong> has been standardized by the IETF.<br>Originally developed by Netscape, SSL has enjoyed broad deployment since its origins, providing secure communication between all recent browsers and online services. <strong>SSL provides TCP with confidentiality, data integrity, server authentication and client authentication</strong>.<br>SSL is often used over HTTP, however, as it secures TCP, it can be employed by any application that runs over TCP. SSL provides a simple <em>Application Programming Interface</em> with sockets, similar to TCP‚Äôs API.<br>When an application wants to use SSL, it must include SSL classes&#x2F;libraries. <strong>Technically SSL resides in the application layer</strong> but from the developer‚Äôs perspective it is a transport layer protocol that provides TCP‚Äôs services enhanced with security services.</p>\n<h3 id=\"8-6-1-The-Big-Picture-primitive-almost-SSL\"><a href=\"#8-6-1-The-Big-Picture-primitive-almost-SSL\" class=\"headerlink\" title=\"8.6.1 The Big Picture (primitive almost-SSL)\"></a>8.6.1 The Big Picture (primitive almost-SSL)</h3><p>Three phases:</p>\n<ol>\n<li><strong>Handshake</strong>: Bob initiates a TCP connection is established (TCP SYN, SYNACK, ACK). Bob sends <em>SSL Hello</em>, Alice responds with her certificate containing her public key (the certificate being certified by a CA, Bob is sure that the key belongs to Alice). Bob generates a <em><strong>master secrect (MS)</strong></em>, encrypts it with Alice‚Äôs public key to create the <em><strong>Encrypted Master Secret (EMS)</strong></em> and sends it to Alice who will decrypt it with her private key to get the MS which can be used for confidentiality and integrity as seen before.</li>\n<li><strong>Key Derivation</strong> instead of using the MS for integrity and confidentiality, it is safer to use different keys for different functions. Therefore <em>both</em> Alice and Bob <strong>use the MS to generate</strong>:<ul>\n<li>Eb &#x3D; session encryption key for data Bob -&gt; Alice</li>\n<li>Mb &#x3D; session MAC key for data Bob -&gt; Alice</li>\n<li>Ea &#x3D; session encryption key for data Alice -&gt; Bob</li>\n<li>Ma &#x3D; session MAC key for data Alice -&gt; Bob<br>The MS could simply be split in four chunks, but real SSL does it differently.</li>\n</ul>\n</li>\n<li><strong>Data Transfer</strong> TCP is a byte-stream protocol, so where would we put the MAC for the integrity check? SSL breaks the data stream into <strong>records</strong>, appends a MAC to each record and then encrypts record+MAC. However, in a MITM attack, the order of packets could be reversed as TCP sequence numbers are not encrypted. SSL therefore uses sequence numbers. Bob keeps a sequence number counter which begins at zero and is incremented at each record transmission. He includesthe sequence number in the MAC calculation: MAC &#x3D; hash(data+Mb+SeqNum). Alice tracks Bob‚Äôs sequence numbers so that she can verify the MAC.</li>\n</ol>\n<h4 id=\"SSL-Record\"><a href=\"#SSL-Record\" class=\"headerlink\" title=\"SSL Record\"></a>SSL Record</h4><p>The real SSL record:</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-sslrecord.png\" alt=\"ssl record\"></p>\n<ul>\n<li>Type: handshake message, data message, connection teardown message</li>\n<li>Length: used to extract the records out of the TCP byte stream</li>\n</ul>\n<h3 id=\"8-6-2-A-More-Complete-Picture\"><a href=\"#8-6-2-A-More-Complete-Picture\" class=\"headerlink\" title=\"8.6.2 A More Complete Picture\"></a>8.6.2 A More Complete Picture</h3><p>SSL allows Alice and Bob to agree on the cryptographic algorithms at the beginning of the SSL session, during handshake. Steps:</p>\n<ol>\n<li>The client sends a list of cryptographic algorithms it supports, along with a client nonce</li>\n<li>The server chooses a symmetric algorithm (ex: AES), a public key algorithm (ex RSA) and a MAC algorithm. It sends back to the client its choices as well as a certificate and a server nonce.</li>\n<li>The client verifies the certificate, extracts the server‚Äôs public key, generates a <em>Pre-Master Secret</em> (PMS), encrypts it with the server‚Äôs public key and sends the encrypted PMS to server.</li>\n<li>Using the same key derivation function (specified by SSL standard), <em>client and server independently compute the Master Secret (MS) from the PMS and the nonces</em>. The MS is sliced up to create the two encryption and the two MAC keys. Furthemore when the symmetric cipher employs CBC (ex 3DES or AES) the two Initialization Vectors (IVs), one for each side of the connection, are also obtained from hte MS. Henceforth <strong>all messages sent between client and server are encrypted and authenticated (using MAC)</strong></li>\n<li>The client sends a MAC of all the handshake messages</li>\n<li>The server sends a MAC of the handshake messages.</li>\n</ol>\n<p>5 and 6 protect the handshake from tampering: if in the end MAC are not coherent with the previously sent messages, the connection is stopped. (prevents an attacker from impersonating the server and imposing weak algorithms).<br>Nonces are used to avoid <em>connection replay attacks</em> (resending packets sniffed during a previous connection again, using nonces allows to have different MACs and therefore messages at each connection, even if the content of the communication is the same).</p>\n<h4 id=\"Connection-Closure\"><a href=\"#Connection-Closure\" class=\"headerlink\" title=\"Connection Closure\"></a>Connection Closure</h4><p>TCP FIN segments can be crafted by an attacker (<em>truncation attack</em>), therefore they cannot be used.<br>The type field of SSL records is used for these purpose, even if it sent in the clear, it is authenticated at the receivers using record‚Äôs MAC.</p>\n<h2 id=\"8-7-Network-Layer-Security-IPsec-and-Virtual-Private-Networks\"><a href=\"#8-7-Network-Layer-Security-IPsec-and-Virtual-Private-Networks\" class=\"headerlink\" title=\"8.7 Network-Layer Security: IPsec and Virtual Private Networks\"></a>8.7 Network-Layer Security: IPsec and Virtual Private Networks</h2><p>The IP security protocol is called <strong>IPsec</strong>, it secures IP datagrams between any two network-layer entities (host, routers)</p>\n<h3 id=\"8-7-1-IPsec-and-Virtual-Private-Networks-VPNs\"><a href=\"#8-7-1-IPsec-and-Virtual-Private-Networks-VPNs\" class=\"headerlink\" title=\"8.7.1 IPsec and Virtual Private Networks (VPNs)\"></a>8.7.1 IPsec and Virtual Private Networks (VPNs)</h3><p>An institution extending overt multiple geographical regions might want its own IP network so that the machines in it can communicate securely. Such a disjoint network is a <strong>private network</strong>. A physical private network can be expensive. VPN can be used to deploy and maintain a private network over the existing public Internet. The traffic is sent over the Internet but encrypted before entering the public net.<br>Not all traffic sent into the Internet by the gateway routers or laptops will be IPsec secured (only the portion accessing internal resources)</p>\n<h3 id=\"8-7-2-The-AH-and-ESP-Protocols\"><a href=\"#8-7-2-The-AH-and-ESP-Protocols\" class=\"headerlink\" title=\"8.7.2 The AH and ESP Protocols\"></a>8.7.2 The AH and ESP Protocols</h3><p>In the IPsec protocol suite, there are two principal protocols: the <strong>Authentication Header (AH)</strong> protocol and the <strong>Encapsulation Security Payload (ESP)</strong> protocol.<br>When a source IPsec entity (router or host) sends secure datagrams to a destination entity it does so with either ESP or AH. AH provides <em>source authentication</em> and <em>data integrity</em> while ESP provides <em>source authentication, data integrity and confidentiality</em>. Because the latter is often critical for VPNs, ESP is much more widely used AH. We will only study ESP.</p>\n<h3 id=\"8-7-3-Security-Associations\"><a href=\"#8-7-3-Security-Associations\" class=\"headerlink\" title=\"8.7.3 Security Associations\"></a>8.7.3 Security Associations</h3><p>Before sending IPsec datagrams from source entity to destination entity, source and destination create a network-layer logical connection called <strong>security association (SA)</strong>. SA is a simplex (unidirectional from source to destination) logical connection. If both entities want to send datagrams to each other, then two SAs need to be established, one in each direction.<br>The VPN server (headquarters gateway router) will maintain state information about the SA, which will include:</p>\n<ul>\n<li>32-bit identifier for the SA, called <em>Security Parameter Index (SPI)</em></li>\n<li>The origin interface (client outside) of the SA and its destination (its out facing interface) [IP addresses]</li>\n<li>Type of the encryption used</li>\n<li>Encryption key</li>\n<li>Type of the integrity check</li>\n<li>Authentication key</li>\n</ul>\n<p>An IPsec entity often maintains state information for many SAs (all outside clients) using its <em>Security Association Database</em> (SAD) which is a data structure in the entity‚Äôs OS kernel.</p>\n<h3 id=\"8-7-4-The-IPsec-Datagram\"><a href=\"#8-7-4-The-IPsec-Datagram\" class=\"headerlink\" title=\"8.7.4 The IPsec Datagram\"></a>8.7.4 The IPsec Datagram</h3><p>IPsec has two different packet forms, one for <strong>tunnel mode</strong> and one for <strong>transport mode</strong>, the first one, being more appropriate for VPNs, is more widely deployed than the transport mode, we will therefore only focus on it.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ipsecdatagram.png\" alt=\"ipsec datagram\"></p>\n<p>The headquarters‚Äôs gateway receives an IPv4 datagram from inside the network directed to a VPN client outside. Here is what happens:</p>\n<ol>\n<li>It appends to the back of the original datagram (which includes the original header fields) in the <em>ESP trailer</em> field</li>\n<li>It encrypts the result using the algorithm and key specified in the SA</li>\n<li>Appends to the front of the result a <em>ESP Header</em> creating the ‚Äúenchilada‚Äù</li>\n<li>Creates an authentication MAC over the whole enchilada using algorithm and key specified in the SA</li>\n<li>Appends the MAC to the back of the enchilada forming the <em>payload</em></li>\n<li>Creates a brand new IP header with all the classic IPv4 header fields which it appends before the payload.</li>\n</ol>\n<p>The protocol number field is set to 50, designating IPsec. The routers along the path will treat the datagram as a normal one, oblivious that it is an IPsec datagram.<br>To decide whether outgoing packets should be treated as above or simply let through, the gateway maintains a <em>Security Policy Database</em> (SPD) which indicates what types of datagrams (as a function of the source and destination IPs and of the protocol) are to be IPsec processed and, for those that are, which SA should be used.<br><strong>IPsec provides confidentiality, source authentication, data integrity, replay-attack prevention.</strong></p>\n<h3 id=\"8-7-5-IKE-Key-Management-in-IPsec\"><a href=\"#8-7-5-IKE-Key-Management-in-IPsec\" class=\"headerlink\" title=\"8.7.5 IKE: Key Management in IPsec\"></a>8.7.5 IKE: Key Management in IPsec</h3><p>Who&#x2F;What should populate the SAD? For small VPNs this can be done manually. For larger ones there is the <em><strong>Internet Key Exchange (IKE) protocol</strong></em>.<br>IKE is similar to the handshake in SSL. Here are the steps:</p>\n<ul>\n<li>During the first exchange of messages, the two sides use Diffie-Hellman to create a Bi-Directional IKE SA between the routers, which is entirely different form the IPsec SA discussed above. This IKESA provides an authenticated and encrypted channel between the two routers. Keys are established for encryption and authentication for IKESA. Also established is a master secret.</li>\n<li>During the second exchange of messages, both sides reveal their identity to each other by signing their messages. However the identities are not revealed to an eventual sniffer, since the messages are sent over the IKE sa channel. The two sides also negotiate the IPsec encryption and authentication algorithms to be employed by the IPsec SA. Finally the two sides create an SA n each direction.</li>\n</ul>\n<p>We have two phases to reduce computational costs: we don‚Äôt need asymmetric cryptography during second phase, allowing IKE to generate many SAs with relatively little computational cost.</p>\n<h2 id=\"8-9-Operational-Security-Firewalls-and-Intrusion-Detection-Systems\"><a href=\"#8-9-Operational-Security-Firewalls-and-Intrusion-Detection-Systems\" class=\"headerlink\" title=\"8.9 Operational Security: Firewalls and Intrusion Detection Systems\"></a>8.9 Operational Security: Firewalls and Intrusion Detection Systems</h2><h3 id=\"8-9-1-Firewalls\"><a href=\"#8-9-1-Firewalls\" class=\"headerlink\" title=\"8.9.1 Firewalls\"></a>8.9.1 Firewalls</h3><p>A firewall is a combination of hardware and software that isolates an organization‚Äôs internal network from the Internet at large, allowing some packets to pass and blocking others. It has three goals</p>\n<ol>\n<li><em>All traffic from outside to inside, and vice versa, passes through the firewall</em></li>\n<li><em>Only authorized traffic, as defined by the local security by the local policy, will be allowed to pass</em>.</li>\n<li><em>The firewall itself is immune to penetration</em></li>\n</ol>\n<p>Firewalls can be classified in three categories:</p>\n<h4 id=\"1-Traditional-Packet-Filters\"><a href=\"#1-Traditional-Packet-Filters\" class=\"headerlink\" title=\"1: Traditional Packet Filters\"></a>1: Traditional Packet Filters</h4><p>Packet filters examine each datagram in isolation determining whether the datagram should be allowed to pass or should be dropped based on administrator-specific rules.<br>Filtering decisions can be based on IP source&#x2F;destination, protocol type, TCP&#x2F;UDP, TCP flags&#x2F; ICMP message type, rules for leaving&#x2F;entering, rules for different router interfaces.<br>The parameters are based on the policy of the organization taking account of user productivity and bandwidth usage as well as security concerns.</p>\n<h4 id=\"2-Stateful-Packet-Filters\"><a href=\"#2-Stateful-Packet-Filters\" class=\"headerlink\" title=\"2: Stateful Packet Filters\"></a>2: Stateful Packet Filters</h4><p>Decisions are made on each packet in isolation. Stateful filters track TCP connecions and use this knowledge to make filtering decisions.</p>\n<h4 id=\"3-Application-Gateways\"><a href=\"#3-Application-Gateways\" class=\"headerlink\" title=\"3: Application Gateways\"></a>3: Application Gateways</h4><p>Application Gateways look beyond the IP&#x2F;TCP&#x2F;UDP headers and make policy decisions based on application data. An <strong>Application Gateway</strong> is an application-specific server through which all application data must pass. Multiple AG can run on the same host, but each gateway is a separate server with its own processes.</p>\n<h3 id=\"8-9-2-Intrusion-Detection-Systems\"><a href=\"#8-9-2-Intrusion-Detection-Systems\" class=\"headerlink\" title=\"8.9.2 Intrusion Detection Systems\"></a>8.9.2 Intrusion Detection Systems</h3><p>An <strong>intrusion detection system (IDS)</strong> is a device that alerts when it observes potentially malicious traffic. An <strong>intrusion prevention system (IPS)</strong>  is a device that filters out suspicious traffic. Both types of device perform <strong>deep packet inspection</strong>: they look beyond the header fields and into the actual application data that the packets carry.</p>\n<p>An IDS can detect a wide range of attacks, including network mapping, port scans, TCP stack scans, DoS, worms, viruses, OS vulnerability attacks and application vulnerability attacks.<br>An organization can deploy one more IDS sensors in its network. When many are used, they work together, usually coordinated by a central server. More than one is often a good solution as each one compare each passing packet with tens of thousands of signatures. They are usually classified as either <strong>signature-based systems</strong> or <strong>anomaly-based systems</strong>.<br>A signature based IDS maintains an extensive database of attack signature, each of which being a set of rules pertaining to an intrusion activity. A signature can be a list of packet characteristics or may relate to a series of packets. They are created by network security engineers researching attacks. The ids sniffs every packet passing by it, comparing it with signatures.<br>Signature based IDS, although widely deployed, have a number of limitations: they require a previous knowledge of the attack to generate an accurate signature, false alarms may be generated, they can be slow and fail to detect attacks if overwhelmed.<br>Anomaly-based packets study normal traffic and looks for statistically unusual events. They don‚Äôt rely on previous knowledge of attacks.</p>\n<h1 id=\"Chapter-5-The-Link-Layer-Links-Access-Networks-and-LANs\"><a href=\"#Chapter-5-The-Link-Layer-Links-Access-Networks-and-LANs\" class=\"headerlink\" title=\"Chapter 5: The Link Layer: Links, Access Networks and LANs\"></a>Chapter 5: The Link Layer: Links, Access Networks and LANs</h1><h2 id=\"5-1-Introduction-to-the-Link-Layer\"><a href=\"#5-1-Introduction-to-the-Link-Layer\" class=\"headerlink\" title=\"5.1 Introduction to the Link Layer\"></a>5.1 Introduction to the Link Layer</h2><p>Some terminology:</p>\n<ul>\n<li><strong>node</strong> &#x3D; any device running a link-layer protocol (hosts, routers, switches‚Ä¶)</li>\n<li><strong>link</strong> &#x3D; communication channels connecting adjacent nodes along the path.</li>\n<li>Over a given link, a transmitting node encapsulates the datagram in a <strong>link-layer frame</strong> and transmits the frame into the link.</li>\n</ul>\n<h3 id=\"5-1-1-The-Services-Provided-by-The-Link-Layer\"><a href=\"#5-1-1-The-Services-Provided-by-The-Link-Layer\" class=\"headerlink\" title=\"5.1.1 The Services Provided by The Link Layer\"></a>5.1.1 The Services Provided by The Link Layer</h3><p>Possible services offered by a link-layer protocol include:</p>\n<ul>\n<li><em>Framing</em>: all link layer protocols encapsulate each network layer datagram  within a link-layer frame before transmission. A frame consists of a data field, containing the datagram, and a number of header fields, whose structure is determined by the protocol.</li>\n<li><em>Link access</em>: A <strong>Medium Access Control</strong> (MAC) protocol specifies the rules by which a frame is transmitted onto the link.</li>\n<li><em>Reliable delivery</em>: the protocol guarantees to move each datagram across the link without loss or errors. A reliable delivery protocol is often used for links highly prone to errors (WiFi) so that the error can be corrected locally, where it happens, rather than forcing an end-to-end retransmission. However it can represent a significant overhead for low bit-error links (cable) and therefore many wired link-layer protocols do not provide a reliable delivery service.</li>\n<li><em>Error detection and correction</em>: signal attenuation and electromagnetic noise can introduce errors. Because there is no need to forward a datagram that has an error, may link-layer protocols provide a mechanism to detect such bit errors so that they can drop the frames. This can be accomplished transmitting error-detection bits in the frame. Link layer error detection is usually more sophisticated and <em>implemented in hardware</em>.</li>\n</ul>\n<h3 id=\"5-1-2-Where-Is-the-Link-Layer-Implemented\"><a href=\"#5-1-2-Where-Is-the-Link-Layer-Implemented\" class=\"headerlink\" title=\"5.1.2 Where Is the Link Layer Implemented?\"></a>5.1.2 Where Is the Link Layer Implemented?</h3><p>In routers, the link layer is implemented in the line card. Is a host‚Äôs link layer implemented in hardware or software?<br>For the most part, the link layer is implemented in a <strong>network adapter</strong>, sometimes known as <strong>network interface card (NIC)</strong>. At the heart of the NIC is the link-layer controller, usually a single, special purpose chip that implements many of the link-layer services. Thus, much of a link-layer controller‚Äôs functionality is implemented in hardware.<br>Part of the link layer is implemented in software that runs on the host‚Äôs CPU, this part implement higher-level functionalities.<br>Link-Layer is a combination of hardware and software, the place in the protocol stack where software meets hardware.</p>\n<h2 id=\"5-2-Error-Detection-and-Correction-Techniques\"><a href=\"#5-2-Error-Detection-and-Correction-Techniques\" class=\"headerlink\" title=\"5.2 Error-Detection and -Correction Techniques\"></a>5.2 Error-Detection and -Correction Techniques</h2><p>Error detection and correction allow the receiver to sometimes, <em>but not always</em>, detect that bit errors have occurred. Even with the use of error-detection bits, there still may be <strong>undetected bit errors</strong> (the receiver is unaware of the presence of corrupted bits).<br>We want to keep the probability of such an event small. Let‚Äôs now consider three techniques for detecting errors in the transmitted data: parity checks, checksumming methods and cyclic redundancy checks</p>\n<h3 id=\"5-2-1-Parity-Checks\"><a href=\"#5-2-1-Parity-Checks\" class=\"headerlink\" title=\"5.2.1 Parity Checks\"></a>5.2.1 Parity Checks</h3><p>Perhaps the simplest form of error detection is the use of a single <strong>parity bit</strong>. Suppose that the information to be sent, <em>D</em>, has <em>d</em> bits.<br>In an even parity scheme, the sender simply includes one additional bit and chooses its value such that the total number of 1s in the <em>d+1</em> bits (original + parity bit) is even. (odd parity scheme, parity bit to one if #1s % 2 !&#x3D; 0).<br>The receiver only needs to count the number of 1s in the <em>d+1</em> bits. If an odd number of 1 valued bits are found with an even parity scheme, the receiver knows that <em>some odd number</em> of bit error has occurred.<br>If an even number of bit errors occur, this would result in an undetected error.<br>Another approach is to use a <em><strong>two dimensional even parity</strong></em>: the <em>d</em> bits are divided into <em>i</em> rows and <em>j</em> columns. A parity value is computed for each row and for each column. The result <em>i + j + 1</em> parity bits comprise the error-detection bits.<br>A single bit error in the original <em>d</em> bits will cause the parity of both the column and the row containing the flipped bit to to be in error. The receiver can not only detect the error, but also use the column and row indices of the column and row with parity errors to actually identify the bit that was corrupted and <em>correct</em> the error.<br>This technique also allows to detect an error in the <em>parity bits</em>.<br>The ability of the receiver to both detect and correct errors is known as <strong>forward error correction (FEC)</strong></p>\n<h3 id=\"5-2-2-Checksumming-Methods\"><a href=\"#5-2-2-Checksumming-Methods\" class=\"headerlink\" title=\"5.2.2 Checksumming Methods\"></a>5.2.2 Checksumming Methods</h3><p>The <em>d</em> bits of data are treated as a sequence of <em>k</em>-bit integers for example the Internet checksum already studied: bytes of data are treated as integers and summed, the 1s complement of this sum forms the Internet checksum carried in the header. The receiver checks the checksum by taking the 1s complement of the sum of the received data (including checksum) and checking whether the result is all 1 bits, if there are any 0, an error is indicated. In TCP and UDP the checksum is computed over all fields (header and data).<br>Checksumming methods require little packet overhead but they provide relatively weak protection against errors.<br>Why is checksumming used in transport layer and cyclic redundancy check used at the link layer?<br>Transport layer is implemented in software (OS) and therefore needs a simple and fast error detection scheme while error detection at link layer is implemented in hardware which can perform the more complex CRC operations.</p>\n<h3 id=\"5-2-3-Cyclic-Redundancy-Check-CRC\"><a href=\"#5-2-3-Cyclic-Redundancy-Check-CRC\" class=\"headerlink\" title=\"5.2.3 Cyclic Redundancy Check (CRC)\"></a>5.2.3 Cyclic Redundancy Check (CRC)</h3><p><strong>Cyclic Redundancy Check (CRC) codes</strong> are also known as <strong>polynomial codes</strong> since it is possible to view the string to be sent as a polynomial whose coefficients are the 0 and 1 values in the bit string with operation interpreted as polynomial arithmetic.<br>Sender and receiver must agree on a <em>r+1</em> bit pattern know as <strong>generator</strong> which we‚Äôll denote as <em>G</em>. We require the leftmost bit of G to be a 1. For a given piece of data <em>D</em> the sender will choose <em>r</em> additional bits, <em>R</em>, and append them to <em>D</em> such that the resulting <em>d + r</em> bit pattern, interpreted as a binary number, is exactly divisible by G using modulo-2 arithmetic.<br>Checking is therefore easy: the receiver divides the <em>d + r</em> received by bits by <em>G</em>, if the remainder is nonzero, an error has occurred, otherwise the data is accepted as being correct.<br>All CRC calculations are done in modulo 2 without carries in addition or borrows in subtraction (+ &#x3D; - &#x3D; xor).</p>\n<h2 id=\"5-3-Multiple-Access-Links-and-Protocols\"><a href=\"#5-3-Multiple-Access-Links-and-Protocols\" class=\"headerlink\" title=\"5.3 Multiple Access Links and Protocols\"></a>5.3 Multiple Access Links and Protocols</h2><p>There are two types of network links: point-to-point and broadcast links. A <strong>point-to-point link</strong> consists of a single sender at one end of the link and a single receiver at the other end of the link. A <strong>broadcast link</strong> can have multiple sending and receiving nodes all connected to the same, single, shared broadcast channel. The term <em>broadcast</em> is used because when any node transmits a frame, the channel broadcasts the frame and each other node receives a copy (ex: ethernet, wireless).</p>\n<p>The <strong>multiple access problem</strong>: How to coordinate the access of multiple sending and receiving nodes to a shared broadcast channel?<br>Computer networks have <strong>multiple access protocols</strong> by which nodes regulate their transmission into the shared broadcast channel.<br>More than two nodes can transmit frames at the same time, which will result in all of the nodes receiving multiple frames at the same time: the frames <strong>collide</strong> at all of the receivers. Typically in case of collision, <em>none of the receiving nodes can make any sense of any of the frames</em>, they become inextricably tangled together and are therefore <strong>lost</strong>, the channel being wasted during collision.<br>Thus it is necessary to coordinate the transmission of the active nodes.<br>We can classify multiple access protocols in three categories: <strong>channel partitioning protocols, random access protocols, taking-turns protocols</strong>.</p>\n<h3 id=\"5-3-1-Channel-Partitioning-Protocols\"><a href=\"#5-3-1-Channel-Partitioning-Protocols\" class=\"headerlink\" title=\"5.3.1 Channel Partitioning Protocols\"></a>5.3.1 Channel Partitioning Protocols</h3><p>TDM and FDM (from circuit switching) are in this category.<br>A third channel partitioning tool is <strong>code division multiple access (CDMA)</strong> which assigns a different <em>code</em> to each node. Each node then uses its unique code to encode the data bits it sends. If the codes are chosen carefully, then all nodes can transmit simultaneously and yet have their respective receivers correctly receive a sender‚Äôs encoded data bits. Originally used in military systems, it‚Äôs now widely used for civilian use, particularly in cellular telephony.</p>\n<h3 id=\"5-3-2-Random-Access-Protocols\"><a href=\"#5-3-2-Random-Access-Protocols\" class=\"headerlink\" title=\"5.3.2 Random Access Protocols\"></a>5.3.2 Random Access Protocols</h3><p>A transmitting node always transmits at the full rate of the channel, <em>R</em> bps. When there is a collision, each node involved in the collision repeatedly retransmits its frame until the frame gets through without a collision.<br>But when a node experiences a collision, <em>it waits a random dely before retransmitting the frame</em>. The delay is chosen independently.<br>Here a few of the most commonly used random access protocols:</p>\n<h4 id=\"Slotted-ALOHA\"><a href=\"#Slotted-ALOHA\" class=\"headerlink\" title=\"Slotted ALOHA\"></a>Slotted ALOHA</h4><p>All frames consist of <em>L</em> bits, time is divided into slots of size <em>L&#x2F;R</em> seconds, nodes start to transmit frames only at the beginning of slots. Moreover nodes are synchronized so that each node when the slot begins. If two or more frames collide in a slot, then all the nodes detect the collision event before the slot ends.</p>\n<p>If <em>p</em> is a probability then the operation of slotted ALOHA in each node is simple:</p>\n<ul>\n<li>each node waits the beginning of the next slot to transmit the entire frame in a slot</li>\n<li>If no collision occurs, the frame is considered delivered</li>\n<li>If collision, this is detect before the end of the slot. The node retransmits its frame <em>in each subsequent slot</em> with probability <em>p</em> (probability of retransmission) until the frame is transmitted  without a collision.</li>\n</ul>\n<p>Slotted ALOHA allows transmission at full rate <em>R</em>, is highly decentralized, and is extremely simple.<br>The computed maximal efficiency (successfully used slots in transmission &#x2F; total slots) of Slotted ALOHA) is 37% thus the effective transmission rate is 0.37<em>R</em> bps.</p>\n<h4 id=\"Aloha\"><a href=\"#Aloha\" class=\"headerlink\" title=\"Aloha\"></a>Aloha</h4><p>all nodes synchronize their transmissions to start at the beginning of a slot. The node immediately transmits a frame in its entirety in the channel. In case of collision, the node will then immediately retransmit the frame with probability <em>p</em> otherwise the node waits for a frame transmission time, after which it transmits the frame with probability <em>p</em> or wait for another frame with probability <em>1-p</em>. The maximum efficiency is 1&#x2F;(2e) but the protocol is fully decentralized.</p>\n<h4 id=\"Carrier-Sense-Multiple-Access-CSMA\"><a href=\"#Carrier-Sense-Multiple-Access-CSMA\" class=\"headerlink\" title=\"Carrier Sense Multiple Access (CSMA)\"></a>Carrier Sense Multiple Access (CSMA)</h4><p>CSMA and CSMA&#x2F;CD (collision detection) embody two rules:</p>\n<ul>\n<li><strong>carrier sensing</strong>: if a node is transmitting, the others wait until they detect no transmission for a short amount of time and begin transmission.</li>\n<li><strong>collision detection</strong>: a transmitting node listens to the channel while it‚Äôs transmitting, if it detects that another node is transmitting, it stops transmitting and waits for a random amount of time before repeating the sense-and-transmit-when-idle-cycle.</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-csmaDIA.png\" alt=\"csmaDIA\"></p>\n<p>It is evident that the <strong>propagation delay</strong> of the channel plays a crucial role: the longer, the larger the chance that a carrier sensing node is not yet able to sense a transmission that has already begun.</p>\n<h4 id=\"Carrier-Sense-Multiple-Access-with-Collision-Detection-CSMA-CD\"><a href=\"#Carrier-Sense-Multiple-Access-with-Collision-Detection-CSMA-CD\" class=\"headerlink\" title=\"Carrier Sense Multiple Access with Collision Detection (CSMA&#x2F;CD)\"></a>Carrier Sense Multiple Access with Collision Detection (CSMA&#x2F;CD)</h4><p>When a node detects a collision, it ceases transmission immediately in Collision Detection.<br>A link layer frame is prepared, if the node senses that the channel is idle (no energy is entering the adapter from the channel), it starts to transmit the frame, else it waits until it detects idle. While transmitting, the node monitors the channel for usage from other nodes, if the entire frame is transmitted without detecting usage, then the adapter is finished. If energy is detected from other adapters while transmitting, the node aborts transmission (stops), waits for  a random amount of time and then returns to checking for idle.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-csmacdDIA.png\" alt=\"csmacdDIA\"></p>\n<p>The wait for random amount of time is required in order to avoid the nodes to keep colliding.</p>\n<h4 id=\"CSMA-CD-Efficiency\"><a href=\"#CSMA-CD-Efficiency\" class=\"headerlink\" title=\"CSMA&#x2F;CD Efficiency\"></a>CSMA&#x2F;CD Efficiency</h4><p>Is the long run fraction of time during which frames are being transmitted without collision. If the propagation delay approaches 0, the efficiency approaches 1.<br>Also if the propagation delay becomes very large, efficiency approaches 1.</p>\n<h3 id=\"5-3-3-Taking-Turns-Protocols\"><a href=\"#5-3-3-Taking-Turns-Protocols\" class=\"headerlink\" title=\"5.3.3 Taking-Turns Protocols\"></a>5.3.3 Taking-Turns Protocols</h3><p>There are a lot of them, we‚Äôll cover two of the more important, the first one being the <strong>polling protocol</strong>. It requires one of the nodes to be designated as a master node which <strong>polls</strong> each of the nodes in a round-robin fashion.<br>The master tells node 1 that it can transmit up to some maximum number of frames, when node 1 is finished (the master checks for energy in the channel) the master tells the same to node 2 and so on.<br>The polling protocol eliminates the collisions and empty slots that plague random access protocols, resulting in a much higher efficiency.<br>However it introduces a <em>polling delay</em> (the amount of time required to notify a node that it can transmit) [if only one is transmitting, it will have to wait for the master to poll all the others]. Moreover the master node represents a single point of failure.</p>\n<p>The second protocol is the <strong>token-passing protocol</strong> in which there is no master method. A small, special purpose frame known as <strong>token</strong> is exchanged among the nodes in some fixed order. When a node receives a toke, it holds it only if it has some frames to transmit otherwise it immediately forwards it to the next node.If a node has frames to transmit when it receives the token, it sends up to a maximum number of frames and then passes the token. Token passing is decentralized and highly efficient but the failure of one node could crash the entire channel, or a node could neglect to release the token‚Ä¶.</p>\n<h3 id=\"5-3-4-DOCSIS-The-Link-Layer-Protocol-for-Cable-Internet-Access\"><a href=\"#5-3-4-DOCSIS-The-Link-Layer-Protocol-for-Cable-Internet-Access\" class=\"headerlink\" title=\"5.3.4 DOCSIS: The Link-Layer Protocol for Cable Internet Access\"></a>5.3.4 DOCSIS: The Link-Layer Protocol for Cable Internet Access</h3><p>The Data-Over-Cable-Service-Interface-Specifications specifies the cable data network architecture and its protocols. DOCSIS uses FDM to divide the downstream and upstream network segments into multiple frequency channels. Each upstream and downstream channel is a broadcast channel. Several cable modems share the same upstream channel (frequency) to the CMTS and thus collision can potentially occur.<br>Each upstream channel is divided into intervals of time (TDM-like) each containing a sequence of mini-slots during which cable modems can transmit to the CMTS, which explicitly grants permission to individual modems to transmit during specific mini-slots. This is done sending a special control message known as a MAP message on a downstream channel to specify which cable modem can transmit during which mini-slot.<br>Modems send mini-slot-request frames to the CMTS during a special set of interval mini-slots dedicated for this purpose. The requests are transmitted in a random access manner and may collide with each other. The modem cannot detect activity nor collisions: it simply infers that its request experienced collision if it does not receive a response in the next downstream control message.<br>When a collision is inferred, a modem uses binary exponential backoff to defer the transmission to a future slot.</p>\n<h2 id=\"5-4-Switched-Local-Area-Networks\"><a href=\"#5-4-Switched-Local-Area-Networks\" class=\"headerlink\" title=\"5.4 Switched Local Area Networks\"></a>5.4 Switched Local Area Networks</h2><p>Switched local networks connect hosts using link-layer switches which <strong>do not run networks-layer protocols</strong>.</p>\n<h3 id=\"5-4-1-Link-Layer-Addressing-and-ARP\"><a href=\"#5-4-1-Link-Layer-Addressing-and-ARP\" class=\"headerlink\" title=\"5.4.1 Link-Layer Addressing and ARP\"></a>5.4.1 Link-Layer Addressing and ARP</h3><h4 id=\"MAC-Addresses\"><a href=\"#MAC-Addresses\" class=\"headerlink\" title=\"MAC Addresses\"></a>MAC Addresses</h4><p>Network interfaces in hosts and routers have link-layer addresses, however <em>link-layer switches do not have link-layer addresses associated with their interfaces</em> so that they can carry datagrams without having routers or hosts having to explicitly address the frame to the intervening switch.<br>A link-layer address is called <strong>LAN address</strong>, <strong>physical address</strong> or <strong>MAC address</strong>, the last name being the most popular. This address is <strong>6 bytes long</strong>, typically expressed in hexadecimal notation. They are supposed to be permanent but can be changed via software.<br><strong>No two adapters have the same address</strong>: the IEEE manages the MAC address space, usually assigning a 24 prefix to each manufacturer and letting him choose the content of the remaining 24 bits.<br>MAC address have a flat structure (no hierarchy such as in IP) and do not change.<br>When an adapter wants to send a frame to some destination adapter, it inserts the destination adapter‚Äôs MAC address into the frame and then sends the frame into the LAN. An adapter might receive a frame that isn‚Äôt addressed to it, when this happens, the adapter checks whether the frame‚Äôs destination address matches its own, if not it discards the frame. When a sending adapter want to broadcast to the whole network, it inserts a special <strong>MAC broadcast address</strong> into the destination address field, for 6bytes addresses that is FF-FF-FF-FF-FF-FF</p>\n<h4 id=\"Address-Resolution-Protocol-ARP\"><a href=\"#Address-Resolution-Protocol-ARP\" class=\"headerlink\" title=\"Address Resolution Protocol (ARP)\"></a>Address Resolution Protocol (ARP)</h4><p>The <strong>Address Resolution Protocol (ARP)</strong> translates network-layer addresses into link-layer addresses, analogously to DNS, but ARP resolves IP addresses only for hosts and router interfaces on the same subnet.<br>Each host and router has an <strong>ARP table</strong> which contain mappings of IP addresses to MAC addresses and a time-to-live TTL value which indicates when each mapping will be deleted from the table. A typical TTL is 20 minutes from when an entry is placed in the ARP table.<br>The table does not necessarily contain an entry for every host and router on the subnet.<br>What if a frame has to be sent to an address which does not appear in the table?<br>The sender creates a special packet, an <strong>ARP packet</strong>, containing the sending and receiving IP and MAC addresses. Both ARP query and response have the same format: the sending forwards the ARP request to the broadcast address (destination address) the frame containing the query is received by all the other adapters in the subnet. Each adapter passes the frame to the ARP module which checks if its IP address matches the destination IP address in the query. The one with a match sends back the response with the desired mapping. The querying can update its table and send the IP datagram encapsulated in a link-layer frame.<br>ARP is plug and play: the table gets build automatically.<br>ARP stands in the boundary between the link and network layers.</p>\n<h3 id=\"Sending-a-Datagram-off-the-Subnet\"><a href=\"#Sending-a-Datagram-off-the-Subnet\" class=\"headerlink\" title=\"Sending a Datagram off the Subnet\"></a>Sending a Datagram off the Subnet</h3><p>A datagram that has to be sent out of the subnet is first sent to the first-hop router on the path to the final destination (which is outside the subnet). How is its MAC acquired? Using ARP.<br>When the frame reaches the next-hop router of the destination subnet, it has to be moved inside, the router having to decide what interface to use. This is done using the forwarding table: the router extracts the datagram and checks the destination IP. The datagram is encapsulated again and sent into the subnet, this time the MAC address of the frame is indeed the destination MAC address of the ultimate destination, which the router acquire via ARP.</p>\n<h3 id=\"5-4-2-Ethernet\"><a href=\"#5-4-2-Ethernet\" class=\"headerlink\" title=\"5.4.2 Ethernet\"></a>5.4.2 Ethernet</h3><p>It has pretty much taken over the wired LAN market. Since its invention in the 70‚Äôs, it has grown and become faster.<br>At the beginning the original Ethernet LAN used a coaxial bus to interconnect the nodes, creating a broadcast LAN. By the late 90s, most companies and universities had replaces their LANs with Ethernet installation using a hub-based star topology: hosts and routers are directly connected to a hub with twisted-pair copper wire. A <strong>hub</strong> is a physical layer device that acts on individual bits rather than frames. When a hub receives a bit, it simply recreates it boosting its energy strength and transmits the bit onto all the other interfaces (it‚Äôs still a broadcast LAN). In the early 2000s, the star topology evolved: the hub was replaced with a <strong>switch</strong>, allowing a collision-less LAN.</p>\n<h4 id=\"Ethernet-Frame-Structure\"><a href=\"#Ethernet-Frame-Structure\" class=\"headerlink\" title=\"Ethernet Frame Structure\"></a>Ethernet Frame Structure</h4><p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-ethernetframe.png\" alt=\"ethernet frame\"></p>\n<ul>\n<li><em>Data fields</em> (46 to 1,500 bytes): carries the IP datagram (or other network-layer datagram). The MTU (maximum transmission unit) is 1500 bytes, compensated with fragmentation. The minimum is 46, is less, the data is ‚Äústuffed‚Äù and the receiving network layer uses the length field to eliminate the stuffing</li>\n<li><em>Destination address</em> (6 bytes) destination MAC address.</li>\n<li><em>Source address</em> (6 bytes)</li>\n<li><em>Type field</em> (2 bytes) allows to multiplex network layer protocols (if not only IP is used, also ARP has its own type number 0x0806)</li>\n<li><em>Cyclic redundant check (CRC)</em> (4 bytes): used for bit error detection</li>\n<li><em>Preamble</em> (8 bytes): the first seven have value 10101010, the last has value 10101011. The first seven serve as ‚Äúwake up‚Äù the receiving side and to <em>synchronize their clocks to that of the sender‚Äôs clock</em> the two 1s at the end of byte 8 alerts the receiver that the important stuff is about to come.</li>\n</ul>\n<p>All of the Ethernet technologies provide <strong>connectionless service</strong>  (no handshaking, similar to UDP) and <strong>unrealiable service</strong> to the network layer (no ACK, drop in case of errors) which help to make Ethernet simple and cheap.<br>If there are gaps due to discarded Ethernet frames, the fact that the application sees the gaps or not depends on the transport layer protocol used: not with TCP (reliable data transfer), yes with UDP.</p>\n<h4 id=\"Ethernet-Technologies\"><a href=\"#Ethernet-Technologies\" class=\"headerlink\" title=\"Ethernet Technologies\"></a>Ethernet Technologies</h4><p>There are many variants and flavors of Ethernet which have been standardized over the years by the IEEE. They vary in speed: 10 Megabit, 100 Megabit, 1000 Megabit, 10 Gigabit‚Ä¶<br>They can also vary in the type of traffic they can transport‚Ä¶.</p>\n<h3 id=\"5-4-3-Link-Layer-Switches\"><a href=\"#5-4-3-Link-Layer-Switches\" class=\"headerlink\" title=\"5.4.3 Link-Layer Switches\"></a>5.4.3 Link-Layer Switches</h3><p>Switch receive and forward frames. They are <strong>transparent</strong>: adapters address each other, without knowing that the switch is sitting in the middle. As they‚Äôre output rate might be smaller than the input rate, they also have buffers to queue frames.</p>\n<h3 id=\"Forwarding-and-Filtering\"><a href=\"#Forwarding-and-Filtering\" class=\"headerlink\" title=\"Forwarding and Filtering\"></a>Forwarding and Filtering</h3><p><strong>Filtering</strong> is the switch function that determines whether a frame should be forwarded to some interface or should just be dropped.<br><strong>Forwarding</strong> is the switch function that the determines the interfaces to which a frame should be directed and then moves the frame to those interfaces.<br>Switch filtering and forwarding are done with a <strong>switch table</strong> which contains entries for some (not necessarily all) of the hosts and routers on a LAN. Each entry contains:<br><code>(MAC address, interface leading toward that MAC, time at which the entry was placed in the table)</code><br>Switches forward frames based on the MAC addresses rather than on IP addresses.</p>\n<p>When a switch receives a frame:</p>\n<ul>\n<li>There is no entry in the table associated with the destination address -&gt; the packet is broadcast through all the interfaces (except the one through which the frame was received)</li>\n<li>There is an entry in the table that point to the same interface through which the frame was received -&gt; The frame is discarded (filtering)</li>\n<li>There is an entry in the table that point to an interface different from the one through which the frame was received -&gt; the frame is put in the output buffer preceding the interface discovered thanks to the table (forwarding)</li>\n</ul>\n<h4 id=\"Self-Learning\"><a href=\"#Self-Learning\" class=\"headerlink\" title=\"Self-Learning\"></a>Self-Learning</h4><p>The switch table is build <em><strong>automatically, dynamically and autonomously</strong></em> without any intervention from a network administrator: <strong>switches are self learning</strong>.</p>\n<ol>\n<li>The switch table is initially empty</li>\n<li>For each incoming frame, the switch stores in its table<ol>\n<li>the MAC address in the frame‚Äôs <em>source address field</em></li>\n<li>the interface from which the frame arrived</li>\n<li>the current time</li>\n</ol>\n</li>\n<li>The switch deletes an address in the table if no frame are received with that address as the source after some period (<strong>aging time</strong>) so that to eliminate unused entries from the table</li>\n</ol>\n<p>Thus switches are <strong>plug-and-play devices</strong>: they require no human intervention. Switches are also full-duplex, meaning any interface can send and receive at the same time.</p>\n<h4 id=\"Properties-of-Link-Layer-Switching\"><a href=\"#Properties-of-Link-Layer-Switching\" class=\"headerlink\" title=\"Properties of Link-Layer Switching\"></a>Properties of Link-Layer Switching</h4><p>Advantages over buses or hubs:</p>\n<ul>\n<li><em>Elimination of collisions</em>: the switch buffers frames and never transmit more than one frame on a segment at any one time. The maximum aggregated throughput is the sum of all the switch interface rates</li>\n<li><em>Heterogeneous links</em>: The switch providing isolation, different links can operate at different speeds and run over different media. Therefore switches are ideal for mixing legacy equipment with new equipment.</li>\n<li><em>Management</em>: A switch can disconnect a malfunctioning adapter and a cut cable isolates only one host. Switches can gather statistics useful for debugging and planning the evolution of the network.</li>\n</ul>\n<h4 id=\"Switches-Versus-Routers\"><a href=\"#Switches-Versus-Routers\" class=\"headerlink\" title=\"Switches Versus Routers\"></a>Switches Versus Routers</h4><p>They are both packet switches but switches are layer-2 packet switches while routers are layer-3 packet switches.<br>Switches are plug-and-play, have relatively high filtering and forwarding rates.<br>However to <strong>prevent the cycling of broadcast frames, the active topology of a swtiched network is restricted to a spanning tree</strong>. A large network requires large ARP tables in hosts and routers and would generate substantial ARP traffic and processing. Switches are also susceptible to broadcast storms: if one goes crazy and send an endless stream of broadcast frames, the others will forward all of the frames resulting in a network collapse.<br>Routers network addressing is hierarchical, packets do not normally cycle and the topology is not limited to a spanning tree even when the network has redundant paths. Therefore packets can use the best path between source and destination. But routers are not plug-and-play (a host need the IP to connect) and often have a larger per-packet processing time than switches. Finally two pronunciation cause a lot of disputes.</p>\n<p><img src=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/blog-interconnectiondevices.png\" alt=\"interconnectiondevices\"></p>\n<h1 id=\"PDF-Noteüëá\"><a href=\"#PDF-Noteüëá\" class=\"headerlink\" title=\"PDF Noteüëá\"></a>PDF Noteüëá</h1><object data=\"/assets/doc/computer_networking_notes_for_tech_placements.pdf\" loading=\"lazy\" type=\"application/pdf\" width=\"100%\" height=\"700px\">\n</object>\n",
            "tags": [
                "computer-science",
                "computer-networks",
                "computer-networks-notes"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/curated-list-of-project-based-tutorials/",
            "url": "https://samirpaul.in/posts/curated-list-of-project-based-tutorials/",
            "title": "Curated List of Project Based Tutorials",
            "date_published": "2023-08-15T04:24:51.000Z",
            "content_html": "<h1 id=\"Project-Based-Learning\"><a href=\"#Project-Based-Learning\" class=\"headerlink\" title=\"Project Based Learning\"></a>Project Based Learning</h1><blockquote>\n<p>A list of programming tutorials in which aspiring software developers learn how to build an application from scratch. These tutorials are divided into different primary programming languages. Tutorials may involve multiple technologies and languages.</p>\n</blockquote>\n<h2 id=\"Table-of-Contents\"><a href=\"#Table-of-Contents\" class=\"headerlink\" title=\"Table of Contents:\"></a>Table of Contents:</h2><ul>\n<li><a href=\"#c\">C#</a></li>\n<li><a href=\"#cc\">C&#x2F;C++</a></li>\n<li><a href=\"#clojure\">Clojure</a></li>\n<li><a href=\"#dart\">Dart</a></li>\n<li><a href=\"#elixir\">Elixir</a></li>\n<li><a href=\"#erlang\">Erlang</a></li>\n<li><a href=\"#f\">F#</a></li>\n<li><a href=\"#go\">Go</a></li>\n<li><a href=\"#haskell\">Haskell</a></li>\n<li><a href=\"#html-and-css\">HTML&#x2F;CSS</a></li>\n<li><a href=\"#java\">Java</a></li>\n<li><a href=\"#javascript\">JavaScript</a></li>\n<li><a href=\"#kotlin\">Kotlin</a></li>\n<li><a href=\"#lua\">Lua</a></li>\n<li><a href=\"#ocaml\">OCaml</a></li>\n<li><a href=\"#php\">PHP</a></li>\n<li><a href=\"#python\">Python</a></li>\n<li><a href=\"#r\">R</a></li>\n<li><a href=\"#ruby\">Ruby</a></li>\n<li><a href=\"#rust\">Rust</a></li>\n<li><a href=\"#scala\">Scala</a></li>\n<li><a href=\"#swift\">Swift</a></li>\n<li><a href=\"#additional-resources\">Additional resources</a></li>\n</ul>\n<h2 id=\"C-C\"><a href=\"#C-C\" class=\"headerlink\" title=\"C&#x2F;C++:\"></a>C&#x2F;C++:</h2><ul>\n<li><a href=\"http://www.craftinginterpreters.com/\">Build an Interpreter</a> (Chapter 14 on is written in C)</li>\n<li><a href=\"https://arjunsreedharan.org/post/148675821737/memory-allocators-101-write-a-simple-memory\">Memory Allocators 101 - Write a simple memory allocator</a></li>\n<li><a href=\"https://brennan.io/2015/01/16/write-a-shell-in-c/\">Write a Shell in C</a></li>\n<li><a href=\"https://www.cs.nmsu.edu/~pfeiffer/fuse-tutorial/\">Write a FUSE Filesystem</a></li>\n<li><a href=\"http://viewsourcecode.org/snaptoken/kilo/\">Build Your Own Text Editor</a></li>\n<li><a href=\"http://www.buildyourownlisp.com/\">Build Your Own Lisp</a></li>\n<li><a href=\"https://nesdoug.com/\">How to Program an NES Game in C</a></li>\n<li><a href=\"https://github.com/tuhdo/os01\">Write an OS from scratch</a></li>\n<li><a href=\"https://github.com/cfenollosa/os-tutorial\">How to create an OS from scratch </a></li>\n<li><a href=\"https://austinmorlan.com/posts/chip8_emulator/\">Building a CHIP-8 Emulator</a></li>\n<li><a href=\"http://lazyfoo.net/tutorials/SDL/\">Beginning Game Programming with C++ and SDL</a></li>\n<li><a href=\"http://codecapsule.com/2012/11/07/ikvs-implementing-a-key-value-store-table-of-contents/\">Implementing a Key-Value Store</a></li>\n<li>Tiny 3D graphics projects<ul>\n<li><a href=\"https://github.com/ssloy/tinyrenderer/wiki\">Tiny Renderer or how OpenGL works: software rendering in 500 lines of code</a></li>\n<li><a href=\"https://github.com/ssloy/tinyraytracer/wiki\">Understandable RayTracing in 256 lines of bare C++</a></li>\n<li><a href=\"https://github.com/ssloy/tinykaboom/wiki\">KABOOM! in 180 lines of bare C++</a></li>\n<li><a href=\"https://github.com/ssloy/tinyraycaster/wiki\">486 lines of C++: old-school FPS in a weekend</a></li>\n</ul>\n</li>\n<li>Writing a minimal x86-64 JIT compiler in C++<ul>\n<li><a href=\"https://solarianprogrammer.com/2018/01/10/writing-minimal-x86-64-jit-compiler-cpp/\">Part 1</a></li>\n<li><a href=\"https://solarianprogrammer.com/2018/01/12/writing-minimal-x86-64-jit-compiler-cpp-part-2/\">Part 2</a></li>\n</ul>\n</li>\n<li><a href=\"http://howistart.org/posts/cpp/1/index.html\">Build a Live Code-reloader Library for C++</a></li>\n<li><a href=\"https://github.com/jamesroutley/write-a-hash-table\">Write a hash table in C</a></li>\n<li><a href=\"https://cstack.github.io/db_tutorial/\">Let‚Äôs Build a Simple Database</a></li>\n<li><a href=\"http://arjunsreedharan.org/post/82710718100/kernel-101-lets-write-a-kernel\">Let‚Äôs Write a Kernel</a></li>\n<li><a href=\"http://3zanders.co.uk/2017/10/13/writing-a-bootloader/\">Write a Bootloader in C</a></li>\n<li><a href=\"https://blog.lizzie.io/linux-containers-in-500-loc.html\">Linux Container in 500 Lines of Code</a></li>\n<li><a href=\"https://justinmeiners.github.io/lc3-vm/\">Write Your Own Virtual Machine</a></li>\n<li><a href=\"https://david942j.blogspot.com/2018/10/note-learning-kvm-implement-your-own.html\">Learning KVM - Implement Your Own Linux Kernel</a></li>\n<li>Write a C compiler<ul>\n<li><a href=\"https://norasandler.com/2017/11/29/Write-a-Compiler.html\">Part 1: Integers, Lexing and Code Generation</a></li>\n<li><a href=\"https://norasandler.com/2017/12/05/Write-a-Compiler-2.html\">Part 2: Unary Operators</a></li>\n<li><a href=\"https://norasandler.com/2017/12/15/Write-a-Compiler-3.html\">Part 3: Binary Operators</a></li>\n<li><a href=\"https://norasandler.com/2017/12/28/Write-a-Compiler-4.html\">Part 4: Even More Binary Operators</a></li>\n<li><a href=\"https://norasandler.com/2018/01/08/Write-a-Compiler-5.html\">Part 5: Local Variables</a></li>\n<li><a href=\"https://norasandler.com/2018/02/25/Write-a-Compiler-6.html\">Part 6: Conditionals</a></li>\n<li><a href=\"https://norasandler.com/2018/03/14/Write-a-Compiler-7.html\">Part 7: Compound Statements</a></li>\n<li><a href=\"https://norasandler.com/2018/04/10/Write-a-Compiler-8.html\">Part 8: Loops</a></li>\n<li><a href=\"https://norasandler.com/2018/06/27/Write-a-Compiler-9.html\">Part 9: Functions</a></li>\n<li><a href=\"https://norasandler.com/2019/02/18/Write-a-Compiler-10.html\">Part 10: Global Variables</a></li>\n</ul>\n</li>\n<li><a href=\"https://llvm.org/docs/tutorial/#kaleidoscope-implementing-a-language-with-llvm\">Implementing a Language with LLVM</a></li>\n<li><a href=\"https://jguegant.github.io//jguegant.github.io/blogs/tech/meta-crush-saga.html\">Meta Crush Saga: a C++17 compile-time game</a></li>\n<li><a href=\"https://gist.github.com/nadavrot/5b35d44e8ba3dd718e595e40184d03f0\">High-Performance Matrix Multiplication</a></li>\n<li>Space Invaders from Scratch<ul>\n<li><a href=\"http://nicktasios.nl/posts/space-invaders-from-scratch-part-1.html\">Part 1</a></li>\n<li><a href=\"http://nicktasios.nl/posts/space-invaders-from-scratch-part-2.html\">Part 2</a></li>\n<li><a href=\"http://nicktasios.nl/posts/space-invaders-from-scratch-part-3.html\">Part 3</a></li>\n<li><a href=\"http://nicktasios.nl/posts/space-invaders-from-scratch-part-4.html\">Part 4</a></li>\n<li><a href=\"http://nicktasios.nl/posts/space-invaders-from-scratch-part-5.html\">Part 5</a></li>\n</ul>\n</li>\n<li><a href=\"http://javilop.com/gamedev/tetris-tutorial-in-c-platform-independent-focused-in-game-logic-for-beginners/\">Tetris Tutorial in C++ Platform Independent</a></li>\n<li>Writing a Linux Debugger<ul>\n<li><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-setup/\">Part 1: Setup</a></li>\n<li><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-breakpoints/\">Part 2: Breakpoints</a></li>\n<li><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-registers/\">Part 3: Registers and memory</a></li>\n<li><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-elf-dwarf/\">Part 4: Elves and dwarves</a></li>\n<li><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-source-signal/\">Part 5: Source and signals</a></li>\n<li><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-dwarf-step/\">Part 6: Source-level stepping</a></li>\n<li><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-source-break/\">Part 7: Source-level breakpoints</a></li>\n<li><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-unwinding/\">Part 8: Stack unwinding</a></li>\n<li><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-variables/\">Part 9: Handling variables</a></li>\n<li><a href=\"https://blog.tartanllama.xyz/writing-a-linux-debugger-advanced-topics/\">Part 10: Advanced topics</a></li>\n</ul>\n</li>\n<li>Let‚Äôs write a compiler<ul>\n<li><a href=\"https://briancallahan.net/blog/20210814.html\">Part 1: Introduction, selecting a language, and doing some planning</a></li>\n<li><a href=\"https://briancallahan.net/blog/20210815.html\">Part 2: A lexer</a></li>\n<li><a href=\"https://briancallahan.net/blog/20210816.html\">Part 3: A parser</a></li>\n<li><a href=\"https://briancallahan.net/blog/20210817.html\">Part 4: Testing</a></li>\n<li><a href=\"https://briancallahan.net/blog/20210818.html\">Part 5: A code generator</a></li>\n<li><a href=\"https://briancallahan.net/blog/20210819.html\">Part 6: Input and output</a></li>\n<li><a href=\"https://briancallahan.net/blog/20210822.html\">Part 7: Arrays</a></li>\n<li><a href=\"https://briancallahan.net/blog/20210826.html\">Part 8: Strings, forward references, and conclusion</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Network-programming\"><a href=\"#Network-programming\" class=\"headerlink\" title=\"Network programming\"></a>Network programming</h3><ul>\n<li><p>Let‚Äôs Code a TCP&#x2F;IP Stack</p>\n<ul>\n<li><a href=\"http://www.saminiir.com/lets-code-tcp-ip-stack-1-ethernet-arp/\">Part 1: Ethernet &amp; ARP</a></li>\n<li><a href=\"http://www.saminiir.com/lets-code-tcp-ip-stack-2-ipv4-icmpv4/\">Part 2: IPv4 &amp; ICMPv4</a></li>\n<li><a href=\"http://www.saminiir.com/lets-code-tcp-ip-stack-3-tcp-handshake/\">Part 3: TCP Basics &amp; Handshake</a></li>\n<li><a href=\"http://www.saminiir.com/lets-code-tcp-ip-stack-4-tcp-data-flow-socket-api/\">Part 4: TCP Data Flow &amp; Socket API</a></li>\n<li><a href=\"http://www.saminiir.com/lets-code-tcp-ip-stack-5-tcp-retransmission/\">Part 5: TCP Retransmission</a></li>\n</ul>\n</li>\n<li><p>Programming concurrent servers</p>\n<ul>\n<li><a href=\"https://eli.thegreenplace.net/2017/concurrent-servers-part-1-introduction/\">Part 1 - Introduction</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2017/concurrent-servers-part-2-threads/\">Part 2 - Threads</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2017/concurrent-servers-part-3-event-driven/\">Part 3 - Event-driven</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2017/concurrent-servers-part-4-libuv/\">Part 4 - libuv</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2017/concurrent-servers-part-5-redis-case-study/\">Part 5 - Redis case study</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2018/concurrent-servers-part-6-callbacks-promises-and-asyncawait/\">Part 6 - Callbacks, Promises and async&#x2F;await</a></li>\n</ul>\n</li>\n<li><p>MQTT Broker from scratch</p>\n<ul>\n<li><a href=\"https://codepr.github.io/posts/sol-mqtt-broker\">Part 1 - The protocol</a></li>\n<li><a href=\"https://codepr.github.io/posts/sol-mqtt-broker-p2\">Part 2 - Networking</a></li>\n<li><a href=\"https://codepr.github.io/posts/sol-mqtt-broker-p3\">Part 3 - Server</a></li>\n<li><a href=\"https://codepr.github.io/posts/sol-mqtt-broker-p4\">Part 4 - Data structures</a></li>\n<li><a href=\"https://codepr.github.io/posts/sol-mqtt-broker-p5\">Part 5 - Topic abstraction</a></li>\n<li><a href=\"https://codepr.github.io/posts/sol-mqtt-broker-p6\">Part 6 - Handlers</a></li>\n<li><a href=\"https://codepr.github.io/posts/sol-mqtt-broker-bonus\">Bonus - Multithreading</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"OpenGL\"><a href=\"#OpenGL\" class=\"headerlink\" title=\"OpenGL:\"></a>OpenGL:</h3><ul>\n<li>Creating 2D Breakout game clone in C++ with OpenGL<ul>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Breakout\">Breakout</a></li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Setting-up\">Setting up</a></li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Rendering-Sprites\">Rendering Sprites</a></li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Levels\">Levels</a></li>\n<li>Collisions<ul>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Collisions/Ball\">Ball</a></li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Collisions/Collision-detection\">Collision detection</a></li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Collisions/Collision-resolution\">Collision resolution</a></li>\n</ul>\n</li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Particles\">Particles</a></li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Postprocessing\">Postprocessing</a></li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Powerups\">Powerups</a></li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Audio\">Audio</a></li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Render-text\">Render text</a></li>\n<li><a href=\"https://learnopengl.com/In-Practice/2D-Game/Final-thoughts\">Final thoughts</a></li>\n</ul>\n</li>\n<li><a href=\"https://handmadehero.org/\">Handmade Hero</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLMZ_9w2XRxiZq1vfw1lrpCMRDufe2MKV_\">How to Make Minecraft in C++&#x2F;OpenGL</a> (video)</li>\n</ul>\n<h2 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C#:\"></a>C#:</h2><ul>\n<li><a href=\"http://scottlilly.com/learn-c-by-building-a-simple-rpg-index/\">Learn C# By Building a Simple RPG Game</a></li>\n<li><a href=\"https://roguesharp.wordpress.com/\">Create a Rogue-like game in C#</a></li>\n<li><a href=\"https://www.intertech.com/Blog/xamarin-tutorial-part-1-create-a-blank-app/\">Create a Blank App with C# and Xamarin (work in progress)</a></li>\n<li><a href=\"https://www.raywenderlich.com/134049/building-ios-apps-with-xamarin-and-visual-studio\">Build iOS Photo Library App with Xamarin and Visual Studio</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLVMqA0_8O85yC78I4Xj7z48ES48IQBa7p\">Building the CoreWiki</a> This is a Wiki-style content management system that has been completely written in C# with ASP.NET Core and Razor Pages. You can find the source code <a href=\"https://github.com/csharpfritz/CoreWiki\">here</a>.</li>\n</ul>\n<h2 id=\"Clojure\"><a href=\"#Clojure\" class=\"headerlink\" title=\"Clojure:\"></a>Clojure:</h2><ul>\n<li><a href=\"http://howistart.org/posts/clojure/1/index.html\">Build a Twitter Bot with Clojure</a></li>\n<li><a href=\"https://bernhardwenzel.com/articles/clojure-spellchecker/\">Building a Spell-Checker</a></li>\n<li><a href=\"https://hackernoon.com/building-a-jira-integration-with-clojure-atlassian-connect-506ebd112807\">Building a JIRA integration with Clojure &amp; Atlassian Connect</a></li>\n<li><a href=\"https://github.com/aliaksandr-s/prototyping-with-clojure\">Prototyping with Clojure</a></li>\n<li><a href=\"https://shaunlebron.github.io/t3tr0s-slides\">Tetris in ClojureScript</a></li>\n</ul>\n<h2 id=\"Dart\"><a href=\"#Dart\" class=\"headerlink\" title=\"Dart:\"></a>Dart:</h2><h3 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter:\"></a>Flutter:</h3><ul>\n<li><a href=\"https://youtu.be/O3nmP-lZAdg\">Amazon Clone with Admin Panel</a></li>\n<li><a href=\"https://youtu.be/7dAt-JMSCVQ\">Food Delivery App</a></li>\n<li><a href=\"https://youtu.be/0_GJ1w_iG44\">Google Docs Clone</a></li>\n<li><a href=\"https://youtu.be/mEPm9w5QlJM\">Instagram Clone</a></li>\n<li><a href=\"https://youtu.be/Aut-wfXacXg\">Multiplayer TicTacToe Game</a></li>\n<li><a href=\"https://youtu.be/4E4V9F3cbp4\">TikTok Clone</a></li>\n<li><a href=\"https://youtu.be/71AsYo2q_0Y\">Ticket Booking App</a></li>\n<li><a href=\"https://youtu.be/x4DydJKVvQk\">Travel App</a></li>\n<li><a href=\"https://youtu.be/U9YKZrDX0CQ\">Twitch Clone</a></li>\n<li><a href=\"https://youtu.be/yqwfP2vXWJQ\">WhatsApp Clone</a></li>\n<li><a href=\"https://youtu.be/_W0RN_Cqhpg\">Wordle Clone</a></li>\n<li><a href=\"https://youtu.be/sMA1dKbv33Y\">Zoom Clone</a></li>\n</ul>\n<h2 id=\"Elixir\"><a href=\"#Elixir\" class=\"headerlink\" title=\"Elixir\"></a>Elixir</h2><ul>\n<li><a href=\"https://sheharyar.me/blog/simple-chat-phoenix-elixir/\">Building a Simple Chat App With Elixir and Phoenix</a></li>\n<li><a href=\"https://medium.com/free-code-camp/how-to-write-a-super-fast-link-shortener-with-elixir-phoenix-and-mnesia-70ffa1564b3c\">How to write a super fast link shortener with Elixir, Phoenix, and Mnesia</a></li>\n</ul>\n<h2 id=\"Erlang\"><a href=\"#Erlang\" class=\"headerlink\" title=\"Erlang\"></a>Erlang</h2><ul>\n<li><a href=\"https://medium.com/@kansi/chatbus-build-your-first-multi-user-chat-room-app-with-erlang-otp-b55f72064901\">ChatBus : build your first multi-user chat room app with Erlang&#x2F;OTP</a></li>\n<li><a href=\"http://marianoguerra.org/posts/making-a-chat-app-with-erlang-rebar-cowboy-and-bullet.html\">Making a Chat App with Erlang, Rebar, Cowboy and Bullet</a></li>\n</ul>\n<h2 id=\"F\"><a href=\"#F\" class=\"headerlink\" title=\"F#:\"></a>F#:</h2><ul>\n<li><a href=\"http://tomasp.net/blog/2018/write-your-own-excel\">Write your own Excel in 100 lines of F#</a></li>\n</ul>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java:\"></a>Java:</h2><ul>\n<li><a href=\"http://www.craftinginterpreters.com/\">Build an Interpreter</a> (Chapter 4-13 is written in Java)</li>\n<li><a href=\"http://javarevisited.blogspot.com/2015/06/how-to-create-http-server-in-java-serversocket-example.html\">Build a Simple HTTP Server with Java</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=dhWL4DC7Krs\">Build an Android Flashlight App</a> (video)</li>\n<li><a href=\"https://spring.io/guides/gs/securing-web/\">Build a Spring Boot App with User Authentication</a></li>\n</ul>\n<h2 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript:\"></a>JavaScript:</h2><ul>\n<li><a href=\"https://javascript30.com/\">Build 30 things in 30 days with 30 tutorials</a></li>\n<li><a href=\"https://medium.com/codingthesmartway-com-blog/pure-javascript-building-a-real-world-application-from-scratch-5213591cfcd6\">Build an App in Pure JS</a></li>\n<li><a href=\"https://link.medium.com/wWUO7TN8SS\">Build a Jupyter Notebook Extension</a></li>\n<li><a href=\"https://medium.com/javascript-in-plain-english/build-tic-tac-toe-game-using-javascript-3afba3c8fdcc\">Build a TicTacToe Game with JavaScript</a></li>\n<li><a href=\"https://webdesign.tutsplus.com/tutorials/build-a-simple-weather-app-with-vanilla-javascript--cms-33893\">Build a Simple Weather App With Vanilla JavaScript</a></li>\n<li><a href=\"https://github.com/dwyl/javascript-todo-list-tutorial\">Build a Todo List App in JavaScript</a></li>\n</ul>\n<h2 id=\"HTML-and-CSS\"><a href=\"#HTML-and-CSS\" class=\"headerlink\" title=\"HTML and CSS:\"></a>HTML and CSS:</h2><ul>\n<li><a href=\"https://medium.freecodecamp.org/how-to-build-a-delightful-loading-screen-in-5-minutes-847991da509f\">Build A Loading Screen</a></li>\n<li><a href=\"https://medium.freecodecamp.org/how-to-build-an-html-calculator-app-from-scratch-using-javascript-4454b8714b98\">Build an HTML Calculator with JS</a></li>\n<li><a href=\"https://www.freecodecamp.org/news/think-like-a-programmer-how-to-build-snake-using-only-javascript-html-and-css-7b1479c3339e/\">Build Snake using only JavaScript, HTML &amp; CSS</a></li>\n</ul>\n<h3 id=\"Mobile-Application\"><a href=\"#Mobile-Application\" class=\"headerlink\" title=\"Mobile Application:\"></a>Mobile Application:</h3><ul>\n<li><a href=\"https://egghead.io/courses/build-a-react-native-todo-application\">Build a React Native Todo Application</a></li>\n<li><a href=\"https://medium.com/@alialhaddad/how-to-use-redux-thunk-in-react-and-react-native-4743a1321bd0\">Build a React Native Application with Redux Thunk</a></li>\n</ul>\n<h3 id=\"Web-Applications\"><a href=\"#Web-Applications\" class=\"headerlink\" title=\"Web Applications:\"></a>Web Applications:</h3><h4 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React:\"></a>React:</h4><ul>\n<li><a href=\"http://serverless-stack.com/\">Create Serverless React.js Apps</a></li>\n<li><a href=\"http://codeloveandboards.com/blog/2016/01/04/trello-tribute-with-phoenix-and-react-pt-1/\">Create a Trello Clone</a></li>\n<li><a href=\"http://sahatyalkabov.com/create-a-character-voting-app-using-react-nodejs-mongodb-and-socketio\">Create a Character Voting App with React, Node, MongoDB and SocketIO</a></li>\n<li><a href=\"https://www.fullstackreact.com/articles/react-tutorial-cloning-yelp/\">React Tutorial: Cloning Yelp</a></li>\n<li><a href=\"https://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html\">Build a Full Stack Movie Voting App with Test-First Development using Mocha, React, Redux and Immutable</a></li>\n<li><a href=\"https://scotch.io/tutorials/build-a-real-time-twitter-stream-with-node-and-react-js\">Build a Twitter Stream with React and Node</a></li>\n<li><a href=\"https://medium.com/@kris101/clone-medium-on-node-js-and-react-js-731cdfbb6878\">Build A Simple Medium Clone using React.js and Node.js</a></li>\n<li><a href=\"https://medium.freecodecamp.org/how-to-integrate-mailchimp-in-a-javascript-web-app-2a889fb43f6f\">Integrate MailChimp in JS</a></li>\n<li><a href=\"https://medium.freecodecamp.org/building-chrome-extensions-in-react-parcel-79d0240dd58f\">Build A Chrome Extension with React + Parcel</a></li>\n<li><a href=\"https://blog.hasura.io/tutorial-fullstack-react-native-with-graphql-and-authentication-18183d13373a\">Build A ToDo App With React Native</a></li>\n<li><a href=\"https://medium.freecodecamp.org/how-to-build-a-chat-application-using-react-redux-redux-saga-and-web-sockets-47423e4bc21a\">Make a Chat Application</a></li>\n<li><a href=\"https://medium.freecodecamp.org/create-a-news-app-using-react-native-ced249263627\">Create a News App with React Native</a></li>\n<li><a href=\"https://medium.freecodecamp.org/learn-webpack-for-react-a36d4cac5060\">Learn Webpack For React</a></li>\n<li><a href=\"https://blog.bitsrc.io/testing-your-react-app-with-puppeteer-and-jest-c72b3dfcde59\">Testing React App With Puppeteer and Jest</a></li>\n<li><a href=\"https://medium.freecodecamp.org/how-to-build-your-own-react-boilerplate-2f8cbbeb9b3f\">Build Your Own React Boilerplate</a></li>\n<li><a href=\"https://medium.freecodecamp.org/create-gameoflife-with-react-in-one-hour-8e686a410174\">Code The Game Of Life With React</a></li>\n<li><a href=\"https://hackernoon.com/a-basic-react-redux-introductory-tutorial-adcc681eeb5e\">A Basic React+Redux Introductory Tutorial</a></li>\n<li><a href=\"https://hackernoon.com/build-an-appointment-scheduler-using-react-twilio-and-cosmic-js-95377f6d1040\">Build an Appointment Scheduler</a></li>\n<li><a href=\"https://codeburst.io/build-a-chat-app-with-sentiment-analysis-using-next-js-c43ebf3ea643\">Build A Chat App with Sentiment Analysis</a></li>\n<li><a href=\"https://hackernoon.com/full-stack-web-application-using-react-node-js-express-and-webpack-97dbd5b9d708\">Build A Full Stack Web Application Setup</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=hT3j87FMR6M\">Create Todoist clone with React and Firebase</a></li>\n<li>Build A Random Quote Machine<ul>\n<li><a href=\"https://www.youtube.com/watch?v=3QngsWA9IEE\">Part 1</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=XnoTmO06OYo\">Part 2</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=us51Jne67_I\">Part 3</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=iZx7hqHb5MU\">Part 4</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=lpba9vBqXl0\">Part 5</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=Jvp8j6zrFHE\">Part 6</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=M_hFfrN8_PQ\">Part 7</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=-edmQKcOW8s\">React Phone E-Commerce Project(video)</a></li>\n</ul>\n<h4 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular:\"></a>Angular:</h4><ul>\n<li><p><a href=\"https://hackhands.com/building-instagram-clone-angularjs-satellizer-nodejs-mongodb/\">Build an Instagram Clone with Angular 1.x</a></p>\n</li>\n<li><p>Build an offline-capable Hacker News client with Angular 2+</p>\n<ul>\n<li><a href=\"https://houssein.me/angular2-hacker-news\">Part 1</a></li>\n<li><a href=\"https://houssein.me/progressive-angular-applications\">Part 2</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://thinkster.io/django-angularjs-tutorial\">Build a Google+ clone with Django and AngularJS (Angular 1.x)</a></p>\n</li>\n<li><p>Build A Beautiful Real World App with Angular 8 :</p>\n<ul>\n<li><a href=\"https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-6-a-to-z-ultimate-guide-2018-part-i-e121dd1d55e\">Part I</a></li>\n<li><a href=\"https://medium.com/@hamedbaatour/build-a-real-world-beautiful-web-app-with-angular-8-the-ultimate-guide-2019-part-ii-fe70852b2d6d\">Part II</a></li>\n</ul>\n</li>\n<li><p><a href=\"https://medium.com/@tomastrajan/how-to-build-responsive-layouts-with-bootstrap-4-and-angular-6-cfbb108d797b\">Build Responsive layout with BootStrap 4 and Angular 6</a></p>\n</li>\n<li><p>ToDo App with Angular 5</p>\n<ul>\n<li><a href=\"http://www.discoversdk.com/blog/intro-to-angular-and-the-evolution-of-the-web\">Introduction to Angular</a></li>\n<li><a href=\"http://www.discoversdk.com/blog/angular-5-to-do-list-app-part-1\">Part 1</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node:\"></a>Node:</h4><ul>\n<li><a href=\"https://scotch.io/tutorials/building-a-real-time-markdown-viewer\">Build a real-time Markdown Editor with NodeJS</a></li>\n<li><a href=\"http://mherman.org/blog/2016/04/28/test-driven-development-with-node/\">Test-Driven Development with Node, Postgres and Knex</a></li>\n<li>Write a Twitter Bot in Node.js<ul>\n<li><a href=\"https://codeburst.io/build-a-simple-twitter-bot-with-node-js-in-just-38-lines-of-code-ed92db9eb078\">Part 1</a></li>\n<li><a href=\"https://codeburst.io/build-a-simple-twitter-bot-with-node-js-part-2-do-more-2ef1e039715d\">Part 2</a></li>\n</ul>\n</li>\n<li><a href=\"https://medium.freecodecamp.org/how-to-build-a-simple-search-bot-in-30-minutes-eb56fcedcdb1\">Build A Simple Search Bot in 30 minutes</a></li>\n<li><a href=\"https://medium.freecodecamp.org/how-i-built-a-job-scraping-web-app-using-node-js-and-indreed-7fbba124bbdc\">Build A Job Scraping Web App</a></li>\n<li><a href=\"https://blog.scottlogic.com/2017/05/22/gifbot-github-integration.html\">Building a GitHub App</a></li>\n<li>How to build your own Uber-for-X App using JavaScript, Node.JS, MongoDB and Web Sockets<ul>\n<li><a href=\"https://www.ashwinhariharan.tech/blog/how-to-build-your-own-uber-for-x-app/\">Part 1</a></li>\n<li><a href=\"https://www.ashwinhariharan.tech/blog/how-to-build-your-own-uber-for-x-app-part-2/\">Part 2</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h4><ul>\n<li><a href=\"https://medium.com/@anas.mammeri/vue-2-firebase-how-to-build-a-vue-app-with-firebase-authentication-system-in-15-minutes-fdce6f289c3c\">Vue 2 + Firebase: How to build a Vue app with Firebase authentication system in 15 minutes</a></li>\n<li><a href=\"https://matthiashager.com/complete-vuejs-application-tutorial/\">Vue.js Application Tutorial ‚Äì Creating a Simple Budgeting App with Vue</a></li>\n<li><a href=\"https://scotch.io/tutorials/build-a-blog-with-vue-graphql-and-apollo-client\">Build a Blog with Vue, GraphQL and Apollo</a></li>\n<li>Build a full stack web application using MEVN (MongoDB, Express, Vue, Node) stack<ul>\n<li><a href=\"https://medium.com/@anaida07/mevn-stack-application-part-1-3a27b61dcae0\">Part 1</a></li>\n<li><a href=\"https://medium.com/@anaida07/mevn-stack-application-part-2-2-9ebcf8a22753\">Part 2</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=78tNYZUS-ps\">Vue.js To-Do List Tutorial (video)</a></li>\n<li><a href=\"https://www.ably.io/tutorials/peer-to-peer-vue\">Vue 2 + Pub&#x2F;Sub: Build a peer to peer multi-user platform for games</a></li>\n</ul>\n<h4 id=\"Others-Hapi-Express‚Ä¶\"><a href=\"#Others-Hapi-Express‚Ä¶\" class=\"headerlink\" title=\"Others (Hapi, Express‚Ä¶):\"></a>Others (Hapi, Express‚Ä¶):</h4><ul>\n<li>Build a Progressive Web Application (PWA)<ul>\n<li><a href=\"https://bitsofco.de/bitsofcode-pwa-part-1-offline-first-with-service-worker/\">Part 1</a></li>\n<li><a href=\"https://bitsofco.de/bitsofcode-pwa-part-2-instant-loading-with-indexeddb/\">Part 2</a></li>\n<li><a href=\"https://bitsofco.de/bitsofcode-pwa-part-3-push-notifications/\">Part 3</a></li>\n</ul>\n</li>\n<li><a href=\"https://medium.freecodecamp.org/build-native-desktop-apps-with-javascript-a49ede90d8e9\">Build A Native Desktop App with JS</a></li>\n<li>Build a Powerful API with NodeJs,GraphQL and Hapi<ul>\n<li><a href=\"https://medium.com/@wesharehoodies/how-to-setup-a-powerful-api-with-nodejs-graphql-mongodb-hapi-and-swagger-e251ac189649\">Part I</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"D3-js\"><a href=\"#D3-js\" class=\"headerlink\" title=\"D3.js\"></a>D3.js</h4><ul>\n<li><a href=\"https://www.sitepoint.com/d3-js-data-visualizations/\">Learn D3 using examples</a></li>\n<li><a href=\"https://medium.freecodecamp.org/learn-to-create-a-line-chart-using-d3-js-4f43f1ee716b\">Learn To Make A Line Chart</a></li>\n</ul>\n<h3 id=\"Game-Development\"><a href=\"#Game-Development\" class=\"headerlink\" title=\"Game Development:\"></a>Game Development:</h3><ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Games/Tutorials/2D_breakout_game_Phaser\">Make 2D Breakout Game using Phaser</a></li>\n<li>Make Flappy Bird in HTML5 and JavaScript with Phaser<ul>\n<li><a href=\"http://www.lessmilk.com/tutorial/flappy-bird-phaser-1\">Part 1</a></li>\n<li><a href=\"http://www.lessmilk.com/tutorial/flappy-bird-phaser-2\">Part 2</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Desktop-Application\"><a href=\"#Desktop-Application\" class=\"headerlink\" title=\"Desktop Application:\"></a>Desktop Application:</h3><ul>\n<li><a href=\"https://medium.freecodecamp.org/build-a-desktop-chat-app-with-react-electron-and-chatkit-744d168e6f2f\">Build A Desktop Chat App with React and Electron</a></li>\n</ul>\n<h3 id=\"Miscellaneous\"><a href=\"#Miscellaneous\" class=\"headerlink\" title=\"Miscellaneous:\"></a>Miscellaneous:</h3><ul>\n<li><a href=\"https://www.pubnub.com/blog/build-yourself-a-web-framework-in-less-than-20-lines-of-code/\">How to Build a Web Framework in Less Than 20 Lines of Code</a></li>\n<li><a href=\"https://zapier.com/engineering/how-to-build-redux/\">Build Yourself a Redux</a></li>\n<li><a href=\"https://medium.com/@deathmood/how-to-write-your-own-virtual-dom-ee74acc13060\">How to write your own Virtual DOM</a></li>\n<li><a href=\"https://andrewgriffithsonline.com/blog/serverless-websockets-on-aws/\">Build A Realtime Serverless GraphQL API with WebSockets on AWS</a></li>\n</ul>\n<h2 id=\"Kotlin\"><a href=\"#Kotlin\" class=\"headerlink\" title=\"Kotlin:\"></a>Kotlin:</h2><ul>\n<li><a href=\"https://medium.com/@juanchosaravia/learn-kotlin-while-developing-an-android-app-introduction-567e21ff9664\">Keddit - Learn Kotlin While Developing an Android Application</a></li>\n</ul>\n<h2 id=\"Lua\"><a href=\"#Lua\" class=\"headerlink\" title=\"Lua:\"></a>Lua:</h2><h3 id=\"LOVE\"><a href=\"#LOVE\" class=\"headerlink\" title=\"L√ñVE:\"></a>L√ñVE:</h3><ul>\n<li>BYTEPATH: Creation of a Complete Game with Lua and L√ñVE<ul>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/30\">Part 0: Introduction</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/15\">Part 1: Game Loop</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/16\">Part 2: Libraries</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/17\">Part 3: Rooms and Areas</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/18\">Part 4: Exercises</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/19\">Part 5: Game Basics</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/20\">Part 6: Player Basics</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/21\">Part 7: Player Stats and Attacks</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/22\">Part 8: Enemies</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/23\">Part 9: Director and Gameplay Loop</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/24\">Part 10: Coding Practices</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/25\">Part 11: Passives</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/26\">Part 12: More Passives</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/27\">Part 13: Skill Tree</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/28\">Part 14: Console</a></li>\n<li><a href=\"https://github.com/SSYGEN/blog/issues/29\">Part 15: Final</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python:\"></a>Python:</h2><h3 id=\"Web-Scraping\"><a href=\"#Web-Scraping\" class=\"headerlink\" title=\"Web Scraping:\"></a>Web Scraping:</h3><ul>\n<li><a href=\"https://marcobonzanini.com/2015/03/02/mining-twitter-data-with-python-part-1/\">Mining Twitter Data with Python</a></li>\n<li><a href=\"https://realpython.com/blog/python/web-scraping-with-scrapy-and-mongodb/\">Scrape a Website with Scrapy and MongoDB</a></li>\n<li><a href=\"http://www.byperth.com/2018/04/25/guide-web-scraping-101-what-you-need-to-know-and-how-to-scrape-with-python-selenium-webdriver/\">How To Scrape With Python and Selenium WebDriver</a></li>\n<li><a href=\"https://medium.com/@nishantsahoo.in/which-movie-should-i-watch-5c83a3c0f5b1\">Which Movie Should I Watch using BeautifulSoup</a></li>\n</ul>\n<h3 id=\"Web-Applications-1\"><a href=\"#Web-Applications-1\" class=\"headerlink\" title=\"Web Applications:\"></a>Web Applications:</h3><ul>\n<li><a href=\"https://blog.miguelgrinberg.com/post/the-flask-mega-tutorial-part-i-hello-world\">Build a Microblog with Flask</a></li>\n<li><a href=\"https://tutorial.djangogirls.org/en/\">Create a Blog Web App In Django</a></li>\n<li><a href=\"https://www.twilio.com/blog/2015/03/choose-your-own-adventures-presentations-wizard-mode-part-1-of-3.html\">Choose Your Own Adventure Presentations</a></li>\n<li><a href=\"https://realpython.com/blog/python/rethink-flask-a-simple-todo-list-powered-by-flask-and-rethinkdb/\">Build a Todo List with Flask and RethinkDB</a></li>\n<li><a href=\"http://www.obeythetestinggoat.com/\">Build a Todo List with Django and Test-Driven Development</a></li>\n<li><a href=\"http://www.skybert.net/python/developing-a-restful-micro-service-in-python/\">Build a RESTful Microservice in Python</a></li>\n<li><a href=\"https://testdriven.io/\">Microservices with Docker, Flask, and React</a></li>\n<li><a href=\"https://pythonspot.com/flask-web-app-with-python/\">Build A Simple Web App With Flask</a></li>\n<li><a href=\"https://codeburst.io/create-a-django-api-in-under-20-minutes-2a082a60f6f3\">Create A Django API in under 20 minutes</a></li>\n<li>Build a Community-driven delivery application with Django, Postgres and JavaScript<ul>\n<li><a href=\"https://www.ashwinhariharan.tech/blog/thinking-of-building-a-contact-tracing-application-heres-what-you-can-do-instead/\">Part 1</a></li>\n<li><a href=\"https://www.ashwinhariharan.tech/blog/thinking-of-building-a-contact-tracing-application-heres-what-you-can-do-instead-part-2/\">Part 2</a></li>\n</ul>\n</li>\n<li>Realtime Chat application with Vue, django-notifs, RabbitMQ and uWSGI<ul>\n<li><a href=\"https://danidee10.github.io/2018/01/01/realtime-django-1.html\">Part 1</a></li>\n<li><a href=\"https://danidee10.github.io/2018/01/03/realtime-django-2.html\">Part 2</a></li>\n<li><a href=\"https://danidee10.github.io/2018/01/07/realtime-django-3.html\">Part 3</a></li>\n<li><a href=\"https://danidee10.github.io/2018/01/10/realtime-django-4.html\">Part 4</a></li>\n<li><a href=\"https://danidee10.github.io/2018/01/13/realtime-django-5.html\">Part 5</a></li>\n<li><a href=\"https://danidee10.github.io/2018/03/12/realtime-django-6.html\">Part 6</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Bots\"><a href=\"#Bots\" class=\"headerlink\" title=\"Bots:\"></a>Bots:</h3><ul>\n<li><a href=\"http://pythonforengineers.com/build-a-reddit-bot-part-1/\">Build a Reddit Bot</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=krTUf7BpTc0\">How to Make a Reddit Bot - YouTube</a> (video)</li>\n<li><a href=\"https://blog.hartleybrody.com/fb-messenger-bot/\">Build a Facebook Messenger Bot</a></li>\n<li><a href=\"https://pythontips.com/2017/04/13/making-a-reddit-facebook-messenger-bot/\">Making a Reddit + Facebook Messenger Bot</a></li>\n<li>How To Create a Telegram Bot Using Python<ul>\n<li><a href=\"https://khashtamov.com/en/how-to-create-a-telegram-bot-using-python/\">Part 1</a></li>\n<li><a href=\"https://khashtamov.com/en/how-to-deploy-telegram-bot-django/\">Part 2</a></li>\n</ul>\n</li>\n<li><a href=\"https://medium.freecodecamp.org/creating-a-twitter-bot-in-python-with-tweepy-ac524157a607\">Create a Twitter Bot In Python</a></li>\n</ul>\n<h3 id=\"Data-Science\"><a href=\"#Data-Science\" class=\"headerlink\" title=\"Data Science:\"></a>Data Science:</h3><ul>\n<li>Learn Python For Data Science by Doing Several Projects (video):<ul>\n<li><a href=\"https://www.youtube.com/watch?v=T5pRlIbr6gg\">Part 1: Introduction</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=o_OZdbCzHUA\">Part 2: Twitter Sentiment Analysis</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=9gBC9R-msAk&list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU&index=3\">Part 3: Recommendation Systems</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=SSu00IRRraY&index=4&list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU\">Part 4: Predicting Stock Prices</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=MrBzgvUNr4w&list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU&index=5\">Part 5: Deep Dream in TensorFlow</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=dSofAXnnFrY&index=6&list=PL2-dafEMk2A6QKz1mrk1uIGfHkC1zZ6UU\">Part 6: Genetic Algorithms</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Machine-Learning\"><a href=\"#Machine-Learning\" class=\"headerlink\" title=\"Machine Learning:\"></a>Machine Learning:</h3><ul>\n<li><a href=\"https://www.youtube.com/watch?v=uwwWVAgJBcM\">Write Linear Regression From Scratch in Python</a> (video)</li>\n<li><a href=\"https://machinelearningmastery.com/machine-learning-in-python-step-by-step/\">Step-By-Step Machine Learning In Python</a></li>\n<li><a href=\"https://medium.freecodecamp.org/using-machine-learning-to-predict-the-quality-of-wines-9e2e13d7480d\">Predict Quality Of Wine</a></li>\n<li><a href=\"https://towardsdatascience.com/solving-a-simple-classification-problem-with-python-fruits-lovers-edition-d20ab6b071d2\">Solving A Fruits Classification Problem</a></li>\n<li><a href=\"https://scikit-learn.org/stable/unsupervised_learning.html\">Learn Unsupervised Learning with Python</a></li>\n<li><a href=\"https://towardsdatascience.com/how-to-build-your-own-neural-network-from-scratch-in-python-68998a08e4f6\">Build Your Own Neural Net from Scratch in Python</a></li>\n<li><a href=\"https://medium.com/we-are-orb/linear-regression-in-python-without-scikit-learn-50aef4b8d122\">Linear Regression in Python without sklearn</a></li>\n<li><a href=\"https://medium.com/we-are-orb/multivariate-linear-regression-in-python-without-scikit-learn-7091b1d45905\">Multivariate Linear Regression without sklearn</a></li>\n<li><a href=\"https://towardsdatascience.com/how-to-build-a-simple-song-recommender-296fcbc8c85\">Music Recommender using KNN</a></li>\n<li>Find Similar Quora Questions-<ul>\n<li><a href=\"https://towardsdatascience.com/finding-similar-quora-questions-with-bow-tfidf-and-random-forest-c54ad88d1370\">Using BOW, TFIDF and Xgboost</a></li>\n<li><a href=\"https://towardsdatascience.com/finding-similar-quora-questions-with-word2vec-and-xgboost-1a19ad272c0d\">Using Word2Vec and Xgboost</a></li>\n</ul>\n</li>\n<li><a href=\"https://data-flair.training/blogs/advanced-python-project-detecting-fake-news/\">Detecting Fake News with Python and Machine Learning</a></li>\n</ul>\n<h3 id=\"OpenCV\"><a href=\"#OpenCV\" class=\"headerlink\" title=\"OpenCV:\"></a>OpenCV:</h3><ul>\n<li><a href=\"https://www.pyimagesearch.com/2014/09/01/build-kick-ass-mobile-document-scanner-just-5-minutes/\">Build A Document Scanner</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/02/26/face-detection-with-opencv-and-deep-learning/\">Build A Face Detector using OpenCV and Deep Learning</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLKHYJbyeQ1a0oGzgRXy-QwAN1tSV4XZxg\">Build fastest custom object Detection system yusing YOLOv3(video playlist)</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/06/18/face-recognition-with-opencv-python-and-deep-learning/\">Build a Face Recognition System using OpenCV, Python and Deep Learning</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/07/16/opencv-saliency-detection/\">Detect The Salient Features in an Image</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/05/21/an-opencv-barcode-and-qr-code-scanner-with-zbar/\">Build A Barcode Scanner</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/07/09/face-clustering-with-python/\">Learn Face Clustering with Python</a></li>\n<li><a href=\"https://www.pyimagesearch.com/wp-content/uploads/2014/11/opencv_crash_course_camshift.pdf\">Object Tracking with Camshift</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/09/03/semantic-segmentation-with-opencv-and-deep-learning/\">Semantic Segmentation with OpenCV and Deep Learning</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/08/20/opencv-text-detection-east-text-detector/\">Text Detection in Images and Videos</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/08/13/opencv-people-counter/\">People Counter using OpenCV</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/08/06/tracking-multiple-objects-with-opencv/\">Tracking Multiple Objects with OpenCV</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/08/27/neural-style-transfer-with-opencv/\">Neural Style Transfer with OpenCV</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/09/17/opencv-ocr-and-text-recognition-with-tesseract/\">OpenCV OCR and Text Recognition</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2017/02/20/text-skew-correction-opencv-python/\">Text Skew Correction Tutorial</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2017/04/03/facial-landmarks-dlib-opencv-python/\">Facial Landmark Detection Tutorial</a></li>\n<li><a href=\"https://www.learnopencv.com/deep-learning-based-object-detection-and-instance-segmentation-using-mask-r-cnn-in-opencv-python-c/\">Object Detection using Mask-R-CNN</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2015/05/04/target-acquired-finding-targets-in-drone-and-quadcopter-video-streams-using-python-and-opencv/\">Automatic Target Detection Tutorial</a></li>\n<li><a href=\"https://www.learnopencv.com/eigenface-using-opencv-c-python/\">EigenFaces using OpenCV</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/04/02/faster-facial-landmark-detector-with-dlib/\">Faster(5-point) Facial Landmark Detection Tutorial</a></li>\n<li><a href=\"https://www.learnopencv.com/hand-keypoint-detection-using-deep-learning-and-opencv/\">Hand Keypoint Detection</a></li>\n<li>Dlib Correlation Object Tracking -<ul>\n<li><a href=\"https://www.pyimagesearch.com/2018/10/22/object-tracking-with-dlib/\">Single Object Tracker</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/10/29/multi-object-tracking-with-dlib/\">Mutiple Object Tracker</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.pyimagesearch.com/2018/12/17/image-stitching-with-opencv-and-python/\">Image Stitching with OpenCV and Python</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/11/26/instance-segmentation-with-opencv/\">Instance Segmentation with OpenCV</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2020/05/04/covid-19-face-mask-detector-with-opencv-keras-tensorflow-and-deep-learning/\">Face mask detector</a></li>\n</ul>\n<h3 id=\"Deep-Learning\"><a href=\"#Deep-Learning\" class=\"headerlink\" title=\"Deep Learning:\"></a>Deep Learning:</h3><ul>\n<li><a href=\"http://danielnouri.org/notes/2014/12/17/using-convolutional-neural-nets-to-detect-facial-keypoints-tutorial/\">Using Convolutional Neural Nets to Detect Facial Keypoints</a></li>\n<li><a href=\"https://www.learnopencv.com/average-face-opencv-c-python-tutorial/\">Generate an Average Face using Python and OpenCV</a></li>\n<li><a href=\"https://medium.com/@ageitgey/how-to-break-a-captcha-system-in-15-minutes-with-machine-learning-dbebb035a710\">Break A Captcha System using CNNs</a></li>\n<li><a href=\"https://medium.com/google-cloud/keras-inception-v3-on-google-compute-engine-a54918b0058\">Use pre-trained Inception model to provide image predictions</a></li>\n<li><a href=\"https://hackernoon.com/deep-learning-cnns-in-tensorflow-with-gpus-cba6efe0acc2\">Create your first CNN</a></li>\n<li><a href=\"https://hackernoon.com/building-a-facial-recognition-pipeline-with-deep-learning-in-tensorflow-66e7645015b8\">Build A Facial Recognition Pipeline</a></li>\n<li><a href=\"https://medium.freecodecamp.org/building-an-image-caption-generator-with-deep-learning-in-tensorflow-a142722e9b1f\">Build An Image Caption Generator</a></li>\n<li><a href=\"https://medium.freecodecamp.org/making-your-own-face-recognition-system-29a8e728107c\">Make your Own Face Recognition System</a></li>\n<li><a href=\"https://towardsdatascience.com/how-i-trained-a-language-detection-ai-in-20-minutes-with-a-97-accuracy-fdeca0fb7724\">Train a Language Detection AI in 20 minutes</a></li>\n<li><a href=\"https://towardsdatascience.com/object-detection-with-neural-networks-a4e2c46b4491\">Object Detection With Neural Networks</a></li>\n<li>Learn Twitter Sentiment Analysis -<ul>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-bb5b01ebad90\">Part I - Data Cleaning</a></li>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-2-333514854913\">Part II - EDA, Data Visualisation</a></li>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-3-zipfs-law-data-visualisation-fc9eadda71e7\">Part III - Zipf‚Äôs Law, Data Visualisation</a></li>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-4-count-vectorizer-b3f4944e51b5\">Part IV - Feature Extraction(count vectoriser)</a></li>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-5-50b4e87d9bdd\">Part V - Feature Extraction(Tfidf vectoriser)</a></li>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-6-doc2vec-603f11832504\">Part VI - Doc2Vec</a></li>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-7-phrase-modeling-doc2vec-592a8a996867\">Part VII - Phrase Modeling + Doc2Vec</a></li>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-8-dimensionality-reduction-chi2-pca-c6d06fb3fcf3\">Part VIII - Dimensionality Reduction</a></li>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-9-neural-networks-with-tfidf-vectors-using-d0b4af6be6d7\">Part IX - Neural Nets with Tfdif vectors</a></li>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-10-neural-network-with-a6441269aa3c\">Part X - Neural Nets with word2vec&#x2F;doc2vec</a></li>\n<li><a href=\"https://towardsdatascience.com/another-twitter-sentiment-analysis-with-python-part-11-cnn-word2vec-41f5e28eda74\">Part XI - CNN with Word2Vec</a></li>\n</ul>\n</li>\n<li><a href=\"https://becominghuman.ai/transfer-learning-retraining-inception-v3-for-custom-image-classification-2820f653c557\">Use Transfer Learning for custom image classification</a></li>\n<li><a href=\"https://iamtrask.github.io/2015/07/12/basic-python-network/\">Learn to Code a simple Neural Network in 11 lines of Python</a></li>\n<li><a href=\"https://iamtrask.github.io/2015/07/27/python-network-part2/\">Build a Neural Network using Gradient Descent Approach</a></li>\n<li><a href=\"https://heartbeat.fritz.ai/how-to-train-a-keras-model-to-generate-colors-3bc79e54971b\">Train a Keras Model To Generate Colors</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/09/10/keras-tutorial-how-to-get-started-with-keras-deep-learning-and-python/\">Get Started with Keras on a Custom Dataset</a></li>\n<li><a href=\"https://nicholastsmith.wordpress.com/2016/02/18/eigenfaces-versus-fisherfaces-on-the-faces94-database-with-scikit-learn/\">Use EigenFaces and FisherFaces on Faces94 dataset</a></li>\n<li><a href=\"https://medium.com/@lvarruda/how-to-get-top-2-position-on-kaggles-mnist-digit-recognizer-48185d80a2d4\">Kaggle MNIST Digit Recognizer Tutorial</a></li>\n<li><a href=\"https://medium.com/tensorflow/hello-deep-learning-fashion-mnist-with-keras-50fcff8cd74a\">Fashion MNIST tutorial with tf.keras</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/10/15/deep-learning-hydroponics-and-medical-marijuana/\">CNN using Keras to automatically classify root health</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/10/08/keras-vs-tensorflow-which-one-is-better-and-which-one-should-i-learn/\">Keras vs Tensorflow</a></li>\n<li><a href=\"https://www.pyimagesearch.com/2018/12/03/deep-learning-and-medical-image-analysis-with-keras/\">Deep Learning and Medical Image Analysis for Malaria Detection</a></li>\n<li><a href=\"https://towardsdatascience.com/transfer-learning-for-image-classification-using-keras-c47ccf09c8c8\">Transfer Learning for Image Classification using Keras</a></li>\n<li><a href=\"https://github.com/kylemcdonald/SmileCNN\">Code a Smile Classifier using CNNS in Python</a></li>\n<li><a href=\"https://towardsdatascience.com/natural-language-processing-count-vectorization-with-scikit-learn-e7804269bb5e\">Natural Language Processing using scikit-learn</a></li>\n<li><a href=\"https://towardsdatascience.com/ai-generates-taylor-swifts-song-lyrics-6fd92a03ef7e\">Code a Taylor Swift Lyrics Generator</a></li>\n<li><a href=\"https://towardsdatascience.com/how-i-built-a-face-mask-detector-for-covid-19-using-pytorch-lightning-67eb3752fd61\">Mask detection using PyTorch Lightning</a></li>\n</ul>\n<h3 id=\"Miscellaneous-1\"><a href=\"#Miscellaneous-1\" class=\"headerlink\" title=\"Miscellaneous:\"></a>Miscellaneous:</h3><ul>\n<li><a href=\"https://ruslanspivak.com/lsbasi-part1/\">Build a Simple Interpreter</a></li>\n<li><a href=\"https://hackernoon.com/learn-blockchains-by-building-one-117428612f46\">Build a Simple Blockchain in Python</a></li>\n<li><a href=\"https://jeffknupp.com/blog/2014/09/01/what-is-a-nosql-database-learn-by-writing-one-in-python/\">Write a NoSQL Database in Python</a></li>\n<li><a href=\"https://hackernoon.com/building-a-gas-pump-scanner-with-opencv-python-ios-116fe6c9ae8b\">Building a Gas Pump Scanner with OpenCV&#x2F;Python&#x2F;iOS</a></li>\n<li><a href=\"https://codequs.com/p/S14jQ5UyG/build-a-distributed-streaming-system-with-apache-kafka-and-python\">Build a Distributed Streaming System with Python and Kafka</a></li>\n<li><a href=\"https://csl.name/post/python-jit/\">Writing a basic x86-64 JIT compiler from scratch in stock Python</a></li>\n<li>Making a low level (Linux) debugger<ul>\n<li><a href=\"https://blog.asrpo.com/making_a_low_level_debugger\">Part 1</a></li>\n<li><a href=\"https://blog.asrpo.com/making_a_low_level_debugger_part_2\">Part 2: C</a></li>\n</ul>\n</li>\n<li>Implementing a Search Engine<ul>\n<li><a href=\"http://www.ardendertat.com/2011/05/30/how-to-implement-a-search-engine-part-1-create-index/\">Part 1</a></li>\n<li><a href=\"http://www.ardendertat.com/2011/05/31/how-to-implement-a-search-engine-part-2-query-index/\">Part 2</a></li>\n<li><a href=\"http://www.ardendertat.com/2011/07/17/how-to-implement-a-search-engine-part-3-ranking-tf-idf/\">Part 3</a></li>\n</ul>\n</li>\n<li><a href=\"https://robertheaton.com/2018/07/20/project-2-game-of-life/\">Build the Game of Life</a></li>\n<li><a href=\"https://robertheaton.com/2018/06/12/programming-projects-for-advanced-beginners-ascii-art/\">Create terminal ASCII art</a></li>\n<li><a href=\"https://robertheaton.com/2018/10/09/programming-projects-for-advanced-beginners-3-a/\">Write a Tic-Tac-Toe AI</a></li>\n<li><a href=\"https://robertheaton.com/2018/11/03/programming-project-4-photomosaics/\">Create photomosaic art</a></li>\n<li><a href=\"https://robertheaton.com/2018/12/02/programming-project-5-snake/\">Build the game ‚ÄúSnake‚Äù in the terminal</a></li>\n<li><a href=\"https://wyag.thb.lt/\">Write yourself a Git</a></li>\n<li><a href=\"https://www.aosabook.org/en/500L/a-python-interpreter-written-in-python.html\">A Python implementation of a Python bytecode runner</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/voice-assistant-using-python/\">Create a Voice assistant using Python</a></li>\n</ul>\n<h2 id=\"Go\"><a href=\"#Go\" class=\"headerlink\" title=\"Go:\"></a>Go:</h2><ul>\n<li><a href=\"https://www.thepolyglotdeveloper.com/2016/12/create-real-time-chat-app-golang-angular-2-websockets/\">Create a Real Time Chat App with Golang, Angular 2, and WebSocket</a></li>\n<li><a href=\"https://semaphoreci.com/community/tutorials/building-go-web-applications-and-microservices-using-gin\">Building Go Web Applications and Microservices Using Gin</a></li>\n<li><a href=\"https://semaphoreci.com/community/tutorials/how-to-use-godog-for-behavior-driven-development-in-go\">How to Use Godog for Behavior-driven Development in Go</a></li>\n<li>Building Blockchain in Go<ul>\n<li><a href=\"https://jeiwan.net/posts/building-blockchain-in-go-part-1/\">Part 1: Basic Prototype</a></li>\n<li><a href=\"https://jeiwan.net/posts/building-blockchain-in-go-part-2/\">Part 2: Proof of Work</a></li>\n<li><a href=\"https://jeiwan.net/posts/building-blockchain-in-go-part-3/\">Part 3: Persistence and CLI</a></li>\n<li><a href=\"https://jeiwan.net/posts/building-blockchain-in-go-part-4/\">Part 4: Transactions 1</a></li>\n<li><a href=\"https://jeiwan.net/posts/building-blockchain-in-go-part-5/\">Part 5: Address</a></li>\n<li><a href=\"https://jeiwan.net/posts/building-blockchain-in-go-part-6/\">Part 6: Transactions 2</a></li>\n<li><a href=\"https://jeiwan.net/posts/building-blockchain-in-go-part-7/\">Part 7: Network</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=8fi7uSYlOdc\">Building a container from scratch in Go - Liz Rice (Microscaling Systems)(video)</a></li>\n<li><a href=\"https://astaxie.gitbooks.io/build-web-application-with-golang/content/en/\">Build Web Application with GoLang</a></li>\n<li>Building a Chat Application in Go with ReactJS<ul>\n<li><a href=\"https://tutorialedge.net/projects/chat-system-in-go-and-react/part-1-initial-setup/\">Part 1: Initial Setup</a></li>\n<li><a href=\"https://tutorialedge.net/projects/chat-system-in-go-and-react/part-2-simple-communication/\">Part 2: Simple Communication</a></li>\n<li><a href=\"https://tutorialedge.net/projects/chat-system-in-go-and-react/part-3-designing-our-frontend/\">Part 3: Designing our Frontend</a></li>\n<li><a href=\"https://tutorialedge.net/projects/chat-system-in-go-and-react/part-4-handling-multiple-clients/\">Part 4: Handling Multiple Clients</a></li>\n<li><a href=\"https://tutorialedge.net/projects/chat-system-in-go-and-react/part-5-improved-frontend/\">Part 5: Improving the Frontend</a></li>\n<li><a href=\"https://tutorialedge.net/projects/chat-system-in-go-and-react/part-6-dockerizing-your-backend/\">Part 6: Dockerizing your Backend</a></li>\n</ul>\n</li>\n<li><a href=\"https://tutorialedge.net/golang/go-webassembly-tutorial/\">Go WebAssembly Tutorial - Building a Calculator Tutorial</a></li>\n<li>REST Servers in Go<ul>\n<li><a href=\"https://eli.thegreenplace.net/2021/rest-servers-in-go-part-1-standard-library/\">Part 1 - standard library</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2021/rest-servers-in-go-part-2-using-a-router-package/\">Part 2 - using a router package</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2021/rest-servers-in-go-part-3-using-a-web-framework/\">Part 3 - using a web framework</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2021/rest-servers-in-go-part-4-using-openapi-and-swagger/\">Part 4 - using OpenAPI and Swagger</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2021/rest-servers-in-go-part-5-middleware/\">Part 5 - middleware</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2021/rest-servers-in-go-part-6-authentication/\">Part 6 - authentication</a></li>\n<li><a href=\"https://eli.thegreenplace.net/2021/rest-servers-in-go-part-7-graphql/\">Part 7 - GraphQL</a></li>\n</ul>\n</li>\n<li>Let‚Äôs build a URL shortener in Go - with Gin &amp; Redis<ul>\n<li><a href=\"https://www.eddywm.com/lets-build-a-url-shortener-in-go/\">Part 1 - Project setup</a></li>\n<li><a href=\"https://www.eddywm.com/lets-build-a-url-shortener-in-go-with-redis-part-2-storage-layer/\">Part 2 - Storage Layer</a></li>\n<li><a href=\"https://www.eddywm.com/lets-build-a-url-shortener-in-go-part-3-short-link-generation/\">Part 3 - Short Link Generator</a></li>\n<li><a href=\"https://www.eddywm.com/lets-build-a-url-shortener-in-go-part-iv-forwarding/\">Part 4 - Forwarding</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.youtube.com/watch?v=Sphme0BqJiY\">Building a TCP Chat in Go(video)</a></li>\n<li><a href=\"https://blog.jse.li/posts/torrent/\">Building a BitTorrent client from the ground up in Go</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=rx6CPDK_5mU&list=PLy_6D98if3ULEtXtNSY_2qN21VCKgoQAE\">REST API masterclass with Go, PostgreSQL and Docker(video playlist)<code>in progress</code></a></li>\n</ul>\n<h2 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP:\"></a>PHP:</h2><ul>\n<li><a href=\"https://www.youtube.com/playlist?list=PLwAKR305CRO-Q90J---jXVzbOd4CDRbVx\">How To Build A Blog With Laravel</a> (video)</li>\n<li><a href=\"http://ilovephp.jondh.me.uk/en/tutorial/make-your-own-blog\">Make Your Own Blog (in Pure PHP)</a></li>\n<li><a href=\"https://www.silverstripe.org/learn/lessons/\">Build A Real Estate Website Example with SilverStripe</a></li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLXsbBbd36_uVjOFH_P25__XAyGsohXWlv\">Building Realtime Chat App with Laravel 5.4 and VueJS</a> (video)</li>\n<li><a href=\"https://www.youtube.com/playlist?list=PLfdtiltiRHWGGxaR6uFtwZnnbcXqyq8JD\">Build A Social Network: Laravel 5 - Youtube</a> (video)</li>\n<li>Build a full-featured multi-tenant app with Laravel<ul>\n<li><a href=\"https://medium.com/@ashokgelal/writing-a-full-featured-multi-tenant-laravel-app-from-scratch-a0e1a7350d9d\">Part 0: Introduction</a></li>\n<li><a href=\"https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-1-4049a3cc229d\">Part 1: Setup</a></li>\n<li><a href=\"https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-2-roles-and-permissions-d9a5bfe5d525\">Part 2: Roles and Permissinos</a></li>\n<li><a href=\"https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-3-invitation-c982dca55eb9\">Part 3: Invitation</a></li>\n<li><a href=\"https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-4-tenancy-aware-authentication-e0ee37270bc8\">Part 4: Authentication</a></li>\n<li><a href=\"https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-2-unit-tests-96d6dfbf0617\">Part 5: Testing</a></li>\n<li><a href=\"https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-5-user-profile-5c3d0c655f3a\">Part 6: User Profile</a></li>\n<li><a href=\"https://medium.com/@ashokgelal/a-full-featured-multi-tenant-app-with-laravel-part-7-deployment-40bb3c895627\">Part 7: Deployment</a></li>\n</ul>\n</li>\n<li><a href=\"https://www.codewall.co.uk/laravel-crud-demo-with-resource-controller-tutorial/\">Build a Laravel CRUD Application From Scratch</a></li>\n</ul>\n<h2 id=\"OCaml\"><a href=\"#OCaml\" class=\"headerlink\" title=\"OCaml:\"></a>OCaml:</h2><ul>\n<li><a href=\"https://llvm.org/docs/tutorial/#kaleidoscope-implementing-a-language-with-llvm-in-objective-caml\">Implement a Language with LLVM in OCaml</a></li>\n</ul>\n<h2 id=\"Ruby\"><a href=\"#Ruby\" class=\"headerlink\" title=\"Ruby:\"></a>Ruby:</h2><ul>\n<li><a href=\"https://medium.com/geckoboard-under-the-hood/how-to-build-a-network-stack-in-ruby-f73aeb1b661b\">Build a Network Stack with Ruby</a></li>\n<li>Build your own Redis<ul>\n<li><a href=\"https://rohitpaulk.com/articles/redis-0\">Part 0: Introduction</a></li>\n<li><a href=\"https://rohitpaulk.com/articles/redis-1\">Part 1: Barebones TCP Server</a></li>\n<li><a href=\"https://rohitpaulk.com/articles/redis-2\">Part 2: PING &lt;-&gt; PONG</a></li>\n<li><a href=\"https://rohitpaulk.com/articles/redis-3\">Part 3: Concurrent Clients</a></li>\n<li><a href=\"https://rohitpaulk.com/articles/redis-4\">Part 4: ECHO</a></li>\n</ul>\n</li>\n<li><a href=\"https://thoughtbot.com/blog/rebuilding-git-in-ruby\">Rebuilding Git in Ruby</a></li>\n</ul>\n<h3 id=\"Ruby-on-Rails\"><a href=\"#Ruby-on-Rails\" class=\"headerlink\" title=\"Ruby on Rails:\"></a>Ruby on Rails:</h3><ul>\n<li><a href=\"https://www.railstutorial.org/book\">The Ruby on Rails Tutorial</a></li>\n<li><a href=\"https://www.dropbox.com/s/9vq430e9s3q7pu8/Let%27s%20Build%20Instagram%20with%20Ruby%20on%20Rails%20-%20Free%20Edition.pdf?dl=0\">Build Instagram From Scratch with Ruby on Rails</a></li>\n<li><a href=\"https://medium.com/rails-ember-beyond/how-to-build-a-social-network-using-rails-eb31da569233\">Build a Social Network using Rails</a></li>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-build-a-ruby-on-rails-application\">How To Build a Ruby on Rails Application</a></li>\n</ul>\n<h2 id=\"Haskell\"><a href=\"#Haskell\" class=\"headerlink\" title=\"Haskell:\"></a>Haskell:</h2><ul>\n<li><a href=\"http://dev.stephendiehl.com/fun/\">Write You a Haskell - Build a modern functional compiler</a></li>\n<li><a href=\"https://en.wikibooks.org/wiki/Write_Yourself_a_Scheme_in_48_Hours\">Write Yourself a Scheme in 48 hours</a></li>\n<li><a href=\"https://github.com/write-you-a-scheme-v2/scheme\">Write You A Scheme, Version 2</a></li>\n<li><a href=\"https://wiki.haskell.org/Roll_your_own_IRC_bot\">Roll Your Own IRC Bot</a></li>\n<li><a href=\"https://lettier.github.io/posts/2016-08-15-making-movie-monad.html\">Making Movie Monad</a></li>\n<li><a href=\"http://adit.io/posts/2013-04-15-making-a-website-with-haskell.html\">Making a Website with Haskell <strong>(outdated)</strong></a></li>\n</ul>\n<h2 id=\"R\"><a href=\"#R\" class=\"headerlink\" title=\"R:\"></a>R:</h2><ul>\n<li><a href=\"http://shiny.rstudio.com/tutorial/\">Build Web Apps with Shiny</a></li>\n<li><a href=\"https://towardsdatascience.com/build-a-cryptocurrency-trading-bot-with-r-1445c429e1b1\">Build A Cryptocurrency Bot</a></li>\n<li><a href=\"https://towardsdatascience.com/association-rule-mining-in-r-ddf2d044ae50\">Learn Associate Rule Mining in R</a></li>\n</ul>\n<h2 id=\"Rust\"><a href=\"#Rust\" class=\"headerlink\" title=\"Rust:\"></a>Rust:</h2><ul>\n<li>A Simple Web App in Rust<ul>\n<li><a href=\"http://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-1/\">Part 1</a></li>\n<li><a href=\"http://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-2a/\">Part 2a</a></li>\n<li><a href=\"http://joelmccracken.github.io/entries/a-simple-web-app-in-rust-pt-2b/\">Part 2b</a></li>\n</ul>\n</li>\n<li><a href=\"https://os.phil-opp.com/\">Write an OS in pure Rust</a></li>\n<li><a href=\"https://limpet.net/mbrubeck/2014/08/08/toy-layout-engine-1.html\">Build a browser engine in Rust</a></li>\n<li><a href=\"http://www.goldsborough.me/rust/web/tutorial/2018/01/20/17-01-11-writing_a_microservice_in_rust/\">Write a Microservice in Rust</a></li>\n<li><a href=\"http://cglab.ca/~abeinges/blah/too-many-lists/book/README.html\">Learning Rust with Too Many Linked Lists</a></li>\n<li>Rust in Detail: Writing Scalable Chat Service from Scratch<ul>\n<li><a href=\"https://nbaksalyar.github.io/2015/07/10/writing-chat-in-rust.html\">Part 1: Implementing WebSocket. Introduction.</a></li>\n<li><a href=\"https://nbaksalyar.github.io/2015/11/09/rust-in-detail-2.html\">Part 2: Sending and Receiving Messages</a></li>\n</ul>\n</li>\n<li><a href=\"https://aimlesslygoingforward.com/blog/2019/02/09/writing-a-rust-roguelike-for-the-desktop-and-the-web/\">Writing a Rust Roguelike for the Desktop and the Web</a></li>\n<li><a href=\"http://www.sheshbabu.com/posts/rust-wasm-yew-single-page-application/\">Single Page Applications using Rust</a></li>\n<li><a href=\"https://bugzmanov.github.io/nes_ebook/\">Writing NES Emulator in Rust</a></li>\n<li>Create a simulation of evolution using neural network and genetic algorithm, and compile the application to WebAssembly<ul>\n<li><a href=\"https://pwy.io/en/posts/learning-to-fly-pt1/\">Part 1</a></li>\n<li><a href=\"https://pwy.io/en/posts/learning-to-fly-pt2/\">Part 2</a></li>\n<li><a href=\"https://pwy.io/en/posts/learning-to-fly-pt3/\">Part 3</a></li>\n<li><a href=\"https://pwy.io/en/posts/learning-to-fly-pt4/\">Part 4</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Scala\"><a href=\"#Scala\" class=\"headerlink\" title=\"Scala:\"></a>Scala:</h2><ul>\n<li><a href=\"https://www.freecodecamp.org/news/how-to-build-a-simple-actor-based-blockchain-aac1e996c177/\">Simple actor-based blockchain</a></li>\n<li><a href=\"https://rcoh.svbtle.com/no-magic-regular-expressions\">No Magic: Regular Expressions</a></li>\n</ul>\n<h2 id=\"Swift\"><a href=\"#Swift\" class=\"headerlink\" title=\"Swift:\"></a>Swift:</h2><ul>\n<li><a href=\"https://www.hackingwithswift.com/read\">Hacking with Swift - Learn Swift by doing 39 projects</a></li>\n<li><a href=\"https://github.com/nicklockwood/RetroRampage\">Retro first-person shooter from scratch</a></li>\n</ul>\n<h2 id=\"Additional-Resources\"><a href=\"#Additional-Resources\" class=\"headerlink\" title=\"Additional Resources\"></a>Additional Resources</h2><ul>\n<li><a href=\"https://github.com/markerikson/react-redux-links\">React Redux Links</a></li>\n<li><a href=\"https://www.udemy.com/\">Udemy.com</a></li>\n<li><a href=\"https://www.fullstackpython.com/\">Full Stack Python</a></li>\n<li><a href=\"https://nodeschool.io/\">Node School</a></li>\n<li><a href=\"https://scotch.io/\">ScotchIO</a></li>\n<li><a href=\"http://www.exercism.io/\">Exercism</a></li>\n<li><a href=\"http://www.egghead.io/\">Egghead.io</a></li>\n<li><a href=\"http://mherman.org/\">Michael Herman‚Äôs Blog</a></li>\n<li><a href=\"http://thinkster.io/\">Thinkster.io</a></li>\n<li><a href=\"https://enlight.nyc/\">Enlight</a></li>\n<li><a href=\"https://hackclub.com/workshops/\">Hack Club Workshops</a></li>\n<li><a href=\"https://codecrafters.io/\">CodeCrafters</a></li>\n</ul>\n",
            "tags": [
                "projects",
                "tutorials",
                "list-of-project-based-tutorials",
                "curated-list"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/CPP-Data-Types---GFG/",
            "url": "https://samirpaul.in/posts/CPP-Data-Types---GFG/",
            "title": "C++ Data Types   GFG",
            "date_published": "2023-08-06T12:22:21.715Z",
            "content_html": "<h1 id=\"C-Data-Types\"><a href=\"#C-Data-Types\" class=\"headerlink\" title=\"C++ Data Types\"></a>C++ Data Types</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Read a value and store it in the appropriate C++ Data Type.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input: </strong>\n2 h 2.555\n<strong>Output:</strong>\n2\nh\n2.555 </span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">The three inputs are printed in order.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYour task is to complete each of the given functions&nbsp;<br>\n<strong>cppIntType() </strong>: read an integer input, store it in appropriate data type and return it.&nbsp;<br>\n<strong>cppCharType() :&nbsp;</strong>read a character&nbsp;input, store it in appropriate data type and return it.&nbsp;<strong>&nbsp;<br>\ncppFloatType() :&nbsp;</strong>read a float&nbsp;input, store it in appropriate data type and return it.&nbsp;</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br>\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">cppIntType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"type\">int</span> a;</span><br><span class=\"line\">        cin&gt;&gt;a;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">cppCharType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"type\">char</span> b;</span><br><span class=\"line\">        cin&gt;&gt;b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">cppFloatType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"type\">float</span> c;</span><br><span class=\"line\">        cin&gt;&gt;c;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">cppIntType</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">cppCharType</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">cppFloatType</span>() &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/CPP-Strings---GFG/",
            "url": "https://samirpaul.in/posts/CPP-Strings---GFG/",
            "title": "C++ Strings   GFG",
            "date_published": "2023-08-06T12:22:21.715Z",
            "content_html": "<h1 id=\"C-Strings\"><a href=\"#C-Strings\" class=\"headerlink\" title=\"C++ Strings\"></a>C++ Strings</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given two strings&nbsp; S1 and S2 .&nbsp;You have to concatenate both the strings and print the concatenated string.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nS1 = \"Geeksfor\"\nS2 = \"Geeks\"\n<strong>Output:</strong> GeeksforGeeks\n<strong>Explanation: </strong>Combined \"Geeksfor\" and \"Geeks\"</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nS1 = \"Practice\"\nS2 = \"Hard\"\n<strong>Output:</strong> PracticeHard\n<strong>Explanation: </strong>Combined \"Practice\" and \"Hard\"</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br>\nYou dont need to read input or print anything. Complete the function <strong>conCat()</strong>&nbsp;which accepts two strings S1 and S2 as input parameter and returns concatenated string.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(|S1| + |S2|) .<br>\n<strong>Expected Auxiliary Space: </strong>O(|S1| + |S2|) .<br>\nwhere N is the length of a&nbsp;String</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= |S1| , |S2|&nbsp;&lt;= 10<sup>5</sup></span><br>\n<span style=\"font-size:18px\">|S| denotes the length of the string S.</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">conCat</span><span class=\"params\">(string a , string b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">conCat</span>(a,b)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">conCat</span><span class=\"params\">(string s1 , string s2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code here.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1+s2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/CPP-if-else-(Decision-Making)---GFG/",
            "url": "https://samirpaul.in/posts/CPP-if-else-(Decision-Making)---GFG/",
            "title": "C++ if else (Decision Making)   GFG",
            "date_published": "2023-08-06T12:22:21.715Z",
            "content_html": "<h1 id=\"C-if-else-Decision-Making\"><a href=\"#C-if-else-Decision-Making\" class=\"headerlink\" title=\"C++ if-else (Decision Making)\"></a>C++ if-else (Decision Making)</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an integer N.&nbsp;Your task is to check if the integer is greater than, less than or equal to 5.<br>\nIf the integer is greater than 5, then print \"Greater than 5\" (without quotes).<br>\nIf the integer is less than 5, then print \"Less than 5\".<br>\nIf the integer is equal to 5, then print \"Equal&nbsp;to 5\".</span><br>\n&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:</span></strong>\n<span style=\"font-size:18px\">N = 8</span>\n<strong><span style=\"font-size:18px\">Output:</span></strong>\n<span style=\"font-size:18px\">Greater than 5</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\">N = 4</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">Less than 5</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\n\n<p><span style=\"font-size:18px\">You don't need to read input or print anything. Your task is to complete the function compareFive() which takes the number N and returns&nbsp;\"Greater than 5\" if the integer is greater than 5 or \"Less than 5\" if the integer is less than 5 otherwise print \"Equal&nbsp;to 5\" if the integer equals to 5.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Note :-&nbsp;</span></strong><span style=\"font-size:18px\">Do not print the next line after the result.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br>\n<strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= N &lt;= 100000</span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;   </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">compareFive</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">5</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Greater than 5&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">5</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Less than 5&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( n == <span class=\"number\">5</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Equal to 5&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        cin &gt;&gt; N;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">compareFive</span>(N) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/CPP-Switch-Case-Statement---GFG/",
            "url": "https://samirpaul.in/posts/CPP-Switch-Case-Statement---GFG/",
            "title": "C++ Switch Case Statement   GFG",
            "date_published": "2023-08-06T12:22:21.700Z",
            "content_html": "<h1 id=\"C-Switch-Case-Statement\"><a href=\"#C-Switch-Case-Statement\" class=\"headerlink\" title=\"C++ Switch Case Statement\"></a>C++ Switch Case Statement</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a number N, if the number is between 1 and 10 both inclusive then return the number in words (Lower case English Alphabets) otherwise return&nbsp;\"not in range\".</span></p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:</span></strong>\n<span style=\"font-size:18px\">5</span>\n<strong><span style=\"font-size:18px\">Output:</span></strong>\n<span style=\"font-size:18px\">five</span></pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:</span></strong>\n<span style=\"font-size:18px\">11</span>\n<strong><span style=\"font-size:18px\">Output:</span></strong>\n<span style=\"font-size:18px\">not in range</span></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\n\n<p><span style=\"font-size:18px\">You don't need to read input or print anything. Your task is to complete the function isInRange() which takes an integer and&nbsp;if the number is between 1 and 10 both inclusive then return the number in words otherwise return&nbsp;\"not in range\".</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br>\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\n\n<p><span style=\"font-size:18px\">1&lt;=N&lt;=10000</span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;   </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">isInRange</span><span class=\"params\">(<span class=\"type\">int</span> N)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here </span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(N)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;one&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span>  <span class=\"string\">&quot;two&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;three&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;four&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;five&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">6</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;six&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">7</span> : </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;seven&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">8</span>: </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;eight&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;nine&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;ten&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;not in range&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        cin &gt;&gt; N;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">isInRange</span>(N) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1084-sales-analysis-iii/",
            "url": "https://samirpaul.in/posts/1084-sales-analysis-iii/",
            "title": "1084 sales analysis iii",
            "date_published": "2023-08-06T07:08:14.516Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/sales-analysis-iii/\">1084. Sales Analysis III</a></h2><h3>Easy</h3><hr><div class=\"sql-schema-wrapper__3VBi\"><a class=\"sql-schema-link__3cEg\">SQL Schema<svg viewBox=\"0 0 24 24\" width=\"1em\" height=\"1em\" class=\"icon__1Md2\"><path fill-rule=\"evenodd\" d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path></svg></a></div><div><p>Table: <code>Product</code></p>\n\n<pre>+--------------+---------+\n| Column Name  | Type    |\n+--------------+---------+\n| product_id   | int     |\n| product_name | varchar |\n| unit_price   | int     |\n+--------------+---------+\nproduct_id is the primary key of this table.\nEach row of this table indicates the name and the price of each product.\n</pre>\n\n<p>Table: <code>Sales</code></p>\n\n<pre>+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| seller_id   | int     |\n| product_id  | int     |\n| buyer_id    | int     |\n| sale_date   | date    |\n| quantity    | int     |\n| price       | int     |\n+-------------+---------+\nThis table has no primary key, it can have repeated rows.\nproduct_id is a foreign key to the Product table.\nEach row of this table contains some information about one sale.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write an SQL query that reports the <strong>products</strong> that were <strong>only</strong> sold in the first quarter of <code>2019</code>. That is, between <code>2019-01-01</code> and <code>2019-03-31</code> inclusive.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> \nProduct table:\n+------------+--------------+------------+\n| product_id | product_name | unit_price |\n+------------+--------------+------------+\n| 1          | S8           | 1000       |\n| 2          | G4           | 800        |\n| 3          | iPhone       | 1400       |\n+------------+--------------+------------+\nSales table:\n+-----------+------------+----------+------------+----------+-------+\n| seller_id | product_id | buyer_id | sale_date  | quantity | price |\n+-----------+------------+----------+------------+----------+-------+\n| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |\n| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |\n| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |\n| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |\n+-----------+------------+----------+------------+----------+-------+\n<strong>Output:</strong> \n+-------------+--------------+\n| product_id  | product_name |\n+-------------+--------------+\n| 1           | S8           |\n+-------------+--------------+\n<strong>Explanation:</strong> \nThe product with id 1 was only sold in the spring of 2019.\nThe product with id 2 was sold in the spring of 2019 but was also sold after the spring of 2019.\nThe product with id 3 was sold after spring 2019.\nWe return only product 1 as it is the product that was only sold in the spring of 2019.\n</pre>\n</div>\n\n<hr>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> p.product_id, p.product_name </span><br><span class=\"line\"><span class=\"keyword\">from</span> product <span class=\"keyword\">as</span> p <span class=\"keyword\">inner</span> <span class=\"keyword\">join</span> sales <span class=\"keyword\">as</span> s</span><br><span class=\"line\"><span class=\"keyword\">on</span> p.product_id <span class=\"operator\">=</span> s.product_id <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> product_id <span class=\"keyword\">having</span></span><br><span class=\"line\"><span class=\"string\">&#x27;2019-01-01&#x27;</span> <span class=\"operator\">&lt;=</span> <span class=\"built_in\">min</span>(sale_date) <span class=\"keyword\">and</span> <span class=\"built_in\">max</span>(sale_date) <span class=\"operator\">&lt;=</span> <span class=\"string\">&#x27;2019-03-31&#x27;</span>;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1092-shortest-common-supersequence/",
            "url": "https://samirpaul.in/posts/1092-shortest-common-supersequence/",
            "title": "1092 shortest common supersequence",
            "date_published": "2023-08-06T07:08:14.516Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/shortest-common-supersequence/\">1092. Shortest Common Supersequence </a></h2><h3>Hard</h3><hr><div><p>Given two strings <code>str1</code> and <code>str2</code>, return <em>the shortest string that has both </em><code>str1</code><em> and </em><code>str2</code><em> as <strong>subsequences</strong></em>. If there are multiple valid strings, return <strong>any</strong> of them.</p>\n\n<p>A string <code>s</code> is a <strong>subsequence</strong> of string <code>t</code> if deleting some number of characters from <code>t</code> (possibly <code>0</code>) results in the string <code>s</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> str1 = \"abac\", str2 = \"cab\"\n<strong>Output:</strong> \"cabac\"\n<strong>Explanation:</strong> \nstr1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\nstr2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\nThe answer provided is the shortest such string that satisfies these properties.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> str1 = \"aaaaaaaa\", str2 = \"aaaaaaaa\"\n<strong>Output:</strong> \"aaaaaaaa\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li>\n    <li><code>str1</code> and <code>str2</code> consist of lowercase English letters.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">shortestCommonSupersequence</span>(<span class=\"params\">self, str1: <span class=\"built_in\">str</span>, str2: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">str</span>:</span><br><span class=\"line\">        x = str1; y = str2</span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>]*(<span class=\"built_in\">len</span>(y)+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(x)+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(x)+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(y)+<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> x[i-<span class=\"number\">1</span>] == y[j-<span class=\"number\">1</span>]:</span><br><span class=\"line\">                    dp[i][j] = <span class=\"number\">1</span> + dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][j] = <span class=\"built_in\">max</span>(dp[i-<span class=\"number\">1</span>][j], dp[i][j-<span class=\"number\">1</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        res = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        i = <span class=\"built_in\">len</span>(x); j = <span class=\"built_in\">len</span>(y)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &gt; <span class=\"number\">0</span> <span class=\"keyword\">and</span> j &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> x[i-<span class=\"number\">1</span>] == y[j-<span class=\"number\">1</span>]:</span><br><span class=\"line\">                res += x[i-<span class=\"number\">1</span>]</span><br><span class=\"line\">                i -= <span class=\"number\">1</span></span><br><span class=\"line\">                j -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">elif</span> dp[i-<span class=\"number\">1</span>][j] &gt;= dp[i][j-<span class=\"number\">1</span>]:</span><br><span class=\"line\">                res += x[i-<span class=\"number\">1</span>]</span><br><span class=\"line\">                i -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                res += y[j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                j -= <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            res += x[i-<span class=\"number\">1</span>]</span><br><span class=\"line\">            i -= <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">            res += y[j-<span class=\"number\">1</span>]</span><br><span class=\"line\">            j -= <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res[::-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1041-robot-bounded-in-circle/",
            "url": "https://samirpaul.in/posts/1041-robot-bounded-in-circle/",
            "title": "1041 robot bounded in circle",
            "date_published": "2023-08-06T07:08:14.485Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/robot-bounded-in-circle/\">1041. Robot Bounded In Circle</a></h2><h3>Medium</h3><hr><div><p>On an infinite plane, a robot initially stands at <code>(0, 0)</code> and faces north. Note that:</p>\n\n<ul>\n    <li>The <strong>north direction</strong> is the positive direction of the y-axis.</li>\n    <li>The <strong>south direction</strong> is the negative direction of the y-axis.</li>\n    <li>The <strong>east direction</strong> is the positive direction of the x-axis.</li>\n    <li>The <strong>west direction</strong> is the negative direction of the x-axis.</li>\n</ul>\n\n<p>The robot can receive one of three instructions:</p>\n\n<ul>\n    <li><code>\"G\"</code>: go straight 1 unit.</li>\n    <li><code>\"L\"</code>: turn 90 degrees to the left (i.e., anti-clockwise direction).</li>\n    <li><code>\"R\"</code>: turn 90 degrees to the right (i.e., clockwise direction).</li>\n</ul>\n\n<p>The robot performs the <code>instructions</code> given in order, and repeats them forever.</p>\n\n<p>Return <code>true</code> if and only if there exists a circle in the plane such that the robot never leaves the circle.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> instructions = \"GGLLGG\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 2). Direction: South.\n\"G\": move one step. Position: (0, 1). Direction: South.\n\"G\": move one step. Position: (0, 0). Direction: South.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --&gt; (0, 1) --&gt; (0, 2) --&gt; (0, 1) --&gt; (0, 0).\nBased on that, we return true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> instructions = \"GG\"\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"G\": move one step. Position: (0, 2). Direction: North.\nRepeating the instructions, keeps advancing in the north direction and does not go into cycles.\nBased on that, we return false.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> instructions = \"GL\"\n<strong>Output:</strong> true\n<strong>Explanation:</strong> The robot is initially at (0, 0) facing the north direction.\n\"G\": move one step. Position: (0, 1). Direction: North.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 1). Direction: West.\n\"G\": move one step. Position: (-1, 1). Direction: West.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 1). Direction: South.\n\"G\": move one step. Position: (-1, 0). Direction: South.\n\"L\": turn 90 degrees anti-clockwise. Position: (-1, 0). Direction: East.\n\"G\": move one step. Position: (0, 0). Direction: East.\n\"L\": turn 90 degrees anti-clockwise. Position: (0, 0). Direction: North.\nRepeating the instructions, the robot goes into the cycle: (0, 0) --&gt; (0, 1) --&gt; (-1, 1) --&gt; (-1, 0) --&gt; (0, 0).\nBased on that, we return true.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= instructions.length &lt;= 100</code></li>\n    <li><code>instructions[i]</code> is <code>'G'</code>, <code>'L'</code> or, <code>'R'</code>.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isRobotBounded</span>(<span class=\"params\">self, instructions: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        x, y, dx, dy = <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">4</span>*instructions:  <span class=\"comment\"># 4* for &quot;GL&quot;</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == <span class=\"string\">&#x27;G&#x27;</span>:</span><br><span class=\"line\">                x += dx</span><br><span class=\"line\">                y += dy</span><br><span class=\"line\">            <span class=\"keyword\">elif</span> i == <span class=\"string\">&#x27;L&#x27;</span>:</span><br><span class=\"line\">                dx, dy = -dy, dx</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                dx, dy = dy, -dx</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> (x,y) == (<span class=\"number\">0</span>,<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1046-last-stone-weight/",
            "url": "https://samirpaul.in/posts/1046-last-stone-weight/",
            "title": "1046 last stone weight",
            "date_published": "2023-08-06T07:08:14.485Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/last-stone-weight/\">1046. Last Stone Weight</a></h2><h3>Easy</h3><hr><div><p>You are given an array of integers <code>stones</code> where <code>stones[i]</code> is the weight of the <code>i<sup>th</sup></code> stone.</p>\n\n<p>We are playing a game with the stones. On each turn, we choose the <strong>heaviest two stones</strong> and smash them together. Suppose the heaviest two stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p>\n\n<ul>\n    <li>If <code>x == y</code>, both stones are destroyed, and</li>\n    <li>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight <code>y</code> has new weight <code>y - x</code>.</li>\n</ul>\n\n<p>At the end of the game, there is <strong>at most one</strong> stone left.</p>\n\n<p>Return <em>the smallest possible weight of the left stone</em>. If there are no stones left, return <code>0</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> stones = [2,7,4,1,8,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nWe combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\nwe combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\nwe combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\nwe combine 1 and 1 to get 0 so the array converts to [1] then that's the value of the last stone.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> stones = [1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= stones.length &lt;= 30</code></li>\n    <li><code>1 &lt;= stones[i] &lt;= 1000</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">lastStoneWeight</span>(<span class=\"params\">self, stones: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        st = [-i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> stones]</span><br><span class=\"line\">        heapq.heapify(st)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> <span class=\"built_in\">len</span>(st) &gt; <span class=\"number\">1</span>:</span><br><span class=\"line\">            a = -heapq.heappop(st)</span><br><span class=\"line\">            b = -heapq.heappop(st)</span><br><span class=\"line\">            heapq.heappush(st, -(a-b))</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> -st[<span class=\"number\">0</span>]</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1050-actors-and-directors-who-cooperated-at-least-three-times/",
            "url": "https://samirpaul.in/posts/1050-actors-and-directors-who-cooperated-at-least-three-times/",
            "title": "1050 actors and directors who cooperated at least three times",
            "date_published": "2023-08-06T07:08:14.485Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/\">1050. Actors and Directors Who Cooperated At Least Three Times</a></h2><h3>Easy</h3><hr><div class=\"sql-schema-wrapper__3VBi\"><a class=\"sql-schema-link__3cEg\">SQL Schema<svg viewBox=\"0 0 24 24\" width=\"1em\" height=\"1em\" class=\"icon__1Md2\"><path fill-rule=\"evenodd\" d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"></path></svg></a></div><div><p>Table: <code>ActorDirector</code></p>\n\n<pre>+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| actor_id    | int     |\n| director_id | int     |\n| timestamp   | int     |\n+-------------+---------+\ntimestamp is the primary key column for this table.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a SQL query for a report that provides the pairs <code>(actor_id, director_id)</code> where the actor has cooperated with the director at least three times.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The query result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> \nActorDirector table:\n+-------------+-------------+-------------+\n| actor_id    | director_id | timestamp   |\n+-------------+-------------+-------------+\n| 1           | 1           | 0           |\n| 1           | 1           | 1           |\n| 1           | 1           | 2           |\n| 1           | 2           | 3           |\n| 1           | 2           | 4           |\n| 2           | 1           | 5           |\n| 2           | 1           | 6           |\n+-------------+-------------+-------------+\n<strong>Output:</strong> \n+-------------+-------------+\n| actor_id    | director_id |\n+-------------+-------------+\n| 1           | 1           |\n+-------------+-------------+\n<strong>Explanation:</strong> The only pair is (1, 1) where they cooperated exactly 3 times.\n</pre>\n</div>\n\n<hr>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Write your MySQL query statement below</span><br><span class=\"line\"><span class=\"keyword\">select</span> actor_id, director_id  </span><br><span class=\"line\"><span class=\"keyword\">from</span> ActorDirector <span class=\"keyword\">group</span> <span class=\"keyword\">by</span> actor_id, director_id</span><br><span class=\"line\"><span class=\"keyword\">having</span> <span class=\"built_in\">count</span>(<span class=\"type\">timestamp</span>) <span class=\"operator\">&gt;=</span> <span class=\"number\">3</span>;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1071-greatest-common-divisor-of-strings/",
            "url": "https://samirpaul.in/posts/1071-greatest-common-divisor-of-strings/",
            "title": "1071 greatest common divisor of strings",
            "date_published": "2023-08-06T07:08:14.485Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/greatest-common-divisor-of-strings/\">1071. Greatest Common Divisor of Strings</a></h2><h3>Easy</h3><hr><div><p>For two strings <code>s</code> and <code>t</code>, we say \"<code>t</code> divides <code>s</code>\" if and only if <code>s = t + ... + t</code> (i.e., <code>t</code> is concatenated with itself one or more times).</p>\n\n<p>Given two strings <code>str1</code> and <code>str2</code>, return <em>the largest string </em><code>x</code><em> such that </em><code>x</code><em> divides both </em><code>str1</code><em> and </em><code>str2</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> str1 = \"ABCABC\", str2 = \"ABC\"\n<strong>Output:</strong> \"ABC\"\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> str1 = \"ABABAB\", str2 = \"ABAB\"\n<strong>Output:</strong> \"AB\"\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> str1 = \"LEET\", str2 = \"CODE\"\n<strong>Output:</strong> \"\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= str1.length, str2.length &lt;= 1000</code></li>\n    <li><code>str1</code> and <code>str2</code> consist of English uppercase letters.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://leetcode.com/problems/greatest-common-divisor-of-strings/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">gcdOfStrings</span>(<span class=\"params\">self, str1, str2</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> str1 + str2 != str2 + str1: </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        len1, len2 = <span class=\"built_in\">len</span>(str1), <span class=\"built_in\">len</span>(str2)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">gcd</span>(<span class=\"params\">a, b</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> b == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> a</span><br><span class=\"line\">            <span class=\"keyword\">return</span> gcd(b, a%b)</span><br><span class=\"line\">        </span><br><span class=\"line\">        i = gcd(len1, len2)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> str1[:i]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">class Solution:</span></span><br><span class=\"line\"><span class=\"string\">    def gcdOfStrings(self, str1, str2):</span></span><br><span class=\"line\"><span class=\"string\">        len1, len2 = len(str1), len(str2)</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        def isDivisor(i):</span></span><br><span class=\"line\"><span class=\"string\">            if len1 % i or len2 % i:</span></span><br><span class=\"line\"><span class=\"string\">                return False</span></span><br><span class=\"line\"><span class=\"string\">            f1, f2 = len1 // i, len2 // i</span></span><br><span class=\"line\"><span class=\"string\">            return str1[:i] * f1 == str1 and str1[:i] * f2 == str2</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        for i in range(min(len1, len2), 0, -1):</span></span><br><span class=\"line\"><span class=\"string\">            if isDivisor(i):</span></span><br><span class=\"line\"><span class=\"string\">                return str1[:i]</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">        return &quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\"># Time: O(N^2)  # as time to take a substring is O(N)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1079-letter-tile-possibilities/",
            "url": "https://samirpaul.in/posts/1079-letter-tile-possibilities/",
            "title": "1079 letter tile possibilities",
            "date_published": "2023-08-06T07:08:14.485Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/letter-tile-possibilities/\">1079. Letter Tile Possibilities</a></h2><h3>Medium</h3><hr><div><p>You have <code>n</code>&nbsp;&nbsp;<code>tiles</code>, where each tile has one letter <code>tiles[i]</code> printed on it.</p>\n\n<p>Return <em>the number of possible non-empty sequences of letters</em> you can make using the letters printed on those <code>tiles</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> tiles = \"AAB\"\n<strong>Output:</strong> 8\n<strong>Explanation: </strong>The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> tiles = \"AAABBC\"\n<strong>Output:</strong> 188\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> tiles = \"V\"\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= tiles.length &lt;= 7</code></li>\n    <li><code>tiles</code> consists of uppercase English letters.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Broute Force</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">numTilePossibilities</span>(<span class=\"params\">self, tiles: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        res = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">path, tiles</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> path:</span><br><span class=\"line\">                res.add(path)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(tiles)):</span><br><span class=\"line\">                dfs(path + tiles[i], tiles[:i] + tiles[i+<span class=\"number\">1</span>:])</span><br><span class=\"line\">        </span><br><span class=\"line\">        dfs(<span class=\"string\">&quot;&quot;</span>, tiles)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(res)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># Optimal Solution</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">numTilePossibilities</span>(<span class=\"params\">self, tiles: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        record = [<span class=\"number\">0</span>] * <span class=\"number\">26</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> tile <span class=\"keyword\">in</span> tiles: record[<span class=\"built_in\">ord</span>(tile)-<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;A&#x27;</span>)] += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">record</span>):</span><br><span class=\"line\">            s = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">26</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> record[i]: <span class=\"keyword\">continue</span></span><br><span class=\"line\">                record[i] -= <span class=\"number\">1</span></span><br><span class=\"line\">                s += dfs(record) + <span class=\"number\">1</span> </span><br><span class=\"line\">                record[i] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> s    </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(record)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1029-two-city-scheduling/",
            "url": "https://samirpaul.in/posts/1029-two-city-scheduling/",
            "title": "1029 two city scheduling",
            "date_published": "2023-08-06T07:08:14.469Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/two-city-scheduling/\">1029. Two City Scheduling</a></h2><h3>Medium</h3><hr><div><p>A company is planning to interview <code>2n</code> people. Given the array <code>costs</code> where <code>costs[i] = [aCost<sub>i</sub>, bCost<sub>i</sub>]</code>,&nbsp;the cost of flying the <code>i<sup>th</sup></code> person to city <code>a</code> is <code>aCost<sub>i</sub></code>, and the cost of flying the <code>i<sup>th</sup></code> person to city <code>b</code> is <code>bCost<sub>i</sub></code>.</p>\n\n<p>Return <em>the minimum cost to fly every person to a city</em> such that exactly <code>n</code> people arrive in each city.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> costs = [[10,20],[30,200],[400,50],[30,20]]\n<strong>Output:</strong> 110\n<strong>Explanation: </strong>\nThe first person goes to city A for a cost of 10.\nThe second person goes to city A for a cost of 30.\nThe third person goes to city B for a cost of 50.\nThe fourth person goes to city B for a cost of 20.\n\nThe total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\n<strong>Output:</strong> 1859\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\n<strong>Output:</strong> 3086\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>2 * n == costs.length</code></li>\n    <li><code>2 &lt;= costs.length &lt;= 100</code></li>\n    <li><code>costs.length</code> is even.</li>\n    <li><code>1 &lt;= aCost<sub>i</sub>, bCost<sub>i</sub> &lt;= 1000</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://leetcode.com/problems/two-city-scheduling/</span></span><br><span class=\"line\"><span class=\"comment\"># https://youtu.be/d-B_gk_gJtQ</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ------------------ Greedy Solution ------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">twoCitySchedCost</span>(<span class=\"params\">self, costs</span>):</span><br><span class=\"line\">        diffs = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ac, bc <span class=\"keyword\">in</span> costs:</span><br><span class=\"line\">            diffs.append((bc-ac, ac, bc))</span><br><span class=\"line\">        diffs.sort()</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(costs)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &lt; <span class=\"built_in\">len</span>(costs)//<span class=\"number\">2</span>:</span><br><span class=\"line\">                res += diffs[i][<span class=\"number\">2</span>]    <span class=\"comment\"># sending to city B     </span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                res += diffs[i][<span class=\"number\">1</span>]    <span class=\"comment\"># sending to city A</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Time: O(n log(n))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># ------------------ Dynamic Programming ------------------</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">twoCitySchedCost</span>(<span class=\"params\">self, costs</span>):</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(costs)//<span class=\"number\">2</span></span><br><span class=\"line\">        dp = [[-<span class=\"number\">1</span>]*(n+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">i, a, b</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> a == b == n:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt;= <span class=\"built_in\">len</span>(costs) <span class=\"keyword\">or</span> a &gt; n <span class=\"keyword\">or</span> b &gt; n:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">2</span>**<span class=\"number\">31</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dp[a][b] != -<span class=\"number\">1</span>:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dp[a][b]</span><br><span class=\"line\">            </span><br><span class=\"line\">            aCost = costs[i][<span class=\"number\">0</span>] + dfs(i+<span class=\"number\">1</span>, a+<span class=\"number\">1</span>, b)</span><br><span class=\"line\">            bCost = costs[i][<span class=\"number\">1</span>] + dfs(i+<span class=\"number\">1</span>, a, b+<span class=\"number\">1</span>)</span><br><span class=\"line\">            </span><br><span class=\"line\">            dp[a][b] = <span class=\"built_in\">min</span>(aCost, bCost)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp[a][b]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># Time: O(n^2)</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1027-longest-arithmetic-subsequence/",
            "url": "https://samirpaul.in/posts/1027-longest-arithmetic-subsequence/",
            "title": "1027 longest arithmetic subsequence",
            "date_published": "2023-08-06T07:08:14.469Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/longest-arithmetic-subsequence/\">1027. Longest Arithmetic Subsequence</a></h2><h3>Medium</h3><hr><div><p>Given an array <code>nums</code> of integers, return the <strong>length</strong> of the longest arithmetic subsequence in <code>nums</code>.</p>\n\n<p>Recall that a <em>subsequence</em> of an array <code>nums</code> is a list <code>nums[i<sub>1</sub>], nums[i<sub>2</sub>], ..., nums[i<sub>k</sub>]</code> with <code>0 &lt;= i<sub>1</sub> &lt; i<sub>2</sub> &lt; ... &lt; i<sub>k</sub> &lt;= nums.length - 1</code>, and that a sequence <code>seq</code> is <em>arithmetic</em> if <code>seq[i+1] - seq[i]</code> are all the same value (for <code>0 &lt;= i &lt; seq.length - 1</code>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [3,6,9,12]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>\nThe whole array is an arithmetic sequence with steps of length = 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [9,4,7,2,10]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>\nThe longest arithmetic subsequence is [4,7,10].\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> nums = [20,1,15,3,10,5,8]\n<strong>Output:</strong> 4\n<strong>Explanation: </strong>\nThe longest arithmetic subsequence is [20,15,10,5].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>2 &lt;= nums.length &lt;= 1000</code></li>\n    <li><code>0 &lt;= nums[i] &lt;= 500</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">longestArithSeqLength</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        dp = [&#123;&#125; <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums))]</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i):</span><br><span class=\"line\">                diff = nums[i] - nums[j]</span><br><span class=\"line\">                <span class=\"keyword\">if</span> diff <span class=\"keyword\">in</span> dp[j]:</span><br><span class=\"line\">                    dp[i][diff] = <span class=\"built_in\">max</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span> + dp[j][diff])</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][diff] = <span class=\"number\">2</span></span><br><span class=\"line\">                res = <span class=\"built_in\">max</span>(res, dp[i][diff])</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># Time: O(N^2)</span></span><br><span class=\"line\"><span class=\"comment\"># Space: O(N^2)</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1031-maximum-sum-of-two-non-overlapping-subarrays/",
            "url": "https://samirpaul.in/posts/1031-maximum-sum-of-two-non-overlapping-subarrays/",
            "title": "1031 maximum sum of two non overlapping subarrays",
            "date_published": "2023-08-06T07:08:14.469Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/\">1031. Maximum Sum of Two Non-Overlapping Subarrays</a></h2><h3>Medium</h3><hr><div><p>Given an integer array <code>nums</code> and two integers <code>firstLen</code> and <code>secondLen</code>, return <em>the maximum sum of elements in two non-overlapping <strong>subarrays</strong> with lengths </em><code>firstLen</code><em> and </em><code>secondLen</code>.</p>\n\n<p>The array with length <code>firstLen</code> could occur before or after the array with length <code>secondLen</code>, but they have to be non-overlapping.</p>\n\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> One choice of subarrays is [9] with length 1, and [6,5] with length 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2\n<strong>Output:</strong> 29\n<strong>Explanation:</strong> One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3\n<strong>Output:</strong> 31\n<strong>Explanation:</strong> One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= firstLen, secondLen &lt;= 1000</code></li>\n    <li><code>2 &lt;= firstLen + secondLen &lt;= 1000</code></li>\n    <li><code>firstLen + secondLen &lt;= nums.length &lt;= 1000</code></li>\n    <li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxSumTwoNoOverlap</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], firstLen: <span class=\"built_in\">int</span>, secondLen: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">        prefixArr = []</span><br><span class=\"line\">        s = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            s += i</span><br><span class=\"line\">            prefixArr.append(s)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">left</span>(<span class=\"params\">k</span>):</span><br><span class=\"line\">            arr = [<span class=\"number\">0</span>] * n</span><br><span class=\"line\">            curmax = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k-<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                cur = prefixArr[i] - prefixArr[i-k+<span class=\"number\">1</span>] + nums[i-k+<span class=\"number\">1</span>]</span><br><span class=\"line\">                curmax = <span class=\"built_in\">max</span>(curmax, cur)</span><br><span class=\"line\">                arr[i] = curmax</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">right</span>(<span class=\"params\">k</span>):</span><br><span class=\"line\">            arr = [<span class=\"number\">0</span>] * n</span><br><span class=\"line\">            curmax = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-k, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">                cur = prefixArr[i+k-<span class=\"number\">1</span>] - prefixArr[i] + nums[i]</span><br><span class=\"line\">                curmax = <span class=\"built_in\">max</span>(curmax, cur)</span><br><span class=\"line\">                arr[i] = curmax</span><br><span class=\"line\">            <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">        </span><br><span class=\"line\">        first_left = left(firstLen)</span><br><span class=\"line\">        first_right = right(firstLen)</span><br><span class=\"line\">        second_left = left(secondLen)</span><br><span class=\"line\">        second_right = right(secondLen)</span><br><span class=\"line\">        </span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">            a = first_left[i-<span class=\"number\">1</span>] + second_right[i]</span><br><span class=\"line\">            b = second_left[i-<span class=\"number\">1</span>] + first_right[i]</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, a, b)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1035-uncrossed-lines/",
            "url": "https://samirpaul.in/posts/1035-uncrossed-lines/",
            "title": "1035 uncrossed lines",
            "date_published": "2023-08-06T07:08:14.469Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/uncrossed-lines/\">1035. Uncrossed Lines</a></h2><h3>Medium</h3><hr><div><p>You are given two integer arrays <code>nums1</code> and <code>nums2</code>. We write the integers of <code>nums1</code> and <code>nums2</code> (in the order they are given) on two separate horizontal lines.</p>\n\n<p>We may draw connecting lines: a straight line connecting two numbers <code>nums1[i]</code> and <code>nums2[j]</code> such that:</p>\n\n<ul>\n    <li><code>nums1[i] == nums2[j]</code>, and</li>\n    <li>the line we draw does not intersect any other connecting (non-horizontal) line.</li>\n</ul>\n\n<p>Note that a connecting line cannot intersect even at the endpoints (i.e., each number can only belong to one connecting line).</p>\n\n<p>Return <em>the maximum number of connecting lines we can draw in this way</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/04/26/142.png\" style=\"width: 400px; height: 286px;\">\n<pre><strong>Input:</strong> nums1 = [1,4,2], nums2 = [1,2,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can draw 2 uncrossed lines as in the diagram.\nWe cannot draw 3 uncrossed lines, because the line from nums1[1] = 4 to nums2[2] = 4 will intersect the line from nums1[2]=2 to nums2[1]=2.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]\n<strong>Output:</strong> 3\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= nums1.length, nums2.length &lt;= 500</code></li>\n    <li><code>1 &lt;= nums1[i], nums2[j] &lt;= 2000</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxUncrossedLines</span>(<span class=\"params\">self, nums1: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], nums2: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Longest Common Subsequence (LCS)</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        dp = [[<span class=\"number\">0</span>]*(<span class=\"built_in\">len</span>(nums2)+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums1)+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums1)+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">len</span>(nums2)+<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> nums1[i-<span class=\"number\">1</span>] == nums2[j-<span class=\"number\">1</span>]:</span><br><span class=\"line\">                    dp[i][j] = <span class=\"number\">1</span> + dp[i-<span class=\"number\">1</span>][j-<span class=\"number\">1</span>]</span><br><span class=\"line\">                <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                    dp[i][j] = <span class=\"built_in\">max</span>(dp[i-<span class=\"number\">1</span>][j], dp[i][j-<span class=\"number\">1</span>])</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>][-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1038-binary-search-tree-to-greater-sum-tree/",
            "url": "https://samirpaul.in/posts/1038-binary-search-tree-to-greater-sum-tree/",
            "title": "1038 binary search tree to greater sum tree",
            "date_published": "2023-08-06T07:08:14.469Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/\">1038. Binary Search Tree to Greater Sum Tree</a></h2><h3>Medium</h3><hr><div><p>Given the <code>root</code> of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.</p>\n\n<p>As a reminder, a <em>binary search tree</em> is a tree that satisfies these constraints:</p>\n\n<ul>\n    <li>The left subtree of a node contains only nodes with keys <strong>less than</strong> the node's key.</li>\n    <li>The right subtree of a node contains only nodes with keys <strong>greater than</strong> the node's key.</li>\n    <li>Both the left and right subtrees must also be binary search trees.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/05/02/tree.png\" style=\"width: 400px; height: 273px;\">\n<pre><strong>Input:</strong> root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\n<strong>Output:</strong> [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> root = [0,null,1]\n<strong>Output:</strong> [1,null,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>\n    <li><code>0 &lt;= Node.val &lt;= 100</code></li>\n    <li>All the values in the tree are <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 538: <a href=\"https://leetcode.com/problems/convert-bst-to-greater-tree/\" target=\"_blank\">https://leetcode.com/problems/convert-bst-to-greater-tree/</a></p>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = left</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = right</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">bstToGst</span>(<span class=\"params\">self, root: TreeNode</span>) -&gt; TreeNode:</span><br><span class=\"line\">        self.<span class=\"built_in\">sum</span> = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root: <span class=\"keyword\">return</span></span><br><span class=\"line\">            solve(root.right)</span><br><span class=\"line\">            self.<span class=\"built_in\">sum</span> += root.val</span><br><span class=\"line\">            root.val = self.<span class=\"built_in\">sum</span></span><br><span class=\"line\">            solve(root.left)</span><br><span class=\"line\">        </span><br><span class=\"line\">        solve(root)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1014-best-sightseeing-pair/",
            "url": "https://samirpaul.in/posts/1014-best-sightseeing-pair/",
            "title": "1014 best sightseeing pair",
            "date_published": "2023-08-06T07:08:14.454Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/best-sightseeing-pair/\">1014. Best Sightseeing Pair</a></h2><h3>Medium</h3><hr><div><p>You are given an integer array <code>values</code> where values[i] represents the value of the <code>i<sup>th</sup></code> sightseeing spot. Two sightseeing spots <code>i</code> and <code>j</code> have a <strong>distance</strong> <code>j - i</code> between them.</p>\n\n    \n<p>The score of a pair (<code>i &lt; j</code>) of sightseeing spots is <code>values[i] + values[j] + i - j</code>: the sum of the values of the sightseeing spots, minus the distance between them.</p>\n\n<p>Return <em>the maximum score of a pair of sightseeing spots</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> values = [8,1,5,2,6]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> values = [1,2]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>2 &lt;= values.length &lt;= 5 * 10<sup>4</sup></code></li>\n    <li><code>1 &lt;= values[i] &lt;= 1000</code></li>\n</ul>\n</div>\n\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">maxScoreSightseeingPair</span>(<span class=\"params\">self, values: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        arr = [<span class=\"number\">0</span>]*<span class=\"built_in\">len</span>(values)</span><br><span class=\"line\">        maxi = -<span class=\"number\">2</span>**<span class=\"number\">31</span></span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(values)-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">            arr[i] = maxi</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, values[i] + i + arr[i])</span><br><span class=\"line\">            maxi = <span class=\"built_in\">max</span>(maxi, values[i] - i)</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">       res = 0</span></span><br><span class=\"line\"><span class=\"string\">        for i in range(len(values)-1):</span></span><br><span class=\"line\"><span class=\"string\">            res = max(res, values[i] + i + arr[i])</span></span><br><span class=\"line\"><span class=\"string\">            &#x27;&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1011-capacity-to-ship-packages-within-d-days/",
            "url": "https://samirpaul.in/posts/1011-capacity-to-ship-packages-within-d-days/",
            "title": "1011 capacity to ship packages within d days",
            "date_published": "2023-08-06T07:08:14.454Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/\">1011. Capacity To Ship Packages Within D Days</a></h2><h3>Medium</h3><hr><div><p>A conveyor belt has packages that must be shipped from one port to another within <code>days</code> days.</p>\n\n<p>The <code>i<sup>th</sup></code> package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p>\n\n<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>days</code> days.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> weights = [1,2,3,4,5,6,7,8,9,10], days = 5\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n1st day: 1, 2, 3, 4, 5\n2nd day: 6, 7\n3rd day: 8\n4th day: 9\n5th day: 10\n\nNote that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> weights = [3,2,2,4,1,4], days = 3\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n1st day: 3, 2\n2nd day: 2, 4\n3rd day: 1, 4\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> weights = [1,2,3,1,1], days = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n1st day: 1\n2nd day: 2\n3rd day: 3\n4th day: 1, 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= days &lt;= weights.length &lt;= 5 * 10<sup>4</sup></code></li>\n    <li><code>1 &lt;= weights[i] &lt;= 500</code></li>\n</ul></div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">shipWithinDays</span>(<span class=\"params\">self, wt: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], days: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        l = <span class=\"built_in\">max</span>(wt); r = <span class=\"built_in\">sum</span>(wt); res = l</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">isValid</span>(<span class=\"params\">mid, days</span>):</span><br><span class=\"line\">            r = <span class=\"number\">1</span></span><br><span class=\"line\">            s = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> wt:</span><br><span class=\"line\">                s += i</span><br><span class=\"line\">                <span class=\"keyword\">if</span> s &gt; mid:</span><br><span class=\"line\">                    r += <span class=\"number\">1</span></span><br><span class=\"line\">                    s = i</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r &lt;= days</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> l &lt;= r:</span><br><span class=\"line\">            mid = (l + r) // <span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> isValid(mid, days):</span><br><span class=\"line\">                r = mid - <span class=\"number\">1</span></span><br><span class=\"line\">                res = mid</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                l = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1008-construct-binary-search-tree-from-preorder-traversal/",
            "url": "https://samirpaul.in/posts/1008-construct-binary-search-tree-from-preorder-traversal/",
            "title": "1008 construct binary search tree from preorder traversal",
            "date_published": "2023-08-06T07:08:14.438Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/construct-binary-search-tree-from-preorder-traversal/\">1008. Construct Binary Search Tree from Preorder Traversal</a></h2><h3>Medium</h3><hr><div><p>Given an array of integers preorder, which represents the <strong>preorder traversal</strong> of a BST (i.e., <strong>binary search tree</strong>), construct the tree and return <em>its root</em>.</p>\n\n<p>It is <strong>guaranteed</strong> that there is always possible to find a binary search tree with the given requirements for the given test cases.</p>\n\n<p>A <strong>binary search tree</strong> is a binary tree where for every node, any descendant of <code>Node.left</code> has a value <strong>strictly less than</strong> <code>Node.val</code>, and any descendant of <code>Node.right</code> has a value <strong>strictly greater than</strong> <code>Node.val</code>.</p>\n\n<p>A <strong>preorder traversal</strong> of a binary tree displays the value of the node first, then traverses <code>Node.left</code>, then traverses <code>Node.right</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/03/06/1266.png\" style=\"height: 386px; width: 590px;\">\n<pre><strong>Input:</strong> preorder = [8,5,1,7,10,12]\n<strong>Output:</strong> [8,5,10,1,7,null,12]\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> preorder = [1,3]\n<strong>Output:</strong> [1,null,3]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= preorder.length &lt;= 100</code></li>\n    <li><code>1 &lt;= preorder[i] &lt;= 1000</code></li>\n    <li>All the values of <code>preorder</code> are <strong>unique</strong>.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = left</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = right</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">bstFromPreorder</span>(<span class=\"params\">self, preorder: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">Optional</span>[TreeNode]:</span><br><span class=\"line\">        root = TreeNode(preorder[<span class=\"number\">0</span>])</span><br><span class=\"line\">        stack = [root]</span><br><span class=\"line\">        parent = root</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> nodeVal <span class=\"keyword\">in</span> preorder[<span class=\"number\">1</span>:]:</span><br><span class=\"line\">            newNode = TreeNode(nodeVal)</span><br><span class=\"line\">            <span class=\"keyword\">if</span> stack <span class=\"keyword\">and</span> newNode.val &lt; stack[-<span class=\"number\">1</span>].val:</span><br><span class=\"line\">                parent.left = newNode</span><br><span class=\"line\">                stack.append(newNode)</span><br><span class=\"line\">                parent = stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                <span class=\"keyword\">while</span> stack <span class=\"keyword\">and</span> stack[-<span class=\"number\">1</span>].val &lt; newNode.val:</span><br><span class=\"line\">                    parent = stack.pop()</span><br><span class=\"line\">                parent.right = newNode</span><br><span class=\"line\">                stack.append(newNode)</span><br><span class=\"line\">                parent = stack[-<span class=\"number\">1</span>]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> root</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1005-maximize-sum-of-array-after-k-negations/",
            "url": "https://samirpaul.in/posts/1005-maximize-sum-of-array-after-k-negations/",
            "title": "1005 maximize sum of array after k negations",
            "date_published": "2023-08-06T07:08:14.438Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/maximize-sum-of-array-after-k-negations/\">1005. Maximize Sum Of Array After K Negations</a></h2><h3>Easy</h3><hr><div><p>Given an integer array <code>nums</code> and an integer <code>k</code>, modify the array in the following way:</p>\n\n<ul>\n    <li>choose an index <code>i</code> and replace <code>nums[i]</code> with <code>-nums[i]</code>.</li>\n</ul>\n\n<p>You should apply this process exactly <code>k</code> times. You may choose the same index <code>i</code> multiple times.</p>\n\n<p>Return <em>the largest possible sum of the array after modifying it in this way</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [4,2,3], k = 1\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> Choose index 1 and nums becomes [4,-2,3].\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [3,-1,0,2], k = 3\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> Choose indices (1, 2, 2) and nums becomes [3,1,0,2].\n</pre>\n\n<p><strong>Example 3:</strong></p>\n\n<pre><strong>Input:</strong> nums = [2,-3,-1,5,-4], k = 2\n<strong>Output:</strong> 13\n<strong>Explanation:</strong> Choose indices (1, 4) and nums becomes [2,3,-1,5,4].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n    <li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n    <li><code>1 &lt;= k &lt;= 10<sup>4</sup></code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> heapq</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">largestSumAfterKNegations</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        heapq.heapify(nums)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(k):</span><br><span class=\"line\">            a = heapq.heappop(nums)</span><br><span class=\"line\">            a *= -<span class=\"number\">1</span></span><br><span class=\"line\">            heapq.heappush(nums, a)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sum</span>(nums)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0983-minimum-cost-for-tickets/",
            "url": "https://samirpaul.in/posts/0983-minimum-cost-for-tickets/",
            "title": "0983 minimum cost for tickets",
            "date_published": "2023-08-06T07:08:14.423Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/minimum-cost-for-tickets/\">983. Minimum Cost For Tickets</a></h2><h3>Medium</h3><hr><div><p>You have planned some train traveling one year in advance. The days of the year in which you will travel are given as an integer array <code>days</code>. Each day is an integer from <code>1</code> to <code>365</code>.</p>\n\n<p>Train tickets are sold in <strong>three different ways</strong>:</p>\n\n<ul>\n    <li>a <strong>1-day</strong> pass is sold for <code>costs[0]</code> dollars,</li>\n    <li>a <strong>7-day</strong> pass is sold for <code>costs[1]</code> dollars, and</li>\n    <li>a <strong>30-day</strong> pass is sold for <code>costs[2]</code> dollars.</li>\n</ul>\n\n<p>The passes allow that many days of consecutive travel.</p>\n\n<ul>\n    <li>For example, if we get a <strong>7-day</strong> pass on day <code>2</code>, then we can travel for <code>7</code> days: <code>2</code>, <code>3</code>, <code>4</code>, <code>5</code>, <code>6</code>, <code>7</code>, and <code>8</code>.</li>\n</ul>\n\n<p>Return <em>the minimum number of dollars you need to travel every day in the given list of days</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> days = [1,4,6,7,8,20], costs = [2,7,15]\n<strong>Output:</strong> 11\n<strong>Explanation:</strong> For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\nOn day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\nOn day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\nIn total, you spent $11 and covered all the days of your travel.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\n<strong>Output:</strong> 17\n<strong>Explanation:</strong> For example, here is one way to buy passes that lets you travel your travel plan:\nOn day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\nOn day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\nIn total, you spent $17 and covered all the days of your travel.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= days.length &lt;= 365</code></li>\n    <li><code>1 &lt;= days[i] &lt;= 365</code></li>\n    <li><code>days</code> is in strictly increasing order.</li>\n    <li><code>costs.length == 3</code></li>\n    <li><code>1 &lt;= costs[i] &lt;= 1000</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mincostTickets</span>(<span class=\"params\">self, days: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], costs: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        dp = [<span class=\"number\">0</span>]*(<span class=\"built_in\">max</span>(days)+<span class=\"number\">1</span>)</span><br><span class=\"line\">        days = <span class=\"built_in\">set</span>(days)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"built_in\">max</span>(days)+<span class=\"number\">1</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> days:</span><br><span class=\"line\">                dp[i] = dp[i-<span class=\"number\">1</span>]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                val = dp[i-<span class=\"number\">1</span>] + costs[<span class=\"number\">0</span>]</span><br><span class=\"line\">                val = <span class=\"built_in\">min</span>(val, dp[i-<span class=\"number\">7</span>] + costs[<span class=\"number\">1</span>]) <span class=\"keyword\">if</span> i-<span class=\"number\">7</span> &gt;= <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"built_in\">min</span>(val, dp[<span class=\"number\">0</span>] + costs[<span class=\"number\">1</span>])</span><br><span class=\"line\">                val = <span class=\"built_in\">min</span>(val, dp[i-<span class=\"number\">30</span>] + costs[<span class=\"number\">2</span>]) <span class=\"keyword\">if</span> i-<span class=\"number\">30</span> &gt;= <span class=\"number\">0</span> <span class=\"keyword\">else</span> <span class=\"built_in\">min</span>(val, dp[<span class=\"number\">0</span>] + costs[<span class=\"number\">2</span>])</span><br><span class=\"line\">                dp[i] = val</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dp[-<span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0987-vertical-order-traversal-of-a-binary-tree/",
            "url": "https://samirpaul.in/posts/0987-vertical-order-traversal-of-a-binary-tree/",
            "title": "0987 vertical order traversal of a binary tree",
            "date_published": "2023-08-06T07:08:14.423Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/\">987. Vertical Order Traversal of a Binary Tree</a></h2><h3>Hard</h3><hr><div><p>Given the <code>root</code> of a binary tree, calculate the <strong>vertical order traversal</strong> of the binary tree.</p>\n\n<p>For each node at position <code>(row, col)</code>, its left and right children will be at positions <code>(row + 1, col - 1)</code> and <code>(row + 1, col + 1)</code> respectively. The root of the tree is at <code>(0, 0)</code>.</p>\n\n<p>The <strong>vertical order traversal</strong> of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.</p>\n\n<p>Return <em>the <strong>vertical order traversal</strong> of the binary tree</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg\" style=\"width: 431px; height: 304px;\">\n<pre><strong>Input:</strong> root = [3,9,20,null,null,15,7]\n<strong>Output:</strong> [[9],[3,15],[20],[7]]\n<strong>Explanation:</strong>\nColumn -1: Only node 9 is in this column.\nColumn 0: Nodes 3 and 15 are in this column in that order from top to bottom.\nColumn 1: Only node 20 is in this column.\nColumn 2: Only node 7 is in this column.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/29/vtree2.jpg\" style=\"width: 512px; height: 304px;\">\n<pre><strong>Input:</strong> root = [1,2,3,4,5,6,7]\n<strong>Output:</strong> [[4],[2],[1,5,6],[3],[7]]\n<strong>Explanation:</strong>\nColumn -2: Only node 4 is in this column.\nColumn -1: Only node 2 is in this column.\nColumn 0: Nodes 1, 5, and 6 are in this column.\n          1 is at the top, so it comes first.\n          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\nColumn 1: Only node 3 is in this column.\nColumn 2: Only node 7 is in this column.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/01/29/vtree3.jpg\" style=\"width: 512px; height: 304px;\">\n<pre><strong>Input:</strong> root = [1,2,3,4,6,5,7]\n<strong>Output:</strong> [[4],[2],[1,5,6],[3],[7]]\n<strong>Explanation:</strong>\nThis case is the exact same as example 2, but with nodes 5 and 6 swapped.\nNote that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li>The number of nodes in the tree is in the range <code>[1, 1000]</code>.</li>\n    <li><code>0 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = left</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = right</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">verticalTraversal</span>(<span class=\"params\">self, root: <span class=\"type\">Optional</span>[TreeNode]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        dct = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">root, d, l</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root: <span class=\"keyword\">return</span> </span><br><span class=\"line\">            <span class=\"keyword\">if</span> d <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> dct: dct[d] = [(l, root.val)]</span><br><span class=\"line\">            <span class=\"keyword\">else</span>: dct[d].append((l, root.val))</span><br><span class=\"line\">            solve(root.left, d-<span class=\"number\">1</span>, l+<span class=\"number\">1</span>)</span><br><span class=\"line\">            solve(root.right, d+<span class=\"number\">1</span>, l+<span class=\"number\">1</span>)</span><br><span class=\"line\">        </span><br><span class=\"line\">        solve(root, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(<span class=\"built_in\">list</span>(dct.keys())):</span><br><span class=\"line\">            res.append([v <span class=\"keyword\">for</span> l, v <span class=\"keyword\">in</span> <span class=\"built_in\">sorted</span>(dct[key])])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/1004-max-consecutive-ones-iii/",
            "url": "https://samirpaul.in/posts/1004-max-consecutive-ones-iii/",
            "title": "1004 max consecutive ones iii",
            "date_published": "2023-08-06T07:08:14.423Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/max-consecutive-ones-iii/\">1004. Max Consecutive Ones III</a></h2><h3>Medium</h3><hr><div><p>Given a binary array <code>nums</code> and an integer <code>k</code>, return <em>the maximum number of consecutive </em><code>1</code><em>'s in the array if you can flip at most</em> <code>k</code> <code>0</code>'s.</p>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> [1,1,1,0,0,<u><strong>1</strong>,1,1,1,1,<strong>1</strong></u>]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> [0,0,<u>1,1,<strong>1</strong>,<strong>1</strong>,1,1,1,<strong>1</strong>,1,1</u>,0,0,0,1,1,1,1]\nBolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n    <li><code>nums[i]</code> is either <code>0</code> or <code>1</code>.</li>\n    <li><code>0 &lt;= k &lt;= nums.length</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">longestOnes</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        i = -<span class=\"number\">1</span></span><br><span class=\"line\">        count0 = <span class=\"number\">0</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums[j] == <span class=\"number\">0</span>: count0 += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> count0 &gt; k:</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> nums[i] == <span class=\"number\">0</span>: count0 -= <span class=\"number\">1</span></span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, j - i)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0974-subarray-sums-divisible-by-k/",
            "url": "https://samirpaul.in/posts/0974-subarray-sums-divisible-by-k/",
            "title": "0974 subarray sums divisible by k",
            "date_published": "2023-08-06T07:08:14.407Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/subarray-sums-divisible-by-k/\">974. Subarray Sums Divisible by K</a></h2><h3>Medium</h3><hr><div><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the number of non-empty <strong>subarrays</strong> that have a sum divisible by </em><code>k</code>.</p>\n\n<p>A <strong>subarray</strong> is a <strong>contiguous</strong> part of an array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [4,5,0,-2,-3,1], k = 5\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> There are 7 subarrays with a sum divisible by k = 5:\n[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [5], k = 9\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n    <li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n    <li><code>2 &lt;= k &lt;= 10<sup>4</sup></code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">subarraysDivByK</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        rem_cnt = &#123;&#125;</span><br><span class=\"line\">        rem_cnt[<span class=\"number\">0</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">        s = res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> nums:</span><br><span class=\"line\">            s += num</span><br><span class=\"line\">            rem = s % k</span><br><span class=\"line\">            <span class=\"keyword\">if</span> rem <span class=\"keyword\">in</span> rem_cnt: </span><br><span class=\"line\">                res += rem_cnt[rem]</span><br><span class=\"line\">                rem_cnt[rem] += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                rem_cnt[rem] = <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0979-distribute-coins-in-binary-tree/",
            "url": "https://samirpaul.in/posts/0979-distribute-coins-in-binary-tree/",
            "title": "0979 distribute coins in binary tree",
            "date_published": "2023-08-06T07:08:14.407Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/distribute-coins-in-binary-tree/\">979. Distribute Coins in Binary Tree</a></h2><h3>Medium</h3><hr><div><p>You are given the <code>root</code> of a binary tree with <code>n</code> nodes where each <code>node</code> in the tree has <code>node.val</code> coins. There are <code>n</code> coins in total throughout the whole tree.</p>\n\n<p>In one move, we may choose two adjacent nodes and move one coin from one node to another. A move may be from parent to child, or from child to parent.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of moves required to make every node have <strong>exactly</strong> one coin</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree1.png\" style=\"width: 250px; height: 236px;\">\n<pre><strong>Input:</strong> root = [3,0,0]\n<strong>Output:</strong> 2\n<strong>Explanation: </strong>From the root of the tree, we move one coin to its left child, and one coin to its right child.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2019/01/18/tree2.png\" style=\"width: 250px; height: 236px;\">\n<pre><strong>Input:</strong> root = [0,3,0]\n<strong>Output:</strong> 3\n<strong>Explanation: </strong>From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li>The number of nodes in the tree is <code>n</code>.</li>\n    <li><code>1 &lt;= n &lt;= 100</code></li>\n    <li><code>0 &lt;= Node.val &lt;= n</code></li>\n    <li>The sum of all <code>Node.val</code> is <code>n</code>.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = left</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = right</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">distributeCoins</span>(<span class=\"params\">self, root: <span class=\"type\">Optional</span>[TreeNode]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        self.res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">root</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> root: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            l = solve(root.left)</span><br><span class=\"line\">            r = solve(root.right)</span><br><span class=\"line\">            self.res += <span class=\"built_in\">abs</span>(l) + <span class=\"built_in\">abs</span>(r)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> l + r + root.val - <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        solve(root)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.res</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0981-time-based-key-value-store/",
            "url": "https://samirpaul.in/posts/0981-time-based-key-value-store/",
            "title": "0981 time based key value store",
            "date_published": "2023-08-06T07:08:14.407Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/time-based-key-value-store/\">981. Time Based Key-Value Store</a></h2><h3>Medium</h3><hr><div><p>Design a time-based key-value data structure that can store multiple values for the same key at different time stamps and retrieve the key's value at a certain timestamp.</p>\n\n<p>Implement the <code>TimeMap</code> class:</p>\n\n<ul>\n    <li><code>TimeMap()</code> Initializes the object of the data structure.</li>\n    <li><code>void set(String key, String value, int timestamp)</code> Stores the key <code>key</code> with the value <code>value </code>at the given time <code>timestamp</code>.</li>\n    <li><code>String get(String key, int timestamp)</code> Returns a value such that <code>set</code> was called previously, with <code>timestamp_prev &lt;= timestamp</code>. If there are multiple such values, it returns the value associated with the largest <code>timestamp_prev</code>. If there are no values, it returns <code>\"\"</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"TimeMap\", \"set\", \"get\", \"get\", \"set\", \"get\", \"get\"]\n[[], [\"foo\", \"bar\", 1], [\"foo\", 1], [\"foo\", 3], [\"foo\", \"bar2\", 4], [\"foo\", 4], [\"foo\", 5]]\n<strong>Output</strong>\n[null, null, \"bar\", \"bar\", null, \"bar2\", \"bar2\"]\n\n<strong>Explanation</strong>\nTimeMap timeMap = new TimeMap();\ntimeMap.set(\"foo\", \"bar\", 1);  // store the key \"foo\" and value \"bar\" along with timestamp = 1.\ntimeMap.get(\"foo\", 1);         // return \"bar\"\ntimeMap.get(\"foo\", 3);         // return \"bar\", since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 is \"bar\".\ntimeMap.set(\"foo\", \"bar2\", 4); // store the key \"foo\" and value \"bar2\" along with timestamp = 4.\ntimeMap.get(\"foo\", 4);         // return \"bar2\"\ntimeMap.get(\"foo\", 5);         // return \"bar2\"\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= key.length, value.length &lt;= 100</code></li>\n    <li><code>key</code> and <code>value</code> consist of lowercase English letters and digits.</li>\n    <li><code>1 &lt;= timestamp &lt;= 10<sup>7</sup></code></li>\n    <li>All the timestamps <code>timestamp</code> of <code>set</code> are strictly increasing.</li>\n    <li>At most <code>2 * 10<sup>5</sup></code> calls will be made to <code>set</code> and <code>get</code>.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TimeMap</span>:</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.dic = &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">set</span>(<span class=\"params\">self, key, value, timestamp</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.dic:</span><br><span class=\"line\">            self.dic[key] = [(timestamp, value)]</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            self.dic[key].append((timestamp, value))</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get</span>(<span class=\"params\">self, key, timestamp</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> key <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self.dic: <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">        arr = self.dic[key]</span><br><span class=\"line\">        l, r = <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(arr)-<span class=\"number\">1</span></span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> l &lt; r:</span><br><span class=\"line\">            mid = (l+r+<span class=\"number\">1</span>)//<span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> timestamp &lt; arr[mid][<span class=\"number\">0</span>]:</span><br><span class=\"line\">                r = mid-<span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                l = mid</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[l][<span class=\"number\">1</span>] <span class=\"keyword\">if</span> timestamp &gt;= arr[l][<span class=\"number\">0</span>] <span class=\"keyword\">else</span> <span class=\"string\">&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0912-sort-an-array/",
            "url": "https://samirpaul.in/posts/0912-sort-an-array/",
            "title": "0912 sort an array",
            "date_published": "2023-08-06T07:08:14.391Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/sort-an-array/\">912. Sort an Array</a></h2><h3>Medium</h3><hr><div><p>Given an array of integers <code>nums</code>, sort the array in ascending order and return it.</p>\n\n<p>You must solve the problem <strong>without using any built-in</strong> functions in <code>O(nlog(n))</code> time complexity and with the smallest space complexity possible.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [5,2,3,1]\n<strong>Output:</strong> [1,2,3,5]\n<strong>Explanation:</strong> After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [5,1,1,2,0,0]\n<strong>Output:</strong> [0,0,1,1,2,5]\n<strong>Explanation:</strong> Note that the values of nums are not necessairly unique.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= nums.length &lt;= 5 * 10<sup>4</sup></code></li>\n    <li><code>-5 * 10<sup>4</sup> &lt;= nums[i] &lt;= 5 * 10<sup>4</sup></code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">sortArray</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.mergesort(nums)</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">mergesort</span>(<span class=\"params\">self, arr</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> arr <span class=\"keyword\">or</span> <span class=\"built_in\">len</span>(arr) == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> arr</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(arr)</span><br><span class=\"line\">        a = self.mergesort(arr[:n//<span class=\"number\">2</span>])</span><br><span class=\"line\">        b = self.mergesort(arr[n//<span class=\"number\">2</span>:])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.merge(a, b)</span><br><span class=\"line\">            </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">merge</span>(<span class=\"params\">self, a, b</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> a <span class=\"keyword\">or</span> <span class=\"keyword\">not</span> b: <span class=\"keyword\">return</span> b <span class=\"keyword\">or</span> a</span><br><span class=\"line\">        arr = []</span><br><span class=\"line\">        i, j = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; <span class=\"built_in\">len</span>(a) <span class=\"keyword\">and</span> j &lt; <span class=\"built_in\">len</span>(b):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> a[i] &lt;= b[j]:</span><br><span class=\"line\">                arr.append(a[i])</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                arr.append(b[j])</span><br><span class=\"line\">                j += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; <span class=\"built_in\">len</span>(a):</span><br><span class=\"line\">            arr.append(a[i])</span><br><span class=\"line\">            i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> j &lt; <span class=\"built_in\">len</span>(b):</span><br><span class=\"line\">            arr.append(b[j])</span><br><span class=\"line\">            j += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0953-verifying-an-alien-dictionary/",
            "url": "https://samirpaul.in/posts/0953-verifying-an-alien-dictionary/",
            "title": "0953 verifying an alien dictionary",
            "date_published": "2023-08-06T07:08:14.391Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/verifying-an-alien-dictionary/\">953. Verifying an Alien Dictionary</a></h2><h3>Easy</h3><hr><div><p>In an alien language, surprisingly, they also use English lowercase letters, but possibly in a different <code>order</code>. The <code>order</code> of the alphabet is some permutation of lowercase letters.</p>\n\n<p>Given a sequence of <code>words</code> written in the alien language, and the <code>order</code> of the alphabet, return <code>true</code> if and only if the given <code>words</code> are sorted lexicographically in this alien language.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"\n<strong>Output:</strong> true\n<strong>Explanation: </strong>As 'h' comes before 'l' in this language, then the sequence is sorted.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"\n<strong>Output:</strong> false\n<strong>Explanation: </strong>As 'd' comes after 'l' in this language, then words[0] &gt; words[1], hence the sequence is unsorted.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"\n<strong>Output:</strong> false\n<strong>Explanation: </strong>The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" &gt; \"app\", because 'l' &gt; '‚àÖ', where '‚àÖ' is defined as the blank character which is less than any other character (<a href=\"https://en.wikipedia.org/wiki/Lexicographical_order\" target=\"_blank\">More info</a>).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= words.length &lt;= 100</code></li>\n    <li><code>1 &lt;= words[i].length &lt;= 20</code></li>\n    <li><code>order.length == 26</code></li>\n    <li>All characters in <code>words[i]</code> and <code>order</code> are English lowercase letters.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://leetcode.com/problems/verifying-an-alien-dictionary/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27; </span></span><br><span class=\"line\"><span class=\"string\">If a sequence of words is sorted, then each adjacent word of the sequence must also be sorted.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\\U0001f449 Lexicographically Sorted when -</span></span><br><span class=\"line\"><span class=\"string\">‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ú¶ If at first mismatch, mp[a[i]] &lt; mp[b[i]], or</span></span><br><span class=\"line\"><span class=\"string\">‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ú¶ If each letters of both words match and length(a) &lt;= length(b)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">\\U0001f449 Not Lexicographically Sorted when -</span></span><br><span class=\"line\"><span class=\"string\">‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ú¶ If at first mismatch, mp[a[i]] &gt; mp[b[i]], or</span></span><br><span class=\"line\"><span class=\"string\">‚ÄÉ‚ÄÉ‚ÄÉ‚ÄÉ‚ú¶ If each letters of both words match and length(a) &gt; length(b).</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isAlienSorted</span>(<span class=\"params\">self, words: <span class=\"type\">List</span>[<span class=\"built_in\">str</span>], order: <span class=\"built_in\">str</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        ind = &#123;c:i <span class=\"keyword\">for</span> i,c <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(order)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">checkOrder</span>(<span class=\"params\">w1, w2</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> s1, s2 <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(w1, w2):</span><br><span class=\"line\">                <span class=\"keyword\">if</span> ind[s1] != ind[s2]:</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> ind[s1] &lt; ind[s2]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(w1) &lt;= <span class=\"built_in\">len</span>(w2)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">all</span>(checkOrder(w1, w2) <span class=\"keyword\">for</span> w1, w2 <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(words, words[<span class=\"number\">1</span>:]))</span><br><span class=\"line\"></span><br><span class=\"line\">                </span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">‚ú¶ Time Complexity : O(N),   where N is the total number of characters in words.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">‚ú¶ Space Complexity : O(1),  we only need constant amount of space to store the mapping of letters to index which does not depend on the size of input. Hence we get constant space complexity.</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0958-check-completeness-of-a-binary-tree/",
            "url": "https://samirpaul.in/posts/0958-check-completeness-of-a-binary-tree/",
            "title": "0958 check completeness of a binary tree",
            "date_published": "2023-08-06T07:08:14.391Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/check-completeness-of-a-binary-tree/\">958. Check Completeness of a Binary Tree</a></h2><h3>Medium</h3><hr><div><p>Given the <code>root</code> of a binary tree, determine if it is a <em>complete binary tree</em>.</p>\n\n<p>In a <strong><a href=\"http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees\" target=\"_blank\">complete binary tree</a></strong>, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between <code>1</code> and <code>2<sup>h</sup></code> nodes inclusive at the last level <code>h</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-1.png\" style=\"width: 180px; height: 145px;\">\n<pre><strong>Input:</strong> root = [1,2,3,4,5,6]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-2.png\" style=\"width: 200px; height: 145px;\">\n<pre><strong>Input:</strong> root = [1,2,3,4,5,null,7]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> The node with value 7 isn't as far left as possible.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li>The number of nodes in the tree is in the range <code>[1, 100]</code>.</li>\n    <li><code>1 &lt;= Node.val &lt;= 1000</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = left</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = right</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isCompleteTree</span>(<span class=\"params\">self, root: <span class=\"type\">Optional</span>[TreeNode]</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        q = collections.deque()</span><br><span class=\"line\">        q.append(root)</span><br><span class=\"line\">        flag = <span class=\"literal\">False</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> q:</span><br><span class=\"line\">            n = <span class=\"built_in\">len</span>(q)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n):</span><br><span class=\"line\">                node = q.popleft()</span><br><span class=\"line\">                <span class=\"keyword\">if</span> node <span class=\"keyword\">and</span> flag: <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> node: </span><br><span class=\"line\">                    flag = <span class=\"literal\">True</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span></span><br><span class=\"line\">                q.append(node.left)</span><br><span class=\"line\">                q.append(node.right)</span><br><span class=\"line\">                </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">                </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0889-construct-binary-tree-from-preorder-and-postorder-traversal/",
            "url": "https://samirpaul.in/posts/0889-construct-binary-tree-from-preorder-and-postorder-traversal/",
            "title": "0889 construct binary tree from preorder and postorder traversal",
            "date_published": "2023-08-06T07:08:14.376Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/\">889. Construct Binary Tree from Preorder and Postorder Traversal</a></h2><h3>Medium</h3><hr><div><p>Given two integer arrays, <code>preorder</code> and <code>postorder</code> where <code>preorder</code> is the preorder traversal of a binary tree of <strong>distinct</strong> values and <code>postorder</code> is the postorder traversal of the same tree, reconstruct and return <em>the binary tree</em>.</p>\n\n<p>If there exist multiple answers, you can <strong>return any</strong> of them.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/24/lc-prepost.jpg\" style=\"width: 304px; height: 265px;\">\n<pre><strong>Input:</strong> preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]\n<strong>Output:</strong> [1,2,3,4,5,6,7]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> preorder = [1], postorder = [1]\n<strong>Output:</strong> [1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= preorder.length &lt;= 30</code></li>\n    <li><code>1 &lt;= preorder[i] &lt;= preorder.length</code></li>\n    <li>All the values of <code>preorder</code> are <strong>unique</strong>.</li>\n    <li><code>postorder.length == preorder.length</code></li>\n    <li><code>1 &lt;= postorder[i] &lt;= postorder.length</code></li>\n    <li>All the values of <code>postorder</code> are <strong>unique</strong>.</li>\n    <li>It is guaranteed that <code>preorder</code> and <code>postorder</code> are the preorder traversal and postorder traversal of the same binary tree.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = left</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = right</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">constructFromPrePost</span>(<span class=\"params\">self, preorder: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], postorder: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"type\">Optional</span>[TreeNode]:</span><br><span class=\"line\">        preInd = &#123;v:i <span class=\"keyword\">for</span> i, v <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(preorder)&#125;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">l, r, postorder</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l == r: <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> r-l == <span class=\"number\">1</span>: <span class=\"keyword\">return</span> TreeNode(postorder.pop())</span><br><span class=\"line\">            root = TreeNode(postorder.pop())</span><br><span class=\"line\">            i = preInd[postorder[-<span class=\"number\">1</span>]]</span><br><span class=\"line\">            root.right = solve(i, r, postorder)</span><br><span class=\"line\">            root.left = solve(l+<span class=\"number\">1</span>, i, postorder)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> root</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> solve(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(preorder), postorder)</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0894-all-possible-full-binary-trees/",
            "url": "https://samirpaul.in/posts/0894-all-possible-full-binary-trees/",
            "title": "0894 all possible full binary trees",
            "date_published": "2023-08-06T07:08:14.376Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/all-possible-full-binary-trees/\">894. All Possible Full Binary Trees</a></h2><h3>Medium</h3><hr><div><p>Given an integer <code>n</code>, return <em>a list of all possible <strong>full binary trees</strong> with</em> <code>n</code> <em>nodes</em>. Each node of each tree in the answer must have <code>Node.val == 0</code>.</p>\n\n<p>Each element of the answer is the root node of one possible tree. You may return the final list of trees in <strong>any order</strong>.</p>\n\n<p>A <strong>full binary tree</strong> is a binary tree where each node has exactly <code>0</code> or <code>2</code> children.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/22/fivetrees.png\" style=\"width: 700px; height: 400px;\">\n<pre><strong>Input:</strong> n = 7\n<strong>Output:</strong> [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> n = 3\n<strong>Output:</strong> [[0,0,0]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= n &lt;= 20</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://leetcode.com/problems/all-possible-full-binary-trees/</span></span><br><span class=\"line\"><span class=\"comment\"># https://youtu.be/nZtrZPTTCAo</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">Eg. N == 9</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">left sub-tree can have 1 node and right sub-tree can have 7 nodes</span></span><br><span class=\"line\"><span class=\"string\">left sub-tree can have 3 node and right sub-tree can have 5 node</span></span><br><span class=\"line\"><span class=\"string\">left sub-tree can have 5 node and right sub-tree can have 3 node</span></span><br><span class=\"line\"><span class=\"string\">left sub-tree can have 7 node and right sub-tree can have 1 node</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Definition for a binary tree node.</span></span><br><span class=\"line\"><span class=\"comment\"># class TreeNode:</span></span><br><span class=\"line\"><span class=\"comment\">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class=\"line\"><span class=\"comment\">#         self.val = val</span></span><br><span class=\"line\"><span class=\"comment\">#         self.left = left</span></span><br><span class=\"line\"><span class=\"comment\">#         self.right = right</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">allPossibleFBT</span>(<span class=\"params\">self, n: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">Optional</span>[TreeNode]]:</span><br><span class=\"line\">        dp = &#123;<span class=\"number\">0</span>:[], <span class=\"number\">1</span>:[TreeNode(<span class=\"number\">0</span>)]&#125;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">backtrack</span>(<span class=\"params\">n</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> n <span class=\"keyword\">in</span> dp:</span><br><span class=\"line\">                <span class=\"keyword\">return</span> dp[n]</span><br><span class=\"line\">            res = []</span><br><span class=\"line\">            <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                r = n - l - <span class=\"number\">1</span></span><br><span class=\"line\">                leftTrees = backtrack(l)</span><br><span class=\"line\">                rightTrees = backtrack(r)</span><br><span class=\"line\">                <span class=\"keyword\">for</span> t1 <span class=\"keyword\">in</span> leftTrees:</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> t2 <span class=\"keyword\">in</span> rightTrees:</span><br><span class=\"line\">                        res.append(TreeNode(<span class=\"number\">0</span>, t1, t2))</span><br><span class=\"line\">            </span><br><span class=\"line\">            dp[n] = res</span><br><span class=\"line\">            <span class=\"keyword\">return</span> res</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> backtrack(n)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0895-maximum-frequency-stack/",
            "url": "https://samirpaul.in/posts/0895-maximum-frequency-stack/",
            "title": "0895 maximum frequency stack",
            "date_published": "2023-08-06T07:08:14.376Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/maximum-frequency-stack/\">895. Maximum Frequency Stack</a></h2><h3>Hard</h3><hr><div><p>Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.</p>\n\n<p>Implement the <code>FreqStack</code> class:</p>\n\n<ul>\n    <li><code>FreqStack()</code> constructs an empty frequency stack.</li>\n    <li><code>void push(int val)</code> pushes an integer <code>val</code> onto the top of the stack.</li>\n    <li><code>int pop()</code> removes and returns the most frequent element in the stack.\n    <ul>\n        <li>If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.</li>\n    </ul>\n    </li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input</strong>\n[\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n[[], [5], [7], [5], [7], [4], [5], [], [], [], []]\n<strong>Output</strong>\n[null, null, null, null, null, null, null, 5, 7, 5, 4]\n\n<strong>Explanation</strong>\nFreqStack freqStack = new FreqStack();\nfreqStack.push(5); // The stack is [5]\nfreqStack.push(7); // The stack is [5,7]\nfreqStack.push(5); // The stack is [5,7,5]\nfreqStack.push(7); // The stack is [5,7,5,7]\nfreqStack.push(4); // The stack is [5,7,5,7,4]\nfreqStack.push(5); // The stack is [5,7,5,7,4,5]\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\nfreqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\nfreqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\nfreqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>0 &lt;= val &lt;= 10<sup>9</sup></code></li>\n    <li>At most <code>2 * 10<sup>4</sup></code> calls will be made to <code>push</code> and <code>pop</code>.</li>\n    <li>It is guaranteed that there will be at least one element in the stack before calling <code>pop</code>.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://leetcode.com/problems/maximum-frequency-stack/</span></span><br><span class=\"line\"><span class=\"comment\"># https://youtu.be/Z6idIicFDOE</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">import heapq</span></span><br><span class=\"line\"><span class=\"string\">class FreqStack:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def __init__(self):</span></span><br><span class=\"line\"><span class=\"string\">        self.cnt = collections.Counter()</span></span><br><span class=\"line\"><span class=\"string\">        self.maxHeap = []</span></span><br><span class=\"line\"><span class=\"string\">        self.indx = 0</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    def push(self, val):</span></span><br><span class=\"line\"><span class=\"string\">        self.cnt[val] += 1</span></span><br><span class=\"line\"><span class=\"string\">        self.indx += 1</span></span><br><span class=\"line\"><span class=\"string\">        heapq.heappush(self.maxHeap, (-self.cnt[val], -self.indx, val))</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\">    def pop(self):</span></span><br><span class=\"line\"><span class=\"string\">        val = self.maxHeap[0][2]</span></span><br><span class=\"line\"><span class=\"string\">        self.cnt[val] -= 1</span></span><br><span class=\"line\"><span class=\"string\">        heapq.heappop(self.maxHeap)</span></span><br><span class=\"line\"><span class=\"string\">        return val</span></span><br><span class=\"line\"><span class=\"string\">        </span></span><br><span class=\"line\"><span class=\"string\"># Time: O(log(N))</span></span><br><span class=\"line\"><span class=\"string\"># Space: O(N)</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FreqStack</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.cnt = &#123;&#125;</span><br><span class=\"line\">        self.stacks = &#123;&#125;</span><br><span class=\"line\">        self.maxCnt = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">push</span>(<span class=\"params\">self, val</span>):</span><br><span class=\"line\">        valCnt = <span class=\"number\">1</span> + self.cnt.get(val, <span class=\"number\">0</span>)</span><br><span class=\"line\">        self.cnt[val] = valCnt</span><br><span class=\"line\">        <span class=\"keyword\">if</span> self.maxCnt &lt; valCnt:</span><br><span class=\"line\">            self.maxCnt = valCnt</span><br><span class=\"line\">            self.stacks[valCnt] = []</span><br><span class=\"line\">        self.stacks[valCnt].append(val)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">pop</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># print(self.stacks)</span></span><br><span class=\"line\">        res = self.stacks[self.maxCnt].pop()</span><br><span class=\"line\">        self.cnt[res] -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> self.stacks[self.maxCnt]: </span><br><span class=\"line\">            self.maxCnt -= <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0877-stone-game/",
            "url": "https://samirpaul.in/posts/0877-stone-game/",
            "title": "0877 stone game",
            "date_published": "2023-08-06T07:08:14.360Z",
            "content_html": "<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">stoneGame</span>(<span class=\"params\">self, piles: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        dp = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">l, r</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> l &gt; r: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (l,r) <span class=\"keyword\">in</span> dp: <span class=\"keyword\">return</span> dp[(l,r)]</span><br><span class=\"line\">            even = <span class=\"literal\">True</span> <span class=\"keyword\">if</span> (r-l)%<span class=\"number\">2</span> <span class=\"keyword\">else</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            left = piles[l] + dfs(l+<span class=\"number\">1</span>, r) <span class=\"keyword\">if</span> even <span class=\"keyword\">else</span> dfs(l+<span class=\"number\">1</span>, r)</span><br><span class=\"line\">            right = piles[r] + dfs(l, r-<span class=\"number\">1</span>) <span class=\"keyword\">if</span> even <span class=\"keyword\">else</span> dfs(l, r-<span class=\"number\">1</span>)</span><br><span class=\"line\">            dp[(l,r)] = <span class=\"built_in\">max</span>(left, right)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> dp[(l,r)]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(piles)-<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0881-boats-to-save-people/",
            "url": "https://samirpaul.in/posts/0881-boats-to-save-people/",
            "title": "0881 boats to save people",
            "date_published": "2023-08-06T07:08:14.360Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/boats-to-save-people/\">881. Boats to Save People</a></h2><h3>Medium</h3><hr><div><p>You are given an array <code>people</code> where <code>people[i]</code> is the weight of the <code>i<sup>th</sup></code> person, and an <strong>infinite number of boats</strong> where each boat can carry a maximum weight of <code>limit</code>. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most <code>limit</code>.</p>\n\n<p>Return <em>the minimum number of boats to carry every given person</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> people = [1,2], limit = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> 1 boat (1, 2)\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> people = [3,2,2,1], limit = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> 3 boats (1, 2), (2) and (3)\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> people = [3,5,3,4], limit = 5\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 4 boats (3), (3), (4), (5)\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= people.length &lt;= 5 * 10<sup>4</sup></code></li>\n    <li><code>1 &lt;= people[i] &lt;= limit &lt;= 3 * 10<sup>4</sup></code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">numRescueBoats</span>(<span class=\"params\">self, people: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], limit: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        l,r = <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(people)-<span class=\"number\">1</span></span><br><span class=\"line\">        people.sort()</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> l &lt;= r:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> people[l] + people[r] &lt;= limit:</span><br><span class=\"line\">                l += <span class=\"number\">1</span></span><br><span class=\"line\">                r -= <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                r -= <span class=\"number\">1</span></span><br><span class=\"line\">            res += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0875-koko-eating-bananas/",
            "url": "https://samirpaul.in/posts/0875-koko-eating-bananas/",
            "title": "0875 koko eating bananas",
            "date_published": "2023-08-06T07:08:14.344Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/koko-eating-bananas/\">875. Koko Eating Bananas</a></h2><h3>Medium</h3><hr><div><p>Koko loves to eat bananas. There are <code>n</code> piles of bananas, the <code>i<sup>th</sup></code> pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>h</code> hours.</p>\n\n<p>Koko can decide her bananas-per-hour eating speed of <code>k</code>. Each hour, she chooses some pile of bananas and eats <code>k</code> bananas from that pile. If the pile has less than <code>k</code> bananas, she eats all of them instead and will not eat any more bananas during this hour.</p>\n\n<p>Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.</p>\n\n<p>Return <em>the minimum integer</em> <code>k</code> <em>such that she can eat all the bananas within</em> <code>h</code> <em>hours</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> piles = [3,6,7,11], h = 8\n<strong>Output:</strong> 4\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> piles = [30,11,23,4,20], h = 5\n<strong>Output:</strong> 30\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> piles = [30,11,23,4,20], h = 6\n<strong>Output:</strong> 23\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= piles.length &lt;= 10<sup>4</sup></code></li>\n    <li><code>piles.length &lt;= h &lt;= 10<sup>9</sup></code></li>\n    <li><code>1 &lt;= piles[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minEatingSpeed</span>(<span class=\"params\">self, piles, h</span>):</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">isValid</span>(<span class=\"params\">speed</span>):</span><br><span class=\"line\">            time = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> piles:</span><br><span class=\"line\">                time += math.ceil(num/speed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> time &lt;= h</span><br><span class=\"line\">        </span><br><span class=\"line\">        l, r, res = <span class=\"number\">1</span>, <span class=\"built_in\">max</span>(piles), <span class=\"built_in\">max</span>(piles)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> l &lt;= r:</span><br><span class=\"line\">            mid = l + (r-l)//<span class=\"number\">2</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> isValid(mid):</span><br><span class=\"line\">                res = <span class=\"built_in\">min</span>(res, mid)</span><br><span class=\"line\">                r = mid - <span class=\"number\">1</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                l = mid + <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># Time: O(N * log(M))      where M = max(piles)</span></span><br><span class=\"line\"><span class=\"comment\"># Space: O(1)</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0876-middle-of-the-linked-list/",
            "url": "https://samirpaul.in/posts/0876-middle-of-the-linked-list/",
            "title": "0876 middle of the linked list",
            "date_published": "2023-08-06T07:08:14.344Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/middle-of-the-linked-list/\">876. Middle of the Linked List</a></h2><h3>Easy</h3><hr><div><p>Given the <code>head</code> of a singly linked list, return <em>the middle node of the linked list</em>.</p>\n\n<p>If there are two middle nodes, return <strong>the second middle</strong> node.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-midlist1.jpg\" style=\"width: 544px; height: 65px;\">\n<pre><strong>Input:</strong> head = [1,2,3,4,5]\n<strong>Output:</strong> [3,4,5]\n<strong>Explanation:</strong> The middle node of the list is node 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2021/07/23/lc-midlist2.jpg\" style=\"width: 664px; height: 65px;\">\n<pre><strong>Input:</strong> head = [1,2,3,4,5,6]\n<strong>Output:</strong> [4,5,6]\n<strong>Explanation:</strong> Since the list has two middle nodes with values 3 and 4, we return the second one.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li>The number of nodes in the list is in the range <code>[1, 100]</code>.</li>\n    <li><code>1 &lt;= Node.val &lt;= 100</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://leetcode.com/problems/middle-of-the-linked-list/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Method 1</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">middleNode</span>(<span class=\"params\">self, head</span>):</span><br><span class=\"line\">        slow = head</span><br><span class=\"line\">        fast = head</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span> fast <span class=\"keyword\">and</span> fast.<span class=\"built_in\">next</span>:</span><br><span class=\"line\">            slow = slow.<span class=\"built_in\">next</span></span><br><span class=\"line\">            fast = fast.<span class=\"built_in\">next</span>.<span class=\"built_in\">next</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> slow</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># Method 2</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">middleNode</span>(<span class=\"params\">self, head</span>):</span><br><span class=\"line\">        cur = head</span><br><span class=\"line\">        length = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> cur:</span><br><span class=\"line\">            length += <span class=\"number\">1</span></span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">        mid = length//<span class=\"number\">2</span></span><br><span class=\"line\">        cur = head</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(mid):</span><br><span class=\"line\">            cur = cur.<span class=\"built_in\">next</span></span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"keyword\">return</span> cur</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0846-hand-of-straights/",
            "url": "https://samirpaul.in/posts/0846-hand-of-straights/",
            "title": "0846 hand of straights",
            "date_published": "2023-08-06T07:08:14.329Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/hand-of-straights/\">846. Hand of Straights</a></h2><h3>Medium</h3><hr><div><p>Alice has some number of cards and she wants to rearrange the cards into groups so that each group is of size <code>groupSize</code>, and consists of <code>groupSize</code> consecutive cards.</p>\n\n<p>Given an integer array <code>hand</code> where <code>hand[i]</code> is the value written on the <code>i<sup>th</sup></code> card and an integer <code>groupSize</code>, return <code>true</code> if she can rearrange the cards, or <code>false</code> otherwise.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\n<strong>Output:</strong> true\n<strong>Explanation:</strong> Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> hand = [1,2,3,4,5], groupSize = 4\n<strong>Output:</strong> false\n<strong>Explanation:</strong> Alice's hand can not be rearranged into groups of 4.\n\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= hand.length &lt;= 10<sup>4</sup></code></li>\n    <li><code>0 &lt;= hand[i] &lt;= 10<sup>9</sup></code></li>\n    <li><code>1 &lt;= groupSize &lt;= hand.length</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Note:</strong> This question is the same as 1296: <a href=\"https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/\" target=\"_blank\">https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/</a></p>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">isNStraightHand</span>(<span class=\"params\">self, hand: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], groupSize: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">bool</span>:</span><br><span class=\"line\">        cnt = collections.Counter(hand)</span><br><span class=\"line\">        i = <span class=\"number\">0</span></span><br><span class=\"line\">        sorted_cnt = <span class=\"built_in\">sorted</span>(cnt)</span><br><span class=\"line\">        <span class=\"keyword\">while</span> i &lt; <span class=\"built_in\">len</span>(cnt):</span><br><span class=\"line\">            c = sorted_cnt[i]</span><br><span class=\"line\">            <span class=\"keyword\">if</span> cnt[c] &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(c, c+groupSize):</span><br><span class=\"line\">                    cnt[j] -= <span class=\"number\">1</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> cnt[j] &lt; <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"literal\">False</span></span><br><span class=\"line\">            <span class=\"keyword\">else</span>:</span><br><span class=\"line\">                i += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0853-car-fleet/",
            "url": "https://samirpaul.in/posts/0853-car-fleet/",
            "title": "0853 car fleet",
            "date_published": "2023-08-06T07:08:14.329Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/car-fleet/\">853. Car Fleet</a></h2><h3>Medium</h3><hr><div><p>There are <code>n</code> cars going to the same destination along a one-lane road. The destination is <code>target</code> miles away.</p>\n\n<p>You are given two integer array <code>position</code> and <code>speed</code>, both of length <code>n</code>, where <code>position[i]</code> is the position of the <code>i<sup>th</sup></code> car and <code>speed[i]</code> is the speed of the <code>i<sup>th</sup></code> car (in miles per hour).</p>\n\n<p>A car can never pass another car ahead of it, but it can catch up to it&nbsp;and drive bumper to bumper <strong>at the same speed</strong>. The faster car will <strong>slow down</strong> to match the slower car's speed. The distance between these two cars is ignored (i.e., they are assumed to have the same position).</p>\n\n<p>A <strong>car fleet</strong> is some non-empty set of cars driving at the same position and same speed. Note that a single car is also a car fleet.</p>\n\n<p>If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.</p>\n\n<p>Return <em>the <strong>number of car fleets</strong> that will arrive at the destination</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nThe cars starting at 10 (speed 2) and 8 (speed 4) become a fleet, meeting each other at 12.\nThe car starting at 0 does not catch up to any other car, so it is a fleet by itself.\nThe cars starting at 5 (speed 1) and 3 (speed 3) become a fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\nNote that no other cars meet these fleets before the destination, so the answer is 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> target = 10, position = [3], speed = [3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> There is only one car, hence there is only one fleet.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre><strong>Input:</strong> target = 100, position = [0,2,4], speed = [4,2,1]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong>\nThe cars starting at 0 (speed 4) and 2 (speed 2) become a fleet, meeting each other at 4. The fleet moves at speed 2.\nThen, the fleet (speed 2) and the car starting at 4 (speed 1) become one fleet, meeting each other at 6. The fleet moves at speed 1 until it reaches target.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>n == position.length == speed.length</code></li>\n    <li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n    <li><code>0 &lt; target &lt;= 10<sup>6</sup></code></li>\n    <li><code>0 &lt;= position[i] &lt; target</code></li>\n    <li>All the values of <code>position</code> are <strong>unique</strong>.</li>\n    <li><code>0 &lt; speed[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">carFleet</span>(<span class=\"params\">self, target, position, speed</span>):</span><br><span class=\"line\">        ps = [(p,s) <span class=\"keyword\">for</span> p,s <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(position, speed)]</span><br><span class=\"line\">        ps.sort()</span><br><span class=\"line\">        time = [(target-p)/s <span class=\"keyword\">for</span> p,s <span class=\"keyword\">in</span> ps]</span><br><span class=\"line\">        <span class=\"comment\"># print(time)</span></span><br><span class=\"line\">        rmax = res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> t <span class=\"keyword\">in</span> time[::-<span class=\"number\">1</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">if</span> t &gt; rmax:</span><br><span class=\"line\">                rmax = t</span><br><span class=\"line\">                res += <span class=\"number\">1</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0797-all-paths-from-source-to-target/",
            "url": "https://samirpaul.in/posts/0797-all-paths-from-source-to-target/",
            "title": "0797 all paths from source to target",
            "date_published": "2023-08-06T07:08:14.313Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/all-paths-from-source-to-target/\">797. All Paths From Source to Target</a></h2><h3>Medium</h3><hr><div><p>Given a directed acyclic graph (<strong>DAG</strong>) of <code>n</code> nodes labeled from <code>0</code> to <code>n - 1</code>, find all possible paths from node <code>0</code> to node <code>n - 1</code> and return them in <strong>any order</strong>.</p>\n\n<p>The graph is given as follows: <code>graph[i]</code> is a list of all nodes you can visit from node <code>i</code> (i.e., there is a directed edge from node <code>i</code> to node <code>graph[i][j]</code>).</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg\" style=\"width: 242px; height: 242px;\">\n<pre><strong>Input:</strong> graph = [[1,2],[3],[3],[]]\n<strong>Output:</strong> [[0,1,3],[0,2,3]]\n<strong>Explanation:</strong> There are two paths: 0 -&gt; 1 -&gt; 3 and 0 -&gt; 2 -&gt; 3.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg\" style=\"width: 423px; height: 301px;\">\n<pre><strong>Input:</strong> graph = [[4,3,1],[3,2,4],[3],[4],[]]\n<strong>Output:</strong> [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>n == graph.length</code></li>\n    <li><code>2 &lt;= n &lt;= 15</code></li>\n    <li><code>0 &lt;= graph[i][j] &lt; n</code></li>\n    <li><code>graph[i][j] != i</code> (i.e., there will be no self-loops).</li>\n    <li>All the elements of <code>graph[i]</code> are <strong>unique</strong>.</li>\n    <li>The input graph is <strong>guaranteed</strong> to be a <strong>DAG</strong>.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">allPathsSourceTarget</span>(<span class=\"params\">self, graph: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]:</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(graph)</span><br><span class=\"line\">        adj = &#123;i:graph[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(graph))&#125;</span><br><span class=\"line\">        visited = <span class=\"built_in\">set</span>()</span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">i, path</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i == n-<span class=\"number\">1</span>:</span><br><span class=\"line\">                path.append(i)</span><br><span class=\"line\">                res.append(path)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> </span><br><span class=\"line\">            <span class=\"keyword\">if</span> i <span class=\"keyword\">in</span> visited: <span class=\"keyword\">return</span> </span><br><span class=\"line\">            visited.add(i)</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> adj[i]:</span><br><span class=\"line\">                solve(j, path + [i])</span><br><span class=\"line\">            visited.remove(i)</span><br><span class=\"line\">        </span><br><span class=\"line\">        solve(<span class=\"number\">0</span>, [])</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0801-minimum-swaps-to-make-sequences-increasing/",
            "url": "https://samirpaul.in/posts/0801-minimum-swaps-to-make-sequences-increasing/",
            "title": "0801 minimum swaps to make sequences increasing",
            "date_published": "2023-08-06T07:08:14.313Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/\">801. Minimum Swaps To Make Sequences Increasing</a></h2><h3>Hard</h3><hr><div><p>You are given two integer arrays of the same length <code>nums1</code> and <code>nums2</code>. In one operation, you are allowed to swap <code>nums1[i]</code> with <code>nums2[i]</code>.</p>\n\n<ul>\n    <li>For example, if <code>nums1 = [1,2,3,<u>8</u>]</code>, and <code>nums2 = [5,6,7,<u>4</u>]</code>, you can swap the element at <code>i = 3</code> to obtain <code>nums1 = [1,2,3,4]</code> and <code>nums2 = [5,6,7,8]</code>.</li>\n</ul>\n\n<p>Return <em>the minimum number of needed operations to make </em><code>nums1</code><em> and </em><code>nums2</code><em> <strong>strictly increasing</strong></em>. The test cases are generated so that the given input always makes it possible.</p>\n\n<p>An array <code>arr</code> is <strong>strictly increasing</strong> if and only if <code>arr[0] &lt; arr[1] &lt; arr[2] &lt; ... &lt; arr[arr.length - 1]</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums1 = [1,3,5,4], nums2 = [1,2,3,7]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nSwap nums1[3] and nums2[3]. Then the sequences are:\nnums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\nwhich are both strictly increasing.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums1 = [0,3,5,8,9], nums2 = [2,1,4,6,9]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>2 &lt;= nums1.length &lt;= 10<sup>5</sup></code></li>\n    <li><code>nums2.length == nums1.length</code></li>\n    <li><code>0 &lt;= nums1[i], nums2[i] &lt;= 2 * 10<sup>5</sup></code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">minSwap</span>(<span class=\"params\">self, nums1: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], nums2: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]</span>) -&gt; <span class=\"built_in\">int</span>:</span><br><span class=\"line\">        dp = [[-<span class=\"number\">1</span>]*<span class=\"number\">2</span> <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums1)+<span class=\"number\">1</span>)]</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">solve</span>(<span class=\"params\">prev1, prev2, i, swaped</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt;= <span class=\"built_in\">len</span>(nums1): <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dp[i][swaped] != -<span class=\"number\">1</span>: <span class=\"keyword\">return</span> dp[i][swaped] </span><br><span class=\"line\">            ans = <span class=\"number\">2</span>**<span class=\"number\">31</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums1[i] &gt; prev1 <span class=\"keyword\">and</span> nums2[i] &gt; prev2:</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans, solve(nums1[i], nums2[i], i+<span class=\"number\">1</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\">            <span class=\"keyword\">if</span> nums1[i] &gt; prev2 <span class=\"keyword\">and</span> nums2[i] &gt; prev1:</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans, <span class=\"number\">1</span> + solve(nums2[i], nums1[i], i+<span class=\"number\">1</span>, <span class=\"number\">1</span>))</span><br><span class=\"line\">            dp[i][swaped] = ans</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> solve(-<span class=\"number\">2</span>**<span class=\"number\">31</span>, -<span class=\"number\">2</span>**<span class=\"number\">31</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0802-find-eventual-safe-states/",
            "url": "https://samirpaul.in/posts/0802-find-eventual-safe-states/",
            "title": "0802 find eventual safe states",
            "date_published": "2023-08-06T07:08:14.313Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/find-eventual-safe-states/\">802. Find Eventual Safe States</a></h2><h3>Medium</h3><hr><div><p>There is a directed graph of <code>n</code> nodes with each node labeled from <code>0</code> to <code>n - 1</code>. The graph is represented by a <strong>0-indexed</strong> 2D integer array <code>graph</code> where <code>graph[i]</code> is an integer array of nodes adjacent to node <code>i</code>, meaning there is an edge from node <code>i</code> to each node in <code>graph[i]</code>.</p>\n\n<p>A node is a <strong>terminal node</strong> if there are no outgoing edges. A node is a <strong>safe node</strong> if every possible path starting from that node leads to a <strong>terminal node</strong> (or another safe node).</p>\n\n<p>Return <em>an array containing all the <strong>safe nodes</strong> of the graph</em>. The answer should be sorted in <strong>ascending</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"Illustration of graph\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\" style=\"height: 171px; width: 600px;\">\n<pre><strong>Input:</strong> graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n<strong>Output:</strong> [2,4,5,6]\n<strong>Explanation:</strong> The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\n<strong>Output:</strong> [4]\n<strong>Explanation:</strong>\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>n == graph.length</code></li>\n    <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n    <li><code>0 &lt;= graph[i].length &lt;= n</code></li>\n    <li><code>0 &lt;= graph[i][j] &lt;= n - 1</code></li>\n    <li><code>graph[i]</code> is sorted in a strictly increasing order.</li>\n    <li>The graph may contain self-loops.</li>\n    <li>The number of edges in the graph will be in the range <code>[1, 4 * 10<sup>4</sup>]</code>.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">eventualSafeNodes</span>(<span class=\"params\">self, graph: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"type\">List</span>[<span class=\"built_in\">int</span>]:</span><br><span class=\"line\">        safe = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">node</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> node <span class=\"keyword\">in</span> safe:        <span class=\"comment\"># Cycle found or previously checked</span></span><br><span class=\"line\">                <span class=\"keyword\">return</span> safe[node]</span><br><span class=\"line\">            safe[node] = <span class=\"literal\">False</span>      <span class=\"comment\"># <span class=\"doctag\">NOTE:</span> FOR CYCLE DETECTION</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> graph[node]:</span><br><span class=\"line\">                <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> dfs(i):      <span class=\"comment\"># visited i and not safe</span></span><br><span class=\"line\">                    <span class=\"keyword\">return</span> safe[i]  <span class=\"comment\"># stop further check</span></span><br><span class=\"line\">            safe[node] = <span class=\"literal\">True</span>       <span class=\"comment\"># all outgoing edges had been checked so safe node</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> safe[node]</span><br><span class=\"line\">        </span><br><span class=\"line\">        res = []</span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(graph)):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> dfs(i):</span><br><span class=\"line\">                res.append(i)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">NOTE:  </span></span><br><span class=\"line\"><span class=\"string\">initializing safe[node] = False, so before traversing all outgoing edges </span></span><br><span class=\"line\"><span class=\"string\">if we again reach node i.e, loop detected then return safe[node].</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Time: O(N)</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0812-largest-triangle-area/",
            "url": "https://samirpaul.in/posts/0812-largest-triangle-area/",
            "title": "0812 largest triangle area",
            "date_published": "2023-08-06T07:08:14.313Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/largest-triangle-area/\">812. Largest Triangle Area</a></h2><h3>Easy</h3><hr><div><p>Given an array of points on the <strong>X-Y</strong> plane <code>points</code> where <code>points[i] = [x<sub>i</sub>, y<sub>i</sub>]</code>, return <em>the area of the largest triangle that can be formed by any three different points</em>. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png\" style=\"height: 369px; width: 450px;\">\n<pre><strong>Input:</strong> points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\n<strong>Output:</strong> 2.00000\n<strong>Explanation:</strong> The five points are shown in the above figure. The red triangle is the largest.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> points = [[1,0],[0,0],[0,1]]\n<strong>Output:</strong> 0.50000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>3 &lt;= points.length &lt;= 50</code></li>\n    <li><code>-50 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 50</code></li>\n    <li>All the given points are <strong>unique</strong>.</li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># https://www.vedantu.com/question-answer/find-the-area-of-the-triangle-whose-vertices-are-class-11-maths-cbse-5f8309d2ed668270c0bf8f07</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">largestTriangleArea</span>(<span class=\"params\">self, points: <span class=\"type\">List</span>[<span class=\"type\">List</span>[<span class=\"built_in\">int</span>]]</span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">        n = <span class=\"built_in\">len</span>(points)</span><br><span class=\"line\">        res = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(n-<span class=\"number\">2</span>):</span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i+<span class=\"number\">1</span>, n-<span class=\"number\">1</span>):</span><br><span class=\"line\">                <span class=\"keyword\">for</span> k <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(j+<span class=\"number\">1</span>, n):</span><br><span class=\"line\">                    x1, y1 = points[i]</span><br><span class=\"line\">                    x2, y2 = points[j]</span><br><span class=\"line\">                    x3, y3 = points[k]</span><br><span class=\"line\">                    area = <span class=\"built_in\">abs</span>(<span class=\"number\">0.5</span> * (x1*(y2-y3) + x2*(y3-y1) + x3*(y1-y2)))</span><br><span class=\"line\">                    res = <span class=\"built_in\">max</span>(res, area)</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> res</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0813-largest-sum-of-averages/",
            "url": "https://samirpaul.in/posts/0813-largest-sum-of-averages/",
            "title": "0813 largest sum of averages",
            "date_published": "2023-08-06T07:08:14.313Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/largest-sum-of-averages/\">813. Largest Sum of Averages</a></h2><h3>Medium</h3><hr><div><p>You are given an integer array <code>nums</code> and an integer <code>k</code>. You can partition the array into <strong>at most</strong> <code>k</code> non-empty adjacent subarrays. The <strong>score</strong> of a partition is the sum of the averages of each subarray.</p>\n\n<p>Note that the partition must use every integer in <code>nums</code>, and that the score is not necessarily an integer.</p>\n\n<p>Return <em>the maximum <strong>score</strong> you can achieve of all the possible partitions</em>. Answers within <code>10<sup>-6</sup></code> of the actual answer will be accepted.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre><strong>Input:</strong> nums = [9,1,2,3,9], k = 3\n<strong>Output:</strong> 20.00000\n<strong>Explanation:</strong> \nThe best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\nWe could have also partitioned nums into [9, 1], [2], [3, 9], for example.\nThat partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre><strong>Input:</strong> nums = [1,2,3,4,5,6,7], k = 4\n<strong>Output:</strong> 20.50000\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= nums.length &lt;= 100</code></li>\n    <li><code>1 &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n    <li><code>1 &lt;= k &lt;= nums.length</code></li>\n</ul>\n</div>\n\n<hr>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>:</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">largestSumOfAverages</span>(<span class=\"params\">self, nums: <span class=\"type\">List</span>[<span class=\"built_in\">int</span>], k: <span class=\"built_in\">int</span></span>) -&gt; <span class=\"built_in\">float</span>:</span><br><span class=\"line\">        dp = [[-<span class=\"number\">1</span>] * (k+<span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(nums))]</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">i, k</span>):</span><br><span class=\"line\">            <span class=\"keyword\">if</span> i &gt;= <span class=\"built_in\">len</span>(nums) <span class=\"keyword\">or</span> k &lt; <span class=\"number\">0</span>: <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> k == <span class=\"number\">0</span>: <span class=\"keyword\">return</span> -<span class=\"number\">2</span>**<span class=\"number\">31</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> dp[i][k] != -<span class=\"number\">1</span>: <span class=\"keyword\">return</span> dp[i][k]</span><br><span class=\"line\">            ans = <span class=\"number\">0</span></span><br><span class=\"line\">            s = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(i, <span class=\"built_in\">len</span>(nums)):</span><br><span class=\"line\">                s += nums[j]</span><br><span class=\"line\">                ans = <span class=\"built_in\">max</span>(ans, s/(j-i+<span class=\"number\">1</span>) + dfs(j+<span class=\"number\">1</span>, k-<span class=\"number\">1</span>))</span><br><span class=\"line\">            dp[i][k] = ans</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> dfs(<span class=\"number\">0</span>, k)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\"># Time: O(N * K)</span></span><br><span class=\"line\"><span class=\"comment\"># Space: O(N * K)</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "LeetCode"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/0820-find-eventual-safe-states/",
            "url": "https://samirpaul.in/posts/0820-find-eventual-safe-states/",
            "title": "0820 find eventual safe states",
            "date_published": "2023-08-06T07:08:14.313Z",
            "content_html": "<h2><a href=\"https://leetcode.com/problems/find-eventual-safe-states\">820. Find Eventual Safe States</a></h2><h3>Medium</h3><hr><p>There is a directed graph of <code>n</code> nodes with each node labeled from <code>0</code> to <code>n - 1</code>. The graph is represented by a <strong>0-indexed</strong> 2D integer array <code>graph</code> where <code>graph[i]</code> is an integer array of nodes adjacent to node <code>i</code>, meaning there is an edge from node <code>i</code> to each node in <code>graph[i]</code>.</p>\n\n<p>A node is a <strong>terminal node</strong> if there are no outgoing edges. A node is a <strong>safe node</strong> if every possible path starting from that node leads to a <strong>terminal node</strong> (or another safe node).</p>\n\n<p>Return <em>an array containing all the <strong>safe nodes</strong> of the graph</em>. The answer should be sorted in <strong>ascending</strong> order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"Illustration of graph\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/17/picture1.png\" style=\"height: 171px; width: 600px;\" />\n<pre>\n<strong>Input:</strong> graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n<strong>Output:</strong> [2,4,5,6]\n<strong>Explanation:</strong> The given graph is shown above.\nNodes 5 and 6 are terminal nodes as there are no outgoing edges from either of them.\nEvery path starting at nodes 2, 4, 5, and 6 all lead to either node 5 or 6.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\n<strong>Output:</strong> [4]\n<strong>Explanation:</strong>\nOnly node 4 is a terminal node, and every path starting at node 4 leads to node 4.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>n == graph.length</code></li>\n    <li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n    <li><code>0 &lt;= graph[i].length &lt;= n</code></li>\n    <li><code>0 &lt;= graph[i][j] &lt;= n - 1</code></li>\n    <li><code>graph[i]</code> is sorted in a strictly increasing order.</li>\n    <li>The graph may contain self-loops.</li>\n    <li>The number of edges in the graph will be in the range <code>[1, 4 * 10<sup>4</sup>]</code>.</li>\n</ul>\n\n\n<hr>\n",
            "tags": [
                "LeetCode"
            ]
        }
    ]
}