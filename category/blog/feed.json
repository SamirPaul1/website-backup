{
    "version": "https://jsonfeed.org/version/1",
    "title": "Samir Paul • All posts by \"blog\" category",
    "description": "Software Engineer",
    "home_page_url": "https://samirpaul.in",
    "items": [
        {
            "id": "https://samirpaul.in/posts/sql-joins-inner-left-right-and-full-joins/",
            "url": "https://samirpaul.in/posts/sql-joins-inner-left-right-and-full-joins/",
            "title": "SQL Joins - Inner, Left, Right and Full Joins",
            "date_published": "2023-08-05T20:52:53.910Z",
            "content_html": "<p><strong>SQL Join</strong> statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are as follows: </p>\n<ul>\n<li>INNER JOIN</li>\n<li>LEFT JOIN</li>\n<li>RIGHT JOIN</li>\n<li>FULL JOIN</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/77569653/227738791-78897c64-4c15-4d6a-b75a-656c6a59a5d2.png\" alt=\"SQL Joins\"></p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "sql",
                "sql-joins"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-cheat-sheet-for-leetcode/",
            "url": "https://samirpaul.in/posts/python-cheat-sheet-for-leetcode/",
            "title": "Python Cheat Sheet for Leetcode",
            "date_published": "2023-08-05T20:52:53.907Z",
            "content_html": "<h1 id=\"Basics\"><a href=\"#Basics\" class=\"headerlink\" title=\"Basics\"></a>Basics</h1><ul>\n<li><p>Data Types</p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172329842-38f3de07-62d9-4d7d-9a19-fc576ee396a9.jpg\" alt=\"Untitled\"></p>\n</li>\n<li><p>Operators and it’s precendence</p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172329850-61fc0809-a4b0-416c-848b-1c502ecb4772.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<h1 id=\"Data-Structures\"><a href=\"#Data-Structures\" class=\"headerlink\" title=\"Data Structures\"></a>Data Structures</h1><p><em>Important data structures for Leetcode</em></p>\n<h2 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h2><blockquote>\n<p>Lists are used to store multiple items in a single variable</p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172330098-1c5f0a6e-7f80-4f4f-9be6-1d734e2c70cd.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nums = [1,2,3]</span><br><span class=\"line\"></span><br><span class=\"line\">nums.index(1) # returns index</span><br><span class=\"line\">nums.append(1) # appends 1</span><br><span class=\"line\">nums.insert(0,10) # inserts 10 at 0th index</span><br><span class=\"line\">nums.remove(3) # removes all instances of 3</span><br><span class=\"line\">nums.copy(1) # returns copy of the list</span><br><span class=\"line\">nums.count(1) # returns no.of times &#x27;1&#x27; is present in the list</span><br><span class=\"line\">nums.extend(someOtherList) # ...</span><br><span class=\"line\">nums.pop() # pops last element [which element to pop can also be given as optional argument]</span><br><span class=\"line\">nums.reverse() # reverses original list (nums in this case)</span><br><span class=\"line\">nums.sort() # sorts list [does NOT return sorted list]</span><br><span class=\"line\">#Python&#x27;s default sort uses Tim Sort, which is a combination of both merge sort and insertion sort.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">It&#x27;s pretty simple really:</span><br><span class=\"line\"></span><br><span class=\"line\">a[start:stop]  # items start through stop-1</span><br><span class=\"line\">a[start:]      # items start through the rest of the array</span><br><span class=\"line\">a[:stop]       # items from the beginning through stop-1</span><br><span class=\"line\">a[:]           # a copy of the whole array</span><br><span class=\"line\">There is also the step value, which can be used with any of the above:</span><br><span class=\"line\"></span><br><span class=\"line\">a[start:stop:step] # start through not past stop, by step</span><br><span class=\"line\">The key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).</span><br><span class=\"line\"></span><br><span class=\"line\">The other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:</span><br><span class=\"line\"></span><br><span class=\"line\">a[-1]    # last item in the array</span><br><span class=\"line\">a[-2:]   # last two items in the array</span><br><span class=\"line\">a[:-2]   # everything except the last two items</span><br><span class=\"line\">Similarly, step may be a negative number:</span><br><span class=\"line\"></span><br><span class=\"line\">a[::-1]    # all items in the array, reversed</span><br><span class=\"line\">a[1::-1]   # the first two items, reversed</span><br><span class=\"line\">a[:-3:-1]  # the last two items, reversed</span><br><span class=\"line\">a[-3::-1]  # everything except the last two items, reversed</span><br><span class=\"line\">Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</span><br><span class=\"line\"></span><br><span class=\"line\">Relation to slice() object</span><br><span class=\"line\">The slicing operator [] is actually being used in the above code with a slice() object using the : notation (which is only valid within []), i.e.:</span><br><span class=\"line\"></span><br><span class=\"line\">a[start:stop:step]</span><br><span class=\"line\">is equivalent to:</span><br><span class=\"line\"></span><br><span class=\"line\">a[slice(start, stop, step)]</span><br><span class=\"line\">Slice objects also behave slightly differently depending on the number of arguments, similarly to range(), i.e. both slice(stop) and slice(start, stop[, step]) are supported. To skip specifying a given argument, one might use None, so that e.g. a[start:] is equivalent to a[slice(start, None)] or a[::-1] is equivalent to a[slice(None, None, -1)].</span><br><span class=\"line\"></span><br><span class=\"line\">While the :-based notation is very helpful for simple slicing, the explicit use of slice() objects simplifies the programmatic generation of slicing.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Dictionary\"><a href=\"#Dictionary\" class=\"headerlink\" title=\"Dictionary\"></a>Dictionary</h2><blockquote>\n<p>Dictionaries are used to store data values in key:value pairs. <em>Info about <strong>collections.Counter()</strong> available below.</em></p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172330107-e68e3228-1c76-4bfb-bb38-04d18f94d5b9.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dict = &#123;&#x27;a&#x27;:1,&#x27;b&#x27;:2,&#x27;c&#x27;:3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dict.keys() # returns list of keys of dictionary</span><br><span class=\"line\">dict.values() # returns list of values of dictionary</span><br><span class=\"line\">dict.get(&#x27;a&#x27;) # returns value for any corresponding key</span><br><span class=\"line\">dict.items() # returns [(&#x27;a&#x27;,1),(&#x27;b&#x27;,2),(&#x27;c&#x27;,3)]</span><br><span class=\"line\">dict.copy() # returns copy of the dictionary</span><br><span class=\"line\"># NOTE : items() Returns view object that will be updated with any future changes to dict</span><br><span class=\"line\">dict.pop(KEY) # pops key-value pair with that key</span><br><span class=\"line\">dict.popitem() # removes most recent pair added</span><br><span class=\"line\">dict.setDefault(KEY,DEFAULT_VALUE) # returns value of key, if key exists, else default value returned</span><br><span class=\"line\"># If the key exist, this parameter(DEFAULT_VALUE) has no effect.</span><br><span class=\"line\"># If the key does not exist, DEFAULT_VALUE becomes the key&#x27;s value. 2nd argument&#x27;s default is None.</span><br><span class=\"line\">dict.update(&#123;KEY:VALUE&#125;) # inserts pair in dictionary if not present, if present, corresponding value is overriden (not key)</span><br><span class=\"line\"># defaultdict ensures that if any element is accessed that is not present in the dictionary</span><br><span class=\"line\"># it will be created and error will not be thrown (which happens in normal dictionary)</span><br><span class=\"line\"># Also, the new element created will be of argument type, for example in the below line</span><br><span class=\"line\"># an element of type &#x27;list&#x27; will be made for a Key that does not exist</span><br><span class=\"line\">myDictionary = defaultdict(list) </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Counter\"><a href=\"#Counter\" class=\"headerlink\" title=\"Counter\"></a>Counter</h2><blockquote>\n<p>Python Counter is a container that will hold the count of each of the elements present in the container. The counter is a sub-class available inside the dictionary class. Specifically used for element frequencies</p>\n</blockquote>\n<p><em>Pretty similar to dictionary, infact I use</em> <strong>defaultdict(int)</strong> <em>most of the time</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import Counter #(capital &#x27;C&#x27;)</span><br><span class=\"line\"># can also be used as &#x27;collections.Counter()&#x27; in code</span><br><span class=\"line\"></span><br><span class=\"line\">list1 = [&#x27;x&#x27;,&#x27;y&#x27;,&#x27;z&#x27;,&#x27;x&#x27;,&#x27;x&#x27;,&#x27;x&#x27;,&#x27;y&#x27;, &#x27;z&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\"># Initialization</span><br><span class=\"line\">Counter(list1) # =&gt; Counter(&#123;&#x27;x&#x27;: 4, &#x27;y&#x27;: 2, &#x27;z&#x27;: 2&#125;)</span><br><span class=\"line\">Counter(&quot;Welcome to Guru99 Tutorials!&quot;) # =&gt; Counter(&#123;&#x27;o&#x27;: 3, &#x27; &#x27;: 3, &#x27;u&#x27;: 3, &#x27;e&#x27;: 2.....&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"># Updating</span><br><span class=\"line\">counterObject = collections.Counter(list1)</span><br><span class=\"line\">counterObject.keys() = [ &#x27;x&#x27; , &#x27;y&#x27; , &#x27;z&#x27; ]</span><br><span class=\"line\">most_common_element = counterObject.most_common(1) # [(&#x27;x&#x27;, 4)]</span><br><span class=\"line\">counterObject.update(&quot;some string&quot;) # =&gt; Counter(&#123;&#x27;o&#x27;: 3, &#x27;u&#x27;: 3, &#x27;e&#x27;: 2, &#x27;s&#x27;: 2&#125;)</span><br><span class=\"line\">counterObject[&#x27;s&#x27;] += 1 # Increase/Decrease frequency</span><br><span class=\"line\"></span><br><span class=\"line\"># Accessing</span><br><span class=\"line\">frequency_of_s = counterObject[&#x27;s&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\"># Deleting</span><br><span class=\"line\">del couterObject[&#x27;s&#x27;]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Deque\"><a href=\"#Deque\" class=\"headerlink\" title=\"Deque\"></a>Deque</h2><blockquote>\n<p>A double-ended queue, or deque, has the feature of adding and removing elements from either end.</p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172330115-78500420-3276-4e45-8ce3-fd668b7eb14e.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from collections import deque</span><br><span class=\"line\"></span><br><span class=\"line\">queue = deque([&#x27;name&#x27;,&#x27;age&#x27;,&#x27;DOB&#x27;])</span><br><span class=\"line\"></span><br><span class=\"line\">queue.append(&quot;append_from_right&quot;) # Append from right</span><br><span class=\"line\">queue.pop() # Pop from right</span><br><span class=\"line\"></span><br><span class=\"line\">queue.appendleft(&quot;fromLeft&quot;) # Append from left</span><br><span class=\"line\">queue.popleft() # Pop from left</span><br><span class=\"line\"></span><br><span class=\"line\">queue.index(element,begin_index,end_index) # Returns first index of element b/w the 2 indices.</span><br><span class=\"line\">queue.insert(index,element)</span><br><span class=\"line\">queue.remove() # removes first occurrance</span><br><span class=\"line\">queue.count() # obvious</span><br><span class=\"line\"></span><br><span class=\"line\">queue.reverse() # reverses order of queue elements</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Heapq\"><a href=\"#Heapq\" class=\"headerlink\" title=\"Heapq\"></a>Heapq</h2><blockquote>\n<p>As we know the Heap Data Structure is used to implement the Priority Queue ADT. In python we can directly access a Priority Queue implemented using a Heap by using the <strong>Heapq</strong> library&#x2F;module.</p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172330122-29cf0756-89bc-4654-a4e8-4e318156c7d1.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import heapq # (minHeap by Default)</span><br><span class=\"line\"></span><br><span class=\"line\">nums = [5, 7, 9, 1, 3]</span><br><span class=\"line\"></span><br><span class=\"line\">heapq.heapify(nums) # converts list into heap. Can be converted back to list by list(nums).</span><br><span class=\"line\">heapq.heappush(nums,element) # Push an element into the heap</span><br><span class=\"line\">heapq.heappop(nums) # Pop an element from the heap</span><br><span class=\"line\">#heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.</span><br><span class=\"line\">#heappop(heap) :- This function is used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.</span><br><span class=\"line\"></span><br><span class=\"line\"># Other Methods Available in the Library</span><br><span class=\"line\"># Used to return the k largest elements from the iterable specified </span><br><span class=\"line\"># The key is a function with that accepts single element from iterable,</span><br><span class=\"line\"># and the returned value from that function is then used to rank that element in the heap</span><br><span class=\"line\">heapq.nlargest(k, iterable, key = fun)</span><br><span class=\"line\">heapq.nsmallest(k, iterable, key = fun)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Sets\"><a href=\"#Sets\" class=\"headerlink\" title=\"Sets\"></a>Sets</h2><blockquote>\n<p>A set is a collection which is unordered, immutable, unindexed, No Duplicates.</p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  <img src=\"https://user-images.githubusercontent.com/47276307/172330132-7a785f5f-bbc6-43b9-b82f-794190813787.jpg\" alt=\"Untitled\"></p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set = &#123;1,2,3&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">set.add(item)</span><br><span class=\"line\">set.remove(item)</span><br><span class=\"line\">set.discard(item) | set.remove(item) # removes item | remove will throw error if item is not there, discard will not</span><br><span class=\"line\">set.pop() # removes random item (since unordered)</span><br><span class=\"line\"></span><br><span class=\"line\">set.isdisjoint(anotherSet) # returns true if no common elements</span><br><span class=\"line\">set.issubset(anotherSet) # returns true if all elements from anotherSet is present in original set</span><br><span class=\"line\">set.issuperset(anotherSet) # returns true if all elements from original set is present in anotherSet</span><br><span class=\"line\"></span><br><span class=\"line\">set.difference(anotherSet) # returns set containing items ONLY in first set</span><br><span class=\"line\">set.difference_update(anotherSet) # removes common elements from first set [no new set is created or returned]</span><br><span class=\"line\">set.intersection(anotherSet) # returns new set with common elements</span><br><span class=\"line\">set.intersection_update(anotherSet) # modifies first set keeping only common elements</span><br><span class=\"line\">set.symmetric_difference(anotherSet) # returns set containing all non-common elements of both sets</span><br><span class=\"line\">set.symmetric_difference_update(anotherSet) # same as symmetric_difference but changes are made on original set</span><br><span class=\"line\"></span><br><span class=\"line\">set.union(anotherSet) # ...</span><br><span class=\"line\">set.update(anotherSet) # adds anotherSet without duplicate</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Tuples\"><a href=\"#Tuples\" class=\"headerlink\" title=\"Tuples\"></a>Tuples</h2><blockquote>\n<p>A tuple is a collection which is ordered, unchangeable and can contain duplicate values</p>\n</blockquote>\n<ul>\n<li><p><em>Operations Time Complexities</em></p>\n<p>  Similar to list</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tuple = (1,2,3,1)</span><br><span class=\"line\"></span><br><span class=\"line\">tuple.count(1) # returns occurence of an item</span><br><span class=\"line\">tuple.index(1) # returns index of 1 in array</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Strings\"><a href=\"#Strings\" class=\"headerlink\" title=\"Strings\"></a>Strings</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># ** split Function **</span><br><span class=\"line\">#The split() method breaks up a string at the specified separator and returns a list of strings.</span><br><span class=\"line\">text = &#x27;Python is a fun programming language&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># split the text from space</span><br><span class=\"line\">print(text.split(&#x27; &#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">#convert string to list</span><br><span class=\"line\">s=&quot;abcd&quot;</span><br><span class=\"line\">s=list(s)</span><br><span class=\"line\"></span><br><span class=\"line\"># Output: [&#x27;Python&#x27;, &#x27;is&#x27;, &#x27;a&#x27;, &#x27;fun&#x27;, &#x27;programming&#x27;, &#x27;language&#x27;]</span><br><span class=\"line\"></span><br><span class=\"line\"># ** count Function **</span><br><span class=\"line\">#The count() method returns the number of occurrences of a substring in the given string.</span><br><span class=\"line\">#Example</span><br><span class=\"line\">message = &#x27;python is popular programming language&#x27;</span><br><span class=\"line\"># number of occurrence of &#x27;p&#x27;</span><br><span class=\"line\">print(&#x27;Number of occurrence of p:&#x27;, message.count(&#x27;p&#x27;)) # Output: Number of occurrence of p: 4</span><br><span class=\"line\"></span><br><span class=\"line\">#The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.</span><br><span class=\"line\">s = &#x27;1242323&#x27;</span><br><span class=\"line\">print(s.isnumeric()) #Output: True</span><br><span class=\"line\"></span><br><span class=\"line\">#The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1.</span><br><span class=\"line\"># check the index of &#x27;fun&#x27;</span><br><span class=\"line\">print(message.find(&#x27;fun&#x27;)) # Output: 12</span><br><span class=\"line\"></span><br><span class=\"line\">#The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.</span><br><span class=\"line\"></span><br><span class=\"line\">name = &quot;M3onica Gell22er &quot;</span><br><span class=\"line\">print(name.isalnum()) # Output : False</span><br><span class=\"line\"></span><br><span class=\"line\">#The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False</span><br><span class=\"line\">name = &quot;Monica&quot;</span><br><span class=\"line\">print(name.isalpha()) #output true</span><br><span class=\"line\"></span><br><span class=\"line\">#other imp functions</span><br><span class=\"line\">string.strip([chars]) #The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).</span><br><span class=\"line\">string.upper() #he upper() method converts all lowercase characters in a string into uppercase characters and returns it.</span><br><span class=\"line\">string.lower() #The lower() method converts all uppercase characters in a string into lowercase characters and returns it.</span><br><span class=\"line\">string.islower()</span><br><span class=\"line\">string.isdigit()</span><br><span class=\"line\">string.isupper()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Built-in-or-Library-functions\"><a href=\"#Built-in-or-Library-functions\" class=\"headerlink\" title=\"Built-in or Library functions\"></a>Built-in or Library functions</h1><ul>\n<li><p>Functions to iterate over list &#x2F; other iterable (tuple, dictionaries)</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">** map(fun, iter) **</span><br><span class=\"line\">#fun : It is a function to which map passes each element of given iterable.</span><br><span class=\"line\">#iter : It is a iterable which is to be mapped.</span><br><span class=\"line\"></span><br><span class=\"line\">** zip(list,list) **</span><br><span class=\"line\">for elem1,elem2 in zip(firstList,secondList):</span><br><span class=\"line\">\t# will merge both lists and produce tuples with both elements</span><br><span class=\"line\">\t# Tuples will stop at shortest list (in case of both lists having different len)</span><br><span class=\"line\">#Example</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\">a = (&quot;John&quot;, &quot;Charles&quot;, &quot;Mike&quot;)</span><br><span class=\"line\">b = (&quot;Jenny&quot;, &quot;Christy&quot;, &quot;Monica&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">x = zip(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\">#use the tuple() function to display a readable version of the result:</span><br><span class=\"line\"></span><br><span class=\"line\">print(tuple(x))</span><br><span class=\"line\">o/p: ((&#x27;John&#x27;, &#x27;Jenny&#x27;), (&#x27;Charles&#x27;, &#x27;Christy&#x27;), (&#x27;Mike&#x27;, &#x27;Monica&#x27;))</span><br><span class=\"line\">&#x27;&#x27;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">** any(list) ** [ OPPOSITE IS =&gt; ** all() ** ]</span><br><span class=\"line\">any(someList) # returns true if ANY element in list is true [any string, all numbers except 0 also count as true]</span><br><span class=\"line\"></span><br><span class=\"line\">** enumerate(list|tuple) ** </span><br><span class=\"line\"># [when you need to attach indexes to lists or tuples ]</span><br><span class=\"line\">enumerate(anyList) # [&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;] =&gt; [(0, &#x27;a&#x27;), (1, &#x27;b&#x27;), (2, &#x27;c&#x27;)]</span><br><span class=\"line\"></span><br><span class=\"line\">** filter(function|list) **</span><br><span class=\"line\">filter(myFunction,list) # returns list with elements that returned true when passed in function</span><br><span class=\"line\"></span><br><span class=\"line\">***************** import bisect ***********************</span><br><span class=\"line\"></span><br><span class=\"line\">** bisect.bisect(list,number,begin,end) ** O(log(n))</span><br><span class=\"line\"># [ returns the index where the element should be inserted </span><br><span class=\"line\">#\t\tsuch that sorting order is maintained ]</span><br><span class=\"line\">a = [1,2,4]</span><br><span class=\"line\">bisect.bisect(a,3,0,4) # [1,2,4] =&gt; 2 coz &#x27;3&#x27; should be inserted in 2nd index to maintain sorting order</span><br><span class=\"line\"></span><br><span class=\"line\"># Other variants of this functions are =&gt; bisect.bisect_left() | bisect.bisect_right()</span><br><span class=\"line\"># they have same arguments. Suppose the element we want to insert is already present</span><br><span class=\"line\"># in the sorting list, the bisect_left() will return index left of the existing number</span><br><span class=\"line\"># and the bisect_right() or bisect() will return index right to the existing number</span><br><span class=\"line\"></span><br><span class=\"line\"># ** bisect.insort(list,number,begin,end)       ** O(n) to insert</span><br><span class=\"line\"># ** bisect.insort_right(list,number,begin,end) ** </span><br><span class=\"line\"># ** bisect.insort_left(list,number,begin,end)  ** </span><br><span class=\"line\"></span><br><span class=\"line\">The above 3 functions are exact same of bisect.bisect(), the only difference</span><br><span class=\"line\">is that they return the sorted list after inserting and not the index. The</span><br><span class=\"line\">left() right() logic is also same as above.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Getting ASCII value of a character</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">** ord(str) **</span><br><span class=\"line\"># returns ascii value of the character , Example ord(&quot;a&quot;) = 97</span><br><span class=\"line\">** chr(int) ** </span><br><span class=\"line\">#return character of given ascii value , Example chr(97) = &quot;a&quot;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"Clean-Code-Tips\"><a href=\"#Clean-Code-Tips\" class=\"headerlink\" title=\"Clean Code Tips\"></a>Clean Code Tips</h1><ul>\n<li><p><strong>Doc Strings -</strong> Documentation for your functions in the interview to look slic 😎</p>\n<p>  A docstring is short for documentation string.</p>\n<p>  Python docstrings (documentation strings) are the <a href=\"https://www.programiz.com/python-programming/string\">string</a> literals that appear right after the definition of a function, method, class, or module.</p>\n<p>  Triple quotes are used while writing docstrings. For example:</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def double(num):</span><br><span class=\"line\">    &quot;&quot;&quot;Function to double the value&quot;&quot;&quot;</span><br><span class=\"line\">    return 2*num</span><br></pre></td></tr></table></figure>\n<p>  Docstrings appear right after the definition of a function, class, or a module. This separates docstrings from multiline comments using triple quotes.</p>\n<p>  The docstrings are associated with the object as their <code>__doc__</code> attribute.</p>\n<p>  So, we can access the docstrings of the above function with the following lines of code:</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def double(num):</span><br><span class=\"line\">    &quot;&quot;&quot;Function to double the value&quot;&quot;&quot;</span><br><span class=\"line\">    return 2*num</span><br><span class=\"line\">print(double.__doc__)</span><br></pre></td></tr></table></figure>\n<p>  <strong>Output</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Function to double the value</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Use <strong>Assert keyword</strong> in python for testing edge cases. Looks more professional.</p>\n<h3 id=\"Definition-and-Usage\"><a href=\"#Definition-and-Usage\" class=\"headerlink\" title=\"Definition and Usage\"></a>Definition and Usage</h3><p>  The <code>assert</code> keyword is used when debugging code.</p>\n<p>  The <code>assert</code> keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.</p>\n<p>  You can write a message to be written if the code returns False, check the example below.</p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#if condition returns False, AssertionError is raised:</span><br><span class=\"line\">assert x == &quot;goodbye&quot;, &quot;x should be &#x27;hello&#x27;&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>ALWAYS</strong> be aware of any code snippet that is being <strong>REPEATED</strong> in your solution. <strong>MODULARITY</strong> #1 Priority. Refactoring is also an important part of interview.</p>\n<ul>\n<li>This is usually asked as a follow up after coding the solution. <em>Are there any changes you want to make to this solution?</em></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Miscellaneous\"><a href=\"#Miscellaneous\" class=\"headerlink\" title=\"Miscellaneous\"></a>Miscellaneous</h1><ul>\n<li><p>How to take multiple line input in python?</p>\n<ul>\n<li>Using split() method</li>\n<li>Using List comprehension</li>\n</ul>\n<p>  <strong>Syntax :</strong></p>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">input().split(separator, maxsplit)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h2>  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python program showing how to</span><br><span class=\"line\"># multiple input using split</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking two inputs at a time</span><br><span class=\"line\">x, y = input(&quot;Enter a two value: &quot;).split()</span><br><span class=\"line\">print(&quot;Number of boys: &quot;, x)</span><br><span class=\"line\">print(&quot;Number of girls: &quot;, y)</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking three inputs at a time</span><br><span class=\"line\">x, y, z = input(&quot;Enter a three value: &quot;).split()</span><br><span class=\"line\">print(&quot;Total number of students: &quot;, x)</span><br><span class=\"line\">print(&quot;Number of boys is : &quot;, y)</span><br><span class=\"line\">print(&quot;Number of girls is : &quot;, z)</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking two inputs at a time</span><br><span class=\"line\">a, b = input(&quot;Enter a two value: &quot;).split()</span><br><span class=\"line\">print(&quot;First number is &#123;&#125; and second number is &#123;&#125;&quot;.format(a, b))</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking multiple inputs at a time</span><br><span class=\"line\"># and type casting using list() function</span><br><span class=\"line\">x = list(map(int, input(&quot;Enter a multiple value: &quot;).split()))</span><br><span class=\"line\">print(&quot;List of students: &quot;, x)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python program showing</span><br><span class=\"line\"># how to take multiple input</span><br><span class=\"line\"># using List comprehension</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking two input at a time</span><br><span class=\"line\">x, y = [int(x) for x in input(&quot;Enter two value: &quot;).split()]</span><br><span class=\"line\">print(&quot;First Number is: &quot;, x)</span><br><span class=\"line\">print(&quot;Second Number is: &quot;, y)</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking three input at a time</span><br><span class=\"line\">x, y, z = [int(x) for x in input(&quot;Enter three value: &quot;).split()]</span><br><span class=\"line\">print(&quot;First Number is: &quot;, x)</span><br><span class=\"line\">print(&quot;Second Number is: &quot;, y)</span><br><span class=\"line\">print(&quot;Third Number is: &quot;, z)</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking two inputs at a time</span><br><span class=\"line\">x, y = [int(x) for x in input(&quot;Enter two value: &quot;).split()]</span><br><span class=\"line\">print(&quot;First number is &#123;&#125; and second number is &#123;&#125;&quot;.format(x, y))</span><br><span class=\"line\">print()</span><br><span class=\"line\"> </span><br><span class=\"line\"># taking multiple inputs at a time</span><br><span class=\"line\">x = [int(x) for x in input(&quot;Enter multiple value: &quot;).split()]</span><br><span class=\"line\">print(&quot;Number of list is: &quot;, x)</span><br><span class=\"line\"></span><br><span class=\"line\"># taking multiple inputs at a time separated by comma</span><br><span class=\"line\">x = [int(x) for x in input(&quot;Enter multiple value: &quot;).split(&quot;,&quot;)]</span><br><span class=\"line\">print(&quot;Number of list is: &quot;, x)</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax :</span><br><span class=\"line\">math.log(a,Base)</span><br><span class=\"line\">Parameters :a : The numeric value</span><br><span class=\"line\">Base :  Base to which the logarithm has to be computed.</span><br><span class=\"line\">Return Value :</span><br><span class=\"line\">Returns natural log if 1 argument is passed and log with</span><br><span class=\"line\">specified base if 2 arguments are passed.</span><br><span class=\"line\">Exceptions :</span><br><span class=\"line\">Raises ValueError is a negative no. is passed as argument.</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import math</span><br><span class=\"line\">  </span><br><span class=\"line\"># Printing the log base e of 14</span><br><span class=\"line\">print (&quot;Natural logarithm of 14 is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.log(14))</span><br><span class=\"line\">  </span><br><span class=\"line\"># Printing the log base 5 of 14</span><br><span class=\"line\">print (&quot;Logarithm base 5 of 14 is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.log(14,5))</span><br></pre></td></tr></table></figure>\n<ul>\n<li>Finding the ceiling and the floor value<ul>\n<li>Ceil value means the smallest integral value greater than the number and the floor value means the greatest integral value smaller than the number. This can be easily calculated using the ceil() and floor() method respectively.</li>\n</ul>\n</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Python code to demonstrate the working of</span><br><span class=\"line\"># ceil() and floor()</span><br><span class=\"line\"> </span><br><span class=\"line\"># importing &quot;math&quot; for mathematical operations</span><br><span class=\"line\">import math</span><br><span class=\"line\"> </span><br><span class=\"line\">a = 2.3</span><br><span class=\"line\"> </span><br><span class=\"line\"># returning the ceil of 2.3 (i.e 3)</span><br><span class=\"line\">print (&quot;The ceil of 2.3 is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.ceil(a))</span><br><span class=\"line\"> </span><br><span class=\"line\"># returning the floor of 2.3 (i.e 2)</span><br><span class=\"line\">print (&quot;The floor of 2.3 is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.floor(a))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Other Important functions</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#Constants</span><br><span class=\"line\"># Print the value of Euler e (2.718281828459045)</span><br><span class=\"line\">print (math.e)</span><br><span class=\"line\"># Print the value of pi (3.141592653589793)</span><br><span class=\"line\">print (math.pi)</span><br><span class=\"line\">print (math.gcd(b, a))</span><br><span class=\"line\">print (pow(3,4))</span><br><span class=\"line\"># print the square root of 4</span><br><span class=\"line\">print(math.sqrt(4))</span><br><span class=\"line\">a = math.pi/6</span><br><span class=\"line\">b = 30</span><br><span class=\"line\"> </span><br><span class=\"line\"># returning the converted value from radians to degrees</span><br><span class=\"line\">print (&quot;The converted value from radians to degrees is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.degrees(a))</span><br><span class=\"line\"> </span><br><span class=\"line\"># returning the converted value from degrees to radians</span><br><span class=\"line\">print (&quot;The converted value from degrees to radians is : &quot;, end=&quot;&quot;)</span><br><span class=\"line\">print (math.radians(b))</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">** bin(int) **</span><br><span class=\"line\">bin(anyNumber) # Returns binary version of number</span><br><span class=\"line\"></span><br><span class=\"line\">** divmod(int,int) **</span><br><span class=\"line\">divmod(dividend,divisor) # returns tuple like (quotient, remainder)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"How-the-custom-comparator-works\"><a href=\"#How-the-custom-comparator-works\" class=\"headerlink\" title=\"How the custom comparator works\"></a>How the custom comparator works</h2><p>  When providing a custom comparator, it should generally return an integer&#x2F;float value that follows the following pattern (as with most other programming languages and frameworks):</p>\n<ul>\n<li>return a negative value (<code>&lt; 0</code>) when the left item should be sorted <em>before</em> the right item</li>\n<li>return a positive value (<code>&gt; 0</code>) when the left item should be sorted <em>after</em> the right item</li>\n<li>return <code>0</code> when both the left and the right item have the same weight and should be ordered “equally” without precedence</li>\n</ul>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from functools import cmp_to_key</span><br><span class=\"line\">sorted(mylist, key=cmp_to_key(compare))</span><br><span class=\"line\"></span><br><span class=\"line\">#Example</span><br><span class=\"line\">def compare(item1, item2):</span><br><span class=\"line\">    if fitness(item1) &lt; fitness(item2):</span><br><span class=\"line\">        return -1</span><br><span class=\"line\">    elif fitness(item1) &gt; fitness(item2):</span><br><span class=\"line\">        return 1</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        return 0</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>Python integer division behaves differently with -ve numbers ex: -3&#x2F;&#x2F;2 will give -2 answer instead of -1 so always use int(-3&#x2F;2) for integer division in problems</p>\n</blockquote>\n<h1 id=\"Resources\"><a href=\"#Resources\" class=\"headerlink\" title=\"Resources\"></a>Resources</h1><p><a href=\"https://betterprogramming.pub/modulo-operation-with-negative-numbers-in-python-38cb7256bb32\">The Modulo Operation (%) With Negative Numbers in Python</a></p>\n<h3 id=\"Cheat-Sheet-PDF\"><a href=\"#Cheat-Sheet-PDF\" class=\"headerlink\" title=\"Cheat Sheet PDF\"></a>Cheat Sheet PDF</h3><p><a href=\"https://drive.google.com/file/d/1EojiCPYkyLi0f5DYW4UF3Lwp-Pwihr7q/view?usp=sharing\"><strong>Click Here</strong></a></p>\n",
            "tags": [
                "leetcode",
                "blog",
                "coding",
                "computer-science",
                "Python Cheat Sheet"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/graph-for-beginners/",
            "url": "https://samirpaul.in/posts/graph-for-beginners/",
            "title": "Graph For Beginners",
            "date_published": "2023-08-05T20:52:53.899Z",
            "content_html": "<p><strong>Graph Problems For Practice</strong></p>\n<p>Sharing some topic wise good Graph problems and sample solutions to observe on how to approach.</p>\n<p>List: <a href=\"https://leetcode.com/list/x1wy4de7\">https://leetcode.com/list/x1wy4de7</a></p>\n<ol>\n<li><p><strong>Union Find:</strong></p>\n<p> Identify if problems talks about finding groups or components.</p>\n<p> <a href=\"https://leetcode.com/problems/friend-circles/\">https://leetcode.com/problems/friend-circles/</a><br> <a href=\"https://leetcode.com/problems/redundant-connection/\">https://leetcode.com/problems/redundant-connection/</a><br> <a href=\"https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/\">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a><br> <a href=\"https://leetcode.com/problems/number-of-operations-to-make-network-connected/\">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a><br> <a href=\"https://leetcode.com/problems/satisfiability-of-equality-equations/\">https://leetcode.com/problems/satisfiability-of-equality-equations/</a><br> <a href=\"https://leetcode.com/problems/accounts-merge/\">https://leetcode.com/problems/accounts-merge/</a></p>\n<p> All the above problems can be solved by Union Find algorithm with minor tweaks.<br> Below is a standard template for union find problems.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tvector&lt;int&gt;parent;</span><br><span class=\"line\">\tint find(int x) &#123;</span><br><span class=\"line\">\t\treturn parent[x] == x ? x : find(parent[x]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tvector&lt;int&gt; findRedundantConnection(vector&lt;vector&lt;int&gt;&gt;&amp; edges) &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tint n = edges.size();</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tparent.resize(n+1, 0);</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt;= n; i++)</span><br><span class=\"line\">\t\t\tparent[i] = i;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\tvector&lt;int&gt;res(2, 0);</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tint x = find(edges[i][0]);</span><br><span class=\"line\">\t\t\tint y = find(edges[i][1]);</span><br><span class=\"line\">\t\t\tif (x != y)</span><br><span class=\"line\">\t\t\t\tparent[y] = x;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\tres[0] = edges[i][0];</span><br><span class=\"line\">\t\t\t\tres[1] = edges[i][1];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Depth First Search</strong></p>\n<ol>\n<li><p><strong>Start DFS from nodes at boundary:</strong><br> <a href=\"https://leetcode.com/problems/surrounded-regions/\">https://leetcode.com/problems/surrounded-regions/</a><br> <a href=\"https://leetcode.com/problems/number-of-enclaves/\">https://leetcode.com/problems/number-of-enclaves/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint rows, cols;</span><br><span class=\"line\">\tvoid dfs(vector&lt;vector&lt;int&gt;&gt;&amp; A, int i, int j) &#123;</span><br><span class=\"line\">\t\tif (i &lt; 0 || j &lt; 0 || i &gt;= rows || j &gt;= cols)</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tif (A[i][j] != 1) </span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tA[i][j] = -1;</span><br><span class=\"line\">\t\tdfs(A, i+1, j);</span><br><span class=\"line\">\t\tdfs(A, i-1, j);</span><br><span class=\"line\">\t\tdfs(A, i, j+1);</span><br><span class=\"line\">\t\tdfs(A, i, j-1);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint numEnclaves(vector&lt;vector&lt;int&gt;&gt;&amp; A) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tif (A.empty()) return 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\trows = A.size();</span><br><span class=\"line\">\t\tcols = A[0].size();</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; rows; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; cols; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (i == 0 || j == 0 || i == rows-1 || j == cols-1)</span><br><span class=\"line\">\t\t\t\t\tdfs(A, i, j);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint ans = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; rows; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; cols; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (A[i][j] == 1)</span><br><span class=\"line\">\t\t\t\t\tans++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Time taken to reach all nodes or share information to all graph nodes:</strong><br> <a href=\"https://leetcode.com/problems/time-needed-to-inform-all-employees/\">https://leetcode.com/problems/time-needed-to-inform-all-employees/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tvoid dfs(unordered_map&lt;int, vector&lt;int&gt;&gt;&amp;hm, int i, vector&lt;int&gt;&amp; informTime, int &amp;res, int curr) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tcurr += informTime[i];</span><br><span class=\"line\">\t\tres = max(res, curr);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tfor (auto it = hm[i].begin(); it != hm[i].end(); it++)</span><br><span class=\"line\">\t\t\tdfs(hm, *it, informTime, res, curr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint numOfMinutes(int n, int headID, vector&lt;int&gt;&amp; manager, vector&lt;int&gt;&amp; informTime) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tunordered_map&lt;int, vector&lt;int&gt;&gt;hm;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tif (manager[i] != -1) hm[manager[i]].push_back(i);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint res = 0, curr = 0;</span><br><span class=\"line\">\t\tdfs(hm, headID, informTime, res, curr);</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>DFS from each unvisited node&#x2F;Island problems</strong><br> <a href=\"https://leetcode.com/problems/number-of-closed-islands/\">https://leetcode.com/problems/number-of-closed-islands/</a><br> <a href=\"https://leetcode.com/problems/number-of-islands/\">https://leetcode.com/problems/number-of-islands/</a><br> <a href=\"https://leetcode.com/problems/keys-and-rooms/\">https://leetcode.com/problems/keys-and-rooms/</a><br> <a href=\"https://leetcode.com/problems/max-area-of-island/\">https://leetcode.com/problems/max-area-of-island/</a><br> <a href=\"https://leetcode.com/problems/flood-fill/\">https://leetcode.com/problems/flood-fill/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tvoid dfs(vector&lt;vector&lt;char&gt;&gt;&amp; grid, vector&lt;vector&lt;bool&gt;&gt;&amp; visited, int i, int j, int m, int n) &#123;</span><br><span class=\"line\">\t\tif (i &lt; 0 || i &gt;= m || j &lt; 0 || j &gt;= n) return;</span><br><span class=\"line\">\t\tif (grid[i][j] == &#x27;0&#x27; || visited[i][j]) return;</span><br><span class=\"line\">\t\tvisited[i][j] = true;</span><br><span class=\"line\">\t\tdfs(grid, visited, i+1, j, m, n);</span><br><span class=\"line\">\t\tdfs(grid, visited, i, j+1, m, n);</span><br><span class=\"line\">\t\tdfs(grid, visited, i-1, j, m, n);</span><br><span class=\"line\">\t\tdfs(grid, visited, i, j-1, m, n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\tint numIslands(vector&lt;vector&lt;char&gt;&gt;&amp; grid) &#123;</span><br><span class=\"line\">\t\tif (grid.empty()) return 0;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint m = grid.size();</span><br><span class=\"line\">\t\tint n = grid[0].size();</span><br><span class=\"line\">\t\tvector&lt;vector&lt;bool&gt;&gt;visited(m, vector&lt;bool&gt;(n, false));</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint res = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (grid[i][j] == &#x27;1&#x27; &amp;&amp; !visited[i][j]) &#123;</span><br><span class=\"line\">\t\t\t\t\tdfs(grid, visited, i, j, m, n);</span><br><span class=\"line\">\t\t\t\t\tres++;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Cycle Find:</strong><br> <a href=\"https://leetcode.com/problems/find-eventual-safe-states/\">https://leetcode.com/problems/find-eventual-safe-states/</a></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tbool dfs(vector&lt;vector&lt;int&gt;&gt;&amp; graph, int v, vector&lt;int&gt;&amp; dp) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tif (dp[v])</span><br><span class=\"line\">\t\t\treturn dp[v] == 1;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tdp[v] = -1;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tfor (auto it = graph[v].begin(); it != graph[v].end(); it++)</span><br><span class=\"line\">\t\t\tif (!dfs(graph, *it, dp))</span><br><span class=\"line\">\t\t\t\treturn false;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tdp[v] = 1;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn true;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tvector&lt;int&gt; eventualSafeNodes(vector&lt;vector&lt;int&gt;&gt;&amp; graph) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tint V = graph.size();</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tvector&lt;int&gt;res;</span><br><span class=\"line\">\t\tvector&lt;int&gt;dp(V, 0);</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; V; i++) &#123;    </span><br><span class=\"line\">\t\t\tif (dfs(graph, i, dp))</span><br><span class=\"line\">\t\t\t\tres.push_back(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p> };</p>\n</li>\n</ol>\n</li>\n<li><p><strong>Breadth First Search</strong></p>\n<ol>\n<li><p><strong>Shortest Path:</strong><br> <a href=\"https://leetcode.com/problems/01-matrix/\">https://leetcode.com/problems/01-matrix/</a><br> <a href=\"https://leetcode.com/problems/as-far-from-land-as-possible/\">https://leetcode.com/problems/as-far-from-land-as-possible/</a><br> <a href=\"https://leetcode.com/problems/rotting-oranges/\">https://leetcode.com/problems/rotting-oranges/</a><br> <a href=\"https://leetcode.com/problems/shortest-path-in-binary-matrix/\">https://leetcode.com/problems/shortest-path-in-binary-matrix/</a></p>\n<p> Start BFS from nodes from which shortest path is asked for.<br> Below is the sample BFS approach to find the path.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\tvector&lt;vector&lt;int&gt;&gt; updateMatrix(vector&lt;vector&lt;int&gt;&gt;&amp; matrix) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (matrix.empty()) return matrix;</span><br><span class=\"line\">\t\tint rows = matrix.size();</span><br><span class=\"line\">\t\tint cols = matrix[0].size();</span><br><span class=\"line\">\t\tqueue&lt;pair&lt;int, int&gt;&gt;pq;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; rows; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; cols; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (matrix[i][j] == 0) &#123;</span><br><span class=\"line\">\t\t\t\t\tpq.push(&#123;i-1, j&#125;), pq.push(&#123;i+1, j&#125;), pq.push(&#123;i, j-1&#125;), pq.push(&#123;i, j+1&#125;); </span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;vector&lt;bool&gt;&gt;visited(rows, vector&lt;bool&gt;(cols, false));</span><br><span class=\"line\">\t\tint steps = 0;</span><br><span class=\"line\">\t\twhile (!pq.empty()) &#123;</span><br><span class=\"line\">\t\t\tsteps++;</span><br><span class=\"line\">\t\t\tint size = pq.size();</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; size; i++) &#123;</span><br><span class=\"line\">\t\t\t\tauto front = pq.front();</span><br><span class=\"line\">\t\t\t\tint l = front.first;</span><br><span class=\"line\">\t\t\t\tint r = front.second;</span><br><span class=\"line\">\t\t\t\tpq.pop();</span><br><span class=\"line\">\t\t\t\tif (l &gt;= 0 &amp;&amp; r &gt;= 0 &amp;&amp; l &lt; rows &amp;&amp; r &lt; cols &amp;&amp; !visited[l][r] &amp;&amp; matrix[l][r] == 1) &#123;</span><br><span class=\"line\">\t\t\t\t\tvisited[l][r] = true;</span><br><span class=\"line\">\t\t\t\t\tmatrix[l][r] = steps;</span><br><span class=\"line\">\t\t\t\t\tpq.push(&#123;l-1, r&#125;), pq.push(&#123;l+1, r&#125;), pq.push(&#123;l, r-1&#125;), pq.push(&#123;l, r+1&#125;);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn matrix;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p><strong>Graph coloring&#x2F;Bipartition</strong><br> <a href=\"https://leetcode.com/problems/possible-bipartition/\">https://leetcode.com/problems/possible-bipartition/</a><br> <a href=\"https://leetcode.com/problems/is-graph-bipartite/\">https://leetcode.com/problems/is-graph-bipartite/</a></p>\n<p> Problems asks to check if its possible to divide the graph nodes into 2 groups<br> Apply BFS for same. Below is a sample graph coloring approach.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tbool isBipartite(vector&lt;vector&lt;int&gt;&gt;&amp; graph) &#123;</span><br><span class=\"line\">\t\t\tint n = graph.size();</span><br><span class=\"line\">\t\t\tvector&lt;int&gt;color(n, -1);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t\tif (color[i] != -1) continue;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\t\tcolor[i] = 1;</span><br><span class=\"line\">\t\t\t\tqueue&lt;int&gt;q;</span><br><span class=\"line\">\t\t\t\tq.push(i);</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\t\twhile (!q.empty()) &#123;</span><br><span class=\"line\">\t\t\t\t\tint t = q.front();</span><br><span class=\"line\">\t\t\t\t\tq.pop();</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\t\t\tfor (int j = 0; j &lt; graph[t].size(); j++) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tif (color[graph[t][j]] == -1) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tcolor[graph[t][j]] = 1-color[t];</span><br><span class=\"line\">\t\t\t\t\t\t\tq.push(graph[t][j]);</span><br><span class=\"line\">\t\t\t\t\t\t&#125; else if (color[graph[t][j]] == color[t]) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\treturn false;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Topological Sort:</strong><br> Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0</p>\n<p> <a href=\"https://leetcode.com/problems/course-schedule/\">https://leetcode.com/problems/course-schedule/</a><br> <a href=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a></p>\n<p> Below is sample approach. Find if cycle is present, if not apply topological sort.</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint V;</span><br><span class=\"line\">\tlist&lt;int&gt;*adj;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tbool isCyclicUtil(int v, vector&lt;bool&gt;&amp;visited, vector&lt;bool&gt;&amp;recStack) &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tvisited[v] = true;</span><br><span class=\"line\">\t\trecStack[v] = true;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (auto it = adj[v].begin(); it != adj[v].end(); it++) &#123;</span><br><span class=\"line\">\t\t\tif (!visited[*it] &amp;&amp; isCyclicUtil(*it, visited, recStack))</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t\telse if (recStack[*it])</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\trecStack[v] = false;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tbool isCyclic() &#123;</span><br><span class=\"line\">\t\tvector&lt;bool&gt;visited(V, false);</span><br><span class=\"line\">\t\tvector&lt;bool&gt;recStack(V, false);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; V; i++) &#123;</span><br><span class=\"line\">\t\t\tif (isCyclicUtil(i, visited, recStack))</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvoid topologicalSortUtil(int v, vector&lt;bool&gt;&amp;visited, vector&lt;int&gt;&amp; res) &#123;</span><br><span class=\"line\">\t\tvisited[v] = true;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (auto it = adj[v].begin(); it != adj[v].end(); it++)</span><br><span class=\"line\">\t\t\tif (!visited[*it])</span><br><span class=\"line\">\t\t\t\ttopologicalSortUtil(*it, visited, res);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tres.push_back(v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tvector&lt;int&gt;topologicalSort(int v) &#123;</span><br><span class=\"line\">\t\tvector&lt;int&gt;res;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tvector&lt;bool&gt;visited(V, false);</span><br><span class=\"line\">\t\ttopologicalSortUtil(v, visited, res);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; V; i++) &#123;</span><br><span class=\"line\">\t\t\tif (!visited[i])</span><br><span class=\"line\">\t\t\t\ttopologicalSortUtil(i, visited, res);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\tvector&lt;int&gt; findOrder(int numCourses, vector&lt;vector&lt;int&gt;&gt;&amp; prerequisites) &#123;</span><br><span class=\"line\">\t\tV = numCourses;</span><br><span class=\"line\">\t\tadj = new list&lt;int&gt;[V];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\tunordered_map&lt;int, vector&lt;int&gt;&gt;hm;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; prerequisites.size(); i++) &#123;</span><br><span class=\"line\">\t\t\tadj[prerequisites[i][0]].push_back(prerequisites[i][1]);</span><br><span class=\"line\">\t\t\thm[prerequisites[i][1]].push_back(prerequisites[i][0]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tif (isCyclic()) return vector&lt;int&gt;();</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tint i = 0;</span><br><span class=\"line\">\t\tfor (i = 0; i &lt; V; i++) &#123;</span><br><span class=\"line\">\t\t\tif (hm.find(i) == hm.end())</span><br><span class=\"line\">\t\t\t\tbreak;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\treturn topologicalSort(i);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p> };</p>\n</li>\n<li><p><strong>Find Shortest Path (Dijkstra’s&#x2F;Bellman Ford)</strong><br> <a href=\"https://leetcode.com/problems/network-delay-time/\">https://leetcode.com/problems/network-delay-time/</a></p>\n<p> <strong>Dijkstras and Bellman Ford:</strong></p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tint networkDelayTime(vector&lt;vector&lt;int&gt;&gt;&amp; times, int N, int K) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tpriority_queue&lt;pair&lt;int, int&gt;, vector&lt;pair&lt;int, int&gt;&gt;, greater&lt;pair&lt;int, int&gt;&gt;&gt;pq;</span><br><span class=\"line\">\t\t\tvector&lt;int&gt;dist(N+1, INT_MAX);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tpq.push(make_pair(0, K));</span><br><span class=\"line\">\t\t\tdist[K] = 0;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tunordered_map&lt;int, vector&lt;pair&lt;int, int&gt;&gt;&gt;hm;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; times.size(); i++)</span><br><span class=\"line\">\t\t\t\thm[times[i][0]].push_back(make_pair(times[i][1], times[i][2]));</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\twhile (!pq.empty()) &#123;</span><br><span class=\"line\">\t\t\t\tpair&lt;int, int&gt;p = pq.top();</span><br><span class=\"line\">\t\t\t\tpq.pop();</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tint u = p.second;</span><br><span class=\"line\">\t\t\t\tfor (auto it = hm[u].begin(); it != hm[u].end(); it++) &#123;</span><br><span class=\"line\">\t\t\t\t\tint v = it-&gt;first;</span><br><span class=\"line\">\t\t\t\t\tint w = it-&gt;second;</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\t\t\tif (dist[v] &gt; dist[u] + w) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tdist[v] = dist[u] + w;</span><br><span class=\"line\">\t\t\t\t\t\tpq.push(make_pair(dist[v], v));</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tint res = 0;</span><br><span class=\"line\">\t\t\tfor (int i = 1; i &lt;= N; i++)</span><br><span class=\"line\">\t\t\t\tres = max(res, dist[i]);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\treturn res == INT_MAX ? -1 : res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">\tclass Solution &#123;</span><br><span class=\"line\">\tpublic:</span><br><span class=\"line\">\t\tint networkDelayTime(vector&lt;vector&lt;int&gt;&gt;&amp; times, int N, int K) &#123;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tint n = times.size();</span><br><span class=\"line\">\t\t\tif (!n) return 0;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tvector&lt;int&gt;dist(N+1, INT_MAX);</span><br><span class=\"line\">\t\t\tint res = 0;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tdist[K] = 0;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; N; i++) &#123;</span><br><span class=\"line\">\t\t\t\tfor (int j = 0; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t\t\tint u = times[j][0];</span><br><span class=\"line\">\t\t\t\t\tint v = times[j][1];</span><br><span class=\"line\">\t\t\t\t\tint w = times[j][2];</span><br><span class=\"line\">\t\t\t\t\tif (dist[u] != INT_MAX &amp;&amp; dist[u] + w &lt; dist[v])</span><br><span class=\"line\">\t\t\t\t\t\tdist[v] = w + dist[u];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tfor (int i = 1; i &lt;= N; i++)</span><br><span class=\"line\">\t\t\t\tres = max(res, dist[i]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\treturn res == INT_MAX ? -1 : res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>Complete List: Below are mostly list of problems (mostly medium level and may 1 or 2 easy) which are better to start practice with:<br>(Updated on 14th June ‘20)</p>\n<p><strong>Union Find:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/friend-circles/\">https://leetcode.com/problems/friend-circles/</a></li>\n<li><a href=\"https://leetcode.com/problems/redundant-connection/\">https://leetcode.com/problems/redundant-connection/</a></li>\n<li><a href=\"https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/\">https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/</a></li>\n<li><a href=\"https://leetcode.com/problems/number-of-operations-to-make-network-connected/\">https://leetcode.com/problems/number-of-operations-to-make-network-connected/</a></li>\n<li><a href=\"https://leetcode.com/problems/satisfiability-of-equality-equations/\">https://leetcode.com/problems/satisfiability-of-equality-equations/</a></li>\n<li><a href=\"https://leetcode.com/problems/accounts-merge/\">https://leetcode.com/problems/accounts-merge/</a></li>\n<li><a href=\"https://leetcode.com/problems/connecting-cities-with-minimum-cost/\">https://leetcode.com/problems/connecting-cities-with-minimum-cost/</a></li>\n</ol>\n<p><strong>DFS:</strong><br>DFS from boundary:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/surrounded-regions/\">https://leetcode.com/problems/surrounded-regions/</a></li>\n<li><a href=\"https://leetcode.com/problems/number-of-enclaves/\">https://leetcode.com/problems/number-of-enclaves/</a></li>\n</ol>\n<p>Shortest time:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/time-needed-to-inform-all-employees/\">https://leetcode.com/problems/time-needed-to-inform-all-employees/</a></li>\n</ol>\n<p>Islands Variants</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/number-of-closed-islands/\">https://leetcode.com/problems/number-of-closed-islands/</a></li>\n<li><a href=\"https://leetcode.com/problems/number-of-islands/\">https://leetcode.com/problems/number-of-islands/</a></li>\n<li><a href=\"https://leetcode.com/problems/keys-and-rooms/\">https://leetcode.com/problems/keys-and-rooms/</a></li>\n<li><a href=\"https://leetcode.com/problems/max-area-of-island/\">https://leetcode.com/problems/max-area-of-island/</a></li>\n<li><a href=\"https://leetcode.com/problems/flood-fill/\">https://leetcode.com/problems/flood-fill/</a></li>\n<li><a href=\"https://leetcode.com/problems/coloring-a-border/\">https://leetcode.com/problems/coloring-a-border/</a></li>\n</ol>\n<p>Hash&#x2F;DFS:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/employee-importance/\">https://leetcode.com/problems/employee-importance/</a></li>\n<li><a href=\"https://leetcode.com/problems/find-the-town-judge/\">https://leetcode.com/problems/find-the-town-judge/</a></li>\n</ol>\n<p>Cycle Find:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/find-eventual-safe-states/\">https://leetcode.com/problems/find-eventual-safe-states/</a></li>\n</ol>\n<p><strong>BFS:</strong><br>BFS for shortest path:</p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/01-matrix/\">https://leetcode.com/problems/01-matrix/</a></li>\n<li><a href=\"https://leetcode.com/problems/as-far-from-land-as-possible/\">https://leetcode.com/problems/as-far-from-land-as-possible/</a></li>\n<li><a href=\"https://leetcode.com/problems/rotting-oranges/\">https://leetcode.com/problems/rotting-oranges/</a></li>\n<li><a href=\"https://leetcode.com/problems/shortest-path-in-binary-matrix/\">https://leetcode.com/problems/shortest-path-in-binary-matrix/</a></li>\n</ol>\n<p><strong>Graph coloring:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/possible-bipartition/\">https://leetcode.com/problems/possible-bipartition/</a></li>\n<li><a href=\"https://leetcode.com/problems/is-graph-bipartite/\">https://leetcode.com/problems/is-graph-bipartite/</a></li>\n</ol>\n<p><strong>Topological Sort:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/course-schedule-ii/\">https://leetcode.com/problems/course-schedule-ii/</a></li>\n</ol>\n<p><strong>Shortest Path:</strong></p>\n<ol>\n<li><a href=\"https://leetcode.com/problems/network-delay-time/\">https://leetcode.com/problems/network-delay-time/</a></li>\n<li><a href=\"https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/\">https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/</a></li>\n<li><a href=\"https://leetcode.com/problems/cheapest-flights-within-k-stops/\">https://leetcode.com/problems/cheapest-flights-within-k-stops/</a></li>\n</ol>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "Graph"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/binary-search-template/",
            "url": "https://samirpaul.in/posts/binary-search-template/",
            "title": "Binary Search Template",
            "date_published": "2023-08-05T20:52:53.890Z",
            "content_html": "<p>Binary Search is quite easy to understand conceptually. Basically, it splits the search space into two halves and only keep the half that probably has the search target and throw away the other half that would not possibly have the answer. In this manner, we reduce the search space to half the size at every step, until we find the target. Binary Search helps us reduce the search time from linear O(n) to logarithmic O(log n). <strong>But when it comes to implementation, it’s rather difficult to write a bug-free code in just a few minutes</strong>. Some of the most common problems include:</p>\n<ul>\n<li>When to exit the loop? Should we use <code>left &lt; right</code> or <code>left &lt;= right</code> as the while loop condition?</li>\n<li>How to initialize the boundary variable <code>left</code> and <code>right</code>?</li>\n<li>How to update the boundary? How to choose the appropriate combination from <code>left = mid</code>, <code>left = mid + 1</code> and <code>right = mid</code>, <code>right = mid - 1</code>?</li>\n</ul>\n<p>A rather common misunderstanding of binary search is that people often think this technique could only be used in simple scenario like “Given a sorted array, find a specific value in it”. As a matter of fact, it can be applied to much more complicated situations.</p>\n<p>After a lot of practice in LeetCode, I’ve made a powerful binary search template and solved many Hard problems by just slightly twisting this template. I’ll share the template with you guys in this post. <strong>I don’t want to just show off the code and leave. Most importantly, I want to share the logical thinking: how to apply this general template to all sorts of problems</strong>. Hopefully, after reading this post, people wouldn’t be pissed off any more when LeetCoding, “This problem could be solved with binary search! Why didn’t I think of that before!”</p>\n<hr>\n<h1 id=\"Most-Generalized-Binary-Search\"><a href=\"#Most-Generalized-Binary-Search\" class=\"headerlink\" title=\"&gt;&gt; Most Generalized Binary Search\"></a>&gt;&gt; Most Generalized Binary Search</h1><p>Suppose we have a <strong>search space</strong>. It could be an array, a range, etc. Usually it’s sorted in ascending order. For most tasks, we can transform the requirement into the following generalized form:</p>\n<p><strong>Minimize k , s.t. condition(k) is True</strong></p>\n<p>The following code is the most generalized binary search template:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def binary_search(array) -&gt; int:</span><br><span class=\"line\">    def condition(value) -&gt; bool:</span><br><span class=\"line\">        pass</span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = min(search_space), max(search_space) # could be [0, n], [1, n] etc. Depends on problem</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if condition(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<p>What’s really nice of this template is that, for most of the binary search problems, <strong>we only need to modify three parts after copy-pasting this template, and never need to worry about corner cases and bugs in code any more</strong>:</p>\n<ul>\n<li>Correctly initialize the boundary variables <code>left</code> and <code>right</code> to specify search space. Only one rule: set up the boundary to <strong>include all possible elements</strong>;</li>\n<li>Decide return value. Is it <code>return left</code> or <code>return left - 1</code>? Remember this: <strong>after exiting the while loop, <code>left</code> is the minimal k​ satisfying the <code>condition</code> function</strong>;</li>\n<li>Design the <code>condition</code> function. This is the most difficult and most beautiful part. Needs lots of practice.</li>\n</ul>\n<p>Below I’ll show you guys how to apply this powerful template to many LeetCode problems.</p>\n<hr>\n<h1 id=\"Basic-Application\"><a href=\"#Basic-Application\" class=\"headerlink\" title=\"&gt;&gt; Basic Application\"></a>&gt;&gt; Basic Application</h1><h2 id=\"278-First-Bad-Version-Easy\"><a href=\"#278-First-Bad-Version-Easy\" class=\"headerlink\" title=\"278. First Bad Version [Easy]\"></a><a href=\"https://leetcode.com/problems/first-bad-version/\">278. First Bad Version [Easy]</a></h2><p>You are a product manager and currently leading a team to develop a new product. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have <code>n</code> versions <code>[1, 2, ..., n]</code> and you want to find out the first bad one, which causes all the following ones to be bad. You are given an API <code>bool isBadVersion(version)</code> which will return whether <code>version</code> is bad.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Given n = 5, and version = 4 is the first bad version.</span><br><span class=\"line\"></span><br><span class=\"line\">call isBadVersion(3) -&gt; false</span><br><span class=\"line\">call isBadVersion(5) -&gt; true</span><br><span class=\"line\">call isBadVersion(4) -&gt; true</span><br><span class=\"line\"></span><br><span class=\"line\">Then 4 is the first bad version. </span><br></pre></td></tr></table></figure>\n\n<p>First, we initialize <code>left = 1</code> and <code>right = n</code> to include all possible values. Then we notice that we don’t even need to design the <code>condition</code> function. It’s already given by the <code>isBadVersion</code> API. Finding the first bad version is equivalent to finding the minimal k satisfying <code>isBadVersion(k) is True</code>. Our template can fit in very nicely:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution:</span><br><span class=\"line\">    def firstBadVersion(self, n) -&gt; int:</span><br><span class=\"line\">        left, right = 1, n</span><br><span class=\"line\">        while left &lt; right:</span><br><span class=\"line\">            mid = left + (right - left) // 2</span><br><span class=\"line\">            if isBadVersion(mid):</span><br><span class=\"line\">                right = mid</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                left = mid + 1</span><br><span class=\"line\">        return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"69-Sqrt-x-Easy\"><a href=\"#69-Sqrt-x-Easy\" class=\"headerlink\" title=\"69. Sqrt(x) [Easy]\"></a><a href=\"https://leetcode.com/problems/sqrtx/\">69. Sqrt(x) [Easy]</a></h2><p>Implement <code>int sqrt(int x)</code>. Compute and return the square root of <em>x</em>, where <em>x</em> is guaranteed to be a non-negative integer. Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 4</span><br><span class=\"line\">Output: 2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: 8</span><br><span class=\"line\">Output: 2</span><br></pre></td></tr></table></figure>\n\n<p>Easy one. First we need to search for minimal k satisfying condition <code>k^2 &gt; x</code>, then <code>k - 1</code> is the answer to the question. We can easily come up with the solution. Notice that I set <code>right = x + 1</code> instead of <code>right = x</code> to deal with special input cases like <code>x = 0</code> and <code>x = 1</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def mySqrt(x: int) -&gt; int:</span><br><span class=\"line\">    left, right = 0, x + 1</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if mid * mid &gt; x:</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left - 1  # `left` is the minimum k value, `k - 1` is the answer</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"35-Search-Insert-Position-Easy\"><a href=\"#35-Search-Insert-Position-Easy\" class=\"headerlink\" title=\"35. Search Insert Position [Easy]\"></a><a href=\"https://leetcode.com/problems/search-insert-position/\">35. Search Insert Position [Easy]</a></h2><p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You may assume no duplicates in the array.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [1,3,5,6], 5</span><br><span class=\"line\">Output: 2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [1,3,5,6], 2</span><br><span class=\"line\">Output: 1</span><br></pre></td></tr></table></figure>\n\n<p>Very classic application of binary search. We are looking for the minimal k value satisfying <code>nums[k] &gt;= target</code>, and we can just copy-paste our template. Notice that our solution is correct regardless of whether the input array <code>nums</code> has duplicates. Also notice that the input <code>target</code> might be larger than all elements in <code>nums</code> and therefore needs to placed at the end of the array. That’s why we should initialize <code>right = len(nums)</code> instead of <code>right = len(nums) - 1</code>.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution:</span><br><span class=\"line\">    def searchInsert(self, nums: List[int], target: int) -&gt; int:</span><br><span class=\"line\">        left, right = 0, len(nums)</span><br><span class=\"line\">        while left &lt; right:</span><br><span class=\"line\">            mid = left + (right - left) // 2</span><br><span class=\"line\">            if nums[mid] &gt;= target:</span><br><span class=\"line\">                right = mid</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                left = mid + 1</span><br><span class=\"line\">        return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"Advanced-Application\"><a href=\"#Advanced-Application\" class=\"headerlink\" title=\"&gt;&gt; Advanced Application\"></a>&gt;&gt; Advanced Application</h1><p>The above problems are quite easy to solve, because they already give us the array to be searched. We’d know that we should use binary search to solve them at first glance. However, <strong>more often are the situations where the search space and search target are not so readily available</strong>. Sometimes we won’t even realize that the problem should be solved with binary search – we might just turn to dynamic programming or DFS and get stuck for a very long time.</p>\n<p>As for the question “When can we use binary search?”, my answer is that, <strong>If we can discover some kind of monotonicity, for example, if <code>condition(k) is True</code> then <code>condition(k + 1) is True</code>, then we can consider binary search</strong>.</p>\n<h2 id=\"1011-Capacity-To-Ship-Packages-Within-D-Days-Medium\"><a href=\"#1011-Capacity-To-Ship-Packages-Within-D-Days-Medium\" class=\"headerlink\" title=\"1011. Capacity To Ship Packages Within D Days [Medium]\"></a><a href=\"https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/\">1011. Capacity To Ship Packages Within D Days [Medium]</a></h2><p>A conveyor belt has packages that must be shipped from one port to another within <code>D</code> days. The <code>i</code>-th package on the conveyor belt has a weight of <code>weights[i]</code>. Each day, we load the ship with packages on the conveyor belt (in the order given by <code>weights</code>). We may not load more weight than the maximum weight capacity of the ship.</p>\n<p>Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within <code>D</code> days.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5</span><br><span class=\"line\">Output: 15</span><br><span class=\"line\">Explanation: </span><br><span class=\"line\">A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:</span><br><span class=\"line\">1st day: 1, 2, 3, 4, 5</span><br><span class=\"line\">2nd day: 6, 7</span><br><span class=\"line\">3rd day: 8</span><br><span class=\"line\">4th day: 9</span><br><span class=\"line\">5th day: 10</span><br><span class=\"line\"></span><br><span class=\"line\">Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. </span><br></pre></td></tr></table></figure>\n\n<p>Binary search probably would not come to our mind when we first meet this problem. We might automatically treat <code>weights</code> as search space and then realize we’ve entered a dead end after wasting lots of time. In fact, we are looking for the minimal one among all feasible capacities. We dig out the monotonicity of this problem: if we can successfully ship all packages within <code>D</code> days with capacity <code>m</code>, then we can definitely ship them all with any capacity larger than <code>m</code>. Now we can design a <code>condition</code> function, let’s call it <code>feasible</code>, given an input <code>capacity</code>, it returns whether it’s possible to ship all packages within <code>D</code> days. This can run in a greedy way: if there’s still room for the current package, we put this package onto the conveyor belt, otherwise we wait for the next day to place this package. If the total days needed exceeds <code>D</code>, we return <code>False</code>, otherwise we return <code>True</code>.</p>\n<p>Next, we need to initialize our boundary correctly. Obviously <code>capacity</code> should be at least <code>max(weights)</code>, otherwise the conveyor belt couldn’t ship the heaviest package. On the other hand, <code>capacity</code> need not be more than<code>sum(weights)</code>, because then we can ship all packages in just one day.</p>\n<p>Now we’ve got all we need to apply our binary search template:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def shipWithinDays(weights: List[int], D: int) -&gt; int:</span><br><span class=\"line\">    def feasible(capacity) -&gt; bool:</span><br><span class=\"line\">        days = 1</span><br><span class=\"line\">        total = 0</span><br><span class=\"line\">        for weight in weights:</span><br><span class=\"line\">            total += weight</span><br><span class=\"line\">            if total &gt; capacity:  # too heavy, wait for the next day</span><br><span class=\"line\">                total = weight</span><br><span class=\"line\">                days += 1</span><br><span class=\"line\">                if days &gt; D:  # cannot ship within D days</span><br><span class=\"line\">                    return False</span><br><span class=\"line\">        return True</span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = max(weights), sum(weights)</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if feasible(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"410-Split-Array-Largest-Sum-Hard\"><a href=\"#410-Split-Array-Largest-Sum-Hard\" class=\"headerlink\" title=\"410. Split Array Largest Sum [Hard]\"></a><a href=\"https://leetcode.com/problems/split-array-largest-sum/\">410. Split Array Largest Sum [Hard]</a></h2><p>Given an array which consists of non-negative integers and an integer <em>m</em>, you can split the array into <em>m</em> non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these <em>m</em> subarrays.</p>\n<p><strong>Example:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:</span><br><span class=\"line\">nums = [7,2,5,10,8]</span><br><span class=\"line\">m = 2</span><br><span class=\"line\"></span><br><span class=\"line\">Output:</span><br><span class=\"line\">18</span><br><span class=\"line\"></span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.</span><br></pre></td></tr></table></figure>\n\n<p>If you take a close look, you would probably see how similar this problem is with LC 1011 above. Similarly, we can design a <code>feasible</code> function: given an input <code>threshold</code>, then decide if we can split the array into several subarrays such that every subarray-sum is less than or equal to <code>threshold</code>. In this way, we discover the monotonicity of the problem: if <code>feasible(m)</code> is <code>True</code>, then all inputs larger than <code>m</code> can satisfy <code>feasible</code> function. You can see that the solution code is exactly the same as LC 1011.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def splitArray(nums: List[int], m: int) -&gt; int:        </span><br><span class=\"line\">    def feasible(threshold) -&gt; bool:</span><br><span class=\"line\">        count = 1</span><br><span class=\"line\">        total = 0</span><br><span class=\"line\">        for num in nums:</span><br><span class=\"line\">            total += num</span><br><span class=\"line\">            if total &gt; threshold:</span><br><span class=\"line\">                total = num</span><br><span class=\"line\">                count += 1</span><br><span class=\"line\">                if count &gt; m:</span><br><span class=\"line\">                    return False</span><br><span class=\"line\">        return True</span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = max(nums), sum(nums)</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if feasible(mid):</span><br><span class=\"line\">            right = mid     </span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<p>But we probably would have doubts: It’s true that <code>left</code> returned by our solution is the minimal value satisfying <code>feasible</code>, but how can we know that we can split the original array to <strong>actually get this subarray-sum</strong>? For example, let’s say <code>nums = [7,2,5,10,8]</code> and <code>m = 2</code>. We have 4 different ways to split the array to get 4 different largest subarray-sum correspondingly: <code>25:[[7], [2,5,10,8]]</code>, <code>23:[[7,2], [5,10,8]]</code>, <code>18:[[7,2,5], [10,8]]</code>, <code>24:[[7,2,5,10], [8]]</code>. Only 4 values. But our search space <code>[max(nums), sum(nums)] = [10, 32]</code> has much more that just 4 values. That is, no matter how we split the input array, we cannot get most of the values in our search space.</p>\n<p>Let’s say <code>k</code> is the minimal value satisfying <code>feasible</code> function. We can prove the correctness of our solution with <strong>proof by contradiction</strong>. Assume that no subarray’s sum is equal to <code>k</code>, that is, every subarray sum is less than <code>k</code>. The variable <code>total</code> inside <code>feasible</code> function keeps track of the total weights of current load. If our assumption is correct, then <code>total</code> would always be less than <code>k</code>. As a result, <code>feasible(k - 1)</code> must be <code>True</code>, because <code>total</code> would at most be equal to <code>k - 1</code> and would never trigger the if-clause <code>if total &gt; threshold</code>, <strong>therefore <code>feasible(k - 1)</code> must have the same output as <code>feasible(k)</code>, which is <code>True</code></strong>. But we already know that <code>k</code> is the minimal value satisfying <code>feasible</code> function, <strong>so <code>feasible(k - 1)</code> has to be <code>False</code>, which is a contradiction</strong>. So our assumption is incorrect. Now we’ve proved that our algorithm is correct.</p>\n<hr>\n<h2 id=\"875-Koko-Eating-Bananas-Medium\"><a href=\"#875-Koko-Eating-Bananas-Medium\" class=\"headerlink\" title=\"875. Koko Eating Bananas [Medium]\"></a><a href=\"https://leetcode.com/problems/koko-eating-bananas/\">875. Koko Eating Bananas [Medium]</a></h2><p>Koko loves to eat bananas. There are <code>N</code> piles of bananas, the <code>i</code>-th pile has <code>piles[i]</code> bananas. The guards have gone and will come back in <code>H</code> hours. Koko can decide her bananas-per-hour eating speed of <code>K</code>. Each hour, she chooses some pile of bananas, and eats K bananas from that pile. If the pile has less than <code>K</code> bananas, she eats all of them instead, and won’t eat any more bananas during this hour.</p>\n<p>Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back. <strong>Return the minimum integer <code>K</code> such that she can eat all the bananas within <code>H</code> hours</strong>.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles = [3,6,7,11], H = 8</span><br><span class=\"line\">Output: 4</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles = [30,11,23,4,20], H = 5</span><br><span class=\"line\">Output: 30</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: piles = [30,11,23,4,20], H = 6</span><br><span class=\"line\">Output: 23</span><br></pre></td></tr></table></figure>\n\n<p>Very similar to LC 1011 and LC 410 mentioned above. Let’s design a <code>feasible</code> function, given an input <code>speed</code>, determine whether Koko can finish all bananas within <code>H</code> hours with hourly eating speed <code>speed</code>. Obviously, the lower bound of the search space is 1, and upper bound is <code>max(piles)</code>, because Koko can only choose one pile of bananas to eat every hour.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def minEatingSpeed(piles: List[int], H: int) -&gt; int:</span><br><span class=\"line\">    def feasible(speed) -&gt; bool:</span><br><span class=\"line\">        # return sum(math.ceil(pile / speed) for pile in piles) &lt;= H  # slower        </span><br><span class=\"line\">        return sum((pile - 1) // speed + 1 for pile in piles) &lt;= H  # faster</span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = 1, max(piles)</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left  + (right - left) // 2</span><br><span class=\"line\">        if feasible(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"1482-Minimum-Number-of-Days-to-Make-m-Bouquets-Medium\"><a href=\"#1482-Minimum-Number-of-Days-to-Make-m-Bouquets-Medium\" class=\"headerlink\" title=\"1482. Minimum Number of Days to Make m Bouquets [Medium]\"></a><a href=\"https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/\">1482. Minimum Number of Days to Make m Bouquets [Medium]</a></h2><p>Given an integer array <code>bloomDay</code>, an integer <code>m</code> and an integer <code>k</code>. We need to make <code>m</code> bouquets. To make a bouquet, you need to use <code>k</code> <strong>adjacent flowers</strong> from the garden. The garden consists of <code>n</code> flowers, the <code>ith</code> flower will bloom in the <code>bloomDay[i]</code> and then can be used in <strong>exactly one</strong> bouquet. Return <em>the minimum number of days</em> you need to wait to be able to make <code>m</code> bouquets from the garden. If it is impossible to make <code>m</code> bouquets return <strong>-1</strong>.</p>\n<p><strong>Examples:</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: bloomDay = [1,10,3,10,2], m = 3, k = 1</span><br><span class=\"line\">Output: 3</span><br><span class=\"line\">Explanation: Let&#x27;s see what happened in the first three days. x means flower bloomed and _ means flower didn&#x27;t bloom in the garden.</span><br><span class=\"line\">We need 3 bouquets each should contain 1 flower.</span><br><span class=\"line\">After day 1: [x, _, _, _, _]   // we can only make one bouquet.</span><br><span class=\"line\">After day 2: [x, _, _, _, x]   // we can only make two bouquets.</span><br><span class=\"line\">After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: bloomDay = [1,10,3,10,2], m = 3, k = 2</span><br><span class=\"line\">Output: -1</span><br><span class=\"line\">Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.</span><br></pre></td></tr></table></figure>\n\n<p>Now that we’ve solved three advanced problems above, this one should be pretty easy to do. The monotonicity of this problem is very clear: if we can make <code>m</code> bouquets after waiting for <code>d</code> days, then we can definitely finish that as well if we wait for more than <code>d</code> days.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def minDays(bloomDay: List[int], m: int, k: int) -&gt; int:</span><br><span class=\"line\">    def feasible(days) -&gt; bool:</span><br><span class=\"line\">        bonquets, flowers = 0, 0</span><br><span class=\"line\">        for bloom in bloomDay:</span><br><span class=\"line\">            if bloom &gt; days:</span><br><span class=\"line\">                flowers = 0</span><br><span class=\"line\">            else:</span><br><span class=\"line\">                bonquets += (flowers + 1) // k</span><br><span class=\"line\">                flowers = (flowers + 1) % k</span><br><span class=\"line\">        return bonquets &gt;= m</span><br><span class=\"line\"></span><br><span class=\"line\">    if len(bloomDay) &lt; m * k:</span><br><span class=\"line\">        return -1</span><br><span class=\"line\">    left, right = 1, max(bloomDay)</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if feasible(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"668-Kth-Smallest-Number-in-Multiplication-Table-Hard\"><a href=\"#668-Kth-Smallest-Number-in-Multiplication-Table-Hard\" class=\"headerlink\" title=\"668. Kth Smallest Number in Multiplication Table [Hard]\"></a><a href=\"https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/description/\">668. Kth Smallest Number in Multiplication Table [Hard]</a></h2><p>Nearly every one have used the <a href=\"https://en.wikipedia.org/wiki/Multiplication_table\">Multiplication Table</a>. But could you find out the <code>k-th</code> smallest number quickly from the multiplication table? Given the height <code>m</code> and the length <code>n</code> of a <code>m * n</code> Multiplication Table, and a positive integer <code>k</code>, you need to return the <code>k-th</code> smallest number in this table.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: m = 3, n = 3, k = 5</span><br><span class=\"line\">Output: 3</span><br><span class=\"line\">Explanation: </span><br><span class=\"line\">The Multiplication Table:</span><br><span class=\"line\">1\t2\t3</span><br><span class=\"line\">2\t4\t6</span><br><span class=\"line\">3\t6\t9</span><br><span class=\"line\"></span><br><span class=\"line\">The 5-th smallest number is 3 (1, 2, 2, 3, 3).</span><br></pre></td></tr></table></figure>\n\n<p>For Kth-Smallest problems like this, what comes to our mind first is Heap. Usually we can maintain a Min-Heap and just pop the top of the Heap for k times. However, that doesn’t work out in this problem. We don’t have every single number in the entire Multiplication Table, instead, we only have the height and the length of the table. If we are to apply Heap method, we need to explicitly calculate these <code>m * n</code> values and save them to a heap. The time complexity and space complexity of this process are both O(mn), which is quite inefficient. This is when binary search comes in. Remember we say that designing <code>condition</code> function is the most difficult part? In order to find the k-th smallest value in the table, we can design an <code>enough</code> function, given an input <code>num</code>, determine whether there’re at least k values less than or equal to <code>num</code>. <strong>The minimal <code>num</code> satisfying <code>enough</code> function is the answer we’re looking for</strong>. Recall that the key to binary search is discovering monotonicity. In this problem, if <code>num</code> satisfies <code>enough</code>, then of course any value larger than <code>num</code> can satisfy. This monotonicity is the fundament of our binary search algorithm.</p>\n<p>Let’s consider search space. Obviously the lower bound should be 1, and the upper bound should be the largest value in the Multiplication Table, which is <code>m * n</code>, then we have search space <code>[1, m * n]</code>. The overwhelming advantage of binary search solution to heap solution is that it doesn’t need to explicitly calculate all numbers in that table, all it needs is just picking up one value out of the search space and apply <code>enough</code> function to this value, to determine should we keep the left half or the right half of the search space. In this way, binary search solution only requires constant space complexity, much better than heap solution.</p>\n<p>Next let’s consider how to implement <code>enough</code> function. It can be observed that every row in the Multiplication Table is just multiples of its index. For example, all numbers in 3rd row <code>[3,6,9,12,15...]</code> are multiples of 3. Therefore, we can just go row by row to count the total number of entries less than or equal to input <code>num</code>. Following is the complete solution.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def findKthNumber(m: int, n: int, k: int) -&gt; int:</span><br><span class=\"line\">    def enough(num) -&gt; bool:</span><br><span class=\"line\">        count = 0</span><br><span class=\"line\">        for val in range(1, m + 1):  # count row by row</span><br><span class=\"line\">            add = min(num // val, n)</span><br><span class=\"line\">            if add == 0:  # early exit</span><br><span class=\"line\">                break</span><br><span class=\"line\">            count += add</span><br><span class=\"line\">        return count &gt;= k                </span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = 1, n * m</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if enough(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left </span><br></pre></td></tr></table></figure>\n\n<p>In LC 410 above, we have doubt “Is the result from binary search actually a subarray sum?”. Here we have a similar doubt: “<strong>Is the result from binary search actually in the Multiplication Table?</strong>“. The answer is yes, and we also can apply proof by contradiction. Denote <code>num</code> as the minimal input that satisfies <code>enough</code> function. Let’s assume that <code>num</code> is not in the table, which means that <code>num</code> is not divisible by any <code>val</code> in <code>[1, m]</code>, that is, <code>num % val &gt; 0</code>. Therefore, changing the input from <code>num</code> to <code>num - 1</code> doesn’t have any effect on the expression <code>add = min(num // val, n)</code>. So <code>enough(num - 1)</code> would also return <code>True</code>, same as <code>enough(num)</code>. But we already know <code>num</code> is the minimal input satisfying <code>enough</code> function, so <code>enough(num - 1)</code> has to be <code>False</code>. Contradiction! The opposite of our original assumption is true: <code>num</code> is actually in the table.</p>\n<hr>\n<h2 id=\"719-Find-K-th-Smallest-Pair-Distance-Hard\"><a href=\"#719-Find-K-th-Smallest-Pair-Distance-Hard\" class=\"headerlink\" title=\"719. Find K-th Smallest Pair Distance [Hard]\"></a><a href=\"https://leetcode.com/problems/find-k-th-smallest-pair-distance/\">719. Find K-th Smallest Pair Distance [Hard]</a></h2><p>Given an integer array, return the k-th smallest <strong>distance</strong> among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input:</span><br><span class=\"line\">nums = [1,3,1]</span><br><span class=\"line\">k = 1</span><br><span class=\"line\">Output: 0 </span><br><span class=\"line\">Explanation:</span><br><span class=\"line\">Following are all the pairs. The 1st smallest distance pair is (1,1), and its distance is 0.</span><br><span class=\"line\">(1,3) -&gt; 2</span><br><span class=\"line\">(1,1) -&gt; 0</span><br><span class=\"line\">(3,1) -&gt; 2</span><br></pre></td></tr></table></figure>\n\n<p>Very similar to LC 668 above, both are about finding Kth-Smallest. Just like LC 668, We can design an <code>enough</code> function, given an input <code>distance</code>, determine whether there’re at least k pairs whose distances are less than or equal to <code>distance</code>. We can sort the input array and use two pointers (fast pointer and slow pointer, pointed at a pair) to scan it. Both pointers go from leftmost end. If the current pair pointed at has a distance less than or equal to <code>distance</code>, all pairs between these pointers are valid (since the array is already sorted), we move forward the fast pointer. Otherwise, we move forward the slow pointer. By the time both pointers reach the rightmost end, we finish our scan and see if total counts exceed k. Here is the implementation:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def enough(distance) -&gt; bool:  # two pointers</span><br><span class=\"line\">    count, i, j = 0, 0, 0</span><br><span class=\"line\">    while i &lt; n or j &lt; n:</span><br><span class=\"line\">        while j &lt; n and nums[j] - nums[i] &lt;= distance:  # move fast pointer</span><br><span class=\"line\">            j += 1</span><br><span class=\"line\">        count += j - i - 1  # count pairs</span><br><span class=\"line\">        i += 1  # move slow pointer</span><br><span class=\"line\">    return count &gt;= k</span><br></pre></td></tr></table></figure>\n\n<p>Obviously, our search space should be <code>[0, max(nums) - min(nums)]</code>. Now we are ready to copy-paste our template:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def smallestDistancePair(nums: List[int], k: int) -&gt; int:</span><br><span class=\"line\">    nums.sort()</span><br><span class=\"line\">    n = len(nums)</span><br><span class=\"line\">    left, right = 0, nums[-1] - nums[0]</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if enough(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"1201-Ugly-Number-III-Medium\"><a href=\"#1201-Ugly-Number-III-Medium\" class=\"headerlink\" title=\"1201. Ugly Number III [Medium]\"></a><a href=\"https://leetcode.com/problems/ugly-number-iii/\">1201. Ugly Number III [Medium]</a></h2><p>Write a program to find the <code>n</code>-th ugly number. Ugly numbers are <strong>positive integers</strong> which are divisible by <code>a</code> <strong>or</strong> <code>b</code> <strong>or</strong> <code>c</code>.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n = 3, a = 2, b = 3, c = 5</span><br><span class=\"line\">Output: 4</span><br><span class=\"line\">Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: n = 4, a = 2, b = 3, c = 4</span><br><span class=\"line\">Output: 6</span><br><span class=\"line\">Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.</span><br></pre></td></tr></table></figure>\n\n<p>Nothing special. Still finding the Kth-Smallest. We need to design an <code>enough</code> function, given an input <code>num</code>, determine whether there are at least n ugly numbers less than or equal to <code>num</code>. Since <code>a</code> might be a multiple of <code>b</code> or <code>c</code>, or the other way round, we need the help of greatest common divisor to avoid counting duplicate numbers.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def nthUglyNumber(n: int, a: int, b: int, c: int) -&gt; int:</span><br><span class=\"line\">    def enough(num) -&gt; bool:</span><br><span class=\"line\">        total = num//a + num//b + num//c - num//ab - num//ac - num//bc + num//abc</span><br><span class=\"line\">        return total &gt;= n</span><br><span class=\"line\"></span><br><span class=\"line\">    ab = a * b // math.gcd(a, b)</span><br><span class=\"line\">    ac = a * c // math.gcd(a, c)</span><br><span class=\"line\">    bc = b * c // math.gcd(b, c)</span><br><span class=\"line\">    abc = a * bc // math.gcd(a, bc)</span><br><span class=\"line\">    left, right = 1, 10 ** 10</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if enough(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"1283-Find-the-Smallest-Divisor-Given-a-Threshold-Medium\"><a href=\"#1283-Find-the-Smallest-Divisor-Given-a-Threshold-Medium\" class=\"headerlink\" title=\"1283. Find the Smallest Divisor Given a Threshold [Medium]\"></a><a href=\"https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/\">1283. Find the Smallest Divisor Given a Threshold [Medium]</a></h2><p>Given an array of integers <code>nums</code> and an integer <code>threshold</code>, we will choose a positive integer divisor and divide all the array by it and sum the result of the division. Find the <strong>smallest</strong> divisor such that the result mentioned above is less than or equal to <code>threshold</code>.</p>\n<p>Each result of division is rounded to the nearest integer greater than or equal to that element. (For example: 7&#x2F;3 &#x3D; 3 and 10&#x2F;2 &#x3D; 5). It is guaranteed that there will be an answer.</p>\n<p><strong>Example :</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: nums = [1,2,5,9], threshold = 6</span><br><span class=\"line\">Output: 5</span><br><span class=\"line\">Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. </span><br><span class=\"line\">If the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). </span><br></pre></td></tr></table></figure>\n\n<p>After so many problems introduced above, this one should be a piece of cake. We don’t even need to bother to design a <code>condition</code> function, because the problem has already told us explicitly what condition we need to satisfy.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def smallestDivisor(nums: List[int], threshold: int) -&gt; int:</span><br><span class=\"line\">    def condition(divisor) -&gt; bool:</span><br><span class=\"line\">        return sum((num - 1) // divisor + 1 for num in nums) &lt;= threshold</span><br><span class=\"line\"></span><br><span class=\"line\">    left, right = 1, max(nums)</span><br><span class=\"line\">    while left &lt; right:</span><br><span class=\"line\">        mid = left + (right - left) // 2</span><br><span class=\"line\">        if condition(mid):</span><br><span class=\"line\">            right = mid</span><br><span class=\"line\">        else:</span><br><span class=\"line\">            left = mid + 1</span><br><span class=\"line\">    return left</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"End\"><a href=\"#End\" class=\"headerlink\" title=\"End\"></a>End</h1><p>Wow, thank you so much for making it to the end! Really appreciate that. As you can see from the python codes above, they all look very similar to each other. That’s because I copy-pasted my own template all the time. No exception. This is the strong proof of my template’s powerfulness and adaptability. I believe everyone can acquire this binary search template to solve many problems. All we need is just more practice to build up our ability to discover the monotonicity of the problem and to design a beautiful <code>condition</code> function.</p>\n<p>Hope this helps.</p>\n<p><strong>Reference</strong></p>\n<ul>\n<li><a href=\"https://leetcode.com/problems/split-array-largest-sum/discuss/89819/C%2B%2B-Fast-Very-clear-explanation-Clean-Code-Solution-with-Greedy-Algorithm-and-Binary-Search\">[C++ &#x2F; Fast &#x2F; Very clear explanation &#x2F; Clean Code] Solution with Greedy Algorithm and Binary Search</a></li>\n<li><a href=\"https://leetcode.com/problems/find-k-th-smallest-pair-distance/discuss/109082/Approach-the-problem-using-the-%22trial-and-error%22-algorithm\">Approach the problem using the “trial and error” algorithm</a></li>\n<li><a href=\"https://leetcode.com/problems/binary-search/discuss/423162/Binary-Search-101-The-Ultimate-Binary-Search-Handbook\">Binary Search 101 The-Ultimate-Binary-Search-Handbook - LeetCode</a></li>\n<li><a href=\"https://leetcode.com/problems/ugly-number-iii/discuss/387539/cpp-Binary-Search-with-picture-and-Binary-Search-Template\">ugly-number-iii Binary Search with picture &amp; Binary Search Template - LeetCode</a></li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "Binary Search"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/dp-for-beginners/",
            "url": "https://samirpaul.in/posts/dp-for-beginners/",
            "title": "DP for Beginners",
            "date_published": "2023-08-05T20:52:53.890Z",
            "content_html": "<p><strong>Longest Increasing Subsequence variants:</strong><br><a href=\"https://leetcode.com/problems/longest-increasing-subsequence/\">https://leetcode.com/problems/longest-increasing-subsequence/</a><br><a href=\"https://leetcode.com/problems/largest-divisible-subset/\">https://leetcode.com/problems/largest-divisible-subset/</a><br><a href=\"https://leetcode.com/problems/russian-doll-envelopes/\">https://leetcode.com/problems/russian-doll-envelopes/</a><br><a href=\"https://leetcode.com/problems/maximum-length-of-pair-chain/\">https://leetcode.com/problems/maximum-length-of-pair-chain/</a><br><a href=\"https://leetcode.com/problems/number-of-longest-increasing-subsequence/\">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a><br><a href=\"https://leetcode.com/problems/delete-and-earn/\">https://leetcode.com/problems/delete-and-earn/</a><br><a href=\"https://leetcode.com/problems/longest-string-chain/\">https://leetcode.com/problems/longest-string-chain/</a></p>\n<p><strong>Partition Subset:</strong><br><a href=\"https://leetcode.com/problems/partition-equal-subset-sum/\">https://leetcode.com/problems/partition-equal-subset-sum/</a><br><a href=\"https://leetcode.com/problems/last-stone-weight-ii/\">https://leetcode.com/problems/last-stone-weight-ii/</a></p>\n<p><strong>BitMasking:</strong><br><a href=\"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/\">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a></p>\n<p><strong>Longest Common Subsequence Variant:</strong><br><a href=\"https://leetcode.com/problems/longest-common-subsequence/\">https://leetcode.com/problems/longest-common-subsequence/</a><br><a href=\"https://leetcode.com/problems/edit-distance/\">https://leetcode.com/problems/edit-distance/</a><br><a href=\"https://leetcode.com/problems/distinct-subsequences/\">https://leetcode.com/problems/distinct-subsequences/</a><br><a href=\"https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/\">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>\n<p><strong>Palindrome:</strong><br><a href=\"https://leetcode.com/problems/palindrome-partitioning-ii/\">https://leetcode.com/problems/palindrome-partitioning-ii/</a><br><a href=\"https://leetcode.com/problems/palindromic-substrings/\">https://leetcode.com/problems/palindromic-substrings/</a></p>\n<p><strong>Coin Change variant:</strong><br><a href=\"https://leetcode.com/problems/coin-change/\">https://leetcode.com/problems/coin-change/</a><br><a href=\"https://leetcode.com/problems/coin-change-2/\">https://leetcode.com/problems/coin-change-2/</a><br><a href=\"https://leetcode.com/problems/combination-sum-iv/\">https://leetcode.com/problems/combination-sum-iv/</a><br><a href=\"https://leetcode.com/problems/perfect-squares/\">https://leetcode.com/problems/perfect-squares/</a><br><a href=\"https://leetcode.com/problems/minimum-cost-for-tickets/\">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>\n<p><strong>Matrix multiplication variant:</strong><br><a href=\"https://leetcode.com/problems/minimum-score-triangulation-of-polygon/\">https://leetcode.com/problems/minimum-score-triangulation-of-polygon/</a><br><a href=\"https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/\">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a><br><a href=\"https://leetcode.com/problems/burst-balloons/\">https://leetcode.com/problems/burst-balloons/</a></p>\n<p><strong>Matrix&#x2F;2D Array:</strong><br><a href=\"https://leetcode.com/problems/matrix-block-sum/\">https://leetcode.com/problems/matrix-block-sum/</a><br><a href=\"https://leetcode.com/problems/range-sum-query-2d-immutable/\">https://leetcode.com/problems/range-sum-query-2d-immutable/</a><br><a href=\"https://leetcode.com/problems/dungeon-game/\">https://leetcode.com/problems/dungeon-game/</a><br><a href=\"https://leetcode.com/problems/triangle/\">https://leetcode.com/problems/triangle/</a><br><a href=\"https://leetcode.com/problems/maximal-square/\">https://leetcode.com/problems/maximal-square/</a><br><a href=\"https://leetcode.com/problems/minimum-falling-path-sum/\">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>\n<p><strong>Hash + DP:</strong><br><a href=\"https://leetcode.com/problems/target-sum/\">https://leetcode.com/problems/target-sum/</a><br><a href=\"https://leetcode.com/problems/longest-arithmetic-sequence/\">https://leetcode.com/problems/longest-arithmetic-sequence/</a><br><a href=\"https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/\">https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/</a><br><a href=\"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/\">https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/</a></p>\n<p><strong>State machine:</strong><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>\n<p><strong>Depth First Search + DP:</strong><br><a href=\"https://leetcode.com/problems/out-of-boundary-paths/\">https://leetcode.com/problems/out-of-boundary-paths/</a><br><a href=\"https://leetcode.com/problems/knight-probability-in-chessboard/\">https://leetcode.com/problems/knight-probability-in-chessboard/</a></p>\n<p><strong>Minimax DP:</strong><br><a href=\"https://leetcode.com/problems/predict-the-winner/\">https://leetcode.com/problems/predict-the-winner/</a><br><a href=\"https://leetcode.com/problems/stone-game/\">https://leetcode.com/problems/stone-game/</a></p>\n<p><strong>Misc:</strong><br><a href=\"https://leetcode.com/problems/greatest-sum-divisible-by-three/\">https://leetcode.com/problems/greatest-sum-divisible-by-three/</a><br><a href=\"https://leetcode.com/problems/decode-ways/\">https://leetcode.com/problems/decode-ways/</a><br><a href=\"https://leetcode.com/problems/perfect-squares/\">https://leetcode.com/problems/perfect-squares/</a><br><a href=\"https://leetcode.com/problems/count-numbers-with-unique-digits/\">https://leetcode.com/problems/count-numbers-with-unique-digits/</a><br><a href=\"https://leetcode.com/problems/longest-turbulent-subarray/\">https://leetcode.com/problems/longest-turbulent-subarray/</a><br><a href=\"https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/\">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>\n<hr>\n<h1 id=\"Sample-solutions-for-each-of-above-problem-type\"><a href=\"#Sample-solutions-for-each-of-above-problem-type\" class=\"headerlink\" title=\"Sample solutions for each of above problem type:\"></a>Sample solutions for each of above problem type:</h1><hr>\n<p><strong>Longest Increasing Subsequence</strong><br><a href=\"https://leetcode.com/problems/longest-increasing-subsequence/\">https://leetcode.com/problems/longest-increasing-subsequence/</a><br><a href=\"https://leetcode.com/problems/largest-divisible-subset/\">https://leetcode.com/problems/largest-divisible-subset/</a><br><a href=\"https://leetcode.com/problems/russian-doll-envelopes/\">https://leetcode.com/problems/russian-doll-envelopes/</a><br><a href=\"https://leetcode.com/problems/maximum-length-of-pair-chain/\">https://leetcode.com/problems/maximum-length-of-pair-chain/</a><br><a href=\"https://leetcode.com/problems/number-of-longest-increasing-subsequence/\">https://leetcode.com/problems/number-of-longest-increasing-subsequence/</a><br><a href=\"https://leetcode.com/problems/delete-and-earn/\">https://leetcode.com/problems/delete-and-earn/</a><br><a href=\"https://leetcode.com/problems/longest-string-chain/\">https://leetcode.com/problems/longest-string-chain/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint lengthOfLIS(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;int&gt;LIS(n+1, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; i; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (nums[i] &gt; nums[j])</span><br><span class=\"line\">\t\t\t\t\tLIS[i] = max(LIS[i], 1 + LIS[j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint ans = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tans = max(ans, LIS[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Partition Subset Sum:</strong><br><a href=\"https://leetcode.com/problems/partition-equal-subset-sum/\">https://leetcode.com/problems/partition-equal-subset-sum/</a><br><a href=\"https://leetcode.com/problems/last-stone-weight-ii/\">https://leetcode.com/problems/last-stone-weight-ii/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tbool canPartition(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint sum = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tsum += nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (sum % 2 != 0) return false;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint target = sum/2;</span><br><span class=\"line\">\t\tvector&lt;bool&gt;dp(target+1, false);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdp[0] = true;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = target; j &gt;= nums[i]; j--) &#123;</span><br><span class=\"line\">\t\t\t\tdp[j] = dp[j] | dp[j - nums[i]];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn dp[target];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>BitMasking in DP:</strong><br><a href=\"https://leetcode.com/problems/partition-to-k-equal-sum-subsets/\">https://leetcode.com/problems/partition-to-k-equal-sum-subsets/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint dp[(1&lt;&lt;16) + 2];</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tbool canPartitionKSubsets(vector&lt;int&gt;&amp; nums, int k) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfill(dp, dp+(1&lt;&lt;16)+2, -1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint sum = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tsum += nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (sum % k != 0) return false;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint target = sum/k;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdp[0] = 0;</span><br><span class=\"line\">\t\tfor (int mask = 0; mask &lt; (1&lt;&lt;n); mask++) &#123;</span><br><span class=\"line\">\t\t\tif (dp[mask] == -1) continue;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t\tif (!(mask &amp; (1 &lt;&lt; i)) &amp;&amp; dp[mask] + nums[i] &lt;= target)</span><br><span class=\"line\">\t\t\t\t\tdp[mask | (1 &lt;&lt; i)] = (dp[mask] + nums[i]) % target;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn dp[(1&lt;&lt;n)-1] == 0;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Longest Common Subsequence</strong><br><a href=\"https://leetcode.com/problems/longest-common-subsequence/\">https://leetcode.com/problems/longest-common-subsequence/</a><br><a href=\"https://leetcode.com/problems/edit-distance/\">https://leetcode.com/problems/edit-distance/</a><br><a href=\"https://leetcode.com/problems/distinct-subsequences/\">https://leetcode.com/problems/distinct-subsequences/</a><br><a href=\"https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/\">https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint longestCommonSubsequenceUtil(string text1, string text2, int n, int m) &#123;</span><br><span class=\"line\">\t\tif (n == 0 || m == 0)</span><br><span class=\"line\">\t\t\treturn 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;vector&lt;int&gt;&gt;L(n+1, vector&lt;int&gt;(m+1, 0));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt;= n; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt;= m; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (i == 0 || j == 0)</span><br><span class=\"line\">\t\t\t\t\tL[i][j] = 0;</span><br><span class=\"line\">\t\t\t\telse if (text1[i-1] == text2[j-1])</span><br><span class=\"line\">\t\t\t\t\tL[i][j] = 1 + L[i-1][j-1];</span><br><span class=\"line\">\t\t\t\telse</span><br><span class=\"line\">\t\t\t\t\tL[i][j] = max(L[i][j-1], L[i-1][j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn L[n][m];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint longestCommonSubsequence(string text1, string text2) &#123;</span><br><span class=\"line\">\t\tint n = text1.size();</span><br><span class=\"line\">\t\tint m = text2.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn longestCommonSubsequenceUtil(text1, text2, n, m);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Palindrome:</strong><br><a href=\"https://leetcode.com/problems/palindrome-partitioning-ii/\">https://leetcode.com/problems/palindrome-partitioning-ii/</a><br><a href=\"https://leetcode.com/problems/palindromic-substrings/\">https://leetcode.com/problems/palindromic-substrings/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint minCut(string s) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = s.length();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint res[n];</span><br><span class=\"line\">\t\tbool P[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tP[i][i] = true;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int L = 2; L &lt;= n; L++) &#123;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i &lt; n-L+1; i++) &#123;</span><br><span class=\"line\">\t\t\t\tint j = i+L-1;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tif (L == 2) &#123;</span><br><span class=\"line\">\t\t\t\t\tP[i][j] = (s[i] == s[j]);</span><br><span class=\"line\">\t\t\t\t&#125; else &#123;</span><br><span class=\"line\">\t\t\t\t\tP[i][j] = (s[i] == s[j]) &amp;&amp; P[i+1][j-1];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tif (P[0][i])</span><br><span class=\"line\">\t\t\t\tres[i] = 0;</span><br><span class=\"line\">\t\t\telse &#123;</span><br><span class=\"line\">\t\t\t\tres[i] = INT_MAX;</span><br><span class=\"line\">\t\t\t\tfor (int j = 0; j &lt; i; j++) &#123;</span><br><span class=\"line\">\t\t\t\t\tif (P[j+1][i] &amp;&amp; res[i] &gt; 1 + res[j])</span><br><span class=\"line\">\t\t\t\t\t\tres[i] = 1+res[j];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn res[n-1] == INT_MAX ? 1 : res[n-1];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Coin Change:</strong><br><a href=\"https://leetcode.com/problems/coin-change/\">https://leetcode.com/problems/coin-change/</a><br><a href=\"https://leetcode.com/problems/coin-change-2/\">https://leetcode.com/problems/coin-change-2/</a><br><a href=\"https://leetcode.com/problems/combination-sum-iv/\">https://leetcode.com/problems/combination-sum-iv/</a><br><a href=\"https://leetcode.com/problems/perfect-squares/\">https://leetcode.com/problems/perfect-squares/</a><br><a href=\"https://leetcode.com/problems/minimum-cost-for-tickets/\">https://leetcode.com/problems/minimum-cost-for-tickets/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint coinChange(vector&lt;int&gt;&amp; coins, int amount) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = coins.size();</span><br><span class=\"line\">\t\tif (n == 0) return 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;int&gt;res(amount+1, INT_MAX);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tres[0] = 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j =  coins[i]; j &lt;= amount; j++) &#123;</span><br><span class=\"line\">\t\t\t\tif (res[j-coins[i]] != INT_MAX)</span><br><span class=\"line\">\t\t\t\t\tres[j] = min(res[j], 1+res[j-coins[i]]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn res[amount] != INT_MAX ? res[amount] : -1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Matrix multiplication:</strong><br><a href=\"https://leetcode.com/problems/minimum-score-triangulation-of-polygon/\">https://leetcode.com/problems/minimum-score-triangulation-of-polygon/</a><br><a href=\"https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/\">https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/</a><br><a href=\"https://leetcode.com/problems/burst-balloons/\">https://leetcode.com/problems/burst-balloons/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint minScoreTriangulation(vector&lt;int&gt;&amp; A) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = A.size();        </span><br><span class=\"line\">\t\tvector&lt;vector&lt;int&gt;&gt;dp(n, vector&lt;int&gt;(n, 0));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int L = 2; L &lt;= n; L++) &#123;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i+L &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t\tint j = i+L;</span><br><span class=\"line\">\t\t\t\tdp[i][j] = INT_MAX;</span><br><span class=\"line\">\t\t\t\tfor (int k = i+1; k &lt; j; k++) &#123;</span><br><span class=\"line\">\t\t\t\t\tdp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i]*A[k]*A[j]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn dp[0][n-1];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Matrix&#x2F;2D Array:</strong><br><a href=\"https://leetcode.com/problems/matrix-block-sum/\">https://leetcode.com/problems/matrix-block-sum/</a><br><a href=\"https://leetcode.com/problems/range-sum-query-2d-immutable/\">https://leetcode.com/problems/range-sum-query-2d-immutable/</a><br><a href=\"https://leetcode.com/problems/dungeon-game/\">https://leetcode.com/problems/dungeon-game/</a><br><a href=\"https://leetcode.com/problems/triangle/\">https://leetcode.com/problems/triangle/</a><br><a href=\"https://leetcode.com/problems/maximal-square/\">https://leetcode.com/problems/maximal-square/</a><br><a href=\"https://leetcode.com/problems/minimum-falling-path-sum/\">https://leetcode.com/problems/minimum-falling-path-sum/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tvector&lt;vector&lt;int&gt;&gt; matrixBlockSum(vector&lt;vector&lt;int&gt;&gt;&amp; mat, int K) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint m = mat.size();</span><br><span class=\"line\">\t\tint n = mat[0].size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;vector&lt;int&gt;&gt;sum(m+1, vector&lt;int&gt;(n+1, 0));</span><br><span class=\"line\">\t\tfor (int i = 1; i &lt;= m; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 1; j &lt;= n; j++) &#123;</span><br><span class=\"line\">\t\t\t\tsum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tvector&lt;vector&lt;int&gt;&gt;res(m, vector&lt;int&gt;(n, 0));</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; m; i++) &#123;</span><br><span class=\"line\">\t\t\tfor (int j = 0; j &lt; n; j++) &#123;</span><br><span class=\"line\">\t\t\t\tint r1 = max(0, i-K); int c1 = max(0, j-K);</span><br><span class=\"line\">\t\t\t\tint r2 = min(m-1, i+K); int c2 = min(n-1, j+K);</span><br><span class=\"line\">\t\t\t\tr1++; r2++;</span><br><span class=\"line\">\t\t\t\tc1++; c2++;</span><br><span class=\"line\">\t\t\t\tres[i][j] = sum[r2][c2] - (sum[r2][c1-1] + sum[r1-1][c2]- sum[r1-1][c1-1]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Hash + DP:</strong><br><a href=\"https://leetcode.com/problems/target-sum/\">https://leetcode.com/problems/target-sum/</a><br><a href=\"https://leetcode.com/problems/longest-arithmetic-sequence/\">https://leetcode.com/problems/longest-arithmetic-sequence/</a><br><a href=\"https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/\">https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/</a><br><a href=\"https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/\">https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint findTargetSumWays(vector&lt;int&gt;&amp; nums, int S) &#123;</span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\">\t\tunordered_map&lt;int, int&gt;hm;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thm[0] = 1;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tauto mp = hm;</span><br><span class=\"line\">\t\t\thm.clear();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tfor (auto it = mp.begin(); it != mp.end(); it++) &#123;</span><br><span class=\"line\">\t\t\t\thm[it-&gt;first + nums[i]] += it-&gt;second;</span><br><span class=\"line\">\t\t\t\thm[it-&gt;first - nums[i]] += it-&gt;second;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn hm[S];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>State machine:</strong><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/</a><br><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint maxProfit(vector&lt;int&gt;&amp; prices, int fee) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint n = prices.size();</span><br><span class=\"line\">\t\tvector&lt;int&gt;buy(n, 0);</span><br><span class=\"line\">\t\tvector&lt;int&gt;sell(n, 0);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tbuy[0] = -prices[0], sell[0] = 0;</span><br><span class=\"line\">\t\tfor (int i = 1; i &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\tbuy[i] = max(buy[i-1], sell[i-1]-prices[i]);</span><br><span class=\"line\">\t\t\tsell[i] = max(sell[i-1], buy[i-1]+prices[i]-fee);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn sell[n-1];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>Depth First Search +DP:<br><a href=\"https://leetcode.com/problems/out-of-boundary-paths/\">https://leetcode.com/problems/out-of-boundary-paths/</a><br><a href=\"https://leetcode.com/problems/knight-probability-in-chessboard/\">https://leetcode.com/problems/knight-probability-in-chessboard/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">\tint mod = 1000000007;</span><br><span class=\"line\">\tint dfs(int m, int n, int N, int r, int c,  vector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;&amp; dp) &#123;</span><br><span class=\"line\">\t\tif (r &lt; 0 || c &lt; 0 || r &gt;= m || c &gt;= n) return 1;</span><br><span class=\"line\">\t\tif (N == 0) return 0;</span><br><span class=\"line\">\t\tif (dp[N][r][c] != -1) return dp[N][r][c]%mod;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint moves = 0;</span><br><span class=\"line\">\t\tmoves =  (moves + dfs(m, n, N-1, r, c+1, dp))%mod;</span><br><span class=\"line\">\t\tmoves =  (moves + dfs(m, n, N-1, r, c-1, dp))%mod;</span><br><span class=\"line\">\t\tmoves =  (moves + dfs(m, n, N-1, r+1, c, dp))%mod;</span><br><span class=\"line\">\t\tmoves =  (moves + dfs(m, n, N-1, r-1, c, dp))%mod;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tdp[N][r][c] = moves%mod;</span><br><span class=\"line\">\t\treturn dp[N][r][c];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tint findPaths(int m, int n, int N, int i, int j) &#123;</span><br><span class=\"line\">\t\tvector&lt;vector&lt;vector&lt;int&gt;&gt;&gt;dp(N+1, vector&lt;vector&lt;int&gt;&gt;(m+1, vector&lt;int&gt;(n+1, -1)));</span><br><span class=\"line\">\t\treturn dfs(m, n, N, i, j, dp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Minimax DP:</strong><br><a href=\"https://leetcode.com/problems/predict-the-winner/\">https://leetcode.com/problems/predict-the-winner/</a><br><a href=\"https://leetcode.com/problems/stone-game/\">https://leetcode.com/problems/stone-game/</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Solution &#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tbool PredictTheWinner(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class=\"line\">\t\tint n = nums.size();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint res[n][n];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\tres[i][i] = nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tfor (int l = 2; l &lt;= n; l++) &#123;</span><br><span class=\"line\">\t\t\tfor (int i = 0; i+l-1 &lt; n; i++) &#123;</span><br><span class=\"line\">\t\t\t\tint j = i+l-1;</span><br><span class=\"line\">\t\t\t\tint a = (i+1 &lt;= j-1) ? res[i+1][j-1] : 0;</span><br><span class=\"line\">\t\t\t\tint b = (i+2 &lt;= j) ? res[i+2][j] : 0;</span><br><span class=\"line\">\t\t\t\tint c = (i &lt;= j-2) ? res[i][j-2] : 0;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t\tres[i][j] = max(nums[i] + min(a,b), nums[j] + min(a, c));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tint total = 0;</span><br><span class=\"line\">\t\tfor (int i = 0; i &lt; n; i++)</span><br><span class=\"line\">\t\t\ttotal += nums[i];</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn res[0][n-1] &gt;= total - res[0][n-1];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Miscellaneous:</strong><br><a href=\"https://leetcode.com/problems/greatest-sum-divisible-by-three/\">https://leetcode.com/problems/greatest-sum-divisible-by-three/</a><br><a href=\"https://leetcode.com/problems/decode-ways/\">https://leetcode.com/problems/decode-ways/</a><br><a href=\"https://leetcode.com/problems/count-numbers-with-unique-digits/\">https://leetcode.com/problems/count-numbers-with-unique-digits/</a><br><a href=\"https://leetcode.com/problems/longest-turbulent-subarray/\">https://leetcode.com/problems/longest-turbulent-subarray/</a><br><a href=\"https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/\">https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/</a></p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "dp"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/dynamic-programming-patterns/",
            "url": "https://samirpaul.in/posts/dynamic-programming-patterns/",
            "title": "Dynamic Programming Patterns",
            "date_published": "2023-08-05T20:52:53.890Z",
            "content_html": "<p><img src=\"https://user-images.githubusercontent.com/77569653/226705479-a4d6c0a3-0191-4d45-8bf6-597ffaa5de40.png\" alt=\"Banner\"></p>\n<p>Before starting the topic let me introduce myself. I am a Mobile Developer currently working in Warsaw and spending my free time for interview preparations. I started to prepare for interviews two years ago. At that time I should say I could not solve the two sum problem. Easy problems seemed to me like hard ones so most of the time I had to look at editorials and discuss section. Currently, I have solved ~800 problems and time to time participate in contests. I usually solve 3 problems in a contest and sometimes 4 problems. Ok, lets come back to the topic.</p>\n<p>Recently I have concentrated my attention on Dynamic Programming cause its one of the hardest topics in an interview prep. After solving ~140 problems in DP I have noticed that there are few patterns that can be found in different problems. So I did a research on that and find the following topics. I will not give complete ways how to solve problems but these patterns may be helpful in solving DP.</p>\n<h1 id=\"Patterns\"><a href=\"#Patterns\" class=\"headerlink\" title=\"Patterns\"></a>Patterns</h1><hr>\n<p><a href=\"https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Minimum-(Maximum)-Path-to-Reach-a-Target\">Minimum (Maximum) Path to Reach a Target</a><br><a href=\"https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#distinct-ways\">Distinct Ways</a><br><a href=\"https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Merging-Intervals\">Merging Intervals</a><br><a href=\"https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#DP-on-Strings\">DP on Strings</a><br><a href=\"https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Decision-Making\">Decision Making</a></p>\n<h1 id=\"Minimum-Maximum-Path-to-Reach-a-Target\"><a href=\"#Minimum-Maximum-Path-to-Reach-a-Target\" class=\"headerlink\" title=\"Minimum (Maximum) Path to Reach a Target\"></a>Minimum (Maximum) Path to Reach a Target</h1><hr>\n<p>Problem list: <a href=\"https://leetcode.com/list/55ac4kuc\">https://leetcode.com/list/55ac4kuc</a></p>\n<p>Generate problem statement for this pattern</p>\n<h3 id=\"Statement\"><a href=\"#Statement\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><blockquote>\n<p>Given a target find minimum (maximum) cost &#x2F; path &#x2F; sum to reach the target.</p>\n</blockquote>\n<h3 id=\"Approach\"><a href=\"#Approach\" class=\"headerlink\" title=\"Approach\"></a>Approach</h3><blockquote>\n<p>Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes[i] = min(routes[i-1], routes[i-2], ... , routes[i-k]) + cost[i]</span><br></pre></td></tr></table></figure>\n\n<p>Generate optimal solutions for all values in the target and return the value for the target.</p>\n<h3 id=\"Top-Down\"><a href=\"#Top-Down\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int j = 0; j &lt; ways.size(); ++j) &#123;</span><br><span class=\"line\">    result = min(result, topDown(target - ways[j]) + cost/ path / sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return memo[/*state parameters*/] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up\"><a href=\"#Bottom-Up\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt;= target; ++i) &#123;</span><br><span class=\"line\">   for (int j = 0; j &lt; ways.size(); ++j) &#123;</span><br><span class=\"line\">       if (ways[j] &lt;= i) &#123;</span><br><span class=\"line\">           dp[i] = min(dp[i], dp[i - ways[j]] + cost / path / sum) ;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return dp[target]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Similar-Problems\"><a href=\"#Similar-Problems\" class=\"headerlink\" title=\"Similar Problems\"></a>Similar Problems</h3><p><a href=\"https://leetcode.com/problems/min-cost-climbing-stairs/\">746. Min Cost Climbing Stairs</a> <code>Easy</code></p>\n<h3 id=\"Top-Down-1\"><a href=\"#Top-Down-1\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int result = min(minCost(n-1, cost, memo), minCost(n-2, cost, memo)) + (n == cost.size() ? 0 : cost[n]);</span><br><span class=\"line\">return memo[n] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-1\"><a href=\"#Bottom-Up-1\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 2; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">   dp[i] = min(dp[i-1], dp[i-2]) + (i == n ? 0 : cost[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return dp[n]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/minimum-path-sum/\">64. Minimum Path Sum</a> <code>Medium</code></p>\n<h3 id=\"Top-Down-2\"><a href=\"#Top-Down-2\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int result = min(pathSum(i+1, j, grid, memo), pathSum(i, j+1, grid, memo)) + grid[i][j];</span><br><span class=\"line\">    </span><br><span class=\"line\">return memo[i][j] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-2\"><a href=\"#Bottom-Up-2\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">   for (int j = 1; j &lt; m; ++j) &#123;</span><br><span class=\"line\">       grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return grid[n-1][m-1]</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/coin-change/\">322. Coin Change</a> <code>Medium</code></p>\n<h3 id=\"Top-Down-3\"><a href=\"#Top-Down-3\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 0; i &lt; coins.size(); ++i) &#123;</span><br><span class=\"line\">    if (coins[i] &lt;= target) &#123; // check validity of a sub-problem</span><br><span class=\"line\">        result = min(ans, CoinChange(target - coins[i], coins) + 1);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return memo[target] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-3\"><a href=\"#Bottom-Up-3\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int j = 1; j &lt;= amount; ++j) &#123;</span><br><span class=\"line\">   for (int i = 0; i &lt; coins.size(); ++i) &#123;</span><br><span class=\"line\">       if (coins[i] &lt;= j) &#123;</span><br><span class=\"line\">           dp[j] = min(dp[j], dp[j - coins[i]] + 1);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/minimum-falling-path-sum/\">931. Minimum Falling Path Sum</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-cost-for-tickets/\">983. Minimum Cost For Tickets</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/2-keys-keyboard/\">650. 2 Keys Keyboard</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/perfect-squares/\">279. Perfect Squares</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/last-stone-weight-ii/\">1049. Last Stone Weight II</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/triangle/\">120. Triangle</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/ones-and-zeroes/\">474. Ones and Zeroes</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/maximal-square/\">221. Maximal Square</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/coin-change/\">322. Coin Change</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/\">1240. Tiling a Rectangle with the Fewest Squares</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/dungeon-game/\">174. Dungeon Game</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-number-of-refueling-stops/\">871. Minimum Number of Refueling Stops</a> <code>Hard</code></p>\n<h1 id=\"Distinct-Ways\"><a href=\"#Distinct-Ways\" class=\"headerlink\" title=\"Distinct Ways\"></a>Distinct Ways</h1><hr>\n<p>Problem List: <a href=\"https://leetcode.com/list/55ajm50i\">https://leetcode.com/list/55ajm50i</a></p>\n<p>Generate problem statement for this pattern</p>\n<h3 id=\"Statement-1\"><a href=\"#Statement-1\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><blockquote>\n<p>Given a target find a number of distinct ways to reach the target.</p>\n</blockquote>\n<h3 id=\"Approach-1\"><a href=\"#Approach-1\" class=\"headerlink\" title=\"Approach\"></a>Approach</h3><blockquote>\n<p>Sum all possible ways to reach the current state.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">routes[i] = routes[i-1] + routes[i-2], ... , + routes[i-k]</span><br></pre></td></tr></table></figure>\n\n<p>Generate sum for all values in the target and return the value for the target.</p>\n<h3 id=\"Top-Down-4\"><a href=\"#Top-Down-4\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int j = 0; j &lt; ways.size(); ++j) &#123;</span><br><span class=\"line\">    result += topDown(target - ways[j]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return memo[/*state parameters*/] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-4\"><a href=\"#Bottom-Up-4\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt;= target; ++i) &#123;</span><br><span class=\"line\">   for (int j = 0; j &lt; ways.size(); ++j) &#123;</span><br><span class=\"line\">       if (ways[j] &lt;= i) &#123;</span><br><span class=\"line\">           dp[i] += dp[i - ways[j]];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return dp[target]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Similar-Problems-1\"><a href=\"#Similar-Problems-1\" class=\"headerlink\" title=\"Similar Problems\"></a>Similar Problems</h3><p><a href=\"https://leetcode.com/problems/climbing-stairs/\">70. Climbing Stairs</a> <code>Easy</code></p>\n<h3 id=\"Top-Down-5\"><a href=\"#Top-Down-5\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int result = climbStairs(n-1, memo) + climbStairs(n-2, memo); </span><br><span class=\"line\">    </span><br><span class=\"line\">return memo[n] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-5\"><a href=\"#Bottom-Up-5\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int stair = 2; stair &lt;= n; ++stair) &#123;</span><br><span class=\"line\">   for (int step = 1; step &lt;= 2; ++step) &#123;</span><br><span class=\"line\">       dp[stair] += dp[stair-step];   </span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/unique-paths/\">62. Unique Paths</a> <code>Medium</code></p>\n<h3 id=\"Top-Down-6\"><a href=\"#Top-Down-6\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int result = UniquePaths(x-1, y) + UniquePaths(x, y-1);</span><br><span class=\"line\"></span><br><span class=\"line\">return memo[x][y] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-6\"><a href=\"#Bottom-Up-6\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt; m; ++i) &#123;</span><br><span class=\"line\">   for (int j = 1; j &lt; n; ++j) &#123;</span><br><span class=\"line\">       dp[i][j] = dp[i][j-1] + dp[i-1][j];</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/\">1155. Number of Dice Rolls With Target Sum</a> <code>Medium</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int rep = 1; rep &lt;= d; ++rep) &#123;</span><br><span class=\"line\">   vector&lt;int&gt; new_ways(target+1);</span><br><span class=\"line\">   for (int already = 0; already &lt;= target; ++already) &#123;</span><br><span class=\"line\">       for (int pipe = 1; pipe &lt;= f; ++pipe) &#123;</span><br><span class=\"line\">           if (already - pipe &gt;= 0) &#123;</span><br><span class=\"line\">               new_ways[already] += ways[already - pipe];</span><br><span class=\"line\">               new_ways[already] %= mod;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   ways = new_ways;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Note</strong></p>\n<p>Some questions point out the number of repetitions, in that case, add one more loop to simulate every repetition.</p>\n<p><a href=\"https://leetcode.com/problems/knight-probability-in-chessboard/\">688. Knight Probability in Chessboard</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/target-sum/\">494. Target Sum</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/combination-sum-iv/\">377. Combination Sum IV</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/knight-dialer/\">935. Knight Dialer</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/dice-roll-simulation/\">1223. Dice Roll Simulation</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/partition-equal-subset-sum/\">416. Partition Equal Subset Sum</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/soup-servings/\">808. Soup Servings</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/domino-and-tromino-tiling/\">790. Domino and Tromino Tiling</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/\">801. Minimum Swaps To Make Sequences Increasing</a></p>\n<p><a href=\"https://leetcode.com/problems/number-of-longest-increasing-subsequence/\">673. Number of Longest Increasing Subsequence</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/unique-paths-ii/\">63. Unique Paths II</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/out-of-boundary-paths/\">576. Out of Boundary Paths</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/\">1269. Number of Ways to Stay in the Same Place After Some Steps</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/count-vowels-permutation/\">1220. Count Vowels Permutation</a> <code>Hard</code></p>\n<h1 id=\"Merging-Intervals\"><a href=\"#Merging-Intervals\" class=\"headerlink\" title=\"Merging Intervals\"></a>Merging Intervals</h1><hr>\n<p>Problem List: <a href=\"https://leetcode.com/list/55aj8s16\">https://leetcode.com/list/55aj8s16</a></p>\n<p>Generate problem statement for this pattern</p>\n<h3 id=\"Statement-2\"><a href=\"#Statement-2\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><blockquote>\n<p>Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.</p>\n</blockquote>\n<h3 id=\"Approach-2\"><a href=\"#Approach-2\" class=\"headerlink\" title=\"Approach\"></a>Approach</h3><blockquote>\n<p>Find all optimal solutions for every interval and return the best possible answer.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// from i to j</span><br><span class=\"line\">dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]</span><br></pre></td></tr></table></figure>\n\n<p>Get the best from the left and right sides and add a solution for the current position.</p>\n<h3 id=\"Top-Down-7\"><a href=\"#Top-Down-7\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int k = i; k &lt;= j; ++k) &#123;</span><br><span class=\"line\">    result = max(result, topDown(nums, i, k-1) + result[k] + topDown(nums, k+1, j));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return memo[/*state parameters*/] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-7\"><a href=\"#Bottom-Up-7\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int l = 1; l&lt;n; l++) &#123;</span><br><span class=\"line\">   for(int i = 0; i&lt;n-l; i++) &#123;</span><br><span class=\"line\">       int j = i+l;</span><br><span class=\"line\">       for(int k = i; k&lt;j; k++) &#123;</span><br><span class=\"line\">           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return dp[0][n-1];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int l = 1; l&lt;n; l++) &#123;</span><br><span class=\"line\">   for(int i = 0; i&lt;n-l; i++) &#123;</span><br><span class=\"line\">       int j = i+l;</span><br><span class=\"line\">       for(int k = i; k&lt;j; k++) &#123;</span><br><span class=\"line\">           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">return dp[0][n-1]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Similar-Problems-2\"><a href=\"#Similar-Problems-2\" class=\"headerlink\" title=\"Similar Problems\"></a>Similar Problems</h3><p><a href=\"https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/\">1130. Minimum Cost Tree From Leaf Values</a> <code>Medium</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int l = 1; l &lt; n; ++l) &#123;</span><br><span class=\"line\">   for (int i = 0; i &lt; n - l; ++i) &#123;</span><br><span class=\"line\">       int j = i + l;</span><br><span class=\"line\">       dp[i][j] = INT_MAX;</span><br><span class=\"line\">       for (int k = i; k &lt; j; ++k) &#123;</span><br><span class=\"line\">           dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxs[i][k] * maxs[k+1][j]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/unique-binary-search-trees/\">96. Unique Binary Search Trees</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-score-triangulation-of-polygon/\">1039. Minimum Score Triangulation of Polygon</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/remove-boxes/\">546. Remove Boxes</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-cost-to-merge-stones/\">1000. Minimum Cost to Merge Stones</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/burst-balloons/\">312. Burst Balloons</a> <code>Hard</code></p>\n<h3 id=\"Top-Down-8\"><a href=\"#Top-Down-8\" class=\"headerlink\" title=\"Top-Down\"></a>Top-Down</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int k = i; k &lt;= j; ++k) &#123;</span><br><span class=\"line\">    result = max(result, topDown(nums, i, k-1, memo) + (i-1 &gt;= 0 ? nums[i-1] : 1) * nums[k] * (j+1 &lt; nums.size() ? nums[j+1] : 1) + topDown(nums, k+1, j, memo));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return memo[i][j] = result;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Bottom-Up-8\"><a href=\"#Bottom-Up-8\" class=\"headerlink\" title=\"Bottom-Up\"></a>Bottom-Up</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(int l = 1; l &lt; n; l++) &#123;</span><br><span class=\"line\">    for(int i = 0; i &lt; n-l; i++) &#123;</span><br><span class=\"line\">        int j = i+l;</span><br><span class=\"line\">        for(int k = i; k &lt;= j; k++) &#123;</span><br><span class=\"line\">            dp[i][j] = max(dp[i][j], (((k&gt;i &amp;&amp; k&gt;0) ? dp[i][k-1] : 0) + (i&gt;0 ? nums[i-1] : 1) * nums[k] * (j&lt;n-1 ? nums[j+1] : 1) + ((k&lt;j &amp;&amp; k&lt;n-1) ? dp[k+1][j] : 0)));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return dp[0][n-1];</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/guess-number-higher-or-lower-ii/\">375. Guess Number Higher or Lower II</a> <code>Medium</code></p>\n<h1 id=\"DP-on-Strings\"><a href=\"#DP-on-Strings\" class=\"headerlink\" title=\"DP on Strings\"></a>DP on Strings</h1><hr>\n<p>Problem List: <a href=\"https://leetcode.com/list/55afh7m7\">https://leetcode.com/list/55afh7m7</a></p>\n<p>General problem statement for this pattern can vary but most of the time you are given two strings where lengths of those strings are not big</p>\n<h3 id=\"Statement-3\"><a href=\"#Statement-3\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><blockquote>\n<p>Given two strings <code>s1</code> and <code>s2</code>, return <code>some result</code>.</p>\n</blockquote>\n<h3 id=\"Approach-3\"><a href=\"#Approach-3\" class=\"headerlink\" title=\"Approach\"></a>Approach</h3><blockquote>\n<p>Most of the problems on this pattern requires a solution that can be accepted in O(n^2) complexity.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// i - indexing string s1</span><br><span class=\"line\">// j - indexing string s2</span><br><span class=\"line\">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">   for (int j = 1; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">       if (s1[i-1] == s2[j-1]) &#123;</span><br><span class=\"line\">           dp[i][j] = /*code*/;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           dp[i][j] = /*code*/;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>If you are given one string <code>s</code> the approach may little vary</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int l = 1; l &lt; n; ++l) &#123;</span><br><span class=\"line\">   for (int i = 0; i &lt; n-l; ++i) &#123;</span><br><span class=\"line\">       int j = i + l;</span><br><span class=\"line\">       if (s[i] == s[j]) &#123;</span><br><span class=\"line\">           dp[i][j] = /*code*/;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           dp[i][j] = /*code*/;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/longest-common-subsequence/\">1143. Longest Common Subsequence</a> <code>Medium</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">   for (int j = 1; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">       if (text1[i-1] == text2[j-1]) &#123;</span><br><span class=\"line\">           dp[i][j] = dp[i-1][j-1] + 1;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           dp[i][j] = max(dp[i-1][j], dp[i][j-1]);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/palindromic-substrings/\">647. Palindromic Substrings</a> <code>Medium</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int l = 1; l &lt; n; ++l) &#123;</span><br><span class=\"line\">   for (int i = 0; i &lt; n-l; ++i) &#123;</span><br><span class=\"line\">       int j = i + l;</span><br><span class=\"line\">       if (s[i] == s[j] &amp;&amp; dp[i+1][j-1] == j-i-1) &#123;</span><br><span class=\"line\">           dp[i][j] = dp[i+1][j-1] + 2;</span><br><span class=\"line\">       &#125; else &#123;</span><br><span class=\"line\">           dp[i][j] = 0;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/longest-palindromic-subsequence/\">516. Longest Palindromic Subsequence</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/shortest-common-supersequence/\">1092. Shortest Common Supersequence</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/edit-distance/\">72. Edit Distance</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/distinct-subsequences/\">115. Distinct Subsequences</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/\">712. Minimum ASCII Delete Sum for Two Strings</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/longest-palindromic-substring/\">5. Longest Palindromic Substring</a> <code>Medium</code></p>\n<h1 id=\"Decision-Making\"><a href=\"#Decision-Making\" class=\"headerlink\" title=\"Decision Making\"></a>Decision Making</h1><hr>\n<p>Problem List: <a href=\"https://leetcode.com/list/55af7bu7\">https://leetcode.com/list/55af7bu7</a></p>\n<p>The general problem statement for this pattern is forgiven situation decide whether to use or not to use the current state. So, the problem requires you to make a decision at a current state.</p>\n<h3 id=\"Statement-4\"><a href=\"#Statement-4\" class=\"headerlink\" title=\"Statement\"></a>Statement</h3><blockquote>\n<p>Given a set of values find an answer with an option to choose or ignore the current value.</p>\n</blockquote>\n<h3 id=\"Approach-4\"><a href=\"#Approach-4\" class=\"headerlink\" title=\"Approach\"></a>Approach</h3><blockquote>\n<p>If you decide to choose the current value use the previous result where the value was ignored; vice-versa, if you decide to ignore the current value use previous result where value was used.</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// i - indexing a set of values</span><br><span class=\"line\">// j - options to ignore j values</span><br><span class=\"line\">for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">   for (int j = 1; j &lt;= k; ++j) &#123;</span><br><span class=\"line\">       dp[i][j] = max(&#123;dp[i][j], dp[i-1][j] + arr[i], dp[i-1][j-1]&#125;);</span><br><span class=\"line\">       dp[i][j-1] = max(&#123;dp[i][j-1], dp[i-1][j-1] + arr[i], arr[i]&#125;);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/house-robber/\">198. House Robber</a> <code>Easy</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (int i = 1; i &lt; n; ++i) &#123;</span><br><span class=\"line\">   dp[i][1] = max(dp[i-1][0] + nums[i], dp[i-1][1]);</span><br><span class=\"line\">   dp[i][0] = dp[i-1][1];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock/\">121. Best Time to Buy and Sell Stock</a> <code>Easy</code></p>\n<p><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/\">714. Best Time to Buy and Sell Stock with Transaction Fee</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/\">309. Best Time to Buy and Sell Stock with Cooldown</a> <code>Medium</code></p>\n<p><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/\">123. Best Time to Buy and Sell Stock III</a> <code>Hard</code></p>\n<p><a href=\"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/\">188. Best Time to Buy and Sell Stock IV</a> <code>Hard</code></p>\n<p>I hope these tips will be helpful 😊</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "Dynamic Programming",
                "Patterns"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/embed-music/",
            "url": "https://samirpaul.in/posts/embed-music/",
            "title": "Embed MusicApp",
            "date_published": "2023-08-05T20:52:53.890Z",
            "content_html": "<p>Embed <a href=\"https://samirpaul.in/music/embed\"><b>samirpaul.in&#x2F;music&#x2F;embed</b></a> music player(Lofi Study Music) to any website:</p>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo:\"></a>Demo:</h3><iframe src=\"https://samirpaul.in/music/embed/index.html\"\n  title=\"Embed MusicApp\"\n    frameborder=\"0\"\n    loading=\"lazy\"\n    marginheight=\"0\"\n    marginwidth=\"0\"\n    width=\"100%\"\n    height=\"223\"\n    scrolling=\"no\">\n</iframe>\n\n\n<h3 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code:\"></a>Code:</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iframe</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://samirpaul.in/music/embed&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">title</span>=<span class=\"string\">&quot;Embed MusicApp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">frameborder</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">loading</span>=<span class=\"string\">&quot;lazy&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">marginheight</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">marginwidth</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">width</span>=<span class=\"string\">&quot;100%&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">height</span>=<span class=\"string\">&quot;223&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">scrolling</span>=<span class=\"string\">&quot;no&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "embed-musicapp",
                "music",
                "embeded",
                "music-player"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/google-programmable-search-engine/",
            "url": "https://samirpaul.in/posts/google-programmable-search-engine/",
            "title": "Google Programmable Search Engine",
            "date_published": "2023-08-05T20:52:53.852Z",
            "content_html": "<p>Google Programmable Search Engine lets you include a search engine on your website to help your visitors find the information they’re looking for. Because Programmable Search Engine is based on Google’s core search technology, you can be confident that your users are getting high quality, relevant results. You can customize a lot of your search engine, including:</p>\n<ul>\n<li>Apply your site’s look and feel to the search box and results page</li>\n<li>Use search features such as refinements, autocomplete, and promotions to enhance your users’ search experience</li>\n<li>Understand your users’ behavior by linking your search engine with  <a href=\"https://google.com/analytics/\">Google Analytics</a></li>\n<li>Make money from your search engine with  <a href=\"https://google.com/adsense\">Google AdSense</a></li>\n</ul>\n<h3 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo:\"></a>Demo:</h3><script async src=\"https://cse.google.com/cse.js?cx=4269bf6b77dbf4cae\">\n</script>\n<div class=\"gcse-search\"></div>\n\n<hr>\n<h3 id=\"How-is-Programmable-Search-Engine-different-from-Google-Web-Search\"><a href=\"#How-is-Programmable-Search-Engine-different-from-Google-Web-Search\" class=\"headerlink\" title=\"How is Programmable Search Engine different from Google Web Search?\"></a>How is Programmable Search Engine different from Google Web Search?</h3><p>You have the option to set your custom search engine to search the entire web, similar to a normal search on Google.com. However, you might notice some differences. Your custom search engine:</p>\n<ul>\n<li>Emphasizes your results over anything else on the web</li>\n<li>Doesn’t include some  <a href=\"https://support.google.com/websearch#topic=3378866\">Google Web Search features</a>, such as personalized results</li>\n<li>May have a subset of results from the Google index if you include more than ten sites</li>\n</ul>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "programmable-search"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/why-does-the-osi-model-matter/",
            "url": "https://samirpaul.in/posts/why-does-the-osi-model-matter/",
            "title": "Why Does The OSI Model Matter?",
            "date_published": "2023-08-05T20:52:53.847Z",
            "content_html": "<p>The OSI (Open Systems Interconnection) model matters because it provides a standard way of describing and understanding the different functions and components involved in a network communication. The OSI model is a seven-layer abstraction of the network communication process, and it defines the tasks and responsibilities of each layer.</p>\n<ol>\n<li><p>Standardization: The OSI model provides a standard reference model that is widely used and accepted in the industry. This standardization helps to ensure that different systems and components can communicate with each other, even if they were developed by different vendors or organizations.</p>\n</li>\n<li><p>Improved troubleshooting: The OSI model provides a systematic and organized approach to understanding network communication issues. By breaking down network communication into its component parts, it becomes easier to diagnose and fix problems.</p>\n</li>\n<li><p>Design and development: The OSI model can help with the design and development of network systems by providing a common understanding of the different layers and their responsibilities. This can facilitate communication and collaboration between different teams and stakeholders.</p>\n</li>\n<li><p>Education: The OSI model is a useful tool for teaching and learning about network communication. It provides a simple and visual way to understand the complex process of network communication.</p>\n</li>\n</ol>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science",
                "networking"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/virtualization-vs-containerization/",
            "url": "https://samirpaul.in/posts/virtualization-vs-containerization/",
            "title": "Virtualization vs Containerization",
            "date_published": "2023-08-05T20:52:53.842Z",
            "content_html": "<p>Virtualization and containerization are two different approaches to creating and managing virtual environments for software applications.</p>\n<p>Virtualization involves creating a virtual machine (VM) that acts as a separate, self-contained operating system environment. Each VM runs its own operating system and applications, and has its own set of virtual hardware resources, such as CPU, memory, and storage. Virtualization allows multiple virtual machines to run on a single physical server, improving utilization and reducing costs. Examples of virtualization technology include VMware and Hyper-V.</p>\n<p>Containerization, on the other hand, is a newer approach to virtualization that is designed to be more lightweight and efficient. Containers are similar to virtual machines, in that they provide a self-contained environment for running applications. However, unlike virtual machines, containers do not include a full operating system. Instead, they share the host operating system and rely on the host for system services. This means that containers are much smaller and faster to start up than virtual machines, and can be run on a much larger scale. Examples of containerization technology include Docker and Kubernetes.</p>\n<img src=\"https://samirpaulb.github.io/assets/virtualization-vs-containerization.jpg\" alt=\"virtualization vs containerization\" style=\"width:100%\" loading=\"lazy\">\n\n<p>In summary, virtualization and containerization are both ways to create virtual environments for software applications, but they differ in the level of abstraction and the resources they provide. Virtualization provides a full operating system environment, while containerization provides a lightweight, application-focused environment that relies on the host operating system. Both approaches have their own benefits and trade-offs, and the best choice will depend on the specific requirements of the application and the infrastructure.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/tcp-vs-udp/",
            "url": "https://samirpaul.in/posts/tcp-vs-udp/",
            "title": "TCP vs UDP",
            "date_published": "2023-08-05T20:52:53.839Z",
            "content_html": "<p>TCP (Transmission Control Protocol) and UDP (User Datagram Protocol) are two of the most commonly used protocols for transmitting data over a network.</p>\n<p>TCP is a reliable and connection-oriented protocol, meaning that a virtual connection must be established between the sender and the receiver before data can be transmitted. It ensures that data is delivered to the recipient in the same order it was sent, and that it is received without errors. If a packet of data is lost or corrupted during transmission, TCP will automatically retransmit the missing data until it is successfully received. This makes TCP a great choice for applications that require reliable data transfer, such as email and file transfers.</p>\n<p>UDP, on the other hand, is a connectionless and unreliable protocol. Unlike TCP, it does not establish a virtual connection between the sender and the receiver, and it does not guarantee that the data will be delivered in the same order it was sent. It is faster than TCP because it has less overhead, but it is less reliable. UDP is often used for applications that do not require reliable data transfer and can tolerate some lost or corrupted data, such as video or audio streaming, online gaming, and voice over IP (VoIP).</p>\n<p>In summary, TCP is best for applications that require reliable data transfer, while UDP is best for applications that can tolerate some loss and do not require reliable data transfer.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/ssl-tls-mtls/",
            "url": "https://samirpaul.in/posts/ssl-tls-mtls/",
            "title": "SSL TLS mTLS",
            "date_published": "2023-08-05T20:52:53.837Z",
            "content_html": "<p>SSL (Secure Sockets Layer), TLS (Transport Layer Security), and mTLS (Mutual TLS) are all security protocols used to secure communications over the internet.</p>\n<p>SSL was the original protocol used to secure internet communications, but it has been largely replaced by TLS, which is considered to be more secure. TLS is a cryptographic protocol that provides secure communication between two endpoints, such as a web server and a client browser. It ensures that the data transmitted between the endpoints is confidential and integrity protected.</p>\n<p>mTLS, also known as Mutual TLS, is an extension of TLS that adds an extra layer of security by requiring both the client and server to present a valid certificate to each other. This provides a stronger level of identity validation and protects against man-in-the-middle attacks. mTLS is used in situations where it is important to ensure the authenticity of both parties involved in a communication, such as in financial transactions or sensitive data transfers.</p>\n<p>In summary, SSL, TLS, and mTLS are all protocols used to secure internet communications, with TLS being the most widely used and considered to be the most secure. mTLS adds an extra layer of security by requiring both the client and server to present a valid certificate to each other, providing a stronger level of identity validation and protection against man-in-the-middle attacks.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/slo-or-service-level-objective/",
            "url": "https://samirpaul.in/posts/slo-or-service-level-objective/",
            "title": "SLO or Service Level Objective",
            "date_published": "2023-08-05T20:52:53.835Z",
            "content_html": "<p>A Service Level Objective (SLO) is a target or goal that a service provider sets for a specific service or service component, in terms of performance, availability, or some other quality metric. The SLO defines what the service provider considers to be an acceptable level of service, and provides a clear and measurable way to track the performance of the service over time.</p>\n<p>An SLO is typically expressed as a specific, quantifiable target, such as “99.95% availability” or “mean response time of less than 500 milliseconds”. The SLO can be used to track the performance of the service, and to identify areas where improvements can be made.</p>\n<p>The SLO is often used in conjunction with a Service Level Agreement (SLA), which is a formal agreement between a service provider and a customer that outlines the level of service that will be delivered. The SLO forms the basis for the SLA, and provides a clear and measurable target for the service provider to meet.</p>\n<p>In summary, an SLO is a specific and measurable target that a service provider sets for a service or service component, in order to track and measure its performance over time. By setting clear and achievable SLOs, service providers can ensure that their services meet the needs and expectations of their customers.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/sla-or-service-level-agreement/",
            "url": "https://samirpaul.in/posts/sla-or-service-level-agreement/",
            "title": "SLA or Service Level Agreement",
            "date_published": "2023-08-05T20:52:53.832Z",
            "content_html": "<p>A Service Level Agreement (SLA) is a contract between a service provider and a customer that outlines the level of service that the provider will deliver. The agreement is designed to ensure that the customer is aware of what to expect from the service, and to hold the service provider accountable for meeting those expectations.</p>\n<p>SLAs typically cover a range of aspects, including:</p>\n<p>Availability: The percentage of time that the service will be available and accessible to the customer.</p>\n<p>Performance: The expected response times for the service, and any relevant performance metrics.<br>Support: The hours of availability for customer support, and the response times for support requests.</p>\n<p>Maintenance: The scheduled maintenance windows for the service, and any expected downtime during these windows.</p>\n<p>Reporting: The frequency and format of performance reports that will be provided to the customer.</p>\n<p>Escalation: The procedures for escalation of issues, and the responsibility of the service provider in addressing them.</p>\n<p>Service credits: Financial compensation provided to the customer in the event that the service provider fails to meet the agreed-upon service levels.</p>\n<p>SLAs are common in many industries, including information technology, telecommunications, and cloud computing. By clearly defining the level of service that a customer can expect, SLAs help to build trust and ensure that the service provider and customer are aligned in their expectations.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/single-sign-on-sso/",
            "url": "https://samirpaul.in/posts/single-sign-on-sso/",
            "title": "Single Sign-On SSO",
            "date_published": "2023-08-05T20:52:53.830Z",
            "content_html": "<p>Single Sign-On (SSO) is a centralized authentication mechanism that allows users to access multiple applications or services with a single set of credentials. The idea behind SSO is to simplify the process of logging in to various systems, so that users only have to remember one username and password.</p>\n<p>With SSO, when a user logs in to one application or service, they are automatically logged in to all of the other systems and applications that are part of the SSO solution. This eliminates the need for the user to enter their credentials for each individual system, reducing the risk of forgotten passwords, password fatigue, and other security-related issues.</p>\n<p>There are different SSO technologies, including SAML (Security Assertion Markup Language), Kerberos, and OAuth&#x2F;OpenID Connect. Each of these technologies has its own strengths and weaknesses, and the best choice depends on the specific requirements and constraints of the organization.</p>\n<p>In summary, SSO is a centralized authentication mechanism that allows users to access multiple applications and services with a single set of credentials, reducing the risk of forgotten passwords and improving security. SSO provides a convenient and secure way to manage access to resources, making it a popular choice for many organizations.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/saml-vs-oauth-2-dot-0-and-openid-connect/",
            "url": "https://samirpaul.in/posts/saml-vs-oauth-2-dot-0-and-openid-connect/",
            "title": "SAML vs OAuth 2.0 and OpenID Connect",
            "date_published": "2023-08-05T20:52:53.827Z",
            "content_html": "<p>SAML (Security Assertion Markup Language), OAuth 2.0, and OpenID Connect are all protocols used for authentication and authorization on the web, but they each have different purposes and use cases.</p>\n<p>SAML is an XML-based standard for exchanging authentication and authorization data between parties. It is primarily used for single sign-on (SSO) solutions, allowing users to log in to multiple applications and services with a single set of credentials. SAML is used by many organizations to provide a secure and seamless SSO experience for their users.</p>\n<p>OAuth 2.0 is an authorization framework that enables a third-party application to obtain limited access to an HTTP service on behalf of a resource owner, without requiring the resource owner to reveal its credentials. OAuth 2.0 provides a secure way for a user to grant access to their resources to a third-party application, without the need for the user to share their password with the application. OAuth 2.0 is used by many popular web applications, including Google, Facebook, and Twitter, to allow users to authenticate and authorize access to their resources.</p>\n<p>OpenID Connect is a simple identity layer built on top of OAuth 2.0. It provides a secure way to authenticate users and verify their identities, while also providing information about the user’s identity to the client. OpenID Connect enables the client to know that the user is who they claim to be, without having to manage passwords or other sensitive information. It provides a single sign-on solution, allowing users to authenticate once and then access multiple applications without having to log in again. OpenID Connect is used by many organizations to provide a secure and easy way for their users to authenticate and access resources.</p>\n<p>In summary, SAML is primarily used for SSO, allowing users to log in to multiple applications and services with a single set of credentials. OAuth 2.0 is an authorization framework used to control access to resources, while OpenID Connect is a simple identity layer built on top of OAuth 2.0 that provides a secure way to authenticate users and verify their identities. Both OAuth 2.0 and OpenID Connect are widely used and provide a secure and flexible way to control access to resources and authenticate users on the web.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-vs-r-for-data-science/",
            "url": "https://samirpaul.in/posts/python-vs-r-for-data-science/",
            "title": "Python vs R for data science",
            "date_published": "2023-08-05T20:52:53.825Z",
            "content_html": "<p>Both Python and R are popular programming languages used in data science, but each has its own strengths and weaknesses.</p>\n<p>Python is a general-purpose programming language that has become a popular choice for data science due to its simplicity, versatility, and large community of users. Python has a large number of libraries and packages specifically designed for data analysis and manipulation, such as NumPy, Pandas, and Matplotlib. It also has a rich ecosystem for machine learning, with libraries such as scikit-learn, TensorFlow, and PyTorch.</p>\n<p>On the other hand, R is a language specifically designed for data analysis and statistical computing. R has a strong focus on graphical representation of data and provides many built-in functions for statistical analysis, making it a popular choice for exploratory data analysis. R also has a vast library of packages for data analysis, machine learning, and visualization, such as ggplot2, dplyr, and caret.</p>\n<p>In conclusion, the choice between Python and R largely depends on the specific requirements of the project and personal preferences of the data scientist. Python is a good choice for a general-purpose programming language, while R is best suited for data analysis and statistical computing. Some data scientists prefer to use both languages, leveraging the strengths of each to get the job done.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-to-automate-web-scraping/",
            "url": "https://samirpaul.in/posts/python-libraries-to-automate-web-scraping/",
            "title": "Python libraries to automate web scraping",
            "date_published": "2023-08-05T20:52:53.823Z",
            "content_html": "<p>There are several libraries in Python for automating web scraping:</p>\n<p>BeautifulSoup: This is a popular library for web scraping and parsing HTML and XML documents. It provides a convenient way to extract data from HTML and XML documents by searching and navigating the document tree.</p>\n<p>Scrapy: This is a full-featured web crawling and scraping framework for Python. It provides a comprehensive toolset for extracting data from websites, including features for handling common tasks like logging in, following links, and handling errors.</p>\n<p>Selenium: This is a browser automation library that can be used for web scraping as well. It allows you to control a web browser and interact with websites programmatically, making it useful for automating tasks that would otherwise require manual intervention.</p>\n<p>requests: This is a library for sending HTTP requests and processing HTTP responses. While it’s not specifically designed for web scraping, it can be used in combination with other libraries like BeautifulSoup to automate the process of sending requests to websites and extracting data from the responses.</p>\n<p>lxml: This is a library for parsing and manipulating XML and HTML documents. It provides an alternative to BeautifulSoup and can be used to extract data from HTML and XML documents in a more efficient and streamlined way.</p>\n<p>All of these libraries can be used to automate web scraping, but the best choice for your needs will depend on the specific requirements of your project. Some libraries may be more suited for large-scale web scraping, while others may be better suited for more targeted data extraction.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-validating-data-used-for-forms-in-many-cases/",
            "url": "https://samirpaul.in/posts/python-libraries-for-validating-data-used-for-forms-in-many-cases/",
            "title": "Python libraries for validating data. Used for forms in many cases",
            "date_published": "2023-08-05T20:52:53.820Z",
            "content_html": "<p>There are several Python libraries available for validating data, including:</p>\n<p>WTForms: WTForms is a flexible and powerful form handling library for Python. It provides a simple and intuitive interface for defining and validating forms, and it includes built-in support for a wide range of form fields, including text fields, checkboxes, and select fields.</p>\n<p>Django Forms: Django Forms is a form handling library built into the Django web framework. It provides a simple and flexible interface for defining and validating forms, and it includes support for a wide range of form fields, including text fields, checkboxes, and select fields.</p>\n<p>cerberus: Cerberus is a fast and lightweight data validation library for Python. It provides a simple and flexible interface for defining and validating data, and it includes support for a wide range of validation rules, including type checking, string formatting, and range checking.</p>\n<p>marshmallow: marshmallow is a data serialization and validation library for Python. It provides a simple and flexible interface for defining and validating data, and it includes support for a wide range of data types, including strings, integers, and dates.</p>\n<p>voluptuous: voluptuous is a data validation library for Python. It provides a simple and intuitive interface for defining and validating data, and it includes support for a wide range of validation rules, including type checking, string formatting, and range checking.</p>\n<p>These are just a few examples of the many data validation libraries available for Python. The best library for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-parsing-urls/",
            "url": "https://samirpaul.in/posts/python-libraries-for-parsing-urls/",
            "title": "Python libraries for parsing URLs",
            "date_published": "2023-08-05T20:52:53.817Z",
            "content_html": "<p>There are several libraries in Python for parsing URLs:</p>\n<p>urllib: This is a standard library in Python, and it includes several modules for working with URLs and HTTP requests, including urllib.parse which provides functions for parsing URLs.</p>\n<p>urlparse: This is another standard library in Python, and it provides similar functionality as urllib.parse.</p>\n<p>furl: This is a third-party library for parsing and manipulating URLs. It provides a more user-friendly interface than the standard libraries and supports features like query string parsing and modification.</p>\n<p>requests-furl: This library is an add-on for the requests library, and it provides URL parsing and manipulation functionality similar to furl.</p>\n<p>py-url-parse: This is another third-party library for parsing URLs, and it provides a simple and lightweight interface for parsing URLs into their constituent parts.</p>\n<p>All of these libraries can be used to parse URLs into their constituent parts, such as the scheme, host, path, query string, and fragment. You can choose the one that best fits your needs based on your requirements for features, ease of use, and performance.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-manipulating-audio-and-its-metadata/",
            "url": "https://samirpaul.in/posts/python-libraries-for-manipulating-audio-and-its-metadata/",
            "title": "Python libraries for manipulating audio and its metadata",
            "date_published": "2023-08-05T20:52:53.814Z",
            "content_html": "<p>There are several Python libraries that can be used for manipulating audio and its metadata, including:</p>\n<ol>\n<li><p><strong>pydub:</strong> pydub is a high-level library for audio manipulation. It allows you to load audio from a variety of sources (including MP3, WAV, and FLAC files), perform operations on the audio (such as slicing, concatenating, and exporting), and work with the metadata associated with the audio.</p>\n</li>\n<li><p><strong>librosa:</strong> librosa is a library for audio analysis and manipulation. It provides functions for loading audio from disk, computing features like Mel spectrograms and MFCCs, and manipulating the audio signal in various ways. It also includes functions for working with audio metadata, such as extracting song titles and artist information.</p>\n</li>\n<li><p><strong>audioread:</strong> audioread is a library for decoding audio files of various formats, including MP3, FLAC, and WAV. It provides a simple, unified interface for reading audio data from a variety of file formats, and it can also extract metadata from the audio files, such as the length of the audio, the sample rate, and the number of channels.</p>\n</li>\n<li><p><strong>mutagen:</strong> mutagen is a library for reading and writing metadata in a variety of audio file formats, including MP3, FLAC, and Ogg Vorbis. It provides a simple and flexible interface for working with audio metadata, and it supports a wide range of metadata fields, including album art, lyrics, and album and track information.</p>\n</li>\n<li><p><strong>soundfile:</strong> soundfile is a library for reading and writing audio files of various formats, including WAV, AIFF, and FLAC. It provides a simple and efficient interface for reading and writing audio data, and it includes support for working with the metadata associated with the audio files, such as the sample rate and number of channels.</p>\n</li>\n</ol>\n<p>These are just a few examples of the many libraries available for working with audio and its metadata in Python. The best library for your needs will depend on the requirements of your specific project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-implementing-authentication-schemes/",
            "url": "https://samirpaul.in/posts/python-libraries-for-implementing-authentication-schemes/",
            "title": "Python libraries for implementing authentication schemes",
            "date_published": "2023-08-05T20:52:53.812Z",
            "content_html": "<p>There are several Python libraries that can be used for implementing authentication schemes, including:</p>\n<p>Flask-Login: Flask-Login is a library for handling user authentication in Flask applications. It provides a simple and flexible interface for managing user accounts, including login and logout, as well as user session management.</p>\n<p>Django-Auth-LDAP: Django-Auth-LDAP is a library for authenticating against an LDAP directory in Django applications. It provides a simple and efficient way to authenticate users against an LDAP directory, and it includes support for user account management and session management.</p>\n<p>PyJWT: PyJWT is a library for encoding and decoding JSON Web Tokens (JWT) in Python. JWT is a popular format for transmitting information between parties, and PyJWT provides a simple and efficient way to encode and decode JWTs in Python.</p>\n<p>Passlib: Passlib is a library for handling password storage and verification in Python. It provides a simple and flexible interface for storing and verifying passwords, and it includes support for a wide range of password hashing algorithms, including bcrypt, scrypt, and Argon2.</p>\n<p>OAuthLib: OAuthLib is a library for implementing OAuth in Python. OAuth is a popular standard for authorization, and OAuthLib provides a simple and flexible way to implement OAuth in your Python applications.</p>\n<p>These are just a few examples of the many libraries available for implementing authentication schemes in Python. The best library for your needs will depend on the requirements of your specific project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-caching-data/",
            "url": "https://samirpaul.in/posts/python-libraries-for-caching-data/",
            "title": "Python libraries for caching data",
            "date_published": "2023-08-05T20:52:53.809Z",
            "content_html": "<p>There are several Python libraries available for caching data, including:</p>\n<p>Redis: Redis is an open-source, in-memory data store that supports a wide range of data structures, including hashes, lists, sets, and sorted sets. Redis can be used as a caching layer for storing frequently-accessed data, and it provides fast and efficient access to cached data.</p>\n<p>Memcached: Memcached is a distributed memory caching system that is often used as a caching layer for storing frequently-accessed data. It provides fast and efficient access to cached data, and it can be easily integrated with Python applications.</p>\n<p>Flask-Cache: Flask-Cache is a caching extension for Flask applications. It provides a simple and flexible interface for caching data in Flask applications, and it supports a wide range of caching backends, including Redis and Memcached.</p>\n<p>Django Cache Framework: The Django Cache Framework is a caching system built into the Django web framework. It provides a simple and flexible interface for caching data in Django applications, and it supports a wide range of caching backends, including Redis and Memcached.</p>\n<p>pylibmc: pylibmc is a Python wrapper around the libmemcached library, which is a high-performance, distributed memory caching system. pylibmc provides a simple and efficient interface for working with Memcached in Python, and it is well-suited for use in high-performance, distributed caching systems.</p>\n<p>These are just a few examples of the many caching libraries available for Python. The best library for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-content-management-systems/",
            "url": "https://samirpaul.in/posts/python-content-management-systems/",
            "title": "Python Content Management Systems",
            "date_published": "2023-08-05T20:52:53.803Z",
            "content_html": "<p>There are several content management systems (CMS) available in Python, including:</p>\n<p>Django CMS: Django CMS is a popular open-source CMS built using the Django web framework. It provides a flexible and scalable platform for building complex and feature-rich websites, and it includes support for a wide range of content types, including text, images, and videos.</p>\n<p>Mezzanine: Mezzanine is a high-level Python CMS built on top of the Django web framework. It provides a user-friendly interface for managing content, and it includes a range of built-in features, including blog, gallery, and form builders.</p>\n<p>Plone: Plone is a powerful and flexible open-source CMS built using the Python programming language. It provides a range of features for building and managing websites, including a user-friendly interface, content versioning, and support for multiple languages.</p>\n<p>Wagtail: Wagtail is a CMS built using the Django web framework. It provides a flexible and intuitive interface for building and managing websites, and it includes a range of built-in features, including a WYSIWYG editor, document management, and support for multiple languages.</p>\n<p>Pyramid CMS: Pyramid CMS is a flexible and scalable CMS built using the Pyramid web framework. It provides a simple and efficient platform for building and managing websites, and it includes support for a wide range of content types, including text, images, and videos.</p>\n<p>These are just a few examples of the many Python CMS options available. The best CMS for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/python-libraries-for-administrative-interfaces/",
            "url": "https://samirpaul.in/posts/python-libraries-for-administrative-interfaces/",
            "title": "Python libraries for administrative interfaces",
            "date_published": "2023-08-05T20:52:53.803Z",
            "content_html": "<p>There are several Python libraries that can be used to create administrative interfaces for web applications. Some popular ones include:</p>\n<ol>\n<li><p><strong>Django Admin:</strong> Django is a high-level Python web framework that includes a built-in administrative interface. The Django Admin interface is a powerful tool for managing the data and settings of a Django-powered website. It is designed to be easy to use and provides a range of functionality, including the ability to add, edit, and delete records, manage user accounts, and run custom actions on selected records.</p>\n</li>\n<li><p><strong>Flask-Admin:</strong> Flask is a lightweight Python web framework that can be used to create administrative interfaces. Flask-Admin is a popular third-party library that provides a simple and flexible way to create administrative interfaces for Flask applications. It supports a range of data types and includes features such as pagination, form validation, and support for custom views and actions.</p>\n</li>\n<li><p><strong>Pyrogram Admin:</strong> Pyrogram is a Telegram client library for Python that can be used to create administrative interfaces for Telegram bots. Pyrogram Admin provides an easy-to-use interface for managing the data and settings of a Telegram bot, and it supports a range of data types and actions, including message sending, user management, and custom commands.</p>\n</li>\n<li><p><strong>Sanic Admin:</strong> Sanic is an asynchronous Python web framework that can be used to create high-performance web applications. Sanic Admin is a third-party library that provides a simple and flexible way to create administrative interfaces for Sanic applications. It includes features such as pagination, form validation, and support for custom views and actions.</p>\n</li>\n</ol>\n<p>These are just a few examples of the many libraries available for creating administrative interfaces in Python. The best library for your needs will depend on the requirements of your specific project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/oauth-2-dot-0-and-openid-connect/",
            "url": "https://samirpaul.in/posts/oauth-2-dot-0-and-openid-connect/",
            "title": "OAuth 2.0 and OpenID Connect",
            "date_published": "2023-08-05T20:52:53.800Z",
            "content_html": "<p>OAuth 2.0 and OpenID Connect are both open standards for authorization and authentication on the web. They are used to control access to resources, such as APIs, and to verify the identity of users.</p>\n<p>OAuth 2.0 is an authorization framework that enables a third-party application to obtain limited access to an HTTP service on behalf of a resource owner, without requiring the resource owner to reveal its credentials. OAuth 2.0 provides a secure way for a user to grant access to their resources to a third-party application, without the need for the user to share their password with the application. OAuth 2.0 is used by many popular web applications, including Google, Facebook, and Twitter, to allow users to authenticate and authorize access to their resources.</p>\n<p>OpenID Connect is a simple identity layer built on top of OAuth 2.0. It provides a secure way to authenticate users and verify their identities, while also providing information about the user’s identity to the client. OpenID Connect enables the client to know that the user is who they claim to be, without having to manage passwords or other sensitive information. It provides a single sign-on solution, allowing users to authenticate once and then access multiple applications without having to log in again. OpenID Connect is used by many organizations to provide a secure and easy way for their users to authenticate and access resources.</p>\n<p>In summary, OAuth 2.0 is an authorization framework used to control access to resources, while OpenID Connect is a simple identity layer built on top of OAuth 2.0 that provides a secure way to authenticate users and verify their identities. Both OAuth 2.0 and OpenID Connect are widely used and provide a secure and flexible way to control access to resources and authenticate users on the web.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/libraries-for-visualizing-data/",
            "url": "https://samirpaul.in/posts/libraries-for-visualizing-data/",
            "title": "Libraries for visualizing data",
            "date_published": "2023-08-05T20:52:53.797Z",
            "content_html": "<p>There are many libraries available in Python for visualizing data, including:</p>\n<p>Matplotlib: Matplotlib is a plotting library for creating static, animated, and interactive visualizations in Python. It provides a wide range of visualization options, including line charts, bar charts, scatter plots, and histograms, and it can be easily integrated with other data analysis libraries, such as NumPy and Pandas.</p>\n<p>Seaborn: Seaborn is a library for creating beautiful and informative statistical graphics in Python. It provides a high-level interface for creating a wide range of visualizations, including heat maps, violin plots, and regression plots, and it is built on top of Matplotlib.</p>\n<p>Plotly: Plotly is an open-source library for creating interactive, web-based visualizations in Python. It provides a wide range of visualization options, including bar charts, line charts, scatter plots, and 3D visualizations, and it includes support for streaming and real-time data.</p>\n<p>Bokeh: Bokeh is an interactive visualization library for Python that is optimized for large, real-time data sets. It provides a wide range of visualization options, including scatter plots, line charts, and bar charts, and it includes support for interactive tools, such as zooming and panning.</p>\n<p>ggplot: ggplot is a plotting library for Python that is inspired by the popular ggplot2 library in R. It provides a high-level interface for creating a wide range of visualizations, including scatter plots, bar charts, and histograms, and it is designed to work well with Pandas data frames.</p>\n<p>These are just a few examples of the many data visualization libraries available for Python. The best library for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/how-to-learn-object-oriented-programming-in-python/",
            "url": "https://samirpaul.in/posts/how-to-learn-object-oriented-programming-in-python/",
            "title": "how to learn object oriented programming in python",
            "date_published": "2023-08-05T20:52:53.795Z",
            "content_html": "<p>Learning object-oriented programming (OOP) in Python can be done by following these steps:</p>\n<p>Familiarize yourself with the basic syntax and features of Python: Before diving into OOP, it’s important to have a good understanding of the basic syntax and features of the language, such as variables, data types, functions, and control structures.</p>\n<p>Understand the basics of OOP: OOP is a programming paradigm that is based on the concept of “objects”. An object is a data structure that contains both data and the functions (methods) that operate on that data. OOP also involves the concepts of inheritance, encapsulation, and polymorphism.</p>\n<p>Study the class syntax in Python: In Python, a class is a blueprint for creating objects. It defines the attributes (data) and methods of an object. Classes are defined using the class keyword, and objects are created by calling the class as a function.</p>\n<p>Learn about inheritance and polymorphism: Inheritance allows you to create a new class based on an existing class, inheriting its attributes and methods. Polymorphism allows objects of different classes to be treated as objects of the same class.</p>\n<p>Practice creating classes and objects: To solidify your understanding of OOP in Python, try creating some classes and objects on your own. Start with simple classes that define basic data structures, and then move on to more complex classes that involve inheritance and polymorphism.</p>\n<p>Read and understand code written by others: One of the best ways to learn OOP is to read and understand code written by others. Look for open-source projects on GitHub that use OOP in Python and study their code.</p>\n<p>Build projects: Apply your OOP knowledge by building real-world projects. This could be anything from a simple game to a complex web application.</p>\n<p>Remember, the key to learning OOP is practice and repetition. Keep trying out new concepts and examples until you feel comfortable with the basics of OOP in Python.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/databases-implemented-in-python/",
            "url": "https://samirpaul.in/posts/databases-implemented-in-python/",
            "title": "Databases implemented in Python",
            "date_published": "2023-08-05T20:52:53.787Z",
            "content_html": "<p>There are several databases that have been implemented in Python, including:</p>\n<p>SQLite: SQLite is a lightweight, file-based database that is well-suited for small to medium-sized projects. It provides a simple and efficient SQL interface, and it is included as a standard library in many Python distributions.</p>\n<p>PostgreSQL: PostgreSQL is a powerful, open-source relational database that is well-suited for large, complex projects. It provides a rich set of features, including transactions, stored procedures, and advanced indexing, and it is widely used in a variety of applications, from web applications to scientific research.</p>\n<p>MySQL: MySQL is a widely-used, open-source relational database that is well-suited for small to medium-sized projects. It provides a simple and efficient SQL interface, and it is widely used for a variety of applications, from web applications to data warehousing.</p>\n<p>SQLAlchemy: SQLAlchemy is a SQL toolkit and Object-Relational Mapping (ORM) library for Python. It provides a high-level interface for working with databases, and it supports a wide range of databases, including SQLite, PostgreSQL, and MySQL.</p>\n<p>Django ORM: Django ORM is an Object-Relational Mapping (ORM) library that is built into the Django web framework. It provides a simple and intuitive interface for working with databases, and it supports a wide range of databases, including SQLite, PostgreSQL, and MySQL.</p>\n<p>These are just a few examples of the many databases that have been implemented in Python. The best database for your needs will depend on the specific requirements of your project, as well as your personal preferences and experience.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/gaming-library-in-python/",
            "url": "https://samirpaul.in/posts/gaming-library-in-python/",
            "title": "gaming library in python",
            "date_published": "2023-08-05T20:52:53.787Z",
            "content_html": "<p>There are several libraries in Python that can be used for game development, including:</p>\n<p>Pygame: This is a popular library for game development in Python. It provides a simple and easy-to-use set of tools for creating 2D games and other types of interactive applications.</p>\n<p>Arcade: This is a library for creating 2D video games and other interactive applications in Python. It provides a high-level API for creating games and other interactive applications, making it a great choice for beginners.</p>\n<p>Pyglet: This is a cross-platform library for game and multimedia development in Python. It provides a powerful and flexible set of tools for creating games and other interactive applications, including support for 2D and 3D graphics.</p>\n<p>Kivy: This is an open-source library for developing mobile and desktop games in Python. It provides a high-level API for creating games and other interactive applications, and it supports multiple platforms, including Android, iOS, and Windows.</p>\n<p>PyOpenGL: This is a library for developing 3D games and other interactive applications in Python. It provides a low-level API for creating 3D graphics and animations, and it is often used in conjunction with other game development libraries, such as Pygame or Pyglet.</p>\n<p>All of these libraries have their own strengths and weaknesses, so it’s important to evaluate each one to see which one is the best fit for your needs. Consider factors such as the ease of use, available features, and overall performance when choosing a gaming library in Python.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/how-does-sso-work/",
            "url": "https://samirpaul.in/posts/how-does-sso-work/",
            "title": "How does SSO work?",
            "date_published": "2023-08-05T20:52:53.787Z",
            "content_html": "<p>Single Sign-On (SSO) works by creating a central authentication service that is responsible for verifying the identity of a user. When a user attempts to access an application or service that is part of the SSO solution, they are redirected to the SSO service, which authenticates the user. If the user’s identity is verified, the SSO service generates a token that represents the user’s identity and includes information about the user’s session and the resources they are authorized to access.</p>\n<p>The token is then sent back to the application or service the user was trying to access, and the application uses the information in the token to determine whether the user is authorized to access the requested resources. If the user is authorized, the application grants access to the resources, and the user can perform the tasks they need to do.</p>\n<p>One of the key benefits of SSO is that once a user has logged in to the SSO service, they are automatically logged in to all of the other applications and services that are part of the SSO solution. This eliminates the need for the user to enter their credentials for each individual system, making it easier and more convenient for the user to access the resources they need.</p>\n<p>In summary, SSO works by creating a central authentication service that verifies the identity of a user and generates a token representing the user’s identity. The token is used by the applications and services to determine whether the user is authorized to access the requested resources, and the user is automatically logged in to all systems that are part of the SSO solution. This eliminates the need for the user to enter their credentials for each individual system, making it more convenient and secure for the user to access the resources they need.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/best-static-site-generator-for-blog/",
            "url": "https://samirpaul.in/posts/best-static-site-generator-for-blog/",
            "title": "best static site generator for blog",
            "date_published": "2023-08-05T20:52:53.785Z",
            "content_html": "<p>The best static site generator for a blog will depend on your specific needs and preferences. However, some of the most popular and well-regarded static site generators for blogs include:</p>\n<p>Jekyll: This is one of the most widely used static site generators and is well-suited for blogs and personal websites. Jekyll is built in Ruby and provides a simple and flexible way to create and manage a blog.</p>\n<p>Hugo: This is a fast and flexible static site generator that is well-suited for blogs and other types of websites. It is built in Go and provides a large number of features and customization options.</p>\n<p>Gatsby: This is a modern static site generator that is well-suited for creating fast and dynamic websites, including blogs. It is built with React and provides a powerful set of tools for creating and managing content.</p>\n<p>Hexo: This is a fast and simple static site generator that is well-suited for blogs and other types of websites. It is built in Node.js and provides a large number of plugins and themes for customizing your blog.</p>\n<p>Pelican: This is a static site generator that is well-suited for creating and managing blogs and other types of websites. It is built in Python and provides a simple and flexible way to create and manage content.</p>\n<p>All of these static site generators have their own strengths and weaknesses, so it’s important to evaluate each one to see which one is the best fit for your needs. Consider factors such as the ease of use, available themes and plugins, and overall performance when choosing a static site generator for your blog.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/benefits-of-design-patterns-implementation/",
            "url": "https://samirpaul.in/posts/benefits-of-design-patterns-implementation/",
            "title": "benefits of design patterns implementation",
            "date_published": "2023-08-05T20:52:53.783Z",
            "content_html": "<p>Implementing design patterns in software development has several benefits, including:</p>\n<p>Reusability: Design patterns provide a common vocabulary and shared understanding for developers, allowing for more efficient and effective communication about design decisions. Additionally, design patterns can be reused across multiple projects, reducing the amount of time and effort required to design and build new systems.</p>\n<p>Increased maintainability: Design patterns promote the separation of concerns, which makes the code easier to maintain and less prone to bugs. This also makes it easier for other developers to understand the code and make modifications, as they can easily identify which design pattern is being used and what it is intended to accomplish.</p>\n<p>Improved performance: Some design patterns are designed to improve performance in specific scenarios, such as the use of caching patterns to reduce the number of database lookups.</p>\n<p>Better scalability: Design patterns can help ensure that the code is scalable, making it easier to add new features and handle increasing amounts of data and user traffic.</p>\n<p>Reduced development time: By using proven design patterns, developers can focus on implementing business logic rather than figuring out how to structure the code. This can reduce the time it takes to develop and test software, leading to faster time-to-market.</p>\n<p>Overall, the use of design patterns can result in more robust, scalable, and maintainable code, which can lead to greater productivity and improved software quality.</p>\n",
            "tags": [
                "blog",
                "coding",
                "computer-science"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/open-external-links-in-a-new-window-using-javascript/",
            "url": "https://samirpaul.in/posts/open-external-links-in-a-new-window-using-javascript/",
            "title": "Open External Links in a New Window Using JavaScript",
            "date_published": "2023-08-05T20:52:53.780Z",
            "content_html": "<p>This is a quick post showing how to use JavaScript to make links to external websites open in a new window (or tab) instead of in the current window. This is useful for <code>Jekyll</code> blogs because the Markdown converters don’t do this for you. I included two versions: one that uses straight JavaScript, and one that requires <code>jQuery</code> but is shorter.</p>\n<p>Both versions work basically the same way: grab all anchor tags <code>&lt;a href=&quot;#&quot;&gt;</code> that are linking to somewhere other than your development environment or a page on your site and then attribute <code>target=&quot;_blank&quot;</code> to those tags. Because this is JavaScript, users with JavaScript disabled will still experience the old behavior, but otherwise won’t be adversely affected.</p>\n<h3 id=\"Straight-JavaScript\"><a href=\"#Straight-JavaScript\" class=\"headerlink\" title=\"Straight JavaScript\"></a>Straight JavaScript</h3><p>This version does not require any jQuery (or any other libraries):</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ready</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">readyState</span> != <span class=\"string\">&#x27;loading&#x27;</span>) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">addEventListener</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;DOMContentLoaded&#x27;</span>, fn);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">attachEvent</span>(<span class=\"string\">&#x27;onreadystatechange&#x27;</span>, <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"variable language_\">document</span>.<span class=\"property\">readyState</span> != <span class=\"string\">&#x27;loading&#x27;</span>)</span><br><span class=\"line\">        <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> website = <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">hostname</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> internalLinkRegex = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;^((((http:\\\\/\\\\/|https:\\\\/\\\\/)(www\\\\.)?)?&#x27;</span></span><br><span class=\"line\">                                     + website</span><br><span class=\"line\">                                     + <span class=\"string\">&#x27;)|(localhost:\\\\d&#123;4&#125;)|(\\\\/.*))(\\\\/.*)?$&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> anchorEls = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> anchorElsLength = anchorEls.<span class=\"property\">length</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; anchorElsLength; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> anchorEl = anchorEls[i];</span><br><span class=\"line\">    <span class=\"keyword\">var</span> href = anchorEl.<span class=\"title function_\">getAttribute</span>(<span class=\"string\">&#x27;href&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!internalLinkRegex.<span class=\"title function_\">test</span>(href)) &#123;</span><br><span class=\"line\">      anchorEl.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&#x27;target&#x27;</span>, <span class=\"string\">&#x27;_blank&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"jQuery\"><a href=\"#jQuery\" class=\"headerlink\" title=\"jQuery\"></a>jQuery</h3><p>This version requires jQuery in order to work, but if you’re using jQuery on your site anyway, it avoids reinventing the wheel:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"variable language_\">document</span>).<span class=\"title function_\">ready</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> website = <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">hostname</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> internalLinkRegex = <span class=\"keyword\">new</span> <span class=\"title class_\">RegExp</span>(<span class=\"string\">&#x27;^((((http:\\\\/\\\\/|https:\\\\/\\\\/)(www\\\\.)?)?&#x27;</span></span><br><span class=\"line\">                                     + website</span><br><span class=\"line\">                                     + <span class=\"string\">&#x27;)|(localhost:\\\\d&#123;4&#125;)|(\\\\/.*))(\\\\/.*)?$&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  $(<span class=\"string\">&#x27;a&#x27;</span>).<span class=\"title function_\">filter</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> href = $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;href&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> !internalLinkRegex.<span class=\"title function_\">test</span>(href);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">each</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    $(<span class=\"variable language_\">this</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;target&#x27;</span>, <span class=\"string\">&#x27;_blank&#x27;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"My-Implementation-for-Jekyll-Blog\"><a href=\"#My-Implementation-for-Jekyll-Blog\" class=\"headerlink\" title=\"My Implementation for Jekyll Blog\"></a>My Implementation for Jekyll Blog</h3><p>I have created a file called <a href=\"https://raw.githubusercontent.com/SamirPaulb/assets/main/external-links-new-window.html\">external-links-new-window.html</a> inside <code>_includes</code> directory and referred it from <code>_layouts/default.html</code> as <a href=\"#\"><img src=\"/assets/img/include-external-links-new-window.html-code.png\" alt=\"external-links-new-window\"  width=\"370px\" height=\"22px\"></a>.</p>\n",
            "tags": [
                "open-external-links",
                "javascript"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/some-of-my-online-courses-certificates/",
            "url": "https://samirpaul.in/posts/some-of-my-online-courses-certificates/",
            "title": "Some of My Online Courses Certificates",
            "date_published": "2023-08-05T20:52:53.773Z",
            "content_html": "<h1 id=\"✅-Some-of-my-verified-skills-and-certifications\"><a href=\"#✅-Some-of-my-verified-skills-and-certifications\" class=\"headerlink\" title=\"✅ Some of my verified skills and certifications:\"></a>✅ Some of my verified skills and certifications:</h1><p><img src=\"https://user-images.githubusercontent.com/77569653/207000757-d9920eef-d5bf-4ef9-a043-ef28d66cf2a2.jpg\" alt=\"Adobe Photoshop CC Fundamentals and Essentials Training Udemy UC-c9524150-649d-4ed2-bdcc-9fcfd284297a-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000775-21a04da5-4241-4d4d-a91f-fd32c1008a09.jpg\" alt=\"Advanced Algorithms and Complexity Coursera GLMMPEBLCU9Q-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000778-885a11c9-c3b0-40cd-86ca-a0cd016e100e.jpg\" alt=\"AI Fundamentals DataCamp Certificate-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000784-28a09b2d-cd63-4575-81c1-f1127d4ec6f5.jpg\" alt=\"AI ON JETSON NANO Nvidia-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000789-2a660c46-d8d1-4d07-9d09-b1df9882a63e.jpg\" alt=\"Algorithmic Toolbox Coursera MA4KKNFEU7MB-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000791-6763e718-6b72-4db4-a893-1f4d683e5d5f.jpg\" alt=\"C++ Programming Udemy UC-c58957c7-3ae3-4f83-b4b1-2f69b2df48fa-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000796-e5091489-1644-4aa0-b17c-95db71b158d4.jpg\" alt=\"Codegoda 2022 organised by Agoda-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000801-4f9cedc2-9e04-4d80-8766-2645dd3310ac.jpg\" alt=\"Data Analytics Real-World Projects in Python Udemy UC-75332da1-4725-4f60-80ab-41f640046e3e-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000807-5527fa2f-1812-4bdf-85af-b9b1c237580f.jpg\" alt=\"Data Science for Everyone DateCamp Certificate-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000814-229550c2-e13b-4377-a2ac-bdb101ab40d2.jpg\" alt=\"Data Structures Coursera 394N5RVDD2EU-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000819-7e707391-c1f8-44ac-9b1f-a41716c3c469.jpg\" alt=\"Database Foundations Database Management-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000823-1eff258f-483e-40cb-8b46-d4535960add6.jpg\" alt=\"Databases_ Relational Databases and SQL StanfordOnline SOE YDB-SQL0001 Certificate _ edX-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000825-fca0038a-1b87-44e0-ba5c-78219c7e9007.jpg\" alt=\"Divide and Conquer, Sorting and Searching, and Randomized Algorithms Coursera V58E5TWMYGTV-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000830-a24369f8-fbba-445b-908e-84024a1d03aa.jpg\" alt=\"Introduction to IoT_Cisco -certificate-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000834-fbb4181f-05b2-4ca5-a102-5ae0984edd9b.jpg\" alt=\"Introduction to Opensource, Git and Github Microsoft Learn Student  2102001215000100   Github-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000839-3f4158ba-3993-43f0-befa-65fd769060fb.jpg\" alt=\"Introduction to SQL Data Camp certificate-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000841-68c9007b-4e86-4892-9eb3-a38022703889.jpg\" alt=\"IoT Foundations Operating Systems Fundamentals-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000846-d0da3ea5-9d18-40b6-a4ac-7eecf8c0d95f.jpg\" alt=\"Linux Shells and Processes - LinkedIn learning-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000849-c222d1f0-3856-4fad-8f59-380a503665b5.jpg\" alt=\"Machine Learning Coursera VJHQ4C2F8LDA-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000857-a0b600ce-8063-47bf-84ea-204c1fdbbfa2.jpg\" alt=\"Microsoft SQL Server 2019_ For Beginners Udemy UC-93630ce4-c301-401f-a935-a38155ba79aa-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000863-558e99d7-c318-4e2a-b4be-b7ff04828f07.jpg\" alt=\"Networking Foundations Network Media LANs-1\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000865-807a964f-77d7-46e1-b05b-fc5ed76b39df.png\" alt=\"Python Assessment for skill HackerRank Certificate\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000868-12b8d203-0fb8-4b55-b09e-1ccb847a2e7b.png\" alt=\"Deep Learning Fundamentals TV ML0115EN Certificate Cognitive Class\"><br><img src=\"https://user-images.githubusercontent.com/77569653/207000869-a38af34d-a5f5-4eea-afe9-9b4fba238402.png\" alt=\"Problem Solving (Basic) HackerRank Certificate\"></p>\n<!-- \n\ntags: [pythondeveloper, datastructure, appdeveloper, javaprogramming, developerlife, programminglanguage, pythonprogramming, programmers, coder, programming, programmingisfun, html, css, developer, javascript, programmer, coding, software, programminglife, coderlife, codinglife, computerscience, codelife, code, science, softwaredevelopment, frontend, webdev, webdeveloper, webdevelopment, 100daysofcode, womenwhocode, womeninbusiness, womenintech, symfony, codinggirl, uxdesign, design, webdesign, uidesign, designer, python, business, girlboss, php, reactjs, girlpower, entrepreneurial, 100daysofcodetoday, wordpress, softwaredeveloper, girlswhocode, devlife, worldcode, csharp, learntocode, frontenddeveloper, angularjs, peoplewhocode, fullstackdeveloper, vuejs, backenddeveloper, dotnet, mobiledevelopment, womanintech, programadorgood, codergirl, coderpower, coders, coderslife, codingbootcamp, codingisfun, codingpics, java, programacion, programing, programmerlife, programmerrepublic, programmerslife, js, softwareengineering, informationtechnology, softwareengineer, programmerhumor, pythonhubwhat, ️use, codingdays, development, dev, developers, web, angular, pythoncode, geeklife, softwaredev, tech, cs, compsci, learncoding, dev_boys, engineers, womenwhoengineer, womenincs, coderbea, computers, stem, devboys, thedevlife, womanwhocode, codethink, gamedev, gamedeveloper, gamedevelopment, gamedevelopers, gameprogramming, gameprogrammer, codes, html5, utility, devtip, gamedevtips, performance, optimize, technology, programmingmemes, engineering, computer, machinelearning, linux, daysofcode, android, engineer, softwaretesting, datascience, computerengineering, softwaredevelopers, javascriptdeveloper, artificialintelligence, it, webdesigner, website, websitedesign, digitalmarketing, seo, graphicdesign, ui, marketing, ux, websitedevelopment, webdevelopers, branding, ecommerce, websitedesigner, socialmediamarketing, innovation, iphone, technews, apple, gadgets, electronics, smartphone, bhfyp, samsung, instagood, pro, instatech, education, security, gadget, instagram, mobile, technologynews, art, cybersecurity, techie, techno, ai, tecnologia, future, startup, robotics, oneplus, digital, india, s, gaming, iot, photography, internet, automation, covid, entrepreneur, electrical, arduino, electronic, electricalengineering, diy, raspberrypi, electronicsengineering, robot, arduinoproject, techy, device, photooftheday, onlineshopping, electronicsprojects, pcb, diyelectronics, microcontroller, arduinouno, phone, homeappliances, geek, electrician, led, laptops, music, esp, electric, home, fashion, ios, xiaomi, plus, app, huawei, game, games, gamer, follow, windows, androiddeveloper, Amazon, Google, NITI-Aayog, electronicsolution, electronicslovers, electronicsproject, transistor, electronicsolvers, electronicengineering, circuit, electronicsengineer, electricalengineer, arduinofun, digitalelectronics, voltage, circuitdesign, mechatronics, mechanicalengineering, electronicos, sensor, electronicsrepair, pcbdesign, electricalhacks, electricalwork, electronicsdiy, electronicsbasic, electronicsocialart, electronicsidea, semiconductor, embeddedsystems, electronicsstore, engineeringstudents, microprocessor, ohms, electronicsworld, engineeringlovers, project, architecture, interiordesign, construction, interior, m, homedecor, work, renovation, building, architect, artist, new, house, handmade, decor, luxury, mk, inspiration, wood, projectcar, homedesign, e, decoration, drawing, furniture, style, o, projectmanagement, creative, cat, artwork, archilovers, life, nature, realestate, build, car, r, arquitetura, codingforkids, codingmemes, codingislife, codingfun, codingjokes, codingproblems, programmingjokes, codinghumor, codingquotes, programminghumor, codinglove, nodejs, react, hacking, backend, jquery, c, bootstrap, htmlcoding, htmlcss, uiux, indonesia, javadeveloper, hacker, sql, snake, ballpython, reptile, snakes, reptiles, snakesofinstagram, reptilesofinstagram, pythonsofinstagram, pythons, ballpythonsofinstagram, deeplearning, pythonregius, ballpythons, royalpython, kalilinux, reptilelover, ethicalhacking, ballpythonmorphs, bigdata, socialmedia, logo, marketingdigital, appdesign, onlinemarketing, userinterface, smallbusiness, graphicdesigner, advertising, userexperience, designinspiration, logodesign, contentmarketing, dise, digitalmarketingagency, dribbble, Unix, Linux-API, Web-development, Mobile-App-development, C++, C#, Go, Java8, Kotlin, Objective-C, PyPy3, Ruby, Scala, Swift, libraries, ML, Hadoop, MapReduce, OpenGL, Computer-Science, Spring-MVC, Spring-Boot, data-mining, Agile, Scrum, distributed-parallel-systems, Machine-Learning, natural-language-processing, English, TypeScript, libraries-and-framework-integrations, Deep-Learning, Data-Science, Competitive-Programming, React.js, Node.js, Express.js, Vue.js, NumPy, TensorFlow, MongoDB, Dart, Flutter, Shell-Scripting, Agile-&-Waterfall-Methodologies, Docker, Jenkins, J2EE-WebServices, Microservices, Kubernetes, Shell, Bean-Shell, PowerShell, SailPoint-IIQ, Active-Directory, Tomcat, Unit-Testing, Junit, Mockito, Azure, Build-Automation, CI, CD, AD, Salesforce, JDBC, Delimited, IAM, MERN, LAMP, Laravel, Matlab, XML, JSON, Flask, Rust, Solidity, AWS, .NET, NoSQL, Perl, software-development-life-cycle, Spark, SageMaker, Elasticsearch, Kibana, SQS, Lambda, DynamoDB, Data-Pipelines, Kinesis, Mathematics, SDE, Google-Cloud, Microsoft-Azure, BigQuery, Terraform, PostgreSQL, Nginx, HTTP, Oracle, Cassandra, Redis, HBase, Tableau, MicroStrategy, Vertica, SAP, SOAP, Webservices, Dropwizard, CRM, GCP, bash, MacOS, Jira, Webhook, Wrike, GitLab, Kafka, TeamCity, PhD, PyTorch, Unity, Selenium, Power-BI, Postman, Lua, GraphQL, Apache-Spark, ASP.NET, Computer-Vision, Excel, InfluxDB, IntelliJ-IDEA, Maven, JVM, Golang, non-relational-databases, Systems-administration, filesystems, troubleshooting, pc, laptop, pcgaming, gamingpc, pcbuild, computerrepair, asus, pcgamer, gamingsetup, hp, intel, hardware, komputer, setup, gamers, office, lenovo, pcsetup, rgb, wifi, fibraoptica, fibra, telecom, online, network, wireless, velocidade, tv, memes, provedor, bandalarga, brasil, networking, router, data, provedordeinternet, youtube, informatica, isp, facebook, telecomunica, netflix, qualidade, es, empreendedorismo, ps, playstation, videogames, xbox, videogame, twitch, fortnite, pubg, gamergirl, anime, xboxone, fun, play, nintendo, meme, gameplay, cosplay, gta, pubgmobile, freefire, callofduty, gamingcommunity, streamer, lol, funny, instagamer, instagaming, esports, leagueoflegends, gamerlife, csgo, football, fanart, video, sport, mobilelegends, dota, rkiye, custompc, pcmasterrace, pcbuilds, pcmr, gamingsetups, pcgamingsetup, amd, pcgamers, nvidia, gamingroom, pcmodding, rtx, battlestation, desksetup, dreamsetup, pcmods, gaminglife, custompcbuild, gamingrig, corsair, pcbuilding, setupwars, pcmod, battlestations, watercooling, setups, msi, pcsetups, ryzen, rgblights, gpu, setupgamer, setupinspiration, gigabyte, pchardware, pcbuilder, watercooled, gamerpc, gamingislife, gamingmemes, gamingposts, gamingchannel, gaminggear, gamingchair, gamingcomputer, gamingpcbuild, gamingmeme, gamingclips, videogaming, gaminglaptop, motivation, success, money, entrepreneurship, businessowner, mindset, lifestyle, goals, investment, finance, motivationalquotes, quotes, businesswoman, entrepreneurlife, hustle, leadership, bitcoin, investing, fitness, businessman, believe, b, wealth, happy, forex, inspire, invest, financialfreedom, motivational, trading, positivevibes, travel, doors, window, microsoft, doorsandwindows, glass, notebook, door, homeimprovement, mac, windowsanddoors, architecturephotography, twitchstreamer, pcgames, steam, twitchaffiliate, twitchtv, streaming, cod, git, github, devops, training, pmerj, gym, stunt, leap, flexible, vault, beam, flip, bars, vscode, gymnastic, k, gymnastique, gymnastics, flipping, gymnasts, gymnastlife, highbar, scale, ansible, gymnast, hackers, hack, infosec, ethicalhacker, pentesting, cyber, cybercrime, ubuntu, malware, cyberattack, anonymous, informationsecurity, linuxfan, hackingtools, cybersecurityawareness, linuxmint, hacked, opensource, cloudcomputing, linuxuser, cyberpunk, privacy, dataprotection, datasecurity, cybersecuritytraining, aesthetic, hackerman, digitalart, cybergoth, neon, hackerspace, futuristic, scifi, phishing, goth, vaporwave, cyberpunkart, ransomware, bugbounty, itsecurity, networksecurity, databreach, cloud, exploit, infosecurity, cybersec, cloudsecurity, encryption, pentest, cyberattacks, cybersecuritynews, cybernews, hackingnews, metasploit, blackhat, hackerindonesia, hacks, hackernews, or, secutiy, termux, hackerstayaway, anonymoushackers, hackinginstagram, learnhacking, ethicalhackers, hackinstagram, termuxhacking, blackhathacker, computerprogramming, growthhacking, wifihacking, blog, blogger, bloggerstyle, blogging, fashionblogger, food, beauty, bloggers, bloggerlife, blogpost, influencer, ootd, instadaily, makeup, picoftheday, photo, moda, foodblogger, instablog, bloggersofinstagram, vlog, beautiful, model, travelblogger, foodie, styleblogger, writer, likeforlikes, likes, news, fashionista, insta, summer, blogueira, lifestyleblogger, fashionstyle, instafashion, linkedin, twitter, linkedinprofile, linkedintips, linkedinmarketing, jobsearch, pinterest, resume, career, cv, personalbranding, tiktok, linkedinlife, jobs, job, headshots, cpa, careercoach, interview, ceo, linkedintraining, careeradvice, careertips, businessphotography, whatsapp, hiring, linkedinlearning, careergoals, careerdevelopment, tumblr, networkmarketing, mlm, community, networker, workfromhome, networkingevent, events, hiphop, entrepreneurs, cisco, negocios, event, coworking, searchengineoptimization, marketingstrategy, marketingtips, smm, emailmarketing, sem, seotips, ppc, googleads, digitalmarketingtips, marketingagency, seoservices, smo, content, internetmarketing, seoexpert, onlinebusiness, searchenginemarketing, seoagency, marketingonline, digitalagency, digitalmarketer, digitalmarketingservices, recruitment, jobseekers, jobsearching, employment, nowhiring, careers, jobseeker, recruiting, jobhunt, jobinterview, jobopportunity, jobvacancy, jobshiring, jobopening, hiringnow, hr, jobhunting, vacancy, jobalert, humanresources, staffing, newjob, jobfair, recruiter, careerchange, applynow, jobposting, jobseeking, jobsearchtips, jobvacancies, resumetips, interviewtips, opportunity, dreamjob, resumewriter, jobsinindia, jobsite, googlepixel, pixel,  trending, resumewriting, resumehelp, resumeservices, coverletter, curriculumvitae, resumedesign, resumebuilder, resumeadvice, resumes, resumetemplate, internship, resumebuilding, college, student, learning, university, careeropportunities, study, management, careergrowth, skills, coaching, nitdgp, nit-durgapur, linkedin-learning, udemy, adobe-photoshop, coursera, advanced-algorithms-complexity, jetson-nano, codegoda-2022]\n\n-->",
            "tags": [
                "coding",
                "certificates",
                "udemy",
                "coursera",
                "datacamp"
            ]
        }
    ]
}