{
    "version": "https://jsonfeed.org/version/1",
    "title": "Samir Paul â€¢ All posts by \"geeksforgeeks\" category",
    "description": "Software Engineer",
    "home_page_url": "https://samirpaul.in",
    "items": [
        {
            "id": "https://samirpaul.in/posts/1-Absolute-Value---GFG/",
            "url": "https://samirpaul.in/posts/1-Absolute-Value---GFG/",
            "title": "1. Absolute Value   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"1-Absolute-Value\"><a href=\"#1-Absolute-Value\" class=\"headerlink\" title=\"1. Absolute Value\"></a>1. Absolute Value</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">You are given an interger <strong>I</strong>, find&nbsp;the absolute value of the interger <strong>I</strong>.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input</strong>:\nI = -32\n<strong>Output: </strong>32\n<strong>Explanation: \n</strong>The absolute value of -32 is 32.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input</strong>:\nI = 45\n<strong>Output: </strong>45\n<strong>Explanation: \n</strong>The absolute value of 45 is 45 itself.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function <strong>absolute() </strong>which takes an integer <strong>I</strong> as input parameter and return the absolute value of <strong>I.</strong></span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br>\n<strong>Expected Auxiliary Space&nbsp;</strong>: O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n-10<sup>6</sup> &lt;= I &lt;= 10<sup>6</sup></span></p>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">// User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">        <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">absolute</span><span class=\"params\">(<span class=\"type\">int</span> I)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Your code goes here</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(I);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;    <span class=\"comment\">// number of testcases</span></span><br><span class=\"line\">    cin &gt;&gt; T; <span class=\"comment\">// input number of testcases</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> I;</span><br><span class=\"line\">        cin &gt;&gt; I;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">absolute</span>(I) &lt;&lt; endl; <span class=\"comment\">// print the output</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Aggressive-Cows---GFG/",
            "url": "https://samirpaul.in/posts/Aggressive-Cows---GFG/",
            "title": "Aggressive Cows   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Aggressive-Cows\"><a href=\"#Aggressive-Cows\" class=\"headerlink\" title=\"Aggressive Cows\"></a>Aggressive Cows</h1><h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><div class=\"problems_problem_content__Xm_eO\"><p>You are given an <strong>array</strong>&nbsp;consisting of <strong>n&nbsp;integers</strong> which denote the position of a <strong>stall</strong>. You are also given an <strong>integer</strong> <strong>k</strong> which denotes the number of aggressive cows. You are given the task of <strong>assigning stalls to k&nbsp;cows</strong> such that the <strong>minimum distance between any two of them is the maximum possible</strong>.<br>\nThe first line of input contains two&nbsp;space-separated integers <strong>n</strong> and <strong>k</strong>.<br>\nThe second line contains <strong>n</strong> space-separated integers denoting the position of the stalls.</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong>\nn=5 \nk=3\nstalls = [1 2 4 8 9]\n<strong>Output:</strong>\n3\n<strong>Explanation:</strong>\nThe first cow can be placed at stalls[0], \nthe second cow can be placed at stalls[2] and \nthe third cow can be placed at stalls[3]. \nThe minimum distance between cows, in this case, is 3, \nwhich also is the largest among all possible ways.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong>\nn=5 \nk=3\nstalls = [10 1 2 7 5]\n<strong>Output:</strong>\n4\n<strong>Explanation:</strong>\nThe first cow can be placed at stalls[0],\nthe second cow can be placed at stalls[1] and\nthe third cow can be placed at stalls[4].\nThe minimum distance between cows, in this case, is 4,\nwhich also is the largest among all possible ways.</pre>\n\n<p><strong>Your Task:</strong><br>\nComplete the function int solve(), which takes integer n, k, and a vector&nbsp;stalls&nbsp;with n&nbsp;integers as input and returns the largest possible minimum distance between cows.</p>\n\n<p><strong>Expected Time Complexity:</strong> O(n*log(10^9)).<br>\n<strong>Expected Auxiliary Space:</strong> O(1).<br>\n<br>\n<strong>Constraints:</strong><br>\n2 &lt;= n&nbsp;&lt;= 10^5<br>\n2 &lt;= k &lt;= n<br>\n0 &lt;= stalls[i] &lt;= 10^9</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// Initial Template for C++</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">// User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\"> <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;stalls, <span class=\"type\">int</span> n, <span class=\"type\">int</span> cows,<span class=\"type\">int</span> dis)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> curr_cow_pos = stalls[<span class=\"number\">0</span>];  </span><br><span class=\"line\">       <span class=\"comment\">// inially taking current postion of cow as 1st one</span></span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">1</span>;                   <span class=\"comment\">// taking count of cow</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">         <span class=\"comment\">// if any cow at dis more than our mid value                                              </span></span><br><span class=\"line\">         <span class=\"comment\">//present then we will keep next cow to that postion</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(stalls[i]-curr_cow_pos &gt;= dis)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">                curr_cow_pos = stalls[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cnt&gt;=cows) </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k, vector&lt;<span class=\"type\">int</span>&gt; &amp;stalls)</span> </span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">// Write your code here</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(stalls.<span class=\"built_in\">begin</span>(),stalls.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> l=<span class=\"number\">1</span>,h=stalls[n<span class=\"number\">-1</span>]-stalls[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span> ans=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=h)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid= (l+h)/<span class=\"number\">2</span>;</span><br><span class=\"line\">           <span class=\"comment\">// if all cow can be placed at more than mid distance then updating our ans</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(stalls,n,k,mid)) </span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                ans = mid;</span><br><span class=\"line\">                l = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                h = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t = <span class=\"number\">1</span>;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// freopen (&quot;output_gfg.txt&quot;, &quot;w&quot;, stdout);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Input</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">stalls</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            cin &gt;&gt; stalls[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// char ch;</span></span><br><span class=\"line\">        <span class=\"comment\">// cin &gt;&gt; ch;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Solution obj;</span><br><span class=\"line\">        cout &lt;&lt; obj.<span class=\"built_in\">solve</span>(n, k, stalls) &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// cout &lt;&lt; &quot;~\\n&quot;;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// fclose(stdout);</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Allocate-minimum-number-of-pages---GFG/",
            "url": "https://samirpaul.in/posts/Allocate-minimum-number-of-pages---GFG/",
            "title": "Allocate minimum number of pages   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Allocate-minimum-number-of-pages\"><a href=\"#Allocate-minimum-number-of-pages\" class=\"headerlink\" title=\"Allocate minimum number of pages\"></a>Allocate minimum number of pages</h1><h2 id=\"Hard\"><a href=\"#Hard\" class=\"headerlink\" title=\"Hard\"></a>Hard</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">You are given <strong>N </strong>number of books. Every <strong>ith</strong> book has<strong> Ai</strong> number of pages.&nbsp;The books are arranged in ascending order.</span><br>\n<br>\n<span style=\"font-size:18px\">You have to allocate contiguous&nbsp;books to <strong>M </strong>number of students. There can be many ways or permutations to do so. In each permutation, one of the M students will be allocated the maximum number of pages. Out of all these permutations, the task is to find that particular permutation in which the maximum number of pages allocated to a student is the minimum of those in all the other permutations and print this minimum value.</span></p>\n\n<p><span style=\"font-size:18px\">Each book will be allocated to exactly one student. Each student has to be allocated at least one book.</span></p>\n\n<p><span style=\"font-size:18px\">Note: Return <strong>-1</strong> if a valid assignment is not possible, and allotment should be in contiguous order (see the explanation for better understanding).</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4\nA[] = {12,34,67,90}\nM = 2\n<strong>Output:</strong>113\n<strong>Explanation:</strong>Allocation can be done in \nfollowing ways:{12} and {34, 67, 90} \nMaximum Pages = 191{12, 34} and {67, 90} \nMaximum Pages = 157{12, 34, 67} and {90} \nMaximum Pages =113. Therefore, the minimum \nof these cases is 113, which is selected \nas the output.</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 3\nA[] = {15,17,20}\nM = 2\n<strong>Output:</strong>32\n<strong>Explanation: </strong>Allocation is done as\n{15,17} and {20}</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function findPages() which takes 2 Integers <strong>N</strong>, and m and an array <strong>A[]</strong> of length <strong>N</strong> as input and returns the expected answer.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>: O(NlogN)<br>\n<strong>Expected Auxilliary Space:</strong> O(1)</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= N &lt;= 10<sup>5</sup><br>\n1 &lt;= A [ i ] &lt;= 10<sup>6</sup><br>\n1 &lt;= M &lt;= 10<sup>5</sup></span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// Initial template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function template in C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//Function to find minimum number of pages.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findPages</span><span class=\"params\">(<span class=\"type\">int</span> A[], <span class=\"type\">int</span> N, <span class=\"type\">int</span> M)</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//code here</span></span><br><span class=\"line\">         <span class=\"type\">int</span> mp =<span class=\"number\">0</span> ,ans=<span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(M&gt;N) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;N;i++) mp+=A[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>  l =A[N<span class=\"number\">-1</span>], r = mp;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l&lt;=r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = l+(r-l)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> cnt =<span class=\"number\">1</span> , sum =<span class=\"number\">0</span> ;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i =<span class=\"number\">0</span>;i&lt;N;i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                sum+=A[i];</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(sum&gt;mid)</span><br><span class=\"line\"></span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    cnt++;</span><br><span class=\"line\">                    sum=A[i];</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cnt&gt;M) l=mid+<span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">else</span>  r=mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"type\">int</span> A[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;A[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> m;</span><br><span class=\"line\">        cin&gt;&gt;m;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">findPages</span>(A, n, m) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Array-Pair-Sum-Divisibility-Problem---GFG/",
            "url": "https://samirpaul.in/posts/Array-Pair-Sum-Divisibility-Problem---GFG/",
            "title": "Array Pair Sum Divisibility Problem   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Array-Pair-Sum-Divisibility-Problem\"><a href=\"#Array-Pair-Sum-Divisibility-Problem\" class=\"headerlink\" title=\"Array Pair Sum Divisibility Problem\"></a>Array Pair Sum Divisibility Problem</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an array of integers and a number k, write a function that returns true if given array can be divided into pairs such that sum of every pair is divisible by k.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1 :</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input : </strong>arr = [9, 5, 7, 3], k = 6\n<strong>Output: </strong>True\n<strong>Explanation: </strong>{(9, 3), (5, 7)} is a \npossible solution. 9 + 3 = 12 is divisible\nby 6 and 7 + 5 = 12 is also divisible by 6.\n\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input : </strong>arr = [2, 4, 1, 3], k = 4\n<strong>Output: </strong>False\n<strong>Explanation: </strong>There is no possible solution.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read or print anything. Your task is to complete the function&nbsp;<strong>canPair()</strong>&nbsp;which takes array and k as input parameter and returns true if array can be divided into pairs such that sum of every pair is divisible by k otherwise returns false.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n)<br>\n<strong>Expected Space Complexity :&nbsp;</strong>O(n)</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= length of array &lt;= 10^5<br>\n1 &lt;= elements of array &lt;= 10^5<br>\n1 &lt;= k &lt;= 10^5</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">canPair</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; nums, <span class=\"type\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Code here.</span></span><br><span class=\"line\">         <span class=\"keyword\">if</span>(nums.<span class=\"built_in\">size</span>()%<span class=\"number\">2</span>==<span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">fre</span><span class=\"params\">(<span class=\"number\">100001</span>,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> num : nums) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> num1 = num%k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(fre[(k-num1)%k]!=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                fre[(k-num1)%k]--;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                fre[num1]++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> f : fre) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(f&gt;<span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> tc;</span><br><span class=\"line\">    cin &gt;&gt; tc;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (tc--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">nums</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.<span class=\"built_in\">size</span>(); i++) cin &gt;&gt; nums[i];</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        <span class=\"type\">bool</span> ans = ob.<span class=\"built_in\">canPair</span>(nums, k);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ans)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;True\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;False\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Binary-Array-Sorting---GFG/",
            "url": "https://samirpaul.in/posts/Binary-Array-Sorting---GFG/",
            "title": "Binary Array Sorting   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Binary-Array-Sorting\"><a href=\"#Binary-Array-Sorting\" class=\"headerlink\" title=\"Binary Array Sorting\"></a>Binary Array Sorting</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">Given a binary array <strong>A[]</strong> of size <strong>N</strong>. The task is to arrange the array in increasing order.</span><br>\n<span style=\"font-size:18px\"><strong>Note:</strong> The binary array contains only 0&nbsp; and 1.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input</strong>: \n5\n1 0 1 1 0\n\n<strong>Output</strong>: \n0 0 1 1 1\n\n<strong>Explanation</strong>: \nAfter arranging the elements in \nincreasing order, elements will be as \n0 0 1 1 1.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input</strong>:\n10\n1 0 1 1 1 1 1 0 0 0\n\n<strong>Output</strong>: \n0 0 0 0 1 1 1 1 1 1\n\n<strong>Explanation</strong>: \nAfter arranging the elements in \nincreasing order, elements will be \n0 0 0 0 1 1 1 1 1 1.\n</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Your Task:&nbsp;</span></strong><span style=\"font-size:18px\">This is a function problem. You only need to complete the function<strong> binSort()&nbsp;</strong>that takes the array&nbsp;<strong>A[] </strong>and it's size <strong>N</strong> as parameters and sorts the array. The <strong>printing </strong>is done <strong>automatically </strong>by the driver code.</span><br>\n<br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>: O(N)<br>\n<strong>Expected Auxilliary Space</strong>: O(1)</span><br>\n<br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;=&nbsp;N &lt;= 10<sup>6</sup><br>\n0 &lt;= A[i] &lt;= 1</span></p>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// A Sample C++ program for beginners with Competitive Programming</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// A[]: input array</span></span><br><span class=\"line\">    <span class=\"comment\">// N: input array</span></span><br><span class=\"line\">    <span class=\"comment\">//Function to sort the binary array.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">binSort</span><span class=\"params\">(<span class=\"type\">int</span> A[], <span class=\"type\">int</span> N)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">//Your code here</span></span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">/**************</span></span><br><span class=\"line\"><span class=\"comment\">        * No need to print the array</span></span><br><span class=\"line\"><span class=\"comment\">        * ************/</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(A, A+N);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> T;</span><br><span class=\"line\">\tcin&gt;&gt;T;</span><br><span class=\"line\">\t<span class=\"comment\">// Input the number of testcases</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    <span class=\"type\">int</span> N;</span><br><span class=\"line\">\t    cin&gt;&gt;N; <span class=\"comment\">//Input size of array N</span></span><br><span class=\"line\">\t    <span class=\"type\">int</span> A[N]; </span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i  &lt; N; i++)</span><br><span class=\"line\">\t      cin&gt;&gt;A[i];</span><br><span class=\"line\">\t      </span><br><span class=\"line\">\t    Solution obj;</span><br><span class=\"line\">\t    obj.<span class=\"built_in\">binSort</span>(A,N);</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x:A)</span><br><span class=\"line\">\t    cout&lt;&lt;x&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t      </span><br><span class=\"line\">\t    cout&lt;&lt;endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Bitwise-Operators---GFG/",
            "url": "https://samirpaul.in/posts/Bitwise-Operators---GFG/",
            "title": "Bitwise Operators   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Bitwise-Operators\"><a href=\"#Bitwise-Operators\" class=\"headerlink\" title=\"Bitwise Operators\"></a>Bitwise Operators</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Bitwise operators are useful when we want to work with bits. Here, we'll take a look at them.</span></p>\n\n<p><span style=\"font-size:18px\">Given three positive integers <strong>a</strong>, <strong>b</strong> and <strong>c</strong>. Your task is to perform some bitwise operations on them as given below:<br>\n<strong>1.</strong> d = a ^ a<br>\n<strong>2. </strong>e = c ^ b<br>\n<strong>3.</strong> f = a &amp; b<br>\n<strong>4.</strong> g = c | (a ^ a)<br>\n<strong>5.</strong>&nbsp;h&nbsp;= ~e<br>\n<strong>Note: ^ </strong>is for xor. The working of bitwise operators can be found <a href=\"https://www.geeksforgeeks.org/bitwise-operators-in-c-cpp/\">here</a>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example:</strong></span></p>\n\n<div style=\"background:#eee;border:1px solid #ccc;padding:5px 10px;\"><span style=\"font-size:18px\"><strong>Input:</strong><br>\na = 4<br>\nb = 8<br>\nc = 2<br>\n<strong>Output:</strong><br>\n0<br>\n10<br>\n0<br>\n2<br>\n-11</span></div>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= A, B, C &lt;= 10<sup>6</sup></span></p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Video:</span></strong></p>\n\n<p><iframe frameborder=\"0\" height=\"315\" src=\"https://www.youtube.com/embed/WFy9SFJsAWQ\" width=\"560\"></iframe></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// Initial Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Function Prototype</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bitWiseOperation</span><span class=\"params\">(<span class=\"type\">int</span>, <span class=\"type\">int</span>, <span class=\"type\">int</span>)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">// User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Function to perform bitwise manipulations</span></span><br><span class=\"line\"><span class=\"comment\">// a, b and c are input integers</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">bitWiseOperation</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Your code here</span></span><br><span class=\"line\">    <span class=\"type\">int</span> d = a^a;</span><br><span class=\"line\">    <span class=\"type\">int</span> e = c^b;</span><br><span class=\"line\">    <span class=\"type\">int</span> f = a &amp; b;</span><br><span class=\"line\">    <span class=\"type\">int</span> g = c | (a ^ a);</span><br><span class=\"line\">    <span class=\"type\">int</span> h = ~e;</span><br><span class=\"line\">    </span><br><span class=\"line\">    cout &lt;&lt; d &lt;&lt; endl &lt;&lt; e &lt;&lt; endl &lt;&lt; f &lt;&lt; endl &lt;&lt; g &lt;&lt; endl &lt;&lt; h &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Driver code to test above function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b, c;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">bitWiseOperation</span>(a, b, c);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Black-and-White---GFG/",
            "url": "https://samirpaul.in/posts/Black-and-White---GFG/",
            "title": "Black and White   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Black-and-White\"><a href=\"#Black-and-White\" class=\"headerlink\" title=\"Black and White\"></a>Black and White</h1><h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given&nbsp;the chessboard dimensions. Find out the number of ways we can place a black and a white Knight on this chessboard such that they cannot attack each other.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Note:</strong><br>\nThe knights have to be placed on different squares. A knight can move two squares horizontally and one square vertically (L shaped), or two squares vertically and one square horizontally (L shaped). The knights attack each other if one can reach the other in one move.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">N = 2, M = 2\n<strong>Output: </strong>12 \n<strong>Explanation</strong>: There are 12 ways we can place a black and a white Knight on this chessboard such that they cannot attack each other.</span>\n\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">N = 2, M = 3\n<strong>Output: </strong>26\n<strong>Explanation</strong>: There are 26 ways we can place a black and a white Knight on this chessboard such that they cannot attack each other.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYour task is to complete the function <strong>numOfWays()&nbsp;</strong>which takes the chessboard dimensions N and M as inputs and returns the number of ways we can place 2 Knights on this chessboard such that they cannot attack each other. Since this number can be very large, return it modulo 10<sup>9</sup>+7.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N*M).<br>\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br>\n<span style=\"font-size:18px\">1 &lt;= N&nbsp;* M &lt;= 10<sup>5</sup></span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">numOfWays</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> m)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code</span></span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"built_in\">numOfWays</span>(n, m) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Function to find out the number of ways we can place a black and a </span></span><br><span class=\"line\"><span class=\"comment\">//white Knight on this chessboard such that they cannot attack each other.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"title\">numOfWays</span><span class=\"params\">(<span class=\"type\">int</span> N, <span class=\"type\">int</span> M)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// write code here</span></span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> mod = <span class=\"number\">1e9</span>+<span class=\"number\">7</span> ;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> ans = <span class=\"number\">0</span> ;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> a1 = <span class=\"number\">1</span> , a2 = <span class=\"number\">2</span> , a4 =<span class=\"number\">4</span>;</span><br><span class=\"line\">    ans+=(<span class=\"type\">long</span> <span class=\"type\">long</span>)(((N*M) -a1)*(N*M)) ;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N &gt;=<span class=\"number\">2</span> &amp;&amp; M&gt;=<span class=\"number\">3</span>)&#123;</span><br><span class=\"line\">        ans-=(<span class=\"type\">long</span> <span class=\"type\">long</span>)((N-a1)*(a4)*(M-a2)) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(N &gt;=<span class=\"number\">3</span> &amp;&amp; M&gt;=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">        ans-= (<span class=\"type\">long</span> <span class=\"type\">long</span>)((N-a2)*(a4)*(M-a1)) ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (ans%mod) ;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/C++-Data-Types---GFG/",
            "url": "https://samirpaul.in/posts/C++-Data-Types---GFG/",
            "title": "C++ Data Types   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"C-Data-Types\"><a href=\"#C-Data-Types\" class=\"headerlink\" title=\"C++ Data Types\"></a>C++ Data Types</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Read a value and store it in the appropriate C++ Data Type.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input: </strong>\n2 h 2.555\n<strong>Output:</strong>\n2\nh\n2.555 </span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong></span>\n<span style=\"font-size:18px\">The three inputs are printed in order.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYour task is to complete each of the given functions&nbsp;<br>\n<strong>cppIntType() </strong>: read an integer input, store it in appropriate data type and return it.&nbsp;<br>\n<strong>cppCharType() :&nbsp;</strong>read a character&nbsp;input, store it in appropriate data type and return it.&nbsp;<strong>&nbsp;<br>\ncppFloatType() :&nbsp;</strong>read a float&nbsp;input, store it in appropriate data type and return it.&nbsp;</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br>\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">cppIntType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"type\">int</span> a;</span><br><span class=\"line\">        cin&gt;&gt;a;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">char</span> <span class=\"title\">cppCharType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"type\">char</span> b;</span><br><span class=\"line\">        cin&gt;&gt;b;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">float</span> <span class=\"title\">cppFloatType</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"type\">float</span> c;</span><br><span class=\"line\">        cin&gt;&gt;c;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">cppIntType</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">cppCharType</span>() &lt;&lt; endl;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">cppFloatType</span>() &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/C++-Strings---GFG/",
            "url": "https://samirpaul.in/posts/C++-Strings---GFG/",
            "title": "C++ Strings   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"C-Strings\"><a href=\"#C-Strings\" class=\"headerlink\" title=\"C++ Strings\"></a>C++ Strings</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given two strings&nbsp; S1 and S2 .&nbsp;You have to concatenate both the strings and print the concatenated string.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nS1 = \"Geeksfor\"\nS2 = \"Geeks\"\n<strong>Output:</strong> GeeksforGeeks\n<strong>Explanation: </strong>Combined \"Geeksfor\" and \"Geeks\"</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nS1 = \"Practice\"\nS2 = \"Hard\"\n<strong>Output:</strong> PracticeHard\n<strong>Explanation: </strong>Combined \"Practice\" and \"Hard\"</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br>\nYou dont need to read input or print anything. Complete the function <strong>conCat()</strong>&nbsp;which accepts two strings S1 and S2 as input parameter and returns concatenated string.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity: </strong>O(|S1| + |S2|) .<br>\n<strong>Expected Auxiliary Space: </strong>O(|S1| + |S2|) .<br>\nwhere N is the length of a&nbsp;String</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= |S1| , |S2|&nbsp;&lt;= 10<sup>5</sup></span><br>\n<span style=\"font-size:18px\">|S| denotes the length of the string S.</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">conCat</span><span class=\"params\">(string a , string b)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string a,b;</span><br><span class=\"line\">        cin&gt;&gt;a&gt;&gt;b;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"built_in\">conCat</span>(a,b)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">string <span class=\"title\">conCat</span><span class=\"params\">(string s1 , string s2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code here.</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s1+s2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/C++-Switch-Case-Statement---GFG/",
            "url": "https://samirpaul.in/posts/C++-Switch-Case-Statement---GFG/",
            "title": "C++ Switch Case Statement   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"C-Switch-Case-Statement\"><a href=\"#C-Switch-Case-Statement\" class=\"headerlink\" title=\"C++ Switch Case Statement\"></a>C++ Switch Case Statement</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a number N, if the number is between 1 and 10 both inclusive then return the number in words (Lower case English Alphabets) otherwise return&nbsp;\"not in range\".</span></p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:</span></strong>\n<span style=\"font-size:18px\">5</span>\n<strong><span style=\"font-size:18px\">Output:</span></strong>\n<span style=\"font-size:18px\">five</span></pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:</span></strong>\n<span style=\"font-size:18px\">11</span>\n<strong><span style=\"font-size:18px\">Output:</span></strong>\n<span style=\"font-size:18px\">not in range</span></pre>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\n\n<p><span style=\"font-size:18px\">You don't need to read input or print anything. Your task is to complete the function isInRange() which takes an integer and&nbsp;if the number is between 1 and 10 both inclusive then return the number in words otherwise return&nbsp;\"not in range\".</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br>\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span></p>\n\n<p><span style=\"font-size:18px\">1&lt;=N&lt;=10000</span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;   </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">isInRange</span><span class=\"params\">(<span class=\"type\">int</span> N)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here </span></span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(N)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;one&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">2</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span>  <span class=\"string\">&quot;two&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">3</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;three&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">4</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;four&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">5</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;five&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">6</span> :</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;six&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">7</span> : </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;seven&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">8</span>: </span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;eight&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;nine&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;ten&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;not in range&quot;</span>;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        cin &gt;&gt; N;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">isInRange</span>(N) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/C++-if-else-(Decision-Making)---GFG/",
            "url": "https://samirpaul.in/posts/C++-if-else-(Decision-Making)---GFG/",
            "title": "C++ if else (Decision Making)   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"C-if-else-Decision-Making\"><a href=\"#C-if-else-Decision-Making\" class=\"headerlink\" title=\"C++ if-else (Decision Making)\"></a>C++ if-else (Decision Making)</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an integer N.&nbsp;Your task is to check if the integer is greater than, less than or equal to 5.<br>\nIf the integer is greater than 5, then print \"Greater than 5\" (without quotes).<br>\nIf the integer is less than 5, then print \"Less than 5\".<br>\nIf the integer is equal to 5, then print \"Equal&nbsp;to 5\".</span><br>\n&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:</span></strong>\n<span style=\"font-size:18px\">N = 8</span>\n<strong><span style=\"font-size:18px\">Output:</span></strong>\n<span style=\"font-size:18px\">Greater than 5</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong></span>\n<span style=\"font-size:18px\">N = 4</span>\n<span style=\"font-size:18px\"><strong>Output:</strong></span>\n<span style=\"font-size:18px\">Less than 5</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\n\n<p><span style=\"font-size:18px\">You don't need to read input or print anything. Your task is to complete the function compareFive() which takes the number N and returns&nbsp;\"Greater than 5\" if the integer is greater than 5 or \"Less than 5\" if the integer is less than 5 otherwise print \"Equal&nbsp;to 5\" if the integer equals to 5.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Note :-&nbsp;</span></strong><span style=\"font-size:18px\">Do not print the next line after the result.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(1)<br>\n<strong>Expected Auxiliary Space: </strong>O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= N &lt;= 100000</span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;   </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">compareFive</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here </span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &gt; <span class=\"number\">5</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Greater than 5&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n &lt; <span class=\"number\">5</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Less than 5&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>( n == <span class=\"number\">5</span>) <span class=\"keyword\">return</span> <span class=\"string\">&quot;Equal to 5&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        cin &gt;&gt; N;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">compareFive</span>(N) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Check-if-Linked-List-is-Palindrome---GFG/",
            "url": "https://samirpaul.in/posts/Check-if-Linked-List-is-Palindrome---GFG/",
            "title": "Check if Linked List is Palindrome   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Check-if-Linked-List-is-Palindrome\"><a href=\"#Check-if-Linked-List-is-Palindrome\" class=\"headerlink\" title=\"Check if Linked List is Palindrome\"></a>Check if Linked List is Palindrome</h1><h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a singly linked list of size <strong>N</strong> of integers. The task is to check if the given linked list is palindrome or not.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 3\nvalue[] = {1,2,1}\n<strong>Output: </strong>1<strong>\nExplanation: </strong>The given linked list is\n1 2 1 , which is a palindrome and\nHence, the output is 1.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4\nvalue[] = {1,2,3,4}\n<strong>Output: </strong>0<strong>\nExplanation: </strong>The given linked list\nis 1 2 3 4 , which is not a palindrome\nand Hence, the output is 0.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nThe task is to complete the function&nbsp;<strong>isPalindrome</strong>() which takes head as reference as the only parameter and returns true or false if linked list is palindrome&nbsp;or not respectively.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong>: O(N)<br>\n<strong>Expected Auxialliary Space Usage</strong>: O(1)&nbsp; (ie, you should not use the recursive stack space as well)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= N&nbsp;&lt;= 10<sup>5</sup></span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stack&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">/* Link list Node */</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> data;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *next;</span><br><span class=\"line\">  <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> x) &#123;</span><br><span class=\"line\">    data = x;</span><br><span class=\"line\">    next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">struct Node &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  int data;</span></span><br><span class=\"line\"><span class=\"comment\">  struct Node *next;</span></span><br><span class=\"line\"><span class=\"comment\">  Node(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    data = x;</span></span><br><span class=\"line\"><span class=\"comment\">    next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//Function to check whether the list is palindrome.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isPalindrome</span><span class=\"params\">(Node *head)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//Your code here</span></span><br><span class=\"line\">        Node* temp = head;</span><br><span class=\"line\">        stack&lt;<span class=\"type\">int</span>&gt;s;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(temp != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            s.<span class=\"built_in\">push</span>(temp-&gt;data);</span><br><span class=\"line\">            temp = temp-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(head != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> i = s.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">            s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(head-&gt;data != i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            head = head-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"comment\">/* Driver program to test above function*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T,i,n,l,firstdata;</span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *head = <span class=\"literal\">NULL</span>,  *tail = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"comment\">// taking first data of LL</span></span><br><span class=\"line\">        cin&gt;&gt;firstdata;</span><br><span class=\"line\">        head = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(firstdata);</span><br><span class=\"line\">        tail = head;</span><br><span class=\"line\">        <span class=\"comment\">// taking remaining data of LL</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin&gt;&gt;l;</span><br><span class=\"line\">            tail-&gt;next = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(l);</span><br><span class=\"line\">            tail = tail-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    Solution obj;</span><br><span class=\"line\">   \tcout&lt;&lt;obj.<span class=\"built_in\">isPalindrome</span>(head)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Check-if-array-is-sorted---GFG/",
            "url": "https://samirpaul.in/posts/Check-if-array-is-sorted---GFG/",
            "title": "Check if array is sorted   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Check-if-array-is-sorted\"><a href=\"#Check-if-array-is-sorted\" class=\"headerlink\" title=\"Check if array is sorted\"></a>Check if array is sorted</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an array <strong>arr[]&nbsp;</strong>of size <strong>N</strong>, check if it is sorted in non-decreasing order or not.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 5\narr[] = {10, 20, 30, 40, 50}\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The given array is sorted.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 6\narr[] = {90, 80, 100, 70, 40, 30}\n<strong>Output:</strong> 0\n<strong>Explanation:</strong>&nbsp;The given array is not sorted.</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>arraySortedOrNot()</strong>&nbsp;which takes the&nbsp;<strong>arr[]&nbsp;</strong>and N<strong>&nbsp;</strong>as input parameters and returns a <strong>boolean</strong> value (true if it is sorted otherwise false).</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N)<br>\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1)</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 â‰¤ N â‰¤ 10<sup>5</sup><br>\n1 â‰¤ Arr[i] â‰¤ 10<sup>6</sup></span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// Initial template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">// User function template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">arraySortedOrNot</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"comment\">//T.C. =&gt; O(N^2)</span></span><br><span class=\"line\">        <span class=\"comment\">// for(int i = 0; i &lt; n; i++) &#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//     for(int j = i + 1; j &lt; n; j++)&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//         if(arr[j] &lt; arr[i])</span></span><br><span class=\"line\">        <span class=\"comment\">//         return false;</span></span><br><span class=\"line\">        <span class=\"comment\">//     &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">        <span class=\"comment\">// return true;</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//T.C. =&gt; O(N)</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[i] &lt; arr[i<span class=\"number\">-1</span>])</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            cin &gt;&gt; arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        <span class=\"type\">bool</span> ans = ob.<span class=\"built_in\">arraySortedOrNot</span>(arr, n);</span><br><span class=\"line\">        cout &lt;&lt; ans &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Check-if-it-is-possible-to-convert-one-string-into-another-with-given-constraints---GFG/",
            "url": "https://samirpaul.in/posts/Check-if-it-is-possible-to-convert-one-string-into-another-with-given-constraints---GFG/",
            "title": "Check if it is possible to convert one string into another with given constraints   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Check-if-it-is-possible-to-convert-one-string-into-another-with-given-constraints\"><a href=\"#Check-if-it-is-possible-to-convert-one-string-into-another-with-given-constraints\" class=\"headerlink\" title=\"Check if it is possible to convert one string into another with given constraints\"></a>Check if it is possible to convert one string into another with given constraints</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p>Given two strings S and T, which&nbsp;contains three characters i.e <strong>'A', 'B'</strong> and <strong>'#'&nbsp;</strong>only. Check&nbsp;whether it is possible to convert the first string into another string by performing following operations on string first.<br>\n1- A can move towards Left only<br>\n2- B can move towards Right only<br>\n3- Neither A nor B should&nbsp;cross each other<br>\n<strong>Note:</strong> Moving i'th character&nbsp;towards Left one step means swap i'th with (i-1)'th charecter [ i-1&gt;=0 ].&nbsp;Moving i'th character&nbsp;towards Right one step means swap i'th with (i+1)'th charecter [ i+1&lt; string's length ].&nbsp;</p>\n\n<p><strong>Example 1:</strong></p>\n\n<pre><strong>Input:</strong>\nS=#A#B#B#   \nT=A###B#B\n<strong>Output:</strong>\n1\n<strong>Explanation:</strong>\nA in S is right to the A in T \nso A of S can move easily towards\nthe left because there is no B on\nits left positions and for first B \nin S is left to the B in T so B \nof T can move easily towards the \nright because there is no A on its\nright positions and it is same for \nnext B so S can be easily converted\ninto T.</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre><strong>Input:</strong>\nS=#A#B# \nT=#B#A#\n<strong>Output:</strong>\n0\n<strong>Explanation:</strong>\nHere first A in S is left to the \nA in T and according to the condition,\nA cant move towards right,so S cant \nbe converted into T.</pre>\n\n<p><br>\n<strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function <strong>isItPossible() </strong>which takes the two strings S, T and their respective lengths M and N as input parameters and returns 1 if S can be converted into T. Otherwise, it returns 0.</p>\n\n<p><br>\n<strong>Expected Time Complexity:&nbsp;</strong>O(M+N) where M is size of string S and N is size of string T.<br>\n<strong>Expected Auxillary Space:&nbsp;</strong>O(1)<br>\n&nbsp;</p>\n\n<p><strong>Constraints:</strong><br>\n1&lt;=M,N&lt;=100000</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// Initial Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">// User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">isItPossible</span><span class=\"params\">(string S, string T, <span class=\"type\">int</span> M, <span class=\"type\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(M!=N) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        string S1=<span class=\"string\">&quot;&quot;</span>,S2=<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;S.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(S[i]!=<span class=\"string\">&#x27;#&#x27;</span>)&#123;</span><br><span class=\"line\">                S1+=S[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">          <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;T.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(T[i]!=<span class=\"string\">&#x27;#&#x27;</span>)&#123;</span><br><span class=\"line\">                S2+=T[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"type\">int</span>)(S1==S2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        string S, T;</span><br><span class=\"line\">        cin &gt;&gt; S &gt;&gt; T;</span><br><span class=\"line\">        <span class=\"type\">int</span> M = S.<span class=\"built_in\">length</span>(), N = T.<span class=\"built_in\">length</span>();</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">isItPossible</span>(S, T, M, N);</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Check-if-two-arrays-are-equal-or-not---GFG/",
            "url": "https://samirpaul.in/posts/Check-if-two-arrays-are-equal-or-not---GFG/",
            "title": "Check if two arrays are equal or not   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Check-if-two-arrays-are-equal-or-not\"><a href=\"#Check-if-two-arrays-are-equal-or-not\" class=\"headerlink\" title=\"Check if two arrays are equal or not\"></a>Check if two arrays are equal or not</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given two arrays <strong>A</strong> and <strong>B</strong> of equal size <strong>N</strong>, the task is to find if given arrays are equal or not. Two arrays are said to be equal if both of them contain same set of elements, arrangements (or permutation) of elements may be different though.<br>\n<strong>Note :</strong>&nbsp;If there are repetitions, then counts of repeated elements must also be same for two array to be equal.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 5\nA[] = {1,2,5,4,0}\nB[] = {2,4,5,0,1}\n<strong>Output: </strong>1<strong>\nExplanation: </strong>Both the array can be \nrearranged to {0,1,2,4,5}</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 3\nA[] = {1,2,5}\nB[] = {2,4,15}\n<strong>Output: </strong>0<strong>\nExplanation: </strong>A[] and B[] have only \none common value.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nComplete&nbsp;<strong>check() </strong>function which takes both the given array and their size as function arguments and returns <strong>true</strong> if the arrays are equal else <strong>returns false</strong>.The 0 and 1 printing is done by the driver code.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity </strong>: O(N)<br>\n<strong>Expected Auxilliary Space</strong> : O(N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1&lt;=N&lt;=10<sup>7</sup><br>\n1&lt;=A[],B[]&lt;=10<sup>18</sup></span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">//Initial function template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ll long long </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Function to check if two arrays are equal or not.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">check</span><span class=\"params\">(vector&lt;ll&gt; A, vector&lt;ll&gt; B, <span class=\"type\">int</span> N)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//code here</span></span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(A.<span class=\"built_in\">begin</span>(), A.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(B.<span class=\"built_in\">begin</span>(), B.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(A[i] != B[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"function\">vector&lt;ll&gt; <span class=\"title\">arr</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span>,<span class=\"title\">brr</span><span class=\"params\">(n,<span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// increase the count of elements in first array</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ll i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">            cin &gt;&gt; arr[i];</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// iterate through another array</span></span><br><span class=\"line\">        <span class=\"comment\">// and decrement the count of elements</span></span><br><span class=\"line\">        <span class=\"comment\">// in the map in which frequency of elements</span></span><br><span class=\"line\">        <span class=\"comment\">// is stored for first array</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(ll i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">            cin &gt;&gt; brr[i];</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">check</span>(arr,brr,n) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Check-whether-K-th-bit-is-set-or-not---GFG/",
            "url": "https://samirpaul.in/posts/Check-whether-K-th-bit-is-set-or-not---GFG/",
            "title": "Check whether K th bit is set or not   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Check-whether-K-th-bit-is-set-or-not\"><a href=\"#Check-whether-K-th-bit-is-set-or-not\" class=\"headerlink\" title=\"Check whether K-th bit is set or not\"></a>Check whether K-th bit is set or not</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">Given a number <strong>N </strong>and a bit number <strong>K</strong>, check if <strong>K<sup>th</sup></strong> bit of N is <strong>set or not</strong>. A bit is called set if it is 1. Position of set bit&nbsp;'1' should be <strong>indexed starting with 0</strong>&nbsp;from <strong>LSB </strong>side in&nbsp;binary representation of the number.</span><br>\n<br>\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input</strong>: N = 4, K = 0\n<strong>Output</strong>: No\n<strong>Explanation</strong>: Binary representation of 4 is 100, \nin which 0<sup>th</sup> bit from LSB is not set. \nSo, return false.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input</strong>: N = 4, K = 2\n<strong>Output</strong>: Yes\n<strong>Explanation</strong>: Binary representation of 4 is 100, \nin which 2<sup>nd</sup> bit from LSB is set. \nSo, return true.</span></pre>\n\n<p><strong><span style=\"font-size:18px\">Example 3:</span></strong></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input</strong>: N = 500, K = 3\n<strong>Output</strong>: No\n<strong>Explanation</strong>: Binary representation of 500&nbsp;is \n111110100, in which 3rd bit from LSB is not set. \nSo, return false.</span></pre>\n\n<div><br>\n<strong><span style=\"font-size:18px\">Your task:</span></strong></div>\n\n<div><span style=\"font-size:18px\">You don't have to read input or print anything. Your task is&nbsp;to complete the <strong>function checkKthbit </strong>that takes <strong>n and k as parameters</strong> and <strong>returns </strong>either <strong>true </strong>(if kth bit is set) or <strong>false</strong>(if kth bit is not set).</span><br>\n<br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(LogN).<br>\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span><br>\n<br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 â‰¤ N â‰¤ 10<sup>9</sup><br>\n0 â‰¤ K â‰¤ floor(log<sub>2</sub>(N) + 1)</span></div>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">//Initial Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// Function to check if Kth bit is set or not.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">checkKthBit</span><span class=\"params\">(<span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Your code here</span></span><br><span class=\"line\">        <span class=\"comment\">// It can be a one liner logic!! Think of it!!</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (n &amp; (<span class=\"number\">1</span> &lt;&lt; (k)));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Driver Code</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> t;</span><br><span class=\"line\">\tcin&gt;&gt;t;<span class=\"comment\">//taking testcases</span></span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    <span class=\"type\">long</span> <span class=\"type\">long</span> n;</span><br><span class=\"line\">\t    cin&gt;&gt;n;<span class=\"comment\">//input n</span></span><br><span class=\"line\">\t    <span class=\"type\">int</span> k;</span><br><span class=\"line\">\t    cin&gt;&gt;k;<span class=\"comment\">//bit number k</span></span><br><span class=\"line\">\t    Solution obj;</span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(obj.<span class=\"built_in\">checkKthBit</span>(n, k))</span><br><span class=\"line\">\t        cout &lt;&lt; <span class=\"string\">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t    <span class=\"keyword\">else</span></span><br><span class=\"line\">\t        cout &lt;&lt; <span class=\"string\">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Complete-Binary-Tree---GFG/",
            "url": "https://samirpaul.in/posts/Complete-Binary-Tree---GFG/",
            "title": "Complete Binary Tree   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Complete-Binary-Tree\"><a href=\"#Complete-Binary-Tree\" class=\"headerlink\" title=\"Complete Binary Tree\"></a>Complete Binary Tree</h1><h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a Binary Tree, write a function to check whether the given Binary Tree is Complete Binary Tree or not. A complete binary tree&nbsp;is a binary tree in which every level, except possibly the last, is completely filled, and all nodes should be as much close to left as possible</span><span style=\"font-size:18px\">.</span></p>\n\n<pre><span style=\"font-size:18px\">\n<strong>Example 1:\nInput:</strong>\n       1\n      / \\\n     2   3\n<strong>Output:</strong>\nComplete Binary Tree</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\n              1\n            /   \\\n          2      3\n           \\    /  \\\n            4  5    6\n<strong>Output:</strong>\nNot Complete Binary Tree\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1&lt;=Number of Node&lt;=100</span><br>\n<span style=\"font-size:18px\">0 &lt;= Data of a node &lt;= 10<sup>6</sup></span></p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to take input. Just complete the function<strong> isCompleteBT() </strong>that takes root <strong>node </strong>as a parameter and returns <strong>true, </strong>if the tree is Complete else returns <strong>false</strong>.</span></p>\n\n<p>&nbsp;</p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// A program to check if a given binary tree is complete or not</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* A binary tree node has data, pointer to left child</span></span><br><span class=\"line\"><span class=\"comment\">   and a pointer to right child */</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *left;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> val) &#123;</span><br><span class=\"line\">        data = val;</span><br><span class=\"line\">        left = right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">buildTree</span><span class=\"params\">(string str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   </span><br><span class=\"line\">    <span class=\"comment\">// Corner Case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str.<span class=\"built_in\">length</span>() == <span class=\"number\">0</span> || str[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;N&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Creating vector of strings from input </span></span><br><span class=\"line\">    <span class=\"comment\">// string after spliting by space</span></span><br><span class=\"line\">    vector&lt;string&gt; ip;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">istringstream <span class=\"title\">iss</span><span class=\"params\">(str)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(string str; iss &gt;&gt; str; )</span><br><span class=\"line\">        ip.<span class=\"built_in\">push_back</span>(str);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// Create the root of the tree</span></span><br><span class=\"line\">    Node *root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"built_in\">stoi</span>(ip[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// Push the root to the queue</span></span><br><span class=\"line\">    queue&lt;Node*&gt; queue;</span><br><span class=\"line\">    queue.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// Starting from the second element</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.<span class=\"built_in\">empty</span>() &amp;&amp; i &lt; ip.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// Get and remove the front of the queue</span></span><br><span class=\"line\">        Node* currNode = queue.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        queue.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// Get the current node&#x27;s value from the string</span></span><br><span class=\"line\">        string currVal = ip[i];</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// If the left child is not null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currVal != <span class=\"string\">&quot;N&quot;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create the left child for the current Node</span></span><br><span class=\"line\">            currNode-&gt;left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"built_in\">stoi</span>(currVal));</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// Push it to the queue</span></span><br><span class=\"line\">            queue.<span class=\"built_in\">push</span>(currNode-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// For the right child</span></span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= ip.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        currVal = ip[i];</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// If the right child is not null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currVal != <span class=\"string\">&quot;N&quot;</span>) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// Create the right child for the current node</span></span><br><span class=\"line\">            currNode-&gt;right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"built_in\">stoi</span>(currVal));</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// Push it to the queue</span></span><br><span class=\"line\">            queue.<span class=\"built_in\">push</span>(currNode-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isCompleteBT</span><span class=\"params\">(Node* root)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//code here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        queue&lt;Node*&gt;q;</span><br><span class=\"line\">        <span class=\"type\">bool</span> okay = <span class=\"number\">0</span>;</span><br><span class=\"line\">        q.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q.<span class=\"built_in\">empty</span>() == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">          Node* tp = q.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">          q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(tp-&gt;left) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(okay == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              q.<span class=\"built_in\">push</span>(tp-&gt;left);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              okay = <span class=\"number\">1</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(tp-&gt;right) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span>(okay == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              q.<span class=\"built_in\">push</span>(tp-&gt;right);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              okay = <span class=\"number\">1</span>; </span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d &quot;</span>,&amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string treeString;</span><br><span class=\"line\">\t\t<span class=\"built_in\">getline</span>(cin,treeString);</span><br><span class=\"line\">\t\tNode* root = <span class=\"built_in\">buildTree</span>(treeString);</span><br><span class=\"line\">\t\tSolution ob;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ob.<span class=\"built_in\">isCompleteBT</span>(root))&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;Complete Binary Tree\\n&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;Not Complete Binary Tree\\n&quot;</span>);</span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Count-Leaves-in-Binary-Tree---GFG/",
            "url": "https://samirpaul.in/posts/Count-Leaves-in-Binary-Tree---GFG/",
            "title": "Count Leaves in Binary Tree   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Count-Leaves-in-Binary-Tree\"><a href=\"#Count-Leaves-in-Binary-Tree\" class=\"headerlink\" title=\"Count Leaves in Binary Tree\"></a>Count Leaves in Binary Tree</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a Binary Tree of size <strong>N</strong> , You have to count leaves in it. For example, there are two leaves in following&nbsp;tree</span></p>\n\n<p><span style=\"font-size:18px\">&nbsp; &nbsp; &nbsp; &nbsp; 1<br>\n&nbsp; &nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \\<br>\n&nbsp;&nbsp; 10&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 39<br>\n&nbsp; /<br>\n5</span><br>\n<br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>\nInput:</strong>\nGiven Tree is \n               4\n             /   \\\n            8     10\n           /     /   \\\n          7     5     1\n         /\n        3 \n<strong>Output:</strong>\n3\n<strong>Explanation:</strong> \nThree leaves are 3 , 5 and 1.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't have to take input. Complete the function <strong>countLeaves()&nbsp;</strong>that takes <strong>root&nbsp;</strong>node of given tree<strong>&nbsp;</strong>as parameter and <strong>returns </strong>the count of leaves in tree .&nbsp;The <strong>printing </strong>is done by the <strong>driver </strong>code.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1&lt;= N &lt;= 10<sup>4</sup></span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Note:</strong>The <strong>Input/Ouput</strong> format and <strong>Example</strong> given below is used for system's internal purpose, and should be used by a user for <strong>Expected Output</strong> only. As it is a function problem, hence a user should not read any input from stdin/console, and should not print anything on stdout/console. The task is to complete the function specified, and not to write the full code.</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *left;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">newNode</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Node* temp = <span class=\"keyword\">new</span> Node;</span><br><span class=\"line\">    temp-&gt;data = val;</span><br><span class=\"line\">    temp-&gt;left = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    temp-&gt;right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">buildTree</span><span class=\"params\">(string str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;   </span><br><span class=\"line\">    <span class=\"comment\">// Corner Case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str.<span class=\"built_in\">length</span>() == <span class=\"number\">0</span> || str[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;N&#x27;</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// Creating vector of strings from input </span></span><br><span class=\"line\">    <span class=\"comment\">// string after spliting by space</span></span><br><span class=\"line\">    vector&lt;string&gt; ip;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\">istringstream <span class=\"title\">iss</span><span class=\"params\">(str)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(string str; iss &gt;&gt; str; )</span><br><span class=\"line\">        ip.<span class=\"built_in\">push_back</span>(str);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// Create the root of the tree</span></span><br><span class=\"line\">    Node* root = <span class=\"built_in\">newNode</span>(<span class=\"built_in\">stoi</span>(ip[<span class=\"number\">0</span>]));</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// Push the root to the queue</span></span><br><span class=\"line\">    queue&lt;Node*&gt; queue;</span><br><span class=\"line\">    queue.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"comment\">// Starting from the second element</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.<span class=\"built_in\">empty</span>() &amp;&amp; i &lt; ip.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// Get and remove the front of the queue</span></span><br><span class=\"line\">        Node* currNode = queue.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        queue.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// Get the current node&#x27;s value from the string</span></span><br><span class=\"line\">        string currVal = ip[i];</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// If the left child is not null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currVal != <span class=\"string\">&quot;N&quot;</span>) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// Create the left child for the current node</span></span><br><span class=\"line\">            currNode-&gt;left = <span class=\"built_in\">newNode</span>(<span class=\"built_in\">stoi</span>(currVal));</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// Push it to the queue</span></span><br><span class=\"line\">            queue.<span class=\"built_in\">push</span>(currNode-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// For the right child</span></span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= ip.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        currVal = ip[i];</span><br><span class=\"line\">            </span><br><span class=\"line\">        <span class=\"comment\">// If the right child is not null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currVal != <span class=\"string\">&quot;N&quot;</span>) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// Create the right child for the current node</span></span><br><span class=\"line\">            currNode-&gt;right = <span class=\"built_in\">newNode</span>(<span class=\"built_in\">stoi</span>(currVal));</span><br><span class=\"line\">                </span><br><span class=\"line\">            <span class=\"comment\">// Push it to the queue</span></span><br><span class=\"line\">            queue.<span class=\"built_in\">push</span>(currNode-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countLeaves</span><span class=\"params\">(<span class=\"keyword\">struct</span> Node* root)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d &quot;</span>,&amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string s;</span><br><span class=\"line\">\t\t<span class=\"built_in\">getline</span>(cin,s);</span><br><span class=\"line\">\t\tNode* root = <span class=\"built_in\">buildTree</span>(s);</span><br><span class=\"line\">\t\tcout&lt;&lt; <span class=\"built_in\">countLeaves</span>(root)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* A binary tree node has data, pointer to left child</span></span><br><span class=\"line\"><span class=\"comment\">   and a pointer to right child  </span></span><br><span class=\"line\"><span class=\"comment\">struct Node</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int data;</span></span><br><span class=\"line\"><span class=\"comment\">    Node* left;</span></span><br><span class=\"line\"><span class=\"comment\">    Node* right;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Should return count of leaves. For example, return</span></span><br><span class=\"line\"><span class=\"comment\">    value should be 2 for following tree.</span></span><br><span class=\"line\"><span class=\"comment\">         10</span></span><br><span class=\"line\"><span class=\"comment\">      /      \\ </span></span><br><span class=\"line\"><span class=\"comment\">   20       30 */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countLeaves</span><span class=\"params\">(Node* root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// Your code here</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span>(root == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(root-&gt;left == <span class=\"literal\">NULL</span> &amp;&amp; root-&gt;right == <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">countLeaves</span>(root-&gt;left) + <span class=\"built_in\">countLeaves</span>(root-&gt;right);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Convert-String-to-LowerCase---GFG/",
            "url": "https://samirpaul.in/posts/Convert-String-to-LowerCase---GFG/",
            "title": "Convert String to LowerCase   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Convert-String-to-LowerCase\"><a href=\"#Convert-String-to-LowerCase\" class=\"headerlink\" title=\"Convert String to LowerCase\"></a>Convert String to LowerCase</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a string <strong>S</strong>. The task is to convert characters of string to <strong>lowercase</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input: S</strong> = \"ABCddE</span><span style=\"font-size:18px\">\"\n<strong>Output:</strong> \"abcdde</span><span style=\"font-size:18px\">\"\n<strong>Explanation: </strong>A, B, C and E are converted to</span>\n<span style=\"font-size:18px\">a, b, c and E thus&nbsp;all uppercase characters \nof the string converted to lowercase letter.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input: S</strong> = \"LMNOppQQ</span><span style=\"font-size:18px\">\"\n<strong>Output:</strong> \"lmnoppqq</span><span style=\"font-size:18px\">\"\n<strong>Explanation: </strong>L, M, N, O, and Q are \nconverted to l, m, n, o and q thus&nbsp;\nall uppercase characters of the \nstring converted to lowercase letter.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br>\nYou dont need to read input or print anything. Complete the function <strong>toLower()&nbsp;</strong>which takes S&nbsp;as input parameter and returns the converted string.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>O(n)<br>\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1)&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= |S|&nbsp;&lt;= 1000</span></p>\n\n<p><span style=\"font-size:18px\">Input only contains lowercase/uppercase English alphabets.</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// Initial Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">// User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">toLower</span><span class=\"params\">(string S)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; S.<span class=\"built_in\">size</span>(); i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(S[i] &lt; <span class=\"number\">97</span>) &#123;</span><br><span class=\"line\">                S[i] = S[i] + <span class=\"number\">32</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> S;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string S;</span><br><span class=\"line\">        cin &gt;&gt; S;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">toLower</span>(S) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Count-Odd-Even---GFG/",
            "url": "https://samirpaul.in/posts/Count-Odd-Even---GFG/",
            "title": "Count Odd Even   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Count-Odd-Even\"><a href=\"#Count-Odd-Even\" class=\"headerlink\" title=\"Count Odd Even\"></a>Count Odd Even</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">Given an array <strong>A[]&nbsp;</strong>of <strong>N </strong>elements. The task is to count number of <strong>even </strong>and <strong>odd </strong>elements in the array.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\nA[] = 1 2 3 4 5\n<strong>Output:\n</strong>3 2\n<strong>Explanation:\n</strong>There are 3 odd elements (1, 3, 5)\nand 2 even elements (2 and 4).</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYour task is to complete the function <strong>countOddEven</strong>() which should print number of odd and number of even elements in a single line seperated by space.<br>\nPrint a newline at the end of output.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= N &lt;= 10<sup>6</sup><br>\n1 &lt;= A<sub>i</sub> &lt;= 10<sup>6</sup></span></p>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">//Initial Template for C++</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">/*Function to count even and odd elements in the array</span></span><br><span class=\"line\"><span class=\"comment\">    * arr : Array with its elements</span></span><br><span class=\"line\"><span class=\"comment\">    * sizeof_array : number of array elements</span></span><br><span class=\"line\"><span class=\"comment\">    * countOdd : variable to count number of odd elements</span></span><br><span class=\"line\"><span class=\"comment\">    * countEven : variable to count number of even elements</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">countOddEven</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> sizeof_array)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// your code here</span></span><br><span class=\"line\">       vector&lt;<span class=\"type\">int</span>&gt;even;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sizeof_array; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(arr[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">               even.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       cout&lt;&lt;sizeof_array - even.<span class=\"built_in\">size</span>()&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;even.<span class=\"built_in\">size</span>()&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">// Testcase input</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> testcase;</span><br><span class=\"line\">\tcin &gt;&gt; testcase;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(testcase--)&#123;</span><br><span class=\"line\">\t    <span class=\"type\">int</span> sizeof_array;</span><br><span class=\"line\">\t    cin &gt;&gt; sizeof_array;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    <span class=\"type\">int</span> arr[sizeof_array];</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    <span class=\"comment\">// Array elements input</span></span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; sizeof_array; i++)&#123;</span><br><span class=\"line\">\t        cin &gt;&gt; arr[i];</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    Solution ob;</span><br><span class=\"line\">\t    <span class=\"comment\">// Calling function to count even and odd</span></span><br><span class=\"line\">\t    ob.<span class=\"built_in\">countOddEven</span>(arr, sizeof_array);</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Count-Odd-Factors---GFG/",
            "url": "https://samirpaul.in/posts/Count-Odd-Factors---GFG/",
            "title": "Count Odd Factors   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Count-Odd-Factors\"><a href=\"#Count-Odd-Factors\" class=\"headerlink\" title=\"Count Odd Factors\"></a>Count Odd Factors</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">Given an integer <strong>N</strong>, count the numbers having<strong>&nbsp;an odd number of factors from 1 to N</strong> (inclusive).</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\n<strong>Output:</strong>\n2\n<strong>Explanation:</strong>\nFrom 1 - 5 only 2 numbers,\n1 and 4 are having odd number\nof factors.\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 1\n<strong>Output:</strong>\n1\n<strong>Explanation:</strong>\n1 have only 1(odd)\nfactor\n</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function <strong>count()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, the total count of numbers&nbsp;from 1 to N having an odd number of factors.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(sqrt(N))<br>\n<strong>Expected Space Complexity:</strong> O(1)</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n0 &lt;= N &lt;= 10<sup>9</sup></span></p>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"type\">int</span> N)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sqrt</span>(N);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        cin&gt;&gt;N;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">count</span>(N) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;  <span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Count-nodes-of-linked-list---GFG/",
            "url": "https://samirpaul.in/posts/Count-nodes-of-linked-list---GFG/",
            "title": "Count nodes of linked list   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Count-nodes-of-linked-list\"><a href=\"#Count-nodes-of-linked-list\" class=\"headerlink\" title=\"Count nodes of linked list\"></a>Count nodes of linked list</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a singly linked list. The task is to find the length of the linked list, where length is defined as the number of nodes in the linked list.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5\n<strong>Output: </strong>5<strong>\nExplanation: </strong>Count of nodes in the \nlinked list is 5, which is its length.</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:\n</span></strong><span style=\"font-size:18px\">LinkedList: 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1-&gt;0\n<strong>Output: </strong>7<strong>\nExplanation: </strong>Count of nodes in the\nlinked list is 7. Hence, the output\nis 7.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYour task is to complete the given function <strong>getCount</strong>(), which takes a head reference as an argument and should return the length of the linked list.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong> : O(N)<br>\n<strong>Expected Auxilliary Space</strong> : O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= N &lt;= 10<sup>5</sup><br>\n1 &lt;= value &lt;= 10<sup>3</sup></span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>* next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> x)&#123;</span><br><span class=\"line\">        data = x;</span><br><span class=\"line\">        next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">/* Link list node */</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">struct Node</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int data;</span></span><br><span class=\"line\"><span class=\"comment\">    Node* next;</span></span><br><span class=\"line\"><span class=\"comment\">    Node(int x) &#123;  data = x;  next = NULL; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//Function to count nodes of a linked list.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getCount</span><span class=\"params\">(<span class=\"keyword\">struct</span> Node* head)</span></span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"comment\">//Code here</span></span><br><span class=\"line\">        <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">        Node* current = head;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(current != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            count++;</span><br><span class=\"line\">            current = current -&gt; next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> data;</span><br><span class=\"line\">        cin&gt;&gt;data;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *head = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *tail = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin&gt;&gt;data;</span><br><span class=\"line\">            tail-&gt;next = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">            tail = tail-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">getCount</span>(head) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Count-of-camel-case-characters---GFG/",
            "url": "https://samirpaul.in/posts/Count-of-camel-case-characters---GFG/",
            "title": "Count of camel case characters   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Count-of-camel-case-characters\"><a href=\"#Count-of-camel-case-characters\" class=\"headerlink\" title=\"Count of camel case characters\"></a>Count of camel case characters</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a string. Count the number of Camel Case characters in it.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nS = \"ckjkUUYII\"\n<strong>Output:</strong> 5\n<strong>Explanation</strong>: Camel Case characters present:\nU, U, Y, I and I.\n</span>\n</pre>\n\n<p><span style=\"font-size:18px\">Ã¢â‚¬â€¹<strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input</strong>: \nS = \"abcd\"\n<strong>Output:</strong> 0\n<strong>Explanation</strong>: No Camel Case character\npresent.</span>\n</pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>countCamelCase()&nbsp;</strong>which takes the string S as input and returns the count of the camel case characters in the string.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(|S|).<br>\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1&lt;=|S|&lt;=10<sup>5</sup></span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:   </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countCamelCase</span> <span class=\"params\">(string s)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">    \t<span class=\"comment\">//code here.</span></span><br><span class=\"line\">    \t<span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">    \t    <span class=\"keyword\">if</span>(s[i] &gt;= <span class=\"number\">65</span> &amp;&amp; s[i] &lt;= <span class=\"number\">90</span>)</span><br><span class=\"line\">    \t    count++;</span><br><span class=\"line\">    \t&#125;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> t; cin &gt;&gt; t;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tstring s; cin &gt;&gt; s;</span><br><span class=\"line\">\t\tSolution ob;</span><br><span class=\"line\">\t\tcout &lt;&lt;ob.<span class=\"built_in\">countCamelCase</span> (s) &lt;&lt; <span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Contributed By: Pranay Bansal</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Count-total-set-bits---GFG/",
            "url": "https://samirpaul.in/posts/Count-total-set-bits---GFG/",
            "title": "Count total set bits   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Count-total-set-bits\"><a href=\"#Count-total-set-bits\" class=\"headerlink\" title=\"Count total set bits\"></a>Count total set bits</h1><h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">You are given a number<strong> N</strong>. Find the <strong>total count of set bits </strong>for all numbers from 1 to N(both inclusive).</span><br>\n<br>\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input</strong>: N = 4\n<strong>Output</strong>: 5\n<strong>Explanation</strong>:\nFor numbers from 1 to 4.\nFor 1: 0 0 1 = 1 set bits\nFor 2: 0 1 0 = 1 set bits\nFor 3: 0 1 1 = 2 set bits\nFor 4: 1 0 0 = 1 set bits\nTherefore, the total set bits is 5.</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input</strong>: N = 17\n<strong>Output</strong>: 35\n<strong>Explanation</strong>: From numbers 1 to 17(both inclusive), \nthe total number of set bits is 35.</span></pre>\n\n<p><br>\n<strong>Your Task:&nbsp;</strong><span style=\"font-size:18px\">The task is to complete the function <strong>countSetBits</strong>() that takes <strong>n as a parameter </strong>and returns the<strong> count of all bits</strong>.<br>\n<br>\n<strong>Expected Time Complexity:</strong>&nbsp;O(log N).<br>\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span><br>\n<br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong></span><br>\n<span style=\"font-size:18px\">1 â‰¤ N â‰¤ 10<sup>8</sup></span></p>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">//Initial Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// n: input to count the number of set bits</span></span><br><span class=\"line\">    <span class=\"comment\">//Function to return sum of count of set bits in the integers from 1 to n.</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">max2</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>((<span class=\"number\">1</span> &lt;&lt; c) &lt;= n) &#123;</span><br><span class=\"line\">            c++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> c - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">countSetBits</span><span class=\"params\">(<span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Your logic here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> x = <span class=\"built_in\">max2</span>(n);</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = x * ( <span class=\"number\">1</span> &lt;&lt; (x <span class=\"number\">-1</span>)) + (n - (<span class=\"number\">1</span> &lt;&lt; x)) + <span class=\"number\">1</span> + <span class=\"built_in\">countSetBits</span>(n - (<span class=\"number\">1</span>&lt;&lt;x));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Driver code</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t <span class=\"type\">int</span> t;</span><br><span class=\"line\">\t cin&gt;&gt;t;<span class=\"comment\">// input testcases</span></span><br><span class=\"line\">\t <span class=\"keyword\">while</span>(t--) <span class=\"comment\">//while testcases exist</span></span><br><span class=\"line\">\t &#123;</span><br><span class=\"line\">\t       <span class=\"type\">int</span> n;</span><br><span class=\"line\">\t       cin&gt;&gt;n; <span class=\"comment\">//input n</span></span><br><span class=\"line\">\t       Solution ob;</span><br><span class=\"line\">\t       cout &lt;&lt; ob.<span class=\"built_in\">countSetBits</span>(n) &lt;&lt; endl;<span class=\"comment\">// print the answer</span></span><br><span class=\"line\">\t  &#125;</span><br><span class=\"line\">\t  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Cumulative-frequency-of-count-of-each-element-in-an-unsorted-array---GFG/",
            "url": "https://samirpaul.in/posts/Cumulative-frequency-of-count-of-each-element-in-an-unsorted-array---GFG/",
            "title": "Cumulative frequency of count of each element in an unsorted array   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Cumulative-frequency-of-count-of-each-element-in-an-unsorted-array\"><a href=\"#Cumulative-frequency-of-count-of-each-element-in-an-unsorted-array\" class=\"headerlink\" title=\"Cumulative frequency of count of each element in an unsorted array\"></a>Cumulative frequency of count of each element in an unsorted array</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an array of elements. The task is to calculate the cumulative frequency of each element of the array.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input :</strong> Arr[] = {1, 2, 2, 1, 3, 4}\n<strong>Output :</strong> 2 4 5 6\n<strong>Explanation:\n</strong>Here we have an array arr[] = [1, 3, 2, \n                               1, 2, 4]\nOutput :1-&gt;2\n&nbsp; &nbsp; &nbsp; &nbsp; 2-&gt;4\n&nbsp; &nbsp; &nbsp; &nbsp; 3-&gt;5\n&nbsp; &nbsp; &nbsp; &nbsp; 4-&gt;6\nSo, the return array will have [2, 4, 5, 6] \nas an output.\n\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input :</strong> Arr[] = {1, 2, 1, 2, 1, 2}\n<strong>Output :</strong> 3 6\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nThis is a function problem. The input is already taken care of by the driver code. You only need to complete the function<strong> countfreq()</strong> that takes an array <strong>(arr)</strong>, sizeOfArray <strong>(n)</strong> and return the <strong>array of cumulative frequency values</strong>. The driver code takes care of the printing.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(NLOG(N)).<br>\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 â‰¤ N â‰¤ 10<sup>5</sup><br>\n1 â‰¤ A[i] â‰¤ 10<sup>5</sup></span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">countFreq</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span> </span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123; </span><br><span class=\"line\">        <span class=\"comment\">// Complete the function</span></span><br><span class=\"line\">        map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;m;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt;ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            m[a[i]]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it:m)&#123;</span><br><span class=\"line\">            sum+=it.second; </span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(sum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> t;</span><br><span class=\"line\">\tcin&gt;&gt;t;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t    <span class=\"type\">int</span> n,sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">\t    cin&gt;&gt;n;</span><br><span class=\"line\">\t    <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t    cin&gt;&gt;arr[i];</span><br><span class=\"line\">\t    Solution ob;</span><br><span class=\"line\">\t    vector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">\t    v = ob.<span class=\"built_in\">countFreq</span>(arr, n);</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i:v)</span><br><span class=\"line\">\t        cout&lt;&lt;i&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">\t    cout&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Data-Type---GFG/",
            "url": "https://samirpaul.in/posts/Data-Type---GFG/",
            "title": "Data Type   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Data-Type\"><a href=\"#Data-Type\" class=\"headerlink\" title=\"Data Type\"></a>Data Type</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Geek is learning a new programming language. As data type forms the most fundamental part of a language, Geek is learning them with focus and needs your help. Given a data type, help Geek in finding the size of it in byte.</span></p>\n\n<p><span style=\"font-size:18px\">Data Type - <strong>Character, Integer, Long, Float and Double</strong></span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong> Character</span>\n<span style=\"font-size:18px\"><strong>Output:</strong> 1</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong> Integer</span>\n<span style=\"font-size:18px\"><strong>Output:</strong> 4</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\n\n<p><span style=\"font-size:18px\">Complete the function <strong>dataTypeSize()</strong> which takes a string as input and returns&nbsp;the size of the data type represented by the given string in byte unit.</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// Initial Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123;Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">// User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">dataTypeSize</span><span class=\"params\">(string str)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// your code here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (str == <span class=\"string\">&quot;Character&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sizeof</span>(<span class=\"type\">char</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str == <span class=\"string\">&quot;Integer&quot;</span>) </span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sizeof</span>(<span class=\"type\">int</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str == <span class=\"string\">&quot;Long&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sizeof</span>(<span class=\"type\">long</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str == <span class=\"string\">&quot;Float&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sizeof</span>(<span class=\"type\">float</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str == <span class=\"string\">&quot;Double&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">sizeof</span>(<span class=\"type\">double</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        string str;</span><br><span class=\"line\">        cin &gt;&gt; str;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">dataTypeSize</span>(str);</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Delete-Middle-of-Linked-List---GFG/",
            "url": "https://samirpaul.in/posts/Delete-Middle-of-Linked-List---GFG/",
            "title": "Delete Middle of Linked List   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Delete-Middle-of-Linked-List\"><a href=\"#Delete-Middle-of-Linked-List\" class=\"headerlink\" title=\"Delete Middle of Linked List\"></a>Delete Middle of Linked List</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a singly linked list, delete <strong>middle&nbsp;</strong>of the linked list. For example, if given linked list is 1-&gt;2-&gt;<strong>3</strong>-&gt;4-&gt;5 then linked list should be modified to 1-&gt;2-&gt;4-&gt;5.<br>\nIf there are <strong>even</strong> nodes, then there would be <strong>two middle </strong>nodes, we need to delete the second middle element. For example, if given linked list is 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6 then it should be modified to 1-&gt;2-&gt;3-&gt;5-&gt;6.</span><br>\n<span style=\"font-size:18px\">If the input linked list is NULL or has 1 node, then it should return NULL</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5\n<strong>Output: </strong>1 2 4 5</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>LinkedList: 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1\n<strong>Output: </strong>2 4 6 5 1</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nThe task is to complete the function <strong>deleteMid</strong>() which should delete the middle element from the linked list and&nbsp;return the head&nbsp;of the modified linked list.&nbsp;If the linked list is empty then it should return NULL.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br>\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= N &lt;= 1000<br>\n1 &lt;= value &lt;= 1000</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>* next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> x)&#123;</span><br><span class=\"line\">        data = x;</span><br><span class=\"line\">        next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Function to get the middle of the linked list*/</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *<span class=\"built_in\">deleteMid</span>(<span class=\"keyword\">struct</span> Node *head);</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(Node* node)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (node != <span class=\"literal\">NULL</span>) &#123; </span><br><span class=\"line\">\t\tcout &lt;&lt; node-&gt;data &lt;&lt;<span class=\"string\">&quot; &quot;</span>; </span><br><span class=\"line\">\t\tnode = node-&gt;next; </span><br><span class=\"line\">\t&#125;  </span><br><span class=\"line\">\tcout&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">\t<span class=\"type\">int</span> t;</span><br><span class=\"line\">\tcin&gt;&gt;t;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t\tcin&gt;&gt;n;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> data;</span><br><span class=\"line\">\t\tcin&gt;&gt;data;</span><br><span class=\"line\">\t\t<span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *head = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">\t\t<span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *tail = head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n<span class=\"number\">-1</span>; ++i)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\tcin&gt;&gt;data;</span><br><span class=\"line\">\t\t\ttail-&gt;next = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">\t\t\ttail = tail-&gt;next;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\thead = <span class=\"built_in\">deleteMid</span>(head);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printList</span>(head); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Link list Node:</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">struct Node</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int data;</span></span><br><span class=\"line\"><span class=\"comment\">    struct Node* next;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    Node(int x)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        data = x;</span></span><br><span class=\"line\"><span class=\"comment\">        next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Deletes middle of linked list and returns head of the modified list</span></span><br><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">deleteMid</span><span class=\"params\">(Node* head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Your Code Here</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span>(head-&gt;next-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        head-&gt;next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    Node* slow = head;</span><br><span class=\"line\">    Node* fast = head;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">while</span>(fast != <span class=\"literal\">NULL</span> &amp;&amp; fast-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">        fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">        slow = slow-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    slow-&gt;data = slow-&gt;next-&gt;data;</span><br><span class=\"line\">    slow-&gt;next = slow-&gt;next-&gt;next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Delete-a-Node-in-Single-Linked-List---GFG/",
            "url": "https://samirpaul.in/posts/Delete-a-Node-in-Single-Linked-List---GFG/",
            "title": "Delete a Node in Single Linked List   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Delete-a-Node-in-Single-Linked-List\"><a href=\"#Delete-a-Node-in-Single-Linked-List\" class=\"headerlink\" title=\"Delete a Node in Single Linked List\"></a>Delete a Node in Single Linked List</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a singly linked list and an integer x.Delete x<sup>th</sup> node from the&nbsp;singly&nbsp;linked list. </span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span><span style=\"font-size:18px\"><strong> </strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input: </strong>1 -&gt; 3 -&gt; 4 \n&nbsp;     </span> <span style=\"font-size:18px\">x = 3</span>\n<span style=\"font-size:18px\"><strong>Output: </strong>1 -&gt; 3</span>\n<span style=\"font-size:18px\"><strong>Explanation:\n</strong></span><span style=\"font-size:18px\">After deleting the node at 3rd\n</span><span style=\"font-size:18px\">position (1-base indexing), the\n</span><span style=\"font-size:18px\">linked list is as 1 -&gt; 3. </span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input: </strong>1 -&gt; 5 -&gt; 2 -&gt; 9 </span>\n<span style=\"font-size:18px\">x = 2<strong>\nOutput: </strong>1 -&gt; 2 -&gt; 9\n<strong>Explanation: </strong></span>\n<span style=\"font-size:18px\">After deleting the node at 2nd</span>\n<span style=\"font-size:18px\">position (1-based indexing), the</span>\n<span style=\"font-size:18px\">linked list is as 1 -&gt; 2 -&gt; 9.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your task:&nbsp;</strong>Your task is to complete the method <strong>deleteNode()</strong> which takes two arguments: the address of the head of the linked list and an integer x. The function returns the head of the modified linked list.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= T &lt;= 300<br>\n2 &lt;= N &lt;= 100<br>\n1 &lt;= x &lt;= N</span><br>\n&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// C program to find n&#x27;th Node in linked list</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Link list Node */</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>* next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> x)&#123;</span><br><span class=\"line\">        data = x;</span><br><span class=\"line\">        next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">append</span><span class=\"params\">(<span class=\"keyword\">struct</span> Node** head_ref, <span class=\"keyword\">struct</span> Node **tail_ref,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">           <span class=\"type\">int</span> new_data)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>* new_node = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(new_data);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (*head_ref == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">       *head_ref = new_node;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">       (*tail_ref)-&gt;next = new_node;</span><br><span class=\"line\">    *tail_ref = new_node;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Function to get the middle of the linked list*/</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>* <span class=\"built_in\">deleteNode</span>(<span class=\"keyword\">struct</span> Node *head,<span class=\"type\">int</span> );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(Node *head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">while</span> (head != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      cout &lt;&lt; head-&gt;data &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">      head = head-&gt;next;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   cout &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Driver program to test above function*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> T, i, n, l;</span><br><span class=\"line\"></span><br><span class=\"line\">    cin&gt;&gt;T;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *head = <span class=\"literal\">NULL</span>,  *tail = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>;i&lt;=n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin&gt;&gt;l;</span><br><span class=\"line\">            <span class=\"built_in\">append</span>(&amp;head, &amp;tail, l);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> kk;</span><br><span class=\"line\">\tcin&gt;&gt;kk;</span><br><span class=\"line\">    head = <span class=\"built_in\">deleteNode</span>(head,kk);</span><br><span class=\"line\">    <span class=\"built_in\">printList</span>(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Link list Node </span></span><br><span class=\"line\"><span class=\"comment\">struct Node</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int data;</span></span><br><span class=\"line\"><span class=\"comment\">    struct Node* next;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    Node(int x)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        data = x;</span></span><br><span class=\"line\"><span class=\"comment\">        next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*You are required to complete below method*/</span></span><br><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">deleteNode</span><span class=\"params\">(Node *head,<span class=\"type\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Your code here</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> head-&gt;next;</span><br><span class=\"line\">    Node *temp = head;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; x - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        temp = temp-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    temp-&gt;next = temp-&gt;next-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Delete-without-head-pointer---GFG/",
            "url": "https://samirpaul.in/posts/Delete-without-head-pointer---GFG/",
            "title": "Delete without head pointer   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Delete-without-head-pointer\"><a href=\"#Delete-without-head-pointer\" class=\"headerlink\" title=\"Delete without head pointer\"></a>Delete without head pointer</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">You are given a pointer/ reference to the node which is to be deleted from the&nbsp;linked list of <strong>N&nbsp;</strong>nodes. The task is to delete the node. Pointer/ reference to head node is not given.&nbsp;</span><br>\n<span style=\"font-size:18px\"><strong>Note:</strong> No head reference is given to you. It is&nbsp;guaranteed&nbsp;that the node to be deleted is<strong>&nbsp;</strong>not a tail node<strong>&nbsp;</strong>in the linked list.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 2\nvalue[] = {1,2}\nnode = 1\n<strong>Output: </strong>2<strong>\nExplanation: </strong>After deleting 1 from the\nlinked list, we have remaining nodes\nas 2.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 4\nvalue[] = {10,20,4,30}\nnode = 20\n<strong>Output: </strong>10 4 30<strong>\nExplanation: </strong>After deleting 20 from\nthe linked list, we have remaining\nnodes as 10, 4 and 30.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou only need to complete the <strong>function deleteNode </strong>that takes <strong>reference </strong>to the node that needs to be <strong>deleted</strong>. The <strong>printing </strong>is done <strong>automatically </strong>by the<strong> driver code</strong>.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity</strong> : O(1)<br>\n<strong>Expected Auxilliary Space</strong> : O(1)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n2 &lt;= N &lt;= 10<sup>3</sup></span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Link list node */</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> data;</span><br><span class=\"line\">  <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *next;</span><br><span class=\"line\">  <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> x) &#123;</span><br><span class=\"line\">    data = x;</span><br><span class=\"line\">    next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;*head;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Node *<span class=\"title\">findNode</span><span class=\"params\">(Node* head, <span class=\"type\">int</span> search_for)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Node* current = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (current != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (current-&gt;data == search_for)</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        current = current-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> current;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">insert</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n,i,value;</span><br><span class=\"line\">    Node *temp;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;n);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;n; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;value);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i==<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            head=<span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(value);</span><br><span class=\"line\">            temp=head;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            temp-&gt;next= <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(value);</span><br><span class=\"line\">            temp=temp-&gt;next;</span><br><span class=\"line\">            temp-&gt;next=<span class=\"literal\">NULL</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Function to print linked list */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(Node *node)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, node-&gt;data);</span><br><span class=\"line\">        node = node-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">struct Node &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  int data;</span></span><br><span class=\"line\"><span class=\"comment\">  struct Node *next;</span></span><br><span class=\"line\"><span class=\"comment\">  Node(int x) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    data = x;</span></span><br><span class=\"line\"><span class=\"comment\">    next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">  &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;*head;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//Function to delete a node without any reference to head pointer.</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(Node *del)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// Your code here</span></span><br><span class=\"line\">       Node* current = del-&gt;next;</span><br><span class=\"line\">       del-&gt;data = current-&gt;data;</span><br><span class=\"line\">       del-&gt;next = current-&gt;next;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* Drier program to test above function*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* Start with the empty list */</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> t,k,n,value;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">insert</span>();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>,&amp;k);</span><br><span class=\"line\">        Node *del = <span class=\"built_in\">findNode</span>(head, k);</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (del != <span class=\"literal\">NULL</span> &amp;&amp; del-&gt;next != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            ob.<span class=\"built_in\">deleteNode</span>(del);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printList</span>(head);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Display-longest-name---GFG/",
            "url": "https://samirpaul.in/posts/Display-longest-name---GFG/",
            "title": "Display longest name   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Display-longest-name\"><a href=\"#Display-longest-name\" class=\"headerlink\" title=\"Display longest name\"></a>Display longest name</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a list of names, display the longest name.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Example:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\nnames[] = { \"Geek\", \"Geeks\", \"Geeksfor\",\n  \"GeeksforGeek\", \"GeeksforGeeks\" }</span>\n\n<span style=\"font-size:18px\"><strong>Output:</strong>\nGeeksforGeeks</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>longest()</strong>&nbsp;which takes the array <strong>names[]</strong> and its size <strong>N</strong><strong> </strong>as inputs and <strong>returns</strong> the Longest name in the list of names.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br>\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong></span><br>\n<span style=\"font-size:18px\">1 &lt;= N &lt;= 100</span><br>\n<span style=\"font-size:18px\">1 &lt;= |length of name| &lt;= 1000</span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">//Initial Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">string <span class=\"title\">longest</span><span class=\"params\">(string names[], <span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">       string res = names[<span class=\"number\">0</span>];</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span>(names[i].<span class=\"built_in\">size</span>() &gt; res.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">           res = names[i];</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> t;</span><br><span class=\"line\">\tcin&gt;&gt;t;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> n;</span><br><span class=\"line\">\t\tcin&gt;&gt;n;</span><br><span class=\"line\">\t\tstring names[n];</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">\t\t\tcin&gt;&gt;names[i];</span><br><span class=\"line\">\t\tSolution ob;</span><br><span class=\"line\">\t\tcout&lt;&lt; ob.<span class=\"built_in\">longest</span>(names, n) &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Factorial---GFG/",
            "url": "https://samirpaul.in/posts/Factorial---GFG/",
            "title": "Factorial   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Factorial\"><a href=\"#Factorial\" class=\"headerlink\" title=\"Factorial\"></a>Factorial</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">Given a positive integer,&nbsp;<strong>N</strong>. Find the factorial of <strong>N</strong>.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\n<strong>Output:</strong>\n120\n<strong>Explanation:</strong>\n5*4*3*2*1 = 120</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 4\n<strong>Output:</strong>\n24\n<strong>Explanation:</strong>\n4*3*2*1 = 24\n</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function <strong>factorial()</strong>&nbsp;which takes&nbsp;an integer <strong>N</strong>&nbsp;as input parameters&nbsp;and returns an integer, the factorial&nbsp;of N.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br>\n<strong>Expected Space Complexity:</strong> O(1)</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n0 &lt;= N &lt;= 18</span></p>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"type\">int</span> N)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//code here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(N == <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> N*<span class=\"built_in\">factorial</span>(N<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        cin&gt;&gt;N;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">factorial</span>(N) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;  <span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Find-minimum-and-maximum-element-in-an-array---GFG/",
            "url": "https://samirpaul.in/posts/Find-minimum-and-maximum-element-in-an-array---GFG/",
            "title": "Find minimum and maximum element in an array   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Find-minimum-and-maximum-element-in-an-array\"><a href=\"#Find-minimum-and-maximum-element-in-an-array\" class=\"headerlink\" title=\"Find minimum and maximum element in an array\"></a>Find minimum and maximum element in an array</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">Given an array<strong> A</strong> of size <strong>N</strong> of integers. Your task is to find the <strong>minimum and maximum </strong>elements in the&nbsp;array.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 6\nA[] = {3, 2, 1, 56, 10000, 167}\n<strong>Output:</strong>\nmin = 1, max =  10000</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\nA[]  = {1, 345, 234, 21, 56789}\n<strong>Output:</strong>\nmin = 1, max = 56789</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function <strong>getMinMax()</strong>&nbsp;which takes the array <strong>A[]</strong> and its size <strong>N</strong><strong> </strong>as inputs and returns the <strong>minimum and maximum</strong> element of the&nbsp;array.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br>\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= N &lt;= 10<sup>5</sup><br>\n1 &lt;= A<sub>i</sub> &lt;=10<sup>12</sup></span></p>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ll long long</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">pair&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>, <span class=\"type\">long</span> <span class=\"type\">long</span>&gt; <span class=\"title\">getMinMax</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a[], <span class=\"type\">int</span> n)</span> </span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        ll a[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; a[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        pair&lt;ll, ll&gt; pp = <span class=\"built_in\">getMinMax</span>(a, n);</span><br><span class=\"line\"></span><br><span class=\"line\">        cout &lt;&lt; pp.first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; pp.second &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;<span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">pair&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>, <span class=\"type\">long</span> <span class=\"type\">long</span>&gt; <span class=\"title\">getMinMax</span><span class=\"params\">(<span class=\"type\">long</span> <span class=\"type\">long</span> a[], <span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> mine = <span class=\"number\">1000000000001</span>;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">int</span> maxe = <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// max </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] &gt; maxe) &#123;</span><br><span class=\"line\">            maxe = a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// main </span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] &lt; mine) &#123;</span><br><span class=\"line\">            mine = a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    pair&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>, <span class=\"type\">long</span>&gt;ans;</span><br><span class=\"line\">    ans.first = mine;</span><br><span class=\"line\">    ans.second = maxe;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Find-patterns---GFG/",
            "url": "https://samirpaul.in/posts/Find-patterns---GFG/",
            "title": "Find patterns   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Find-patterns\"><a href=\"#Find-patterns\" class=\"headerlink\" title=\"Find patterns\"></a>Find patterns</h1><h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given two&nbsp;strings S and&nbsp;W. Find the number of times W appears as a subsequence of&nbsp;string S where every character of string S can be included in forming at most one subsequence.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1: </strong> </span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong> </span>\n <span style=\"font-size:18px\">S = \"abcdrtbwerrcokokokd\" </span>\n <span style=\"font-size:18px\">W = \"bcd\" </span>\n<span style=\"font-size:18px\"><strong>Output:</strong> </span>\n <span style=\"font-size:18px\">2</span>\n<span style=\"font-size:18px\"><strong>Explanation:</strong> </span>\n<span style=\"font-size:18px\">The two subsequences of string W are</span>\n<span style=\"font-size:18px\">{ S<sub>1</sub></span><span style=\"font-size:18px\"> , S<sub>2</sub></span><span style=\"font-size:18px\"> , S<sub>3</sub></span><span style=\"font-size:18px\"> } and { S<sub>6</sub></span><sub> </sub><span style=\"font-size:18px\">, S<sub>11</sub></span><span style=\"font-size:18px\"> , S</span><sub>18</sub><span style=\"font-size:18px\"> }</span>\n<span style=\"font-size:18px\">(Assuming 0- based indexing).</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Example 2: </span></strong></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong> </span>\n<span style=\"font-size:18px\">S = \"ascfret\" </span>\n<span style=\"font-size:18px\">W = \"qwer\" </span>\n<span style=\"font-size:18px\"><strong>Output:</strong> </span>\n<span style=\"font-size:18px\">0</span>\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\n<span style=\"font-size:18px\">No valid subsequences are possible.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>numberOfSubsequences()</strong>&nbsp;which takes the string S and string W<strong>&nbsp;</strong>as input parameters&nbsp;and returns the number of subsequences of string W in string S.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N<sup>2</sup>)<br>\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N)</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1&lt;=|S|&lt;=1000<br>\n1&lt;=|W|&lt;=|S|</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">//Initial template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;   </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">numberOfSubsequences</span><span class=\"params\">(string S, string W)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here </span></span><br><span class=\"line\">        <span class=\"type\">int</span> i=<span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"type\">int</span> cunt=<span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">       <span class=\"keyword\">while</span>(i&lt;S.<span class=\"built_in\">size</span>())&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k=<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j=i;j&lt;S.<span class=\"built_in\">size</span>();j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(W[k]==S[j])&#123;</span><br><span class=\"line\">                   </span><br><span class=\"line\">                       <span class=\"keyword\">if</span>(k==<span class=\"number\">0</span>)</span><br><span class=\"line\">                       i=j+<span class=\"number\">1</span>;</span><br><span class=\"line\">                       </span><br><span class=\"line\">                        k++;</span><br><span class=\"line\">                       S[j]=<span class=\"string\">&#x27;-1&#x27;</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(k==W.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(k==W.<span class=\"built_in\">size</span>()) cunt++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">     <span class=\"keyword\">return</span> cunt;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string S,W;</span><br><span class=\"line\">        cin &gt;&gt; S &gt;&gt; W;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">numberOfSubsequences</span>(S,W) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Find-the-Frequency---GFG/",
            "url": "https://samirpaul.in/posts/Find-the-Frequency---GFG/",
            "title": "Find the Frequency   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Find-the-Frequency\"><a href=\"#Find-the-Frequency\" class=\"headerlink\" title=\"Find the Frequency\"></a>Find the Frequency</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a vector of <strong>N</strong> positive integers and an integer <strong>X</strong>. The task is to find the <strong>frequency </strong>of X in vector.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1: </strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 5\nvector = {1, 1, 1, 1, 1}\nX = 1\n<strong>Output: </strong>\n5\n<strong>Explanation: </strong>Frequency of 1 is 5.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your&nbsp;Task:</strong><br>\nYour task is to complete the function <strong>findFrequency</strong>() which should count the frequency of X and return it.</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">//Initial Template for C++</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*Function to find frequency of x</span></span><br><span class=\"line\"><span class=\"comment\">* x : element whose frequency is to be found</span></span><br><span class=\"line\"><span class=\"comment\">* v : input vector</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findFrequency</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; v, <span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Your code here</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//Brute force approcah</span></span><br><span class=\"line\">    <span class=\"comment\">// int count = 0;</span></span><br><span class=\"line\">    <span class=\"comment\">// for(int i = 0 ; i &lt; v.size(); i++) &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//     if(v[i] == x)</span></span><br><span class=\"line\">    <span class=\"comment\">//     count++;</span></span><br><span class=\"line\">    <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">    <span class=\"comment\">// return count;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//using map</span></span><br><span class=\"line\">    unordered_map&lt;<span class=\"type\">int</span>, <span class=\"type\">int</span>&gt;mp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; v.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[i] == x)</span><br><span class=\"line\">        mp[x]++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(mp.<span class=\"built_in\">size</span>() != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mp[x];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"type\">int</span> testcase;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tcin &gt;&gt; testcase;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(testcase--)&#123;</span><br><span class=\"line\">\t    <span class=\"type\">int</span> N;</span><br><span class=\"line\">\t    cin &gt;&gt; N;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    <span class=\"comment\">// Declaring vector </span></span><br><span class=\"line\">\t    vector&lt;<span class=\"type\">int</span>&gt; v;</span><br><span class=\"line\">\t        </span><br><span class=\"line\">\t    <span class=\"comment\">// Taking vector element input</span></span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i&lt;N;i++)&#123;</span><br><span class=\"line\">\t        <span class=\"type\">int</span> k;</span><br><span class=\"line\">\t        cin &gt;&gt; k;</span><br><span class=\"line\">\t        v.<span class=\"built_in\">push_back</span>(k);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t    <span class=\"comment\">// element whose frequency to be find</span></span><br><span class=\"line\">\t    <span class=\"type\">int</span> x;</span><br><span class=\"line\">\t    cin &gt;&gt; x;</span><br><span class=\"line\">\t    cout &lt;&lt; <span class=\"built_in\">findFrequency</span>(v, x) &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Find-the-element-that-appears-once---GFG/",
            "url": "https://samirpaul.in/posts/Find-the-element-that-appears-once---GFG/",
            "title": "Find the element that appears once   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Find-the-element-that-appears-once\"><a href=\"#Find-the-element-that-appears-once\" class=\"headerlink\" title=\"Find the element that appears once\"></a>Find the element that appears once</h1><h2 id=\"Medium\"><a href=\"#Medium\" class=\"headerlink\" title=\"Medium\"></a>Medium</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">Given a sorted array <strong>A[]</strong> of <strong>N&nbsp;</strong>positive integers having all the numbers occurring exactly twice, except&nbsp;for one number which will occur only once. Find the number occurring only once.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 5\nA = {1, 1, 2, 5, 5}<strong>\nOutput: </strong>2\n<strong>Explanation: \n</strong>Since 2 occurs once, while\nother numbers occur twice, \n2 is the answer.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 7\nA = {2, 2, 5, 5, 20, 30, 30}\n<strong>Output: </strong>20\n<strong>Explanation:\n</strong>Since 20 occurs once, while\nother numbers occur twice, \n20 is the answer.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>search()&nbsp;</strong>which takes two&nbsp;arguments(array A and integer N) and returns the number occurring only once.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(Log(N)).<br>\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints</strong><br>\n0 &lt; &nbsp; <strong>N</strong>&nbsp; &lt;= 10^6<br>\n0 &lt;= <strong>A[i]</strong> &lt;= 10^9</span></p>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function template for C++</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">search</span><span class=\"params\">(<span class=\"type\">int</span> A[], <span class=\"type\">int</span> N)</span></span>&#123;</span><br><span class=\"line\">\t    <span class=\"comment\">//code</span></span><br><span class=\"line\">\t    <span class=\"type\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N; i++) &#123;</span><br><span class=\"line\">\t        count = count^A[i];</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Driver program</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t,len;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        cin&gt;&gt;len;</span><br><span class=\"line\">        <span class=\"type\">int</span> arr[len];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;len;i++)&#123;</span><br><span class=\"line\">            cin&gt;&gt;arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout&lt;&lt;ob.<span class=\"built_in\">search</span>(arr, len)&lt;&lt;<span class=\"string\">&#x27;\\n&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Find-the-element-that-appears-once-in-sorted-array---GFG/",
            "url": "https://samirpaul.in/posts/Find-the-element-that-appears-once-in-sorted-array---GFG/",
            "title": "Find the element that appears once in sorted array   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Find-the-element-that-appears-once-in-sorted-array\"><a href=\"#Find-the-element-that-appears-once-in-sorted-array\" class=\"headerlink\" title=\"Find the element that appears once in sorted array\"></a>Find the element that appears once in sorted array</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a sorted array arr[] of size N. Find the element that appears only once in the array. All other elements appear exactly twice.&nbsp;</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 11\narr[] = {1, 1, 2, 2, 3, 3, 4, 50, 50, 65, 65}\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> 4 is the only element that \nappears exactly once.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br>\nYou don't need to read input or print anything. Complete the function<strong> findOnce() </strong>which takes sorted array and its size as its input parameter and returns the element that appears only once.&nbsp;</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log N)<br>\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1&nbsp;&lt;= N &lt;= 10<sup>5</sup><br>\n-10<sup>5</sup>&nbsp;&lt;= arr[i] &lt;=&nbsp;10<sup>5</sup></span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// Driver code</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">findOnce</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//code here.</span></span><br><span class=\"line\">        <span class=\"type\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">            res ^= arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"type\">int</span> A[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin&gt;&gt;A[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> res = ob.<span class=\"built_in\">findOnce</span>(A,n);</span><br><span class=\"line\">        cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Find-the-median---GFG/",
            "url": "https://samirpaul.in/posts/Find-the-median---GFG/",
            "title": "Find the median   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Find-the-median\"><a href=\"#Find-the-median\" class=\"headerlink\" title=\"Find the median\"></a>Find the median</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an array arr[] of N integers, calculate the median</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input: </strong>N =<strong> </strong>5\narr[] = 90 100 78 89 67\n<strong>Output: </strong>89</span>\n<span style=\"font-size:18px\"><strong>Explanation: </strong>After sorting the array \nmiddle element is the median</span> \n\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input: </strong>N =<strong> </strong>4\narr[] = 56 67 30 79\n<strong>Output: </strong></span><span style=\"font-size:18px\">61</span>\n<span style=\"font-size:18px\"><strong>Explanation: </strong>In case of even number of \nelements, average of two middle elements \nis the median.</span>\n\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read or print anything. Your task is to complete the function&nbsp;<strong>find_median()</strong>&nbsp;which takes the array as input parameter and returns the floor value of the median.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(n * log(n))<br>\n<strong>Expected Space Complexity:&nbsp;</strong>O(1)</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= Length of Array &lt;= 100<br>\n1 &lt;= Elements of Array &lt;= 100</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find_median</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; v)</span></span></span><br><span class=\"line\"><span class=\"function\">\t\t</span>&#123;</span><br><span class=\"line\">\t\t    <span class=\"comment\">// Code here.</span></span><br><span class=\"line\">\t\t    <span class=\"type\">int</span> n = v.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">\t\t    <span class=\"built_in\">sort</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\t    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t        <span class=\"keyword\">return</span> v[<span class=\"built_in\">floor</span>(n/<span class=\"number\">2</span>)];</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t    <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t        <span class=\"keyword\">return</span> <span class=\"built_in\">floor</span>((v[<span class=\"built_in\">floor</span>(n/<span class=\"number\">2</span>)]+v[<span class=\"built_in\">floor</span>(n/<span class=\"number\">2</span>)<span class=\"number\">-1</span>])/<span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> n; </span><br><span class=\"line\">    \tcin &gt;&gt; n;</span><br><span class=\"line\">    \t<span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">    \t\tcin&gt;&gt;v[i];</span><br><span class=\"line\">    \tSolution ob;</span><br><span class=\"line\">    \t<span class=\"type\">int</span> ans = ob.<span class=\"built_in\">find_median</span>(v);</span><br><span class=\"line\">    \tcout &lt;&lt; ans &lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Find-triplets-with-zero-sum---GFG/",
            "url": "https://samirpaul.in/posts/Find-triplets-with-zero-sum---GFG/",
            "title": "Find triplets with zero sum   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Find-triplets-with-zero-sum\"><a href=\"#Find-triplets-with-zero-sum\" class=\"headerlink\" title=\"Find triplets with zero sum\"></a>Find triplets with zero sum</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size: 18px;\">Given an array <strong>arr[]&nbsp;</strong>of&nbsp;<strong>n</strong> integers. Check whether it contains a triplet that sums up to zero.&nbsp;<br></span></p>\n<p><span style=\"font-size: 18px;\"><strong>Note: </strong>Return 1, if there is at least one triplet following the condition else return 0.</span></p>\n<p><span style=\"font-size: 18px;\"><strong>Example 1:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 5, arr[] = {0, -1, 2, -3, 1}\n<strong>Output</strong>: 1\n<strong>Explanation</strong>: 0, -1 and 1 forms a triplet\nwith sum equal to 0.</span></pre>\n<p><span style=\"font-size: 18px;\"><strong>Example 2:</strong></span></p>\n<pre><span style=\"font-size: 18px;\"><strong>Input</strong>: n = 3, arr[] = {1, 2, 3}\n<strong>Output</strong>: 0\n<strong>Explanation</strong>: No triplet with zero sum exists. </span></pre>\n<p><br><strong><span style=\"font-size: 18px;\">Your Task:</span></strong><br><span style=\"font-size: 18px;\">You don't need to read input or print anything. Your task is to complete the boolean&nbsp;function&nbsp;<strong>findTriplets()</strong>&nbsp;which takes the array arr[] and the size of the array (n)&nbsp;as inputs and print 1 if the function returns true else print 0 if the function returns false.&nbsp;</span><br><br><span style=\"font-size: 18px;\"><strong>Expected Time Complexity:&nbsp;</strong>O(n<sup>2</sup>)</span><br><span style=\"font-size: 18px;\"><strong>Expected Auxiliary Space:&nbsp;</strong>O(1)</span><br><br><span style=\"font-size: 18px;\"><strong>Constrains:</strong><br>1 &lt;= n&nbsp;&lt;= 10<sup>4</sup></span><br><span style=\"font-size: 18px;\">-10<sup>6</sup></span><span style=\"font-size: 18px;\">&nbsp;&lt;= A<sub>i</sub> &lt;= 10<sup>6</sup></span></p></div>\n\n<hr>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Finding-middle-element-in-a-linked-list---GFG/",
            "url": "https://samirpaul.in/posts/Finding-middle-element-in-a-linked-list---GFG/",
            "title": "Finding middle element in a linked list   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Finding-middle-element-in-a-linked-list\"><a href=\"#Finding-middle-element-in-a-linked-list\" class=\"headerlink\" title=\"Finding middle element in a linked list\"></a>Finding middle element in a linked list</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a singly linked list of <strong>N</strong> nodes.<br>\nThe task is to find the <strong>middle</strong>&nbsp;of the linked list. For example, if the&nbsp;linked list is<br>\n<strong>1-&gt; 2-&gt;3-&gt;4-&gt;5</strong>,<strong>&nbsp;</strong>then the middle node of the list is&nbsp;<strong>3</strong>.<br>\nIf there are&nbsp;two middle nodes(in case, when&nbsp;<strong>N</strong>&nbsp;is even),&nbsp;print the <strong>second middle</strong> element.<br>\nFor example, if the linked list given is <strong>1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</strong>, then the middle node of the list is <strong>4</strong>.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:</span></strong><strong><span style=\"font-size:18px\">\n</span></strong><span style=\"font-size:18px\">LinkedList: 1-&gt;2-&gt;3-&gt;4-&gt;5\n<strong>Output: </strong>3 \n<strong>Explanation:</strong> \nMiddle of linked list is 3.</span>\n</pre>\n\n<p><strong><span style=\"font-size:18px\">Example 2:&nbsp;</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:</span></strong><strong><span style=\"font-size:18px\">\n</span></strong><span style=\"font-size:18px\">LinkedList: 2-&gt;4-&gt;6-&gt;7-&gt;5-&gt;1\n<strong>Output: </strong>7 \n<strong>Explanation:</strong> \nMiddle of linked list is 7.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nThe task is to complete the function<span style=\"font-size:18px\"> </span><strong>getMiddle</strong>() which takes a head reference as the only argument and should return the data at the middle node of the linked list.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br>\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= N &lt;= 5000</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">//Initial template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span>* next;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> x)&#123;</span><br><span class=\"line\">        data = x;</span><br><span class=\"line\">        next = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">printList</span><span class=\"params\">(Node* node)</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">while</span> (node != <span class=\"literal\">NULL</span>) &#123; </span><br><span class=\"line\">        cout &lt;&lt; node-&gt;data &lt;&lt;<span class=\"string\">&quot; &quot;</span>; </span><br><span class=\"line\">        node = node-&gt;next; </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">/* Link list Node </span></span><br><span class=\"line\"><span class=\"comment\">struct Node &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int data;</span></span><br><span class=\"line\"><span class=\"comment\">    Node* next;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    Node(int x)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        data = x;</span></span><br><span class=\"line\"><span class=\"comment\">        next = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">&#125;; */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">/* Should return data of middle node. If linked list is empty, then  -1*/</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">getMiddle</span><span class=\"params\">(Node *head)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Your code here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> head-&gt;data;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Node* slow = head;</span><br><span class=\"line\">        Node* fast = head;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(fast != <span class=\"literal\">NULL</span> &amp;&amp; fast-&gt;next != <span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            fast = fast-&gt;next-&gt;next;</span><br><span class=\"line\">            slow = slow-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> slow-&gt;data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//code</span></span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N;</span><br><span class=\"line\">        cin&gt;&gt;N;</span><br><span class=\"line\">        <span class=\"type\">int</span> data;</span><br><span class=\"line\">        cin&gt;&gt;data;</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *head = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">        <span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> *tail = head;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; N<span class=\"number\">-1</span>; ++i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin&gt;&gt;data;</span><br><span class=\"line\">            tail-&gt;next = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(data);</span><br><span class=\"line\">            tail = tail-&gt;next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">getMiddle</span>(head) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/First-and-last-occurrences-of-x---GFG/",
            "url": "https://samirpaul.in/posts/First-and-last-occurrences-of-x---GFG/",
            "title": "First and last occurrences of x   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"First-and-last-occurrences-of-x\"><a href=\"#First-and-last-occurrences-of-x\" class=\"headerlink\" title=\"First and last occurrences of x\"></a>First and last occurrences of x</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a sorted array <strong>arr</strong> containing <strong>n</strong> elements with possibly duplicate elements, the task is to find indexes of first and last occurrences of an element <strong>x</strong> in the given array.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nn=9, x=5\narr[] = { 1, 3, 5, 5, 5, 5, 67, 123, 125 }\n<strong>Output:</strong>  2 5\n<strong>Explanation</strong>: First occurrence of 5 is at index 2 and last\n&nbsp;            occurrence of 5 is at index 5. \n</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>n=9, x=7\narr[] = { 1, 3, 5, 5, 5, 5, 7, 123, 125 }\n<strong>Output:</strong>  6 6 \n\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nSince, this is a function problem. You don't need to take any input, as it is already accomplished by the driver code. You just need to complete the function <strong>find</strong>() that takes <strong>array arr, integer n and integer x</strong> as parameters and returns the required answer.<br>\n<strong>Note:</strong> If the number <strong>x</strong> is not found in the array just return both index as -1.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(logN)<br>\n<strong>Expected Auxiliary Space:</strong> O(1).</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 â‰¤ N â‰¤ 10<sup>7</sup></span></p>\n\n<p>&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> n , <span class=\"type\">int</span> x )</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// code here</span></span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n ; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] ==  x) </span><br><span class=\"line\">        ans.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans.<span class=\"built_in\">size</span>() == <span class=\"number\">0</span>) </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"number\">-1</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;ans[<span class=\"number\">0</span>], ans[ans.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>]&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n,x;</span><br><span class=\"line\">        cin&gt;&gt;n&gt;&gt;x;</span><br><span class=\"line\">        <span class=\"type\">int</span> arr[n],i;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        cin&gt;&gt;arr[i];</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">        ans=<span class=\"built_in\">find</span>(arr,n,x);</span><br><span class=\"line\">        cout&lt;&lt;ans[<span class=\"number\">0</span>]&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;ans[<span class=\"number\">1</span>]&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/GCD-of-two-numbers---GFG/",
            "url": "https://samirpaul.in/posts/GCD-of-two-numbers---GFG/",
            "title": "GCD of two numbers   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"GCD-of-two-numbers\"><a href=\"#GCD-of-two-numbers\" class=\"headerlink\" title=\"GCD of two numbers\"></a>GCD of two numbers</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">Given two positive integers A and B, find GCD of A and B.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong> A = 3, B = 6\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> GCD of 3 and 6 is 3</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong> A = 1, B = 1\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> GCD of 1 and 1 is 1</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Your Task: &nbsp;</strong><br>\nYou don't need to read input or print anything. Complete the function <strong>gcd()</strong> which takes two positive integers as input parameters and returns an integer.</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(log(min(A, B)))<br>\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(1) </span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 â‰¤ A, B â‰¤ 10<sup>9</sup></span></p>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function Template for C++</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"type\">int</span> A, <span class=\"type\">int</span> B)</span> </span></span><br><span class=\"line\"><span class=\"function\">\t</span>&#123; </span><br><span class=\"line\">\t    <span class=\"comment\">// code here</span></span><br><span class=\"line\">\t    <span class=\"keyword\">if</span>(B == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> A;</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> <span class=\"built_in\">gcd</span>(B, A % B);</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   \t<span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> A, B;</span><br><span class=\"line\">        cin &gt;&gt; A &gt;&gt; B;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">       \tcout &lt;&lt;  ob.<span class=\"built_in\">gcd</span>(A, B) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;  <span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Generate-IP-Addresses---GFG/",
            "url": "https://samirpaul.in/posts/Generate-IP-Addresses---GFG/",
            "title": "Generate IP Addresses   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Generate-IP-Addresses\"><a href=\"#Generate-IP-Addresses\" class=\"headerlink\" title=\"Generate IP Addresses\"></a>Generate IP Addresses</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a string <strong>S</strong>&nbsp;containing only digits, Your task is to complete the function <strong>genIp()&nbsp;</strong>which returns a vector containing all possible combinations&nbsp;of <strong>valid</strong> IPv4 IP addresses and takes only a string <strong>S</strong>&nbsp;as its only argument.<br>\n<strong>Note: </strong>Order doesn't matter. A <strong>valid</strong> IP address must be in the form of A.B.C.D, where A, B, C, and D are numbers from 0-255. The numbers cannot be 0 prefixed unless they are 0.<br>\n<br>\n<br>\nFor string 11211 the IP address possible are&nbsp;<br>\n1.1.2.11<br>\n1.1.21.1<br>\n1.12.1.1<br>\n11.2.1.1</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>S = 1111\n<strong>Output: </strong>1.1.1.1\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nS = 55\n<strong>Output:</strong> -1</span></pre>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Your Task:</strong></span></p>\n\n<p><span style=\"font-size:18px\">Your task is to complete the function <strong>genIp()&nbsp;</strong>which returns a vector containing all possible combinations&nbsp;of valid IPv4 IP addresses&nbsp;or <strong>-1 if no such IP address could be generated</strong> through the input string <strong>S</strong>,&nbsp;the only argument to the function.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(N * N * N)<br>\n<strong>Expected Auxiliary Space:</strong>&nbsp;O(N * N * N * N)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1&lt;=N&lt;=16<br>\nhere, N = length of S.<br>\nS only contains digits(i.e. 0-9)</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">/*You are required to complete this method*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isValid</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; sub)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (sub.<span class=\"built_in\">length</span>() &gt; <span class=\"number\">1</span> &amp;&amp; sub[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = <span class=\"built_in\">stoi</span>(sub);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> num &gt;= <span class=\"number\">0</span> &amp;&amp; num &lt;= <span class=\"number\">255</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">backtrack</span><span class=\"params\">(<span class=\"type\">const</span> string&amp; s, vector&lt;string&gt;&amp; current, vector&lt;string&gt;&amp; result)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s.<span class=\"built_in\">empty</span>() &amp;&amp; current.<span class=\"built_in\">size</span>() == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        result.<span class=\"built_in\">push_back</span>(current[<span class=\"number\">0</span>] + <span class=\"string\">&quot;.&quot;</span> + current[<span class=\"number\">1</span>] + <span class=\"string\">&quot;.&quot;</span> + current[<span class=\"number\">2</span>] + <span class=\"string\">&quot;.&quot;</span> + current[<span class=\"number\">3</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (current.<span class=\"built_in\">size</span>() &gt;= <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">min</span>(<span class=\"number\">4</span>, <span class=\"built_in\">static_cast</span>&lt;<span class=\"type\">int</span>&gt;(s.<span class=\"built_in\">length</span>())); i++) &#123;</span><br><span class=\"line\">        string sub = s.<span class=\"built_in\">substr</span>(<span class=\"number\">0</span>, i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">isValid</span>(sub)) &#123;</span><br><span class=\"line\">            current.<span class=\"built_in\">push_back</span>(sub);</span><br><span class=\"line\">            <span class=\"built_in\">backtrack</span>(s.<span class=\"built_in\">substr</span>(i), current, result);</span><br><span class=\"line\">            current.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"function\">vector&lt;string&gt; <span class=\"title\">genIp</span><span class=\"params\">(string &amp;s)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Your code here</span></span><br><span class=\"line\">    vector&lt;string&gt; result;</span><br><span class=\"line\">    vector&lt;string&gt; current;</span><br><span class=\"line\">    <span class=\"built_in\">backtrack</span>(s, current, result);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> T;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        string s;</span><br><span class=\"line\">        cin &gt;&gt; s;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/*generating naively*/</span></span><br><span class=\"line\">        Solution obj;</span><br><span class=\"line\">        vector&lt;string&gt; str = obj.<span class=\"built_in\">genIp</span>(s);</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(str.<span class=\"built_in\">begin</span>(), str.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(str.<span class=\"built_in\">size</span>()==<span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> &amp;u : str) &#123;</span><br><span class=\"line\">                cout &lt;&lt; u &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Inorder-Traversal---GFG/",
            "url": "https://samirpaul.in/posts/Inorder-Traversal---GFG/",
            "title": "Inorder Traversal   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Inorder-Traversal\"><a href=\"#Inorder-Traversal\" class=\"headerlink\" title=\"Inorder Traversal\"></a>Inorder Traversal</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a Binary Tree, find the In-Order Traversal of it.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>&nbsp;&nbsp;&nbsp; &nbsp;  1\n &nbsp;&nbsp;&nbsp;&nbsp;/&nbsp; \\\n &nbsp;&nbsp; 3&nbsp;&nbsp;&nbsp; 2\n<strong>Output: </strong>3 1 2<strong>\n</strong></span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>        10\n &nbsp; &nbsp; /&nbsp;&nbsp;&nbsp;   \\ \n    20&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;  30 \n  /&nbsp;&nbsp;&nbsp; \\&nbsp; &nbsp; /\n 40&nbsp;&nbsp;  60&nbsp; 50\n<strong>Output: </strong>40 20 60 10 50 30<strong>\n\n</strong></span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function</span><span style=\"font-size:18px\"> <strong>inOrder()&nbsp;</strong>that takes root node of the tree as input&nbsp;and returns a list containing the In-Order Traversal of the given Binary Tree.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br>\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= Number of nodes &lt;= 10<sup>5</sup><br>\n0 &lt;= Data of a node &lt;= 10<sup>5</sup></span><br>\n&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tree Node</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    Node* left;</span><br><span class=\"line\">    Node* right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> val) &#123;</span><br><span class=\"line\">        data = val;</span><br><span class=\"line\">        left = right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">/* A binary tree node has data, pointer to left child</span></span><br><span class=\"line\"><span class=\"comment\">   and a pointer to right child</span></span><br><span class=\"line\"><span class=\"comment\">struct Node &#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int data;</span></span><br><span class=\"line\"><span class=\"comment\">    Node *left;</span></span><br><span class=\"line\"><span class=\"comment\">    Node *right;</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">    Node(int val) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">        data = val;</span></span><br><span class=\"line\"><span class=\"comment\">        left = right = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;; */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// recursive approach</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Node *node, vector&lt;<span class=\"type\">int</span>&gt; &amp;inorder)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(node == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(node-&gt;left, inorder);</span><br><span class=\"line\">        inorder.<span class=\"built_in\">push_back</span>(node-&gt;data);</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(node-&gt;right, inorder);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">// Function to return a list containing the inorder traversal of the tree.</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">inOrder</span><span class=\"params\">(Node* root)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Your code here</span></span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt;inorder;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(root, inorder);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inorder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Function to Build Tree</span></span><br><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">buildTree</span><span class=\"params\">(string str)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Corner Case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str.<span class=\"built_in\">length</span>() == <span class=\"number\">0</span> || str[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;N&#x27;</span>) <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creating vector of strings from input</span></span><br><span class=\"line\">    <span class=\"comment\">// string after spliting by space</span></span><br><span class=\"line\">    vector&lt;string&gt; ip;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">istringstream <span class=\"title\">iss</span><span class=\"params\">(str)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (string str; iss &gt;&gt; str;) ip.<span class=\"built_in\">push_back</span>(str);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create the root of the tree</span></span><br><span class=\"line\">    Node* root = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"built_in\">stoi</span>(ip[<span class=\"number\">0</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Push the root to the queue</span></span><br><span class=\"line\">    queue&lt;Node*&gt; queue;</span><br><span class=\"line\">    queue.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Starting from the second element</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (!queue.<span class=\"built_in\">empty</span>() &amp;&amp; i &lt; ip.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Get and remove the front of the queue</span></span><br><span class=\"line\">        Node* currNode = queue.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        queue.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Get the current node&#x27;s value from the string</span></span><br><span class=\"line\">        string currVal = ip[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If the left child is not null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currVal != <span class=\"string\">&quot;N&quot;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create the left child for the current node</span></span><br><span class=\"line\">            currNode-&gt;left = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"built_in\">stoi</span>(currVal));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Push it to the queue</span></span><br><span class=\"line\">            queue.<span class=\"built_in\">push</span>(currNode-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// For the right child</span></span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i &gt;= ip.<span class=\"built_in\">size</span>()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        currVal = ip[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If the right child is not null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currVal != <span class=\"string\">&quot;N&quot;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create the right child for the current node</span></span><br><span class=\"line\">            currNode-&gt;right = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(<span class=\"built_in\">stoi</span>(currVal));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Push it to the queue</span></span><br><span class=\"line\">            queue.<span class=\"built_in\">push</span>(currNode-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    string tc;</span><br><span class=\"line\">    <span class=\"built_in\">getline</span>(cin, tc);</span><br><span class=\"line\">    t = <span class=\"built_in\">stoi</span>(tc);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--) &#123;</span><br><span class=\"line\">        string s;</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin, s);</span><br><span class=\"line\">        Node* root = <span class=\"built_in\">buildTree</span>(s);</span><br><span class=\"line\"></span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; res = ob.<span class=\"built_in\">inOrder</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; res.<span class=\"built_in\">size</span>(); i++) cout &lt;&lt; res[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/K-largest-elements---GFG/",
            "url": "https://samirpaul.in/posts/K-largest-elements---GFG/",
            "title": "K largest elements   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"K-largest-elements\"><a href=\"#K-largest-elements\" class=\"headerlink\" title=\"K largest elements\"></a>K largest elements</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problem-statement\">\n                <p></p><p><span style=\"font-size:18px\">Given an array of N positive integers, print k largest elements from the array.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 5, k = 2\narr[] = {12,5,787,1,23}\n<strong>Output: </strong>787 23<strong>\nExplanation: </strong>First largest element in\nthe array is 787 and the second largest\nis 23.</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>N = 7, k = 3\narr[] = {1,23,12,9,30,2,50}\n<strong>Output: </strong>50 30 23<strong>\nExplanation: </strong>Three Largest element in\nthe array are 50, 30 and 23.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nComplete the function <strong>kLargest()</strong> that takes the array, N and K as input parameters and returns a list of k largest element in descending order.&nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N log K)<br>\n<strong>Expected Auxiliary Space:</strong> O(K)</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 â‰¤ N â‰¤ 10<sup>4</sup><br>\nK â‰¤ N<br>\n1 â‰¤ array[i] â‰¤ 10<sup>5</sup></span></p>\n <p></p>\n            </div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"comment\">//Function to return k largest elements from an array.</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">kLargest</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> n, <span class=\"type\">int</span> k)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt;ans;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(arr, arr + n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= n - k; i--) &#123;</span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n;i++)</span><br><span class=\"line\">            cin&gt;&gt;arr[i];</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; result = ob.<span class=\"built_in\">kLargest</span>(arr, n, k);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; result.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">            cout&lt;&lt;result[i]&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  <span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Leaders-in-an-array---GFG/",
            "url": "https://samirpaul.in/posts/Leaders-in-an-array---GFG/",
            "title": "Leaders in an array   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Leaders-in-an-array\"><a href=\"#Leaders-in-an-array\" class=\"headerlink\" title=\"Leaders in an array\"></a>Leaders in an array</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an array A of positive integers. Your task is to find the leaders in the array.&nbsp;An element of array is leader if it is greater than or equal to all the elements to its right side. The rightmost element is always a leader.&nbsp;</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>n = 6\nA[] = {16,17,4,3,5,2}\n<strong>Output: </strong>17 5 2<strong>\nExplanation: </strong>The first leader is 17 \nas it is greater than all the elements\nto its right.&nbsp; Similarly, the next \nleader is 5. The right most element \nis always a leader so it is also \nincluded.</span>\n</pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>n = 5\nA[] = {1,2,3,4,0}\n<strong>Output: </strong>4 0\n</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou don't need to read input or print anything.&nbsp;The task is to complete the function <strong>leader</strong>() which takes array A and n&nbsp;as input parameters and&nbsp;returns an array of leaders in order of their appearance.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong></span><span style=\"font-size:18px\">&nbsp;O(n)</span><br>\n<span style=\"font-size:18px\"><strong>Expected Auxiliary Space:</strong>&nbsp;O(n)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= n&nbsp;&lt;= 10<sup>7</sup><br>\n0 &lt;= A<sub>i</sub> &lt;= 10<sup>7</sup></span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">// C++ program to remove recurring digits from</span></span><br><span class=\"line\"><span class=\"comment\">// a given number</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//Function to find the leaders in the array.</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">leaders</span><span class=\"params\">(<span class=\"type\">int</span> a[], <span class=\"type\">int</span> n)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Code here</span></span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt;ans;</span><br><span class=\"line\">        <span class=\"type\">int</span> res = a[n<span class=\"number\">-1</span>],i;</span><br><span class=\"line\">        ans.<span class=\"built_in\">push_back</span>(res);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n<span class=\"number\">-2</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            res = <span class=\"built_in\">max</span>(res, a[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(res == a[i])</span><br><span class=\"line\">            ans.<span class=\"built_in\">push_back</span>(a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(ans.<span class=\"built_in\">begin</span>(), ans.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"type\">long</span> <span class=\"type\">long</span> t;</span><br><span class=\"line\">   cin &gt;&gt; t;<span class=\"comment\">//testcases</span></span><br><span class=\"line\">   <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">       <span class=\"type\">long</span> <span class=\"type\">long</span> n;</span><br><span class=\"line\">       cin &gt;&gt; n;<span class=\"comment\">//total size of array</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> a[n];</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//inserting elements in the array</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i =<span class=\"number\">0</span>;i&lt;n;i++)&#123;</span><br><span class=\"line\">            cin &gt;&gt; a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Solution obj;</span><br><span class=\"line\">        <span class=\"comment\">//calling leaders() function</span></span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; v = obj.<span class=\"built_in\">leaders</span>(a, n);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//printing elements of the vector</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it = v.<span class=\"built_in\">begin</span>();it!=v.<span class=\"built_in\">end</span>();it++)&#123;</span><br><span class=\"line\">            cout &lt;&lt; *it &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Largest-Element-in-Array---GFG/",
            "url": "https://samirpaul.in/posts/Largest-Element-in-Array---GFG/",
            "title": "Largest Element in Array   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Largest-Element-in-Array\"><a href=\"#Largest-Element-in-Array\" class=\"headerlink\" title=\"Largest Element in Array\"></a>Largest Element in Array</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an array <strong>A[] </strong>of size <strong>n</strong>. The task is to find the largest element in it.</span><br>\n&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nn = 5\nA[] = {1, 8, 7, 56, 90}\n<strong>Output:</strong>\n90\n<strong>Explanation:</strong>\nThe largest element of given array is 90.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nn = 7\nA[] = {1, 2, 0, 3, 2, 4, 5}\n<strong>Output:</strong>\n5\n<strong>Explanation:</strong>\nThe largest element of given array is 5.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function <strong>largest()</strong>&nbsp;which takes the array <strong>A[]</strong> and its size <strong>n&nbsp;</strong>as inputs and returns the maximum element in the array.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br>\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 &lt;= n&lt;= 10<sup>3</sup><br>\n0 &lt;= A[i] &lt;= 10<sup>3</sup><br>\nArray may contain duplicate elements.&nbsp;</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">//Initial Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">largest</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt; &amp;arr, <span class=\"type\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(arr.<span class=\"built_in\">begin</span>(), arr.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> arr[n<span class=\"number\">-1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt;<span class=\"built_in\">arr</span>(n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin &gt;&gt; arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">largest</span>(arr, n) &lt;&lt; <span class=\"string\">&quot;\\n&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Left-View-of-Binary-Tree---GFG/",
            "url": "https://samirpaul.in/posts/Left-View-of-Binary-Tree---GFG/",
            "title": "Left View of Binary Tree   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Left-View-of-Binary-Tree\"><a href=\"#Left-View-of-Binary-Tree\" class=\"headerlink\" title=\"Left View of Binary Tree\"></a>Left View of Binary Tree</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a Binary Tree, print Left view of it. Left view of a Binary Tree is set of nodes visible when tree is visited from Left side. The task is to complete the function <strong>leftView()</strong>, which accepts root of the tree as argument.</span></p>\n\n<p><span style=\"font-size:18px\">Left view of following tree is 1 2 4 8.</span></p>\n\n<p><span style=\"font-size:18px\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<br>\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /&nbsp;&nbsp;&nbsp;&nbsp; \\<br>\n&nbsp;&nbsp;&nbsp;&nbsp; 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3<br>\n&nbsp;&nbsp; /&nbsp;&nbsp; &nbsp; \\ &nbsp;&nbsp; /&nbsp;&nbsp;&nbsp; \\<br>\n&nbsp; 4&nbsp;&nbsp;&nbsp;&nbsp; 5&nbsp;&nbsp; 6&nbsp;&nbsp;&nbsp; 7<br>\n&nbsp;&nbsp; \\<br>\n&nbsp;&nbsp;&nbsp;&nbsp; 8&nbsp; &nbsp;</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>&nbsp;  1\n&nbsp;/&nbsp; \\\n3&nbsp; &nbsp; 2\n<strong>Output: </strong>1 3<strong>\n</strong></span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong><img alt=\"\" src=\"https://media.geeksforgeeks.org/wp-content/cdn-uploads/20190221103723/leftview.jpg\" style=\"height:272px; width:285px\">\n<strong>Output: </strong>10 20 40\n</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nYou just have to <strong>complete </strong>the function <strong>leftView() </strong>that returns an array containing the nodes that are in&nbsp;the left view. The newline is automatically appended by the driver code.</span><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:&nbsp;</strong>O(N).<br>\n<strong>Expected Auxiliary Space:&nbsp;</strong>O(N).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n0 &lt;= Number of nodes &lt;= 100<br>\n1 &lt;= Data of a node &lt;= 1000</span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Tree Node</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> data;</span><br><span class=\"line\">    Node* left;</span><br><span class=\"line\">    Node* right;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">leftView</span><span class=\"params\">(<span class=\"keyword\">struct</span> Node *root)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Utility function to create a new Tree Node</span></span><br><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">newNode</span><span class=\"params\">(<span class=\"type\">int</span> val)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    Node* temp = <span class=\"keyword\">new</span> Node;</span><br><span class=\"line\">    temp-&gt;data = val;</span><br><span class=\"line\">    temp-&gt;left = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    temp-&gt;right = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Function to Build Tree</span></span><br><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">buildTree</span><span class=\"params\">(string str)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// Corner Case</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(str.<span class=\"built_in\">length</span>() == <span class=\"number\">0</span> || str[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;N&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Creating vector of strings from input</span></span><br><span class=\"line\">    <span class=\"comment\">// string after spliting by space</span></span><br><span class=\"line\">    vector&lt;string&gt; ip;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\">istringstream <span class=\"title\">iss</span><span class=\"params\">(str)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(string str; iss &gt;&gt; str; )</span><br><span class=\"line\">        ip.<span class=\"built_in\">push_back</span>(str);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for(string i:ip)</span></span><br><span class=\"line\">    <span class=\"comment\">//     cout&lt;&lt;i&lt;&lt;&quot; &quot;;</span></span><br><span class=\"line\">    <span class=\"comment\">// cout&lt;&lt;endl;</span></span><br><span class=\"line\">    <span class=\"comment\">// Create the root of the tree</span></span><br><span class=\"line\">    Node* root = <span class=\"built_in\">newNode</span>(<span class=\"built_in\">stoi</span>(ip[<span class=\"number\">0</span>]));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Push the root to the queue</span></span><br><span class=\"line\">    queue&lt;Node*&gt; queue;</span><br><span class=\"line\">    queue.<span class=\"built_in\">push</span>(root);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Starting from the second element</span></span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!queue.<span class=\"built_in\">empty</span>() &amp;&amp; i &lt; ip.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Get and remove the front of the queue</span></span><br><span class=\"line\">        Node* currNode = queue.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">        queue.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Get the current node&#x27;s value from the string</span></span><br><span class=\"line\">        string currVal = ip[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If the left child is not null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currVal != <span class=\"string\">&quot;N&quot;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create the left child for the current node</span></span><br><span class=\"line\">            currNode-&gt;left = <span class=\"built_in\">newNode</span>(<span class=\"built_in\">stoi</span>(currVal));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Push it to the queue</span></span><br><span class=\"line\">            queue.<span class=\"built_in\">push</span>(currNode-&gt;left);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// For the right child</span></span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &gt;= ip.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        currVal = ip[i];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// If the right child is not null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(currVal != <span class=\"string\">&quot;N&quot;</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Create the right child for the current node</span></span><br><span class=\"line\">            currNode-&gt;right = <span class=\"built_in\">newNode</span>(<span class=\"built_in\">stoi</span>(currVal));</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// Push it to the queue</span></span><br><span class=\"line\">            queue.<span class=\"built_in\">push</span>(currNode-&gt;right);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> root;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d &quot;</span>,&amp;t);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        string s;</span><br><span class=\"line\">        <span class=\"built_in\">getline</span>(cin,s);</span><br><span class=\"line\">        Node* root = <span class=\"built_in\">buildTree</span>(s);</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; vec = <span class=\"built_in\">leftView</span>(root);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> x : vec)</span><br><span class=\"line\">        cout&lt;&lt;x&lt;&lt;<span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* A binary tree node</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">struct Node</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">    int data;</span></span><br><span class=\"line\"><span class=\"comment\">    struct Node* left;</span></span><br><span class=\"line\"><span class=\"comment\">    struct Node* right;</span></span><br><span class=\"line\"><span class=\"comment\">    </span></span><br><span class=\"line\"><span class=\"comment\">    Node(int x)&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        data = x;</span></span><br><span class=\"line\"><span class=\"comment\">        left = right = NULL;</span></span><br><span class=\"line\"><span class=\"comment\">    &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(Node *node, <span class=\"type\">int</span> level, vector&lt;<span class=\"type\">int</span>&gt; &amp;ans)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">if</span>(node == <span class=\"literal\">NULL</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">     </span><br><span class=\"line\">     <span class=\"keyword\">if</span>(ans.<span class=\"built_in\">size</span>() == level) ans.<span class=\"built_in\">push_back</span>(node-&gt;data);</span><br><span class=\"line\">     <span class=\"built_in\">dfs</span>(node-&gt;left, level + <span class=\"number\">1</span>, ans);</span><br><span class=\"line\">     <span class=\"built_in\">dfs</span>(node-&gt;right, level + <span class=\"number\">1</span>, ans);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Function to return a list containing elements of left view of the binary tree.</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">leftView</span><span class=\"params\">(Node *root)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   <span class=\"comment\">// Your code here</span></span><br><span class=\"line\">   vector&lt;<span class=\"type\">int</span>&gt;ans;</span><br><span class=\"line\">   <span class=\"built_in\">dfs</span>(root, <span class=\"number\">0</span>, ans);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Left-most-and-right-most-index---GFG/",
            "url": "https://samirpaul.in/posts/Left-most-and-right-most-index---GFG/",
            "title": "Left most and right most index   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Left-most-and-right-most-index\"><a href=\"#Left-most-and-right-most-index\" class=\"headerlink\" title=\"Left most and right most index\"></a>Left most and right most index</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given a sorted array with possibly duplicate elements. The task is to find indexes of first and last occurrences of an element <strong>X</strong> in the given array.</span></p>\n\n<p><strong><span style=\"font-size:18px\">Note: </span></strong><span style=\"font-size:18px\">If the element is not present in the array <strong>return {-1,-1} as pair</strong>.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 9\nv[] = {1, 3, 5, 5, 5, 5, 67, 123, 125}\nX = 5</span>\n<span style=\"font-size:18px\"><strong>Output:</strong>\n2 5</span>\n<span style=\"font-size:18px\"><strong>Explanation:\n</strong>Index of first occurrence of 5 is 2\nand index of last occurrence of 5 is 5.</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:</strong>\nN = 9\nv[] = {1, 3, 5, 5, 5, 5, 7, 123, 125}\nX = 7\n<strong>Output:</strong>\n6 6</span></pre>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:&nbsp;&nbsp;</strong><br>\nYou don't need to read input or print anything. Your task is to complete the function&nbsp;<strong>indexes()</strong>&nbsp;which takes the array <strong>v[]</strong><strong>&nbsp;</strong>and an integer <strong>X&nbsp;</strong>as inputs and returns &nbsp;the first and last occurrence of the element <strong>X</strong>. If the element is not present in the array <strong>return {-1,-1} as pair</strong>.<br>\n<br>\nCan you solve the problem in expected time complexity?</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(Log(N))<br>\n<strong>Expected Auxiliary Space:</strong> O(1)</span></p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1 â‰¤ N â‰¤ 10<sup>5</sup><br>\n1 â‰¤ v[i], X â‰¤ 10<sup>18</sup></span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\">pair&lt;<span class=\"type\">long</span>,<span class=\"type\">long</span>&gt; <span class=\"title\">indexes</span><span class=\"params\">(vector&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt; v, <span class=\"type\">long</span> <span class=\"type\">long</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here</span></span><br><span class=\"line\">        <span class=\"type\">int</span> n = v.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> first = <span class=\"built_in\">lower_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), x) - v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> last = <span class=\"built_in\">upper_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), x) - v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(first &lt; n &amp;&amp; v[first] == x) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>&#123;first, last - <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;<span class=\"number\">-1</span>, <span class=\"number\">-1</span>&#125;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">long</span> <span class=\"type\">long</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> n, k;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">long</span> <span class=\"type\">long</span>&gt;v;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">long</span> <span class=\"type\">long</span> i=<span class=\"number\">0</span>;i&lt;n;i++)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            cin&gt;&gt;k;</span><br><span class=\"line\">            v.<span class=\"built_in\">push_back</span>(k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"type\">long</span> x;</span><br><span class=\"line\">        cin&gt;&gt;x;</span><br><span class=\"line\">        Solution obj;</span><br><span class=\"line\">        pair&lt;<span class=\"type\">long</span>,<span class=\"type\">long</span>&gt; pair = obj.<span class=\"built_in\">indexes</span>(v, x);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pair.first==pair.second <span class=\"keyword\">and</span> pair.first==<span class=\"number\">-1</span>)</span><br><span class=\"line\">        cout&lt;&lt; <span class=\"number\">-1</span> &lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">        cout&lt;&lt;pair.first&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;pair.second&lt;&lt;endl;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Max-Sum-Subarray-of-size-K---GFG/",
            "url": "https://samirpaul.in/posts/Max-Sum-Subarray-of-size-K---GFG/",
            "title": "Max Sum Subarray of size K   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Max-Sum-Subarray-of-size-K\"><a href=\"#Max-Sum-Subarray-of-size-K\" class=\"headerlink\" title=\"Max Sum Subarray of size K\"></a>Max Sum Subarray of size K</h1><h2 id=\"Easy\"><a href=\"#Easy\" class=\"headerlink\" title=\"Easy\"></a>Easy</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given an array of integers Arr of size <strong>N</strong> and a number <strong>K</strong>. Return&nbsp;the maximum sum of a subarray of size K.</span></p>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Example 1:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:</span></strong>\n<span style=\"font-size:18px\">N = 4, K = 2\nArr = [100, 200, 300, 400]</span>\n<strong><span style=\"font-size:18px\">Output:</span></strong>\n<span style=\"font-size:18px\">700</span>\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\n<span style=\"font-size:18px\">Arr<sub>3 </sub> + Arr<sub>4</sub> =700,</span>\n<span style=\"font-size:18px\">which is maximum.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Example 2:</span></strong></p>\n\n<pre><strong><span style=\"font-size:18px\">Input:</span></strong>\n<span style=\"font-size:18px\">N = 4, K = 4</span>\n<span style=\"font-size:18px\">Arr = [100, 200, 300, 400]</span>\n<strong><span style=\"font-size:18px\">Output:</span></strong>\n<span style=\"font-size:18px\">1000</span>\n<strong><span style=\"font-size:18px\">Explanation:</span></strong>\n<span style=\"font-size:18px\">Arr<sub>1</sub> + Arr<sub>2</sub> + Arr<sub>3 </sub> \n+ Arr<sub>4</sub> =1000,</span>\n<span style=\"font-size:18px\">which is maximum.</span></pre>\n\n<p>&nbsp;</p>\n\n<p><strong><span style=\"font-size:18px\">Your Task:</span></strong></p>\n\n<p><span style=\"font-size:18px\">You don't need to read input or print anything. Your task is to complete the function maximumSumSubarray() which takes the integer k, vector Arr with size N,&nbsp;containing the elements of the array and returns the&nbsp;maximum sum of a subarray of size K.</span></p>\n\n<p>&nbsp;</p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong> O(N)<br>\n<strong>Expected Auxiliary Space:</strong> O(1)</span><br>\n&nbsp;</p>\n\n<p><br>\n<span style=\"font-size:18px\"><strong>Constraints:</strong><br>\n1&lt;=N&lt;=10<sup>6</sup></span><br>\n<span style=\"font-size:18px\">1&lt;=K&lt;=N</span><br>\n&nbsp;</p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;bits/stdc++.h&gt;</span> </span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;   </span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">long</span> <span class=\"title\">maximumSumSubarray</span><span class=\"params\">(<span class=\"type\">int</span> K, vector&lt;<span class=\"type\">int</span>&gt; &amp;Arr , <span class=\"type\">int</span> N)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// code here </span></span><br><span class=\"line\">        <span class=\"type\">long</span> max_sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">long</span> curr_sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; K; i++) &#123;</span><br><span class=\"line\">            curr_sum += Arr[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        max_sum = curr_sum;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = K; i &lt; N; i++) &#123;</span><br><span class=\"line\">            curr_sum += Arr[i] - Arr[i - K];</span><br><span class=\"line\">            max_sum = <span class=\"built_in\">max</span>(max_sum, curr_sum);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> max_sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123; </span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> N,K;</span><br><span class=\"line\">        cin &gt;&gt; N &gt;&gt; K;;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt;Arr;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;N;++i)&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> x;</span><br><span class=\"line\">            cin&gt;&gt;x;</span><br><span class=\"line\">            Arr.<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout &lt;&lt; ob.<span class=\"built_in\">maximumSumSubarray</span>(K,Arr,N) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        },
        {
            "id": "https://samirpaul.in/posts/Median-of-2-Sorted-Arrays-of-Different-Sizes---GFG/",
            "url": "https://samirpaul.in/posts/Median-of-2-Sorted-Arrays-of-Different-Sizes---GFG/",
            "title": "Median of 2 Sorted Arrays of Different Sizes   GFG",
            "date_published": "2020-08-31T04:24:52.000Z",
            "content_html": "<h1 id=\"Median-of-2-Sorted-Arrays-of-Different-Sizes\"><a href=\"#Median-of-2-Sorted-Arrays-of-Different-Sizes\" class=\"headerlink\" title=\"Median of 2 Sorted Arrays of Different Sizes\"></a>Median of 2 Sorted Arrays of Different Sizes</h1><h2 id=\"Hard\"><a href=\"#Hard\" class=\"headerlink\" title=\"Hard\"></a>Hard</h2><div class=\"problems_problem_content__Xm_eO\"><p><span style=\"font-size:18px\">Given two sorted arrays array1 and array2 of size <strong>m</strong> and<strong> n</strong>&nbsp;respectively. Find the median of the two sorted arrays.</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Example 1:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>m = 3, n = 4\narray1[] = {1,5,9}\narray2[] = {2,3,6,7}\n<strong>Output: </strong>5<strong>\nExplanation: </strong>The middle&nbsp;element for\n{1,2,3,5,6,7,9} is 5</span>\n</pre>\n\n<p><span style=\"font-size:18px\"><strong>Example 2:</strong></span></p>\n\n<pre><span style=\"font-size:18px\"><strong>Input:\n</strong>m = 2, n = 4\narray1[] = {4,6}\narray2[] = {1,2,3,5}\n<strong>Output: </strong>3.5</span></pre>\n\n<p><span style=\"font-size:18px\"><strong>Your Task:</strong><br>\nThe task is to complete the function <strong>MedianOfArrays()</strong> that takes array1 and array2 as input and returns their median.&nbsp;<br>\n<br>\nCan you solve the problem in expected time complexity?</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Expected Time Complexity:</strong>&nbsp;O(min(log n, log m)).<br>\n<strong>Expected Auxiliary Space:</strong>&nbsp;O((n+m)/2).</span></p>\n\n<p><span style=\"font-size:18px\"><strong>Constraints:&nbsp;</strong><br>\n0 â‰¤ m,n â‰¤ 10<sup>4</sup><br>\n1 â‰¤ array1[i], array2[i] â‰¤ 10<sup>5</sup></span></p>\n</div>\n\n<hr>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts</span></span><br><span class=\"line\"><span class=\"comment\">//Initial Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">MedianOfArrays</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; array1, vector&lt;<span class=\"type\">int</span>&gt;&amp; array2)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br><span class=\"line\"><span class=\"comment\">//User function Template for C++</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">double</span> <span class=\"title\">MedianOfArrays</span><span class=\"params\">(vector&lt;<span class=\"type\">int</span>&gt;&amp; array1, vector&lt;<span class=\"type\">int</span>&gt;&amp; array2)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Your code goes here</span></span><br><span class=\"line\">        <span class=\"comment\">//Using Binary Search</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(array2.<span class=\"built_in\">size</span>() &lt; array1.<span class=\"built_in\">size</span>()) <span class=\"keyword\">return</span> <span class=\"built_in\">MedianOfArrays</span>(array2, array1);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> n1 = array1.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> n2 = array2.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">int</span> low = <span class=\"number\">0</span>, high = n1;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(low &lt;= high) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> cut1 = (low+high) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> cut2 = (n1+n2+<span class=\"number\">1</span>)/<span class=\"number\">2</span> - cut1;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> left1 = cut1 == <span class=\"number\">0</span> ? INT_MIN : array1[cut1 - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"type\">int</span> left2 = cut2 == <span class=\"number\">0</span> ? INT_MIN : array2[cut2 - <span class=\"number\">1</span>];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"type\">int</span> right1 = cut1 == n1 ? INT_MAX : array1[cut1];</span><br><span class=\"line\">            <span class=\"type\">int</span> right2 = cut2 == n2 ? INT_MAX : array2[cut2];</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">if</span>(left1 &lt;= right2 &amp;&amp; left2 &lt;= right1) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>((n1 + n2) % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> (<span class=\"built_in\">max</span>(left1, left2) + <span class=\"built_in\">min</span>(right1, right2)) / <span class=\"number\">2.0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> </span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(left1, left2);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(left1 &gt; right2) &#123;</span><br><span class=\"line\">                high = cut1 - <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                low = cut1 + <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0.0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//&#123; Driver Code Starts.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin&gt;&gt;t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m,n;</span><br><span class=\"line\">        cin&gt;&gt;m;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">array1</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)&#123;</span><br><span class=\"line\">            cin&gt;&gt;array1[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cin&gt;&gt;n;</span><br><span class=\"line\">        <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">array2</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)&#123;</span><br><span class=\"line\">            cin&gt;&gt;array2[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Solution ob;</span><br><span class=\"line\">        cout&lt;&lt;ob.<span class=\"built_in\">MedianOfArrays</span>(array1, array2)&lt;&lt;endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// &#125; Driver Code Ends</span></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "geeksforgeeks"
            ]
        }
    ]
}