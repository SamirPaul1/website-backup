<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
	
	<title type="text" xml:lang="en">Samir Paul Feed</title>
	
    	<subtitle>Technical blog made by developer for developers. Computer Science, Data Structures Algorithms, Networking, Artificial Intelligence and Coding Interview Prep.</subtitle>
  	
	<link type="application/atom+xml" href="https://samir.pages.dev/feed/" rel="self"/>
 	<link type="text" href="https://samir.pages.dev" rel="alternate" xml:lang="en"/>
	<updated>2023-11-26T15:58:20+05:30</updated>
	<author>
		<name>Samir Paul</name>
	</author>
	<rights> © 2023 Samir Paul </rights>	
	
	<item>
		<title>Operating System Notes For Placement</title>
		<link href="https://samir.pages.dev/posts/operating-system-notes-for-placement/"/>
		<updated>2023-06-11T00:00:00+05:30</updated>
		<description type="html">&lt;h1 id=&quot;operating-systems-overview&quot;&gt;Operating Systems Overview&lt;/h1&gt;

&lt;hr /&gt;

&lt;h3&gt;&lt;a href=&quot;https://github.com/github/docs/files/12329707/OS-All-Notes.pdf&quot; target=&quot;_blank&quot;&gt;Download PDF Notes➥&lt;/a&gt;&lt;/h3&gt;
&lt;iframe loading=&quot;lazy&quot; src=&quot;https://scdn.web.app/books-pdfs/1-Placements-Notes/OS-All-Notes.pdf&quot; width=&quot;100%&quot; height=&quot;600&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;&lt;strong&gt;Operating Systems&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Direct operational resources [CPU, memory, devices]&lt;/li&gt;
  &lt;li&gt;Enforces working policies [Resource usage, access]&lt;/li&gt;
  &lt;li&gt;Mitigates difficulty of complex tasks [abstract hardware details (using system calls)]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-an-operating-system&quot;&gt;What is an Operating System?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Intermediate between Hardware and Software applications&lt;/li&gt;
  &lt;li&gt;Hides hardware complexity (Read/write file storage, send/receive socket network)&lt;/li&gt;
  &lt;li&gt;Handles resource management (CPU scheduling, Memory management)&lt;/li&gt;
  &lt;li&gt;Provide isolation and protection (allocate different parts of memory to different applications so that applications don’t overwrite other memory locations)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;operating-system-definition&quot;&gt;Operating System definition:&lt;/h2&gt;

&lt;p&gt;An &lt;strong&gt;Operating System&lt;/strong&gt; is a layer of systems software that:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;directly has privileged access to the underlying hardware;&lt;/li&gt;
  &lt;li&gt;hides the hardware complexity;&lt;/li&gt;
  &lt;li&gt;manages hardware on behalf of one or more application according to some predifined policies.&lt;/li&gt;
  &lt;li&gt;In addition, it ensures that applications are isolated and protected from one another.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;operating-system-examples&quot;&gt;Operating System examples:&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Desktop&lt;/th&gt;
      &lt;th&gt;Embedded devices&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Microsoft Windows&lt;/td&gt;
      &lt;td&gt;Android OS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;MAC OS X (BSD)&lt;/td&gt;
      &lt;td&gt;iOS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;LINUX&lt;/td&gt;
      &lt;td&gt;Symbian&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;…&lt;/td&gt;
      &lt;td&gt;…&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;os-elements&quot;&gt;OS Elements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Abstractions&lt;/strong&gt; (corresponds to applications that OS executes)
    &lt;ul&gt;
      &lt;li&gt;process, thread, file, socket,  memory page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mechanisms&lt;/strong&gt;  (on top of Abstractions)
    &lt;ul&gt;
      &lt;li&gt;create, schedule, open, write, allocate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Policies&lt;/strong&gt; (how mechanisms are used to manage underlying hardware)
    &lt;ul&gt;
      &lt;li&gt;Least Recently Used (LRU) , Earliest Deadline First (EDF), etc.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;example-&quot;&gt;Example :&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Memory Management:&lt;/em&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Abstractions&lt;/strong&gt;: Memory page&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Mechanisms&lt;/strong&gt;: Allocate, map to a process&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Policies&lt;/strong&gt;: LRU&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;os-design-principles&quot;&gt;OS Design Principles&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Seperation of mechanism and policy
    &lt;ul&gt;
      &lt;li&gt;implement flexible mechanisms to support many policies&lt;/li&gt;
      &lt;li&gt;e.g. LRU, LFU, random&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Optimize for common case
    &lt;ul&gt;
      &lt;li&gt;Where will the OS be used?&lt;/li&gt;
      &lt;li&gt;What will the user want to execute on that machine?&lt;/li&gt;
      &lt;li&gt;What are the workload requirements?&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;user-kernel-protection-boundary&quot;&gt;User/ Kernel Protection Boundary&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;user-level =&amp;gt; applications [underprivileged mode]&lt;/li&gt;
  &lt;li&gt;kernel-level =&amp;gt; OS Kernel [privileged access, hardware access]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/userkernelprotectionboundary.png&quot; alt=&quot;userkernelprotectionboundary&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User-Kernel switch is supported by hardware.
    &lt;ul&gt;
      &lt;li&gt;using trap instructions&lt;/li&gt;
      &lt;li&gt;system calls like:
  	- open (file)
        &lt;ul&gt;
          &lt;li&gt;send (socket)&lt;/li&gt;
          &lt;li&gt;malloc (memory)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;signals&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;system-call-flowcart&quot;&gt;System call Flowcart&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/systemcallflowchart.png&quot; alt=&quot;systemcallflowchart&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To make a system call, an application must:
    &lt;ul&gt;
      &lt;li&gt;write arguments&lt;/li&gt;
      &lt;li&gt;save relevant data ast well defined location&lt;/li&gt;
      &lt;li&gt;make system calls using system call number&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;In synchronous mode : wait until system call completes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;basic-os-services&quot;&gt;Basic OS services&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;process management&lt;/li&gt;
  &lt;li&gt;file management&lt;/li&gt;
  &lt;li&gt;device management&lt;/li&gt;
  &lt;li&gt;memory management&lt;/li&gt;
  &lt;li&gt;storage management&lt;/li&gt;
  &lt;li&gt;security&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;linux-system-calls&quot;&gt;Linux System Calls&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Task&lt;/th&gt;
      &lt;th&gt;Commands&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Process Control&lt;/td&gt;
      &lt;td&gt;fork (); exit(); wait();&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;File Manipulation&lt;/td&gt;
      &lt;td&gt;open(); read(); write();&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Device Manipulation&lt;/td&gt;
      &lt;td&gt;ioctl(); read(); write();&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Information Maintenance&lt;/td&gt;
      &lt;td&gt;getpid(); alarm(); sleep();&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Communication&lt;/td&gt;
      &lt;td&gt;pipe(); shmget(); mmap();&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Protection&lt;/td&gt;
      &lt;td&gt;chmod(); umask(); chown();&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;linux-architecture&quot;&gt;Linux Architecture&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/linuxarch.png&quot; alt=&quot;linuxarchitecture&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;process-and-process-management&quot;&gt;Process and Process Management&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Process&lt;/strong&gt;: Instance of an executing program.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;State of execution
    &lt;ul&gt;
      &lt;li&gt;program counter, stack pointer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Parts and temporary holding area
    &lt;ul&gt;
      &lt;li&gt;data, register state, occupies state in memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;May require special hardware
    &lt;ul&gt;
      &lt;li&gt;I/O devices&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Process is a state of a program when executing and loaded in memory (active state) as opposed to application (static state).&lt;/p&gt;

&lt;h2 id=&quot;what-does-a-process-look-like&quot;&gt;What does a process look like?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/process.png&quot; alt=&quot;Process&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;type-of-state&quot;&gt;Type of state&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Text and Data
    &lt;ul&gt;
      &lt;li&gt;static state when process loads first&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Heap
    &lt;ul&gt;
      &lt;li&gt;dynamically created during execution&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Stack
    &lt;ul&gt;
      &lt;li&gt;grows and shrinks&lt;/li&gt;
      &lt;li&gt;LIFO queue (used to store task checkpoints to resume the original process after switching from another.)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-does-the-os-know-what-a-process-is-doing&quot;&gt;How does the OS know what a process is doing?&lt;/h2&gt;

&lt;p&gt;Using:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Program counter&lt;/li&gt;
  &lt;li&gt;CPU registers&lt;/li&gt;
  &lt;li&gt;Stack pointer&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process-control-block-pcb&quot;&gt;Process Control Block (PCB)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/pcb.png&quot; alt=&quot;PCB&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PCB created when process is created&lt;/li&gt;
  &lt;li&gt;Certain fields are updated when process state change e.g. memory mapping&lt;/li&gt;
  &lt;li&gt;or other fields that change very frequently e.g. Program Counter&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-is-pcb-used-&quot;&gt;How is PCB used ?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/howpcbisused.png&quot; alt=&quot;howpcbisused&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;context-switch&quot;&gt;Context Switch&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Mechanism used to switch from the context of one process to another in the CPU.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;They are expensive!&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;direct costs: no of cycles for load and store instructions.&lt;/li&gt;
      &lt;li&gt;indirect costs: &lt;strong&gt;COLD&lt;/strong&gt; cache (read more &lt;a href=&quot;http://stackoverflow.com/questions/22756092/what-does-it-mean-by-cold-cache-and-warm-cache-concept&quot;&gt;here&lt;/a&gt;)
        &lt;ul&gt;
          &lt;li&gt;Therefore limit frequency how context switching is done.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When a cache is &lt;strong&gt;HOT&lt;/strong&gt;, most process data is in the cache so the process performance will be at its best.&lt;/p&gt;

&lt;p&gt;Sometimes there are situations where we have to Context Switch (higher priority process, timesharing, etc.)&lt;/p&gt;

&lt;h2 id=&quot;process-lifecycle&quot;&gt;Process Lifecycle&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/processlifecycle.png&quot; alt=&quot;processlifecycle&quot; /&gt;&lt;/p&gt;

&lt;p&gt;CPU is able to execute a process when the process is in Running or Ready state.&lt;/p&gt;

&lt;h2 id=&quot;process-creation&quot;&gt;Process Creation&lt;/h2&gt;

&lt;h4 id=&quot;mechanisms&quot;&gt;Mechanisms:&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;fork :
    &lt;ul&gt;
      &lt;li&gt;copies the parent PCB into new child PCB&lt;/li&gt;
      &lt;li&gt;child contains execution at instruction after fork&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;exec :
    &lt;ul&gt;
      &lt;li&gt;replace child image&lt;/li&gt;
      &lt;li&gt;load new program and start from first instruction&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-the-role-of-cpu-scheduler&quot;&gt;What is the role of CPU scheduler?&lt;/h2&gt;

&lt;p&gt;CPU scheduler determines which one of the currently ready processes will be dispatched to the CPU to start running, and how long it should run for.&lt;/p&gt;

&lt;p&gt;OS must :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;preempt =&amp;gt; interrupt and save current context&lt;/li&gt;
  &lt;li&gt;schedule =&amp;gt; run scheduler to choose next process&lt;/li&gt;
  &lt;li&gt;dispatch =&amp;gt; dispatch process 2 switch into its context&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scheduling-design-decisions&quot;&gt;Scheduling design decisions&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/timeslice.png&quot; alt=&quot;timeslice&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;What are the appropriate timeslice values?&lt;/li&gt;
  &lt;li&gt;Metrics to choose next process to run?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;io&quot;&gt;I/O&lt;/h2&gt;

&lt;p&gt;A process can make way in the ready queue in a number of ways.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/io.png&quot; alt=&quot;io&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;can-process-interact&quot;&gt;Can process interact?&lt;/h2&gt;

&lt;h4 id=&quot;inter-process-communication&quot;&gt;Inter Process communication:&lt;/h4&gt;

&lt;p&gt;IPC mechanisms:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;transfer data/info between address space&lt;/li&gt;
  &lt;li&gt;maintain protection and isolation&lt;/li&gt;
  &lt;li&gt;provide flexibility and performance&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Two types of IPC models:&lt;/p&gt;

&lt;h4 id=&quot;1-message-passing-ipc&quot;&gt;1. &lt;strong&gt;Message Passing IPC&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/messagepassing.png&quot; alt=&quot;messagepassing&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS provides communication channel line shared buffer&lt;/li&gt;
  &lt;li&gt;Processes can write(send), read(receive) msg to/from channel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: OS manages the channel&lt;br /&gt;
&lt;strong&gt;Disadvantages&lt;/strong&gt;: Overheads&lt;/p&gt;

&lt;h4 id=&quot;2-shared-memory-ipc&quot;&gt;2. &lt;strong&gt;Shared Memory IPC&lt;/strong&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/sharedmemory.png&quot; alt=&quot;sharedmemory&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS establishes a shared channel and maps it into each processes’ address space&lt;/li&gt;
  &lt;li&gt;Processes directly write(send), read(receive) msg to/from this memory&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;: OS is out of the way after establishing the shared channel&lt;br /&gt;
&lt;strong&gt;Disadvantages&lt;/strong&gt;: Re-implementing a lot of code that could have been done by the OS&lt;/p&gt;

&lt;p&gt;Overall, &lt;strong&gt;shared memory&lt;/strong&gt; based communication is better if mapping memory between two processes is ammortized over a large number of messages.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;threads-and-concurrency&quot;&gt;Threads and Concurrency&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Thread&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;is an active
    &lt;ul&gt;
      &lt;li&gt;entity executing unit of a process&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;works simultaneously with others
    &lt;ul&gt;
      &lt;li&gt;many threads execute together&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;requires coordination
    &lt;ul&gt;
      &lt;li&gt;sharing of I/O devices, CPUs, memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process-vs-thread&quot;&gt;Process vs Thread&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/processvthread.png&quot; alt=&quot;processvthread&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;why-are-threads-useful&quot;&gt;Why are threads useful?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Parallelization =&amp;gt; Speedup&lt;/li&gt;
  &lt;li&gt;Specialization =&amp;gt; Hot cache&lt;/li&gt;
  &lt;li&gt;Efficiency =&amp;gt; lower memory requirement &amp;amp; cheaper IPC&lt;/li&gt;
  &lt;li&gt;Time for context switch in threads is less, since memory is shared, hence mapping is not required between virtual and physical memory.
    &lt;ul&gt;
      &lt;li&gt;Therefore multithreading can be used to hide latency.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Benefits to both applicatioons and OS code
    &lt;ul&gt;
      &lt;li&gt;Multithreaded OS kernel
        &lt;ul&gt;
          &lt;li&gt;threads working on behalf of applications&lt;/li&gt;
          &lt;li&gt;OS level services like daemons and drivers&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-do-we-need-to-support-threads&quot;&gt;What do we need to support threads?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Threads data structure
    &lt;ul&gt;
      &lt;li&gt;Identify threads, keep track of resource usage..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mechanisms to create and manage threads&lt;/li&gt;
  &lt;li&gt;Mechanisms to safely coordinate among threads running concurrently in the same address space&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;concurrency-control-and-coordination&quot;&gt;Concurrency control and Coordination&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mutual exclusion
    &lt;ul&gt;
      &lt;li&gt;Exclusive access to only one thread at a time&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;mutex&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Waiting on other threads
    &lt;ul&gt;
      &lt;li&gt;Specific condition before proceeding&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;condition variable&lt;/strong&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Waking up other threads from wait state&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;threads-and-threads-creation&quot;&gt;Threads and Threads creation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Thread data structure:
    &lt;ul&gt;
      &lt;li&gt;Thread type, Thread ID, PC, SP, registers, stack, attributes.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Fork&lt;/strong&gt;(proc, args)
    &lt;ul&gt;
      &lt;li&gt;create a thread&lt;/li&gt;
      &lt;li&gt;not UNIX fork&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;t1 = fork(proc, args)   
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Join&lt;/strong&gt;(thread)
    &lt;ul&gt;
      &lt;li&gt;terminate a thread&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;child_result = join(t1)   
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;example&quot;&gt;Example:&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Thread  t1;
Shared_List list;
t1 = fork(safe_insert, 4);
safe_insert(6);
join(t1); //Optional
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The list can be accessed by reading shared variable.&lt;/p&gt;

&lt;h2 id=&quot;mutual-exclusion&quot;&gt;Mutual Exclusion&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Mutex data structure:
    &lt;ul&gt;
      &lt;li&gt;locked?, owner, blocked_threads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;lock(mutex){
	//Critical Section
    //Only one thread can access at a time
}
unlock(mutex)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/mutex.png&quot; alt=&quot;mutex&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;producer-consumer-problem&quot;&gt;Producer Consumer problem&lt;/h2&gt;

&lt;p&gt;What if the processing you wish to perform with mutual exclusion needs to occur under certai conditions?&lt;/p&gt;

&lt;p&gt;For e.g. The producer appends items to a list until the list is full, and the consumer has to print out all the items of the list once the list if full and then empty the list. Thus we have to execute the Consumer thread only under a certain condition (here- when the list becomes empty, print items).&lt;/p&gt;

&lt;p&gt;Solution: Use &lt;strong&gt;Condition Variables&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wait(mutex, condition)
    &lt;ul&gt;
      &lt;li&gt;mutex is automatically released and reaquired on wait&lt;/li&gt;
      &lt;li&gt;The consumer applies &lt;em&gt;Wait&lt;/em&gt; until the list is full&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Signal(condition)
    &lt;ul&gt;
      &lt;li&gt;Notify only one thread waiting on condition&lt;/li&gt;
      &lt;li&gt;The Producer applies &lt;em&gt;Signal&lt;/em&gt; to the Consumer thread when the list is full&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Broadcast(condition)
    &lt;ul&gt;
      &lt;li&gt;Notify all waiting threads&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/producerconsumer.png&quot; alt=&quot;producerconsumer&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;readers--writer-problem&quot;&gt;Readers / Writer problem&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;0 or more readers can access a resource&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;0 or 1 writer can write the resource concurrently at the same time&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;One solution:
    &lt;ul&gt;
      &lt;li&gt;lock on resource
  	- good for writer
  	- too restrictive for readers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Better solution:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;if ((read_count == 0) &amp;amp; (read_count == 0))
	R okay, W okay
if (read_count &amp;gt; 0)
	R okay    
if (read_count == 1)
	R not-okay, W not-okay    
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;State of shared resource:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;free : resource_counter = 0&lt;/li&gt;
  &lt;li&gt;reading : resource_counter &amp;gt; 0&lt;/li&gt;
  &lt;li&gt;writing : resource_counter = -1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thus essentially we can apply mutex on the new proxy ‘resource_counter’ variable that represents the state of the shared resource.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-common-mistakes&quot;&gt;Avoiding common mistakes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;keep track of mutex/lock variable used with a resource
    &lt;ul&gt;
      &lt;li&gt;e.g. mutex_type m1; // mutex for file1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;check that you are always and correctly using lock and unlock 	- Compilers can be used as they generate errors/warnings to correct this type of mistake&lt;/li&gt;
  &lt;li&gt;Use a single mutex to access a single resource&lt;/li&gt;
  &lt;li&gt;check that you are signalling correct condition&lt;/li&gt;
  &lt;li&gt;check that you are not using signal when broadcast is needed
    &lt;ul&gt;
      &lt;li&gt;signal : only 1 thread is will proceed, remaining threads will wait&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;check thread execution order to be controlled by signals to condition variables&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spuriousunnecessary-wake-ups&quot;&gt;Spurious(Unnecessary) Wake ups&lt;/h2&gt;

&lt;p&gt;When we wake up threads knowing they may not be able to proceed.&lt;/p&gt;

&lt;h2 id=&quot;deadlocks&quot;&gt;Deadlocks&lt;/h2&gt;

&lt;p&gt;Two or more competing threads are said to be in a deadlock if they are waiting on each other to complete, but none of them ever do.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/deadlock.png&quot; alt=&quot;deadlock&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here T1 and T2 are in deadlock.&lt;/p&gt;

&lt;h3 id=&quot;how-to-avoid-this&quot;&gt;How to avoid this?&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Unlock T1 before locking T2
    &lt;ul&gt;
      &lt;li&gt;Fine-grained locking but T1 nad T2 may both be required&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Use one mega lock, get all locks upfront, then release at end
    &lt;ul&gt;
      &lt;li&gt;For some applications this may be ok. But generally its too restrictive and limits parallelism&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Maintain lock order
    &lt;ul&gt;
      &lt;li&gt;first m_T1&lt;/li&gt;
      &lt;li&gt;then m_T2 
 	- this will prevent cycles in wait graph&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;A cycle in wait graph is necessary and sufficient for deadlock to occur.&lt;br /&gt; 
(thread-waiting-on-resource —edge—&amp;gt; thread-owning-resource)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Deadlock prevention =&amp;gt; Expensive&lt;br /&gt;
Pre-check for cycles and then delay process or change code&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Deadlock Detection and Recovery =&amp;gt; Rollback&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;kernel-vs-user-level-threads&quot;&gt;Kernel vs User level Threads&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/kernelvuserthread.png&quot; alt=&quot;kernelvuserthread&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Three types of models:&lt;/p&gt;

&lt;h4 id=&quot;1-one-to-one-model&quot;&gt;1. &lt;strong&gt;One to One model&lt;/strong&gt;:&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/onetoone.png&quot; alt=&quot;onetoone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS sees threads&lt;/li&gt;
  &lt;li&gt;Synchronization&lt;/li&gt;
  &lt;li&gt;Blocking&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Must go to OS for all operations&lt;/li&gt;
  &lt;li&gt;OS may have limits on policies, threads&lt;/li&gt;
  &lt;li&gt;Portability&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;2-many-to-one-model&quot;&gt;2. &lt;strong&gt;Many to One model&lt;/strong&gt;:&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/manytoone.png&quot; alt=&quot;manytoone&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Totally Portable&lt;/li&gt;
  &lt;li&gt;Doesn’t depend on OS limits and policies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS may block entire process if one user-level thread blocks on I/O&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-many-to-many-model&quot;&gt;3. &lt;strong&gt;Many to Many model&lt;/strong&gt;:&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/manytomany.png&quot; alt=&quot;manytomany&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Best of both worlds&lt;/li&gt;
  &lt;li&gt;Can have bound or unbound threads&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Requires coordination between user and kernel level thread managers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multithreading-patterns&quot;&gt;Multithreading patterns&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;1. Boss-Workers pattern&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Boss- assigns work&lt;/li&gt;
  &lt;li&gt;Workers- perform entire task&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Throughput of system is limited by boss thread. Hence boss thread must be kept efficient.&lt;/p&gt;

&lt;p&gt;Throughput = 1/boss-time-orders&lt;/p&gt;

&lt;p&gt;Boss assigns works by:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Directly signalling specific works
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; workers don’t need to sync&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; boss must keep track of everyone&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Placing work in queue
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; boss doesn’t neeed to know details about workers&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; queue synchronization&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;How many workers?&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;on demand&lt;/li&gt;
  &lt;li&gt;pool of workers&lt;/li&gt;
  &lt;li&gt;static vs dynamic (i.e dynamically increasing size according to work)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplicity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Thread pool management&lt;/li&gt;
  &lt;li&gt;Locality&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;1B. Boss-Workers pattern variant&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Here workers are specialized for certain tasks opposite to the previous equally created workers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Better locality&lt;/li&gt;
  &lt;li&gt;Quality of Service management&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Load balancing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;2. Pipeline pattern&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Threads assigned one subtask in the system&lt;/li&gt;
  &lt;li&gt;Entire task = Pipeline of threads&lt;/li&gt;
  &lt;li&gt;Multiple tasks concurrently run in the system, in different pipeline stages&lt;/li&gt;
  &lt;li&gt;Throughput depends on weakest link&lt;/li&gt;
  &lt;li&gt;Shared buffer based communication between stages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;3. Layered pattern&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Layers of threads are assigned group of related subtasks&lt;/li&gt;
  &lt;li&gt;End to end task must pass up and down through all layers&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Specialization&lt;/li&gt;
  &lt;li&gt;Less fine-grained than pipeline&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Not suitable for all applications&lt;/li&gt;
  &lt;li&gt;Synchronization&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;example-1&quot;&gt;Example:&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Q)&lt;/strong&gt; For 6 step toy order application we have 2 solutions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Boss-workers solution&lt;/li&gt;
  &lt;li&gt;Pipeline solution&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both have 6 threads. In the boss-workers solution, a worker produces a toy order in 120 ms. In the pipeline solution, each of 6 stages take 20 ms.&lt;/p&gt;

&lt;p&gt;How long will it take for these solutions to complete 10 toy orders and 11 toy orders?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A)&lt;/strong&gt; 6 threads means for Boss-workers, 1 thread is for boss, 5 for workers. In pipeline 6 threads are equally used.&lt;/p&gt;

&lt;p&gt;For 10 toy orders:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Boss-workers(10) = 120 + 120 = 240 ms
Pipeline(10) = 120 + (9*20) = 300 ms
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here Boss-workers is better than Pipeline.&lt;/p&gt;

&lt;p&gt;For 11 toy orders:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Boss-workers(11) = 120 + 120 + 120 = 360 ms
Pipeline(11) = 120 + (10*20) = 320 ms
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here Pipeline is better than Boss-workers.&lt;/p&gt;

&lt;p&gt;This proves that choosing a better pattern depends on the number of threads and the work required to be done.&lt;/p&gt;

&lt;h2 id=&quot;pthreads&quot;&gt;PThreads&lt;/h2&gt;

&lt;p&gt;PThreads == POSIX Threads&lt;/p&gt;

&lt;p&gt;POSIX = Portable OS interface&lt;/p&gt;

&lt;h3 id=&quot;compiling-pthreads&quot;&gt;Compiling PThreads&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;#include&lt;pthread.h&gt; in main file&lt;/pthread.h&gt;&lt;/li&gt;
  &lt;li&gt;Compile source with -lpthread or -pthread
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;gcc -o main main.c -lpthread
gcc -o main main.c -pthread
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Check return values of common examples&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;pthread-mutexes&quot;&gt;PThread mutexes&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;to solve mutual exclusion problems among concurrent threads&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;safety-tips&quot;&gt;Safety tips&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Shared data should always be accessed through single mutex&lt;/li&gt;
  &lt;li&gt;Mutex scope must be visible to all&lt;/li&gt;
  &lt;li&gt;Globally order locks
    &lt;ul&gt;
      &lt;li&gt;for all threads, lock mutexes in order&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Always unlock a mutex (correctly)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;thread-design-considerations&quot;&gt;Thread Design Considerations&lt;/h2&gt;

&lt;h3 id=&quot;kernel-vs-user-level-threads-1&quot;&gt;Kernel vs User Level Threads&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/userlevelvkernellevel.png&quot; alt=&quot;userlevelvkernellevel&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;thread-related-data-structures&quot;&gt;Thread related data structures&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/threadds.png&quot; alt=&quot;threadds&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hard-vs-light-process-states&quot;&gt;Hard vs Light Process states&lt;/h3&gt;

&lt;p&gt;PCB is divided into multiple data structures classified as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Light Process states
    &lt;ul&gt;
      &lt;li&gt;Signal mask&lt;/li&gt;
      &lt;li&gt;System call args&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Heavy Process states
    &lt;ul&gt;
      &lt;li&gt;virtual address mapping&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;rationale-for-multiple-data-structures&quot;&gt;Rationale for Multiple Data Structures:&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Single PCB&lt;/th&gt;
      &lt;th&gt;Multiple DS&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Large continuos DS&lt;/td&gt;
      &lt;td&gt;Smaller DS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Private for each entity&lt;/td&gt;
      &lt;td&gt;Easier to share&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Saved and restored on each context switch&lt;/td&gt;
      &lt;td&gt;Save and Restore only what needs to change on context switch&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Update for any changes&lt;/td&gt;
      &lt;td&gt;User lever library need to only update portion of the state&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Thus the following disadvantages for single PCB become advantages for Multiple DS :
    &lt;ul&gt;
      &lt;li&gt;Scalability&lt;/li&gt;
      &lt;li&gt;Overheads&lt;/li&gt;
      &lt;li&gt;Performance&lt;/li&gt;
      &lt;li&gt;Flexibility&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;comparison-of-interrupts-and-signals&quot;&gt;Comparison of Interrupts and Signals&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Handled in specific ways
      - interrupt and signal handlers
    &lt;ul&gt;
      &lt;li&gt;Can be ignored
        &lt;ul&gt;
          &lt;li&gt;interrupt and signal mask&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Expected or unexpected
        &lt;ul&gt;
          &lt;li&gt;appear synchronously or asynchronously&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Difference:&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Interrupts&lt;/th&gt;
      &lt;th&gt;Signals&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Events generated externally by components other than CPU (I/O devices, timers, other CPUs)&lt;/td&gt;
      &lt;td&gt;Events triggered by CPU and software running on it&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Determined based on physical platform&lt;/td&gt;
      &lt;td&gt;Determined based on OS&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Appear asynchronously&lt;/td&gt;
      &lt;td&gt;Appear synchronously or asynchronously&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Similarities:
    &lt;ul&gt;
      &lt;li&gt;Have a unique ID depending on h/w or OS&lt;/li&gt;
      &lt;li&gt;Can be masked and disabled/suspended via corresponding mask
  	- per-CPU interrupt mask, preprocess signal mask&lt;/li&gt;
      &lt;li&gt;if enabled, trigger corresponding to handler &lt;br /&gt;
  	- interrupt handler set for entire system by OS
        &lt;ul&gt;
          &lt;li&gt;signal handler set on per process basis by process&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;An interrupt is like a snowstorm alarm&lt;br /&gt;
A signal is like a low battery warning&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;interrupts&quot;&gt;Interrupts&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/interrupts.png&quot; alt=&quot;interrupts&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;signals&quot;&gt;Signals&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/signals.png&quot; alt=&quot;signals&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;handlers--actions&quot;&gt;Handlers / Actions&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Default actions
    &lt;ul&gt;
      &lt;li&gt;Terminate, ignore&lt;/li&gt;
      &lt;li&gt;Terminate and core dump&lt;/li&gt;
      &lt;li&gt;Stop or continue&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Process Installs Handler
    &lt;ul&gt;
      &lt;li&gt;signal(), sigaction()&lt;/li&gt;
      &lt;li&gt;for most signals, some cannot be “caught”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Synchronous&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;SIGSEGV (access to protected memory)&lt;/li&gt;
      &lt;li&gt;SIGFPE (divided by zero)&lt;/li&gt;
      &lt;li&gt;SIGKILL (kill, id)
  	- can be directed to a specific thread&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Asynchronous&lt;/strong&gt;*
    &lt;ul&gt;
      &lt;li&gt;SIGKILL (kill)&lt;/li&gt;
      &lt;li&gt;SIGALARM
        &lt;h3 id=&quot;why-disable-interrupts-or-signals&quot;&gt;Why disable Interrupts or Signals&lt;/h3&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/disableis.png&quot; alt=&quot;disableis&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here PC: First instruction in handler&lt;br /&gt;
SP : thread stack&lt;/p&gt;

&lt;p&gt;To prevent deadlock,&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Keep handler code simple
    &lt;ul&gt;
      &lt;li&gt;avoid mutex&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; too restrictive&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Control interruptions by handler code
    &lt;ul&gt;
      &lt;li&gt;Use interrupt/signal masks&lt;/li&gt;
      &lt;li&gt;0011100110.. (0: disabled, 1: enabled)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;clear_field_in_mask(mask)
lock(mutex)
{

#disabled =&amp;gt; remaining pending

}
unlock(mutex)
reset_field_in_mask(mask)

#enabled =&amp;gt; execute handler code
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Interrupt masks are per CPU
    &lt;ul&gt;
      &lt;li&gt;if mask disables interrupt, hardware interrupt rounting mechanism will not deliver interrupt&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Signal are per execution context (User-level thread on top of Kernel-level thread)
    &lt;ul&gt;
      &lt;li&gt;if mask disables signal, kernel sees mask and will not interrupt corresponding thread&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;types-of-signals&quot;&gt;Types of Signals&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;One-shot Signals
    &lt;ul&gt;
      &lt;li&gt;“n signals pending == 1 signal pending” : atleast once&lt;/li&gt;
      &lt;li&gt;must be explicitly re-enabled&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Realtime Signals
    &lt;ul&gt;
      &lt;li&gt;“if n signals raised, then handler is called n times”&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;handling-interrupts-as-threads&quot;&gt;Handling interrupts as threads&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/interruptsasthreads.png&quot; alt=&quot;interruptsasthreads&quot; /&gt;&lt;/p&gt;

&lt;p&gt;but dynamic thread creation is expensive!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dynamic decision
    &lt;ul&gt;
      &lt;li&gt;if handler doesn’t lock
  	- execute on interrupted threads stack&lt;/li&gt;
      &lt;li&gt;if handler can block
  	- turn into real thread&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Optimization
    &lt;ul&gt;
      &lt;li&gt;pre-create and pre-initialize thread structure for interrupt routines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;threads-and-signal-handling&quot;&gt;Threads and Signal Handling&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/tshandling.png&quot; alt=&quot;tshandling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case 1 :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User-Level-Thread mask = 1&lt;/li&gt;
  &lt;li&gt;Kernel-Level-Thread mask = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/case1.png&quot; alt=&quot;case1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case 2 :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User-Level-Thread mask = 0&lt;/li&gt;
  &lt;li&gt;Kernel-Level-Thread mask = 1&lt;/li&gt;
  &lt;li&gt;another User-Level-Thread mask = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/case2.png&quot; alt=&quot;case2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case 3 :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User-Level-Thread mask = 0&lt;/li&gt;
  &lt;li&gt;Kernel-Level-Thread mask = 1&lt;/li&gt;
  &lt;li&gt;another User-Level-Thread mask = 1&lt;/li&gt;
  &lt;li&gt;another Kernel-Level-Thread mask = 1&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/case3.png&quot; alt=&quot;case3&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Case 4 :&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;User-Level-Thread mask = 0&lt;/li&gt;
  &lt;li&gt;Kernel-Level-Thread mask = 1&lt;/li&gt;
  &lt;li&gt;all User-Level-Thread mask = 0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/case4.png&quot; alt=&quot;case4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Optimize common case&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;signals less frequennt than signal mask updates&lt;/li&gt;
  &lt;li&gt;system calls avoided
    &lt;ul&gt;
      &lt;li&gt;cheaper to update user-level mask&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;signal handling more expensive&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;multi-processing-vs-multi-threading&quot;&gt;Multi-processing vs Multi-threading&lt;/h2&gt;

&lt;p&gt;How to best provide concurrency?&lt;/p&gt;

&lt;h3 id=&quot;multi-processing-mp&quot;&gt;Multi-Processing (MP)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simple programming&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;High memory usage&lt;/li&gt;
  &lt;li&gt;Costs context switch&lt;/li&gt;
  &lt;li&gt;costly to maintain shared state (tricky port setup)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;multi-threading-mp&quot;&gt;Multi-Threading (MP)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Shared address space&lt;/li&gt;
  &lt;li&gt;Shared state (no sys calls to other threads)&lt;/li&gt;
  &lt;li&gt;Cheap context switch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Complex implementation&lt;/li&gt;
  &lt;li&gt;Requires synchronization&lt;/li&gt;
  &lt;li&gt;Requires underlying support for threads&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;event-driven-model&quot;&gt;Event Driven model&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/eventdrivenmodel.png&quot; alt=&quot;eventdrivenmodel&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single address space&lt;/li&gt;
  &lt;li&gt;Single process&lt;/li&gt;
  &lt;li&gt;Single thread of control&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Dispatcher : acts as a state machine and accepts any external events&lt;/p&gt;

&lt;p&gt;When call handler =&amp;gt; jump to code&lt;/p&gt;

&lt;p&gt;The handler:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Runs to completion&lt;/li&gt;
  &lt;li&gt;if they need to block
    &lt;ul&gt;
      &lt;li&gt;initiate blocking operation and pass control to dispatch loop&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;concurrent-execution-in-event-driven-models&quot;&gt;Concurrent execution in Event-driven models&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;MP &amp;amp; MT :  1 request per execution context (process/thread)&lt;/li&gt;
  &lt;li&gt;Event Driven : Many requests interleaved in an execution context&lt;/li&gt;
  &lt;li&gt;Single thread switches among processing of different requests&lt;/li&gt;
  &lt;li&gt;Process requests until wait is necessary
    &lt;ul&gt;
      &lt;li&gt;then switch to another request&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Single address space&lt;/li&gt;
  &lt;li&gt;Single flow of control&lt;/li&gt;
  &lt;li&gt;Smaller memory requirement
    &lt;ul&gt;
      &lt;li&gt;Event Driven model requires less memory than Boss-workers/Pipeline model, where the extra memory is required for helper thread for concurrent blocking I/O not for all concurrent requests.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;No context switches&lt;/li&gt;
  &lt;li&gt;No synchronization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A blocking request/handler will block entire process&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;asynchronous-io-operations&quot;&gt;Asynchronous I/O operations&lt;/h3&gt;

&lt;p&gt;Asynchronous I/O operations fit well with Event-driven models&lt;/p&gt;

&lt;p&gt;Since asynchronous calls are not easily avalible, helpers can be used to implement the async call functionality:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;designated for blocking I/O operations only&lt;/li&gt;
  &lt;li&gt;pipe/socket based communication with event dispatcher
    &lt;ul&gt;
      &lt;li&gt;select()/ poll() still okay&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;helper blocks, but main event loop (&amp;amp; process) will not&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;asymmetric-multi-process-event-driven-model-amped--amted&quot;&gt;Asymmetric Multi-Process Event Driven model (AMPED &amp;amp; AMTED)&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Resolve portability limitations of basic event driven model&lt;/li&gt;
  &lt;li&gt;Smaller footprint than regular worker thread&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Applicability to certain classes of applications&lt;/li&gt;
  &lt;li&gt;Event routing on multi CPU systems&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Eg &lt;a href=&quot;https://en.wikipedia.org/wiki/Apache_HTTP_Server&quot;&gt;Apache Web Server&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/apachewebserver.png&quot; alt=&quot;apachewebserver.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Core : basic server skeleton&lt;/li&gt;
  &lt;li&gt;Modules : per functionality&lt;/li&gt;
  &lt;li&gt;Flow of Control : Similar to Event Driven model&lt;/li&gt;
  &lt;li&gt;But its an combination of MP + MT,
    &lt;ul&gt;
      &lt;li&gt;each process = boss/worker with dynamic thread pool&lt;/li&gt;
      &lt;li&gt;number of processes can also be dynamically adjusted&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;scheduling&quot;&gt;Scheduling&lt;/h1&gt;

&lt;p&gt;Operating System perform scheduling in the following simple ways:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Dispatch orders immediately
    &lt;ul&gt;
      &lt;li&gt;scheduling is simple FIFO (First-Come-First-Serve)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dispatch simple orders first
    &lt;ul&gt;
      &lt;li&gt;maximize number of orders processed over time&lt;/li&gt;
      &lt;li&gt;maximize throughput (SJF)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Dispatch complex orders first
    &lt;ul&gt;
      &lt;li&gt;maximize utilization of CPU, devices, memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cpu-scheduler&quot;&gt;CPU Scheduler&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Decides how and when process (and their threads) access shared CPUs&lt;/li&gt;
  &lt;li&gt;Schedules tasks running at user level processes/threads as well as kernel level threads&lt;/li&gt;
  &lt;li&gt;Chooses one of the ready tasks to run on CPU&lt;/li&gt;
  &lt;li&gt;Runs when
    &lt;ul&gt;
      &lt;li&gt;CPU becomes idle&lt;/li&gt;
      &lt;li&gt;new task becomes ready&lt;/li&gt;
      &lt;li&gt;timeslice expired timeout&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Context switch, enter user mode, set PC and go! &amp;lt;= Thread is dispatched on CPU.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which task should be selected?
    &lt;ul&gt;
      &lt;li&gt;Scheduling policy/algorithm&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How is this done?
    &lt;ul&gt;
      &lt;li&gt;Depends on runqueue data structure&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;run-to-completion-scheduling&quot;&gt;“Run-to-completion” Scheduling&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Initial assumptions
    &lt;ul&gt;
      &lt;li&gt;group of tasks/jobs&lt;/li&gt;
      &lt;li&gt;known execution time&lt;/li&gt;
      &lt;li&gt;no preemption&lt;/li&gt;
      &lt;li&gt;single CPU&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Metrics
    &lt;ul&gt;
      &lt;li&gt;throughput&lt;/li&gt;
      &lt;li&gt;average job completion time&lt;/li&gt;
      &lt;li&gt;average job wait time&lt;/li&gt;
      &lt;li&gt;CPU utilization&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;scheduling-algorithms&quot;&gt;Scheduling algorithms:&lt;/h2&gt;

&lt;h3 id=&quot;1-first-come-first-serve-fcfs&quot;&gt;1. First Come First Serve (FCFS)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Schedules tasks in order of arrival&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;runqueue = queue(FIFO)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If T1, T2, T3 arrive in the given order and T1 has execution time 1s, T2 10s and T3 1s then :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Throughput = 3/(1+10+1) = 3/12 = 0.25s&lt;/li&gt;
  &lt;li&gt;Average completion time = (1 + 11 + 12)/3 = 8s&lt;/li&gt;
  &lt;li&gt;Average wait time = (1+1+11)/3 = 4s&lt;/li&gt;
  &lt;li&gt;Starvation NOT possible&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-shortest-job-first-sjf&quot;&gt;2. Shortest Job First (SJF)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Schedules tasks in order of execution time&lt;/li&gt;
  &lt;li&gt;Therefore for the above example, T1(1s) &amp;gt; T3(1s) &amp;gt; T2(10s)&lt;/li&gt;
  &lt;li&gt;Starvation possible&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;runqueue = ordered(queue)

//or

runqueue = tree()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For SJF,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Throughput = 3/(1+10+1) = 3/12 = 0.25s&lt;/li&gt;
  &lt;li&gt;Average completion time = (1 + 2 + 12)/3 = 5s&lt;/li&gt;
  &lt;li&gt;Average wait time = (0+1+2)/3 = 1s&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;preemptive-scheduling&quot;&gt;Preemptive Scheduling&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;SJF + Preemption&lt;/li&gt;
  &lt;li&gt;Starvation is possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;T2 arrives first.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/preemptive.png&quot; alt=&quot;preemptive&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;priority-scheduling&quot;&gt;Priority Scheduling&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Tasks have different priority levels&lt;/li&gt;
  &lt;li&gt;Run highest priority task next (preemption)&lt;/li&gt;
  &lt;li&gt;Starvation is possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/priority.png&quot; alt=&quot;priority&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;runqueue = per priority_queue()

//or 

runqueue = tree() ordered on priority
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;low priority task stuck in runqueue =&amp;gt; starvation&lt;/li&gt;
  &lt;li&gt;“priority aging”
    &lt;ul&gt;
      &lt;li&gt;priority = f(actual priority, time spent in runqueue)&lt;/li&gt;
      &lt;li&gt;eventually tasks will run&lt;/li&gt;
      &lt;li&gt;prevents starvation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-round-robin-scheduling&quot;&gt;3. Round-Robin Scheduling&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Pick up the first task from queue (like FCFS)&lt;/li&gt;
  &lt;li&gt;Task may yield to wait on I/O (unlike FCFCS)&lt;/li&gt;
  &lt;li&gt;Starvation is NOT possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/rr1.png&quot; alt=&quot;rr1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/rr2.png&quot; alt=&quot;rr2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/rr3.png&quot; alt=&quot;rr3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;4-shortest-remaining-time-first-srtf&quot;&gt;4. Shortest Remaining Time First (SRTF)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Chooses the process with the shortest CPU burst remaining and executes that one. If processes come in during execution that have less remaining time, the current one is preempted and the new one executed. Therefore, it can lead to starvation.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;timeslicing&quot;&gt;Timeslicing&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Timeslice = max amount of uninterrupted time given to a task&lt;/li&gt;
  &lt;li&gt;task may run less than timeslice
    &lt;ul&gt;
      &lt;li&gt;has to wait on I/O sync
  	- will be placed on queue&lt;/li&gt;
      &lt;li&gt;higher priority task becomes runnable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;using timeslice tasks are interleaved
    &lt;ul&gt;
      &lt;li&gt;timesharing the CPU&lt;/li&gt;
      &lt;li&gt;CPU bound tasks =&amp;gt; preemption after timeslice&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/rr4.png&quot; alt=&quot;rr4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Short tasks finish sooner&lt;/li&gt;
  &lt;li&gt;More responsive&lt;/li&gt;
  &lt;li&gt;Lengthy I/O operations initiated sooner
    &lt;ul&gt;
      &lt;li&gt;best to keep timeslice &amp;gt; context-switch-time&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disdvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Overheads&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;how-long-should-a-timeslice-be-be&quot;&gt;How long should a timeslice be be?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;should balance benefits and overheads&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;for-cpu-bound-tasks&quot;&gt;For CPU bound tasks:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/cputs.png&quot; alt=&quot;cputs&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hence, for CPU bound tasks, larger timeslice values are better&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;for-io-bound-tasks&quot;&gt;For I/O bound tasks:&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/iots.png&quot; alt=&quot;iots&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hence, for I/O bound tasks, smaller timeslice values are better
    &lt;ul&gt;
      &lt;li&gt;Keeps CPU and I/P devices busy, I/O bound tasks run quickly, makes I/O requests responds to a user.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;CPU bound tasks prefer longer timeslices
    &lt;ul&gt;
      &lt;li&gt;limits context switching overheads&lt;/li&gt;
      &lt;li&gt;keeps CPU utilization and throughput&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I/O bound tasks prefer smaller timeslices
    &lt;ul&gt;
      &lt;li&gt;However, if all the tasks in contention are I/O bound, it may not make such a difference&lt;/li&gt;
      &lt;li&gt;If a portion of them are I/O smaller timeslices keeps CPU and device utilization high&lt;/li&gt;
      &lt;li&gt;Provides better user-perceived performance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;memory-management&quot;&gt;Memory Management&lt;/h1&gt;

&lt;p&gt;Operating systems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;uses intelligently size containers
    &lt;ul&gt;
      &lt;li&gt;memory pages of segments&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Not all parts are needed at once
    &lt;ul&gt;
      &lt;li&gt;tasks operate on subset of memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Optimized for performance
    &lt;ul&gt;
      &lt;li&gt;reduce time to access state in memory
  	- leads to better performance!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memory-management-goals&quot;&gt;Memory Management Goals&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/mmgoals.png&quot; alt=&quot;mmgoals.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;virtual-vs-physical-memory&quot;&gt;Virtual vs Physical memory&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Allocate
    &lt;ul&gt;
      &lt;li&gt;allocation, replacement&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Arbitrate
    &lt;ul&gt;
      &lt;li&gt;address translation and validation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;page-based-memory-management&quot;&gt;Page-based Memory Management&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Allocate =&amp;gt; pages =&amp;gt; page frames&lt;/li&gt;
  &lt;li&gt;Arbitrate =&amp;gt; page tables&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;segment-based-memory-management&quot;&gt;Segment-based Memory Management&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Allocate =&amp;gt; segments&lt;/li&gt;
  &lt;li&gt;Arbitrate =&amp;gt; segment registers&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hardware-support&quot;&gt;Hardware Support&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/hardwaresupport.png&quot; alt=&quot;hardwaresupport.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;memory-management-unit-mmu&quot;&gt;Memory Management Unit (MMU)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;translate virtual to physical address&lt;/li&gt;
  &lt;li&gt;reports faults (illegal access, permission, not present in memory)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;registers&quot;&gt;Registers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;pointers to page tables&lt;/li&gt;
  &lt;li&gt;base and limit size, number of segments&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cache&quot;&gt;Cache&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Translation lookaside buffer&lt;/li&gt;
  &lt;li&gt;Valid VA-PA translations using TLB&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;translation&quot;&gt;Translation&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Actual PA generation done in hardware&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;page-tables&quot;&gt;Page Tables&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/pagetables.png&quot; alt=&quot;pagetables.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS creates page table per process&lt;/li&gt;
  &lt;li&gt;On context switch, switch to valid page table&lt;/li&gt;
  &lt;li&gt;Updates register that points to correct page table.
  E.g CR3 on x86 architecture&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;page-table-entry-pte&quot;&gt;Page Table Entry (PTE)&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/pfn.png&quot; alt=&quot;pfn.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;flags&quot;&gt;Flags&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Present (valid/invalid)&lt;/li&gt;
  &lt;li&gt;Dirty (written to)&lt;/li&gt;
  &lt;li&gt;Accessed (for read or write)&lt;/li&gt;
  &lt;li&gt;Protection bits =&amp;gt; RWX&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;page-table-entry-on-x86&quot;&gt;Page Table Entry on x86&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/pfnx86.png&quot; alt=&quot;pfnx86.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;flags-1&quot;&gt;Flags&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Present&lt;/li&gt;
  &lt;li&gt;Dirty&lt;/li&gt;
  &lt;li&gt;Accessed&lt;/li&gt;
  &lt;li&gt;R/W permission bit 0: R only, 1: R/W&lt;/li&gt;
  &lt;li&gt;U/S permission bit 0: usermode, 1: superviser mode only&lt;/li&gt;
  &lt;li&gt;others: caching related info (write through, caching disabled)&lt;/li&gt;
  &lt;li&gt;unused: for future use&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;page-faults&quot;&gt;Page faults&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/pagefaults.png&quot; alt=&quot;pagefaults.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;page-table-size&quot;&gt;Page Table Size&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/pts.png&quot; alt=&quot;pts.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;32 bit architecture
    &lt;ul&gt;
      &lt;li&gt;Page Table Entry (PTE) = 4 Bytes, including PFN + flags&lt;/li&gt;
      &lt;li&gt;Virtual Page Number (VPN) = 2^32/page_size&lt;/li&gt;
      &lt;li&gt;Page size = 4KB (…8KB, 2MB, 4MB, 1GB)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Therefore Page Table Size = (2^32 * 2^12)*4B = 4MB (per process)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;for 64 bit architecture
    &lt;ul&gt;
      &lt;li&gt;Page Table Entry (PTE) = 8 Bytes&lt;/li&gt;
      &lt;li&gt;Page size = 4KB&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Page Table Size = (2^64 * 2^12)*8B = 32PB (per process!)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;processes don’t use entire address space&lt;/li&gt;
  &lt;li&gt;even on 32 bit architecture, it will not always use all 4GB&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But Page Table assumes an entry per VPN regardless, of whether corresponding virtual memory is needed or not.&lt;/p&gt;

&lt;h2 id=&quot;hierarchical-page-tables&quot;&gt;Hierarchical Page Tables&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/hierarchicalpt.png&quot; alt=&quot;hierarchicalpt.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On malloc, a new internal page table may be allocated.&lt;/p&gt;

&lt;h4 id=&quot;address-split&quot;&gt;Address split:&lt;/h4&gt;

&lt;table&gt;
  &lt;tr&gt;
    &lt;th colspan=&quot;2&quot;&gt;Page Number&lt;/th&gt;
    &lt;th&gt;offset&lt;/th&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;P1&lt;/td&gt;
    &lt;td&gt;P2&lt;/td&gt;
    &lt;td&gt;d&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;12&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
    &lt;td&gt;10&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;inner table addresses =&amp;gt; 2^10 * page_size = 2^10*2^10 = 1MB&lt;/li&gt;
  &lt;li&gt;don’t need an inner table for each 1MB virtual memory gap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additional Layers&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;page table directory pointer (3rd level)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;page table directory map (4th level)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Important on 64 bit architectures&lt;/li&gt;
  &lt;li&gt;larger and more sparse =&amp;gt; larger gaps would save more internal page table components&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/hierarchicalpt2.png&quot; alt=&quot;hierarchicalpt2.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;tradeoffs-of-multilevel-page-tables&quot;&gt;Tradeoffs of Multilevel Page Tables&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Smaller internal page tables/directories&lt;/li&gt;
  &lt;li&gt;Granularity of coverage
    &lt;ul&gt;
      &lt;li&gt;Potentially reduced page table size&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;More memory accesses required for translation&lt;/li&gt;
  &lt;li&gt;increased translation latency&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;overheads-of-address-translation&quot;&gt;Overheads of Address Translation&lt;/h2&gt;

&lt;p&gt;For each memory reference :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Single level page table&lt;/th&gt;
      &lt;th&gt;Four level page table&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;x1 access to PTE&lt;/td&gt;
      &lt;td&gt;x4 accesses to PTE&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;x1 access to mem&lt;/td&gt;
      &lt;td&gt;x1 access to mem&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;which results in slowdown.&lt;/p&gt;

&lt;h2 id=&quot;page-table-cache&quot;&gt;Page Table Cache&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/ptcache.png&quot; alt=&quot;ptcache.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;translation-lookaside-buffer&quot;&gt;Translation Lookaside Buffer&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;MMU level address translation cache&lt;/li&gt;
  &lt;li&gt;On TLB miss =&amp;gt; page table access from memory&lt;/li&gt;
  &lt;li&gt;has protection/validity bits&lt;/li&gt;
  &lt;li&gt;small number of cached address =&amp;gt; high TLB hit rate
    &lt;ul&gt;
      &lt;li&gt;temporal and spatial locality&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Example
    &lt;ul&gt;
      &lt;li&gt;x86 Core i7
  	- per core : 64-entry data TLB &lt;br /&gt; 128-entry instruction TLB
        &lt;ul&gt;
          &lt;li&gt;512-entry shared second-level TLB&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;inverted-page-tables&quot;&gt;Inverted Page Tables&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/invertedpt.png&quot; alt=&quot;invertedpt.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;hashing-page-tables&quot;&gt;Hashing Page Tables&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/hashingpt.png&quot; alt=&quot;hashingpt.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;segmentation&quot;&gt;Segmentation&lt;/h2&gt;

&lt;p&gt;Segmentation is the process of mapping virtual to physical memory using segments.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Segments: arbitrary granularity (size)
    &lt;ul&gt;
      &lt;li&gt;e.g. code, heap, data, stack..&lt;/li&gt;
      &lt;li&gt;address = segment - selector + offset&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Segment
    &lt;ul&gt;
      &lt;li&gt;contiguous physical memory&lt;/li&gt;
      &lt;li&gt;segment size = segment base + limit registers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/segmentation.png&quot; alt=&quot;segmentation.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;segmentation--paging&quot;&gt;Segmentation + Paging&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/segmentationpaging.png&quot; alt=&quot;segmentationpaging.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;page-size&quot;&gt;Page Size&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;10 bit offset =&amp;gt; 1 KB page size [2^10]&lt;/li&gt;
  &lt;li&gt;12 bit offset =&amp;gt; 4 KB page size [2^12]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In real world examples,&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Linux/x86 : 4 KB, 2MB, 1GB&lt;/li&gt;
  &lt;li&gt;Solaris/Sparse: 8kB, 4MB, 2GB&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;Large&lt;/th&gt;
      &lt;th&gt;Huge&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;page size&lt;/td&gt;
      &lt;td&gt;2 MB&lt;/td&gt;
      &lt;td&gt;1 GB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;offset bits&lt;/td&gt;
      &lt;td&gt;21 bits&lt;/td&gt;
      &lt;td&gt;30 bits&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;reduction factor on page table size&lt;/td&gt;
      &lt;td&gt;x512&lt;/td&gt;
      &lt;td&gt;x1024&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;larger pages
    &lt;ul&gt;
      &lt;li&gt;fewer page table entries, smaller page tables, more TLB hits&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;internal fragmentation =&amp;gt; wastes memory&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memory-allocation&quot;&gt;Memory Allocation&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Memory allocator
    &lt;ul&gt;
      &lt;li&gt;determines VA to PA mapping&lt;/li&gt;
      &lt;li&gt;address translation, page tables
  	=&amp;gt; simply determine PA from VA and check validity/permsissions&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Kernel Level Allocators
    &lt;ul&gt;
      &lt;li&gt;kernel state, static process state&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;User Level Allocators
    &lt;ul&gt;
      &lt;li&gt;dynamic process state (heap), malloc/free&lt;/li&gt;
      &lt;li&gt;e.g. d/malloc, jemalloc, Hoard, tcmalloc&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;demand-paging&quot;&gt;Demand Paging&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Virtual Memory » Physical Memory
    &lt;ul&gt;
      &lt;li&gt;virtual memory page is not always in physical memory&lt;/li&gt;
      &lt;li&gt;physical page frame saved and restored to/from secondary storage&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;demand-paging-1&quot;&gt;Demand paging:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;pages swapped in/out of memory &amp;amp; a swap partition (e.g. on a disk)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/demandpaging.png&quot; alt=&quot;demandpaging.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Original PA != PA after swapping
    &lt;ul&gt;
      &lt;li&gt;if page is “pinned”, swapping is disabled&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;when-pages-should-be-swapped&quot;&gt;When pages should be swapped?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;page(out) daemon&lt;/li&gt;
  &lt;li&gt;when memory usage is above threshold&lt;/li&gt;
  &lt;li&gt;when CPU usage is below threshold&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;which-page-should-be-swapped-out&quot;&gt;Which page should be swapped out?&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;pages that won’t be used&lt;/li&gt;
  &lt;li&gt;history based prediction
    &lt;ul&gt;
      &lt;li&gt;Least Recently Used (LRU policy). Access bit tracks if page is referenced.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;page that don’t need to be written out
    &lt;ul&gt;
      &lt;li&gt;Dirty bit to track if modified&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;avoid non-swappable pages&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;checkpointing&quot;&gt;Checkpointing&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Failure and Recovery management technique
    &lt;ul&gt;
      &lt;li&gt;periodically save process state&lt;/li&gt;
      &lt;li&gt;failure may be unavoidable but can restart from checkpoint, so recovery would be faster&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;simple-approach&quot;&gt;Simple Approach&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;pause and save&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;better-approach&quot;&gt;Better Approach&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;write-protect and copy everything at once&lt;/li&gt;
  &lt;li&gt;copy diffs of dirties pages for incremental checkpoints
    &lt;ul&gt;
      &lt;li&gt;rebuild from multiple diffs, or in background&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Checkpointing can also be used in other services:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Debugging
    &lt;ul&gt;
      &lt;li&gt;Rewind-Replay&lt;/li&gt;
      &lt;li&gt;rewind = restart from checkpoint&lt;/li&gt;
      &lt;li&gt;gradually go back to earlier checkpoints until error is found&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Migration
    &lt;ul&gt;
      &lt;li&gt;continue on another machine&lt;/li&gt;
      &lt;li&gt;disaster recovery&lt;/li&gt;
      &lt;li&gt;consolidation&lt;/li&gt;
      &lt;li&gt;repeated checkpoints in a fast loop until pause and copy becomes acceptable (or unavoidable)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;inter-process-communication-1&quot;&gt;Inter Process Communication&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Processes share memory
    &lt;ul&gt;
      &lt;li&gt;data in shared messages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Processes exchange messages
    &lt;ul&gt;
      &lt;li&gt;message passing via sockets&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Requires synchronization
    &lt;ul&gt;
      &lt;li&gt;mutex, waiting&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Inter Process Communication&lt;/strong&gt;(IPC) is an OS supported mechanism for interaction among processes (coordination and communication)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Message Passing
    &lt;ul&gt;
      &lt;li&gt;e.g. sockets, pips, msgs, queues&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Memory based IPC
    &lt;ul&gt;
      &lt;li&gt;shared memory, memory mapped files&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Higher level semantics
    &lt;ul&gt;
      &lt;li&gt;files, &lt;a href=&quot;10-Remote-Procedure-Calls.md&quot;&gt;RPC&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Synchronization primitives&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;message-passing&quot;&gt;Message Passing&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Send/Receive messages&lt;/li&gt;
  &lt;li&gt;OS creates and maintains a channel
    &lt;ul&gt;
      &lt;li&gt;buffer, FIFO queue&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OS provides interfaces to processes
    &lt;ul&gt;
      &lt;li&gt;a port&lt;/li&gt;
      &lt;li&gt;processes send/write messages to this port&lt;/li&gt;
      &lt;li&gt;processes receive/read messages from this port&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/messagepassingipc.png&quot; alt=&quot;messagepassingipc.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Kernel required to
    &lt;ul&gt;
      &lt;li&gt;establish communication&lt;/li&gt;
      &lt;li&gt;perform each IPC operation&lt;/li&gt;
      &lt;li&gt;send: system call + data copy&lt;/li&gt;
      &lt;li&gt;receive: system call + data copy&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Request-response:
  4x user/ kernel crossings + &lt;br /&gt;
  4x data copies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;simplicity : kernel does channel management and synchronization&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Overheads&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;forms-of-message-passing-ipc&quot;&gt;Forms of Message Passing IPC&lt;/h3&gt;

&lt;h4 id=&quot;1-pipes&quot;&gt;1. Pipes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Carry byte stream between 2 process&lt;/li&gt;
  &lt;li&gt;e.g connect output from 1 process to input of another&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/pipes.png&quot; alt=&quot;pipes.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-message-queues&quot;&gt;2. Message queues&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Carry “messages” among processes&lt;/li&gt;
  &lt;li&gt;OS management includes priorities, scheduling of message delivery&lt;/li&gt;
  &lt;li&gt;APIs : Sys-V and POSIX&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/msgq.png&quot; alt=&quot;msgq.png&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-sockets&quot;&gt;3. Sockets&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;send() and recv() : pass message buffers&lt;/li&gt;
  &lt;li&gt;socket() : create kernel level socket buffer&lt;/li&gt;
  &lt;li&gt;associated neccessary kernel processing (TCP-IP,..)&lt;/li&gt;
  &lt;li&gt;If different machines, channel between processes and network devices&lt;/li&gt;
  &lt;li&gt;If same machine, bypass full protocol stack&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/sockets.png&quot; alt=&quot;sockets.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;shared-memory-ipc&quot;&gt;Shared Memory IPC&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;read and write to shared memory region&lt;/li&gt;
  &lt;li&gt;OS establishes shared channel between the processes
    &lt;ol&gt;
      &lt;li&gt;physical pages mapped into virtual address space&lt;/li&gt;
      &lt;li&gt;VA(P1) and VA(P2) map to same physical address&lt;/li&gt;
      &lt;li&gt;VA(P1) != VA(P2)&lt;/li&gt;
      &lt;li&gt;physical mempry doesn’t need to be contiguous&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;APIs : SysV, POSIX, memory mapped files, Android ashmem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/sharedmemoryipc.png&quot; alt=&quot;sharedmemoryipc.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;System calls only for setup data copies potentially reduced (but not eliminated)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disdvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;explicit synchronization&lt;/li&gt;
  &lt;li&gt;communication protocol, shared buffer management
    &lt;ul&gt;
      &lt;li&gt;programmer’s responsibility&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;which-is-better&quot;&gt;Which is better?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Overheads for&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Message Passing : must perform multiple copies&lt;/li&gt;
  &lt;li&gt;Shared Memory : must establish all mappings among processes’ address space and shared memory pages&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Thus, it depends.&lt;/p&gt;

&lt;h2 id=&quot;copy-vs-map&quot;&gt;Copy vs Map&lt;/h2&gt;

&lt;p&gt;Goal for both is to transfer data from one into target saddress space&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Copy (Message Passing)&lt;/th&gt;
      &lt;th&gt;Map (Shared Memory)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;CPU cycles to copy data to/from port&lt;/td&gt;
      &lt;td&gt;CPU cycles to map memory into address space&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;CPU to copy data to channel&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;If channel setup once, use many times (good payoff)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Can perform well for 1 time use&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Large Data: t(Copy) » t(Map)
    &lt;ul&gt;
      &lt;li&gt;e.g. tradeoff exercised in Window “Local” Procedure Calls (LPC)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;shared-memory-and-synchronization&quot;&gt;Shared Memory and Synchronization&lt;/h2&gt;

&lt;p&gt;Use threads accessing shared state in a single addressing space, but for process&lt;/p&gt;

&lt;p&gt;Synchronization method:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;mechanism supported by processing threading library (pthreads)&lt;/li&gt;
  &lt;li&gt;OS supported IPC for sync&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Either method must coordinate&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;no of concurrent access to shared segment&lt;/li&gt;
  &lt;li&gt;when data is available and ready for consumption&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ipc-synchronization&quot;&gt;IPC Synchronization&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Message Queues&lt;/th&gt;
      &lt;th&gt;Semaphores&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Implement “mutual exclusion” via send/receive&lt;/td&gt;
      &lt;td&gt;OS supported synchronization construct&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;binary construct (either allow process or not)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Like mutex, if value = 0, stop; if value = 1, decrement(lock) and proceed&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;synchronization&quot;&gt;Synchronization&lt;/h1&gt;

&lt;p&gt;Waiting for other processes, so that they can continue working together&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;may repeatedly check to continue
    &lt;ul&gt;
      &lt;li&gt;sync using spinlocks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;may wait for a signal to continue
    &lt;ul&gt;
      &lt;li&gt;sync using mutexes and condition vatiables&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;waiting hurts performance
    &lt;ul&gt;
      &lt;li&gt;CPUs wste cycles for checking; cache effects&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;limitation-of-mutextes-and-condition-variables&quot;&gt;Limitation of mutextes and condition variables&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Error prone/correctness/ease of use
    &lt;ul&gt;
      &lt;li&gt;unlock wrong mutex, signal wrong condition variable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Lack of expressive power
    &lt;ul&gt;
      &lt;li&gt;helper variables for access or priority control&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Low-level support: hardware atmoic instructions&lt;/p&gt;

&lt;h2 id=&quot;synchronization-constructs&quot;&gt;Synchronization constructs&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Spinlocks (basic sync construct)
    &lt;ul&gt;
      &lt;li&gt;Spinlock is like a mutex 
 	- mutual exclusion
        &lt;ul&gt;
          &lt;li&gt;lock and unlock(free)&lt;/li&gt;
          &lt;li&gt;but, lock == busy =&amp;gt; spinning&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Semaphores
    &lt;ul&gt;
      &lt;li&gt;common sync construct in OS kernels&lt;/li&gt;
      &lt;li&gt;like a traffic light: Stop and Go&lt;/li&gt;
      &lt;li&gt;like mutex, but more general&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Semaphore == integer value&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;on init
    &lt;ul&gt;
      &lt;li&gt;assigned a max value (positive int) =&amp;gt; max count&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;on try(wait)
    &lt;ul&gt;
      &lt;li&gt;if non-zero, decrement and proceed =&amp;gt; counting semaphore&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if initialized with 1
    &lt;ul&gt;
      &lt;li&gt;semaphore == mutex(binary semaphore)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;on exit(post)
    &lt;ul&gt;
      &lt;li&gt;increment&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;syncing-different-types-of-accesses&quot;&gt;Syncing different types of accesses&lt;/h2&gt;

&lt;h3 id=&quot;readerwriter-locks&quot;&gt;Reader/Writer locks&lt;/h3&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;read (don't modify)&lt;/td&gt;
&lt;td&gt;write (always modify)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shared access&lt;/td&gt;
&lt;td&gt;exclusive access&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;RW locks
    &lt;ul&gt;
      &lt;li&gt;specify type of access, then lock behaves accordingly&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;monitors-highlevel-construct&quot;&gt;Monitors (highlevel construct)&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;shared resource&lt;/li&gt;
  &lt;li&gt;entry resource&lt;/li&gt;
  &lt;li&gt;possible condition variables&lt;/li&gt;
  &lt;li&gt;On entry:
    &lt;ul&gt;
      &lt;li&gt;lock, check&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;On exit:
    &lt;ul&gt;
      &lt;li&gt;unlock, check, signal&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;more-synchroniaztion-constructs&quot;&gt;More synchroniaztion constructs&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;serializers&lt;/li&gt;
  &lt;li&gt;path expressions&lt;/li&gt;
  &lt;li&gt;barriers&lt;/li&gt;
  &lt;li&gt;rendezvous points&lt;/li&gt;
  &lt;li&gt;optimistic wait-free sync (RCU) [Read Copy Update]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All need hardware support.&lt;/p&gt;

&lt;h2 id=&quot;need-for-hardware-support&quot;&gt;Need for hardware support&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Problem
    &lt;ul&gt;
      &lt;li&gt;concurrent check/update on different CPUs can overlap&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;atomic-instructions&quot;&gt;Atomic instructions&lt;/h3&gt;
&lt;p&gt;Critical section with hardware supported synchronization&lt;/p&gt;

&lt;h4 id=&quot;hardware-specific&quot;&gt;Hardware specific&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;test-and-set
    &lt;ul&gt;
      &lt;li&gt;returns(tests) original values and sets new-value!= 1 (busy) automatically&lt;/li&gt;
      &lt;li&gt;first thread: test-and-set(lock) =&amp;gt; 0 : free&lt;/li&gt;
      &lt;li&gt;next ones: test-and-set(lock) =&amp;gt; 1 busy
  	- reset lock to 1, but that’s okay&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; : Latency&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; : minimal (Atomic)&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; : Delay potentially min&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; : Contention processors go to memory on each spin 
     - To reduce contention, introduce delay
 	  - Static(based on a fixed value) or Dynamic(backoff based, random delay)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;read-and-increment&lt;/li&gt;
  &lt;li&gt;compare-and-swap&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;guarantees&quot;&gt;Guarantees&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;atomicity&lt;/li&gt;
  &lt;li&gt;mutual exclusion&lt;/li&gt;
  &lt;li&gt;queue all concurrent instructions but one&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;shared-memory-multiprocessors&quot;&gt;Shared Memory Multiprocessors&lt;/h3&gt;

&lt;p&gt;Also called symmetric multiprocessors (SMP)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/sharedmmmp.png&quot; alt=&quot;sharedmmmp&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Caches
    &lt;ul&gt;
      &lt;li&gt;hide memory latency, “memory” further away due to contention&lt;/li&gt;
      &lt;li&gt;no-write, write-through, write-back&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;cache-coherence&quot;&gt;Cache Coherence&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/cachecoherence.png&quot; alt=&quot;cachecoherence&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/cachecoherence2.png&quot; alt=&quot;cachecoherence2&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# I/O Management
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Operating system&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Has protocols
    &lt;ul&gt;
      &lt;li&gt;Interfaces for device I/O&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Has dedicated handlers
    &lt;ul&gt;
      &lt;li&gt;Device drivers, interrupt handlers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Decouple I/O details from core processing
    &lt;ul&gt;
      &lt;li&gt;abstract I/O device detail from applications&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;io-device-features&quot;&gt;I/O Device Features&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Control registers (accessed by CPU)
    &lt;ul&gt;
      &lt;li&gt;Command&lt;/li&gt;
      &lt;li&gt;Data Transfers&lt;/li&gt;
      &lt;li&gt;Status&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Microcontroller : device’s CPU&lt;/li&gt;
  &lt;li&gt;On device memory&lt;/li&gt;
  &lt;li&gt;Other logic
    &lt;ul&gt;
      &lt;li&gt;e.g. analog to digital&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;device-drivers&quot;&gt;Device drivers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;per each device type&lt;/li&gt;
  &lt;li&gt;responsible for device access management and control&lt;/li&gt;
  &lt;li&gt;provided by device manufacturers per OS /version&lt;/li&gt;
  &lt;li&gt;each OS standardizes interfaces
    &lt;ul&gt;
      &lt;li&gt;device independence&lt;/li&gt;
      &lt;li&gt;device diversity&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;types-of-devices&quot;&gt;Types of devices&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Block
    &lt;ul&gt;
      &lt;li&gt;e.g. disk&lt;/li&gt;
      &lt;li&gt;read/write blocks of data&lt;/li&gt;
      &lt;li&gt;direct access to arbitrary block&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Character
    &lt;ul&gt;
      &lt;li&gt;e.g. keyboard&lt;/li&gt;
      &lt;li&gt;get/put character&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Network devices&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OS representation of a device : special device file&lt;/p&gt;

&lt;p&gt;UNIX like systems:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/dev&lt;/li&gt;
  &lt;li&gt;tmpfs&lt;/li&gt;
  &lt;li&gt;devfs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Linux supports a number of pseudo “virtual” devices that provide special functionality to a system.&lt;/p&gt;

&lt;h2 id=&quot;cpu-device-interactions&quot;&gt;CPU device interactions&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/iointeractions.png&quot; alt=&quot;iointeractions.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;access device registers : memory load/store&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Memory mapped I/0
    &lt;ul&gt;
      &lt;li&gt;part of ‘host’ physical memory dedicated for device interactions&lt;/li&gt;
      &lt;li&gt;Base Address Registers (BAR)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I/O Port
    &lt;ul&gt;
      &lt;li&gt;dedicated in low instructions for device access&lt;/li&gt;
      &lt;li&gt;target device (I/0 port) and value in register&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;path-from-device-to-cpu&quot;&gt;Path from Device to CPU&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Interrupt
    &lt;ul&gt;
      &lt;li&gt;Overhead: Interrupt handling steps&lt;/li&gt;
      &lt;li&gt;+: Can be generated as soon as possible&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Polling
    &lt;ul&gt;
      &lt;li&gt;Overhead: Delay or CPU overhead&lt;/li&gt;
      &lt;li&gt;when convenient for OS&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;device-access--programmed-io-pio&quot;&gt;Device access : Programmed I/O (PIO)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;No additional hardware support&lt;/li&gt;
  &lt;li&gt;CPU “programs” the device
    &lt;ul&gt;
      &lt;li&gt;via command registers&lt;/li&gt;
      &lt;li&gt;data movement&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;E.g. NIC(Network Interface Card)
    &lt;ul&gt;
      &lt;li&gt;data = network packet&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Write command to request packet information&lt;/li&gt;
  &lt;li&gt;Copy packet to data registers&lt;/li&gt;
  &lt;li&gt;Repeat until packet sent&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E.g. 1500B packet; 8 byte registers or bus =&amp;gt; 1(for bus command) + 188(for data) = 189 CPU store instructions&lt;/p&gt;

&lt;h2 id=&quot;direct-memory-access-dma&quot;&gt;Direct Memory Access (DMA)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Relies on DMA controller&lt;/li&gt;
  &lt;li&gt;CPU “programs” the device
    &lt;ul&gt;
      &lt;li&gt;via command registers&lt;/li&gt;
      &lt;li&gt;via DMA controls&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;E.g. NIC (data = network packet)&lt;/li&gt;
  &lt;li&gt;Write command to request packet information&lt;/li&gt;
  &lt;li&gt;Configure DMA controller with in memory address and size of packet buffer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;E.g. 1500B packet; 8 byte registers or bus =&amp;gt; 1(for bus command) + 1(for DMA configuration) = total 2 CPU store instructions. Less steps, but DMA configuration is more complex.&lt;/p&gt;

&lt;p&gt;For DMAs&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;data buffer must be in physical memory until transfer completes&lt;/li&gt;
  &lt;li&gt;pinning regions (non-swappable)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;typical-device-access&quot;&gt;Typical Device Access&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/typicaldeviceaccess.png&quot; alt=&quot;typicaldeviceaccess.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;System call&lt;/li&gt;
  &lt;li&gt;In-kernel stack&lt;/li&gt;
  &lt;li&gt;Driver Invocation&lt;/li&gt;
  &lt;li&gt;Device request configuration&lt;/li&gt;
  &lt;li&gt;Device performs request&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;os-bypass&quot;&gt;OS bypass&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/osbypass.png&quot; alt=&quot;osbypass.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;device registers/data
    &lt;ul&gt;
      &lt;li&gt;directly available&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OS configures
    &lt;ul&gt;
      &lt;li&gt;then gets out of the way&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;“user level driver”
    &lt;ul&gt;
      &lt;li&gt;in library&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;OS retains coarse-grain control&lt;/li&gt;
  &lt;li&gt;relies on device features
    &lt;ul&gt;
      &lt;li&gt;sufficient registers&lt;/li&gt;
      &lt;li&gt;demux capability&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-happens-to-a-calling-thread&quot;&gt;What happens to a calling thread?&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/access.png&quot; alt=&quot;access.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Synchronous I/O operations
    &lt;ul&gt;
      &lt;li&gt;process blocks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Asynchronous I/O operations
    &lt;ul&gt;
      &lt;li&gt;process continues&lt;/li&gt;
      &lt;li&gt;Later, process checks and retrieves result&lt;/li&gt;
      &lt;li&gt;OR&lt;/li&gt;
      &lt;li&gt;process is notified that operation is completed and results are ready&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;block-device-stack&quot;&gt;Block Device Stack&lt;/h2&gt;

&lt;p&gt;Block device typical storage for files:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/blockdevicestack.png&quot; alt=&quot;blockdevicestack.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;processes use files =&amp;gt; logical storage unit&lt;/li&gt;
  &lt;li&gt;kernel file system (KFS)
    &lt;ul&gt;
      &lt;li&gt;where how to find and access file&lt;/li&gt;
      &lt;li&gt;OS specifies interface&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;generic block layer
    &lt;ul&gt;
      &lt;li&gt;OS standardized block interface&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Device driver&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;virtual-file-system&quot;&gt;Virtual File System&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/vfs.png&quot; alt=&quot;vfs.png&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;virtual-file-system-abstractions&quot;&gt;Virtual File System Abstractions&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;File : Elements on which the VFS operates&lt;/li&gt;
  &lt;li&gt;File Descriptor : OS representation of file
    &lt;ul&gt;
      &lt;li&gt;open, read, write, send file , lock, close&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;inode : Persistent representation of file “index”
    &lt;ul&gt;
      &lt;li&gt;list of all data blocks&lt;/li&gt;
      &lt;li&gt;device, permissions, size&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;dentry : Directory entry, corresponding to the single path component,
    &lt;ul&gt;
      &lt;li&gt;dentry cache&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;super block : file system specific information regarding the File System layout&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;vfs-on-disk&quot;&gt;VFS on disk&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;File : data blocks on disk&lt;/li&gt;
  &lt;li&gt;inode : track file blocks
    &lt;ul&gt;
      &lt;li&gt;also resides on disk in some block&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;super block : overall map of disk blocks
    &lt;ul&gt;
      &lt;li&gt;inode blocks&lt;/li&gt;
      &lt;li&gt;data blocks&lt;/li&gt;
      &lt;li&gt;free blocks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;inodes&quot;&gt;Inodes&lt;/h3&gt;

&lt;p&gt;Index of all disk blocks corresponding to a file&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;File : identified by inode&lt;/li&gt;
  &lt;li&gt;inode : list of all blocks + other metadata&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt;: Easy to perform sequential or random access&lt;br /&gt;
&lt;strong&gt;-&lt;/strong&gt;: Limit on file size&lt;/p&gt;

&lt;h3 id=&quot;inodes-with-indirect-pointers&quot;&gt;Inodes with indirect pointers&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Index of all disk blocks corresponding to a file&lt;/li&gt;
  &lt;li&gt;Index contain:
    &lt;ul&gt;
      &lt;li&gt;metadata&lt;/li&gt;
      &lt;li&gt;pointers to blocks&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Direct pointer : Points to data block
    &lt;ul&gt;
      &lt;li&gt;1 KB per entry&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Indirect pointer : Points to block of pointers
    &lt;ul&gt;
      &lt;li&gt;256 KB per entry&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Double Indirect pointer : Points to block of block of pointers
    &lt;ul&gt;
      &lt;li&gt;64 MB per entry&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt;: Small inode =&amp;gt; large file size&lt;br /&gt;
&lt;strong&gt;-&lt;/strong&gt;: File access slowdown&lt;/p&gt;

&lt;h2 id=&quot;disk-access-optimizations&quot;&gt;Disk access optimizations&lt;/h2&gt;

&lt;p&gt;Reducing file access overheads&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Caching/buffering : reducenumber of disk accesses
    &lt;ul&gt;
      &lt;li&gt;buffer cache in main menu&lt;/li&gt;
      &lt;li&gt;read/write from cache&lt;/li&gt;
      &lt;li&gt;periodically flush to disk - fsync()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;I/O scheduling : reduce disk head movement
    &lt;ul&gt;
      &lt;li&gt;maximize sequential vs random access&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Prefetching : increases cache hits
    &lt;ul&gt;
      &lt;li&gt;leverages locality&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Journaling/logging: reduce random access (ext3, ext4)
    &lt;ul&gt;
      &lt;li&gt;“describe” write in log : block, offset, value..&lt;/li&gt;
      &lt;li&gt;periodically apply updates to proper disk locations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# Virtualization
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Virtualization allows concurrent execution of multiple OSs and their applications on the same physical machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/virtualization.png&quot; alt=&quot;virtualization.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Virtual resources : each OS thinks that ot “owns” hardware resources&lt;/li&gt;
  &lt;li&gt;Virtual machine (VM) : OS + applications + virtual resources (guest domain)&lt;/li&gt;
  &lt;li&gt;Virtualization layer : management of physical hardware (virtual machine monitor, hypervisor)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;defining-virtual-machine&quot;&gt;Defining Virtual Machine&lt;/h2&gt;

&lt;p&gt;A Virtual Machine is an efficient, isolated duplicate of the real machine.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Supported by a Virtual Machine Monitor (VMM):
    &lt;ol&gt;
      &lt;li&gt;provides environment essentially identical with the original machine&lt;/li&gt;
      &lt;li&gt;programs show only minor decrease in speed at worst&lt;/li&gt;
      &lt;li&gt;VMM is in complete control of the system resources&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;vmm-goals&quot;&gt;VMM goals&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Fidelity&lt;/li&gt;
  &lt;li&gt;Performance&lt;/li&gt;
  &lt;li&gt;Safety and Isolation&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;virtualization-advantages&quot;&gt;Virtualization advantages&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;consolidation
    &lt;ul&gt;
      &lt;li&gt;decrease cost, improve manageability&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;migration
    &lt;ul&gt;
      &lt;li&gt;availibility, reliability&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;security, debugging, support for legacy OS&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;two-main-virtualization-models&quot;&gt;Two main Virtualization Models:&lt;/h2&gt;

&lt;h3 id=&quot;1-bare-metal-or-hypervisor-based-type-1&quot;&gt;1. Bare-metal or Hypervisor based (Type 1)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/hypervisor.png&quot; alt=&quot;hypervisor.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VMM (hypervisor) manages all hardware resources abd supports execution of VMs&lt;/li&gt;
  &lt;li&gt;privileged, secure VM to deal with devices (and other configuration and management tasks)&lt;/li&gt;
  &lt;li&gt;Adopted by Xen(Opensource or Citriol Xen Server) and ESX (VMware)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-hosted-type-2&quot;&gt;1. Hosted (Type 2)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/hosted.png&quot; alt=&quot;hosted.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Host owns all hardware&lt;/li&gt;
  &lt;li&gt;Special VMM modle provides hardware interfaces to VMs and deals with VM context switching&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;virtualization-requirements&quot;&gt;Virtualization requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Present virtual platform interface to VMs
    &lt;ul&gt;
      &lt;li&gt;virtualize CPU, memory, devices&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Provide isolation across VMs
    &lt;ul&gt;
      &lt;li&gt;preemption, MMU for address translation and validation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Protect guest OS from applications
    &lt;ul&gt;
      &lt;li&gt;can’t run guest OS and applications at same protection level&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Protect VMs from guest OS
    &lt;ul&gt;
      &lt;li&gt;can’t run guest OS and VMMs at same protection level&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hardware-protection-levels&quot;&gt;Hardware protection levels&lt;/h2&gt;

&lt;p&gt;Commodity hardware has more than two protection levels&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/hwprotectionlevels.png&quot; alt=&quot;hwprotectionlevels&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;x86 has 4 protection levels (rings)
    &lt;ul&gt;
      &lt;li&gt;ring 3 : lowest privilege (applications)&lt;/li&gt;
      &lt;li&gt;ring 1 : OS&lt;/li&gt;
      &lt;li&gt;ring 0 : highest privilege (hypervisor)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;and 2 protection modes
    &lt;ul&gt;
      &lt;li&gt;non root : VMs 
  	- ring 3 : apps
        &lt;ul&gt;
          &lt;li&gt;ring 0 : OS&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;root : 
  	- ring 0 : hypervisor&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process-virtualization-trap-and-emulate&quot;&gt;Process Virtualization (Trap-and-Emulate)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Guest instruments
    &lt;ul&gt;
      &lt;li&gt;executed directly by hardware&lt;/li&gt;
      &lt;li&gt;for non-privileged operations : hardware speeds =&amp;gt; efficiency&lt;/li&gt;
      &lt;li&gt;for privileged operations : trap to hypervisor&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hypervisor determines what needs to be done:
    &lt;ul&gt;
      &lt;li&gt;if illegal operation : terminate VM&lt;/li&gt;
      &lt;li&gt;if legal operation : emulate the behaviour the guest OS was expecting from the hardware&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;problems-with-trap-and-emulate&quot;&gt;Problems with Trap-and-Emulate&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;17 privileged information do not trao but fail silently&lt;/li&gt;
  &lt;li&gt;Hypervisor doesn’t know, so it doesn’t try to change settings&lt;/li&gt;
  &lt;li&gt;OS doesn’t know, so assumes change was successful&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;binary-translation&quot;&gt;Binary Translation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt; : Full Virtualization i.e. guest OS is not modified&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt; : Dynamic Binary Translation&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Inspect code blocks to be executed&lt;/li&gt;
  &lt;li&gt;If needed, translate to alternate instruction sequence
    &lt;ul&gt;
      &lt;li&gt;e.g. to emulate desired behaviour, possibly avoid traps&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Otherwise run at hardware speeds
    &lt;ul&gt;
      &lt;li&gt;cache translated blocks to ammortize translation costs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;paravirtualization&quot;&gt;Paravirtualization&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Goal&lt;/strong&gt; : Performance; give up on modified guest OSs&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Approach&lt;/strong&gt; : Paravirtualization : modify guest OSs so that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it knows it is running virtualized&lt;/li&gt;
  &lt;li&gt;it makes explicit calls to hyperisor (hypercalls)&lt;/li&gt;
  &lt;li&gt;hypercalls (~ system calls)
    &lt;ul&gt;
      &lt;li&gt;package context information&lt;/li&gt;
      &lt;li&gt;specify desired hypercall&lt;/li&gt;
      &lt;li&gt;trap to VMM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Xen : opensource hypervisor&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;memory-virtualization&quot;&gt;Memory virtualization&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Full virtualization
    &lt;ul&gt;
      &lt;li&gt;all guests expect contiguous physical memory starting at 0&lt;/li&gt;
      &lt;li&gt;virtual vs physical vs machine addresses and page frame numbers&lt;/li&gt;
      &lt;li&gt;still leverages hardware (MMU, TLB..)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Option 1
    &lt;ul&gt;
      &lt;li&gt;guest page table : VA =&amp;gt; PA&lt;/li&gt;
      &lt;li&gt;hypervisor : PA =&amp;gt; MA&lt;/li&gt;
      &lt;li&gt;too expensive!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Option 2
    &lt;ul&gt;
      &lt;li&gt;guest page tables : VA =&amp;gt; PA&lt;/li&gt;
      &lt;li&gt;hypervisor shadow PT : VA =&amp;gt; MA&lt;/li&gt;
      &lt;li&gt;hypervisor maintains consistence
  	- e.g. invalidate on context switch, write protect guest PT to track new mappings&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Paravirtualized
    &lt;ul&gt;
      &lt;li&gt;guest aware of virtualization&lt;/li&gt;
      &lt;li&gt;no longer strict requirement on contiguous physical memory starting at 0&lt;/li&gt;
      &lt;li&gt;explicitly registers page tables with hypervisor&lt;/li&gt;
      &lt;li&gt;can “batch” page tables updates to reduce VM exits&lt;/li&gt;
      &lt;li&gt;other optimazations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Overheads eliminated or reduced on newer platforms&lt;/p&gt;

&lt;h2 id=&quot;device-virtualization&quot;&gt;Device Virtualization&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;For CPUs and Memory
    &lt;ul&gt;
      &lt;li&gt;less diversity, Intruction-Set-Architecture(ISA) level&lt;/li&gt;
      &lt;li&gt;Standardization of interface&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;For Devices
    &lt;ul&gt;
      &lt;li&gt;high diversity&lt;/li&gt;
      &lt;li&gt;lack of standard specification of device interface and behaviour&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;3-key-models-for-device-virtualization&quot;&gt;3 key models for Device Virtualization:&lt;/h4&gt;

&lt;h3 id=&quot;1-pass-through-model&quot;&gt;1. Pass through model&lt;/h3&gt;

&lt;p&gt;Approach: VMM-level-driver configures device access permissions&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/passthrough.png&quot; alt=&quot;passthrough.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VM provided with exclusive and direct (VMM bypass) access to the device&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Device sharing difficult&lt;/li&gt;
  &lt;li&gt;VMM must have exact type of device as what VM expects&lt;/li&gt;
  &lt;li&gt;VM migration tricky&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-hypervisor---direct-model&quot;&gt;2. Hypervisor - Direct model&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VMM interrupts all device accesses&lt;/li&gt;
  &lt;li&gt;Emulate device operations
    &lt;ul&gt;
      &lt;li&gt;translate to generic I/O operations&lt;/li&gt;
      &lt;li&gt;traverse VMM-resident I/O stack&lt;/li&gt;
      &lt;li&gt;invoke VMM-resident driver&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/hypervisordirect.png&quot; alt=&quot;hypervisordirect.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;VM decoupled from physical device&lt;/li&gt;
  &lt;li&gt;Sharing, migration, dealing with device specifics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Latency of device operations&lt;/li&gt;
  &lt;li&gt;Device driver ecosystem complexities in Hypervisor&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3-split-device-driver-model&quot;&gt;3. Split Device-Driver model&lt;/h3&gt;

&lt;p&gt;Approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Device access control split between&lt;/li&gt;
  &lt;li&gt;Emulate device operations
    &lt;ul&gt;
      &lt;li&gt;front-end driver in guest VM (device API)&lt;/li&gt;
      &lt;li&gt;back-end driver in service VM (or Host)&lt;/li&gt;
      &lt;li&gt;modified guest drivers
  	- i.e. limited to paravirtualized guests&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/splitdevicedriver.png&quot; alt=&quot;splitdevicedriver.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eliminate emulation overhead&lt;/li&gt;
  &lt;li&gt;Allow for better management of shared devices&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;remote-procedure-calls&quot;&gt;Remote Procedure Calls&lt;/h1&gt;

&lt;p&gt;Example : GetFile App&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Client Server&lt;/li&gt;
  &lt;li&gt;Create and init sockets&lt;/li&gt;
  &lt;li&gt;Allocate and populate buffers&lt;/li&gt;
  &lt;li&gt;Include ‘protocol’ info
    &lt;ul&gt;
      &lt;li&gt;GetFile, size&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Copy data into buffers
    &lt;ul&gt;
      &lt;li&gt;filename, file&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;common steps related to remote IPC&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;remote-procedure-calls-rpc&quot;&gt;Remote Procedure Calls (RPC)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Intended to simplify the development of cross address space and cross machine interactions&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt; Higher-level interface for data movement and communication&lt;br /&gt;
&lt;strong&gt;+&lt;/strong&gt; Error handling&lt;br /&gt;
&lt;strong&gt;+&lt;/strong&gt; Hiding complexities of cross machine interactions&lt;/p&gt;

&lt;h2 id=&quot;rpc-requirements&quot;&gt;RPC requirements&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/rpcrequirements.png&quot; alt=&quot;rpcrequirements&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Client/Server interactions&lt;/li&gt;
  &lt;li&gt;Procedure Call Interface =&amp;gt; RPC
    &lt;ul&gt;
      &lt;li&gt;sync call semantics&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Type checking
    &lt;ul&gt;
      &lt;li&gt;error handling&lt;/li&gt;
      &lt;li&gt;packet bytes interpretation&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Cross machine conversion
    &lt;ul&gt;
      &lt;li&gt;e.g. big/little endian&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Higher level protocol
    &lt;ul&gt;
      &lt;li&gt;access control, fault tolerance, different transport protocols&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;structure-of-rpc&quot;&gt;Structure of RPC&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/rpcstructure.png&quot; alt=&quot;rpcstructure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rpc-steps&quot;&gt;RPC Steps:&lt;/h2&gt;

&lt;p&gt;(-1.) register : server registers procedure, arg types, location&lt;br /&gt;
(0.) bind : client finds and binds to desired server&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;call : client make RPC call; control passed to stub, client code blocks&lt;/li&gt;
  &lt;li&gt;marshal : client stub “marshals” args (serialize args into buffer)&lt;/li&gt;
  &lt;li&gt;send : client sends message to server&lt;/li&gt;
  &lt;li&gt;receive : server receives message; passes message to server stub; access control&lt;/li&gt;
  &lt;li&gt;unmarshal : server stub “unmarshals” args (extract args from buffer)&lt;/li&gt;
  &lt;li&gt;actual call : server stub calls local procedure implementation&lt;/li&gt;
  &lt;li&gt;result : server performs operation and computes result of RPC operation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;(same on return &amp;lt;=)&lt;/p&gt;

&lt;h2 id=&quot;interface-definition-language-idl&quot;&gt;Interface definition Language (IDL)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Used to describe the interface the server expects
    &lt;ul&gt;
      &lt;li&gt;procedure name, args, 2 result types&lt;/li&gt;
      &lt;li&gt;version number&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;RPC can use IDL that is&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Language agnostic
    &lt;ul&gt;
      &lt;li&gt;XDR in SunRPC&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Language specific
    &lt;ul&gt;
      &lt;li&gt;Java in JavaRMI&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;marshalling&quot;&gt;Marshalling&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/marshalling.png&quot; alt=&quot;Marshalling&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;unmarshalling&quot;&gt;Unmarshalling&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/unmarshalling.png&quot; alt=&quot;Unmarshalling&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Marshalling/Unmarshalling routines are provided by RPC system compiler.&lt;/p&gt;

&lt;h2 id=&quot;binding-and-registry&quot;&gt;Binding and Registry&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Client determines
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;which&lt;/strong&gt; server to connect to?
  	- service name. version number&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;how&lt;/strong&gt; to connect to that server?
  	- IP address, network protocol&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Registry : database of available services
    &lt;ul&gt;
      &lt;li&gt;search for service name to find server(which) and contact details(how)&lt;/li&gt;
      &lt;li&gt;distributed 
  	- any RPC service can register&lt;/li&gt;
      &lt;li&gt;machine-specific
  	- for services running on same machine
        &lt;ul&gt;
          &lt;li&gt;clients must know machine addresses&lt;/li&gt;
          &lt;li&gt;registry provides port number needed for connection&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Who can provide a service?
    &lt;ul&gt;
      &lt;li&gt;lookup registry for image processing&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;What services do they provide?
    &lt;ul&gt;
      &lt;li&gt;compress/filter.. version number =&amp;gt; IDL&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;How will they ship package?
    &lt;ul&gt;
      &lt;li&gt;TCP / UDP -&amp;gt; registry&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;pointers&quot;&gt;Pointers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Procedure interface : foo(int,int)&lt;/li&gt;
  &lt;li&gt;in Local Calls : foo(x,y) =&amp;gt; okay&lt;/li&gt;
  &lt;li&gt;in Remote Calls : foo(x,y) =&amp;gt; ?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;here, y points to location in caller address space&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Solutions:
    &lt;ul&gt;
      &lt;li&gt;No pointers&lt;/li&gt;
      &lt;li&gt;Serialize pointers; copy referenced (“points to”) data structure to send buffer&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;handling-partial-failures&quot;&gt;Handling Partial Failures&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Special RPC error notification (signal, exception..)
    &lt;ul&gt;
      &lt;li&gt;Catch all possible ways in which RPC can (partially) fail&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rpc-design-choice&quot;&gt;RPC Design choice&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Binding =&amp;gt; How to find the server&lt;/li&gt;
  &lt;li&gt;IDL =&amp;gt; How to talk to server; how to package data&lt;/li&gt;
  &lt;li&gt;Pointers as args =&amp;gt; Disallow or serialize pointer data&lt;/li&gt;
  &lt;li&gt;Partial failures =&amp;gt; Special error notifications&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;distributed-file-systems&quot;&gt;Distributed File Systems&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Accessed via well defined interface
    &lt;ul&gt;
      &lt;li&gt;access via Virtual File Systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Focus on consistent state
    &lt;ul&gt;
      &lt;li&gt;tracking state, file update, cache coherence&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mixed distribution models possible
    &lt;ul&gt;
      &lt;li&gt;replicates vs partitioned, peer-like systems&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dfs-models&quot;&gt;DFS models&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Client Server on different machines&lt;/li&gt;
  &lt;li&gt;File server distributed on multiple machines
    &lt;ul&gt;
      &lt;li&gt;replicated (each server : all files)&lt;/li&gt;
      &lt;li&gt;partitioned (each server : parts of files)&lt;/li&gt;
      &lt;li&gt;both (files partitioned, each partition replicates)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Files stored on and served from all machines (peers)
    &lt;ul&gt;
      &lt;li&gt;blurred distinction between clients and servers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;remote-file-service--extremes&quot;&gt;Remote File Service : Extremes&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/extremes.png&quot; alt=&quot;extremes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/extremes2.png&quot; alt=&quot;extremes2&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Extreme1 : Upload/Download
    &lt;ul&gt;
      &lt;li&gt;like FTP, SVN&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; local read/writes at client&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; entire file download/upload evn for small accesses&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; server gives up contro;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Extreme2 : True Remote File Access
    &lt;ul&gt;
      &lt;li&gt;Every access to remote file, nothing done locally&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; file access centralized, easy to reason about consistency&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; every file operation pays network cost, limits server scalablity&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;remote-file-service--a-compromise&quot;&gt;Remote File Service : A compromise&lt;/h2&gt;

&lt;p&gt;A more practical Remote File access (with Caching)&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Allow clients to store parts of files locally (blocks)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; low latency on file operations&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; server load reduces =&amp;gt; more scalable&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Force clients to interact with server (frequently)
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; server has insights into what clients are doing&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;+&lt;/strong&gt; server has control into which accesses can be permitted =&amp;gt; easier to maintain consistency&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;-&lt;/strong&gt; server more complex, requires different file sharing semantics&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;stateless-vs-stateful-file-server&quot;&gt;Stateless vs Stateful File server&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Stateless&lt;/th&gt;
      &lt;th&gt;Stateful&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Keeps no state; Okay with extreme models, but can’t support ‘practical’ model&lt;/td&gt;
      &lt;td&gt;Keeps client state needed for ‘practical’ model to track what is cached/accessed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt; Can’t support caching and consistency management&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;+&lt;/strong&gt; Can support locking, caching, incremental operations&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt; Every request self-contained. =&amp;gt; more bits transferred&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt; Overheads to maintain state and consistency. Depends on caching mechanism and consistency protocol.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;+&lt;/strong&gt; No resources are used on server side (CPU, MM). On failure just restart&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;-&lt;/strong&gt; On failure, need checkpoining and recovery mechanisms&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;caching-state-in-a-dfs&quot;&gt;Caching state in a DFS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Locally clients maintain portion of state (e.g. file blocks)&lt;/li&gt;
  &lt;li&gt;Locally clients perform operations on cached state (e.g. open/read/write)&lt;/li&gt;
  &lt;li&gt;requires coherent mechanisms&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/cachingstate.png&quot; alt=&quot;cachingstate.png&quot; /&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;System&lt;/th&gt;
      &lt;th&gt;How&lt;/th&gt;
      &lt;th&gt;When&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;SMP&lt;/td&gt;
      &lt;td&gt;Write-update/Write-invalidate&lt;/td&gt;
      &lt;td&gt;On write&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;DFS&lt;/td&gt;
      &lt;td&gt;Client/Server-driven&lt;/td&gt;
      &lt;td&gt;On demand, periodically, on open..&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Files or File blocks can be (with 1 server and multiple clients) cached in:
    &lt;ul&gt;
      &lt;li&gt;in client memory&lt;/li&gt;
      &lt;li&gt;on client  storage device (HDD/SDD)&lt;/li&gt;
      &lt;li&gt;in buffer cache in memory on server
  	- (usefulness will depend on client load, request interleaving)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;File Sharing Semantics in DFS&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Session semantics (between open-close =&amp;gt; Session)
    &lt;ul&gt;
      &lt;li&gt;write-back on close(), update on open()&lt;/li&gt;
      &lt;li&gt;easy to reason, but may be insufficient&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Periodic updates
    &lt;ul&gt;
      &lt;li&gt;client writes-back periodically
  	- clients have a “lease” on cached data (not exclusively necessary)&lt;/li&gt;
      &lt;li&gt;servers invalidates periodically =&amp;gt; provides biunds on “inconsistency”&lt;/li&gt;
      &lt;li&gt;augment with flush()/sync() API&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Immutable files =&amp;gt; never modify, new files created&lt;/li&gt;
  &lt;li&gt;Transactions =&amp;gt; all changes atomic&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;replication-vs-partitioning&quot;&gt;Replication vs Partitioning&lt;/h1&gt;

&lt;table&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Replication&lt;/th&gt;
&lt;th&gt;Partitioning&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Each machine holds all files&lt;/td&gt;
&lt;td&gt;Each machine has subset of files&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Advantages&lt;/td&gt;
&lt;td&gt;Load balancing, availibility, fault tolerance &lt;/td&gt;
&lt;td&gt;Availibility vs single server DFS;&lt;br /&gt;Scalability with file system size;&lt;br /&gt;single file writes simpler&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Disadvantages&lt;/td&gt;
&lt;td&gt;Write becomes more complex&lt;br /&gt;- Synchronous to all&lt;br /&gt;- or, write to one, then propagate to others&lt;br /&gt;replicas must be reconciled e.g. Voting&lt;/td&gt;
&lt;td&gt;On failure, lose portion of data&lt;br /&gt;load balancing harder, if not balanced, then hot-spots possible&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;Can combine both techniques
    &lt;ul&gt;
      &lt;li&gt;Replicate each partition!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;distributed-shared-memory&quot;&gt;Distributed Shared Memory&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Must decide placement
    &lt;ul&gt;
      &lt;li&gt;place memory (pages) close to relevant processes&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Must decide migration
    &lt;ul&gt;
      &lt;li&gt;when to copy memory (pages) from remote to local&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Must decide sharing rules
    &lt;ul&gt;
      &lt;li&gt;ensure memory generations are properly ordered&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;peer-distribution-applications&quot;&gt;“Peer” Distribution Applications&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Each node
    &lt;ul&gt;
      &lt;li&gt;“owns” state&lt;/li&gt;
      &lt;li&gt;provide service&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;all nodes are “peers”.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Examples: Big-data analytics, web searches, context sharing or distributed shared memory (DSM)&lt;/p&gt;

&lt;h2 id=&quot;distributed-shared-memory-dsm&quot;&gt;Distributed Shared Memory (DSM)&lt;/h2&gt;

&lt;p&gt;DSM is a service that manages memory accross multiple nodes so that applications that are running on top will have an illusion that they are running on a shared memory.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each node
    &lt;ul&gt;
      &lt;li&gt;“owns” state =&amp;gt; memory&lt;/li&gt;
      &lt;li&gt;provide service
  	- memory read/writes from any nodes
        &lt;ul&gt;
          &lt;li&gt;consistency protocols&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;permits scaling beyond single machine memory limits
  	- more “shared” memory at lower cost
        &lt;ul&gt;
          &lt;li&gt;slower overall memory access&lt;/li&gt;
          &lt;li&gt;commodity interconnect technologies support this RDMA(Remote Direct Memory Access)&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;hardware-vs-software-dsm&quot;&gt;Hardware vs Software DSM&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Hardware-supported (expensive!)
    &lt;ul&gt;
      &lt;li&gt;relies on interconnect&lt;/li&gt;
      &lt;li&gt;OS manages larger physical memory&lt;/li&gt;
      &lt;li&gt;NIC(Network Interface Cards) translate remote memory accesses to messages&lt;/li&gt;
      &lt;li&gt;NICs involved in all aspects of memory management; support atomics..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Software supported
    &lt;ul&gt;
      &lt;li&gt;everything done by software&lt;/li&gt;
      &lt;li&gt;OS,or language runtime&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hybrid (Software tasks in Hardware) DSM implementations
    &lt;ul&gt;
      &lt;li&gt;prefetch pages&lt;/li&gt;
      &lt;li&gt;address translation (easier done in hardware)&lt;/li&gt;
      &lt;li&gt;triggering invalidations (easier done in hardware)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dsm-design--sharing-granularity&quot;&gt;DSM Design : Sharing Granularity&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;cache line granularity?
    &lt;ul&gt;
      &lt;li&gt;overheads too high for DSM&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;variable granularity [N]&lt;/li&gt;
  &lt;li&gt;page granularity [Y] (OS level)&lt;/li&gt;
  &lt;li&gt;object granularity [Y] (Language runtime)
    &lt;ul&gt;
      &lt;li&gt;beware of false sharing E.g. x and y shared on same page&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-types-of-applications-use-dsm&quot;&gt;What types of applications use DSM?&lt;/h2&gt;

&lt;p&gt;Application access algorithm&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Single reader/ single writer (SRSW)&lt;/li&gt;
  &lt;li&gt;Multiple readers/ single writer (MRSW)&lt;/li&gt;
  &lt;li&gt;Multiple reader/ Multiple writers (MRMW)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;performance-considerations&quot;&gt;Performance considerations&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;DSM performance metric == access latency&lt;/li&gt;
  &lt;li&gt;Achieving low latency through
    &lt;ul&gt;
      &lt;li&gt;Migration
  	- makes sense for SRSW
        &lt;ul&gt;
          &lt;li&gt;requires data movement&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Replication (caching)      &lt;br /&gt;
  	- more general
        &lt;ul&gt;
          &lt;li&gt;requires consistency management&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Hence, migration is okay for SRSW but not for all.&lt;/li&gt;
  &lt;li&gt;Caching and Replication
    &lt;ul&gt;
      &lt;li&gt;Copies of data to incerease data access&lt;/li&gt;
      &lt;li&gt;for many concurrent writes, overheads too high but stil generally better than Migration&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;consistency-management&quot;&gt;Consistency Management&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;In SMP
    &lt;ul&gt;
      &lt;li&gt;write invalidate&lt;/li&gt;
      &lt;li&gt;write update&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;coherence operations triggered in each write
    &lt;ul&gt;
      &lt;li&gt;overhead too high&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Push invalidations when data is written to
    &lt;ol&gt;
      &lt;li&gt;Proactive&lt;/li&gt;
      &lt;li&gt;Eager&lt;/li&gt;
      &lt;li&gt;Pessimistic&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Pull modifications information periodically
    &lt;ol&gt;
      &lt;li&gt;on demand (reactive)&lt;/li&gt;
      &lt;li&gt;lazy&lt;/li&gt;
      &lt;li&gt;optimistic&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;when these methods get triggered depends on the consistency model for the shared state&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dsm-architecture-page-based-os-supported&quot;&gt;DSM architecture (page-based, OS-supported)&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Page-based DSM architecture
    &lt;ul&gt;
      &lt;li&gt;distributed nodes, each with own local memory contribution&lt;/li&gt;
      &lt;li&gt;pool of pages from all nodes&lt;/li&gt;
      &lt;li&gt;each page has IO (“home” node), page frame number&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;if MRMW
    &lt;ul&gt;
      &lt;li&gt;need local caches for performances (latency)&lt;/li&gt;
      &lt;li&gt;“home” or “manager” node drives coherence operations&lt;/li&gt;
      &lt;li&gt;all nodes responsible for part if distributed memory (state) management&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Home node
    &lt;ul&gt;
      &lt;li&gt;keeps state: page accessed, modifications, caching enabled/disabled, locked..&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Current owner
    &lt;ul&gt;
      &lt;li&gt;owner may not be equal to home node&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Explicit replicas
    &lt;ul&gt;
      &lt;li&gt;for load balancing, performance, or reliability
  	home, manager node controls memory&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dsm-metadata&quot;&gt;DSM metadata&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/metadata.png&quot; alt=&quot;metadata.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;implementing-dsms&quot;&gt;Implementing DSMs&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Problem : DSM must intercept access to DSM state
    &lt;ul&gt;
      &lt;li&gt;to send remote messages requesting access&lt;/li&gt;
      &lt;li&gt;to trigger coherence messages&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;overheads should be avoided for local non-shared state (pages)&lt;/li&gt;
  &lt;li&gt;dynamically engage and disengage DSM when necessary&lt;/li&gt;
  &lt;li&gt;Solution : Use hardware MMU support!
    &lt;ul&gt;
      &lt;li&gt;trap in OS if mapping invalid or access denied&lt;/li&gt;
      &lt;li&gt;remote address mapping -&amp;gt; trap and pass to DSM to send message&lt;/li&gt;
      &lt;li&gt;cached content -&amp;gt; trap and pass to DSM to perform memory coherence operations&lt;/li&gt;
      &lt;li&gt;other MMU information useful (e.g. Dirty page)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;consistency-model&quot;&gt;Consistency model&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Agreement between memory (state) and upper software layers&lt;/li&gt;
  &lt;li&gt;Memory behaves correctly if and only if software follows specific rules&lt;/li&gt;
  &lt;li&gt;Memory (state) guarantees to behave correctly
    &lt;ul&gt;
      &lt;li&gt;access ordering&lt;/li&gt;
      &lt;li&gt;propagation/ visibility of updates&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;our-notation&quot;&gt;Our notation&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/notation.png&quot; alt=&quot;notation.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;R_m1(X) =&amp;gt; X was read from memory location m1&lt;/li&gt;
  &lt;li&gt;W_m1(Y) =&amp;gt; Y was written to memory location m1&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;strict-consistency&quot;&gt;Strict Consistency&lt;/h3&gt;

&lt;p&gt;Strict Consistency =&amp;gt; updates visible everywhere immediately&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/strict.png&quot; alt=&quot;strict.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In practice
    &lt;ul&gt;
      &lt;li&gt;Even on single SMP no guarantees on order without extra locking and synchronization&lt;/li&gt;
      &lt;li&gt;in DS, latency and message reorder make this even harder&lt;/li&gt;
      &lt;li&gt;Hence almost impossible to guarantee strict consistency&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sequential-consistency&quot;&gt;Sequential Consistency&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/seq.png&quot; alt=&quot;seq.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Sequential consistency =&amp;gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;memory updates from different  processors may be arbitrarily interleaved&lt;/li&gt;
  &lt;li&gt;All processes will see the same interleaving&lt;/li&gt;
  &lt;li&gt;Operations from the same process always appearin order they were issued&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;causal-consistency&quot;&gt;Causal Consistency&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/causal.png&quot; alt=&quot;causal.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For writes not causally related, “concurrent” writes doesnt gurantee.&lt;/li&gt;
  &lt;li&gt;Don’t permit arbitrary ordering from same process writer&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;weak-consistency&quot;&gt;Weak Consistency&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;https://spcdn.pages.dev/blog/os/weak.png&quot; alt=&quot;weak.png&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use of synchronization
    &lt;ul&gt;
      &lt;li&gt;Synchronization point =&amp;gt; operations that are available (R,W,Sync)&lt;/li&gt;
      &lt;li&gt;all updates prior to a sync point will be visible&lt;/li&gt;
      &lt;li&gt;no guarantee what happens in between&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt; limit data movement of coherence operations&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;-&lt;/strong&gt; maintain extra state for additional operations&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Variations:
    &lt;ul&gt;
      &lt;li&gt;Single sync operation (sync)&lt;/li&gt;
      &lt;li&gt;Seperate sync per surface of state (page)&lt;/li&gt;
      &lt;li&gt;Seperate “entry/acquire” vs “exit/release” operations&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;

</description>
	</item>
	
	<item>
		<title>SQL Joins - Inner, Left, Right and Full Joins</title>
		<link href="https://samir.pages.dev/posts/sql-joins-inner-left-right-and-full-joins/"/>
		<updated>2023-03-25T00:00:00+05:30</updated>
		<description type="html">&lt;p&gt;&lt;strong&gt;SQL Join&lt;/strong&gt; statement is used to combine data or rows from two or more tables based on a common field between them. Different types of Joins are as follows: &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;INNER JOIN&lt;/li&gt;
  &lt;li&gt;LEFT JOIN&lt;/li&gt;
  &lt;li&gt;RIGHT JOIN&lt;/li&gt;
  &lt;li&gt;FULL JOIN&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/77569653/227738791-78897c64-4c15-4d6a-b75a-656c6a59a5d2.png&quot; alt=&quot;SQL Joins&quot; /&gt;&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Python Cheat Sheet for Leetcode</title>
		<link href="https://samir.pages.dev/posts/python-cheat-sheet-for-leetcode/"/>
		<updated>2023-03-21T00:00:00+05:30</updated>
		<description type="html">&lt;h1 id=&quot;basics&quot;&gt;Basics&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Data Types&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/47276307/172329842-38f3de07-62d9-4d7d-9a19-fc576ee396a9.jpg&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Operators and it’s precendence&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/47276307/172329850-61fc0809-a4b0-416c-848b-1c502ecb4772.jpg&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;data-structures&quot;&gt;Data Structures&lt;/h1&gt;

&lt;p&gt;&lt;em&gt;Important data structures for Leetcode&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Lists are used to store multiple items in a single variable&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/47276307/172330098-1c5f0a6e-7f80-4f4f-9be6-1d734e2c70cd.jpg&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;nums = [1,2,3]

nums.index(1) # returns index
nums.append(1) # appends 1
nums.insert(0,10) # inserts 10 at 0th index
nums.remove(3) # removes all instances of 3
nums.copy(1) # returns copy of the list
nums.count(1) # returns no.of times '1' is present in the list
nums.extend(someOtherList) # ...
nums.pop() # pops last element [which element to pop can also be given as optional argument]
nums.reverse() # reverses original list (nums in this case)
nums.sort() # sorts list [does NOT return sorted list]
#Python's default sort uses Tim Sort, which is a combination of both merge sort and insertion sort.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;It's pretty simple really:

a[start:stop]  # items start through stop-1
a[start:]      # items start through the rest of the array
a[:stop]       # items from the beginning through stop-1
a[:]           # a copy of the whole array
There is also the step value, which can be used with any of the above:

a[start:stop:step] # start through not past stop, by step
The key point to remember is that the :stop value represents the first value that is not in the selected slice. So, the difference between stop and start is the number of elements selected (if step is 1, the default).

The other feature is that start or stop may be a negative number, which means it counts from the end of the array instead of the beginning. So:

a[-1]    # last item in the array
a[-2:]   # last two items in the array
a[:-2]   # everything except the last two items
Similarly, step may be a negative number:

a[::-1]    # all items in the array, reversed
a[1::-1]   # the first two items, reversed
a[:-3:-1]  # the last two items, reversed
a[-3::-1]  # everything except the last two items, reversed
Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for a[:-2] and a only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.

Relation to slice() object
The slicing operator [] is actually being used in the above code with a slice() object using the : notation (which is only valid within []), i.e.:

a[start:stop:step]
is equivalent to:

a[slice(start, stop, step)]
Slice objects also behave slightly differently depending on the number of arguments, similarly to range(), i.e. both slice(stop) and slice(start, stop[, step]) are supported. To skip specifying a given argument, one might use None, so that e.g. a[start:] is equivalent to a[slice(start, None)] or a[::-1] is equivalent to a[slice(None, None, -1)].

While the :-based notation is very helpful for simple slicing, the explicit use of slice() objects simplifies the programmatic generation of slicing.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dictionary&quot;&gt;Dictionary&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Dictionaries are used to store data values in key:value pairs. &lt;em&gt;Info about &lt;strong&gt;collections.Counter()&lt;/strong&gt; available below.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/47276307/172330107-e68e3228-1c76-4bfb-bb38-04d18f94d5b9.jpg&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;dict = {'a':1,'b':2,'c':3}

dict.keys() # returns list of keys of dictionary
dict.values() # returns list of values of dictionary
dict.get('a') # returns value for any corresponding key
dict.items() # returns [('a',1),('b',2),('c',3)]
dict.copy() # returns copy of the dictionary
# NOTE : items() Returns view object that will be updated with any future changes to dict
dict.pop(KEY) # pops key-value pair with that key
dict.popitem() # removes most recent pair added
dict.setDefault(KEY,DEFAULT_VALUE) # returns value of key, if key exists, else default value returned
# If the key exist, this parameter(DEFAULT_VALUE) has no effect.
# If the key does not exist, DEFAULT_VALUE becomes the key's value. 2nd argument's default is None.
dict.update({KEY:VALUE}) # inserts pair in dictionary if not present, if present, corresponding value is overriden (not key)
# defaultdict ensures that if any element is accessed that is not present in the dictionary
# it will be created and error will not be thrown (which happens in normal dictionary)
# Also, the new element created will be of argument type, for example in the below line
# an element of type 'list' will be made for a Key that does not exist
myDictionary = defaultdict(list) 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;counter&quot;&gt;Counter&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Python Counter is a container that will hold the count of each of the elements present in the container. The counter is a sub-class available inside the dictionary class. Specifically used for element frequencies&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Pretty similar to dictionary, infact I use&lt;/em&gt; &lt;strong&gt;defaultdict(int)&lt;/strong&gt; &lt;em&gt;most of the time&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;from collections import Counter #(capital 'C')
# can also be used as 'collections.Counter()' in code

list1 = ['x','y','z','x','x','x','y', 'z']

# Initialization
Counter(list1) # =&amp;gt; Counter({'x': 4, 'y': 2, 'z': 2})
Counter(&quot;Welcome to Guru99 Tutorials!&quot;) # =&amp;gt; Counter({'o': 3, ' ': 3, 'u': 3, 'e': 2.....})

# Updating
counterObject = collections.Counter(list1)
counterObject.keys() = [ 'x' , 'y' , 'z' ]
most_common_element = counterObject.most_common(1) # [('x', 4)]
counterObject.update(&quot;some string&quot;) # =&amp;gt; Counter({'o': 3, 'u': 3, 'e': 2, 's': 2})
counterObject['s'] += 1 # Increase/Decrease frequency

# Accessing
frequency_of_s = counterObject['s']

# Deleting
del couterObject['s']

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;deque&quot;&gt;Deque&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A double-ended queue, or deque, has the feature of adding and removing elements from either end.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/47276307/172330115-78500420-3276-4e45-8ce3-fd668b7eb14e.jpg&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;from collections import deque

queue = deque(['name','age','DOB'])

queue.append(&quot;append_from_right&quot;) # Append from right
queue.pop() # Pop from right

queue.appendleft(&quot;fromLeft&quot;) # Append from left
queue.popleft() # Pop from left

queue.index(element,begin_index,end_index) # Returns first index of element b/w the 2 indices.
queue.insert(index,element)
queue.remove() # removes first occurrance
queue.count() # obvious

queue.reverse() # reverses order of queue elements
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;heapq&quot;&gt;Heapq&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;As we know the Heap Data Structure is used to implement the Priority Queue ADT. In python we can directly access a Priority Queue implemented using a Heap by using the &lt;strong&gt;Heapq&lt;/strong&gt; library/module.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/47276307/172330122-29cf0756-89bc-4654-a4e8-4e318156c7d1.jpg&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;import heapq # (minHeap by Default)

nums = [5, 7, 9, 1, 3]

heapq.heapify(nums) # converts list into heap. Can be converted back to list by list(nums).
heapq.heappush(nums,element) # Push an element into the heap
heapq.heappop(nums) # Pop an element from the heap
#heappush(heap, ele) :- This function is used to insert the element mentioned in its arguments into heap. The order is adjusted, so as heap structure is maintained.
#heappop(heap) :- This function is used to remove and return the smallest element from heap. The order is adjusted, so as heap structure is maintained.

# Other Methods Available in the Library
# Used to return the k largest elements from the iterable specified 
# The key is a function with that accepts single element from iterable,
# and the returned value from that function is then used to rank that element in the heap
heapq.nlargest(k, iterable, key = fun)
heapq.nsmallest(k, iterable, key = fun)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;sets&quot;&gt;Sets&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A set is a collection which is unordered, immutable, unindexed, No Duplicates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/47276307/172330132-7a785f5f-bbc6-43b9-b82f-794190813787.jpg&quot; alt=&quot;Untitled&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;set = {1,2,3}

set.add(item)
set.remove(item)
set.discard(item) | set.remove(item) # removes item | remove will throw error if item is not there, discard will not
set.pop() # removes random item (since unordered)

set.isdisjoint(anotherSet) # returns true if no common elements
set.issubset(anotherSet) # returns true if all elements from anotherSet is present in original set
set.issuperset(anotherSet) # returns true if all elements from original set is present in anotherSet

set.difference(anotherSet) # returns set containing items ONLY in first set
set.difference_update(anotherSet) # removes common elements from first set [no new set is created or returned]
set.intersection(anotherSet) # returns new set with common elements
set.intersection_update(anotherSet) # modifies first set keeping only common elements
set.symmetric_difference(anotherSet) # returns set containing all non-common elements of both sets
set.symmetric_difference_update(anotherSet) # same as symmetric_difference but changes are made on original set

set.union(anotherSet) # ...
set.update(anotherSet) # adds anotherSet without duplicate

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;tuples&quot;&gt;Tuples&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A tuple is a collection which is ordered, unchangeable and can contain duplicate values&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;Operations Time Complexities&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;Similar to list&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;tuple = (1,2,3,1)

tuple.count(1) # returns occurence of an item
tuple.index(1) # returns index of 1 in array
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;strings&quot;&gt;Strings&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;# ** split Function **
#The split() method breaks up a string at the specified separator and returns a list of strings.
text = 'Python is a fun programming language'

# split the text from space
print(text.split(' '))

#convert string to list
s=&quot;abcd&quot;
s=list(s)

# Output: ['Python', 'is', 'a', 'fun', 'programming', 'language']

# ** count Function **
#The count() method returns the number of occurrences of a substring in the given string.
#Example
message = 'python is popular programming language'
# number of occurrence of 'p'
print('Number of occurrence of p:', message.count('p')) # Output: Number of occurrence of p: 4

#The isnumeric() method returns True if all characters in a string are numeric characters. If not, it returns False.
s = '1242323'
print(s.isnumeric()) #Output: True

#The find() method returns the index of first occurrence of the substring (if found). If not found, it returns -1.
# check the index of 'fun'
print(message.find('fun')) # Output: 12

#The isalnum() method returns True if all characters in the string are alphanumeric (either alphabets or numbers). If not, it returns False.

name = &quot;M3onica Gell22er &quot;
print(name.isalnum()) # Output : False

#The isalpha() method returns True if all characters in the string are alphabets. If not, it returns False
name = &quot;Monica&quot;
print(name.isalpha()) #output true

#other imp functions
string.strip([chars]) #The strip() method returns a copy of the string by removing both the leading and the trailing characters (based on the string argument passed).
string.upper() #he upper() method converts all lowercase characters in a string into uppercase characters and returns it.
string.lower() #The lower() method converts all uppercase characters in a string into lowercase characters and returns it.
string.islower()
string.isdigit()
string.isupper()
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;built-in-or-library-functions&quot;&gt;Built-in or Library functions&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Functions to iterate over list / other iterable (tuple, dictionaries)&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    
  ** map(fun, iter) **
  #fun : It is a function to which map passes each element of given iterable.
  #iter : It is a iterable which is to be mapped.
    
  ** zip(list,list) **
  for elem1,elem2 in zip(firstList,secondList):
  	# will merge both lists and produce tuples with both elements
  	# Tuples will stop at shortest list (in case of both lists having different len)
  #Example
  '''
  a = (&quot;John&quot;, &quot;Charles&quot;, &quot;Mike&quot;)
  b = (&quot;Jenny&quot;, &quot;Christy&quot;, &quot;Monica&quot;)
    
  x = zip(a, b)
    
  #use the tuple() function to display a readable version of the result:
    
  print(tuple(x))
  o/p: (('John', 'Jenny'), ('Charles', 'Christy'), ('Mike', 'Monica'))
  '''
    
  ** any(list) ** [ OPPOSITE IS =&amp;gt; ** all() ** ]
  any(someList) # returns true if ANY element in list is true [any string, all numbers except 0 also count as true]
    
  ** enumerate(list|tuple) ** 
  # [when you need to attach indexes to lists or tuples ]
  enumerate(anyList) # ['a','b','c'] =&amp;gt; [(0, 'a'), (1, 'b'), (2, 'c')]
    
  ** filter(function|list) **
  filter(myFunction,list) # returns list with elements that returned true when passed in function
    
  ***************** import bisect ***********************
    
  ** bisect.bisect(list,number,begin,end) ** O(log(n))
  # [ returns the index where the element should be inserted 
  #		such that sorting order is maintained ]
  a = [1,2,4]
  bisect.bisect(a,3,0,4) # [1,2,4] =&amp;gt; 2 coz '3' should be inserted in 2nd index to maintain sorting order
    
  # Other variants of this functions are =&amp;gt; bisect.bisect_left() | bisect.bisect_right()
  # they have same arguments. Suppose the element we want to insert is already present
  # in the sorting list, the bisect_left() will return index left of the existing number
  # and the bisect_right() or bisect() will return index right to the existing number
    
  # ** bisect.insort(list,number,begin,end)       ** O(n) to insert
  # ** bisect.insort_right(list,number,begin,end) ** 
  # ** bisect.insort_left(list,number,begin,end)  ** 
    
  The above 3 functions are exact same of bisect.bisect(), the only difference
  is that they return the sorted list after inserting and not the index. The
  left() right() logic is also same as above.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Getting ASCII value of a character&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  ** ord(str) **
  # returns ascii value of the character , Example ord(&quot;a&quot;) = 97
  ** chr(int) ** 
  #return character of given ascii value , Example chr(97) = &quot;a&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;clean-code-tips&quot;&gt;Clean Code Tips&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Doc Strings -&lt;/strong&gt; Documentation for your functions in the interview to look slic 😎&lt;/p&gt;

    &lt;p&gt;A docstring is short for documentation string.&lt;/p&gt;

    &lt;p&gt;Python docstrings (documentation strings) are the &lt;a href=&quot;https://www.programiz.com/python-programming/string&quot;&gt;string&lt;/a&gt; literals that appear right after the definition of a function, method, class, or module.&lt;/p&gt;

    &lt;p&gt;Triple quotes are used while writing docstrings. For example:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  def double(num):
      &quot;&quot;&quot;Function to double the value&quot;&quot;&quot;
      return 2*num
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Docstrings appear right after the definition of a function, class, or a module. This separates docstrings from multiline comments using triple quotes.&lt;/p&gt;

    &lt;p&gt;The docstrings are associated with the object as their &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;__doc__&lt;/code&gt; attribute.&lt;/p&gt;

    &lt;p&gt;So, we can access the docstrings of the above function with the following lines of code:&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  def double(num):
      &quot;&quot;&quot;Function to double the value&quot;&quot;&quot;
      return 2*num
  print(double.__doc__)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  Function to double the value
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Use &lt;strong&gt;Assert keyword&lt;/strong&gt; in python for testing edge cases. Looks more professional.&lt;/p&gt;

    &lt;p&gt;### Definition and Usage&lt;/p&gt;

    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt; keyword is used when debugging code.&lt;/p&gt;

    &lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt; keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.&lt;/p&gt;

    &lt;p&gt;You can write a message to be written if the code returns False, check the example below.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  x = &quot;hello&quot;
    
  #if condition returns False, AssertionError is raised:
  assert x == &quot;goodbye&quot;, &quot;x should be 'hello'&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;ALWAYS&lt;/strong&gt; be aware of any code snippet that is being &lt;strong&gt;REPEATED&lt;/strong&gt; in your solution. &lt;strong&gt;MODULARITY&lt;/strong&gt; #1 Priority. Refactoring is also an important part of interview.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;This is usually asked as a follow up after coding the solution. &lt;em&gt;Are there any changes you want to make to this solution?&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;How to take multiple line input in python?&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;Using split() method&lt;/li&gt;
      &lt;li&gt;Using List comprehension&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;strong&gt;Syntax :&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  input().split(separator, maxsplit)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;## Example&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  # Python program showing how to
  # multiple input using split
     
  # taking two inputs at a time
  x, y = input(&quot;Enter a two value: &quot;).split()
  print(&quot;Number of boys: &quot;, x)
  print(&quot;Number of girls: &quot;, y)
  print()
     
  # taking three inputs at a time
  x, y, z = input(&quot;Enter a three value: &quot;).split()
  print(&quot;Total number of students: &quot;, x)
  print(&quot;Number of boys is : &quot;, y)
  print(&quot;Number of girls is : &quot;, z)
  print()
     
  # taking two inputs at a time
  a, b = input(&quot;Enter a two value: &quot;).split()
  print(&quot;First number is {} and second number is {}&quot;.format(a, b))
  print()
     
  # taking multiple inputs at a time
  # and type casting using list() function
  x = list(map(int, input(&quot;Enter a multiple value: &quot;).split()))
  print(&quot;List of students: &quot;, x)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  # Python program showing
  # how to take multiple input
  # using List comprehension
     
  # taking two input at a time
  x, y = [int(x) for x in input(&quot;Enter two value: &quot;).split()]
  print(&quot;First Number is: &quot;, x)
  print(&quot;Second Number is: &quot;, y)
  print()
     
  # taking three input at a time
  x, y, z = [int(x) for x in input(&quot;Enter three value: &quot;).split()]
  print(&quot;First Number is: &quot;, x)
  print(&quot;Second Number is: &quot;, y)
  print(&quot;Third Number is: &quot;, z)
  print()
     
  # taking two inputs at a time
  x, y = [int(x) for x in input(&quot;Enter two value: &quot;).split()]
  print(&quot;First number is {} and second number is {}&quot;.format(x, y))
  print()
     
  # taking multiple inputs at a time
  x = [int(x) for x in input(&quot;Enter multiple value: &quot;).split()]
  print(&quot;Number of list is: &quot;, x)
    
  # taking multiple inputs at a time separated by comma
  x = [int(x) for x in input(&quot;Enter multiple value: &quot;).split(&quot;,&quot;)]
  print(&quot;Number of list is: &quot;, x)
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  Syntax :
  math.log(a,Base)
  Parameters :a : The numeric value
  Base :  Base to which the logarithm has to be computed.
  Return Value :
  Returns natural log if 1 argument is passed and log with
  specified base if 2 arguments are passed.
  Exceptions :
  Raises ValueError is a negative no. is passed as argument.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  import math
      
  # Printing the log base e of 14
  print (&quot;Natural logarithm of 14 is : &quot;, end=&quot;&quot;)
  print (math.log(14))
      
  # Printing the log base 5 of 14
  print (&quot;Logarithm base 5 of 14 is : &quot;, end=&quot;&quot;)
  print (math.log(14,5))
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;Finding the ceiling and the floor value
        &lt;ul&gt;
          &lt;li&gt;Ceil value means the smallest integral value greater than the number and the floor value means the greatest integral value smaller than the number. This can be easily calculated using the ceil() and floor() method respectively.&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  # Python code to demonstrate the working of
  # ceil() and floor()
     
  # importing &quot;math&quot; for mathematical operations
  import math
     
  a = 2.3
     
  # returning the ceil of 2.3 (i.e 3)
  print (&quot;The ceil of 2.3 is : &quot;, end=&quot;&quot;)
  print (math.ceil(a))
     
  # returning the floor of 2.3 (i.e 2)
  print (&quot;The floor of 2.3 is : &quot;, end=&quot;&quot;)
  print (math.floor(a))
    
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;ul&gt;
      &lt;li&gt;Other Important functions&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  #Constants
  # Print the value of Euler e (2.718281828459045)
  print (math.e)
  # Print the value of pi (3.141592653589793)
  print (math.pi)
  print (math.gcd(b, a))
  print (pow(3,4))
  # print the square root of 4
  print(math.sqrt(4))
  a = math.pi/6
  b = 30
     
  # returning the converted value from radians to degrees
  print (&quot;The converted value from radians to degrees is : &quot;, end=&quot;&quot;)
  print (math.degrees(a))
     
  # returning the converted value from degrees to radians
  print (&quot;The converted value from degrees to radians is : &quot;, end=&quot;&quot;)
  print (math.radians(b))
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;    
  ** bin(int) **
  bin(anyNumber) # Returns binary version of number
    
  ** divmod(int,int) **
  divmod(dividend,divisor) # returns tuple like (quotient, remainder)
    
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;## How the custom comparator works&lt;/p&gt;

    &lt;p&gt;When providing a custom comparator, it should generally return an integer/float value that follows the following pattern (as with most other programming languages and frameworks):&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;return a negative value (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt; 0&lt;/code&gt;) when the left item should be sorted &lt;em&gt;before&lt;/em&gt; the right item&lt;/li&gt;
      &lt;li&gt;return a positive value (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;gt; 0&lt;/code&gt;) when the left item should be sorted &lt;em&gt;after&lt;/em&gt; the right item&lt;/li&gt;
      &lt;li&gt;return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt; when both the left and the right item have the same weight and should be ordered “equally” without precedence&lt;/li&gt;
    &lt;/ul&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  from functools import cmp_to_key
  sorted(mylist, key=cmp_to_key(compare))
    
  #Example
  def compare(item1, item2):
      if fitness(item1) &amp;lt; fitness(item2):
          return -1
      elif fitness(item1) &amp;gt; fitness(item2):
          return 1
      else:
          return 0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;Python integer division behaves differently with -ve numbers ex: -3//2 will give -2 answer instead of -1 so always use int(-3/2) for integer division in problems&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://betterprogramming.pub/modulo-operation-with-negative-numbers-in-python-38cb7256bb32&quot;&gt;The Modulo Operation (%) With Negative Numbers in Python&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;cheat-sheet-pdf&quot;&gt;Cheat Sheet PDF&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/1EojiCPYkyLi0f5DYW4UF3Lwp-Pwihr7q/view?usp=sharing&quot;&gt;&lt;strong&gt;Click Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>LeetCode Greedy for Beginners</title>
		<link href="https://samir.pages.dev/posts/leetcode-greedy-for-beginners/"/>
		<updated>2023-03-21T00:00:00+05:30</updated>
		<description type="html">&lt;p&gt;Greedy for practice:&lt;/p&gt;

&lt;p&gt;Sharing good Greedy problems for practice:&lt;br /&gt;
List: &lt;a href=&quot;https://leetcode.com/list/xyehq5j6&quot;&gt;https://leetcode.com/list/xyehq5j6&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sort/Array&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/jump-game/&quot;&gt;https://leetcode.com/problems/jump-game/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/jump-game-ii/&quot;&gt;https://leetcode.com/problems/jump-game-ii/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/gas-station/&quot;&gt;https://leetcode.com/problems/gas-station/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/candy/&quot;&gt;https://leetcode.com/problems/candy/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/remove-k-digits/&quot;&gt;https://leetcode.com/problems/remove-k-digits/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/wiggle-subsequence/&quot;&gt;https://leetcode.com/problems/wiggle-subsequence/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/assign-cookies/&quot;&gt;https://leetcode.com/problems/assign-cookies/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/boats-to-save-people/&quot;&gt;https://leetcode.com/problems/boats-to-save-people/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/bag-of-tokens/&quot;&gt;https://leetcode.com/problems/bag-of-tokens/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/&quot;&gt;https://leetcode.com/problems/number-of-burgers-with-no-waste-of-ingredients/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/queue-reconstruction-by-height/&quot;&gt;https://leetcode.com/problems/queue-reconstruction-by-height/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/play-with-chips/&quot;&gt;https://leetcode.com/problems/play-with-chips/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/previous-permutation-with-one-swap/&quot;&gt;https://leetcode.com/problems/previous-permutation-with-one-swap/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/lemonade-change/&quot;&gt;https://leetcode.com/problems/lemonade-change/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/bag-of-tokens/&quot;&gt;https://leetcode.com/problems/bag-of-tokens/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hash/Multi-set:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/task-scheduler/&quot;&gt;https://leetcode.com/problems/task-scheduler/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/partition-labels/&quot;&gt;https://leetcode.com/problems/partition-labels/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/car-pooling/&quot;&gt;https://leetcode.com/problems/car-pooling/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/&quot;&gt;https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/&quot;&gt;https://leetcode.com/problems/group-the-people-given-the-group-size-they-belong-to/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/cinema-seat-allocation/&quot;&gt;https://leetcode.com/problems/cinema-seat-allocation/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/construct-k-palindrome-strings/&quot;&gt;https://leetcode.com/problems/construct-k-palindrome-strings/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/advantage-shuffle/&quot;&gt;https://leetcode.com/problems/advantage-shuffle/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Strings:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/reorganize-string/&quot;&gt;https://leetcode.com/problems/reorganize-string/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/string-without-aaa-or-bbb/&quot;&gt;https://leetcode.com/problems/string-without-aaa-or-bbb/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/check-if-a-string-can-break-another-string/&quot;&gt;https://leetcode.com/problems/check-if-a-string-can-break-another-string/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/remove-duplicate-letters/&quot;&gt;https://leetcode.com/problems/remove-duplicate-letters/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Heap:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/last-stone-weight/&quot;&gt;https://leetcode.com/problems/last-stone-weight/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/reduce-array-size-to-the-half/&quot;&gt;https://leetcode.com/problems/reduce-array-size-to-the-half/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Stack:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/&quot;&gt;https://leetcode.com/problems/minimum-add-to-make-parentheses-valid/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sharing solutions for little tricky problems&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/&quot;&gt;https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	bool isPossibleDivide(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {

		int n = nums.size();
		if (n % k != 0) return false;
		int ssize = n/k;

		map&amp;lt;int, int&amp;gt;hm;
		for (int i = 0; i &amp;lt; n; i++)
			hm[nums[i]]++;

		for (auto it = hm.begin(); it != hm.end(); it++) {
			if (hm[it-&amp;gt;first] &amp;gt; 0) {
				for (int i = k-1; i &amp;gt;= 0; i--) {
					hm[it-&amp;gt;first+i] -= hm[it-&amp;gt;first];
					if (hm[it-&amp;gt;first+i] &amp;lt; 0)
						return false;
				}
			}
		}

		return true;
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/car-pooling/&quot;&gt;https://leetcode.com/problems/car-pooling/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	bool carPooling(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; trips, int capacity) {

		int trip_len = 1001;
		vector&amp;lt;int&amp;gt;stops(trip_len, 0);

		for (int i = 0; i &amp;lt; trips.size(); i++) {
			stops[trips[i][1]] += trips[i][0];
			stops[trips[i][2]] -= trips[i][0];
		}

		for (int i = 0; i &amp;lt; trip_len; i++) {
			if (i != 0) stops[i] += stops[i-1];
			if (stops[i] &amp;gt; capacity)
				return false;
		}


		return true;
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/reorganize-string/&quot;&gt;https://leetcode.com/problems/reorganize-string/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
	static bool compare(pair&amp;lt;char, int&amp;gt;p1, pair&amp;lt;char, int&amp;gt;p2) {
		return p1.second &amp;gt; p2.second;
	}
public:
	string reorganizeString(string S) {

		int n = S.length();

		unordered_map&amp;lt;char, int&amp;gt;m;
		vector&amp;lt;pair&amp;lt;char, int&amp;gt;&amp;gt;v;

		for (int i = 0; i &amp;lt; n; i++) 
			m[S[i]]++;

		for(auto it = m.begin(); it != m.end(); it++) {
			if (it-&amp;gt;second &amp;gt; (n+1)/2)
				return &quot;&quot;;
			v.push_back(make_pair(it-&amp;gt;first, it-&amp;gt;second));
		}

		sort(v.begin(), v.end(), compare);
		string str;
		for (int i = 0; i &amp;lt; v.size(); i++) {
			while (v[i].second--)
				str += v[i].first;
		}

		string ans;
		int size = str.size();
		int i = 0, j = (size-1)/2+1;

		while (i &amp;lt; (size-1)/2+1) {
			ans += str[i];
			ans += str[j];
			i++; j++;
		}

		return ans;
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/candy/&quot;&gt;https://leetcode.com/problems/candy/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	int candy(vector&amp;lt;int&amp;gt;&amp;amp; ratings) {

		int n = ratings.size();

		vector&amp;lt;int&amp;gt;left(n, 1); 
		for (int i = 1; i &amp;lt; n; i++) {
			if (ratings[i] &amp;gt; ratings[i-1])
				left[i] = left[i-1]+1;
		}

		int sum = left[n-1];
		for (int i = n-2; i &amp;gt;= 0; i--) {
			if (ratings[i] &amp;gt; ratings[i+1])
				left[i] = max(left[i], left[i+1]+1);
			sum += left[i];
		}

		return sum;
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
	</item>
	
	<item>
		<title>LeetCode all two pointers problems</title>
		<link href="https://samir.pages.dev/posts/leetcode-all-two-pointers-problems/"/>
		<updated>2023-03-21T00:00:00+05:30</updated>
		<description type="html">&lt;p&gt;| 1. Running from both ends of an array |
| — |&lt;/p&gt;

&lt;p&gt;The first type of problems are, having two pointers at left and right end of array, then moving them to the center while processing something with them.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/77569653/226705317-e62636ef-7fac-4897-a7d0-4625cd71826f.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;2 Sum problem&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/&quot;&gt;https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/3sum/&quot;&gt;https://leetcode.com/problems/3sum/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/4sum/&quot;&gt;https://leetcode.com/problems/4sum/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/&quot;&gt;https://leetcode.com/problems/number-of-subsequences-that-satisfy-the-given-sum-condition/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/two-sum-iv-input-is-a-bst/&quot;&gt;https://leetcode.com/problems/two-sum-iv-input-is-a-bst/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/sum-of-square-numbers/&quot;&gt;https://leetcode.com/problems/sum-of-square-numbers/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/boats-to-save-people/&quot;&gt;https://leetcode.com/problems/boats-to-save-people/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/&quot;&gt;https://leetcode.com/problems/minimize-maximum-pair-sum-in-array/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/3sum-with-multiplicity/&quot;&gt;https://leetcode.com/problems/3sum-with-multiplicity/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Trapping Water&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/trapping-rain-water/&quot;&gt;https://leetcode.com/problems/trapping-rain-water/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/container-with-most-water/&quot;&gt;https://leetcode.com/problems/container-with-most-water/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Next Permutation&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/next-permutation/&quot;&gt;https://leetcode.com/problems/next-permutation/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/next-greater-element-iii/&quot;&gt;https://leetcode.com/problems/next-greater-element-iii/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/&quot;&gt;https://leetcode.com/problems/minimum-adjacent-swaps-to-reach-the-kth-smallest-number/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Reversing / Swapping&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/valid-palindrome/&quot;&gt;https://leetcode.com/problems/valid-palindrome/&lt;/a&gt;&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/reverse-string/&quot;&gt;https://leetcode.com/problems/reverse-string/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/reverse-vowels-of-a-string/&quot;&gt;https://leetcode.com/problems/reverse-vowels-of-a-string/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/valid-palindrome-ii/&quot;&gt;https://leetcode.com/problems/valid-palindrome-ii/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/reverse-only-letters/&quot;&gt;https://leetcode.com/problems/reverse-only-letters/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/remove-element/&quot;&gt;https://leetcode.com/problems/remove-element/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/sort-colors/&quot;&gt;https://leetcode.com/problems/sort-colors/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/flipping-an-image/&quot;&gt;https://leetcode.com/problems/flipping-an-image/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/squares-of-a-sorted-array/&quot;&gt;https://leetcode.com/problems/squares-of-a-sorted-array/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/sort-array-by-parity/&quot;&gt;https://leetcode.com/problems/sort-array-by-parity/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/sort-array-by-parity-ii/&quot;&gt;https://leetcode.com/problems/sort-array-by-parity-ii/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/pancake-sorting/&quot;&gt;https://leetcode.com/problems/pancake-sorting/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/reverse-prefix-of-word/&quot;&gt;https://leetcode.com/problems/reverse-prefix-of-word/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/reverse-string-ii/&quot;&gt;https://leetcode.com/problems/reverse-string-ii/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/reverse-words-in-a-string/&quot;&gt;https://leetcode.com/problems/reverse-words-in-a-string/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/reverse-words-in-a-string-iii/&quot;&gt;https://leetcode.com/problems/reverse-words-in-a-string-iii/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Others&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/bag-of-tokens/&quot;&gt;https://leetcode.com/problems/bag-of-tokens/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/di-string-match/&quot;&gt;https://leetcode.com/problems/di-string-match/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/&quot;&gt;https://leetcode.com/problems/minimum-length-of-string-after-deleting-similar-ends/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/sentence-similarity-iii/&quot;&gt;https://leetcode.com/problems/sentence-similarity-iii/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/find-k-closest-elements/&quot;&gt;https://leetcode.com/problems/find-k-closest-elements/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/shortest-distance-to-a-character/&quot;&gt;https://leetcode.com/problems/shortest-distance-to-a-character/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;| 2.Slow &amp;amp; Fast Pointers |
| — |&lt;/p&gt;

&lt;p&gt;Next type is using two pointers with different speed of movement. Typically they starts from the left end, then the first pointer advances fast and give some feedback to the slow pointer and do some calculation.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/77569653/226705223-95601d5c-7c9c-416a-a561-3bc6213afd75.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Linked List Operations&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/linked-list-cycle/&quot;&gt;https://leetcode.com/problems/linked-list-cycle/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/linked-list-cycle-ii/&quot;&gt;https://leetcode.com/problems/linked-list-cycle-ii/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/remove-nth-node-from-end-of-list/&quot;&gt;https://leetcode.com/problems/remove-nth-node-from-end-of-list/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/rotate-list/&quot;&gt;https://leetcode.com/problems/rotate-list/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/reorder-list/&quot;&gt;https://leetcode.com/problems/reorder-list/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/palindrome-linked-list/&quot;&gt;https://leetcode.com/problems/palindrome-linked-list/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Cyclic Detection&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/find-the-duplicate-number/&quot;&gt;https://leetcode.com/problems/find-the-duplicate-number/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/circular-array-loop/&quot;&gt;https://leetcode.com/problems/circular-array-loop/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sliding Window/Caterpillar Method&lt;br /&gt;
  &lt;img src=&quot;https://assets.leetcode.com/users/images/29d2e356-77fe-4caf-8921-7a39d06e56d2_1642139764.6173265.jpeg&quot; alt=&quot;image&quot; /&gt;&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/&quot;&gt;https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/find-k-th-smallest-pair-distance/&quot;&gt;https://leetcode.com/problems/find-k-th-smallest-pair-distance/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/moving-stones-until-consecutive-ii/&quot;&gt;https://leetcode.com/problems/moving-stones-until-consecutive-ii/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/count-pairs-of-nodes/&quot;&gt;https://leetcode.com/problems/count-pairs-of-nodes/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/count-binary-substrings/&quot;&gt;https://leetcode.com/problems/count-binary-substrings/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/k-diff-pairs-in-an-array/&quot;&gt;https://leetcode.com/problems/k-diff-pairs-in-an-array/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Rotation&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/rotating-the-box/&quot;&gt;https://leetcode.com/problems/rotating-the-box/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/rotate-array/&quot;&gt;https://leetcode.com/problems/rotate-array/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;String&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/string-compression/&quot;&gt;https://leetcode.com/problems/string-compression/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/last-substring-in-lexicographical-order/&quot;&gt;https://leetcode.com/problems/last-substring-in-lexicographical-order/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Remove Duplicate&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-array/&quot;&gt;https://leetcode.com/problems/remove-duplicates-from-sorted-array/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/&quot;&gt;https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/&quot;&gt;https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/duplicate-zeros/&quot;&gt;https://leetcode.com/problems/duplicate-zeros/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Others&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/statistics-from-a-large-sample/&quot;&gt;https://leetcode.com/problems/statistics-from-a-large-sample/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/partition-labels/&quot;&gt;https://leetcode.com/problems/partition-labels/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/magical-string/&quot;&gt;https://leetcode.com/problems/magical-string/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/friends-of-appropriate-ages/&quot;&gt;https://leetcode.com/problems/friends-of-appropriate-ages/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/longest-mountain-in-array/&quot;&gt;https://leetcode.com/problems/longest-mountain-in-array/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/&quot;&gt;https://leetcode.com/problems/shortest-subarray-to-be-removed-to-make-array-sorted/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;| 3.Running from beginning of 2 arrays / Merging 2 arrays |
| — |&lt;/p&gt;

&lt;p&gt;In this category, you will be given 2 arrays or lists, then have to process them with individual pointers.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/77569653/226705109-0e41c781-9c08-4796-90fd-8b2169cef242.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Sorted arrays&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/merge-sorted-array/&quot;&gt;https://leetcode.com/problems/merge-sorted-array/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/heaters/&quot;&gt;https://leetcode.com/problems/heaters/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/find-the-distance-value-between-two-arrays/&quot;&gt;https://leetcode.com/problems/find-the-distance-value-between-two-arrays/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Intersections/LCA like&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/intersection-of-two-linked-lists/&quot;&gt;https://leetcode.com/problems/intersection-of-two-linked-lists/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/intersection-of-two-arrays/&quot;&gt;https://leetcode.com/problems/intersection-of-two-arrays/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/intersection-of-two-arrays-ii/&quot;&gt;https://leetcode.com/problems/intersection-of-two-arrays-ii/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;SubString&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/implement-strstr/&quot;&gt;https://leetcode.com/problems/implement-strstr/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/&quot;&gt;https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/long-pressed-name/&quot;&gt;https://leetcode.com/problems/long-pressed-name/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/longest-uncommon-subsequence-ii/&quot;&gt;https://leetcode.com/problems/longest-uncommon-subsequence-ii/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/compare-version-numbers/&quot;&gt;https://leetcode.com/problems/compare-version-numbers/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/camelcase-matching/&quot;&gt;https://leetcode.com/problems/camelcase-matching/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/expressive-words/&quot;&gt;https://leetcode.com/problems/expressive-words/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Median Finder&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/find-median-from-data-stream/&quot;&gt;https://leetcode.com/problems/find-median-from-data-stream/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Meet-in-the-middle / Binary Search&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/&quot;&gt;https://leetcode.com/problems/partition-array-into-two-arrays-to-minimize-sum-difference/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/closest-subsequence-sum/&quot;&gt;https://leetcode.com/problems/closest-subsequence-sum/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/&quot;&gt;https://leetcode.com/problems/ways-to-split-array-into-three-subarrays/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/3sum-closest/&quot;&gt;https://leetcode.com/problems/3sum-closest/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/valid-triangle-number/&quot;&gt;https://leetcode.com/problems/valid-triangle-number/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Others&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/shortest-unsorted-continuous-subarray/&quot;&gt;https://leetcode.com/problems/shortest-unsorted-continuous-subarray/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/most-profit-assigning-work/&quot;&gt;https://leetcode.com/problems/most-profit-assigning-work/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/largest-merge-of-two-strings/&quot;&gt;https://leetcode.com/problems/largest-merge-of-two-strings/&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://leetcode.com/problems/swap-adjacent-in-lr-string/&quot;&gt;https://leetcode.com/problems/swap-adjacent-in-lr-string/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;| 4.Split &amp;amp; Merge of an array / Divide &amp;amp; Conquer |
| — |&lt;/p&gt;

&lt;p&gt;The last one is similiar to previous category but there is one thing is added. First, you need to split the given list into 2 separate lists and then do two pointers approach to merge or unify them. There aren’t many tasks here.&lt;br /&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/77569653/226704881-583b72b9-d759-46f6-ab8f-a81310800c30.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Partition&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/partition-list/&quot;&gt;https://leetcode.com/problems/partition-list/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sorting&lt;br /&gt;
  (*) &lt;a href=&quot;https://leetcode.com/problems/sort-list/&quot;&gt;https://leetcode.com/problems/sort-list/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Graph For Beginners</title>
		<link href="https://samir.pages.dev/posts/graph-for-beginners/"/>
		<updated>2023-03-21T00:00:00+05:30</updated>
		<description type="html">&lt;p&gt;&lt;strong&gt;Graph Problems For Practice&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sharing some topic wise good Graph problems and sample solutions to observe on how to approach.&lt;/p&gt;

&lt;p&gt;List: &lt;a href=&quot;https://leetcode.com/list/x1wy4de7&quot;&gt;https://leetcode.com/list/x1wy4de7&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Union Find:&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Identify if problems talks about finding groups or components.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/friend-circles/&quot;&gt;https://leetcode.com/problems/friend-circles/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/redundant-connection/&quot;&gt;https://leetcode.com/problems/redundant-connection/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&quot;&gt;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&quot;&gt;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/satisfiability-of-equality-equations/&quot;&gt;https://leetcode.com/problems/satisfiability-of-equality-equations/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/accounts-merge/&quot;&gt;https://leetcode.com/problems/accounts-merge/&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;All the above problems can be solved by Union Find algorithm with minor tweaks.&lt;br /&gt;
 Below is a standard template for union find problems.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  class Solution {
  	vector&amp;lt;int&amp;gt;parent;
  	int find(int x) {
  		return parent[x] == x ? x : find(parent[x]);
  	}
  public:
  	vector&amp;lt;int&amp;gt; findRedundantConnection(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; edges) {
    
  		int n = edges.size();
    
  		parent.resize(n+1, 0);
  		for (int i = 0; i &amp;lt;= n; i++)
  			parent[i] = i;
    
  		vector&amp;lt;int&amp;gt;res(2, 0);
  		for (int i = 0; i &amp;lt; n; i++) {
  			int x = find(edges[i][0]);
  			int y = find(edges[i][1]);
  			if (x != y)
  				parent[y] = x;
  			else {
  				res[0] = edges[i][0];
  				res[1] = edges[i][1];
  			}
  		}
    
  		return res;
  	}
  };
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Depth First Search&lt;/strong&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Start DFS from nodes at boundary:&lt;/strong&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/surrounded-regions/&quot;&gt;https://leetcode.com/problems/surrounded-regions/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/number-of-enclaves/&quot;&gt;https://leetcode.com/problems/number-of-enclaves/&lt;/a&gt;&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  class Solution {
  	int rows, cols;
  	void dfs(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; A, int i, int j) {
  		if (i &amp;lt; 0 || j &amp;lt; 0 || i &amp;gt;= rows || j &amp;gt;= cols)
  			return;
        
  		if (A[i][j] != 1) 
  			return;
        
  		A[i][j] = -1;
  		dfs(A, i+1, j);
  		dfs(A, i-1, j);
  		dfs(A, i, j+1);
  		dfs(A, i, j-1);
  	}
  public:
  	int numEnclaves(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; A) {
        
  		if (A.empty()) return 0;
        
  		rows = A.size();
  		cols = A[0].size();
  		for (int i = 0; i &amp;lt; rows; i++) {
  			for (int j = 0; j &amp;lt; cols; j++) {
  				if (i == 0 || j == 0 || i == rows-1 || j == cols-1)
  					dfs(A, i, j);
  			}
  		}
        
  		int ans = 0;
  		for (int i = 0; i &amp;lt; rows; i++) {
  			for (int j = 0; j &amp;lt; cols; j++) {
  				if (A[i][j] == 1)
  					ans++;
  			}
  		}
        
  		return ans;
  	}
  };
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Time taken to reach all nodes or share information to all graph nodes:&lt;/strong&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/time-needed-to-inform-all-employees/&quot;&gt;https://leetcode.com/problems/time-needed-to-inform-all-employees/&lt;/a&gt;&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  class Solution {
  	void dfs(unordered_map&amp;lt;int, vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp;hm, int i, vector&amp;lt;int&amp;gt;&amp;amp; informTime, int &amp;amp;res, int curr) {
        
  		curr += informTime[i];
  		res = max(res, curr);
        
  		for (auto it = hm[i].begin(); it != hm[i].end(); it++)
  			dfs(hm, *it, informTime, res, curr);
  	}
  public:
  	int numOfMinutes(int n, int headID, vector&amp;lt;int&amp;gt;&amp;amp; manager, vector&amp;lt;int&amp;gt;&amp;amp; informTime) {
        
  		unordered_map&amp;lt;int, vector&amp;lt;int&amp;gt;&amp;gt;hm;
  		for (int i = 0; i &amp;lt; n; i++)
  			if (manager[i] != -1) hm[manager[i]].push_back(i);
        
  		int res = 0, curr = 0;
  		dfs(hm, headID, informTime, res, curr);
  		return res;
  	}
  };
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;DFS from each unvisited node/Island problems&lt;/strong&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/number-of-closed-islands/&quot;&gt;https://leetcode.com/problems/number-of-closed-islands/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/number-of-islands/&quot;&gt;https://leetcode.com/problems/number-of-islands/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/keys-and-rooms/&quot;&gt;https://leetcode.com/problems/keys-and-rooms/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/max-area-of-island/&quot;&gt;https://leetcode.com/problems/max-area-of-island/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/flood-fill/&quot;&gt;https://leetcode.com/problems/flood-fill/&lt;/a&gt;&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  class Solution {
  	void dfs(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid, vector&amp;lt;vector&amp;lt;bool&amp;gt;&amp;gt;&amp;amp; visited, int i, int j, int m, int n) {
  		if (i &amp;lt; 0 || i &amp;gt;= m || j &amp;lt; 0 || j &amp;gt;= n) return;
  		if (grid[i][j] == '0' || visited[i][j]) return;
  		visited[i][j] = true;
  		dfs(grid, visited, i+1, j, m, n);
  		dfs(grid, visited, i, j+1, m, n);
  		dfs(grid, visited, i-1, j, m, n);
  		dfs(grid, visited, i, j-1, m, n);
  	}
  	public:
  	int numIslands(vector&amp;lt;vector&amp;lt;char&amp;gt;&amp;gt;&amp;amp; grid) {
  		if (grid.empty()) return 0;
        
  		int m = grid.size();
  		int n = grid[0].size();
  		vector&amp;lt;vector&amp;lt;bool&amp;gt;&amp;gt;visited(m, vector&amp;lt;bool&amp;gt;(n, false));
        
  		int res = 0;
  		for (int i = 0; i &amp;lt; m; i++) {
  			for (int j = 0; j &amp;lt; n; j++) {
  				if (grid[i][j] == '1' &amp;amp;&amp;amp; !visited[i][j]) {
  					dfs(grid, visited, i, j, m, n);
  					res++;
  				}
  			}
  		}
        
  		return res;
  	}
  	};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Cycle Find:&lt;/strong&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/find-eventual-safe-states/&quot;&gt;https://leetcode.com/problems/find-eventual-safe-states/&lt;/a&gt;&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  class Solution {
  	bool dfs(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; graph, int v, vector&amp;lt;int&amp;gt;&amp;amp; dp) {
        
  		if (dp[v])
  			return dp[v] == 1;
        
  		dp[v] = -1;
        
  		for (auto it = graph[v].begin(); it != graph[v].end(); it++)
  			if (!dfs(graph, *it, dp))
  				return false;
        
  		dp[v] = 1;
        
  		return true;
  	}
  public:
  	vector&amp;lt;int&amp;gt; eventualSafeNodes(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; graph) {
        
  		int V = graph.size();
        
  		vector&amp;lt;int&amp;gt;res;
  		vector&amp;lt;int&amp;gt;dp(V, 0);
        
  		for (int i = 0; i &amp;lt; V; i++) {    
  			if (dfs(graph, i, dp))
  				res.push_back(i);
  		}
        
  		return res;
  	}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;};&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Breadth First Search&lt;/strong&gt;&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;&lt;strong&gt;Shortest Path:&lt;/strong&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/01-matrix/&quot;&gt;https://leetcode.com/problems/01-matrix/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/as-far-from-land-as-possible/&quot;&gt;https://leetcode.com/problems/as-far-from-land-as-possible/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/rotting-oranges/&quot;&gt;https://leetcode.com/problems/rotting-oranges/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/shortest-path-in-binary-matrix/&quot;&gt;https://leetcode.com/problems/shortest-path-in-binary-matrix/&lt;/a&gt;&lt;/p&gt;

        &lt;p&gt;Start BFS from nodes from which shortest path is asked for.&lt;br /&gt;
 Below is the sample BFS approach to find the path.&lt;/p&gt;

        &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; class Solution {
 	public:
 	vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; updateMatrix(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; matrix) {
        
 		if (matrix.empty()) return matrix;
 		int rows = matrix.size();
 		int cols = matrix[0].size();
 		queue&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;pq;
 		for (int i = 0; i &amp;lt; rows; i++) {
 			for (int j = 0; j &amp;lt; cols; j++) {
 				if (matrix[i][j] == 0) {
 					pq.push({i-1, j}), pq.push({i+1, j}), pq.push({i, j-1}), pq.push({i, j+1}); 
 				}
 			}
 		}
        
 		vector&amp;lt;vector&amp;lt;bool&amp;gt;&amp;gt;visited(rows, vector&amp;lt;bool&amp;gt;(cols, false));
 		int steps = 0;
 		while (!pq.empty()) {
 			steps++;
 			int size = pq.size();
 			for (int i = 0; i &amp;lt; size; i++) {
 				auto front = pq.front();
 				int l = front.first;
 				int r = front.second;
 				pq.pop();
 				if (l &amp;gt;= 0 &amp;amp;&amp;amp; r &amp;gt;= 0 &amp;amp;&amp;amp; l &amp;lt; rows &amp;amp;&amp;amp; r &amp;lt; cols &amp;amp;&amp;amp; !visited[l][r] &amp;amp;&amp;amp; matrix[l][r] == 1) {
 					visited[l][r] = true;
 					matrix[l][r] = steps;
 					pq.push({l-1, r}), pq.push({l+1, r}), pq.push({l, r-1}), pq.push({l, r+1});
 				}
 			}
 		}
        
 		return matrix;
 	}
 };
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Graph coloring/Bipartition&lt;/strong&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/possible-bipartition/&quot;&gt;https://leetcode.com/problems/possible-bipartition/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/is-graph-bipartite/&quot;&gt;https://leetcode.com/problems/is-graph-bipartite/&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Problems asks to check if its possible to divide the graph nodes into 2 groups&lt;br /&gt;
 Apply BFS for same. Below is a sample graph coloring approach.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  class Solution {
  	public:
  		bool isBipartite(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; graph) {
  			int n = graph.size();
  			vector&amp;lt;int&amp;gt;color(n, -1);
    
  			for (int i = 0; i &amp;lt; n; i++) {
  				if (color[i] != -1) continue;
    
  				color[i] = 1;
  				queue&amp;lt;int&amp;gt;q;
  				q.push(i);
    
  				while (!q.empty()) {
  					int t = q.front();
  					q.pop();
    
  					for (int j = 0; j &amp;lt; graph[t].size(); j++) {
  						if (color[graph[t][j]] == -1) {
  							color[graph[t][j]] = 1-color[t];
  							q.push(graph[t][j]);
  						} else if (color[graph[t][j]] == color[t]) {
  							return false;
  						}
  					}
  				}
  			}
    
  			return true;
  		}
  	};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Topological Sort:&lt;/strong&gt;&lt;br /&gt;
 Check if its directed acyclic graph and we have to arrange the elements in an order in which we need to select the most independent node at first. Number of in-node 0&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/course-schedule/&quot;&gt;https://leetcode.com/problems/course-schedule/&lt;/a&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/course-schedule-ii/&quot;&gt;https://leetcode.com/problems/course-schedule-ii/&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Below is sample approach. Find if cycle is present, if not apply topological sort.&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  class Solution {
  	int V;
  	list&amp;lt;int&amp;gt;*adj;
     	
  	bool isCyclicUtil(int v, vector&amp;lt;bool&amp;gt;&amp;amp;visited, vector&amp;lt;bool&amp;gt;&amp;amp;recStack) {
     		
  		visited[v] = true;
  		recStack[v] = true;
     		
  		for (auto it = adj[v].begin(); it != adj[v].end(); it++) {
  			if (!visited[*it] &amp;amp;&amp;amp; isCyclicUtil(*it, visited, recStack))
  				return true;
  			else if (recStack[*it])
  				return true;
  		}
     		
  		recStack[v] = false;
  		return false;
  	}
     	
  	bool isCyclic() {
  		vector&amp;lt;bool&amp;gt;visited(V, false);
  		vector&amp;lt;bool&amp;gt;recStack(V, false);
     		
  		for (int i = 0; i &amp;lt; V; i++) {
  			if (isCyclicUtil(i, visited, recStack))
  				return true;
  		}
     		
  		return false;
  	}
     	
  	void topologicalSortUtil(int v, vector&amp;lt;bool&amp;gt;&amp;amp;visited, vector&amp;lt;int&amp;gt;&amp;amp; res) {
  		visited[v] = true;
     		
  		for (auto it = adj[v].begin(); it != adj[v].end(); it++)
  			if (!visited[*it])
  				topologicalSortUtil(*it, visited, res);
     		
  		res.push_back(v);
  	}
     	
  	vector&amp;lt;int&amp;gt;topologicalSort(int v) {
  		vector&amp;lt;int&amp;gt;res;
     		
  		vector&amp;lt;bool&amp;gt;visited(V, false);
  		topologicalSortUtil(v, visited, res);
     		
  		for (int i = 0; i &amp;lt; V; i++) {
  			if (!visited[i])
  				topologicalSortUtil(i, visited, res);
  		}
     		
  		return res;
  	}
     	
  	public:
  	vector&amp;lt;int&amp;gt; findOrder(int numCourses, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; prerequisites) {
  		V = numCourses;
  		adj = new list&amp;lt;int&amp;gt;[V];
     	
  		unordered_map&amp;lt;int, vector&amp;lt;int&amp;gt;&amp;gt;hm;
     		
  		for (int i = 0; i &amp;lt; prerequisites.size(); i++) {
  			adj[prerequisites[i][0]].push_back(prerequisites[i][1]);
  			hm[prerequisites[i][1]].push_back(prerequisites[i][0]);
  		}
     		
  		if (isCyclic()) return vector&amp;lt;int&amp;gt;();
     		
  		int i = 0;
  		for (i = 0; i &amp;lt; V; i++) {
  			if (hm.find(i) == hm.end())
  				break;
  		}
     		
  		return topologicalSort(i);
  	}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;};&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Find Shortest Path (Dijkstra’s/Bellman Ford)&lt;/strong&gt;&lt;br /&gt;
 &lt;a href=&quot;https://leetcode.com/problems/network-delay-time/&quot;&gt;https://leetcode.com/problems/network-delay-time/&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;&lt;strong&gt;Dijkstras and Bellman Ford:&lt;/strong&gt;&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; class Solution {
 	public:
 		int networkDelayTime(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; times, int N, int K) {
    			
 			priority_queue&amp;lt;pair&amp;lt;int, int&amp;gt;, vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;, greater&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt;pq;
 			vector&amp;lt;int&amp;gt;dist(N+1, INT_MAX);
    			
 			pq.push(make_pair(0, K));
 			dist[K] = 0;
    			
 			unordered_map&amp;lt;int, vector&amp;lt;pair&amp;lt;int, int&amp;gt;&amp;gt;&amp;gt;hm;
 			for (int i = 0; i &amp;lt; times.size(); i++)
 				hm[times[i][0]].push_back(make_pair(times[i][1], times[i][2]));
    			
 			while (!pq.empty()) {
 				pair&amp;lt;int, int&amp;gt;p = pq.top();
 				pq.pop();
    				
 				int u = p.second;
 				for (auto it = hm[u].begin(); it != hm[u].end(); it++) {
 					int v = it-&amp;gt;first;
 					int w = it-&amp;gt;second;
    					
 					if (dist[v] &amp;gt; dist[u] + w) {
 						dist[v] = dist[u] + w;
 						pq.push(make_pair(dist[v], v));
 					}
 				}
 			}
    			
 			int res = 0;
 			for (int i = 1; i &amp;lt;= N; i++)
 				res = max(res, dist[i]);
    			
 			return res == INT_MAX ? -1 : res;
 		}
 	};
    	
    
 	class Solution {
 	public:
 		int networkDelayTime(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; times, int N, int K) {
    			
 			int n = times.size();
 			if (!n) return 0;
    			
 			vector&amp;lt;int&amp;gt;dist(N+1, INT_MAX);
 			int res = 0;
    			
 			dist[K] = 0;
 			for (int i = 0; i &amp;lt; N; i++) {
 				for (int j = 0; j &amp;lt; n; j++) {
 					int u = times[j][0];
 					int v = times[j][1];
 					int w = times[j][2];
 					if (dist[u] != INT_MAX &amp;amp;&amp;amp; dist[u] + w &amp;lt; dist[v])
 						dist[v] = w + dist[u];
 				}
 			}
    			
 			for (int i = 1; i &amp;lt;= N; i++)
 				res = max(res, dist[i]);
    
 			return res == INT_MAX ? -1 : res;
 		}
 	}
    	
    
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Complete List: Below are mostly list of problems (mostly medium level and may 1 or 2 easy) which are better to start practice with:&lt;br /&gt;
(Updated on 14th June ‘20)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Union Find:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/friend-circles/&quot;&gt;https://leetcode.com/problems/friend-circles/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/redundant-connection/&quot;&gt;https://leetcode.com/problems/redundant-connection/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&quot;&gt;https://leetcode.com/problems/most-stones-removed-with-same-row-or-column/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&quot;&gt;https://leetcode.com/problems/number-of-operations-to-make-network-connected/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/satisfiability-of-equality-equations/&quot;&gt;https://leetcode.com/problems/satisfiability-of-equality-equations/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/accounts-merge/&quot;&gt;https://leetcode.com/problems/accounts-merge/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/connecting-cities-with-minimum-cost/&quot;&gt;https://leetcode.com/problems/connecting-cities-with-minimum-cost/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;DFS:&lt;/strong&gt;&lt;br /&gt;
DFS from boundary:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/surrounded-regions/&quot;&gt;https://leetcode.com/problems/surrounded-regions/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-enclaves/&quot;&gt;https://leetcode.com/problems/number-of-enclaves/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Shortest time:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/time-needed-to-inform-all-employees/&quot;&gt;https://leetcode.com/problems/time-needed-to-inform-all-employees/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Islands Variants&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-closed-islands/&quot;&gt;https://leetcode.com/problems/number-of-closed-islands/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-islands/&quot;&gt;https://leetcode.com/problems/number-of-islands/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/keys-and-rooms/&quot;&gt;https://leetcode.com/problems/keys-and-rooms/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/max-area-of-island/&quot;&gt;https://leetcode.com/problems/max-area-of-island/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/flood-fill/&quot;&gt;https://leetcode.com/problems/flood-fill/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/coloring-a-border/&quot;&gt;https://leetcode.com/problems/coloring-a-border/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Hash/DFS:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/employee-importance/&quot;&gt;https://leetcode.com/problems/employee-importance/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/find-the-town-judge/&quot;&gt;https://leetcode.com/problems/find-the-town-judge/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Cycle Find:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/find-eventual-safe-states/&quot;&gt;https://leetcode.com/problems/find-eventual-safe-states/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;BFS:&lt;/strong&gt;&lt;br /&gt;
BFS for shortest path:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/01-matrix/&quot;&gt;https://leetcode.com/problems/01-matrix/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/as-far-from-land-as-possible/&quot;&gt;https://leetcode.com/problems/as-far-from-land-as-possible/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/rotting-oranges/&quot;&gt;https://leetcode.com/problems/rotting-oranges/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/shortest-path-in-binary-matrix/&quot;&gt;https://leetcode.com/problems/shortest-path-in-binary-matrix/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Graph coloring:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/possible-bipartition/&quot;&gt;https://leetcode.com/problems/possible-bipartition/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/is-graph-bipartite/&quot;&gt;https://leetcode.com/problems/is-graph-bipartite/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Topological Sort:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/course-schedule-ii/&quot;&gt;https://leetcode.com/problems/course-schedule-ii/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Shortest Path:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/network-delay-time/&quot;&gt;https://leetcode.com/problems/network-delay-time/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/&quot;&gt;https://leetcode.com/problems/find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/cheapest-flights-within-k-stops/&quot;&gt;https://leetcode.com/problems/cheapest-flights-within-k-stops/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
	</item>
	
	<item>
		<title>Dynamic Programming Patterns</title>
		<link href="https://samir.pages.dev/posts/dynamic-programming-patterns/"/>
		<updated>2023-03-21T00:00:00+05:30</updated>
		<description type="html">&lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/77569653/226705479-a4d6c0a3-0191-4d45-8bf6-597ffaa5de40.png&quot; alt=&quot;Banner&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before starting the topic let me introduce myself. I am a Mobile Developer currently working in Warsaw and spending my free time for interview preparations. I started to prepare for interviews two years ago. At that time I should say I could not solve the two sum problem. Easy problems seemed to me like hard ones so most of the time I had to look at editorials and discuss section. Currently, I have solved ~800 problems and time to time participate in contests. I usually solve 3 problems in a contest and sometimes 4 problems. Ok, lets come back to the topic.&lt;/p&gt;

&lt;p&gt;Recently I have concentrated my attention on Dynamic Programming cause its one of the hardest topics in an interview prep. After solving ~140 problems in DP I have noticed that there are few patterns that can be found in different problems. So I did a research on that and find the following topics. I will not give complete ways how to solve problems but these patterns may be helpful in solving DP.&lt;/p&gt;

&lt;h1 id=&quot;patterns&quot;&gt;Patterns&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Minimum-(Maximum)-Path-to-Reach-a-Target&quot;&gt;Minimum (Maximum) Path to Reach a Target&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#distinct-ways&quot;&gt;Distinct Ways&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Merging-Intervals&quot;&gt;Merging Intervals&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#DP-on-Strings&quot;&gt;DP on Strings&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/discuss/study-guide/458695/Dynamic-Programming-Patterns#Decision-Making&quot;&gt;Decision Making&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;minimum-maximum-path-to-reach-a-target&quot;&gt;Minimum (Maximum) Path to Reach a Target&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Problem list: &lt;a href=&quot;https://leetcode.com/list/55ac4kuc&quot;&gt;https://leetcode.com/list/55ac4kuc&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generate problem statement for this pattern&lt;/p&gt;

&lt;h3 id=&quot;statement&quot;&gt;Statement&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given a target find minimum (maximum) cost / path / sum to reach the target.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;approach&quot;&gt;Approach&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Choose minimum (maximum) path among all possible paths before the current state, then add value for the current state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;routes[i] = min(routes[i-1], routes[i-2], ... , routes[i-k]) + cost[i]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generate optimal solutions for all values in the target and return the value for the target.&lt;/p&gt;

&lt;h3 id=&quot;top-down&quot;&gt;Top-Down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int j = 0; j &amp;lt; ways.size(); ++j) {
    result = min(result, topDown(target - ways[j]) + cost/ path / sum);
}
return memo[/*state parameters*/] = result;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bottom-up&quot;&gt;Bottom-Up&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int i = 1; i &amp;lt;= target; ++i) {
   for (int j = 0; j &amp;lt; ways.size(); ++j) {
       if (ways[j] &amp;lt;= i) {
           dp[i] = min(dp[i], dp[i - ways[j]] + cost / path / sum) ;
       }
   }
}
 
return dp[target]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;similar-problems&quot;&gt;Similar Problems&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/min-cost-climbing-stairs/&quot;&gt;746. Min Cost Climbing Stairs&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Easy&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;top-down-1&quot;&gt;Top-Down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;int result = min(minCost(n-1, cost, memo), minCost(n-2, cost, memo)) + (n == cost.size() ? 0 : cost[n]);
return memo[n] = result;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bottom-up-1&quot;&gt;Bottom-Up&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int i = 2; i &amp;lt;= n; ++i) {
   dp[i] = min(dp[i-1], dp[i-2]) + (i == n ? 0 : cost[i]);
}
 
return dp[n]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-path-sum/&quot;&gt;64. Minimum Path Sum&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;top-down-2&quot;&gt;Top-Down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;int result = min(pathSum(i+1, j, grid, memo), pathSum(i, j+1, grid, memo)) + grid[i][j];
    
return memo[i][j] = result;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bottom-up-2&quot;&gt;Bottom-Up&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int i = 1; i &amp;lt; n; ++i) {
   for (int j = 1; j &amp;lt; m; ++j) {
       grid[i][j] = min(grid[i-1][j], grid[i][j-1]) + grid[i][j];
   }
}
 
return grid[n-1][m-1]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/coin-change/&quot;&gt;322. Coin Change&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;top-down-3&quot;&gt;Top-Down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int i = 0; i &amp;lt; coins.size(); ++i) {
    if (coins[i] &amp;lt;= target) { // check validity of a sub-problem
        result = min(ans, CoinChange(target - coins[i], coins) + 1);
    }
}
return memo[target] = result;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bottom-up-3&quot;&gt;Bottom-Up&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int j = 1; j &amp;lt;= amount; ++j) {
   for (int i = 0; i &amp;lt; coins.size(); ++i) {
       if (coins[i] &amp;lt;= j) {
           dp[j] = min(dp[j], dp[j - coins[i]] + 1);
       }
   }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-falling-path-sum/&quot;&gt;931. Minimum Falling Path Sum&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-for-tickets/&quot;&gt;983. Minimum Cost For Tickets&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/2-keys-keyboard/&quot;&gt;650. 2 Keys Keyboard&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/perfect-squares/&quot;&gt;279. Perfect Squares&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/last-stone-weight-ii/&quot;&gt;1049. Last Stone Weight II&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/triangle/&quot;&gt;120. Triangle&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/ones-and-zeroes/&quot;&gt;474. Ones and Zeroes&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximal-square/&quot;&gt;221. Maximal Square&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/coin-change/&quot;&gt;322. Coin Change&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/tiling-a-rectangle-with-the-fewest-squares/&quot;&gt;1240. Tiling a Rectangle with the Fewest Squares&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/dungeon-game/&quot;&gt;174. Dungeon Game&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-number-of-refueling-stops/&quot;&gt;871. Minimum Number of Refueling Stops&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hard&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;distinct-ways&quot;&gt;Distinct Ways&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Problem List: &lt;a href=&quot;https://leetcode.com/list/55ajm50i&quot;&gt;https://leetcode.com/list/55ajm50i&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generate problem statement for this pattern&lt;/p&gt;

&lt;h3 id=&quot;statement-1&quot;&gt;Statement&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given a target find a number of distinct ways to reach the target.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;approach-1&quot;&gt;Approach&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Sum all possible ways to reach the current state.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;routes[i] = routes[i-1] + routes[i-2], ... , + routes[i-k]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Generate sum for all values in the target and return the value for the target.&lt;/p&gt;

&lt;h3 id=&quot;top-down-4&quot;&gt;Top-Down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int j = 0; j &amp;lt; ways.size(); ++j) {
    result += topDown(target - ways[j]);
}
return memo[/*state parameters*/] = result;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bottom-up-4&quot;&gt;Bottom-Up&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int i = 1; i &amp;lt;= target; ++i) {
   for (int j = 0; j &amp;lt; ways.size(); ++j) {
       if (ways[j] &amp;lt;= i) {
           dp[i] += dp[i - ways[j]];
       }
   }
}
 
return dp[target]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;similar-problems-1&quot;&gt;Similar Problems&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/climbing-stairs/&quot;&gt;70. Climbing Stairs&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Easy&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;top-down-5&quot;&gt;Top-Down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;int result = climbStairs(n-1, memo) + climbStairs(n-2, memo); 
    
return memo[n] = result;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bottom-up-5&quot;&gt;Bottom-Up&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int stair = 2; stair &amp;lt;= n; ++stair) {
   for (int step = 1; step &amp;lt;= 2; ++step) {
       dp[stair] += dp[stair-step];   
   }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-paths/&quot;&gt;62. Unique Paths&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;top-down-6&quot;&gt;Top-Down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;int result = UniquePaths(x-1, y) + UniquePaths(x, y-1);

return memo[x][y] = result;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bottom-up-6&quot;&gt;Bottom-Up&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int i = 1; i &amp;lt; m; ++i) {
   for (int j = 1; j &amp;lt; n; ++j) {
       dp[i][j] = dp[i][j-1] + dp[i-1][j];
   }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&quot;&gt;1155. Number of Dice Rolls With Target Sum&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int rep = 1; rep &amp;lt;= d; ++rep) {
   vector&amp;lt;int&amp;gt; new_ways(target+1);
   for (int already = 0; already &amp;lt;= target; ++already) {
       for (int pipe = 1; pipe &amp;lt;= f; ++pipe) {
           if (already - pipe &amp;gt;= 0) {
               new_ways[already] += ways[already - pipe];
               new_ways[already] %= mod;
           }
       }
   }
   ways = new_ways;
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Some questions point out the number of repetitions, in that case, add one more loop to simulate every repetition.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/knight-probability-in-chessboard/&quot;&gt;688. Knight Probability in Chessboard&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/target-sum/&quot;&gt;494. Target Sum&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/combination-sum-iv/&quot;&gt;377. Combination Sum IV&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/knight-dialer/&quot;&gt;935. Knight Dialer&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/dice-roll-simulation/&quot;&gt;1223. Dice Roll Simulation&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/partition-equal-subset-sum/&quot;&gt;416. Partition Equal Subset Sum&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/soup-servings/&quot;&gt;808. Soup Servings&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/domino-and-tromino-tiling/&quot;&gt;790. Domino and Tromino Tiling&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-swaps-to-make-sequences-increasing/&quot;&gt;801. Minimum Swaps To Make Sequences Increasing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&quot;&gt;673. Number of Longest Increasing Subsequence&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-paths-ii/&quot;&gt;63. Unique Paths II&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/out-of-boundary-paths/&quot;&gt;576. Out of Boundary Paths&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/number-of-ways-to-stay-in-the-same-place-after-some-steps/&quot;&gt;1269. Number of Ways to Stay in the Same Place After Some Steps&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/count-vowels-permutation/&quot;&gt;1220. Count Vowels Permutation&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hard&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;merging-intervals&quot;&gt;Merging Intervals&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Problem List: &lt;a href=&quot;https://leetcode.com/list/55aj8s16&quot;&gt;https://leetcode.com/list/55aj8s16&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Generate problem statement for this pattern&lt;/p&gt;

&lt;h3 id=&quot;statement-2&quot;&gt;Statement&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given a set of numbers find an optimal solution for a problem considering the current number and the best you can get from the left and right sides.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;approach-2&quot;&gt;Approach&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Find all optimal solutions for every interval and return the best possible answer.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// from i to j
dp[i][j] = dp[i][k] + result[k] + dp[k+1][j]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Get the best from the left and right sides and add a solution for the current position.&lt;/p&gt;

&lt;h3 id=&quot;top-down-7&quot;&gt;Top-Down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int k = i; k &amp;lt;= j; ++k) {
    result = max(result, topDown(nums, i, k-1) + result[k] + topDown(nums, k+1, j));
}
return memo[/*state parameters*/] = result;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bottom-up-7&quot;&gt;Bottom-Up&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for(int l = 1; l&amp;lt;n; l++) {
   for(int i = 0; i&amp;lt;n-l; i++) {
       int j = i+l;
       for(int k = i; k&amp;lt;j; k++) {
           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);
       }
   }
}
 
return dp[0][n-1];
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for(int l = 1; l&amp;lt;n; l++) {
   for(int i = 0; i&amp;lt;n-l; i++) {
       int j = i+l;
       for(int k = i; k&amp;lt;j; k++) {
           dp[i][j] = max(dp[i][j], dp[i][k] + result[k] + dp[k+1][j]);
       }
   }
}
 
return dp[0][n-1]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;similar-problems-2&quot;&gt;Similar Problems&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&quot;&gt;1130. Minimum Cost Tree From Leaf Values&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int l = 1; l &amp;lt; n; ++l) {
   for (int i = 0; i &amp;lt; n - l; ++i) {
       int j = i + l;
       dp[i][j] = INT_MAX;
       for (int k = i; k &amp;lt; j; ++k) {
           dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j] + maxs[i][k] * maxs[k+1][j]);
       }
   }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/unique-binary-search-trees/&quot;&gt;96. Unique Binary Search Trees&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&quot;&gt;1039. Minimum Score Triangulation of Polygon&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-boxes/&quot;&gt;546. Remove Boxes&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-to-merge-stones/&quot;&gt;1000. Minimum Cost to Merge Stones&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/burst-balloons/&quot;&gt;312. Burst Balloons&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hard&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;top-down-8&quot;&gt;Top-Down&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int k = i; k &amp;lt;= j; ++k) {
    result = max(result, topDown(nums, i, k-1, memo) + (i-1 &amp;gt;= 0 ? nums[i-1] : 1) * nums[k] * (j+1 &amp;lt; nums.size() ? nums[j+1] : 1) + topDown(nums, k+1, j, memo));
}
return memo[i][j] = result;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bottom-up-8&quot;&gt;Bottom-Up&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for(int l = 1; l &amp;lt; n; l++) {
    for(int i = 0; i &amp;lt; n-l; i++) {
        int j = i+l;
        for(int k = i; k &amp;lt;= j; k++) {
            dp[i][j] = max(dp[i][j], (((k&amp;gt;i &amp;amp;&amp;amp; k&amp;gt;0) ? dp[i][k-1] : 0) + (i&amp;gt;0 ? nums[i-1] : 1) * nums[k] * (j&amp;lt;n-1 ? nums[j+1] : 1) + ((k&amp;lt;j &amp;amp;&amp;amp; k&amp;lt;n-1) ? dp[k+1][j] : 0)));
        }
    }
}
return dp[0][n-1];
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/guess-number-higher-or-lower-ii/&quot;&gt;375. Guess Number Higher or Lower II&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;dp-on-strings&quot;&gt;DP on Strings&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Problem List: &lt;a href=&quot;https://leetcode.com/list/55afh7m7&quot;&gt;https://leetcode.com/list/55afh7m7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;General problem statement for this pattern can vary but most of the time you are given two strings where lengths of those strings are not big&lt;/p&gt;

&lt;h3 id=&quot;statement-3&quot;&gt;Statement&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given two strings &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s2&lt;/code&gt;, return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some result&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;approach-3&quot;&gt;Approach&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Most of the problems on this pattern requires a solution that can be accepted in O(n^2) complexity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// i - indexing string s1
// j - indexing string s2
for (int i = 1; i &amp;lt;= n; ++i) {
   for (int j = 1; j &amp;lt;= m; ++j) {
       if (s1[i-1] == s2[j-1]) {
           dp[i][j] = /*code*/;
       } else {
           dp[i][j] = /*code*/;
       }
   }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are given one string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s&lt;/code&gt; the approach may little vary&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int l = 1; l &amp;lt; n; ++l) {
   for (int i = 0; i &amp;lt; n-l; ++i) {
       int j = i + l;
       if (s[i] == s[j]) {
           dp[i][j] = /*code*/;
       } else {
           dp[i][j] = /*code*/;
       }
   }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-common-subsequence/&quot;&gt;1143. Longest Common Subsequence&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int i = 1; i &amp;lt;= n; ++i) {
   for (int j = 1; j &amp;lt;= m; ++j) {
       if (text1[i-1] == text2[j-1]) {
           dp[i][j] = dp[i-1][j-1] + 1;
       } else {
           dp[i][j] = max(dp[i-1][j], dp[i][j-1]);
       }
   }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/palindromic-substrings/&quot;&gt;647. Palindromic Substrings&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int l = 1; l &amp;lt; n; ++l) {
   for (int i = 0; i &amp;lt; n-l; ++i) {
       int j = i + l;
       if (s[i] == s[j] &amp;amp;&amp;amp; dp[i+1][j-1] == j-i-1) {
           dp[i][j] = dp[i+1][j-1] + 2;
       } else {
           dp[i][j] = 0;
       }
   }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-subsequence/&quot;&gt;516. Longest Palindromic Subsequence&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/shortest-common-supersequence/&quot;&gt;1092. Shortest Common Supersequence&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/edit-distance/&quot;&gt;72. Edit Distance&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/distinct-subsequences/&quot;&gt;115. Distinct Subsequences&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&quot;&gt;712. Minimum ASCII Delete Sum for Two Strings&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/longest-palindromic-substring/&quot;&gt;5. Longest Palindromic Substring&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&quot;decision-making&quot;&gt;Decision Making&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;Problem List: &lt;a href=&quot;https://leetcode.com/list/55af7bu7&quot;&gt;https://leetcode.com/list/55af7bu7&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The general problem statement for this pattern is forgiven situation decide whether to use or not to use the current state. So, the problem requires you to make a decision at a current state.&lt;/p&gt;

&lt;h3 id=&quot;statement-4&quot;&gt;Statement&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given a set of values find an answer with an option to choose or ignore the current value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;approach-4&quot;&gt;Approach&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you decide to choose the current value use the previous result where the value was ignored; vice-versa, if you decide to ignore the current value use previous result where value was used.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;// i - indexing a set of values
// j - options to ignore j values
for (int i = 1; i &amp;lt; n; ++i) {
   for (int j = 1; j &amp;lt;= k; ++j) {
       dp[i][j] = max({dp[i][j], dp[i-1][j] + arr[i], dp[i-1][j-1]});
       dp[i][j-1] = max({dp[i][j-1], dp[i-1][j-1] + arr[i], arr[i]});
   }
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/house-robber/&quot;&gt;198. House Robber&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Easy&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;for (int i = 1; i &amp;lt; n; ++i) {
   dp[i][1] = max(dp[i-1][0] + nums[i], dp[i-1][1]);
   dp[i][0] = dp[i-1][1];
}
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&quot;&gt;121. Best Time to Buy and Sell Stock&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Easy&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&quot;&gt;714. Best Time to Buy and Sell Stock with Transaction Fee&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&quot;&gt;309. Best Time to Buy and Sell Stock with Cooldown&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Medium&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&quot;&gt;123. Best Time to Buy and Sell Stock III&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&quot;&gt;188. Best Time to Buy and Sell Stock IV&lt;/a&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Hard&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I hope these tips will be helpful 😊&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>DP for Beginners</title>
		<link href="https://samir.pages.dev/posts/dp-for-beginners/"/>
		<updated>2023-03-21T00:00:00+05:30</updated>
		<description type="html">&lt;p&gt;&lt;strong&gt;Longest Increasing Subsequence variants:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-increasing-subsequence/&quot;&gt;https://leetcode.com/problems/longest-increasing-subsequence/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/largest-divisible-subset/&quot;&gt;https://leetcode.com/problems/largest-divisible-subset/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/russian-doll-envelopes/&quot;&gt;https://leetcode.com/problems/russian-doll-envelopes/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/maximum-length-of-pair-chain/&quot;&gt;https://leetcode.com/problems/maximum-length-of-pair-chain/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&quot;&gt;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/delete-and-earn/&quot;&gt;https://leetcode.com/problems/delete-and-earn/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-string-chain/&quot;&gt;https://leetcode.com/problems/longest-string-chain/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Partition Subset:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/partition-equal-subset-sum/&quot;&gt;https://leetcode.com/problems/partition-equal-subset-sum/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/last-stone-weight-ii/&quot;&gt;https://leetcode.com/problems/last-stone-weight-ii/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;BitMasking:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&quot;&gt;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Longest Common Subsequence Variant:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-common-subsequence/&quot;&gt;https://leetcode.com/problems/longest-common-subsequence/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/edit-distance/&quot;&gt;https://leetcode.com/problems/edit-distance/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/distinct-subsequences/&quot;&gt;https://leetcode.com/problems/distinct-subsequences/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&quot;&gt;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Palindrome:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/palindrome-partitioning-ii/&quot;&gt;https://leetcode.com/problems/palindrome-partitioning-ii/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/palindromic-substrings/&quot;&gt;https://leetcode.com/problems/palindromic-substrings/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Coin Change variant:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/coin-change/&quot;&gt;https://leetcode.com/problems/coin-change/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/coin-change-2/&quot;&gt;https://leetcode.com/problems/coin-change-2/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/combination-sum-iv/&quot;&gt;https://leetcode.com/problems/combination-sum-iv/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/perfect-squares/&quot;&gt;https://leetcode.com/problems/perfect-squares/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-for-tickets/&quot;&gt;https://leetcode.com/problems/minimum-cost-for-tickets/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Matrix multiplication variant:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&quot;&gt;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&quot;&gt;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/burst-balloons/&quot;&gt;https://leetcode.com/problems/burst-balloons/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Matrix/2D Array:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/matrix-block-sum/&quot;&gt;https://leetcode.com/problems/matrix-block-sum/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/range-sum-query-2d-immutable/&quot;&gt;https://leetcode.com/problems/range-sum-query-2d-immutable/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/dungeon-game/&quot;&gt;https://leetcode.com/problems/dungeon-game/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/triangle/&quot;&gt;https://leetcode.com/problems/triangle/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/maximal-square/&quot;&gt;https://leetcode.com/problems/maximal-square/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-falling-path-sum/&quot;&gt;https://leetcode.com/problems/minimum-falling-path-sum/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hash + DP:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/target-sum/&quot;&gt;https://leetcode.com/problems/target-sum/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-arithmetic-sequence/&quot;&gt;https://leetcode.com/problems/longest-arithmetic-sequence/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&quot;&gt;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&quot;&gt;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;State machine:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Depth First Search + DP:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/out-of-boundary-paths/&quot;&gt;https://leetcode.com/problems/out-of-boundary-paths/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/knight-probability-in-chessboard/&quot;&gt;https://leetcode.com/problems/knight-probability-in-chessboard/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimax DP:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/predict-the-winner/&quot;&gt;https://leetcode.com/problems/predict-the-winner/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/stone-game/&quot;&gt;https://leetcode.com/problems/stone-game/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Misc:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/greatest-sum-divisible-by-three/&quot;&gt;https://leetcode.com/problems/greatest-sum-divisible-by-three/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/decode-ways/&quot;&gt;https://leetcode.com/problems/decode-ways/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/perfect-squares/&quot;&gt;https://leetcode.com/problems/perfect-squares/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/count-numbers-with-unique-digits/&quot;&gt;https://leetcode.com/problems/count-numbers-with-unique-digits/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-turbulent-subarray/&quot;&gt;https://leetcode.com/problems/longest-turbulent-subarray/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&quot;&gt;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;sample-solutions-for-each-of-above-problem-type&quot;&gt;Sample solutions for each of above problem type:&lt;/h1&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Longest Increasing Subsequence&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-increasing-subsequence/&quot;&gt;https://leetcode.com/problems/longest-increasing-subsequence/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/largest-divisible-subset/&quot;&gt;https://leetcode.com/problems/largest-divisible-subset/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/russian-doll-envelopes/&quot;&gt;https://leetcode.com/problems/russian-doll-envelopes/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/maximum-length-of-pair-chain/&quot;&gt;https://leetcode.com/problems/maximum-length-of-pair-chain/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&quot;&gt;https://leetcode.com/problems/number-of-longest-increasing-subsequence/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/delete-and-earn/&quot;&gt;https://leetcode.com/problems/delete-and-earn/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-string-chain/&quot;&gt;https://leetcode.com/problems/longest-string-chain/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	int lengthOfLIS(vector&amp;lt;int&amp;gt;&amp;amp; nums) {

		int n = nums.size();

		vector&amp;lt;int&amp;gt;LIS(n+1, 1);

		for (int i = 0; i &amp;lt; n; i++) {
			for (int j = 0; j &amp;lt; i; j++) {
				if (nums[i] &amp;gt; nums[j])
					LIS[i] = max(LIS[i], 1 + LIS[j]);
			}
		}

		int ans = 0;
		for (int i = 0; i &amp;lt; n; i++) {
			ans = max(ans, LIS[i]);
		}

		return ans;
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Partition Subset Sum:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/partition-equal-subset-sum/&quot;&gt;https://leetcode.com/problems/partition-equal-subset-sum/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/last-stone-weight-ii/&quot;&gt;https://leetcode.com/problems/last-stone-weight-ii/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	bool canPartition(vector&amp;lt;int&amp;gt;&amp;amp; nums) {

		int n = nums.size();

		int sum = 0;
		for (int i = 0; i &amp;lt; n; i++)
			sum += nums[i];

		if (sum % 2 != 0) return false;

		int target = sum/2;
		vector&amp;lt;bool&amp;gt;dp(target+1, false);

		dp[0] = true;
		for (int i = 0; i &amp;lt; n; i++) {
			for (int j = target; j &amp;gt;= nums[i]; j--) {
				dp[j] = dp[j] | dp[j - nums[i]];
			}
		}

		return dp[target];
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;BitMasking in DP:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&quot;&gt;https://leetcode.com/problems/partition-to-k-equal-sum-subsets/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
	int dp[(1&amp;lt;&amp;lt;16) + 2];
public:
	bool canPartitionKSubsets(vector&amp;lt;int&amp;gt;&amp;amp; nums, int k) {

		int n = nums.size();

		fill(dp, dp+(1&amp;lt;&amp;lt;16)+2, -1);

		int sum = 0;
		for (int i = 0; i &amp;lt; n; i++)
			sum += nums[i];

		if (sum % k != 0) return false;

		int target = sum/k;

		dp[0] = 0;
		for (int mask = 0; mask &amp;lt; (1&amp;lt;&amp;lt;n); mask++) {
			if (dp[mask] == -1) continue;
			for (int i = 0; i &amp;lt; n; i++) {
				if (!(mask &amp;amp; (1 &amp;lt;&amp;lt; i)) &amp;amp;&amp;amp; dp[mask] + nums[i] &amp;lt;= target)
					dp[mask | (1 &amp;lt;&amp;lt; i)] = (dp[mask] + nums[i]) % target;
			}
		}

		return dp[(1&amp;lt;&amp;lt;n)-1] == 0;
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Longest Common Subsequence&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-common-subsequence/&quot;&gt;https://leetcode.com/problems/longest-common-subsequence/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/edit-distance/&quot;&gt;https://leetcode.com/problems/edit-distance/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/distinct-subsequences/&quot;&gt;https://leetcode.com/problems/distinct-subsequences/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&quot;&gt;https://leetcode.com/problems/minimum-ascii-delete-sum-for-two-strings/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
	int longestCommonSubsequenceUtil(string text1, string text2, int n, int m) {
		if (n == 0 || m == 0)
			return 0;

		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;L(n+1, vector&amp;lt;int&amp;gt;(m+1, 0));

		for (int i = 0; i &amp;lt;= n; i++) {
			for (int j = 0; j &amp;lt;= m; j++) {
				if (i == 0 || j == 0)
					L[i][j] = 0;
				else if (text1[i-1] == text2[j-1])
					L[i][j] = 1 + L[i-1][j-1];
				else
					L[i][j] = max(L[i][j-1], L[i-1][j]);
			}
		}

		return L[n][m];
	}

public:
	int longestCommonSubsequence(string text1, string text2) {
		int n = text1.size();
		int m = text2.size();

		return longestCommonSubsequenceUtil(text1, text2, n, m);
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Palindrome:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/palindrome-partitioning-ii/&quot;&gt;https://leetcode.com/problems/palindrome-partitioning-ii/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/palindromic-substrings/&quot;&gt;https://leetcode.com/problems/palindromic-substrings/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	int minCut(string s) {

		int n = s.length();

		int res[n];
		bool P[n][n];

		for (int i = 0; i &amp;lt; n; i++)
			P[i][i] = true;


		for (int L = 2; L &amp;lt;= n; L++) {
			for (int i = 0; i &amp;lt; n-L+1; i++) {
				int j = i+L-1;

				if (L == 2) {
					P[i][j] = (s[i] == s[j]);
				} else {
					P[i][j] = (s[i] == s[j]) &amp;amp;&amp;amp; P[i+1][j-1];
				}
			}
		}

		for (int i = 0; i &amp;lt; n; i++) {
			if (P[0][i])
				res[i] = 0;
			else {
				res[i] = INT_MAX;
				for (int j = 0; j &amp;lt; i; j++) {
					if (P[j+1][i] &amp;amp;&amp;amp; res[i] &amp;gt; 1 + res[j])
						res[i] = 1+res[j];
				}
			}
		}

		return res[n-1] == INT_MAX ? 1 : res[n-1];
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Coin Change:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/coin-change/&quot;&gt;https://leetcode.com/problems/coin-change/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/coin-change-2/&quot;&gt;https://leetcode.com/problems/coin-change-2/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/combination-sum-iv/&quot;&gt;https://leetcode.com/problems/combination-sum-iv/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/perfect-squares/&quot;&gt;https://leetcode.com/problems/perfect-squares/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-for-tickets/&quot;&gt;https://leetcode.com/problems/minimum-cost-for-tickets/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	int coinChange(vector&amp;lt;int&amp;gt;&amp;amp; coins, int amount) {

		int n = coins.size();
		if (n == 0) return 0;

		vector&amp;lt;int&amp;gt;res(amount+1, INT_MAX);

		res[0] = 0;

		for (int i = 0; i &amp;lt; n; i++) {
			for (int j =  coins[i]; j &amp;lt;= amount; j++) {
				if (res[j-coins[i]] != INT_MAX)
					res[j] = min(res[j], 1+res[j-coins[i]]);
			}
		}

		return res[amount] != INT_MAX ? res[amount] : -1;
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Matrix multiplication:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&quot;&gt;https://leetcode.com/problems/minimum-score-triangulation-of-polygon/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&quot;&gt;https://leetcode.com/problems/minimum-cost-tree-from-leaf-values/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/burst-balloons/&quot;&gt;https://leetcode.com/problems/burst-balloons/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	int minScoreTriangulation(vector&amp;lt;int&amp;gt;&amp;amp; A) {

		int n = A.size();        
		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;dp(n, vector&amp;lt;int&amp;gt;(n, 0));

		for (int L = 2; L &amp;lt;= n; L++) {
			for (int i = 0; i+L &amp;lt; n; i++) {
				int j = i+L;
				dp[i][j] = INT_MAX;
				for (int k = i+1; k &amp;lt; j; k++) {
					dp[i][j] = min(dp[i][j], dp[i][k] + dp[k][j] + A[i]*A[k]*A[j]);
				}
			}
		}

		return dp[0][n-1];
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Matrix/2D Array:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/matrix-block-sum/&quot;&gt;https://leetcode.com/problems/matrix-block-sum/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/range-sum-query-2d-immutable/&quot;&gt;https://leetcode.com/problems/range-sum-query-2d-immutable/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/dungeon-game/&quot;&gt;https://leetcode.com/problems/dungeon-game/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/triangle/&quot;&gt;https://leetcode.com/problems/triangle/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/maximal-square/&quot;&gt;https://leetcode.com/problems/maximal-square/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/minimum-falling-path-sum/&quot;&gt;https://leetcode.com/problems/minimum-falling-path-sum/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; matrixBlockSum(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; mat, int K) {


		int m = mat.size();
		int n = mat[0].size();

		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;sum(m+1, vector&amp;lt;int&amp;gt;(n+1, 0));
		for (int i = 1; i &amp;lt;= m; i++) {
			for (int j = 1; j &amp;lt;= n; j++) {
				sum[i][j] = sum[i-1][j] + sum[i][j-1] - sum[i-1][j-1] + mat[i-1][j-1];
			}
		}

		vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;res(m, vector&amp;lt;int&amp;gt;(n, 0));
		for (int i = 0; i &amp;lt; m; i++) {
			for (int j = 0; j &amp;lt; n; j++) {
				int r1 = max(0, i-K); int c1 = max(0, j-K);
				int r2 = min(m-1, i+K); int c2 = min(n-1, j+K);
				r1++; r2++;
				c1++; c2++;
				res[i][j] = sum[r2][c2] - (sum[r2][c1-1] + sum[r1-1][c2]- sum[r1-1][c1-1]);
			}
		}

		return res;
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Hash + DP:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/target-sum/&quot;&gt;https://leetcode.com/problems/target-sum/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-arithmetic-sequence/&quot;&gt;https://leetcode.com/problems/longest-arithmetic-sequence/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&quot;&gt;https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&quot;&gt;https://leetcode.com/problems/maximum-product-of-splitted-binary-tree/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	int findTargetSumWays(vector&amp;lt;int&amp;gt;&amp;amp; nums, int S) {
		int n = nums.size();
		unordered_map&amp;lt;int, int&amp;gt;hm;

		hm[0] = 1;
		for (int i = 0; i &amp;lt; n; i++) {
			auto mp = hm;
			hm.clear();

			for (auto it = mp.begin(); it != mp.end(); it++) {
				hm[it-&amp;gt;first + nums[i]] += it-&amp;gt;second;
				hm[it-&amp;gt;first - nums[i]] += it-&amp;gt;second;

			}
		}

		return hm[S];
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;State machine:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iv/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-cooldown/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&quot;&gt;https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	int maxProfit(vector&amp;lt;int&amp;gt;&amp;amp; prices, int fee) {

		int n = prices.size();
		vector&amp;lt;int&amp;gt;buy(n, 0);
		vector&amp;lt;int&amp;gt;sell(n, 0);

		buy[0] = -prices[0], sell[0] = 0;
		for (int i = 1; i &amp;lt; n; i++) {
			buy[i] = max(buy[i-1], sell[i-1]-prices[i]);
			sell[i] = max(sell[i-1], buy[i-1]+prices[i]-fee);
		}

		return sell[n-1];
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Depth First Search +DP:&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/out-of-boundary-paths/&quot;&gt;https://leetcode.com/problems/out-of-boundary-paths/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/knight-probability-in-chessboard/&quot;&gt;https://leetcode.com/problems/knight-probability-in-chessboard/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
	int mod = 1000000007;
	int dfs(int m, int n, int N, int r, int c,  vector&amp;lt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;&amp;amp; dp) {
		if (r &amp;lt; 0 || c &amp;lt; 0 || r &amp;gt;= m || c &amp;gt;= n) return 1;
		if (N == 0) return 0;
		if (dp[N][r][c] != -1) return dp[N][r][c]%mod;

		int moves = 0;
		moves =  (moves + dfs(m, n, N-1, r, c+1, dp))%mod;
		moves =  (moves + dfs(m, n, N-1, r, c-1, dp))%mod;
		moves =  (moves + dfs(m, n, N-1, r+1, c, dp))%mod;
		moves =  (moves + dfs(m, n, N-1, r-1, c, dp))%mod;

		dp[N][r][c] = moves%mod;
		return dp[N][r][c];
	}
public:
	int findPaths(int m, int n, int N, int i, int j) {
		vector&amp;lt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;gt;dp(N+1, vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;(m+1, vector&amp;lt;int&amp;gt;(n+1, -1)));
		return dfs(m, n, N, i, j, dp);
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Minimax DP:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/predict-the-winner/&quot;&gt;https://leetcode.com/problems/predict-the-winner/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/stone-game/&quot;&gt;https://leetcode.com/problems/stone-game/&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution {
public:
	bool PredictTheWinner(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
		int n = nums.size();

		int res[n][n];

		for (int i = 0; i &amp;lt; n; i++)
			res[i][i] = nums[i];

		for (int l = 2; l &amp;lt;= n; l++) {
			for (int i = 0; i+l-1 &amp;lt; n; i++) {
				int j = i+l-1;
				int a = (i+1 &amp;lt;= j-1) ? res[i+1][j-1] : 0;
				int b = (i+2 &amp;lt;= j) ? res[i+2][j] : 0;
				int c = (i &amp;lt;= j-2) ? res[i][j-2] : 0;

				res[i][j] = max(nums[i] + min(a,b), nums[j] + min(a, c));
			}
		}

		int total = 0;
		for (int i = 0; i &amp;lt; n; i++)
			total += nums[i];

		return res[0][n-1] &amp;gt;= total - res[0][n-1];
	}
};
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Miscellaneous:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/greatest-sum-divisible-by-three/&quot;&gt;https://leetcode.com/problems/greatest-sum-divisible-by-three/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/decode-ways/&quot;&gt;https://leetcode.com/problems/decode-ways/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/count-numbers-with-unique-digits/&quot;&gt;https://leetcode.com/problems/count-numbers-with-unique-digits/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/longest-turbulent-subarray/&quot;&gt;https://leetcode.com/problems/longest-turbulent-subarray/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&quot;&gt;https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/&lt;/a&gt;&lt;/p&gt;
</description>
	</item>
	
	<item>
		<title>Binary Search Template</title>
		<link href="https://samir.pages.dev/posts/binary-search-template/"/>
		<updated>2023-03-21T00:00:00+05:30</updated>
		<description type="html">&lt;p&gt;Binary Search is quite easy to understand conceptually. Basically, it splits the search space into two halves and only keep the half that probably has the search target and throw away the other half that would not possibly have the answer. In this manner, we reduce the search space to half the size at every step, until we find the target. Binary Search helps us reduce the search time from linear O(n) to logarithmic O(log n). &lt;strong&gt;But when it comes to implementation, it’s rather difficult to write a bug-free code in just a few minutes&lt;/strong&gt;. Some of the most common problems include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When to exit the loop? Should we use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left &amp;lt; right&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left &amp;lt;= right&lt;/code&gt; as the while loop condition?&lt;/li&gt;
  &lt;li&gt;How to initialize the boundary variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right&lt;/code&gt;?&lt;/li&gt;
  &lt;li&gt;How to update the boundary? How to choose the appropriate combination from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left = mid&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left = mid + 1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right = mid&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right = mid - 1&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A rather common misunderstanding of binary search is that people often think this technique could only be used in simple scenario like “Given a sorted array, find a specific value in it”. As a matter of fact, it can be applied to much more complicated situations.&lt;/p&gt;

&lt;p&gt;After a lot of practice in LeetCode, I’ve made a powerful binary search template and solved many Hard problems by just slightly twisting this template. I’ll share the template with you guys in this post. &lt;strong&gt;I don’t want to just show off the code and leave. Most importantly, I want to share the logical thinking: how to apply this general template to all sorts of problems&lt;/strong&gt;. Hopefully, after reading this post, people wouldn’t be pissed off any more when LeetCoding, “This problem could be solved with binary search! Why didn’t I think of that before!”&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-most-generalized-binary-search&quot;&gt;&amp;gt;&amp;gt; Most Generalized Binary Search&lt;/h1&gt;

&lt;p&gt;Suppose we have a &lt;strong&gt;search space&lt;/strong&gt;. It could be an array, a range, etc. Usually it’s sorted in ascending order. For most tasks, we can transform the requirement into the following generalized form:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Minimize k , s.t. condition(k) is True&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The following code is the most generalized binary search template:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def binary_search(array) -&amp;gt; int:
    def condition(value) -&amp;gt; bool:
        pass

    left, right = min(search_space), max(search_space) # could be [0, n], [1, n] etc. Depends on problem
    while left &amp;lt; right:
        mid = left + (right - left) // 2
        if condition(mid):
            right = mid
        else:
            left = mid + 1
    return left
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What’s really nice of this template is that, for most of the binary search problems, &lt;strong&gt;we only need to modify three parts after copy-pasting this template, and never need to worry about corner cases and bugs in code any more&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Correctly initialize the boundary variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right&lt;/code&gt; to specify search space. Only one rule: set up the boundary to &lt;strong&gt;include all possible elements&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Decide return value. Is it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return left&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return left - 1&lt;/code&gt;? Remember this: &lt;strong&gt;after exiting the while loop, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left&lt;/code&gt; is the minimal k​ satisfying the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition&lt;/code&gt; function&lt;/strong&gt;;&lt;/li&gt;
  &lt;li&gt;Design the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition&lt;/code&gt; function. This is the most difficult and most beautiful part. Needs lots of practice.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Below I’ll show you guys how to apply this powerful template to many LeetCode problems.&lt;/p&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-basic-application&quot;&gt;&amp;gt;&amp;gt; Basic Application&lt;/h1&gt;

&lt;h2 id=&quot;278-first-bad-version-easy&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/first-bad-version/&quot;&gt;278. First Bad Version [Easy]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;You are a product manager and currently leading a team to develop a new product. Since each version is developed based on the previous version, all the versions after a bad version are also bad. Suppose you have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; versions &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, 2, ..., n]&lt;/code&gt; and you want to find out the first bad one, which causes all the following ones to be bad. You are given an API &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bool isBadVersion(version)&lt;/code&gt; which will return whether &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;version&lt;/code&gt; is bad.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Given n = 5, and version = 4 is the first bad version.

call isBadVersion(3) -&amp;gt; false
call isBadVersion(5) -&amp;gt; true
call isBadVersion(4) -&amp;gt; true

Then 4 is the first bad version. 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;First, we initialize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left = 1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right = n&lt;/code&gt; to include all possible values. Then we notice that we don’t even need to design the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition&lt;/code&gt; function. It’s already given by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isBadVersion&lt;/code&gt; API. Finding the first bad version is equivalent to finding the minimal k satisfying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isBadVersion(k) is True&lt;/code&gt;. Our template can fit in very nicely:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution:
    def firstBadVersion(self, n) -&amp;gt; int:
        left, right = 1, n
        while left &amp;lt; right:
            mid = left + (right - left) // 2
            if isBadVersion(mid):
                right = mid
            else:
                left = mid + 1
        return left
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;69-sqrtx-easy&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/sqrtx/&quot;&gt;69. Sqrt(x) [Easy]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;int sqrt(int x)&lt;/code&gt;. Compute and return the square root of &lt;em&gt;x&lt;/em&gt;, where &lt;em&gt;x&lt;/em&gt; is guaranteed to be a non-negative integer. Since the return type is an integer, the decimal digits are truncated and only the integer part of the result is returned.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: 4
Output: 2
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: 8
Output: 2
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Easy one. First we need to search for minimal k satisfying condition &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k^2 &amp;gt; x&lt;/code&gt;, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k - 1&lt;/code&gt; is the answer to the question. We can easily come up with the solution. Notice that I set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right = x + 1&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right = x&lt;/code&gt; to deal with special input cases like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x = 0&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x = 1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def mySqrt(x: int) -&amp;gt; int:
    left, right = 0, x + 1
    while left &amp;lt; right:
        mid = left + (right - left) // 2
        if mid * mid &amp;gt; x:
            right = mid
        else:
            left = mid + 1
    return left - 1  # `left` is the minimum k value, `k - 1` is the answer
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;35-search-insert-position-easy&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/search-insert-position/&quot;&gt;35. Search Insert Position [Easy]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order. You may assume no duplicates in the array.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: [1,3,5,6], 5
Output: 2
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: [1,3,5,6], 2
Output: 1
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Very classic application of binary search. We are looking for the minimal k value satisfying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nums[k] &amp;gt;= target&lt;/code&gt;, and we can just copy-paste our template. Notice that our solution is correct regardless of whether the input array &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nums&lt;/code&gt; has duplicates. Also notice that the input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;target&lt;/code&gt; might be larger than all elements in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nums&lt;/code&gt; and therefore needs to placed at the end of the array. That’s why we should initialize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right = len(nums)&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;right = len(nums) - 1&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;class Solution:
    def searchInsert(self, nums: List[int], target: int) -&amp;gt; int:
        left, right = 0, len(nums)
        while left &amp;lt; right:
            mid = left + (right - left) // 2
            if nums[mid] &amp;gt;= target:
                right = mid
            else:
                left = mid + 1
        return left
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-advanced-application&quot;&gt;&amp;gt;&amp;gt; Advanced Application&lt;/h1&gt;

&lt;p&gt;The above problems are quite easy to solve, because they already give us the array to be searched. We’d know that we should use binary search to solve them at first glance. However, &lt;strong&gt;more often are the situations where the search space and search target are not so readily available&lt;/strong&gt;. Sometimes we won’t even realize that the problem should be solved with binary search – we might just turn to dynamic programming or DFS and get stuck for a very long time.&lt;/p&gt;

&lt;p&gt;As for the question “When can we use binary search?”, my answer is that, &lt;strong&gt;If we can discover some kind of monotonicity, for example, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition(k) is True&lt;/code&gt; then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition(k + 1) is True&lt;/code&gt;, then we can consider binary search&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;1011-capacity-to-ship-packages-within-d-days-medium&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/capacity-to-ship-packages-within-d-days/&quot;&gt;1011. Capacity To Ship Packages Within D Days [Medium]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;A conveyor belt has packages that must be shipped from one port to another within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; days. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;-th package on the conveyor belt has a weight of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weights[i]&lt;/code&gt;. Each day, we load the ship with packages on the conveyor belt (in the order given by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weights&lt;/code&gt;). We may not load more weight than the maximum weight capacity of the ship.&lt;/p&gt;

&lt;p&gt;Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; days.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5
Output: 15
Explanation: 
A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10

Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed. 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Binary search probably would not come to our mind when we first meet this problem. We might automatically treat &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;weights&lt;/code&gt; as search space and then realize we’ve entered a dead end after wasting lots of time. In fact, we are looking for the minimal one among all feasible capacities. We dig out the monotonicity of this problem: if we can successfully ship all packages within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; days with capacity &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt;, then we can definitely ship them all with any capacity larger than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt;. Now we can design a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition&lt;/code&gt; function, let’s call it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible&lt;/code&gt;, given an input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capacity&lt;/code&gt;, it returns whether it’s possible to ship all packages within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt; days. This can run in a greedy way: if there’s still room for the current package, we put this package onto the conveyor belt, otherwise we wait for the next day to place this package. If the total days needed exceeds &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;D&lt;/code&gt;, we return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;, otherwise we return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next, we need to initialize our boundary correctly. Obviously &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capacity&lt;/code&gt; should be at least &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max(weights)&lt;/code&gt;, otherwise the conveyor belt couldn’t ship the heaviest package. On the other hand, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capacity&lt;/code&gt; need not be more than&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sum(weights)&lt;/code&gt;, because then we can ship all packages in just one day.&lt;/p&gt;

&lt;p&gt;Now we’ve got all we need to apply our binary search template:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def shipWithinDays(weights: List[int], D: int) -&amp;gt; int:
    def feasible(capacity) -&amp;gt; bool:
        days = 1
        total = 0
        for weight in weights:
            total += weight
            if total &amp;gt; capacity:  # too heavy, wait for the next day
                total = weight
                days += 1
                if days &amp;gt; D:  # cannot ship within D days
                    return False
        return True

    left, right = max(weights), sum(weights)
    while left &amp;lt; right:
        mid = left + (right - left) // 2
        if feasible(mid):
            right = mid
        else:
            left = mid + 1
    return left
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;410-split-array-largest-sum-hard&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/split-array-largest-sum/&quot;&gt;410. Split Array Largest Sum [Hard]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Given an array which consists of non-negative integers and an integer &lt;em&gt;m&lt;/em&gt;, you can split the array into &lt;em&gt;m&lt;/em&gt; non-empty continuous subarrays. Write an algorithm to minimize the largest sum among these &lt;em&gt;m&lt;/em&gt; subarrays.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input:
nums = [7,2,5,10,8]
m = 2

Output:
18

Explanation:
There are four ways to split nums into two subarrays. The best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If you take a close look, you would probably see how similar this problem is with LC 1011 above. Similarly, we can design a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible&lt;/code&gt; function: given an input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threshold&lt;/code&gt;, then decide if we can split the array into several subarrays such that every subarray-sum is less than or equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threshold&lt;/code&gt;. In this way, we discover the monotonicity of the problem: if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible(m)&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;, then all inputs larger than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; can satisfy &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible&lt;/code&gt; function. You can see that the solution code is exactly the same as LC 1011.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def splitArray(nums: List[int], m: int) -&amp;gt; int:        
    def feasible(threshold) -&amp;gt; bool:
        count = 1
        total = 0
        for num in nums:
            total += num
            if total &amp;gt; threshold:
                total = num
                count += 1
                if count &amp;gt; m:
                    return False
        return True

    left, right = max(nums), sum(nums)
    while left &amp;lt; right:
        mid = left + (right - left) // 2
        if feasible(mid):
            right = mid     
        else:
            left = mid + 1
    return left
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;But we probably would have doubts: It’s true that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;left&lt;/code&gt; returned by our solution is the minimal value satisfying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible&lt;/code&gt;, but how can we know that we can split the original array to &lt;strong&gt;actually get this subarray-sum&lt;/strong&gt;? For example, let’s say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nums = [7,2,5,10,8]&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m = 2&lt;/code&gt;. We have 4 different ways to split the array to get 4 different largest subarray-sum correspondingly: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;25:[[7], [2,5,10,8]]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;23:[[7,2], [5,10,8]]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;18:[[7,2,5], [10,8]]&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;24:[[7,2,5,10], [8]]&lt;/code&gt;. Only 4 values. But our search space &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[max(nums), sum(nums)] = [10, 32]&lt;/code&gt; has much more that just 4 values. That is, no matter how we split the input array, we cannot get most of the values in our search space.&lt;/p&gt;

&lt;p&gt;Let’s say &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; is the minimal value satisfying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible&lt;/code&gt; function. We can prove the correctness of our solution with &lt;strong&gt;proof by contradiction&lt;/strong&gt;. Assume that no subarray’s sum is equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;, that is, every subarray sum is less than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;. The variable &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total&lt;/code&gt; inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible&lt;/code&gt; function keeps track of the total weights of current load. If our assumption is correct, then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total&lt;/code&gt; would always be less than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;. As a result, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible(k - 1)&lt;/code&gt; must be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;, because &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;total&lt;/code&gt; would at most be equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k - 1&lt;/code&gt; and would never trigger the if-clause &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;if total &amp;gt; threshold&lt;/code&gt;, &lt;strong&gt;therefore &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible(k - 1)&lt;/code&gt; must have the same output as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible(k)&lt;/code&gt;, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;&lt;/strong&gt;. But we already know that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; is the minimal value satisfying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible&lt;/code&gt; function, &lt;strong&gt;so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible(k - 1)&lt;/code&gt; has to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;, which is a contradiction&lt;/strong&gt;. So our assumption is incorrect. Now we’ve proved that our algorithm is correct.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;875-koko-eating-bananas-medium&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/koko-eating-bananas/&quot;&gt;875. Koko Eating Bananas [Medium]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Koko loves to eat bananas. There are &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; piles of bananas, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;i&lt;/code&gt;-th pile has &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;piles[i]&lt;/code&gt; bananas. The guards have gone and will come back in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H&lt;/code&gt; hours. Koko can decide her bananas-per-hour eating speed of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K&lt;/code&gt;. Each hour, she chooses some pile of bananas, and eats K bananas from that pile. If the pile has less than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K&lt;/code&gt; bananas, she eats all of them instead, and won’t eat any more bananas during this hour.&lt;/p&gt;

&lt;p&gt;Koko likes to eat slowly, but still wants to finish eating all the bananas before the guards come back. &lt;strong&gt;Return the minimum integer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;K&lt;/code&gt; such that she can eat all the bananas within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H&lt;/code&gt; hours&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: piles = [3,6,7,11], H = 8
Output: 4
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: piles = [30,11,23,4,20], H = 5
Output: 30
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: piles = [30,11,23,4,20], H = 6
Output: 23
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Very similar to LC 1011 and LC 410 mentioned above. Let’s design a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feasible&lt;/code&gt; function, given an input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;speed&lt;/code&gt;, determine whether Koko can finish all bananas within &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;H&lt;/code&gt; hours with hourly eating speed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;speed&lt;/code&gt;. Obviously, the lower bound of the search space is 1, and upper bound is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;max(piles)&lt;/code&gt;, because Koko can only choose one pile of bananas to eat every hour.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def minEatingSpeed(piles: List[int], H: int) -&amp;gt; int:
    def feasible(speed) -&amp;gt; bool:
        # return sum(math.ceil(pile / speed) for pile in piles) &amp;lt;= H  # slower        
        return sum((pile - 1) // speed + 1 for pile in piles) &amp;lt;= H  # faster

    left, right = 1, max(piles)
    while left &amp;lt; right:
        mid = left  + (right - left) // 2
        if feasible(mid):
            right = mid
        else:
            left = mid + 1
    return left
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1482-minimum-number-of-days-to-make-m-bouquets-medium&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/minimum-number-of-days-to-make-m-bouquets/&quot;&gt;1482. Minimum Number of Days to Make m Bouquets [Medium]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Given an integer array &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bloomDay&lt;/code&gt;, an integer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; and an integer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;. We need to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; bouquets. To make a bouquet, you need to use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt; &lt;strong&gt;adjacent flowers&lt;/strong&gt; from the garden. The garden consists of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; flowers, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ith&lt;/code&gt; flower will bloom in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bloomDay[i]&lt;/code&gt; and then can be used in &lt;strong&gt;exactly one&lt;/strong&gt; bouquet. Return &lt;em&gt;the minimum number of days&lt;/em&gt; you need to wait to be able to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; bouquets from the garden. If it is impossible to make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; bouquets return &lt;strong&gt;-1&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden.
We need 3 bouquets each should contain 1 flower.
After day 1: [x, _, _, _, _]   // we can only make one bouquet.
After day 2: [x, _, _, _, x]   // we can only make two bouquets.
After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: bloomDay = [1,10,3,10,2], m = 3, k = 2
Output: -1
Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that we’ve solved three advanced problems above, this one should be pretty easy to do. The monotonicity of this problem is very clear: if we can make &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; bouquets after waiting for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; days, then we can definitely finish that as well if we wait for more than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt; days.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def minDays(bloomDay: List[int], m: int, k: int) -&amp;gt; int:
    def feasible(days) -&amp;gt; bool:
        bonquets, flowers = 0, 0
        for bloom in bloomDay:
            if bloom &amp;gt; days:
                flowers = 0
            else:
                bonquets += (flowers + 1) // k
                flowers = (flowers + 1) % k
        return bonquets &amp;gt;= m

    if len(bloomDay) &amp;lt; m * k:
        return -1
    left, right = 1, max(bloomDay)
    while left &amp;lt; right:
        mid = left + (right - left) // 2
        if feasible(mid):
            right = mid
        else:
            left = mid + 1
    return left
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;668-kth-smallest-number-in-multiplication-table-hard&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/kth-smallest-number-in-multiplication-table/description/&quot;&gt;668. Kth Smallest Number in Multiplication Table [Hard]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Nearly every one have used the &lt;a href=&quot;https://en.wikipedia.org/wiki/Multiplication_table&quot;&gt;Multiplication Table&lt;/a&gt;. But could you find out the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k-th&lt;/code&gt; smallest number quickly from the multiplication table? Given the height &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m&lt;/code&gt; and the length &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt; of a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m * n&lt;/code&gt; Multiplication Table, and a positive integer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k&lt;/code&gt;, you need to return the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k-th&lt;/code&gt; smallest number in this table.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: m = 3, n = 3, k = 5
Output: 3
Explanation: 
The Multiplication Table:
1	2	3
2	4	6
3	6	9

The 5-th smallest number is 3 (1, 2, 2, 3, 3).
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For Kth-Smallest problems like this, what comes to our mind first is Heap. Usually we can maintain a Min-Heap and just pop the top of the Heap for k times. However, that doesn’t work out in this problem. We don’t have every single number in the entire Multiplication Table, instead, we only have the height and the length of the table. If we are to apply Heap method, we need to explicitly calculate these &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m * n&lt;/code&gt; values and save them to a heap. The time complexity and space complexity of this process are both O(mn), which is quite inefficient. This is when binary search comes in. Remember we say that designing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition&lt;/code&gt; function is the most difficult part? In order to find the k-th smallest value in the table, we can design an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough&lt;/code&gt; function, given an input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt;, determine whether there’re at least k values less than or equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt;. &lt;strong&gt;The minimal &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt; satisfying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough&lt;/code&gt; function is the answer we’re looking for&lt;/strong&gt;. Recall that the key to binary search is discovering monotonicity. In this problem, if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt; satisfies &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough&lt;/code&gt;, then of course any value larger than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt; can satisfy. This monotonicity is the fundament of our binary search algorithm.&lt;/p&gt;

&lt;p&gt;Let’s consider search space. Obviously the lower bound should be 1, and the upper bound should be the largest value in the Multiplication Table, which is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;m * n&lt;/code&gt;, then we have search space &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, m * n]&lt;/code&gt;. The overwhelming advantage of binary search solution to heap solution is that it doesn’t need to explicitly calculate all numbers in that table, all it needs is just picking up one value out of the search space and apply &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough&lt;/code&gt; function to this value, to determine should we keep the left half or the right half of the search space. In this way, binary search solution only requires constant space complexity, much better than heap solution.&lt;/p&gt;

&lt;p&gt;Next let’s consider how to implement &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough&lt;/code&gt; function. It can be observed that every row in the Multiplication Table is just multiples of its index. For example, all numbers in 3rd row &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[3,6,9,12,15...]&lt;/code&gt; are multiples of 3. Therefore, we can just go row by row to count the total number of entries less than or equal to input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt;. Following is the complete solution.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def findKthNumber(m: int, n: int, k: int) -&amp;gt; int:
    def enough(num) -&amp;gt; bool:
        count = 0
        for val in range(1, m + 1):  # count row by row
            add = min(num // val, n)
            if add == 0:  # early exit
                break
            count += add
        return count &amp;gt;= k                

    left, right = 1, n * m
    while left &amp;lt; right:
        mid = left + (right - left) // 2
        if enough(mid):
            right = mid
        else:
            left = mid + 1
    return left 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In LC 410 above, we have doubt “Is the result from binary search actually a subarray sum?”. Here we have a similar doubt: “&lt;strong&gt;Is the result from binary search actually in the Multiplication Table?&lt;/strong&gt;”. The answer is yes, and we also can apply proof by contradiction. Denote &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt; as the minimal input that satisfies &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough&lt;/code&gt; function. Let’s assume that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt; is not in the table, which means that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt; is not divisible by any &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt; in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, m]&lt;/code&gt;, that is, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num % val &amp;gt; 0&lt;/code&gt;. Therefore, changing the input from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num - 1&lt;/code&gt; doesn’t have any effect on the expression &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add = min(num // val, n)&lt;/code&gt;. So &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough(num - 1)&lt;/code&gt; would also return &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;True&lt;/code&gt;, same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough(num)&lt;/code&gt;. But we already know &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt; is the minimal input satisfying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough&lt;/code&gt; function, so &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough(num - 1)&lt;/code&gt; has to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;False&lt;/code&gt;. Contradiction! The opposite of our original assumption is true: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt; is actually in the table.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;719-find-k-th-smallest-pair-distance-hard&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/find-k-th-smallest-pair-distance/&quot;&gt;719. Find K-th Smallest Pair Distance [Hard]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Given an integer array, return the k-th smallest &lt;strong&gt;distance&lt;/strong&gt; among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input:
nums = [1,3,1]
k = 1
Output: 0 
Explanation:
Following are all the pairs. The 1st smallest distance pair is (1,1), and its distance is 0.
(1,3) -&amp;gt; 2
(1,1) -&amp;gt; 0
(3,1) -&amp;gt; 2
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Very similar to LC 668 above, both are about finding Kth-Smallest. Just like LC 668, We can design an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough&lt;/code&gt; function, given an input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distance&lt;/code&gt;, determine whether there’re at least k pairs whose distances are less than or equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distance&lt;/code&gt;. We can sort the input array and use two pointers (fast pointer and slow pointer, pointed at a pair) to scan it. Both pointers go from leftmost end. If the current pair pointed at has a distance less than or equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;distance&lt;/code&gt;, all pairs between these pointers are valid (since the array is already sorted), we move forward the fast pointer. Otherwise, we move forward the slow pointer. By the time both pointers reach the rightmost end, we finish our scan and see if total counts exceed k. Here is the implementation:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def enough(distance) -&amp;gt; bool:  # two pointers
    count, i, j = 0, 0, 0
    while i &amp;lt; n or j &amp;lt; n:
        while j &amp;lt; n and nums[j] - nums[i] &amp;lt;= distance:  # move fast pointer
            j += 1
        count += j - i - 1  # count pairs
        i += 1  # move slow pointer
    return count &amp;gt;= k
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Obviously, our search space should be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[0, max(nums) - min(nums)]&lt;/code&gt;. Now we are ready to copy-paste our template:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def smallestDistancePair(nums: List[int], k: int) -&amp;gt; int:
    nums.sort()
    n = len(nums)
    left, right = 0, nums[-1] - nums[0]
    while left &amp;lt; right:
        mid = left + (right - left) // 2
        if enough(mid):
            right = mid
        else:
            left = mid + 1
    return left
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1201-ugly-number-iii-medium&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/ugly-number-iii/&quot;&gt;1201. Ugly Number III [Medium]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Write a program to find the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;-th ugly number. Ugly numbers are &lt;strong&gt;positive integers&lt;/strong&gt; which are divisible by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; &lt;strong&gt;or&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: n = 3, a = 2, b = 3, c = 5
Output: 4
Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: n = 4, a = 2, b = 3, c = 4
Output: 6
Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nothing special. Still finding the Kth-Smallest. We need to design an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;enough&lt;/code&gt; function, given an input &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt;, determine whether there are at least n ugly numbers less than or equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;num&lt;/code&gt;. Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt; might be a multiple of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;, or the other way round, we need the help of greatest common divisor to avoid counting duplicate numbers.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def nthUglyNumber(n: int, a: int, b: int, c: int) -&amp;gt; int:
    def enough(num) -&amp;gt; bool:
        total = num//a + num//b + num//c - num//ab - num//ac - num//bc + num//abc
        return total &amp;gt;= n

    ab = a * b // math.gcd(a, b)
    ac = a * c // math.gcd(a, c)
    bc = b * c // math.gcd(b, c)
    abc = a * bc // math.gcd(a, bc)
    left, right = 1, 10 ** 10
    while left &amp;lt; right:
        mid = left + (right - left) // 2
        if enough(mid):
            right = mid
        else:
            left = mid + 1
    return left
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;1283-find-the-smallest-divisor-given-a-threshold-medium&quot;&gt;&lt;a href=&quot;https://leetcode.com/problems/find-the-smallest-divisor-given-a-threshold/&quot;&gt;1283. Find the Smallest Divisor Given a Threshold [Medium]&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Given an array of integers &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nums&lt;/code&gt; and an integer &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threshold&lt;/code&gt;, we will choose a positive integer divisor and divide all the array by it and sum the result of the division. Find the &lt;strong&gt;smallest&lt;/strong&gt; divisor such that the result mentioned above is less than or equal to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threshold&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Each result of division is rounded to the nearest integer greater than or equal to that element. (For example: 7/3 = 3 and 10/2 = 5). It is guaranteed that there will be an answer.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Example :&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum to 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After so many problems introduced above, this one should be a piece of cake. We don’t even need to bother to design a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition&lt;/code&gt; function, because the problem has already told us explicitly what condition we need to satisfy.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;def smallestDivisor(nums: List[int], threshold: int) -&amp;gt; int:
    def condition(divisor) -&amp;gt; bool:
        return sum((num - 1) // divisor + 1 for num in nums) &amp;lt;= threshold

    left, right = 1, max(nums)
    while left &amp;lt; right:
        mid = left + (right - left) // 2
        if condition(mid):
            right = mid
        else:
            left = mid + 1
    return left
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;end&quot;&gt;End&lt;/h1&gt;

&lt;p&gt;Wow, thank you so much for making it to the end! Really appreciate that. As you can see from the python codes above, they all look very similar to each other. That’s because I copy-pasted my own template all the time. No exception. This is the strong proof of my template’s powerfulness and adaptability. I believe everyone can acquire this binary search template to solve many problems. All we need is just more practice to build up our ability to discover the monotonicity of the problem and to design a beautiful &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;condition&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;Hope this helps.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Reference&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/split-array-largest-sum/discuss/89819/C%2B%2B-Fast-Very-clear-explanation-Clean-Code-Solution-with-Greedy-Algorithm-and-Binary-Search&quot;&gt;[C++ / Fast / Very clear explanation / Clean Code] Solution with Greedy Algorithm and Binary Search&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/find-k-th-smallest-pair-distance/discuss/109082/Approach-the-problem-using-the-%22trial-and-error%22-algorithm&quot;&gt;Approach the problem using the “trial and error” algorithm&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/binary-search/discuss/423162/Binary-Search-101-The-Ultimate-Binary-Search-Handbook&quot;&gt;Binary Search 101 The-Ultimate-Binary-Search-Handbook - LeetCode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://leetcode.com/problems/ugly-number-iii/discuss/387539/cpp-Binary-Search-with-picture-and-Binary-Search-Template&quot;&gt;ugly-number-iii Binary Search with picture &amp;amp; Binary Search Template - LeetCode&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
	</item>
	
	<item>
		<title>Embed MusicApp</title>
		<link href="https://samir.pages.dev/posts/embed-music/"/>
		<updated>2023-03-11T00:00:00+05:30</updated>
		<description type="html">&lt;p&gt;Embed &lt;a href=&quot;https://samirpaul1.github.io/music/embed&quot;&gt;&lt;b&gt;samirpaul.in/music/embed&lt;/b&gt;&lt;/a&gt; music player(Lofi Study Music) to any website:&lt;/p&gt;

&lt;h3 id=&quot;demo&quot;&gt;Demo:&lt;/h3&gt;

&lt;iframe src=&quot;https://samirpaul1.github.io/music/embed/index.html&quot; title=&quot;Embed MusicApp&quot; frameborder=&quot;0&quot; loading=&quot;lazy&quot; marginheight=&quot;0&quot; marginwidth=&quot;0&quot; width=&quot;100%&quot; height=&quot;223&quot; scrolling=&quot;no&quot;&gt;
&lt;/iframe&gt;

&lt;h3 id=&quot;code&quot;&gt;Code:&lt;/h3&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;iframe&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://samirpaul1.github.io/music/embed&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;title=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Embed MusicApp&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;frameborder=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;loading=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;lazy&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;marginheight=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;marginwidth=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;100%&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;223&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;scrolling=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;no&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/iframe&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
	</item>
	

</channel>
</rss>
